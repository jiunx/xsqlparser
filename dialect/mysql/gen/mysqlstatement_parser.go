// Code generated from E:/GoProject/src/github.com/2212442929/xsqlparser/dialect/mysql/grammer\MySQLStatement.g4 by ANTLR 4.9.3. DO NOT EDIT.

package parser // MySQLStatement

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 782, 8008,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4,
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97,
	9, 97, 4, 98, 9, 98, 4, 99, 9, 99, 4, 100, 9, 100, 4, 101, 9, 101, 4, 102,
	9, 102, 4, 103, 9, 103, 4, 104, 9, 104, 4, 105, 9, 105, 4, 106, 9, 106,
	4, 107, 9, 107, 4, 108, 9, 108, 4, 109, 9, 109, 4, 110, 9, 110, 4, 111,
	9, 111, 4, 112, 9, 112, 4, 113, 9, 113, 4, 114, 9, 114, 4, 115, 9, 115,
	4, 116, 9, 116, 4, 117, 9, 117, 4, 118, 9, 118, 4, 119, 9, 119, 4, 120,
	9, 120, 4, 121, 9, 121, 4, 122, 9, 122, 4, 123, 9, 123, 4, 124, 9, 124,
	4, 125, 9, 125, 4, 126, 9, 126, 4, 127, 9, 127, 4, 128, 9, 128, 4, 129,
	9, 129, 4, 130, 9, 130, 4, 131, 9, 131, 4, 132, 9, 132, 4, 133, 9, 133,
	4, 134, 9, 134, 4, 135, 9, 135, 4, 136, 9, 136, 4, 137, 9, 137, 4, 138,
	9, 138, 4, 139, 9, 139, 4, 140, 9, 140, 4, 141, 9, 141, 4, 142, 9, 142,
	4, 143, 9, 143, 4, 144, 9, 144, 4, 145, 9, 145, 4, 146, 9, 146, 4, 147,
	9, 147, 4, 148, 9, 148, 4, 149, 9, 149, 4, 150, 9, 150, 4, 151, 9, 151,
	4, 152, 9, 152, 4, 153, 9, 153, 4, 154, 9, 154, 4, 155, 9, 155, 4, 156,
	9, 156, 4, 157, 9, 157, 4, 158, 9, 158, 4, 159, 9, 159, 4, 160, 9, 160,
	4, 161, 9, 161, 4, 162, 9, 162, 4, 163, 9, 163, 4, 164, 9, 164, 4, 165,
	9, 165, 4, 166, 9, 166, 4, 167, 9, 167, 4, 168, 9, 168, 4, 169, 9, 169,
	4, 170, 9, 170, 4, 171, 9, 171, 4, 172, 9, 172, 4, 173, 9, 173, 4, 174,
	9, 174, 4, 175, 9, 175, 4, 176, 9, 176, 4, 177, 9, 177, 4, 178, 9, 178,
	4, 179, 9, 179, 4, 180, 9, 180, 4, 181, 9, 181, 4, 182, 9, 182, 4, 183,
	9, 183, 4, 184, 9, 184, 4, 185, 9, 185, 4, 186, 9, 186, 4, 187, 9, 187,
	4, 188, 9, 188, 4, 189, 9, 189, 4, 190, 9, 190, 4, 191, 9, 191, 4, 192,
	9, 192, 4, 193, 9, 193, 4, 194, 9, 194, 4, 195, 9, 195, 4, 196, 9, 196,
	4, 197, 9, 197, 4, 198, 9, 198, 4, 199, 9, 199, 4, 200, 9, 200, 4, 201,
	9, 201, 4, 202, 9, 202, 4, 203, 9, 203, 4, 204, 9, 204, 4, 205, 9, 205,
	4, 206, 9, 206, 4, 207, 9, 207, 4, 208, 9, 208, 4, 209, 9, 209, 4, 210,
	9, 210, 4, 211, 9, 211, 4, 212, 9, 212, 4, 213, 9, 213, 4, 214, 9, 214,
	4, 215, 9, 215, 4, 216, 9, 216, 4, 217, 9, 217, 4, 218, 9, 218, 4, 219,
	9, 219, 4, 220, 9, 220, 4, 221, 9, 221, 4, 222, 9, 222, 4, 223, 9, 223,
	4, 224, 9, 224, 4, 225, 9, 225, 4, 226, 9, 226, 4, 227, 9, 227, 4, 228,
	9, 228, 4, 229, 9, 229, 4, 230, 9, 230, 4, 231, 9, 231, 4, 232, 9, 232,
	4, 233, 9, 233, 4, 234, 9, 234, 4, 235, 9, 235, 4, 236, 9, 236, 4, 237,
	9, 237, 4, 238, 9, 238, 4, 239, 9, 239, 4, 240, 9, 240, 4, 241, 9, 241,
	4, 242, 9, 242, 4, 243, 9, 243, 4, 244, 9, 244, 4, 245, 9, 245, 4, 246,
	9, 246, 4, 247, 9, 247, 4, 248, 9, 248, 4, 249, 9, 249, 4, 250, 9, 250,
	4, 251, 9, 251, 4, 252, 9, 252, 4, 253, 9, 253, 4, 254, 9, 254, 4, 255,
	9, 255, 4, 256, 9, 256, 4, 257, 9, 257, 4, 258, 9, 258, 4, 259, 9, 259,
	4, 260, 9, 260, 4, 261, 9, 261, 4, 262, 9, 262, 4, 263, 9, 263, 4, 264,
	9, 264, 4, 265, 9, 265, 4, 266, 9, 266, 4, 267, 9, 267, 4, 268, 9, 268,
	4, 269, 9, 269, 4, 270, 9, 270, 4, 271, 9, 271, 4, 272, 9, 272, 4, 273,
	9, 273, 4, 274, 9, 274, 4, 275, 9, 275, 4, 276, 9, 276, 4, 277, 9, 277,
	4, 278, 9, 278, 4, 279, 9, 279, 4, 280, 9, 280, 4, 281, 9, 281, 4, 282,
	9, 282, 4, 283, 9, 283, 4, 284, 9, 284, 4, 285, 9, 285, 4, 286, 9, 286,
	4, 287, 9, 287, 4, 288, 9, 288, 4, 289, 9, 289, 4, 290, 9, 290, 4, 291,
	9, 291, 4, 292, 9, 292, 4, 293, 9, 293, 4, 294, 9, 294, 4, 295, 9, 295,
	4, 296, 9, 296, 4, 297, 9, 297, 4, 298, 9, 298, 4, 299, 9, 299, 4, 300,
	9, 300, 4, 301, 9, 301, 4, 302, 9, 302, 4, 303, 9, 303, 4, 304, 9, 304,
	4, 305, 9, 305, 4, 306, 9, 306, 4, 307, 9, 307, 4, 308, 9, 308, 4, 309,
	9, 309, 4, 310, 9, 310, 4, 311, 9, 311, 4, 312, 9, 312, 4, 313, 9, 313,
	4, 314, 9, 314, 4, 315, 9, 315, 4, 316, 9, 316, 4, 317, 9, 317, 4, 318,
	9, 318, 4, 319, 9, 319, 4, 320, 9, 320, 4, 321, 9, 321, 4, 322, 9, 322,
	4, 323, 9, 323, 4, 324, 9, 324, 4, 325, 9, 325, 4, 326, 9, 326, 4, 327,
	9, 327, 4, 328, 9, 328, 4, 329, 9, 329, 4, 330, 9, 330, 4, 331, 9, 331,
	4, 332, 9, 332, 4, 333, 9, 333, 4, 334, 9, 334, 4, 335, 9, 335, 4, 336,
	9, 336, 4, 337, 9, 337, 4, 338, 9, 338, 4, 339, 9, 339, 4, 340, 9, 340,
	4, 341, 9, 341, 4, 342, 9, 342, 4, 343, 9, 343, 4, 344, 9, 344, 4, 345,
	9, 345, 4, 346, 9, 346, 4, 347, 9, 347, 4, 348, 9, 348, 4, 349, 9, 349,
	4, 350, 9, 350, 4, 351, 9, 351, 4, 352, 9, 352, 4, 353, 9, 353, 4, 354,
	9, 354, 4, 355, 9, 355, 4, 356, 9, 356, 4, 357, 9, 357, 4, 358, 9, 358,
	4, 359, 9, 359, 4, 360, 9, 360, 4, 361, 9, 361, 4, 362, 9, 362, 4, 363,
	9, 363, 4, 364, 9, 364, 4, 365, 9, 365, 4, 366, 9, 366, 4, 367, 9, 367,
	4, 368, 9, 368, 4, 369, 9, 369, 4, 370, 9, 370, 4, 371, 9, 371, 4, 372,
	9, 372, 4, 373, 9, 373, 4, 374, 9, 374, 4, 375, 9, 375, 4, 376, 9, 376,
	4, 377, 9, 377, 4, 378, 9, 378, 4, 379, 9, 379, 4, 380, 9, 380, 4, 381,
	9, 381, 4, 382, 9, 382, 4, 383, 9, 383, 4, 384, 9, 384, 4, 385, 9, 385,
	4, 386, 9, 386, 4, 387, 9, 387, 4, 388, 9, 388, 4, 389, 9, 389, 4, 390,
	9, 390, 4, 391, 9, 391, 4, 392, 9, 392, 4, 393, 9, 393, 4, 394, 9, 394,
	4, 395, 9, 395, 4, 396, 9, 396, 4, 397, 9, 397, 4, 398, 9, 398, 4, 399,
	9, 399, 4, 400, 9, 400, 4, 401, 9, 401, 4, 402, 9, 402, 4, 403, 9, 403,
	4, 404, 9, 404, 4, 405, 9, 405, 4, 406, 9, 406, 4, 407, 9, 407, 4, 408,
	9, 408, 4, 409, 9, 409, 4, 410, 9, 410, 4, 411, 9, 411, 4, 412, 9, 412,
	4, 413, 9, 413, 4, 414, 9, 414, 4, 415, 9, 415, 4, 416, 9, 416, 4, 417,
	9, 417, 4, 418, 9, 418, 4, 419, 9, 419, 4, 420, 9, 420, 4, 421, 9, 421,
	4, 422, 9, 422, 4, 423, 9, 423, 4, 424, 9, 424, 4, 425, 9, 425, 4, 426,
	9, 426, 4, 427, 9, 427, 4, 428, 9, 428, 4, 429, 9, 429, 4, 430, 9, 430,
	4, 431, 9, 431, 4, 432, 9, 432, 4, 433, 9, 433, 4, 434, 9, 434, 4, 435,
	9, 435, 4, 436, 9, 436, 4, 437, 9, 437, 4, 438, 9, 438, 4, 439, 9, 439,
	4, 440, 9, 440, 4, 441, 9, 441, 4, 442, 9, 442, 4, 443, 9, 443, 4, 444,
	9, 444, 4, 445, 9, 445, 4, 446, 9, 446, 4, 447, 9, 447, 4, 448, 9, 448,
	4, 449, 9, 449, 4, 450, 9, 450, 4, 451, 9, 451, 4, 452, 9, 452, 4, 453,
	9, 453, 4, 454, 9, 454, 4, 455, 9, 455, 4, 456, 9, 456, 4, 457, 9, 457,
	4, 458, 9, 458, 4, 459, 9, 459, 4, 460, 9, 460, 4, 461, 9, 461, 4, 462,
	9, 462, 4, 463, 9, 463, 4, 464, 9, 464, 4, 465, 9, 465, 4, 466, 9, 466,
	4, 467, 9, 467, 4, 468, 9, 468, 4, 469, 9, 469, 4, 470, 9, 470, 4, 471,
	9, 471, 4, 472, 9, 472, 4, 473, 9, 473, 4, 474, 9, 474, 4, 475, 9, 475,
	4, 476, 9, 476, 4, 477, 9, 477, 4, 478, 9, 478, 4, 479, 9, 479, 4, 480,
	9, 480, 4, 481, 9, 481, 4, 482, 9, 482, 4, 483, 9, 483, 4, 484, 9, 484,
	4, 485, 9, 485, 4, 486, 9, 486, 4, 487, 9, 487, 4, 488, 9, 488, 4, 489,
	9, 489, 4, 490, 9, 490, 4, 491, 9, 491, 4, 492, 9, 492, 4, 493, 9, 493,
	4, 494, 9, 494, 4, 495, 9, 495, 4, 496, 9, 496, 4, 497, 9, 497, 4, 498,
	9, 498, 4, 499, 9, 499, 4, 500, 9, 500, 4, 501, 9, 501, 4, 502, 9, 502,
	4, 503, 9, 503, 4, 504, 9, 504, 4, 505, 9, 505, 4, 506, 9, 506, 4, 507,
	9, 507, 4, 508, 9, 508, 4, 509, 9, 509, 4, 510, 9, 510, 4, 511, 9, 511,
	4, 512, 9, 512, 4, 513, 9, 513, 4, 514, 9, 514, 4, 515, 9, 515, 4, 516,
	9, 516, 4, 517, 9, 517, 4, 518, 9, 518, 4, 519, 9, 519, 4, 520, 9, 520,
	4, 521, 9, 521, 4, 522, 9, 522, 4, 523, 9, 523, 4, 524, 9, 524, 4, 525,
	9, 525, 4, 526, 9, 526, 4, 527, 9, 527, 4, 528, 9, 528, 4, 529, 9, 529,
	4, 530, 9, 530, 4, 531, 9, 531, 4, 532, 9, 532, 4, 533, 9, 533, 4, 534,
	9, 534, 4, 535, 9, 535, 4, 536, 9, 536, 4, 537, 9, 537, 4, 538, 9, 538,
	4, 539, 9, 539, 4, 540, 9, 540, 4, 541, 9, 541, 4, 542, 9, 542, 4, 543,
	9, 543, 4, 544, 9, 544, 4, 545, 9, 545, 4, 546, 9, 546, 4, 547, 9, 547,
	4, 548, 9, 548, 4, 549, 9, 549, 4, 550, 9, 550, 4, 551, 9, 551, 4, 552,
	9, 552, 4, 553, 9, 553, 4, 554, 9, 554, 4, 555, 9, 555, 4, 556, 9, 556,
	4, 557, 9, 557, 4, 558, 9, 558, 4, 559, 9, 559, 4, 560, 9, 560, 4, 561,
	9, 561, 4, 562, 9, 562, 4, 563, 9, 563, 4, 564, 9, 564, 4, 565, 9, 565,
	4, 566, 9, 566, 4, 567, 9, 567, 4, 568, 9, 568, 4, 569, 9, 569, 4, 570,
	9, 570, 4, 571, 9, 571, 4, 572, 9, 572, 4, 573, 9, 573, 4, 574, 9, 574,
	4, 575, 9, 575, 4, 576, 9, 576, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
	2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
	2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
	2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
	2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
	2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
	2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
	2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
	2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 5, 2, 1253, 10,
	2, 3, 2, 3, 2, 5, 2, 1257, 10, 2, 3, 2, 5, 2, 1260, 10, 2, 3, 2, 5, 2,
	1263, 10, 2, 3, 3, 3, 3, 3, 3, 5, 3, 1268, 10, 3, 3, 3, 3, 3, 5, 3, 1272,
	10, 3, 3, 3, 3, 3, 3, 3, 5, 3, 1277, 10, 3, 3, 3, 5, 3, 1280, 10, 3, 3,
	4, 5, 4, 1283, 10, 4, 3, 4, 5, 4, 1286, 10, 4, 3, 5, 3, 5, 5, 5, 1290,
	10, 5, 3, 5, 5, 5, 1293, 10, 5, 3, 5, 3, 5, 3, 5, 3, 5, 7, 5, 1299, 10,
	5, 12, 5, 14, 5, 1302, 11, 5, 3, 5, 5, 5, 1305, 10, 5, 3, 5, 5, 5, 1308,
	10, 5, 3, 6, 3, 6, 3, 6, 7, 6, 1313, 10, 6, 12, 6, 14, 6, 1316, 11, 6,
	3, 7, 3, 7, 5, 7, 1320, 10, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 5, 8, 1327,
	10, 8, 3, 8, 3, 8, 3, 9, 5, 9, 1332, 10, 9, 3, 9, 3, 9, 5, 9, 1336, 10,
	9, 3, 9, 5, 9, 1339, 10, 9, 3, 9, 3, 9, 3, 10, 3, 10, 3, 10, 3, 10, 3,
	10, 3, 10, 3, 10, 7, 10, 1350, 10, 10, 12, 10, 14, 10, 1353, 11, 10, 3,
	11, 3, 11, 3, 11, 5, 11, 1358, 10, 11, 3, 12, 3, 12, 3, 12, 3, 12, 7, 12,
	1364, 10, 12, 12, 12, 14, 12, 1367, 11, 12, 3, 12, 3, 12, 3, 13, 3, 13,
	5, 13, 1373, 10, 13, 3, 13, 5, 13, 1376, 10, 13, 3, 13, 3, 13, 5, 13, 1380,
	10, 13, 3, 13, 3, 13, 3, 13, 5, 13, 1385, 10, 13, 3, 14, 3, 14, 3, 15,
	3, 15, 5, 15, 1391, 10, 15, 3, 15, 5, 15, 1394, 10, 15, 3, 15, 3, 15, 3,
	15, 3, 15, 7, 15, 1400, 10, 15, 12, 15, 14, 15, 1403, 11, 15, 3, 15, 5,
	15, 1406, 10, 15, 3, 15, 5, 15, 1409, 10, 15, 3, 16, 5, 16, 1412, 10, 16,
	3, 16, 3, 16, 5, 16, 1416, 10, 16, 3, 16, 5, 16, 1419, 10, 16, 3, 16, 3,
	16, 3, 17, 5, 17, 1424, 10, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 5, 17,
	1431, 10, 17, 3, 17, 5, 17, 1434, 10, 17, 3, 17, 5, 17, 1437, 10, 17, 3,
	18, 5, 18, 1440, 10, 18, 3, 18, 5, 18, 1443, 10, 18, 3, 19, 3, 19, 3, 19,
	3, 19, 3, 20, 5, 20, 1450, 10, 20, 3, 20, 3, 20, 3, 20, 3, 20, 7, 20, 1456,
	10, 20, 12, 20, 14, 20, 1459, 11, 20, 3, 21, 3, 21, 3, 21, 3, 21, 7, 21,
	1465, 10, 21, 12, 21, 14, 21, 1468, 11, 21, 3, 21, 3, 21, 3, 21, 3, 21,
	5, 21, 1474, 10, 21, 3, 22, 3, 22, 3, 22, 5, 22, 1479, 10, 22, 3, 23, 3,
	23, 3, 23, 3, 24, 3, 24, 3, 24, 3, 24, 5, 24, 1488, 10, 24, 3, 24, 5, 24,
	1491, 10, 24, 3, 24, 5, 24, 1494, 10, 24, 3, 24, 5, 24, 1497, 10, 24, 3,
	25, 5, 25, 1500, 10, 25, 3, 25, 5, 25, 1503, 10, 25, 3, 25, 5, 25, 1506,
	10, 25, 3, 26, 3, 26, 3, 26, 5, 26, 1511, 10, 26, 3, 26, 5, 26, 1514, 10,
	26, 3, 26, 5, 26, 1517, 10, 26, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27,
	3, 27, 3, 27, 3, 27, 5, 27, 1528, 10, 27, 3, 28, 3, 28, 5, 28, 1532, 10,
	28, 3, 28, 3, 28, 5, 28, 1536, 10, 28, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29,
	3, 29, 3, 29, 5, 29, 1545, 10, 29, 3, 29, 3, 29, 3, 29, 3, 29, 5, 29, 1551,
	10, 29, 3, 30, 5, 30, 1554, 10, 30, 3, 30, 3, 30, 5, 30, 1558, 10, 30,
	3, 30, 5, 30, 1561, 10, 30, 3, 30, 5, 30, 1564, 10, 30, 3, 31, 3, 31, 3,
	31, 3, 31, 3, 31, 5, 31, 1571, 10, 31, 3, 31, 3, 31, 7, 31, 1575, 10, 31,
	12, 31, 14, 31, 1578, 11, 31, 3, 32, 3, 32, 5, 32, 1582, 10, 32, 3, 32,
	3, 32, 5, 32, 1586, 10, 32, 3, 33, 3, 33, 3, 33, 3, 33, 5, 33, 1592, 10,
	33, 5, 33, 1594, 10, 33, 3, 33, 3, 33, 3, 34, 3, 34, 3, 34, 5, 34, 1601,
	10, 34, 3, 35, 3, 35, 7, 35, 1605, 10, 35, 12, 35, 14, 35, 1608, 11, 35,
	3, 35, 3, 35, 5, 35, 1612, 10, 35, 3, 35, 5, 35, 1615, 10, 35, 3, 35, 5,
	35, 1618, 10, 35, 3, 35, 5, 35, 1621, 10, 35, 3, 35, 5, 35, 1624, 10, 35,
	3, 35, 5, 35, 1627, 10, 35, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 7,
	36, 1635, 10, 36, 12, 36, 14, 36, 1638, 11, 36, 5, 36, 1640, 10, 36, 3,
	36, 5, 36, 1643, 10, 36, 3, 37, 3, 37, 3, 37, 3, 37, 7, 37, 1649, 10, 37,
	12, 37, 14, 37, 1652, 11, 37, 3, 38, 3, 38, 3, 38, 3, 38, 5, 38, 1658,
	10, 38, 3, 39, 3, 39, 3, 39, 3, 39, 5, 39, 1664, 10, 39, 3, 39, 5, 39,
	1667, 10, 39, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3,
	40, 3, 40, 5, 40, 1679, 10, 40, 3, 40, 5, 40, 1682, 10, 40, 3, 40, 5, 40,
	1685, 10, 40, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 5, 41, 1692, 10, 41, 3,
	41, 5, 41, 1695, 10, 41, 3, 42, 3, 42, 3, 42, 3, 42, 3, 43, 3, 43, 3, 43,
	3, 43, 3, 43, 3, 43, 5, 43, 1707, 10, 43, 3, 44, 3, 44, 5, 44, 1711, 10,
	44, 3, 45, 3, 45, 3, 45, 5, 45, 1716, 10, 45, 3, 45, 5, 45, 1719, 10, 45,
	3, 45, 3, 45, 3, 45, 5, 45, 1724, 10, 45, 3, 45, 3, 45, 3, 45, 3, 45, 5,
	45, 1730, 10, 45, 3, 45, 3, 45, 3, 45, 5, 45, 1735, 10, 45, 3, 45, 3, 45,
	6, 45, 1739, 10, 45, 13, 45, 14, 45, 1740, 5, 45, 1743, 10, 45, 3, 45,
	3, 45, 6, 45, 1747, 10, 45, 13, 45, 14, 45, 1748, 5, 45, 1751, 10, 45,
	3, 45, 3, 45, 3, 45, 3, 45, 5, 45, 1757, 10, 45, 3, 45, 5, 45, 1760, 10,
	45, 3, 45, 5, 45, 1763, 10, 45, 3, 46, 3, 46, 3, 46, 5, 46, 1768, 10, 46,
	3, 46, 5, 46, 1771, 10, 46, 3, 46, 3, 46, 3, 46, 5, 46, 1776, 10, 46, 3,
	46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 5, 46, 1784, 10, 46, 3, 46, 3, 46,
	3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 5, 46, 1793, 10, 46, 3, 46, 3, 46, 3,
	46, 3, 46, 5, 46, 1799, 10, 46, 3, 46, 5, 46, 1802, 10, 46, 3, 46, 5, 46,
	1805, 10, 46, 3, 47, 3, 47, 3, 47, 3, 48, 3, 48, 3, 48, 3, 49, 3, 49, 3,
	49, 3, 49, 3, 49, 7, 49, 1818, 10, 49, 12, 49, 14, 49, 1821, 11, 49, 3,
	50, 3, 50, 5, 50, 1825, 10, 50, 3, 50, 3, 50, 3, 50, 7, 50, 1830, 10, 50,
	12, 50, 14, 50, 1833, 11, 50, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 5, 51,
	1840, 10, 51, 3, 51, 3, 51, 3, 51, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52, 3,
	52, 3, 52, 3, 52, 5, 52, 1853, 10, 52, 3, 53, 3, 53, 3, 54, 3, 54, 5, 54,
	1859, 10, 54, 3, 54, 3, 54, 7, 54, 1863, 10, 54, 12, 54, 14, 54, 1866,
	11, 54, 3, 55, 3, 55, 5, 55, 1870, 10, 55, 3, 55, 5, 55, 1873, 10, 55,
	3, 55, 5, 55, 1876, 10, 55, 3, 56, 3, 56, 3, 57, 3, 57, 3, 57, 3, 58, 3,
	58, 3, 58, 5, 58, 1886, 10, 58, 3, 59, 3, 59, 3, 59, 7, 59, 1891, 10, 59,
	12, 59, 14, 59, 1894, 11, 59, 3, 60, 3, 60, 7, 60, 1898, 10, 60, 12, 60,
	14, 60, 1901, 11, 60, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 5, 61,
	1909, 10, 61, 3, 61, 7, 61, 1912, 10, 61, 12, 61, 14, 61, 1915, 11, 61,
	3, 62, 3, 62, 5, 62, 1919, 10, 62, 3, 62, 5, 62, 1922, 10, 62, 3, 62, 5,
	62, 1925, 10, 62, 3, 62, 5, 62, 1928, 10, 62, 3, 62, 3, 62, 5, 62, 1932,
	10, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 5, 62, 1939, 10, 62, 3, 62,
	3, 62, 3, 62, 3, 62, 5, 62, 1945, 10, 62, 3, 63, 3, 63, 3, 63, 3, 63, 3,
	63, 7, 63, 1952, 10, 63, 12, 63, 14, 63, 1955, 11, 63, 3, 63, 3, 63, 3,
	64, 3, 64, 3, 64, 7, 64, 1962, 10, 64, 12, 64, 14, 64, 1965, 11, 64, 3,
	65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 5, 65, 1975, 10, 65,
	5, 65, 1977, 10, 65, 3, 65, 3, 65, 3, 65, 3, 65, 7, 65, 1983, 10, 65, 12,
	65, 14, 65, 1986, 11, 65, 3, 65, 3, 65, 3, 66, 3, 66, 3, 66, 5, 66, 1993,
	10, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 5, 66, 2002, 10,
	66, 3, 67, 5, 67, 2005, 10, 67, 3, 67, 3, 67, 5, 67, 2009, 10, 67, 3, 68,
	3, 68, 5, 68, 2013, 10, 68, 3, 68, 3, 68, 3, 69, 3, 69, 5, 69, 2019, 10,
	69, 3, 69, 3, 69, 3, 69, 3, 69, 5, 69, 2025, 10, 69, 3, 69, 5, 69, 2028,
	10, 69, 3, 70, 3, 70, 3, 70, 3, 70, 3, 70, 3, 70, 3, 70, 5, 70, 2037, 10,
	70, 3, 71, 3, 71, 3, 71, 3, 72, 3, 72, 3, 72, 3, 72, 3, 72, 7, 72, 2047,
	10, 72, 12, 72, 14, 72, 2050, 11, 72, 3, 72, 3, 72, 5, 72, 2054, 10, 72,
	3, 73, 3, 73, 3, 73, 3, 74, 3, 74, 3, 74, 3, 74, 5, 74, 2063, 10, 74, 3,
	74, 3, 74, 3, 74, 3, 74, 3, 74, 5, 74, 2070, 10, 74, 3, 75, 3, 75, 5, 75,
	2074, 10, 75, 3, 76, 3, 76, 5, 76, 2078, 10, 76, 3, 77, 3, 77, 3, 77, 3,
	77, 7, 77, 2084, 10, 77, 12, 77, 14, 77, 2087, 11, 77, 3, 78, 3, 78, 3,
	78, 3, 78, 3, 79, 3, 79, 3, 80, 3, 80, 3, 80, 3, 80, 3, 80, 3, 80, 5, 80,
	2101, 10, 80, 3, 81, 3, 81, 3, 81, 3, 81, 5, 81, 2107, 10, 81, 3, 81, 3,
	81, 3, 81, 3, 81, 3, 81, 3, 81, 5, 81, 2115, 10, 81, 3, 82, 3, 82, 3, 82,
	3, 82, 7, 82, 2121, 10, 82, 12, 82, 14, 82, 2124, 11, 82, 3, 82, 3, 82,
	3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 5, 82, 2135, 10, 82, 3,
	82, 3, 82, 6, 82, 2139, 10, 82, 13, 82, 14, 82, 2140, 5, 82, 2143, 10,
	82, 3, 82, 3, 82, 6, 82, 2147, 10, 82, 13, 82, 14, 82, 2148, 5, 82, 2151,
	10, 82, 5, 82, 2153, 10, 82, 3, 83, 3, 83, 3, 83, 5, 83, 2158, 10, 83,
	3, 83, 5, 83, 2161, 10, 83, 3, 83, 3, 83, 3, 83, 3, 83, 5, 83, 2167, 10,
	83, 3, 84, 6, 84, 2170, 10, 84, 13, 84, 14, 84, 2171, 3, 85, 3, 85, 3,
	86, 3, 86, 3, 86, 5, 86, 2179, 10, 86, 3, 87, 3, 87, 3, 87, 3, 88, 3, 88,
	5, 88, 2186, 10, 88, 3, 89, 3, 89, 3, 89, 7, 89, 2191, 10, 89, 12, 89,
	14, 89, 2194, 11, 89, 3, 90, 3, 90, 3, 91, 3, 91, 3, 92, 3, 92, 3, 92,
	3, 92, 3, 92, 3, 92, 3, 92, 5, 92, 2207, 10, 92, 3, 93, 3, 93, 3, 94, 5,
	94, 2212, 10, 94, 3, 94, 3, 94, 5, 94, 2216, 10, 94, 3, 95, 3, 95, 3, 96,
	3, 96, 3, 96, 3, 97, 5, 97, 2224, 10, 97, 3, 97, 3, 97, 5, 97, 2228, 10,
	97, 3, 98, 5, 98, 2231, 10, 98, 3, 98, 3, 98, 5, 98, 2235, 10, 98, 3, 99,
	3, 99, 3, 100, 3, 100, 3, 101, 3, 101, 5, 101, 2243, 10, 101, 3, 102, 3,
	102, 3, 102, 3, 102, 3, 102, 3, 102, 3, 102, 3, 102, 5, 102, 2253, 10,
	102, 3, 103, 3, 103, 3, 104, 3, 104, 3, 105, 3, 105, 3, 106, 3, 106, 3,
	107, 3, 107, 3, 108, 3, 108, 5, 108, 2267, 10, 108, 3, 109, 3, 109, 5,
	109, 2271, 10, 109, 3, 110, 3, 110, 3, 110, 3, 111, 3, 111, 3, 111, 5,
	111, 2279, 10, 111, 3, 111, 3, 111, 3, 111, 5, 111, 2284, 10, 111, 3, 112,
	3, 112, 3, 112, 3, 112, 3, 112, 5, 112, 2291, 10, 112, 3, 112, 3, 112,
	3, 113, 3, 113, 3, 114, 3, 114, 3, 114, 3, 114, 3, 114, 3, 114, 3, 114,
	3, 114, 5, 114, 2305, 10, 114, 3, 115, 3, 115, 3, 115, 3, 115, 3, 115,
	3, 115, 3, 115, 5, 115, 2314, 10, 115, 3, 116, 3, 116, 3, 116, 5, 116,
	2319, 10, 116, 3, 116, 3, 116, 3, 116, 5, 116, 2324, 10, 116, 5, 116, 2326,
	10, 116, 3, 117, 3, 117, 3, 117, 3, 117, 3, 118, 3, 118, 3, 118, 3, 118,
	3, 118, 3, 118, 3, 118, 5, 118, 2339, 10, 118, 3, 119, 3, 119, 3, 119,
	3, 120, 3, 120, 3, 121, 3, 121, 3, 121, 7, 121, 2349, 10, 121, 12, 121,
	14, 121, 2352, 11, 121, 3, 122, 3, 122, 5, 122, 2356, 10, 122, 3, 123,
	3, 123, 3, 123, 7, 123, 2361, 10, 123, 12, 123, 14, 123, 2364, 11, 123,
	3, 124, 3, 124, 3, 124, 3, 124, 3, 124, 3, 124, 3, 125, 3, 125, 3, 125,
	5, 125, 2375, 10, 125, 3, 125, 3, 125, 3, 126, 3, 126, 3, 127, 3, 127,
	3, 128, 3, 128, 3, 129, 3, 129, 3, 129, 5, 129, 2388, 10, 129, 3, 130,
	3, 130, 3, 130, 3, 130, 5, 130, 2394, 10, 130, 5, 130, 2396, 10, 130, 3,
	131, 3, 131, 3, 131, 5, 131, 2401, 10, 131, 3, 132, 3, 132, 3, 133, 3,
	133, 3, 134, 3, 134, 3, 134, 3, 134, 5, 134, 2411, 10, 134, 3, 134, 5,
	134, 2414, 10, 134, 3, 135, 3, 135, 3, 135, 3, 135, 5, 135, 2420, 10, 135,
	3, 135, 5, 135, 2423, 10, 135, 3, 136, 3, 136, 3, 137, 3, 137, 3, 138,
	3, 138, 3, 139, 3, 139, 3, 139, 7, 139, 2434, 10, 139, 12, 139, 14, 139,
	2437, 11, 139, 3, 140, 3, 140, 3, 140, 7, 140, 2442, 10, 140, 12, 140,
	14, 140, 2445, 11, 140, 3, 141, 3, 141, 3, 141, 7, 141, 2450, 10, 141,
	12, 141, 14, 141, 2453, 11, 141, 3, 142, 3, 142, 3, 143, 3, 143, 3, 144,
	3, 144, 3, 145, 3, 145, 3, 146, 3, 146, 3, 147, 3, 147, 3, 148, 3, 148,
	3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 150, 3, 150, 3, 151,
	3, 151, 3, 151, 5, 151, 2480, 10, 151, 3, 152, 3, 152, 3, 153, 3, 153,
	3, 153, 5, 153, 2487, 10, 153, 3, 154, 3, 154, 5, 154, 2491, 10, 154, 3,
	155, 3, 155, 3, 156, 3, 156, 3, 156, 5, 156, 2498, 10, 156, 3, 157, 3,
	157, 3, 158, 3, 158, 3, 159, 3, 159, 5, 159, 2506, 10, 159, 3, 160, 3,
	160, 3, 161, 3, 161, 3, 161, 7, 161, 2513, 10, 161, 12, 161, 14, 161, 2516,
	11, 161, 3, 162, 3, 162, 5, 162, 2520, 10, 162, 3, 163, 3, 163, 3, 164,
	3, 164, 3, 164, 3, 165, 3, 165, 3, 165, 3, 165, 3, 165, 5, 165, 2532, 10,
	165, 3, 165, 3, 165, 3, 165, 3, 165, 3, 165, 3, 165, 3, 165, 3, 165, 3,
	165, 3, 165, 3, 165, 7, 165, 2545, 10, 165, 12, 165, 14, 165, 2548, 11,
	165, 3, 166, 3, 166, 3, 167, 3, 167, 3, 168, 3, 168, 3, 169, 3, 169, 3,
	169, 3, 169, 3, 169, 3, 169, 5, 169, 2562, 10, 169, 3, 169, 3, 169, 3,
	169, 3, 169, 3, 169, 3, 169, 3, 169, 3, 169, 3, 169, 3, 169, 3, 169, 3,
	169, 3, 169, 3, 169, 3, 169, 3, 169, 3, 169, 7, 169, 2581, 10, 169, 12,
	169, 14, 169, 2584, 11, 169, 3, 170, 3, 170, 3, 171, 3, 171, 3, 172, 3,
	172, 5, 172, 2592, 10, 172, 3, 172, 3, 172, 3, 172, 3, 172, 3, 172, 5,
	172, 2599, 10, 172, 3, 172, 3, 172, 3, 172, 3, 172, 3, 172, 7, 172, 2606,
	10, 172, 12, 172, 14, 172, 2609, 11, 172, 3, 172, 3, 172, 3, 172, 3, 172,
	5, 172, 2615, 10, 172, 3, 172, 3, 172, 3, 172, 3, 172, 3, 172, 3, 172,
	3, 172, 3, 172, 3, 172, 3, 172, 3, 172, 3, 172, 5, 172, 2629, 10, 172,
	3, 172, 3, 172, 3, 172, 3, 172, 5, 172, 2635, 10, 172, 3, 172, 3, 172,
	5, 172, 2639, 10, 172, 3, 172, 3, 172, 3, 172, 3, 172, 5, 172, 2645, 10,
	172, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3,
	173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3,
	173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3,
	173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3,
	173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3,
	173, 7, 173, 2692, 10, 173, 12, 173, 14, 173, 2695, 11, 173, 3, 174, 3,
	174, 3, 174, 3, 174, 3, 174, 3, 174, 3, 174, 3, 174, 3, 174, 3, 174, 3,
	174, 5, 174, 2708, 10, 174, 3, 174, 3, 174, 5, 174, 2712, 10, 174, 3, 174,
	3, 174, 3, 174, 3, 174, 7, 174, 2718, 10, 174, 12, 174, 14, 174, 2721,
	11, 174, 3, 174, 3, 174, 3, 174, 5, 174, 2726, 10, 174, 3, 174, 3, 174,
	3, 174, 3, 174, 3, 174, 3, 174, 3, 174, 3, 174, 3, 174, 3, 174, 3, 174,
	3, 174, 3, 174, 5, 174, 2741, 10, 174, 3, 174, 3, 174, 3, 174, 3, 174,
	3, 174, 3, 174, 7, 174, 2749, 10, 174, 12, 174, 14, 174, 2752, 11, 174,
	3, 175, 3, 175, 3, 175, 5, 175, 2757, 10, 175, 3, 175, 3, 175, 5, 175,
	2761, 10, 175, 3, 176, 3, 176, 3, 176, 7, 176, 2766, 10, 176, 12, 176,
	14, 176, 2769, 11, 176, 3, 177, 3, 177, 3, 177, 5, 177, 2774, 10, 177,
	3, 178, 3, 178, 3, 178, 5, 178, 2779, 10, 178, 3, 178, 3, 178, 3, 178,
	7, 178, 2784, 10, 178, 12, 178, 14, 178, 2787, 11, 178, 3, 178, 5, 178,
	2790, 10, 178, 3, 178, 3, 178, 5, 178, 2794, 10, 178, 3, 179, 3, 179, 3,
	180, 3, 180, 3, 181, 3, 181, 3, 181, 5, 181, 2803, 10, 181, 3, 182, 3,
	182, 5, 182, 2807, 10, 182, 3, 182, 3, 182, 3, 182, 3, 182, 3, 182, 7,
	182, 2814, 10, 182, 12, 182, 14, 182, 2817, 11, 182, 5, 182, 2819, 10,
	182, 3, 182, 5, 182, 2822, 10, 182, 3, 182, 5, 182, 2825, 10, 182, 3, 182,
	3, 182, 3, 183, 3, 183, 3, 183, 5, 183, 2832, 10, 183, 3, 184, 3, 184,
	3, 184, 3, 184, 3, 184, 3, 184, 3, 184, 3, 184, 3, 184, 3, 184, 3, 184,
	3, 184, 5, 184, 2846, 10, 184, 3, 185, 3, 185, 3, 186, 3, 186, 3, 186,
	3, 186, 3, 186, 3, 187, 3, 187, 3, 187, 3, 187, 3, 187, 3, 187, 3, 187,
	3, 187, 3, 187, 3, 187, 3, 187, 3, 187, 5, 187, 2867, 10, 187, 3, 188,
	3, 188, 3, 188, 5, 188, 2872, 10, 188, 3, 189, 3, 189, 3, 189, 5, 189,
	2877, 10, 189, 3, 189, 3, 189, 3, 189, 7, 189, 2882, 10, 189, 12, 189,
	14, 189, 2885, 11, 189, 3, 189, 5, 189, 2888, 10, 189, 3, 189, 5, 189,
	2891, 10, 189, 3, 189, 3, 189, 5, 189, 2895, 10, 189, 3, 189, 3, 189, 3,
	190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3,
	190, 3, 190, 3, 190, 5, 190, 2911, 10, 190, 3, 190, 3, 190, 5, 190, 2915,
	10, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 5, 190,
	2924, 10, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190,
	3, 190, 3, 190, 3, 190, 5, 190, 2936, 10, 190, 3, 190, 5, 190, 2939, 10,
	190, 3, 190, 3, 190, 5, 190, 2943, 10, 190, 3, 191, 3, 191, 3, 191, 5,
	191, 2948, 10, 191, 3, 192, 3, 192, 3, 192, 3, 192, 5, 192, 2954, 10, 192,
	3, 193, 3, 193, 3, 193, 3, 194, 3, 194, 3, 194, 3, 194, 3, 194, 3, 194,
	3, 194, 5, 194, 2966, 10, 194, 3, 195, 3, 195, 3, 196, 3, 196, 3, 196,
	3, 196, 3, 196, 3, 196, 3, 196, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197,
	3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197,
	5, 197, 2991, 10, 197, 3, 198, 3, 198, 5, 198, 2995, 10, 198, 3, 198, 3,
	198, 5, 198, 2999, 10, 198, 3, 198, 5, 198, 3002, 10, 198, 3, 198, 3, 198,
	5, 198, 3006, 10, 198, 3, 198, 3, 198, 5, 198, 3010, 10, 198, 3, 198, 3,
	198, 5, 198, 3014, 10, 198, 3, 198, 3, 198, 3, 198, 5, 198, 3019, 10, 198,
	3, 198, 3, 198, 5, 198, 3023, 10, 198, 3, 198, 3, 198, 3, 198, 5, 198,
	3028, 10, 198, 3, 198, 3, 198, 3, 198, 3, 198, 3, 198, 3, 198, 5, 198,
	3036, 10, 198, 5, 198, 3038, 10, 198, 3, 199, 3, 199, 3, 199, 5, 199, 3043,
	10, 199, 3, 200, 3, 200, 3, 200, 3, 200, 3, 200, 3, 200, 3, 200, 3, 201,
	3, 201, 3, 201, 3, 201, 3, 201, 3, 201, 3, 201, 5, 201, 3059, 10, 201,
	3, 201, 3, 201, 3, 201, 3, 201, 3, 201, 3, 201, 3, 201, 3, 201, 3, 201,
	5, 201, 3070, 10, 201, 3, 201, 3, 201, 5, 201, 3074, 10, 201, 3, 202, 3,
	202, 3, 202, 3, 202, 3, 202, 3, 202, 3, 202, 3, 203, 3, 203, 3, 203, 3,
	203, 3, 203, 7, 203, 3088, 10, 203, 12, 203, 14, 203, 3091, 11, 203, 3,
	203, 3, 203, 5, 203, 3095, 10, 203, 3, 203, 3, 203, 3, 204, 3, 204, 3,
	204, 3, 204, 5, 204, 3103, 10, 204, 3, 204, 5, 204, 3106, 10, 204, 3, 204,
	3, 204, 3, 204, 3, 204, 3, 204, 3, 204, 3, 204, 3, 204, 5, 204, 3116, 10,
	204, 3, 204, 3, 204, 3, 204, 5, 204, 3121, 10, 204, 3, 205, 3, 205, 3,
	205, 3, 205, 3, 205, 3, 206, 3, 206, 3, 206, 3, 206, 3, 206, 5, 206, 3133,
	10, 206, 3, 206, 5, 206, 3136, 10, 206, 3, 206, 3, 206, 3, 207, 3, 207,
	3, 207, 3, 207, 7, 207, 3144, 10, 207, 12, 207, 14, 207, 3147, 11, 207,
	3, 207, 3, 207, 3, 207, 5, 207, 3152, 10, 207, 3, 208, 3, 208, 5, 208,
	3156, 10, 208, 3, 208, 5, 208, 3159, 10, 208, 3, 209, 3, 209, 5, 209, 3163,
	10, 209, 3, 210, 3, 210, 3, 210, 3, 210, 5, 210, 3169, 10, 210, 3, 210,
	5, 210, 3172, 10, 210, 3, 210, 3, 210, 3, 210, 3, 210, 5, 210, 3178, 10,
	210, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 7, 211, 3185, 10, 211, 12,
	211, 14, 211, 3188, 11, 211, 3, 211, 5, 211, 3191, 10, 211, 3, 211, 3,
	211, 3, 212, 3, 212, 3, 212, 3, 212, 3, 212, 3, 212, 3, 212, 3, 212, 3,
	212, 3, 212, 3, 212, 3, 212, 3, 212, 3, 212, 3, 212, 3, 212, 3, 212, 3,
	212, 3, 212, 3, 212, 3, 212, 3, 212, 3, 212, 3, 212, 3, 212, 3, 212, 3,
	212, 3, 212, 3, 212, 5, 212, 3224, 10, 212, 3, 213, 3, 213, 3, 213, 3,
	213, 3, 213, 3, 213, 5, 213, 3232, 10, 213, 3, 213, 3, 213, 3, 213, 3,
	213, 5, 213, 3238, 10, 213, 3, 213, 3, 213, 3, 214, 3, 214, 3, 214, 3,
	214, 3, 214, 3, 214, 3, 214, 3, 214, 3, 214, 3, 214, 3, 214, 3, 214, 3,
	214, 3, 214, 3, 214, 3, 214, 3, 214, 5, 214, 3259, 10, 214, 3, 215, 3,
	215, 5, 215, 3263, 10, 215, 3, 215, 6, 215, 3266, 10, 215, 13, 215, 14,
	215, 3267, 3, 215, 5, 215, 3271, 10, 215, 3, 215, 3, 215, 3, 216, 3, 216,
	3, 217, 3, 217, 3, 218, 3, 218, 3, 218, 3, 218, 3, 218, 3, 219, 3, 219,
	3, 219, 3, 220, 3, 220, 3, 220, 3, 221, 3, 221, 3, 221, 3, 222, 3, 222,
	3, 223, 3, 223, 3, 223, 3, 223, 3, 223, 7, 223, 3300, 10, 223, 12, 223,
	14, 223, 3303, 11, 223, 3, 224, 3, 224, 5, 224, 3307, 10, 224, 3, 224,
	5, 224, 3310, 10, 224, 3, 225, 3, 225, 5, 225, 3314, 10, 225, 3, 225, 5,
	225, 3317, 10, 225, 3, 225, 3, 225, 3, 225, 5, 225, 3322, 10, 225, 5, 225,
	3324, 10, 225, 3, 225, 5, 225, 3327, 10, 225, 3, 225, 5, 225, 3330, 10,
	225, 3, 225, 3, 225, 3, 225, 5, 225, 3335, 10, 225, 3, 225, 5, 225, 3338,
	10, 225, 3, 225, 3, 225, 5, 225, 3342, 10, 225, 3, 225, 3, 225, 3, 225,
	5, 225, 3347, 10, 225, 3, 225, 5, 225, 3350, 10, 225, 3, 225, 3, 225, 3,
	225, 5, 225, 3355, 10, 225, 3, 225, 5, 225, 3358, 10, 225, 3, 225, 5, 225,
	3361, 10, 225, 3, 225, 3, 225, 3, 225, 5, 225, 3366, 10, 225, 3, 225, 3,
	225, 3, 225, 5, 225, 3371, 10, 225, 3, 225, 3, 225, 5, 225, 3375, 10, 225,
	3, 225, 3, 225, 3, 225, 3, 225, 3, 225, 3, 225, 3, 225, 3, 225, 3, 225,
	3, 225, 5, 225, 3387, 10, 225, 3, 225, 3, 225, 5, 225, 3391, 10, 225, 3,
	225, 3, 225, 5, 225, 3395, 10, 225, 3, 225, 3, 225, 5, 225, 3399, 10, 225,
	3, 225, 5, 225, 3402, 10, 225, 3, 225, 3, 225, 3, 225, 5, 225, 3407, 10,
	225, 3, 225, 3, 225, 3, 225, 5, 225, 3412, 10, 225, 3, 225, 3, 225, 5,
	225, 3416, 10, 225, 3, 225, 3, 225, 3, 225, 5, 225, 3421, 10, 225, 3, 225,
	3, 225, 3, 225, 3, 225, 3, 225, 3, 225, 3, 225, 5, 225, 3430, 10, 225,
	3, 225, 5, 225, 3433, 10, 225, 3, 225, 3, 225, 5, 225, 3437, 10, 225, 3,
	225, 3, 225, 5, 225, 3441, 10, 225, 3, 225, 5, 225, 3444, 10, 225, 3, 225,
	3, 225, 5, 225, 3448, 10, 225, 3, 225, 3, 225, 5, 225, 3452, 10, 225, 3,
	225, 3, 225, 3, 225, 5, 225, 3457, 10, 225, 3, 225, 3, 225, 3, 225, 5,
	225, 3462, 10, 225, 3, 225, 5, 225, 3465, 10, 225, 3, 226, 3, 226, 3, 226,
	3, 226, 7, 226, 3471, 10, 226, 12, 226, 14, 226, 3474, 11, 226, 3, 226,
	3, 226, 3, 227, 3, 227, 3, 227, 5, 227, 3481, 10, 227, 3, 228, 3, 228,
	5, 228, 3485, 10, 228, 3, 229, 6, 229, 3488, 10, 229, 13, 229, 14, 229,
	3489, 3, 230, 3, 230, 3, 230, 3, 230, 3, 230, 3, 230, 3, 231, 3, 231, 3,
	231, 3, 231, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 5, 232, 3508,
	10, 232, 3, 232, 3, 232, 3, 232, 3, 232, 5, 232, 3514, 10, 232, 5, 232,
	3516, 10, 232, 3, 233, 3, 233, 5, 233, 3520, 10, 233, 3, 233, 3, 233, 5,
	233, 3524, 10, 233, 3, 234, 3, 234, 5, 234, 3528, 10, 234, 3, 234, 3, 234,
	5, 234, 3532, 10, 234, 3, 235, 3, 235, 3, 235, 5, 235, 3537, 10, 235, 3,
	236, 5, 236, 3540, 10, 236, 3, 236, 3, 236, 5, 236, 3544, 10, 236, 3, 236,
	3, 236, 3, 237, 5, 237, 3549, 10, 237, 3, 237, 3, 237, 5, 237, 3553, 10,
	237, 3, 237, 3, 237, 3, 238, 5, 238, 3558, 10, 238, 3, 238, 3, 238, 5,
	238, 3562, 10, 238, 3, 238, 3, 238, 3, 239, 3, 239, 3, 239, 5, 239, 3569,
	10, 239, 3, 240, 3, 240, 3, 240, 5, 240, 3574, 10, 240, 3, 240, 5, 240,
	3577, 10, 240, 3, 241, 3, 241, 3, 242, 3, 242, 3, 243, 3, 243, 3, 244,
	3, 244, 3, 245, 3, 245, 3, 245, 3, 245, 3, 246, 3, 246, 3, 246, 3, 247,
	3, 247, 3, 247, 3, 248, 3, 248, 3, 248, 3, 248, 7, 248, 3601, 10, 248,
	12, 248, 14, 248, 3604, 11, 248, 5, 248, 3606, 10, 248, 3, 248, 3, 248,
	3, 249, 3, 249, 3, 249, 3, 249, 3, 250, 3, 250, 3, 250, 3, 251, 3, 251,
	3, 252, 3, 252, 3, 253, 3, 253, 3, 254, 3, 254, 3, 255, 3, 255, 3, 256,
	3, 256, 3, 257, 3, 257, 3, 257, 3, 257, 3, 258, 3, 258, 3, 258, 3, 258,
	3, 258, 5, 258, 3638, 10, 258, 3, 258, 3, 258, 3, 258, 3, 258, 5, 258,
	3644, 10, 258, 3, 259, 3, 259, 3, 259, 3, 259, 5, 259, 3650, 10, 259, 3,
	260, 3, 260, 3, 260, 7, 260, 3655, 10, 260, 12, 260, 14, 260, 3658, 11,
	260, 3, 261, 3, 261, 3, 261, 3, 261, 3, 261, 3, 261, 3, 261, 3, 261, 3,
	261, 5, 261, 3669, 10, 261, 3, 262, 3, 262, 5, 262, 3673, 10, 262, 3, 262,
	3, 262, 5, 262, 3677, 10, 262, 3, 262, 3, 262, 5, 262, 3681, 10, 262, 3,
	262, 5, 262, 3684, 10, 262, 3, 262, 5, 262, 3687, 10, 262, 3, 262, 5, 262,
	3690, 10, 262, 3, 262, 5, 262, 3693, 10, 262, 3, 263, 3, 263, 3, 263, 3,
	263, 3, 263, 5, 263, 3700, 10, 263, 3, 263, 5, 263, 3703, 10, 263, 3, 263,
	5, 263, 3706, 10, 263, 3, 264, 5, 264, 3709, 10, 264, 3, 264, 3, 264, 5,
	264, 3713, 10, 264, 3, 264, 3, 264, 5, 264, 3717, 10, 264, 3, 264, 3, 264,
	5, 264, 3721, 10, 264, 3, 264, 3, 264, 3, 264, 3, 264, 3, 264, 3, 264,
	3, 264, 3, 264, 3, 264, 3, 264, 3, 264, 3, 264, 3, 264, 3, 264, 3, 264,
	5, 264, 3738, 10, 264, 5, 264, 3740, 10, 264, 3, 265, 3, 265, 3, 265, 5,
	265, 3745, 10, 265, 3, 265, 3, 265, 3, 265, 3, 265, 3, 265, 3, 265, 3,
	265, 5, 265, 3754, 10, 265, 3, 265, 3, 265, 3, 265, 3, 265, 5, 265, 3760,
	10, 265, 3, 265, 3, 265, 5, 265, 3764, 10, 265, 3, 266, 3, 266, 3, 266,
	3, 266, 3, 267, 5, 267, 3771, 10, 267, 3, 267, 5, 267, 3774, 10, 267, 3,
	267, 5, 267, 3777, 10, 267, 3, 267, 3, 267, 5, 267, 3781, 10, 267, 3, 268,
	3, 268, 3, 268, 3, 268, 5, 268, 3787, 10, 268, 3, 268, 3, 268, 3, 268,
	3, 268, 3, 268, 5, 268, 3794, 10, 268, 3, 269, 3, 269, 3, 269, 5, 269,
	3799, 10, 269, 3, 269, 3, 269, 3, 270, 3, 270, 5, 270, 3805, 10, 270, 3,
	270, 5, 270, 3808, 10, 270, 3, 271, 3, 271, 3, 271, 5, 271, 3813, 10, 271,
	3, 272, 3, 272, 3, 272, 3, 272, 5, 272, 3819, 10, 272, 3, 272, 5, 272,
	3822, 10, 272, 3, 273, 3, 273, 5, 273, 3826, 10, 273, 3, 273, 3, 273, 3,
	273, 3, 273, 5, 273, 3832, 10, 273, 7, 273, 3834, 10, 273, 12, 273, 14,
	273, 3837, 11, 273, 3, 274, 6, 274, 3840, 10, 274, 13, 274, 14, 274, 3841,
	3, 275, 3, 275, 5, 275, 3846, 10, 275, 3, 275, 3, 275, 5, 275, 3850, 10,
	275, 3, 275, 3, 275, 3, 275, 3, 275, 5, 275, 3856, 10, 275, 3, 275, 3,
	275, 3, 275, 3, 275, 5, 275, 3862, 10, 275, 3, 275, 3, 275, 3, 275, 5,
	275, 3867, 10, 275, 3, 275, 3, 275, 5, 275, 3871, 10, 275, 3, 275, 3, 275,
	3, 275, 5, 275, 3876, 10, 275, 3, 275, 3, 275, 5, 275, 3880, 10, 275, 3,
	275, 3, 275, 5, 275, 3884, 10, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3,
	275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 5, 275, 3898,
	10, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 5, 275, 3906,
	10, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275,
	5, 275, 3916, 10, 275, 3, 275, 3, 275, 5, 275, 3920, 10, 275, 3, 275, 3,
	275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3,
	275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3,
	275, 3, 275, 3, 275, 3, 275, 5, 275, 3945, 10, 275, 3, 275, 3, 275, 3,
	275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3,
	275, 5, 275, 3959, 10, 275, 3, 275, 3, 275, 3, 275, 3, 275, 5, 275, 3965,
	10, 275, 3, 276, 3, 276, 5, 276, 3969, 10, 276, 3, 276, 3, 276, 3, 276,
	5, 276, 3974, 10, 276, 7, 276, 3976, 10, 276, 12, 276, 14, 276, 3979, 11,
	276, 3, 277, 3, 277, 5, 277, 3983, 10, 277, 3, 277, 3, 277, 7, 277, 3987,
	10, 277, 12, 277, 14, 277, 3990, 11, 277, 3, 277, 3, 277, 5, 277, 3994,
	10, 277, 3, 277, 5, 277, 3997, 10, 277, 3, 277, 3, 277, 7, 277, 4001, 10,
	277, 12, 277, 14, 277, 4004, 11, 277, 3, 277, 3, 277, 5, 277, 4008, 10,
	277, 3, 277, 5, 277, 4011, 10, 277, 3, 277, 3, 277, 7, 277, 4015, 10, 277,
	12, 277, 14, 277, 4018, 11, 277, 3, 277, 5, 277, 4021, 10, 277, 3, 277,
	3, 277, 3, 277, 3, 277, 5, 277, 4027, 10, 277, 5, 277, 4029, 10, 277, 3,
	277, 5, 277, 4032, 10, 277, 3, 277, 3, 277, 7, 277, 4036, 10, 277, 12,
	277, 14, 277, 4039, 11, 277, 3, 277, 5, 277, 4042, 10, 277, 3, 277, 3,
	277, 3, 277, 5, 277, 4047, 10, 277, 3, 277, 3, 277, 3, 277, 3, 277, 5,
	277, 4053, 10, 277, 3, 277, 3, 277, 5, 277, 4057, 10, 277, 5, 277, 4059,
	10, 277, 3, 278, 3, 278, 3, 278, 7, 278, 4064, 10, 278, 12, 278, 14, 278,
	4067, 11, 278, 3, 279, 3, 279, 3, 279, 5, 279, 4072, 10, 279, 3, 280, 3,
	280, 3, 280, 3, 281, 3, 281, 3, 281, 3, 281, 3, 281, 3, 281, 5, 281, 4083,
	10, 281, 3, 282, 3, 282, 3, 282, 5, 282, 4088, 10, 282, 3, 282, 3, 282,
	3, 282, 5, 282, 4093, 10, 282, 3, 282, 3, 282, 3, 282, 3, 282, 3, 282,
	3, 282, 5, 282, 4101, 10, 282, 3, 282, 3, 282, 3, 282, 3, 282, 5, 282,
	4107, 10, 282, 3, 282, 3, 282, 5, 282, 4111, 10, 282, 3, 282, 3, 282, 3,
	282, 5, 282, 4116, 10, 282, 3, 282, 3, 282, 3, 282, 3, 282, 3, 282, 7,
	282, 4123, 10, 282, 12, 282, 14, 282, 4126, 11, 282, 3, 282, 3, 282, 3,
	282, 5, 282, 4131, 10, 282, 3, 282, 3, 282, 7, 282, 4135, 10, 282, 12,
	282, 14, 282, 4138, 11, 282, 3, 282, 3, 282, 3, 282, 5, 282, 4143, 10,
	282, 3, 282, 3, 282, 3, 282, 3, 282, 3, 282, 3, 282, 3, 282, 5, 282, 4152,
	10, 282, 3, 282, 3, 282, 3, 282, 3, 282, 5, 282, 4158, 10, 282, 3, 282,
	3, 282, 3, 282, 3, 282, 3, 282, 3, 282, 3, 282, 5, 282, 4167, 10, 282,
	3, 282, 3, 282, 3, 282, 3, 282, 3, 282, 3, 282, 3, 282, 3, 282, 3, 282,
	3, 282, 5, 282, 4179, 10, 282, 3, 283, 3, 283, 5, 283, 4183, 10, 283, 3,
	284, 3, 284, 3, 284, 7, 284, 4188, 10, 284, 12, 284, 14, 284, 4191, 11,
	284, 3, 285, 3, 285, 5, 285, 4195, 10, 285, 3, 286, 3, 286, 3, 287, 3,
	287, 3, 287, 3, 287, 5, 287, 4203, 10, 287, 3, 288, 3, 288, 5, 288, 4207,
	10, 288, 3, 288, 3, 288, 5, 288, 4211, 10, 288, 3, 288, 3, 288, 5, 288,
	4215, 10, 288, 3, 289, 3, 289, 3, 289, 3, 289, 3, 289, 5, 289, 4222, 10,
	289, 3, 289, 3, 289, 7, 289, 4226, 10, 289, 12, 289, 14, 289, 4229, 11,
	289, 3, 290, 3, 290, 5, 290, 4233, 10, 290, 3, 290, 3, 290, 3, 291, 3,
	291, 5, 291, 4239, 10, 291, 3, 291, 3, 291, 3, 292, 3, 292, 5, 292, 4245,
	10, 292, 3, 292, 3, 292, 3, 293, 3, 293, 5, 293, 4251, 10, 293, 3, 293,
	3, 293, 3, 293, 5, 293, 4256, 10, 293, 3, 293, 3, 293, 3, 293, 3, 293,
	5, 293, 4262, 10, 293, 3, 293, 3, 293, 7, 293, 4266, 10, 293, 12, 293,
	14, 293, 4269, 11, 293, 3, 294, 3, 294, 3, 294, 5, 294, 4274, 10, 294,
	3, 294, 3, 294, 7, 294, 4278, 10, 294, 12, 294, 14, 294, 4281, 11, 294,
	3, 295, 3, 295, 3, 295, 5, 295, 4286, 10, 295, 3, 295, 7, 295, 4289, 10,
	295, 12, 295, 14, 295, 4292, 11, 295, 3, 296, 3, 296, 3, 296, 5, 296, 4297,
	10, 296, 3, 297, 3, 297, 3, 297, 3, 297, 5, 297, 4303, 10, 297, 3, 297,
	5, 297, 4306, 10, 297, 3, 298, 3, 298, 3, 298, 5, 298, 4311, 10, 298, 3,
	298, 3, 298, 3, 299, 3, 299, 3, 299, 3, 299, 3, 300, 3, 300, 3, 300, 3,
	300, 3, 300, 3, 300, 3, 300, 3, 300, 3, 300, 3, 300, 3, 300, 3, 300, 3,
	300, 3, 300, 3, 300, 3, 300, 5, 300, 4335, 10, 300, 3, 300, 3, 300, 3,
	300, 3, 300, 5, 300, 4341, 10, 300, 5, 300, 4343, 10, 300, 3, 301, 3, 301,
	3, 302, 3, 302, 5, 302, 4349, 10, 302, 3, 302, 3, 302, 5, 302, 4353, 10,
	302, 3, 302, 3, 302, 3, 302, 3, 302, 3, 302, 3, 302, 3, 302, 5, 302, 4362,
	10, 302, 3, 302, 5, 302, 4365, 10, 302, 3, 302, 3, 302, 3, 302, 3, 302,
	3, 302, 5, 302, 4372, 10, 302, 3, 302, 3, 302, 5, 302, 4376, 10, 302, 3,
	302, 3, 302, 3, 302, 3, 303, 3, 303, 5, 303, 4383, 10, 303, 3, 303, 3,
	303, 3, 303, 3, 303, 3, 303, 5, 303, 4390, 10, 303, 3, 303, 3, 303, 3,
	303, 5, 303, 4395, 10, 303, 3, 303, 5, 303, 4398, 10, 303, 3, 303, 3, 303,
	3, 303, 5, 303, 4403, 10, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303,
	5, 303, 4410, 10, 303, 3, 303, 3, 303, 5, 303, 4414, 10, 303, 3, 303, 3,
	303, 5, 303, 4418, 10, 303, 3, 304, 3, 304, 3, 304, 5, 304, 4423, 10, 304,
	3, 304, 3, 304, 3, 305, 3, 305, 5, 305, 4429, 10, 305, 3, 305, 3, 305,
	3, 305, 3, 305, 3, 305, 3, 305, 5, 305, 4437, 10, 305, 3, 305, 3, 305,
	3, 305, 3, 305, 7, 305, 4443, 10, 305, 12, 305, 14, 305, 4446, 11, 305,
	3, 305, 3, 305, 3, 305, 3, 305, 7, 305, 4452, 10, 305, 12, 305, 14, 305,
	4455, 11, 305, 3, 305, 3, 305, 3, 306, 3, 306, 3, 306, 3, 306, 7, 306,
	4463, 10, 306, 12, 306, 14, 306, 4466, 11, 306, 3, 307, 3, 307, 3, 307,
	5, 307, 4471, 10, 307, 3, 307, 3, 307, 3, 308, 3, 308, 5, 308, 4477, 10,
	308, 3, 308, 3, 308, 3, 308, 3, 308, 5, 308, 4483, 10, 308, 3, 308, 3,
	308, 7, 308, 4487, 10, 308, 12, 308, 14, 308, 4490, 11, 308, 3, 308, 3,
	308, 7, 308, 4494, 10, 308, 12, 308, 14, 308, 4497, 11, 308, 3, 308, 3,
	308, 3, 309, 3, 309, 3, 309, 3, 309, 7, 309, 4505, 10, 309, 12, 309, 14,
	309, 4508, 11, 309, 3, 310, 3, 310, 3, 310, 5, 310, 4513, 10, 310, 3, 310,
	3, 310, 3, 311, 3, 311, 3, 311, 3, 311, 3, 311, 3, 311, 3, 311, 3, 311,
	3, 311, 3, 311, 3, 311, 3, 311, 7, 311, 4529, 10, 311, 12, 311, 14, 311,
	4532, 11, 311, 3, 311, 3, 311, 3, 312, 3, 312, 3, 312, 3, 312, 3, 312,
	3, 312, 3, 312, 3, 312, 7, 312, 4544, 10, 312, 12, 312, 14, 312, 4547,
	11, 312, 3, 312, 3, 312, 3, 313, 3, 313, 3, 313, 5, 313, 4554, 10, 313,
	3, 313, 3, 313, 3, 314, 3, 314, 3, 314, 5, 314, 4561, 10, 314, 3, 314,
	3, 314, 3, 314, 5, 314, 4566, 10, 314, 3, 314, 5, 314, 4569, 10, 314, 3,
	314, 3, 314, 3, 314, 5, 314, 4574, 10, 314, 3, 314, 3, 314, 3, 314, 3,
	314, 3, 314, 3, 314, 5, 314, 4582, 10, 314, 3, 314, 3, 314, 3, 314, 3,
	314, 5, 314, 4588, 10, 314, 3, 314, 3, 314, 5, 314, 4592, 10, 314, 3, 315,
	3, 315, 3, 315, 3, 315, 5, 315, 4598, 10, 315, 3, 315, 5, 315, 4601, 10,
	315, 3, 315, 3, 315, 3, 315, 5, 315, 4606, 10, 315, 3, 315, 3, 315, 3,
	315, 3, 315, 3, 315, 3, 315, 5, 315, 4614, 10, 315, 3, 315, 3, 315, 3,
	315, 3, 315, 5, 315, 4620, 10, 315, 3, 315, 3, 315, 5, 315, 4624, 10, 315,
	3, 316, 3, 316, 3, 316, 5, 316, 4629, 10, 316, 3, 316, 3, 316, 5, 316,
	4633, 10, 316, 3, 317, 3, 317, 5, 317, 4637, 10, 317, 3, 318, 3, 318, 5,
	318, 4641, 10, 318, 3, 318, 3, 318, 3, 318, 3, 318, 3, 318, 3, 318, 3,
	318, 3, 318, 5, 318, 4651, 10, 318, 3, 318, 3, 318, 3, 318, 5, 318, 4656,
	10, 318, 3, 318, 3, 318, 5, 318, 4660, 10, 318, 3, 318, 5, 318, 4663, 10,
	318, 3, 319, 3, 319, 5, 319, 4667, 10, 319, 3, 319, 3, 319, 3, 319, 3,
	319, 3, 319, 3, 319, 3, 319, 3, 319, 3, 319, 3, 319, 3, 319, 5, 319, 4680,
	10, 319, 3, 319, 5, 319, 4683, 10, 319, 3, 319, 3, 319, 5, 319, 4687, 10,
	319, 3, 319, 5, 319, 4690, 10, 319, 3, 319, 3, 319, 5, 319, 4694, 10, 319,
	3, 319, 5, 319, 4697, 10, 319, 3, 319, 3, 319, 5, 319, 4701, 10, 319, 3,
	319, 5, 319, 4704, 10, 319, 3, 319, 3, 319, 5, 319, 4708, 10, 319, 3, 319,
	5, 319, 4711, 10, 319, 3, 319, 5, 319, 4714, 10, 319, 3, 319, 3, 319, 5,
	319, 4718, 10, 319, 3, 319, 5, 319, 4721, 10, 319, 3, 319, 3, 319, 5, 319,
	4725, 10, 319, 3, 319, 5, 319, 4728, 10, 319, 3, 320, 3, 320, 5, 320, 4732,
	10, 320, 3, 321, 3, 321, 5, 321, 4736, 10, 321, 3, 321, 3, 321, 3, 321,
	3, 321, 3, 321, 3, 321, 3, 321, 3, 321, 5, 321, 4746, 10, 321, 3, 321,
	5, 321, 4749, 10, 321, 3, 321, 3, 321, 3, 321, 5, 321, 4754, 10, 321, 3,
	321, 3, 321, 5, 321, 4758, 10, 321, 3, 321, 5, 321, 4761, 10, 321, 3, 322,
	3, 322, 5, 322, 4765, 10, 322, 3, 322, 3, 322, 3, 322, 3, 322, 5, 322,
	4771, 10, 322, 3, 322, 3, 322, 5, 322, 4775, 10, 322, 3, 322, 3, 322, 3,
	322, 3, 322, 3, 322, 5, 322, 4782, 10, 322, 3, 322, 3, 322, 5, 322, 4786,
	10, 322, 3, 322, 5, 322, 4789, 10, 322, 3, 323, 3, 323, 5, 323, 4793, 10,
	323, 3, 323, 3, 323, 3, 323, 3, 323, 5, 323, 4799, 10, 323, 3, 323, 5,
	323, 4802, 10, 323, 3, 324, 3, 324, 3, 324, 3, 324, 3, 324, 3, 324, 3,
	324, 3, 324, 3, 324, 5, 324, 4813, 10, 324, 3, 324, 5, 324, 4816, 10, 324,
	3, 324, 3, 324, 5, 324, 4820, 10, 324, 3, 324, 5, 324, 4823, 10, 324, 3,
	324, 3, 324, 5, 324, 4827, 10, 324, 3, 324, 5, 324, 4830, 10, 324, 3, 324,
	3, 324, 5, 324, 4834, 10, 324, 3, 324, 5, 324, 4837, 10, 324, 3, 324, 5,
	324, 4840, 10, 324, 3, 324, 3, 324, 5, 324, 4844, 10, 324, 3, 324, 5, 324,
	4847, 10, 324, 3, 324, 3, 324, 5, 324, 4851, 10, 324, 3, 324, 5, 324, 4854,
	10, 324, 3, 325, 3, 325, 3, 325, 3, 325, 3, 325, 3, 325, 3, 325, 3, 325,
	3, 325, 5, 325, 4865, 10, 325, 3, 325, 5, 325, 4868, 10, 325, 3, 325, 5,
	325, 4871, 10, 325, 3, 325, 3, 325, 5, 325, 4875, 10, 325, 3, 325, 5, 325,
	4878, 10, 325, 3, 326, 3, 326, 3, 326, 3, 326, 3, 326, 3, 326, 5, 326,
	4886, 10, 326, 3, 326, 5, 326, 4889, 10, 326, 3, 327, 3, 327, 5, 327, 4893,
	10, 327, 3, 327, 3, 327, 3, 327, 3, 327, 3, 327, 3, 327, 3, 327, 3, 327,
	3, 327, 3, 327, 5, 327, 4905, 10, 327, 3, 327, 3, 327, 3, 328, 3, 328,
	3, 328, 5, 328, 4912, 10, 328, 3, 328, 3, 328, 3, 328, 5, 328, 4917, 10,
	328, 3, 328, 3, 328, 3, 329, 3, 329, 3, 329, 3, 329, 3, 329, 3, 329, 3,
	329, 3, 329, 3, 329, 7, 329, 4930, 10, 329, 12, 329, 14, 329, 4933, 11,
	329, 3, 330, 3, 330, 3, 330, 3, 330, 3, 331, 3, 331, 3, 331, 5, 331, 4942,
	10, 331, 3, 332, 3, 332, 7, 332, 4946, 10, 332, 12, 332, 14, 332, 4949,
	11, 332, 3, 332, 5, 332, 4952, 10, 332, 3, 332, 5, 332, 4955, 10, 332,
	3, 332, 3, 332, 3, 332, 3, 332, 3, 332, 5, 332, 4962, 10, 332, 3, 332,
	7, 332, 4965, 10, 332, 12, 332, 14, 332, 4968, 11, 332, 5, 332, 4970, 10,
	332, 3, 333, 5, 333, 4973, 10, 333, 3, 333, 3, 333, 3, 333, 3, 333, 3,
	333, 3, 333, 3, 333, 3, 333, 3, 333, 3, 333, 5, 333, 4985, 10, 333, 3,
	333, 3, 333, 3, 333, 3, 333, 3, 333, 3, 333, 3, 333, 3, 333, 5, 333, 4995,
	10, 333, 3, 333, 3, 333, 3, 333, 5, 333, 5000, 10, 333, 3, 333, 3, 333,
	3, 333, 3, 333, 3, 333, 3, 333, 3, 333, 3, 333, 3, 333, 3, 333, 5, 333,
	5012, 10, 333, 3, 333, 3, 333, 5, 333, 5016, 10, 333, 3, 334, 3, 334, 3,
	334, 3, 334, 3, 334, 3, 335, 5, 335, 5024, 10, 335, 3, 335, 3, 335, 3,
	336, 3, 336, 3, 336, 3, 337, 3, 337, 3, 337, 3, 337, 3, 337, 3, 337, 3,
	337, 3, 337, 3, 337, 5, 337, 5040, 10, 337, 3, 337, 5, 337, 5043, 10, 337,
	3, 338, 3, 338, 3, 338, 3, 338, 3, 338, 3, 338, 5, 338, 5051, 10, 338,
	3, 338, 3, 338, 3, 338, 3, 338, 3, 338, 3, 338, 5, 338, 5059, 10, 338,
	5, 338, 5061, 10, 338, 3, 339, 3, 339, 3, 339, 3, 339, 3, 339, 3, 339,
	3, 339, 3, 339, 5, 339, 5071, 10, 339, 3, 340, 3, 340, 5, 340, 5075, 10,
	340, 3, 341, 3, 341, 3, 342, 3, 342, 3, 342, 3, 343, 3, 343, 3, 343, 3,
	343, 7, 343, 5086, 10, 343, 12, 343, 14, 343, 5089, 11, 343, 3, 343, 3,
	343, 3, 344, 3, 344, 5, 344, 5095, 10, 344, 3, 344, 5, 344, 5098, 10, 344,
	3, 345, 3, 345, 3, 345, 3, 345, 3, 345, 5, 345, 5105, 10, 345, 5, 345,
	5107, 10, 345, 3, 346, 3, 346, 3, 346, 3, 346, 7, 346, 5113, 10, 346, 12,
	346, 14, 346, 5116, 11, 346, 3, 346, 3, 346, 3, 347, 3, 347, 5, 347, 5122,
	10, 347, 3, 348, 3, 348, 5, 348, 5126, 10, 348, 3, 348, 3, 348, 3, 348,
	3, 348, 5, 348, 5132, 10, 348, 3, 349, 3, 349, 3, 350, 5, 350, 5137, 10,
	350, 3, 350, 3, 350, 3, 350, 5, 350, 5142, 10, 350, 3, 351, 3, 351, 3,
	352, 3, 352, 5, 352, 5148, 10, 352, 3, 352, 7, 352, 5151, 10, 352, 12,
	352, 14, 352, 5154, 11, 352, 3, 353, 3, 353, 5, 353, 5158, 10, 353, 3,
	353, 3, 353, 3, 353, 5, 353, 5163, 10, 353, 3, 353, 3, 353, 3, 353, 5,
	353, 5168, 10, 353, 3, 353, 3, 353, 5, 353, 5172, 10, 353, 3, 353, 3, 353,
	3, 353, 5, 353, 5177, 10, 353, 3, 353, 3, 353, 3, 353, 5, 353, 5182, 10,
	353, 3, 353, 3, 353, 3, 353, 5, 353, 5187, 10, 353, 3, 353, 3, 353, 3,
	353, 5, 353, 5192, 10, 353, 3, 353, 3, 353, 3, 353, 5, 353, 5197, 10, 353,
	3, 353, 3, 353, 3, 353, 5, 353, 5202, 10, 353, 3, 353, 3, 353, 3, 353,
	5, 353, 5207, 10, 353, 3, 353, 3, 353, 3, 353, 5, 353, 5212, 10, 353, 3,
	353, 3, 353, 3, 353, 5, 353, 5217, 10, 353, 3, 353, 3, 353, 3, 353, 5,
	353, 5222, 10, 353, 3, 353, 3, 353, 3, 353, 5, 353, 5227, 10, 353, 3, 353,
	3, 353, 3, 353, 5, 353, 5232, 10, 353, 3, 353, 3, 353, 3, 353, 5, 353,
	5237, 10, 353, 3, 353, 3, 353, 3, 353, 3, 353, 3, 353, 3, 353, 3, 353,
	3, 353, 5, 353, 5247, 10, 353, 3, 353, 3, 353, 3, 353, 3, 353, 5, 353,
	5253, 10, 353, 3, 353, 3, 353, 3, 353, 3, 353, 5, 353, 5259, 10, 353, 3,
	353, 3, 353, 3, 353, 5, 353, 5264, 10, 353, 3, 353, 3, 353, 3, 353, 3,
	353, 3, 353, 5, 353, 5271, 10, 353, 3, 353, 3, 353, 3, 353, 5, 353, 5276,
	10, 353, 3, 353, 3, 353, 3, 353, 5, 353, 5281, 10, 353, 3, 353, 3, 353,
	3, 353, 3, 353, 5, 353, 5287, 10, 353, 3, 354, 3, 354, 3, 354, 3, 354,
	3, 354, 3, 354, 3, 354, 3, 354, 7, 354, 5297, 10, 354, 12, 354, 14, 354,
	5300, 11, 354, 3, 354, 3, 354, 3, 354, 3, 354, 3, 354, 5, 354, 5307, 10,
	354, 3, 354, 3, 354, 7, 354, 5311, 10, 354, 12, 354, 14, 354, 5314, 11,
	354, 5, 354, 5316, 10, 354, 3, 355, 3, 355, 3, 355, 3, 355, 3, 355, 5,
	355, 5323, 10, 355, 3, 355, 3, 355, 3, 356, 3, 356, 3, 356, 3, 356, 3,
	356, 3, 356, 3, 356, 3, 356, 3, 356, 3, 356, 3, 356, 3, 356, 5, 356, 5339,
	10, 356, 3, 357, 3, 357, 3, 357, 5, 357, 5344, 10, 357, 3, 358, 3, 358,
	3, 358, 3, 358, 7, 358, 5350, 10, 358, 12, 358, 14, 358, 5353, 11, 358,
	3, 358, 3, 358, 3, 359, 3, 359, 3, 359, 3, 359, 3, 359, 3, 359, 3, 359,
	3, 359, 3, 359, 3, 359, 3, 359, 5, 359, 5368, 10, 359, 5, 359, 5370, 10,
	359, 3, 359, 7, 359, 5373, 10, 359, 12, 359, 14, 359, 5376, 11, 359, 3,
	359, 3, 359, 3, 359, 3, 359, 7, 359, 5382, 10, 359, 12, 359, 14, 359, 5385,
	11, 359, 3, 359, 3, 359, 5, 359, 5389, 10, 359, 3, 360, 3, 360, 3, 360,
	5, 360, 5394, 10, 360, 3, 360, 3, 360, 3, 360, 5, 360, 5399, 10, 360, 3,
	361, 3, 361, 3, 361, 7, 361, 5404, 10, 361, 12, 361, 14, 361, 5407, 11,
	361, 3, 362, 5, 362, 5410, 10, 362, 3, 362, 3, 362, 5, 362, 5414, 10, 362,
	3, 362, 3, 362, 3, 362, 5, 362, 5419, 10, 362, 3, 362, 3, 362, 3, 362,
	3, 362, 5, 362, 5425, 10, 362, 3, 362, 3, 362, 3, 362, 3, 362, 5, 362,
	5431, 10, 362, 3, 362, 3, 362, 3, 362, 5, 362, 5436, 10, 362, 3, 362, 3,
	362, 3, 362, 5, 362, 5441, 10, 362, 3, 362, 3, 362, 3, 362, 5, 362, 5446,
	10, 362, 3, 362, 5, 362, 5449, 10, 362, 3, 363, 3, 363, 3, 363, 7, 363,
	5454, 10, 363, 12, 363, 14, 363, 5457, 11, 363, 3, 364, 3, 364, 3, 364,
	3, 364, 3, 364, 3, 364, 5, 364, 5465, 10, 364, 5, 364, 5467, 10, 364, 3,
	365, 3, 365, 3, 365, 3, 365, 7, 365, 5473, 10, 365, 12, 365, 14, 365, 5476,
	11, 365, 3, 365, 3, 365, 3, 365, 3, 365, 3, 365, 3, 365, 7, 365, 5484,
	10, 365, 12, 365, 14, 365, 5487, 11, 365, 5, 365, 5489, 10, 365, 3, 365,
	3, 365, 3, 365, 3, 365, 7, 365, 5495, 10, 365, 12, 365, 14, 365, 5498,
	11, 365, 5, 365, 5500, 10, 365, 5, 365, 5502, 10, 365, 3, 366, 3, 366,
	3, 366, 3, 366, 5, 366, 5508, 10, 366, 3, 367, 3, 367, 5, 367, 5512, 10,
	367, 3, 368, 3, 368, 3, 368, 3, 368, 3, 368, 3, 368, 3, 368, 3, 368, 3,
	368, 3, 368, 3, 368, 3, 368, 3, 368, 3, 368, 5, 368, 5528, 10, 368, 3,
	369, 3, 369, 3, 369, 3, 369, 3, 369, 5, 369, 5535, 10, 369, 3, 369, 3,
	369, 3, 369, 3, 369, 3, 369, 3, 369, 3, 369, 3, 369, 3, 369, 3, 369, 3,
	369, 5, 369, 5548, 10, 369, 3, 369, 3, 369, 3, 369, 5, 369, 5553, 10, 369,
	3, 370, 5, 370, 5556, 10, 370, 3, 370, 3, 370, 3, 370, 3, 371, 3, 371,
	5, 371, 5563, 10, 371, 3, 372, 3, 372, 3, 373, 3, 373, 3, 374, 3, 374,
	3, 374, 3, 374, 3, 374, 3, 374, 3, 374, 3, 374, 3, 374, 3, 374, 3, 374,
	3, 374, 3, 374, 3, 374, 3, 374, 3, 374, 5, 374, 5585, 10, 374, 3, 374,
	5, 374, 5588, 10, 374, 3, 375, 3, 375, 3, 375, 5, 375, 5593, 10, 375, 3,
	375, 3, 375, 7, 375, 5597, 10, 375, 12, 375, 14, 375, 5600, 11, 375, 3,
	375, 3, 375, 5, 375, 5604, 10, 375, 3, 375, 5, 375, 5607, 10, 375, 3, 376,
	3, 376, 3, 376, 3, 376, 7, 376, 5613, 10, 376, 12, 376, 14, 376, 5616,
	11, 376, 3, 376, 3, 376, 3, 376, 7, 376, 5621, 10, 376, 12, 376, 14, 376,
	5624, 11, 376, 3, 377, 3, 377, 3, 377, 3, 377, 3, 377, 3, 377, 3, 377,
	3, 377, 5, 377, 5634, 10, 377, 3, 378, 3, 378, 5, 378, 5638, 10, 378, 3,
	378, 3, 378, 3, 378, 3, 378, 6, 378, 5644, 10, 378, 13, 378, 14, 378, 5645,
	6, 378, 5648, 10, 378, 13, 378, 14, 378, 5649, 3, 378, 3, 378, 6, 378,
	5654, 10, 378, 13, 378, 14, 378, 5655, 5, 378, 5658, 10, 378, 3, 378, 3,
	378, 3, 378, 3, 379, 3, 379, 3, 379, 3, 379, 6, 379, 5667, 10, 379, 13,
	379, 14, 379, 5668, 3, 379, 3, 379, 3, 379, 3, 379, 6, 379, 5675, 10, 379,
	13, 379, 14, 379, 5676, 7, 379, 5679, 10, 379, 12, 379, 14, 379, 5682,
	11, 379, 3, 379, 3, 379, 6, 379, 5686, 10, 379, 13, 379, 14, 379, 5687,
	5, 379, 5690, 10, 379, 3, 379, 3, 379, 3, 379, 3, 380, 3, 380, 3, 380,
	3, 381, 3, 381, 3, 381, 3, 382, 3, 382, 3, 382, 5, 382, 5704, 10, 382,
	3, 382, 3, 382, 6, 382, 5708, 10, 382, 13, 382, 14, 382, 5709, 3, 382,
	3, 382, 3, 382, 5, 382, 5715, 10, 382, 3, 383, 3, 383, 3, 383, 5, 383,
	5720, 10, 383, 3, 383, 3, 383, 6, 383, 5724, 10, 383, 13, 383, 14, 383,
	5725, 3, 383, 3, 383, 3, 383, 3, 383, 3, 383, 5, 383, 5733, 10, 383, 3,
	384, 3, 384, 3, 384, 3, 385, 3, 385, 3, 385, 5, 385, 5741, 10, 385, 3,
	385, 3, 385, 3, 385, 3, 385, 6, 385, 5747, 10, 385, 13, 385, 14, 385, 5748,
	3, 385, 3, 385, 3, 385, 5, 385, 5754, 10, 385, 3, 386, 3, 386, 3, 386,
	3, 386, 5, 386, 5760, 10, 386, 3, 387, 3, 387, 3, 387, 3, 388, 3, 388,
	3, 388, 3, 388, 3, 388, 3, 388, 3, 389, 3, 389, 5, 389, 5773, 10, 389,
	3, 389, 5, 389, 5776, 10, 389, 3, 389, 3, 389, 3, 389, 3, 389, 3, 389,
	7, 389, 5783, 10, 389, 12, 389, 14, 389, 5786, 11, 389, 3, 390, 3, 390,
	3, 390, 3, 391, 3, 391, 3, 391, 3, 391, 3, 391, 5, 391, 5796, 10, 391,
	3, 392, 3, 392, 3, 392, 3, 392, 3, 392, 3, 392, 3, 393, 3, 393, 3, 393,
	3, 393, 3, 393, 3, 393, 3, 393, 7, 393, 5811, 10, 393, 12, 393, 14, 393,
	5814, 11, 393, 3, 393, 3, 393, 3, 394, 3, 394, 5, 394, 5820, 10, 394, 3,
	394, 3, 394, 3, 394, 3, 394, 7, 394, 5826, 10, 394, 12, 394, 14, 394, 5829,
	11, 394, 3, 394, 3, 394, 3, 394, 3, 394, 3, 394, 7, 394, 5836, 10, 394,
	12, 394, 14, 394, 5839, 11, 394, 5, 394, 5841, 10, 394, 3, 395, 3, 395,
	3, 395, 3, 395, 3, 396, 3, 396, 3, 396, 3, 396, 3, 397, 3, 397, 5, 397,
	5853, 10, 397, 3, 398, 3, 398, 3, 399, 3, 399, 3, 400, 3, 400, 3, 401,
	3, 401, 3, 401, 5, 401, 5864, 10, 401, 3, 401, 3, 401, 3, 401, 3, 401,
	3, 401, 3, 401, 5, 401, 5872, 10, 401, 3, 402, 3, 402, 5, 402, 5876, 10,
	402, 3, 402, 3, 402, 3, 402, 3, 402, 7, 402, 5882, 10, 402, 12, 402, 14,
	402, 5885, 11, 402, 5, 402, 5887, 10, 402, 3, 403, 3, 403, 3, 403, 3, 403,
	3, 403, 3, 403, 7, 403, 5895, 10, 403, 12, 403, 14, 403, 5898, 11, 403,
	5, 403, 5900, 10, 403, 3, 404, 3, 404, 3, 404, 3, 404, 3, 405, 3, 405,
	3, 405, 3, 406, 3, 406, 3, 406, 3, 407, 3, 407, 3, 407, 3, 407, 5, 407,
	5916, 10, 407, 3, 407, 5, 407, 5919, 10, 407, 3, 407, 3, 407, 3, 407, 3,
	407, 5, 407, 5925, 10, 407, 3, 407, 3, 407, 5, 407, 5929, 10, 407, 3, 408,
	3, 408, 3, 408, 5, 408, 5934, 10, 408, 3, 409, 3, 409, 5, 409, 5938, 10,
	409, 3, 409, 5, 409, 5941, 10, 409, 3, 409, 3, 409, 5, 409, 5945, 10, 409,
	3, 409, 5, 409, 5948, 10, 409, 3, 410, 3, 410, 3, 410, 3, 410, 5, 410,
	5954, 10, 410, 3, 410, 5, 410, 5957, 10, 410, 3, 411, 3, 411, 5, 411, 5961,
	10, 411, 3, 411, 5, 411, 5964, 10, 411, 3, 411, 3, 411, 3, 411, 5, 411,
	5969, 10, 411, 3, 411, 5, 411, 5972, 10, 411, 3, 412, 3, 412, 5, 412, 5976,
	10, 412, 3, 412, 3, 412, 3, 412, 5, 412, 5981, 10, 412, 3, 412, 5, 412,
	5984, 10, 412, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 414, 3, 414,
	3, 414, 3, 415, 3, 415, 3, 415, 3, 416, 3, 416, 3, 416, 3, 417, 3, 417,
	3, 417, 3, 418, 3, 418, 5, 418, 6005, 10, 418, 3, 419, 3, 419, 3, 419,
	3, 419, 3, 419, 3, 419, 3, 419, 3, 419, 3, 419, 3, 419, 3, 419, 3, 419,
	5, 419, 6019, 10, 419, 3, 420, 3, 420, 3, 420, 3, 421, 3, 421, 3, 421,
	7, 421, 6027, 10, 421, 12, 421, 14, 421, 6030, 11, 421, 3, 421, 3, 421,
	3, 421, 3, 421, 3, 421, 3, 421, 3, 421, 7, 421, 6039, 10, 421, 12, 421,
	14, 421, 6042, 11, 421, 5, 421, 6044, 10, 421, 3, 422, 3, 422, 3, 422,
	3, 422, 3, 422, 3, 422, 3, 422, 3, 422, 3, 422, 3, 422, 3, 422, 3, 422,
	3, 422, 3, 422, 3, 422, 3, 422, 3, 422, 5, 422, 6063, 10, 422, 3, 422,
	5, 422, 6066, 10, 422, 5, 422, 6068, 10, 422, 3, 423, 3, 423, 3, 423, 3,
	423, 3, 423, 3, 423, 5, 423, 6076, 10, 423, 3, 424, 3, 424, 3, 424, 3,
	424, 3, 425, 3, 425, 3, 425, 3, 425, 3, 425, 5, 425, 6087, 10, 425, 3,
	425, 3, 425, 5, 425, 6091, 10, 425, 3, 425, 3, 425, 3, 425, 5, 425, 6096,
	10, 425, 3, 425, 5, 425, 6099, 10, 425, 3, 426, 3, 426, 3, 426, 3, 426,
	5, 426, 6105, 10, 426, 3, 427, 3, 427, 3, 427, 5, 427, 6110, 10, 427, 3,
	428, 3, 428, 3, 428, 3, 428, 5, 428, 6116, 10, 428, 3, 428, 3, 428, 3,
	429, 3, 429, 3, 429, 3, 429, 3, 429, 3, 430, 3, 430, 3, 430, 3, 430, 3,
	430, 3, 431, 3, 431, 3, 431, 3, 431, 3, 431, 3, 432, 3, 432, 3, 432, 3,
	432, 3, 432, 3, 433, 3, 433, 3, 433, 3, 433, 3, 433, 3, 434, 3, 434, 3,
	434, 3, 434, 3, 434, 3, 435, 3, 435, 3, 435, 3, 435, 3, 435, 3, 436, 3,
	436, 5, 436, 6157, 10, 436, 3, 436, 3, 436, 3, 437, 3, 437, 3, 437, 3,
	438, 3, 438, 3, 438, 3, 438, 3, 438, 5, 438, 6169, 10, 438, 3, 438, 3,
	438, 3, 438, 3, 438, 5, 438, 6175, 10, 438, 3, 438, 5, 438, 6178, 10, 438,
	3, 439, 3, 439, 3, 439, 5, 439, 6183, 10, 439, 3, 439, 5, 439, 6186, 10,
	439, 3, 440, 3, 440, 3, 440, 3, 440, 3, 440, 3, 441, 3, 441, 3, 441, 3,
	441, 5, 441, 6197, 10, 441, 3, 442, 3, 442, 3, 442, 3, 442, 3, 442, 3,
	442, 3, 442, 3, 442, 6, 442, 6207, 10, 442, 13, 442, 14, 442, 6208, 5,
	442, 6211, 10, 442, 5, 442, 6213, 10, 442, 3, 443, 3, 443, 3, 443, 3, 443,
	3, 444, 3, 444, 3, 444, 3, 444, 5, 444, 6223, 10, 444, 3, 444, 5, 444,
	6226, 10, 444, 3, 445, 3, 445, 3, 445, 3, 446, 3, 446, 3, 446, 3, 447,
	3, 447, 3, 447, 3, 447, 3, 447, 3, 448, 3, 448, 3, 448, 3, 448, 5, 448,
	6243, 10, 448, 3, 449, 3, 449, 5, 449, 6247, 10, 449, 3, 449, 3, 449, 3,
	450, 3, 450, 3, 450, 3, 450, 3, 450, 7, 450, 6256, 10, 450, 12, 450, 14,
	450, 6259, 11, 450, 5, 450, 6261, 10, 450, 3, 450, 3, 450, 3, 450, 5, 450,
	6266, 10, 450, 3, 450, 3, 450, 3, 450, 3, 450, 5, 450, 6272, 10, 450, 5,
	450, 6274, 10, 450, 3, 451, 3, 451, 3, 451, 3, 452, 3, 452, 3, 452, 3,
	452, 3, 452, 5, 452, 6284, 10, 452, 3, 452, 3, 452, 5, 452, 6288, 10, 452,
	3, 452, 3, 452, 3, 452, 5, 452, 6293, 10, 452, 3, 452, 5, 452, 6296, 10,
	452, 3, 452, 3, 452, 3, 452, 3, 452, 3, 453, 3, 453, 3, 453, 3, 453, 3,
	454, 3, 454, 3, 454, 3, 454, 3, 454, 3, 454, 5, 454, 6312, 10, 454, 3,
	455, 3, 455, 5, 455, 6316, 10, 455, 3, 455, 3, 455, 5, 455, 6320, 10, 455,
	3, 456, 3, 456, 3, 456, 5, 456, 6325, 10, 456, 3, 456, 5, 456, 6328, 10,
	456, 3, 457, 3, 457, 5, 457, 6332, 10, 457, 3, 457, 3, 457, 5, 457, 6336,
	10, 457, 3, 458, 3, 458, 3, 458, 3, 458, 3, 458, 5, 458, 6343, 10, 458,
	3, 458, 3, 458, 3, 458, 3, 458, 5, 458, 6349, 10, 458, 3, 458, 5, 458,
	6352, 10, 458, 3, 459, 3, 459, 3, 459, 3, 460, 3, 460, 3, 460, 3, 460,
	3, 460, 3, 460, 5, 460, 6363, 10, 460, 3, 461, 3, 461, 3, 461, 3, 461,
	5, 461, 6369, 10, 461, 3, 461, 3, 461, 5, 461, 6373, 10, 461, 3, 462, 3,
	462, 3, 462, 3, 463, 3, 463, 3, 463, 3, 463, 5, 463, 6382, 10, 463, 3,
	463, 3, 463, 3, 463, 3, 463, 3, 463, 3, 463, 3, 463, 3, 463, 3, 463, 3,
	463, 5, 463, 6394, 10, 463, 3, 463, 5, 463, 6397, 10, 463, 3, 463, 3, 463,
	5, 463, 6401, 10, 463, 3, 463, 5, 463, 6404, 10, 463, 5, 463, 6406, 10,
	463, 3, 464, 3, 464, 5, 464, 6410, 10, 464, 3, 464, 3, 464, 3, 464, 3,
	464, 3, 464, 3, 464, 3, 464, 3, 465, 3, 465, 5, 465, 6421, 10, 465, 3,
	466, 3, 466, 5, 466, 6425, 10, 466, 3, 467, 3, 467, 3, 467, 3, 467, 3,
	467, 7, 467, 6432, 10, 467, 12, 467, 14, 467, 6435, 11, 467, 3, 468, 3,
	468, 3, 468, 3, 468, 3, 468, 3, 468, 3, 469, 3, 469, 3, 469, 3, 469, 3,
	469, 7, 469, 6448, 10, 469, 12, 469, 14, 469, 6451, 11, 469, 3, 470, 3,
	470, 3, 470, 3, 470, 3, 471, 3, 471, 5, 471, 6459, 10, 471, 3, 471, 3,
	471, 3, 471, 5, 471, 6464, 10, 471, 3, 472, 3, 472, 3, 472, 3, 472, 3,
	472, 3, 472, 3, 472, 5, 472, 6473, 10, 472, 3, 472, 3, 472, 3, 472, 3,
	472, 5, 472, 6479, 10, 472, 3, 473, 3, 473, 3, 473, 3, 473, 5, 473, 6485,
	10, 473, 3, 474, 3, 474, 3, 474, 3, 474, 3, 474, 3, 474, 3, 474, 5, 474,
	6494, 10, 474, 3, 475, 3, 475, 3, 475, 3, 475, 5, 475, 6500, 10, 475, 3,
	476, 3, 476, 5, 476, 6504, 10, 476, 3, 476, 3, 476, 3, 476, 3, 477, 3,
	477, 5, 477, 6511, 10, 477, 3, 477, 3, 477, 3, 477, 5, 477, 6516, 10, 477,
	3, 477, 5, 477, 6519, 10, 477, 3, 477, 5, 477, 6522, 10, 477, 3, 478, 3,
	478, 3, 478, 3, 478, 3, 478, 3, 478, 5, 478, 6530, 10, 478, 3, 478, 3,
	478, 3, 478, 7, 478, 6535, 10, 478, 12, 478, 14, 478, 6538, 11, 478, 5,
	478, 6540, 10, 478, 3, 478, 3, 478, 5, 478, 6544, 10, 478, 3, 478, 5, 478,
	6547, 10, 478, 3, 478, 3, 478, 3, 478, 5, 478, 6552, 10, 478, 5, 478, 6554,
	10, 478, 3, 479, 3, 479, 3, 479, 3, 479, 5, 479, 6560, 10, 479, 3, 480,
	3, 480, 3, 480, 3, 480, 3, 480, 3, 480, 3, 480, 3, 480, 3, 480, 5, 480,
	6571, 10, 480, 3, 480, 3, 480, 3, 480, 7, 480, 6576, 10, 480, 12, 480,
	14, 480, 6579, 11, 480, 5, 480, 6581, 10, 480, 3, 480, 3, 480, 5, 480,
	6585, 10, 480, 3, 480, 5, 480, 6588, 10, 480, 3, 480, 5, 480, 6591, 10,
	480, 3, 481, 3, 481, 3, 481, 3, 481, 3, 481, 5, 481, 6598, 10, 481, 3,
	482, 3, 482, 3, 482, 3, 482, 3, 482, 3, 482, 3, 482, 3, 482, 7, 482, 6608,
	10, 482, 12, 482, 14, 482, 6611, 11, 482, 5, 482, 6613, 10, 482, 3, 483,
	3, 483, 3, 483, 3, 484, 3, 484, 3, 484, 3, 484, 3, 484, 7, 484, 6623, 10,
	484, 12, 484, 14, 484, 6626, 11, 484, 3, 484, 3, 484, 3, 484, 3, 484, 3,
	484, 3, 484, 5, 484, 6634, 10, 484, 3, 484, 3, 484, 3, 484, 5, 484, 6639,
	10, 484, 3, 485, 3, 485, 3, 485, 3, 485, 3, 485, 3, 485, 7, 485, 6647,
	10, 485, 12, 485, 14, 485, 6650, 11, 485, 3, 485, 3, 485, 5, 485, 6654,
	10, 485, 3, 486, 3, 486, 3, 486, 7, 486, 6659, 10, 486, 12, 486, 14, 486,
	6662, 11, 486, 3, 486, 5, 486, 6665, 10, 486, 3, 487, 3, 487, 5, 487, 6669,
	10, 487, 3, 487, 3, 487, 3, 487, 7, 487, 6674, 10, 487, 12, 487, 14, 487,
	6677, 11, 487, 3, 487, 5, 487, 6680, 10, 487, 3, 488, 3, 488, 3, 488, 3,
	488, 3, 488, 3, 488, 3, 488, 3, 488, 3, 488, 3, 488, 3, 488, 3, 488, 3,
	488, 3, 488, 3, 488, 3, 488, 3, 488, 5, 488, 6699, 10, 488, 3, 488, 3,
	488, 3, 488, 3, 488, 5, 488, 6705, 10, 488, 3, 489, 3, 489, 3, 489, 3,
	489, 3, 489, 7, 489, 6712, 10, 489, 12, 489, 14, 489, 6715, 11, 489, 3,
	489, 3, 489, 3, 489, 3, 489, 3, 489, 3, 489, 3, 489, 3, 489, 7, 489, 6725,
	10, 489, 12, 489, 14, 489, 6728, 11, 489, 3, 489, 3, 489, 3, 489, 3, 489,
	3, 489, 3, 489, 3, 489, 3, 489, 7, 489, 6738, 10, 489, 12, 489, 14, 489,
	6741, 11, 489, 3, 489, 3, 489, 3, 489, 5, 489, 6746, 10, 489, 3, 490, 3,
	490, 5, 490, 6750, 10, 490, 3, 490, 6, 490, 6753, 10, 490, 13, 490, 14,
	490, 6754, 3, 491, 3, 491, 3, 491, 3, 491, 3, 491, 3, 491, 3, 491, 7, 491,
	6764, 10, 491, 12, 491, 14, 491, 6767, 11, 491, 3, 492, 3, 492, 3, 492,
	3, 492, 3, 492, 3, 492, 5, 492, 6775, 10, 492, 3, 492, 3, 492, 3, 492,
	3, 492, 3, 492, 7, 492, 6782, 10, 492, 12, 492, 14, 492, 6785, 11, 492,
	3, 492, 3, 492, 5, 492, 6789, 10, 492, 3, 492, 3, 492, 5, 492, 6793, 10,
	492, 3, 493, 3, 493, 3, 493, 3, 493, 7, 493, 6799, 10, 493, 12, 493, 14,
	493, 6802, 11, 493, 3, 493, 5, 493, 6805, 10, 493, 3, 494, 3, 494, 3, 494,
	5, 494, 6810, 10, 494, 3, 494, 3, 494, 5, 494, 6814, 10, 494, 3, 494, 5,
	494, 6817, 10, 494, 5, 494, 6819, 10, 494, 3, 495, 3, 495, 3, 495, 5, 495,
	6824, 10, 495, 3, 495, 5, 495, 6827, 10, 495, 3, 496, 3, 496, 3, 497, 3,
	497, 3, 498, 3, 498, 3, 498, 3, 498, 3, 499, 3, 499, 3, 499, 3, 499, 3,
	499, 5, 499, 6842, 10, 499, 3, 500, 3, 500, 3, 501, 3, 501, 3, 501, 3,
	501, 3, 501, 3, 501, 3, 501, 3, 501, 3, 501, 3, 501, 3, 501, 3, 501, 3,
	501, 3, 501, 3, 501, 3, 501, 3, 501, 3, 501, 3, 501, 3, 501, 3, 501, 3,
	501, 3, 501, 3, 501, 3, 501, 3, 501, 3, 501, 3, 501, 3, 501, 3, 501, 3,
	501, 3, 501, 3, 501, 3, 501, 3, 501, 3, 501, 3, 501, 3, 501, 3, 501, 3,
	501, 3, 501, 3, 501, 3, 501, 5, 501, 6889, 10, 501, 3, 502, 3, 502, 5,
	502, 6893, 10, 502, 3, 502, 3, 502, 3, 502, 3, 503, 3, 503, 5, 503, 6900,
	10, 503, 3, 503, 5, 503, 6903, 10, 503, 3, 503, 5, 503, 6906, 10, 503,
	3, 503, 5, 503, 6909, 10, 503, 3, 503, 3, 503, 3, 503, 3, 503, 3, 504,
	3, 504, 3, 504, 3, 504, 3, 504, 3, 504, 7, 504, 6921, 10, 504, 12, 504,
	14, 504, 6924, 11, 504, 5, 504, 6926, 10, 504, 5, 504, 6928, 10, 504, 3,
	505, 3, 505, 3, 505, 3, 505, 5, 505, 6934, 10, 505, 3, 506, 3, 506, 5,
	506, 6938, 10, 506, 3, 506, 5, 506, 6941, 10, 506, 3, 506, 5, 506, 6944,
	10, 506, 3, 507, 3, 507, 5, 507, 6948, 10, 507, 3, 507, 3, 507, 5, 507,
	6952, 10, 507, 3, 507, 3, 507, 5, 507, 6956, 10, 507, 3, 507, 5, 507, 6959,
	10, 507, 3, 507, 5, 507, 6962, 10, 507, 5, 507, 6964, 10, 507, 3, 508,
	3, 508, 3, 508, 3, 509, 3, 509, 5, 509, 6971, 10, 509, 3, 510, 3, 510,
	3, 510, 3, 510, 3, 510, 3, 510, 3, 510, 3, 510, 7, 510, 6981, 10, 510,
	12, 510, 14, 510, 6984, 11, 510, 5, 510, 6986, 10, 510, 3, 511, 3, 511,
	3, 511, 3, 512, 3, 512, 3, 512, 3, 512, 3, 513, 3, 513, 3, 513, 3, 513,
	3, 513, 3, 513, 3, 513, 3, 513, 3, 513, 3, 513, 5, 513, 7005, 10, 513,
	5, 513, 7007, 10, 513, 3, 513, 3, 513, 3, 513, 3, 513, 3, 513, 3, 513,
	5, 513, 7015, 10, 513, 3, 513, 3, 513, 3, 513, 3, 513, 3, 513, 5, 513,
	7022, 10, 513, 5, 513, 7024, 10, 513, 3, 514, 3, 514, 5, 514, 7028, 10,
	514, 3, 514, 3, 514, 3, 515, 5, 515, 7033, 10, 515, 3, 515, 3, 515, 3,
	516, 3, 516, 5, 516, 7039, 10, 516, 3, 516, 5, 516, 7042, 10, 516, 3, 516,
	3, 516, 3, 517, 3, 517, 5, 517, 7048, 10, 517, 3, 517, 5, 517, 7051, 10,
	517, 3, 517, 5, 517, 7054, 10, 517, 3, 518, 3, 518, 3, 518, 7, 518, 7059,
	10, 518, 12, 518, 14, 518, 7062, 11, 518, 3, 518, 5, 518, 7065, 10, 518,
	3, 519, 3, 519, 3, 519, 3, 519, 3, 519, 5, 519, 7072, 10, 519, 3, 519,
	3, 519, 3, 519, 3, 519, 5, 519, 7078, 10, 519, 3, 519, 3, 519, 3, 519,
	3, 519, 5, 519, 7084, 10, 519, 3, 519, 5, 519, 7087, 10, 519, 3, 519, 3,
	519, 3, 519, 5, 519, 7092, 10, 519, 3, 519, 3, 519, 5, 519, 7096, 10, 519,
	3, 519, 3, 519, 3, 519, 3, 519, 5, 519, 7102, 10, 519, 3, 519, 5, 519,
	7105, 10, 519, 3, 519, 3, 519, 3, 519, 3, 519, 3, 519, 3, 519, 3, 519,
	5, 519, 7114, 10, 519, 5, 519, 7116, 10, 519, 3, 520, 3, 520, 3, 520, 3,
	520, 3, 520, 3, 520, 3, 520, 3, 520, 3, 520, 5, 520, 7127, 10, 520, 3,
	520, 3, 520, 3, 520, 3, 520, 3, 520, 3, 520, 3, 520, 5, 520, 7136, 10,
	520, 3, 520, 3, 520, 5, 520, 7140, 10, 520, 3, 520, 3, 520, 3, 520, 3,
	520, 3, 520, 3, 520, 3, 520, 5, 520, 7149, 10, 520, 3, 520, 3, 520, 3,
	520, 3, 520, 3, 520, 3, 520, 3, 520, 3, 520, 3, 520, 3, 520, 3, 520, 3,
	520, 5, 520, 7163, 10, 520, 3, 521, 3, 521, 3, 521, 7, 521, 7168, 10, 521,
	12, 521, 14, 521, 7171, 11, 521, 3, 522, 3, 522, 3, 522, 7, 522, 7176,
	10, 522, 12, 522, 14, 522, 7179, 11, 522, 3, 523, 3, 523, 3, 523, 3, 523,
	3, 523, 5, 523, 7186, 10, 523, 3, 523, 3, 523, 3, 523, 3, 523, 3, 523,
	3, 523, 3, 523, 3, 523, 3, 523, 5, 523, 7197, 10, 523, 3, 523, 3, 523,
	3, 523, 3, 523, 3, 523, 5, 523, 7204, 10, 523, 3, 523, 3, 523, 3, 523,
	3, 523, 3, 523, 5, 523, 7211, 10, 523, 3, 523, 3, 523, 3, 523, 3, 523,
	3, 523, 5, 523, 7218, 10, 523, 3, 523, 3, 523, 3, 523, 3, 523, 3, 523,
	3, 523, 3, 523, 3, 523, 3, 523, 3, 523, 3, 523, 3, 523, 3, 523, 3, 523,
	3, 523, 3, 523, 3, 523, 3, 523, 3, 523, 3, 523, 3, 523, 3, 523, 3, 523,
	3, 523, 3, 523, 3, 523, 3, 523, 3, 523, 3, 523, 3, 523, 3, 523, 3, 523,
	3, 523, 3, 523, 3, 523, 3, 523, 3, 523, 3, 523, 3, 523, 3, 523, 3, 523,
	3, 523, 3, 523, 5, 523, 7263, 10, 523, 3, 524, 3, 524, 3, 525, 3, 525,
	3, 525, 3, 525, 3, 525, 3, 525, 3, 525, 5, 525, 7274, 10, 525, 3, 526,
	3, 526, 3, 526, 3, 526, 3, 526, 5, 526, 7281, 10, 526, 3, 526, 3, 526,
	5, 526, 7285, 10, 526, 3, 526, 5, 526, 7288, 10, 526, 3, 526, 5, 526, 7291,
	10, 526, 3, 526, 5, 526, 7294, 10, 526, 3, 527, 3, 527, 3, 527, 3, 527,
	3, 527, 3, 527, 3, 527, 3, 527, 3, 527, 3, 527, 3, 527, 3, 527, 3, 527,
	3, 527, 3, 527, 3, 527, 3, 527, 3, 527, 3, 527, 3, 527, 3, 527, 3, 527,
	3, 527, 3, 527, 3, 527, 3, 527, 3, 527, 3, 527, 3, 527, 3, 527, 3, 527,
	3, 527, 3, 527, 3, 527, 3, 527, 3, 527, 3, 527, 3, 527, 3, 527, 5, 527,
	7335, 10, 527, 3, 528, 3, 528, 3, 528, 7, 528, 7340, 10, 528, 12, 528,
	14, 528, 7343, 11, 528, 3, 529, 3, 529, 3, 529, 3, 529, 3, 529, 7, 529,
	7350, 10, 529, 12, 529, 14, 529, 7353, 11, 529, 3, 530, 3, 530, 3, 530,
	3, 530, 3, 530, 3, 530, 5, 530, 7361, 10, 530, 3, 530, 7, 530, 7364, 10,
	530, 12, 530, 14, 530, 7367, 11, 530, 5, 530, 7369, 10, 530, 3, 531, 3,
	531, 3, 531, 7, 531, 7374, 10, 531, 12, 531, 14, 531, 7377, 11, 531, 3,
	532, 6, 532, 7380, 10, 532, 13, 532, 14, 532, 7381, 3, 533, 3, 533, 3,
	533, 3, 533, 3, 533, 3, 533, 3, 533, 3, 533, 3, 533, 5, 533, 7393, 10,
	533, 3, 533, 3, 533, 3, 533, 3, 533, 3, 533, 3, 533, 3, 533, 3, 533, 3,
	533, 5, 533, 7404, 10, 533, 3, 533, 3, 533, 3, 533, 3, 533, 5, 533, 7410,
	10, 533, 3, 533, 3, 533, 3, 533, 3, 533, 5, 533, 7416, 10, 533, 3, 534,
	3, 534, 3, 534, 3, 534, 5, 534, 7422, 10, 534, 3, 534, 3, 534, 5, 534,
	7426, 10, 534, 3, 534, 5, 534, 7429, 10, 534, 3, 534, 5, 534, 7432, 10,
	534, 3, 534, 3, 534, 3, 534, 3, 534, 5, 534, 7438, 10, 534, 3, 534, 3,
	534, 3, 534, 3, 534, 3, 534, 3, 534, 3, 534, 3, 534, 5, 534, 7448, 10,
	534, 3, 534, 3, 534, 3, 534, 3, 534, 3, 534, 3, 534, 3, 534, 3, 534, 7,
	534, 7458, 10, 534, 12, 534, 14, 534, 7461, 11, 534, 5, 534, 7463, 10,
	534, 5, 534, 7465, 10, 534, 3, 535, 3, 535, 5, 535, 7469, 10, 535, 3, 536,
	3, 536, 3, 536, 7, 536, 7474, 10, 536, 12, 536, 14, 536, 7477, 11, 536,
	3, 537, 3, 537, 3, 537, 3, 537, 5, 537, 7483, 10, 537, 3, 537, 3, 537,
	3, 537, 7, 537, 7488, 10, 537, 12, 537, 14, 537, 7491, 11, 537, 3, 538,
	3, 538, 3, 538, 3, 538, 3, 538, 5, 538, 7498, 10, 538, 3, 538, 3, 538,
	3, 538, 7, 538, 7503, 10, 538, 12, 538, 14, 538, 7506, 11, 538, 3, 539,
	3, 539, 3, 539, 3, 539, 5, 539, 7512, 10, 539, 3, 539, 3, 539, 3, 539,
	7, 539, 7517, 10, 539, 12, 539, 14, 539, 7520, 11, 539, 3, 540, 3, 540,
	3, 540, 3, 540, 3, 540, 3, 540, 3, 540, 3, 540, 3, 540, 3, 540, 7, 540,
	7532, 10, 540, 12, 540, 14, 540, 7535, 11, 540, 3, 541, 3, 541, 3, 541,
	3, 541, 3, 541, 3, 541, 3, 541, 3, 541, 7, 541, 7545, 10, 541, 12, 541,
	14, 541, 7548, 11, 541, 5, 541, 7550, 10, 541, 3, 541, 3, 541, 3, 541,
	3, 541, 7, 541, 7556, 10, 541, 12, 541, 14, 541, 7559, 11, 541, 3, 542,
	3, 542, 3, 542, 3, 542, 3, 542, 3, 542, 3, 542, 3, 542, 3, 542, 5, 542,
	7570, 10, 542, 3, 543, 3, 543, 3, 543, 3, 543, 5, 543, 7576, 10, 543, 3,
	543, 3, 543, 3, 543, 5, 543, 7581, 10, 543, 3, 543, 3, 543, 3, 543, 5,
	543, 7586, 10, 543, 3, 544, 3, 544, 3, 544, 3, 544, 3, 544, 3, 544, 3,
	544, 3, 544, 3, 544, 3, 544, 5, 544, 7598, 10, 544, 3, 545, 3, 545, 3,
	545, 3, 545, 3, 546, 3, 546, 3, 546, 7, 546, 7607, 10, 546, 12, 546, 14,
	546, 7610, 11, 546, 3, 547, 3, 547, 3, 547, 7, 547, 7615, 10, 547, 12,
	547, 14, 547, 7618, 11, 547, 3, 548, 3, 548, 3, 548, 5, 548, 7623, 10,
	548, 3, 549, 3, 549, 3, 549, 3, 549, 3, 549, 3, 549, 3, 549, 3, 549, 3,
	549, 5, 549, 7634, 10, 549, 3, 550, 3, 550, 3, 550, 3, 550, 3, 550, 5,
	550, 7641, 10, 550, 3, 551, 3, 551, 3, 551, 3, 551, 3, 551, 5, 551, 7648,
	10, 551, 3, 551, 3, 551, 5, 551, 7652, 10, 551, 3, 551, 3, 551, 3, 551,
	5, 551, 7657, 10, 551, 3, 552, 3, 552, 3, 552, 3, 552, 3, 552, 3, 552,
	3, 552, 3, 552, 3, 552, 3, 552, 5, 552, 7669, 10, 552, 3, 552, 3, 552,
	5, 552, 7673, 10, 552, 3, 552, 3, 552, 3, 552, 5, 552, 7678, 10, 552, 3,
	552, 3, 552, 3, 552, 3, 552, 3, 552, 3, 552, 3, 552, 3, 552, 5, 552, 7688,
	10, 552, 5, 552, 7690, 10, 552, 3, 553, 3, 553, 3, 553, 3, 553, 3, 553,
	3, 553, 3, 553, 3, 553, 5, 553, 7700, 10, 553, 3, 554, 3, 554, 3, 554,
	3, 554, 3, 554, 3, 554, 5, 554, 7708, 10, 554, 3, 555, 3, 555, 3, 555,
	3, 555, 5, 555, 7714, 10, 555, 3, 556, 3, 556, 5, 556, 7718, 10, 556, 3,
	557, 3, 557, 3, 557, 3, 557, 3, 557, 5, 557, 7725, 10, 557, 3, 558, 3,
	558, 3, 558, 3, 558, 3, 558, 5, 558, 7732, 10, 558, 3, 559, 3, 559, 3,
	559, 5, 559, 7737, 10, 559, 3, 559, 5, 559, 7740, 10, 559, 3, 559, 3, 559,
	5, 559, 7744, 10, 559, 3, 560, 3, 560, 3, 560, 3, 560, 7, 560, 7750, 10,
	560, 12, 560, 14, 560, 7753, 11, 560, 3, 561, 3, 561, 5, 561, 7757, 10,
	561, 3, 562, 3, 562, 3, 562, 3, 563, 3, 563, 3, 563, 3, 564, 3, 564, 3,
	564, 3, 564, 3, 564, 3, 564, 3, 564, 5, 564, 7772, 10, 564, 3, 565, 6,
	565, 7775, 10, 565, 13, 565, 14, 565, 7776, 3, 566, 3, 566, 3, 567, 3,
	567, 3, 567, 3, 567, 3, 567, 3, 567, 3, 567, 3, 567, 3, 567, 3, 567, 3,
	567, 3, 567, 3, 567, 3, 567, 3, 567, 3, 567, 3, 567, 3, 567, 3, 567, 3,
	567, 3, 567, 5, 567, 7802, 10, 567, 3, 568, 3, 568, 3, 568, 5, 568, 7807,
	10, 568, 3, 568, 3, 568, 3, 568, 5, 568, 7812, 10, 568, 3, 568, 3, 568,
	3, 568, 5, 568, 7817, 10, 568, 3, 568, 3, 568, 3, 568, 5, 568, 7822, 10,
	568, 3, 569, 3, 569, 3, 569, 7, 569, 7827, 10, 569, 12, 569, 14, 569, 7830,
	11, 569, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570,
	3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570,
	3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570,
	3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570,
	3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570,
	3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570,
	3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570,
	3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570,
	3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570,
	3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570,
	3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570, 3, 570,
	3, 570, 5, 570, 7931, 10, 570, 3, 571, 3, 571, 3, 571, 3, 571, 3, 572,
	3, 572, 3, 573, 3, 573, 3, 573, 7, 573, 7942, 10, 573, 12, 573, 14, 573,
	7945, 11, 573, 3, 574, 3, 574, 3, 574, 3, 574, 5, 574, 7951, 10, 574, 3,
	574, 3, 574, 3, 574, 3, 574, 3, 574, 5, 574, 7958, 10, 574, 3, 574, 3,
	574, 3, 574, 3, 574, 3, 574, 5, 574, 7965, 10, 574, 3, 574, 3, 574, 3,
	574, 3, 574, 3, 574, 5, 574, 7972, 10, 574, 3, 574, 3, 574, 3, 574, 3,
	574, 3, 574, 5, 574, 7979, 10, 574, 3, 574, 3, 574, 3, 574, 3, 574, 3,
	574, 5, 574, 7986, 10, 574, 3, 574, 3, 574, 3, 574, 3, 574, 3, 574, 5,
	574, 7993, 10, 574, 3, 574, 5, 574, 7996, 10, 574, 3, 575, 3, 575, 3, 575,
	7, 575, 8001, 10, 575, 12, 575, 14, 575, 8004, 11, 575, 3, 576, 3, 576,
	3, 576, 2, 7, 60, 328, 336, 344, 346, 577, 2, 4, 6, 8, 10, 12, 14, 16,
	18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52,
	54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88,
	90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120,
	122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150,
	152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180,
	182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210,
	212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240,
	242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270,
	272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300,
	302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330,
	332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360,
	362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390,
	392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420,
	422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450,
	452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480,
	482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510,
	512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540,
	542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570,
	572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600,
	602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630,
	632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660,
	662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690,
	692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720,
	722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750,
	752, 754, 756, 758, 760, 762, 764, 766, 768, 770, 772, 774, 776, 778, 780,
	782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810,
	812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840,
	842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870,
	872, 874, 876, 878, 880, 882, 884, 886, 888, 890, 892, 894, 896, 898, 900,
	902, 904, 906, 908, 910, 912, 914, 916, 918, 920, 922, 924, 926, 928, 930,
	932, 934, 936, 938, 940, 942, 944, 946, 948, 950, 952, 954, 956, 958, 960,
	962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990,
	992, 994, 996, 998, 1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016,
	1018, 1020, 1022, 1024, 1026, 1028, 1030, 1032, 1034, 1036, 1038, 1040,
	1042, 1044, 1046, 1048, 1050, 1052, 1054, 1056, 1058, 1060, 1062, 1064,
	1066, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088,
	1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 1106, 1108, 1110, 1112,
	1114, 1116, 1118, 1120, 1122, 1124, 1126, 1128, 1130, 1132, 1134, 1136,
	1138, 1140, 1142, 1144, 1146, 1148, 1150, 2, 120, 5, 2, 199, 199, 299,
	299, 384, 384, 3, 2, 738, 739, 4, 2, 199, 199, 384, 384, 6, 2, 263, 263,
	355, 355, 456, 456, 521, 521, 4, 2, 263, 263, 456, 456, 4, 2, 156, 156,
	384, 384, 4, 2, 310, 310, 564, 564, 4, 2, 368, 368, 601, 601, 4, 2, 85,
	85, 212, 213, 5, 2, 273, 273, 310, 310, 729, 729, 4, 2, 315, 315, 349,
	349, 4, 2, 170, 170, 319, 319, 4, 2, 362, 362, 593, 593, 4, 2, 627, 627,
	726, 726, 5, 2, 51, 64, 66, 73, 356, 356, 3, 2, 772, 773, 4, 2, 184, 184,
	695, 696, 4, 2, 256, 256, 708, 708, 150, 2, 76, 78, 80, 84, 87, 87, 90,
	91, 96, 100, 102, 103, 109, 110, 112, 114, 116, 117, 123, 123, 125, 126,
	128, 129, 135, 137, 139, 141, 143, 143, 145, 147, 150, 156, 158, 159, 161,
	163, 165, 165, 168, 168, 173, 173, 179, 180, 183, 186, 196, 198, 200, 200,
	205, 205, 207, 211, 219, 221, 226, 226, 228, 228, 230, 238, 241, 242, 244,
	245, 249, 250, 252, 255, 257, 258, 261, 263, 265, 265, 270, 270, 275, 276,
	278, 278, 281, 281, 283, 284, 286, 287, 290, 290, 294, 294, 296, 296, 300,
	304, 308, 308, 311, 311, 314, 314, 316, 316, 318, 318, 323, 323, 325, 325,
	335, 337, 340, 340, 342, 343, 346, 346, 348, 348, 351, 351, 355, 355, 361,
	361, 363, 364, 369, 370, 376, 379, 385, 386, 388, 407, 409, 412, 415, 421,
	425, 429, 431, 432, 435, 435, 437, 437, 439, 448, 450, 456, 458, 458, 461,
	462, 467, 468, 470, 470, 472, 475, 477, 479, 483, 483, 485, 485, 488, 490,
	495, 499, 501, 505, 509, 515, 517, 517, 520, 521, 523, 524, 527, 529, 532,
	535, 540, 540, 543, 544, 546, 548, 551, 555, 558, 558, 560, 560, 563, 563,
	567, 573, 576, 576, 580, 580, 582, 582, 584, 585, 587, 591, 595, 595, 597,
	599, 602, 603, 605, 605, 607, 607, 610, 616, 618, 618, 622, 624, 627, 627,
	632, 632, 635, 635, 637, 641, 648, 650, 652, 652, 654, 654, 656, 657, 659,
	659, 662, 666, 668, 668, 671, 676, 678, 680, 683, 688, 690, 691, 693, 698,
	702, 702, 705, 705, 707, 707, 710, 714, 716, 717, 722, 722, 725, 725, 727,
	727, 730, 732, 737, 738, 743, 743, 745, 746, 748, 752, 758, 760, 762, 762,
	764, 765, 767, 767, 5, 2, 246, 246, 581, 581, 629, 629, 34, 2, 94, 94,
	105, 105, 119, 120, 132, 132, 134, 134, 138, 138, 148, 149, 164, 164, 191,
	191, 215, 215, 229, 229, 269, 269, 271, 271, 295, 295, 298, 298, 312, 312,
	324, 324, 354, 354, 457, 457, 516, 516, 519, 519, 561, 561, 577, 577, 596,
	596, 606, 606, 631, 631, 634, 634, 660, 660, 667, 667, 709, 709, 718, 719,
	763, 763, 11, 2, 240, 240, 260, 260, 459, 459, 526, 526, 530, 530, 557,
	557, 574, 574, 579, 579, 677, 677, 6, 2, 288, 288, 372, 372, 507, 508,
	625, 625, 5, 2, 288, 288, 372, 372, 625, 625, 4, 2, 478, 478, 761, 761,
	4, 2, 81, 81, 104, 104, 3, 2, 682, 683, 5, 2, 201, 201, 322, 322, 726,
	726, 4, 2, 271, 271, 516, 516, 4, 2, 5, 5, 89, 89, 4, 2, 6, 6, 486, 486,
	4, 2, 7, 7, 460, 460, 6, 2, 256, 256, 466, 466, 708, 708, 722, 722, 4,
	2, 85, 85, 90, 90, 4, 2, 25, 25, 45, 45, 3, 2, 25, 30, 3, 2, 46, 47, 4,
	2, 51, 54, 100, 101, 4, 2, 536, 536, 601, 601, 7, 2, 172, 172, 202, 202,
	506, 506, 537, 537, 604, 604, 4, 2, 353, 353, 358, 358, 4, 2, 264, 264,
	356, 356, 4, 2, 263, 263, 355, 355, 4, 2, 42, 42, 776, 776, 4, 2, 310,
	310, 580, 580, 5, 2, 253, 253, 534, 534, 732, 732, 3, 2, 58, 59, 5, 2,
	115, 115, 359, 359, 704, 704, 12, 2, 186, 190, 304, 307, 429, 429, 432,
	434, 440, 440, 532, 532, 611, 611, 617, 617, 751, 751, 767, 768, 9, 2,
	107, 107, 326, 326, 332, 332, 423, 423, 430, 430, 636, 636, 700, 700, 5,
	2, 193, 193, 265, 266, 469, 469, 3, 2, 113, 114, 4, 2, 381, 381, 422, 422,
	8, 2, 283, 284, 346, 346, 369, 369, 441, 443, 513, 514, 622, 622, 5, 2,
	631, 631, 724, 724, 769, 769, 3, 2, 130, 131, 3, 2, 16, 17, 4, 2, 176,
	176, 373, 374, 5, 2, 195, 195, 221, 221, 265, 265, 5, 2, 195, 195, 211,
	211, 426, 426, 4, 2, 93, 93, 203, 203, 4, 2, 85, 85, 212, 212, 4, 2, 372,
	372, 463, 463, 4, 2, 191, 191, 217, 217, 4, 2, 370, 370, 536, 536, 4, 2,
	92, 92, 703, 703, 3, 2, 757, 758, 3, 2, 615, 616, 4, 2, 122, 122, 583,
	583, 4, 2, 67, 69, 195, 195, 5, 2, 3, 4, 195, 195, 459, 459, 4, 2, 181,
	181, 608, 608, 4, 2, 195, 195, 776, 776, 4, 2, 209, 209, 226, 226, 3, 2,
	65, 66, 5, 2, 427, 427, 688, 688, 714, 714, 4, 2, 197, 197, 336, 336, 4,
	2, 123, 123, 372, 372, 4, 2, 79, 79, 217, 217, 4, 2, 78, 78, 314, 314,
	4, 2, 669, 669, 747, 747, 5, 2, 116, 116, 296, 296, 605, 605, 4, 2, 710,
	710, 733, 733, 4, 2, 335, 335, 748, 748, 5, 2, 279, 279, 642, 642, 721,
	721, 3, 2, 663, 665, 4, 2, 134, 134, 685, 685, 8, 2, 151, 151, 154, 154,
	195, 195, 221, 221, 265, 265, 547, 547, 5, 2, 263, 263, 355, 355, 457,
	457, 4, 2, 211, 211, 426, 426, 5, 2, 313, 313, 320, 320, 491, 491, 4, 2,
	173, 173, 659, 659, 4, 2, 468, 468, 602, 602, 13, 2, 125, 125, 136, 136,
	147, 147, 161, 163, 179, 179, 428, 428, 445, 445, 587, 587, 610, 610, 673,
	673, 686, 686, 5, 2, 166, 166, 248, 248, 715, 715, 4, 2, 203, 204, 251,
	251, 4, 2, 182, 182, 609, 609, 4, 2, 315, 316, 350, 350, 4, 2, 277, 277,
	313, 313, 4, 2, 108, 108, 385, 385, 4, 2, 444, 444, 666, 666, 4, 2, 288,
	288, 625, 625, 6, 2, 193, 193, 332, 332, 542, 542, 672, 672, 4, 2, 253,
	253, 534, 534, 4, 2, 681, 681, 730, 730, 4, 2, 158, 158, 533, 533, 4, 2,
	63, 64, 346, 346, 5, 2, 472, 472, 476, 476, 776, 776, 4, 2, 325, 325, 682,
	683, 4, 2, 105, 105, 660, 660, 4, 2, 345, 345, 584, 584, 5, 2, 280, 280,
	525, 525, 682, 682, 4, 2, 375, 375, 723, 723, 4, 2, 195, 195, 483, 483,
	4, 2, 712, 712, 776, 776, 4, 2, 555, 555, 656, 656, 4, 2, 648, 648, 650,
	650, 4, 2, 76, 76, 466, 466, 2, 9081, 2, 1262, 3, 2, 2, 2, 4, 1264, 3,
	2, 2, 2, 6, 1282, 3, 2, 2, 2, 8, 1292, 3, 2, 2, 2, 10, 1309, 3, 2, 2, 2,
	12, 1319, 3, 2, 2, 2, 14, 1321, 3, 2, 2, 2, 16, 1331, 3, 2, 2, 2, 18, 1342,
	3, 2, 2, 2, 20, 1354, 3, 2, 2, 2, 22, 1359, 3, 2, 2, 2, 24, 1370, 3, 2,
	2, 2, 26, 1386, 3, 2, 2, 2, 28, 1393, 3, 2, 2, 2, 30, 1411, 3, 2, 2, 2,
	32, 1423, 3, 2, 2, 2, 34, 1439, 3, 2, 2, 2, 36, 1444, 3, 2, 2, 2, 38, 1449,
	3, 2, 2, 2, 40, 1473, 3, 2, 2, 2, 42, 1478, 3, 2, 2, 2, 44, 1480, 3, 2,
	2, 2, 46, 1483, 3, 2, 2, 2, 48, 1499, 3, 2, 2, 2, 50, 1507, 3, 2, 2, 2,
	52, 1527, 3, 2, 2, 2, 54, 1535, 3, 2, 2, 2, 56, 1550, 3, 2, 2, 2, 58, 1553,
	3, 2, 2, 2, 60, 1570, 3, 2, 2, 2, 62, 1579, 3, 2, 2, 2, 64, 1587, 3, 2,
	2, 2, 66, 1600, 3, 2, 2, 2, 68, 1602, 3, 2, 2, 2, 70, 1628, 3, 2, 2, 2,
	72, 1644, 3, 2, 2, 2, 74, 1657, 3, 2, 2, 2, 76, 1659, 3, 2, 2, 2, 78, 1668,
	3, 2, 2, 2, 80, 1686, 3, 2, 2, 2, 82, 1696, 3, 2, 2, 2, 84, 1700, 3, 2,
	2, 2, 86, 1710, 3, 2, 2, 2, 88, 1712, 3, 2, 2, 2, 90, 1764, 3, 2, 2, 2,
	92, 1806, 3, 2, 2, 2, 94, 1809, 3, 2, 2, 2, 96, 1812, 3, 2, 2, 2, 98, 1822,
	3, 2, 2, 2, 100, 1834, 3, 2, 2, 2, 102, 1852, 3, 2, 2, 2, 104, 1854, 3,
	2, 2, 2, 106, 1858, 3, 2, 2, 2, 108, 1875, 3, 2, 2, 2, 110, 1877, 3, 2,
	2, 2, 112, 1879, 3, 2, 2, 2, 114, 1882, 3, 2, 2, 2, 116, 1887, 3, 2, 2,
	2, 118, 1895, 3, 2, 2, 2, 120, 1908, 3, 2, 2, 2, 122, 1944, 3, 2, 2, 2,
	124, 1946, 3, 2, 2, 2, 126, 1958, 3, 2, 2, 2, 128, 1966, 3, 2, 2, 2, 130,
	2001, 3, 2, 2, 2, 132, 2008, 3, 2, 2, 2, 134, 2010, 3, 2, 2, 2, 136, 2027,
	3, 2, 2, 2, 138, 2036, 3, 2, 2, 2, 140, 2038, 3, 2, 2, 2, 142, 2041, 3,
	2, 2, 2, 144, 2055, 3, 2, 2, 2, 146, 2058, 3, 2, 2, 2, 148, 2073, 3, 2,
	2, 2, 150, 2077, 3, 2, 2, 2, 152, 2079, 3, 2, 2, 2, 154, 2088, 3, 2, 2,
	2, 156, 2092, 3, 2, 2, 2, 158, 2100, 3, 2, 2, 2, 160, 2114, 3, 2, 2, 2,
	162, 2152, 3, 2, 2, 2, 164, 2166, 3, 2, 2, 2, 166, 2169, 3, 2, 2, 2, 168,
	2173, 3, 2, 2, 2, 170, 2178, 3, 2, 2, 2, 172, 2180, 3, 2, 2, 2, 174, 2183,
	3, 2, 2, 2, 176, 2187, 3, 2, 2, 2, 178, 2195, 3, 2, 2, 2, 180, 2197, 3,
	2, 2, 2, 182, 2206, 3, 2, 2, 2, 184, 2208, 3, 2, 2, 2, 186, 2215, 3, 2,
	2, 2, 188, 2217, 3, 2, 2, 2, 190, 2219, 3, 2, 2, 2, 192, 2223, 3, 2, 2,
	2, 194, 2230, 3, 2, 2, 2, 196, 2236, 3, 2, 2, 2, 198, 2238, 3, 2, 2, 2,
	200, 2242, 3, 2, 2, 2, 202, 2252, 3, 2, 2, 2, 204, 2254, 3, 2, 2, 2, 206,
	2256, 3, 2, 2, 2, 208, 2258, 3, 2, 2, 2, 210, 2260, 3, 2, 2, 2, 212, 2262,
	3, 2, 2, 2, 214, 2266, 3, 2, 2, 2, 216, 2270, 3, 2, 2, 2, 218, 2272, 3,
	2, 2, 2, 220, 2275, 3, 2, 2, 2, 222, 2285, 3, 2, 2, 2, 224, 2294, 3, 2,
	2, 2, 226, 2304, 3, 2, 2, 2, 228, 2313, 3, 2, 2, 2, 230, 2325, 3, 2, 2,
	2, 232, 2327, 3, 2, 2, 2, 234, 2338, 3, 2, 2, 2, 236, 2340, 3, 2, 2, 2,
	238, 2343, 3, 2, 2, 2, 240, 2345, 3, 2, 2, 2, 242, 2355, 3, 2, 2, 2, 244,
	2357, 3, 2, 2, 2, 246, 2365, 3, 2, 2, 2, 248, 2374, 3, 2, 2, 2, 250, 2378,
	3, 2, 2, 2, 252, 2380, 3, 2, 2, 2, 254, 2382, 3, 2, 2, 2, 256, 2384, 3,
	2, 2, 2, 258, 2395, 3, 2, 2, 2, 260, 2397, 3, 2, 2, 2, 262, 2402, 3, 2,
	2, 2, 264, 2404, 3, 2, 2, 2, 266, 2413, 3, 2, 2, 2, 268, 2422, 3, 2, 2,
	2, 270, 2424, 3, 2, 2, 2, 272, 2426, 3, 2, 2, 2, 274, 2428, 3, 2, 2, 2,
	276, 2430, 3, 2, 2, 2, 278, 2438, 3, 2, 2, 2, 280, 2446, 3, 2, 2, 2, 282,
	2454, 3, 2, 2, 2, 284, 2456, 3, 2, 2, 2, 286, 2458, 3, 2, 2, 2, 288, 2460,
	3, 2, 2, 2, 290, 2462, 3, 2, 2, 2, 292, 2464, 3, 2, 2, 2, 294, 2466, 3,
	2, 2, 2, 296, 2468, 3, 2, 2, 2, 298, 2474, 3, 2, 2, 2, 300, 2476, 3, 2,
	2, 2, 302, 2481, 3, 2, 2, 2, 304, 2483, 3, 2, 2, 2, 306, 2490, 3, 2, 2,
	2, 308, 2492, 3, 2, 2, 2, 310, 2494, 3, 2, 2, 2, 312, 2499, 3, 2, 2, 2,
	314, 2501, 3, 2, 2, 2, 316, 2505, 3, 2, 2, 2, 318, 2507, 3, 2, 2, 2, 320,
	2509, 3, 2, 2, 2, 322, 2519, 3, 2, 2, 2, 324, 2521, 3, 2, 2, 2, 326, 2523,
	3, 2, 2, 2, 328, 2531, 3, 2, 2, 2, 330, 2549, 3, 2, 2, 2, 332, 2551, 3,
	2, 2, 2, 334, 2553, 3, 2, 2, 2, 336, 2555, 3, 2, 2, 2, 338, 2585, 3, 2,
	2, 2, 340, 2587, 3, 2, 2, 2, 342, 2644, 3, 2, 2, 2, 344, 2646, 3, 2, 2,
	2, 346, 2740, 3, 2, 2, 2, 348, 2753, 3, 2, 2, 2, 350, 2762, 3, 2, 2, 2,
	352, 2773, 3, 2, 2, 2, 354, 2775, 3, 2, 2, 2, 356, 2795, 3, 2, 2, 2, 358,
	2797, 3, 2, 2, 2, 360, 2799, 3, 2, 2, 2, 362, 2804, 3, 2, 2, 2, 364, 2828,
	3, 2, 2, 2, 366, 2845, 3, 2, 2, 2, 368, 2847, 3, 2, 2, 2, 370, 2849, 3,
	2, 2, 2, 372, 2866, 3, 2, 2, 2, 374, 2868, 3, 2, 2, 2, 376, 2873, 3, 2,
	2, 2, 378, 2942, 3, 2, 2, 2, 380, 2944, 3, 2, 2, 2, 382, 2949, 3, 2, 2,
	2, 384, 2955, 3, 2, 2, 2, 386, 2965, 3, 2, 2, 2, 388, 2967, 3, 2, 2, 2,
	390, 2969, 3, 2, 2, 2, 392, 2990, 3, 2, 2, 2, 394, 3037, 3, 2, 2, 2, 396,
	3042, 3, 2, 2, 2, 398, 3044, 3, 2, 2, 2, 400, 3073, 3, 2, 2, 2, 402, 3075,
	3, 2, 2, 2, 404, 3082, 3, 2, 2, 2, 406, 3120, 3, 2, 2, 2, 408, 3122, 3,
	2, 2, 2, 410, 3127, 3, 2, 2, 2, 412, 3139, 3, 2, 2, 2, 414, 3153, 3, 2,
	2, 2, 416, 3162, 3, 2, 2, 2, 418, 3177, 3, 2, 2, 2, 420, 3179, 3, 2, 2,
	2, 422, 3223, 3, 2, 2, 2, 424, 3225, 3, 2, 2, 2, 426, 3258, 3, 2, 2, 2,
	428, 3260, 3, 2, 2, 2, 430, 3274, 3, 2, 2, 2, 432, 3276, 3, 2, 2, 2, 434,
	3278, 3, 2, 2, 2, 436, 3283, 3, 2, 2, 2, 438, 3286, 3, 2, 2, 2, 440, 3289,
	3, 2, 2, 2, 442, 3292, 3, 2, 2, 2, 444, 3294, 3, 2, 2, 2, 446, 3306, 3,
	2, 2, 2, 448, 3464, 3, 2, 2, 2, 450, 3466, 3, 2, 2, 2, 452, 3480, 3, 2,
	2, 2, 454, 3484, 3, 2, 2, 2, 456, 3487, 3, 2, 2, 2, 458, 3491, 3, 2, 2,
	2, 460, 3497, 3, 2, 2, 2, 462, 3515, 3, 2, 2, 2, 464, 3523, 3, 2, 2, 2,
	466, 3531, 3, 2, 2, 2, 468, 3536, 3, 2, 2, 2, 470, 3539, 3, 2, 2, 2, 472,
	3548, 3, 2, 2, 2, 474, 3557, 3, 2, 2, 2, 476, 3568, 3, 2, 2, 2, 478, 3570,
	3, 2, 2, 2, 480, 3578, 3, 2, 2, 2, 482, 3580, 3, 2, 2, 2, 484, 3582, 3,
	2, 2, 2, 486, 3584, 3, 2, 2, 2, 488, 3586, 3, 2, 2, 2, 490, 3590, 3, 2,
	2, 2, 492, 3593, 3, 2, 2, 2, 494, 3596, 3, 2, 2, 2, 496, 3609, 3, 2, 2,
	2, 498, 3613, 3, 2, 2, 2, 500, 3616, 3, 2, 2, 2, 502, 3618, 3, 2, 2, 2,
	504, 3620, 3, 2, 2, 2, 506, 3622, 3, 2, 2, 2, 508, 3624, 3, 2, 2, 2, 510,
	3626, 3, 2, 2, 2, 512, 3628, 3, 2, 2, 2, 514, 3643, 3, 2, 2, 2, 516, 3645,
	3, 2, 2, 2, 518, 3651, 3, 2, 2, 2, 520, 3668, 3, 2, 2, 2, 522, 3670, 3,
	2, 2, 2, 524, 3694, 3, 2, 2, 2, 526, 3739, 3, 2, 2, 2, 528, 3741, 3, 2,
	2, 2, 530, 3765, 3, 2, 2, 2, 532, 3770, 3, 2, 2, 2, 534, 3793, 3, 2, 2,
	2, 536, 3798, 3, 2, 2, 2, 538, 3807, 3, 2, 2, 2, 540, 3812, 3, 2, 2, 2,
	542, 3821, 3, 2, 2, 2, 544, 3825, 3, 2, 2, 2, 546, 3839, 3, 2, 2, 2, 548,
	3964, 3, 2, 2, 2, 550, 3966, 3, 2, 2, 2, 552, 4058, 3, 2, 2, 2, 554, 4060,
	3, 2, 2, 2, 556, 4071, 3, 2, 2, 2, 558, 4073, 3, 2, 2, 2, 560, 4082, 3,
	2, 2, 2, 562, 4178, 3, 2, 2, 2, 564, 4180, 3, 2, 2, 2, 566, 4184, 3, 2,
	2, 2, 568, 4194, 3, 2, 2, 2, 570, 4196, 3, 2, 2, 2, 572, 4202, 3, 2, 2,
	2, 574, 4204, 3, 2, 2, 2, 576, 4216, 3, 2, 2, 2, 578, 4230, 3, 2, 2, 2,
	580, 4236, 3, 2, 2, 2, 582, 4242, 3, 2, 2, 2, 584, 4248, 3, 2, 2, 2, 586,
	4270, 3, 2, 2, 2, 588, 4282, 3, 2, 2, 2, 590, 4296, 3, 2, 2, 2, 592, 4305,
	3, 2, 2, 2, 594, 4307, 3, 2, 2, 2, 596, 4314, 3, 2, 2, 2, 598, 4342, 3,
	2, 2, 2, 600, 4344, 3, 2, 2, 2, 602, 4346, 3, 2, 2, 2, 604, 4380, 3, 2,
	2, 2, 606, 4419, 3, 2, 2, 2, 608, 4426, 3, 2, 2, 2, 610, 4458, 3, 2, 2,
	2, 612, 4467, 3, 2, 2, 2, 614, 4474, 3, 2, 2, 2, 616, 4500, 3, 2, 2, 2,
	618, 4509, 3, 2, 2, 2, 620, 4516, 3, 2, 2, 2, 622, 4535, 3, 2, 2, 2, 624,
	4550, 3, 2, 2, 2, 626, 4557, 3, 2, 2, 2, 628, 4593, 3, 2, 2, 2, 630, 4625,
	3, 2, 2, 2, 632, 4636, 3, 2, 2, 2, 634, 4638, 3, 2, 2, 2, 636, 4664, 3,
	2, 2, 2, 638, 4731, 3, 2, 2, 2, 640, 4733, 3, 2, 2, 2, 642, 4762, 3, 2,
	2, 2, 644, 4790, 3, 2, 2, 2, 646, 4803, 3, 2, 2, 2, 648, 4855, 3, 2, 2,
	2, 650, 4879, 3, 2, 2, 2, 652, 4890, 3, 2, 2, 2, 654, 4908, 3, 2, 2, 2,
	656, 4920, 3, 2, 2, 2, 658, 4934, 3, 2, 2, 2, 660, 4938, 3, 2, 2, 2, 662,
	4943, 3, 2, 2, 2, 664, 5015, 3, 2, 2, 2, 666, 5017, 3, 2, 2, 2, 668, 5023,
	3, 2, 2, 2, 670, 5027, 3, 2, 2, 2, 672, 5030, 3, 2, 2, 2, 674, 5060, 3,
	2, 2, 2, 676, 5070, 3, 2, 2, 2, 678, 5072, 3, 2, 2, 2, 680, 5076, 3, 2,
	2, 2, 682, 5078, 3, 2, 2, 2, 684, 5081, 3, 2, 2, 2, 686, 5092, 3, 2, 2,
	2, 688, 5106, 3, 2, 2, 2, 690, 5108, 3, 2, 2, 2, 692, 5121, 3, 2, 2, 2,
	694, 5131, 3, 2, 2, 2, 696, 5133, 3, 2, 2, 2, 698, 5136, 3, 2, 2, 2, 700,
	5143, 3, 2, 2, 2, 702, 5145, 3, 2, 2, 2, 704, 5286, 3, 2, 2, 2, 706, 5315,
	3, 2, 2, 2, 708, 5317, 3, 2, 2, 2, 710, 5338, 3, 2, 2, 2, 712, 5343, 3,
	2, 2, 2, 714, 5345, 3, 2, 2, 2, 716, 5356, 3, 2, 2, 2, 718, 5398, 3, 2,
	2, 2, 720, 5400, 3, 2, 2, 2, 722, 5448, 3, 2, 2, 2, 724, 5450, 3, 2, 2,
	2, 726, 5458, 3, 2, 2, 2, 728, 5501, 3, 2, 2, 2, 730, 5507, 3, 2, 2, 2,
	732, 5511, 3, 2, 2, 2, 734, 5527, 3, 2, 2, 2, 736, 5552, 3, 2, 2, 2, 738,
	5555, 3, 2, 2, 2, 740, 5562, 3, 2, 2, 2, 742, 5564, 3, 2, 2, 2, 744, 5566,
	3, 2, 2, 2, 746, 5584, 3, 2, 2, 2, 748, 5592, 3, 2, 2, 2, 750, 5608, 3,
	2, 2, 2, 752, 5633, 3, 2, 2, 2, 754, 5635, 3, 2, 2, 2, 756, 5662, 3, 2,
	2, 2, 758, 5694, 3, 2, 2, 2, 760, 5697, 3, 2, 2, 2, 762, 5703, 3, 2, 2,
	2, 764, 5719, 3, 2, 2, 2, 766, 5734, 3, 2, 2, 2, 768, 5740, 3, 2, 2, 2,
	770, 5759, 3, 2, 2, 2, 772, 5761, 3, 2, 2, 2, 774, 5764, 3, 2, 2, 2, 776,
	5770, 3, 2, 2, 2, 778, 5787, 3, 2, 2, 2, 780, 5795, 3, 2, 2, 2, 782, 5797,
	3, 2, 2, 2, 784, 5803, 3, 2, 2, 2, 786, 5817, 3, 2, 2, 2, 788, 5842, 3,
	2, 2, 2, 790, 5846, 3, 2, 2, 2, 792, 5852, 3, 2, 2, 2, 794, 5854, 3, 2,
	2, 2, 796, 5856, 3, 2, 2, 2, 798, 5858, 3, 2, 2, 2, 800, 5871, 3, 2, 2,
	2, 802, 5873, 3, 2, 2, 2, 804, 5888, 3, 2, 2, 2, 806, 5901, 3, 2, 2, 2,
	808, 5905, 3, 2, 2, 2, 810, 5908, 3, 2, 2, 2, 812, 5911, 3, 2, 2, 2, 814,
	5930, 3, 2, 2, 2, 816, 5935, 3, 2, 2, 2, 818, 5949, 3, 2, 2, 2, 820, 5958,
	3, 2, 2, 2, 822, 5973, 3, 2, 2, 2, 824, 5985, 3, 2, 2, 2, 826, 5990, 3,
	2, 2, 2, 828, 5993, 3, 2, 2, 2, 830, 5996, 3, 2, 2, 2, 832, 5999, 3, 2,
	2, 2, 834, 6004, 3, 2, 2, 2, 836, 6018, 3, 2, 2, 2, 838, 6020, 3, 2, 2,
	2, 840, 6043, 3, 2, 2, 2, 842, 6067, 3, 2, 2, 2, 844, 6075, 3, 2, 2, 2,
	846, 6077, 3, 2, 2, 2, 848, 6081, 3, 2, 2, 2, 850, 6100, 3, 2, 2, 2, 852,
	6106, 3, 2, 2, 2, 854, 6111, 3, 2, 2, 2, 856, 6119, 3, 2, 2, 2, 858, 6124,
	3, 2, 2, 2, 860, 6129, 3, 2, 2, 2, 862, 6134, 3, 2, 2, 2, 864, 6139, 3,
	2, 2, 2, 866, 6144, 3, 2, 2, 2, 868, 6149, 3, 2, 2, 2, 870, 6154, 3, 2,
	2, 2, 872, 6160, 3, 2, 2, 2, 874, 6163, 3, 2, 2, 2, 876, 6179, 3, 2, 2,
	2, 878, 6187, 3, 2, 2, 2, 880, 6192, 3, 2, 2, 2, 882, 6198, 3, 2, 2, 2,
	884, 6214, 3, 2, 2, 2, 886, 6218, 3, 2, 2, 2, 888, 6227, 3, 2, 2, 2, 890,
	6230, 3, 2, 2, 2, 892, 6233, 3, 2, 2, 2, 894, 6238, 3, 2, 2, 2, 896, 6244,
	3, 2, 2, 2, 898, 6250, 3, 2, 2, 2, 900, 6275, 3, 2, 2, 2, 902, 6278, 3,
	2, 2, 2, 904, 6301, 3, 2, 2, 2, 906, 6305, 3, 2, 2, 2, 908, 6313, 3, 2,
	2, 2, 910, 6321, 3, 2, 2, 2, 912, 6329, 3, 2, 2, 2, 914, 6337, 3, 2, 2,
	2, 916, 6353, 3, 2, 2, 2, 918, 6356, 3, 2, 2, 2, 920, 6364, 3, 2, 2, 2,
	922, 6374, 3, 2, 2, 2, 924, 6405, 3, 2, 2, 2, 926, 6407, 3, 2, 2, 2, 928,
	6420, 3, 2, 2, 2, 930, 6424, 3, 2, 2, 2, 932, 6426, 3, 2, 2, 2, 934, 6436,
	3, 2, 2, 2, 936, 6442, 3, 2, 2, 2, 938, 6452, 3, 2, 2, 2, 940, 6456, 3,
	2, 2, 2, 942, 6478, 3, 2, 2, 2, 944, 6480, 3, 2, 2, 2, 946, 6493, 3, 2,
	2, 2, 948, 6495, 3, 2, 2, 2, 950, 6501, 3, 2, 2, 2, 952, 6508, 3, 2, 2,
	2, 954, 6523, 3, 2, 2, 2, 956, 6559, 3, 2, 2, 2, 958, 6561, 3, 2, 2, 2,
	960, 6592, 3, 2, 2, 2, 962, 6599, 3, 2, 2, 2, 964, 6614, 3, 2, 2, 2, 966,
	6617, 3, 2, 2, 2, 968, 6640, 3, 2, 2, 2, 970, 6664, 3, 2, 2, 2, 972, 6666,
	3, 2, 2, 2, 974, 6704, 3, 2, 2, 2, 976, 6745, 3, 2, 2, 2, 978, 6747, 3,
	2, 2, 2, 980, 6756, 3, 2, 2, 2, 982, 6768, 3, 2, 2, 2, 984, 6804, 3, 2,
	2, 2, 986, 6818, 3, 2, 2, 2, 988, 6820, 3, 2, 2, 2, 990, 6828, 3, 2, 2,
	2, 992, 6830, 3, 2, 2, 2, 994, 6832, 3, 2, 2, 2, 996, 6841, 3, 2, 2, 2,
	998, 6843, 3, 2, 2, 2, 1000, 6888, 3, 2, 2, 2, 1002, 6890, 3, 2, 2, 2,
	1004, 6897, 3, 2, 2, 2, 1006, 6927, 3, 2, 2, 2, 1008, 6933, 3, 2, 2, 2,
	1010, 6935, 3, 2, 2, 2, 1012, 6945, 3, 2, 2, 2, 1014, 6965, 3, 2, 2, 2,
	1016, 6968, 3, 2, 2, 2, 1018, 6972, 3, 2, 2, 2, 1020, 6987, 3, 2, 2, 2,
	1022, 6990, 3, 2, 2, 2, 1024, 6994, 3, 2, 2, 2, 1026, 7025, 3, 2, 2, 2,
	1028, 7032, 3, 2, 2, 2, 1030, 7036, 3, 2, 2, 2, 1032, 7053, 3, 2, 2, 2,
	1034, 7055, 3, 2, 2, 2, 1036, 7115, 3, 2, 2, 2, 1038, 7162, 3, 2, 2, 2,
	1040, 7164, 3, 2, 2, 2, 1042, 7172, 3, 2, 2, 2, 1044, 7262, 3, 2, 2, 2,
	1046, 7264, 3, 2, 2, 2, 1048, 7273, 3, 2, 2, 2, 1050, 7275, 3, 2, 2, 2,
	1052, 7334, 3, 2, 2, 2, 1054, 7336, 3, 2, 2, 2, 1056, 7344, 3, 2, 2, 2,
	1058, 7354, 3, 2, 2, 2, 1060, 7370, 3, 2, 2, 2, 1062, 7379, 3, 2, 2, 2,
	1064, 7415, 3, 2, 2, 2, 1066, 7464, 3, 2, 2, 2, 1068, 7466, 3, 2, 2, 2,
	1070, 7470, 3, 2, 2, 2, 1072, 7478, 3, 2, 2, 2, 1074, 7492, 3, 2, 2, 2,
	1076, 7507, 3, 2, 2, 2, 1078, 7521, 3, 2, 2, 2, 1080, 7536, 3, 2, 2, 2,
	1082, 7560, 3, 2, 2, 2, 1084, 7571, 3, 2, 2, 2, 1086, 7597, 3, 2, 2, 2,
	1088, 7599, 3, 2, 2, 2, 1090, 7603, 3, 2, 2, 2, 1092, 7611, 3, 2, 2, 2,
	1094, 7619, 3, 2, 2, 2, 1096, 7624, 3, 2, 2, 2, 1098, 7640, 3, 2, 2, 2,
	1100, 7642, 3, 2, 2, 2, 1102, 7689, 3, 2, 2, 2, 1104, 7699, 3, 2, 2, 2,
	1106, 7707, 3, 2, 2, 2, 1108, 7713, 3, 2, 2, 2, 1110, 7717, 3, 2, 2, 2,
	1112, 7719, 3, 2, 2, 2, 1114, 7726, 3, 2, 2, 2, 1116, 7733, 3, 2, 2, 2,
	1118, 7745, 3, 2, 2, 2, 1120, 7756, 3, 2, 2, 2, 1122, 7758, 3, 2, 2, 2,
	1124, 7761, 3, 2, 2, 2, 1126, 7764, 3, 2, 2, 2, 1128, 7774, 3, 2, 2, 2,
	1130, 7778, 3, 2, 2, 2, 1132, 7780, 3, 2, 2, 2, 1134, 7806, 3, 2, 2, 2,
	1136, 7823, 3, 2, 2, 2, 1138, 7930, 3, 2, 2, 2, 1140, 7932, 3, 2, 2, 2,
	1142, 7936, 3, 2, 2, 2, 1144, 7938, 3, 2, 2, 2, 1146, 7995, 3, 2, 2, 2,
	1148, 7997, 3, 2, 2, 2, 1150, 8005, 3, 2, 2, 2, 1152, 1253, 5, 54, 28,
	2, 1153, 1253, 5, 4, 3, 2, 1154, 1253, 5, 32, 17, 2, 1155, 1253, 5, 46,
	24, 2, 1156, 1253, 5, 24, 13, 2, 1157, 1253, 5, 964, 483, 2, 1158, 1253,
	5, 522, 262, 2, 1159, 1253, 5, 520, 261, 2, 1160, 1253, 5, 952, 477, 2,
	1161, 1253, 5, 574, 288, 2, 1162, 1253, 5, 582, 292, 2, 1163, 1253, 5,
	584, 293, 2, 1164, 1253, 5, 576, 289, 2, 1165, 1253, 5, 614, 308, 2, 1166,
	1253, 5, 618, 310, 2, 1167, 1253, 5, 608, 305, 2, 1168, 1253, 5, 612, 307,
	2, 1169, 1253, 5, 586, 294, 2, 1170, 1253, 5, 594, 298, 2, 1171, 1253,
	5, 602, 302, 2, 1172, 1253, 5, 606, 304, 2, 1173, 1253, 5, 646, 324, 2,
	1174, 1253, 5, 650, 326, 2, 1175, 1253, 5, 620, 311, 2, 1176, 1253, 5,
	624, 313, 2, 1177, 1253, 5, 626, 314, 2, 1178, 1253, 5, 630, 316, 2, 1179,
	1253, 5, 652, 327, 2, 1180, 1253, 5, 654, 328, 2, 1181, 1253, 5, 954, 478,
	2, 1182, 1253, 5, 958, 480, 2, 1183, 1253, 5, 960, 481, 2, 1184, 1253,
	5, 514, 258, 2, 1185, 1253, 5, 1002, 502, 2, 1186, 1253, 5, 1006, 504,
	2, 1187, 1253, 5, 1004, 503, 2, 1188, 1253, 5, 1010, 506, 2, 1189, 1253,
	5, 1012, 507, 2, 1190, 1253, 5, 1014, 508, 2, 1191, 1253, 5, 1036, 519,
	2, 1192, 1253, 5, 1038, 520, 2, 1193, 1253, 5, 1050, 526, 2, 1194, 1253,
	5, 1072, 537, 2, 1195, 1253, 5, 1066, 534, 2, 1196, 1253, 5, 1078, 540,
	2, 1197, 1253, 5, 1074, 538, 2, 1198, 1253, 5, 1076, 539, 2, 1199, 1253,
	5, 1080, 541, 2, 1200, 1253, 5, 1082, 542, 2, 1201, 1253, 5, 634, 318,
	2, 1202, 1253, 5, 636, 319, 2, 1203, 1253, 5, 644, 323, 2, 1204, 1253,
	5, 706, 354, 2, 1205, 1253, 5, 708, 355, 2, 1206, 1253, 5, 972, 487, 2,
	1207, 1253, 5, 786, 394, 2, 1208, 1253, 5, 1120, 561, 2, 1209, 1253, 5,
	74, 38, 2, 1210, 1253, 5, 810, 406, 2, 1211, 1253, 5, 84, 43, 2, 1212,
	1253, 5, 928, 465, 2, 1213, 1253, 5, 978, 490, 2, 1214, 1253, 5, 86, 44,
	2, 1215, 1253, 5, 1018, 510, 2, 1216, 1253, 5, 966, 484, 2, 1217, 1253,
	5, 980, 491, 2, 1218, 1253, 5, 950, 476, 2, 1219, 1253, 5, 1126, 564, 2,
	1220, 1253, 5, 1022, 512, 2, 1221, 1253, 5, 984, 493, 2, 1222, 1253, 5,
	1084, 543, 2, 1223, 1253, 5, 1002, 502, 2, 1224, 1253, 5, 962, 482, 2,
	1225, 1253, 5, 802, 402, 2, 1226, 1253, 5, 804, 403, 2, 1227, 1253, 5,
	990, 496, 2, 1228, 1253, 5, 992, 497, 2, 1229, 1253, 5, 1016, 509, 2, 1230,
	1253, 5, 808, 405, 2, 1231, 1253, 5, 812, 407, 2, 1232, 1253, 5, 72, 37,
	2, 1233, 1253, 5, 1000, 501, 2, 1234, 1253, 5, 838, 420, 2, 1235, 1253,
	5, 920, 461, 2, 1236, 1253, 5, 70, 36, 2, 1237, 1253, 5, 1110, 556, 2,
	1238, 1253, 5, 944, 473, 2, 1239, 1253, 5, 948, 475, 2, 1240, 1253, 5,
	922, 462, 2, 1241, 1253, 5, 1116, 559, 2, 1242, 1253, 5, 1118, 560, 2,
	1243, 1253, 5, 940, 471, 2, 1244, 1253, 5, 656, 329, 2, 1245, 1253, 5,
	930, 466, 2, 1246, 1253, 5, 1020, 511, 2, 1247, 1253, 5, 1024, 513, 2,
	1248, 1253, 5, 926, 464, 2, 1249, 1253, 5, 632, 317, 2, 1250, 1253, 5,
	638, 320, 2, 1251, 1253, 5, 644, 323, 2, 1252, 1152, 3, 2, 2, 2, 1252,
	1153, 3, 2, 2, 2, 1252, 1154, 3, 2, 2, 2, 1252, 1155, 3, 2, 2, 2, 1252,
	1156, 3, 2, 2, 2, 1252, 1157, 3, 2, 2, 2, 1252, 1158, 3, 2, 2, 2, 1252,
	1159, 3, 2, 2, 2, 1252, 1160, 3, 2, 2, 2, 1252, 1161, 3, 2, 2, 2, 1252,
	1162, 3, 2, 2, 2, 1252, 1163, 3, 2, 2, 2, 1252, 1164, 3, 2, 2, 2, 1252,
	1165, 3, 2, 2, 2, 1252, 1166, 3, 2, 2, 2, 1252, 1167, 3, 2, 2, 2, 1252,
	1168, 3, 2, 2, 2, 1252, 1169, 3, 2, 2, 2, 1252, 1170, 3, 2, 2, 2, 1252,
	1171, 3, 2, 2, 2, 1252, 1172, 3, 2, 2, 2, 1252, 1173, 3, 2, 2, 2, 1252,
	1174, 3, 2, 2, 2, 1252, 1175, 3, 2, 2, 2, 1252, 1176, 3, 2, 2, 2, 1252,
	1177, 3, 2, 2, 2, 1252, 1178, 3, 2, 2, 2, 1252, 1179, 3, 2, 2, 2, 1252,
	1180, 3, 2, 2, 2, 1252, 1181, 3, 2, 2, 2, 1252, 1182, 3, 2, 2, 2, 1252,
	1183, 3, 2, 2, 2, 1252, 1184, 3, 2, 2, 2, 1252, 1185, 3, 2, 2, 2, 1252,
	1186, 3, 2, 2, 2, 1252, 1187, 3, 2, 2, 2, 1252, 1188, 3, 2, 2, 2, 1252,
	1189, 3, 2, 2, 2, 1252, 1190, 3, 2, 2, 2, 1252, 1191, 3, 2, 2, 2, 1252,
	1192, 3, 2, 2, 2, 1252, 1193, 3, 2, 2, 2, 1252, 1194, 3, 2, 2, 2, 1252,
	1195, 3, 2, 2, 2, 1252, 1196, 3, 2, 2, 2, 1252, 1197, 3, 2, 2, 2, 1252,
	1198, 3, 2, 2, 2, 1252, 1199, 3, 2, 2, 2, 1252, 1200, 3, 2, 2, 2, 1252,
	1201, 3, 2, 2, 2, 1252, 1202, 3, 2, 2, 2, 1252, 1203, 3, 2, 2, 2, 1252,
	1204, 3, 2, 2, 2, 1252, 1205, 3, 2, 2, 2, 1252, 1206, 3, 2, 2, 2, 1252,
	1207, 3, 2, 2, 2, 1252, 1208, 3, 2, 2, 2, 1252, 1209, 3, 2, 2, 2, 1252,
	1210, 3, 2, 2, 2, 1252, 1211, 3, 2, 2, 2, 1252, 1212, 3, 2, 2, 2, 1252,
	1213, 3, 2, 2, 2, 1252, 1214, 3, 2, 2, 2, 1252, 1215, 3, 2, 2, 2, 1252,
	1216, 3, 2, 2, 2, 1252, 1217, 3, 2, 2, 2, 1252, 1218, 3, 2, 2, 2, 1252,
	1219, 3, 2, 2, 2, 1252, 1220, 3, 2, 2, 2, 1252, 1221, 3, 2, 2, 2, 1252,
	1222, 3, 2, 2, 2, 1252, 1223, 3, 2, 2, 2, 1252, 1224, 3, 2, 2, 2, 1252,
	1225, 3, 2, 2, 2, 1252, 1226, 3, 2, 2, 2, 1252, 1227, 3, 2, 2, 2, 1252,
	1228, 3, 2, 2, 2, 1252, 1229, 3, 2, 2, 2, 1252, 1230, 3, 2, 2, 2, 1252,
	1231, 3, 2, 2, 2, 1252, 1232, 3, 2, 2, 2, 1252, 1233, 3, 2, 2, 2, 1252,
	1234, 3, 2, 2, 2, 1252, 1235, 3, 2, 2, 2, 1252, 1236, 3, 2, 2, 2, 1252,
	1237, 3, 2, 2, 2, 1252, 1238, 3, 2, 2, 2, 1252, 1239, 3, 2, 2, 2, 1252,
	1240, 3, 2, 2, 2, 1252, 1241, 3, 2, 2, 2, 1252, 1242, 3, 2, 2, 2, 1252,
	1243, 3, 2, 2, 2, 1252, 1244, 3, 2, 2, 2, 1252, 1245, 3, 2, 2, 2, 1252,
	1246, 3, 2, 2, 2, 1252, 1247, 3, 2, 2, 2, 1252, 1248, 3, 2, 2, 2, 1252,
	1249, 3, 2, 2, 2, 1252, 1250, 3, 2, 2, 2, 1252, 1251, 3, 2, 2, 2, 1253,
	1259, 3, 2, 2, 2, 1254, 1256, 7, 44, 2, 2, 1255, 1257, 7, 2, 2, 3, 1256,
	1255, 3, 2, 2, 2, 1256, 1257, 3, 2, 2, 2, 1257, 1260, 3, 2, 2, 2, 1258,
	1260, 7, 2, 2, 3, 1259, 1254, 3, 2, 2, 2, 1259, 1258, 3, 2, 2, 2, 1260,
	1263, 3, 2, 2, 2, 1261, 1263, 7, 2, 2, 3, 1262, 1252, 3, 2, 2, 2, 1262,
	1261, 3, 2, 2, 2, 1263, 3, 3, 2, 2, 2, 1264, 1265, 7, 322, 2, 2, 1265,
	1267, 5, 6, 4, 2, 1266, 1268, 7, 334, 2, 2, 1267, 1266, 3, 2, 2, 2, 1267,
	1268, 3, 2, 2, 2, 1268, 1269, 3, 2, 2, 2, 1269, 1271, 5, 248, 125, 2, 1270,
	1272, 5, 124, 63, 2, 1271, 1270, 3, 2, 2, 2, 1271, 1272, 3, 2, 2, 2, 1272,
	1276, 3, 2, 2, 2, 1273, 1277, 5, 8, 5, 2, 1274, 1277, 5, 38, 20, 2, 1275,
	1277, 5, 16, 9, 2, 1276, 1273, 3, 2, 2, 2, 1276, 1274, 3, 2, 2, 2, 1276,
	1275, 3, 2, 2, 2, 1277, 1279, 3, 2, 2, 2, 1278, 1280, 5, 18, 10, 2, 1279,
	1278, 3, 2, 2, 2, 1279, 1280, 3, 2, 2, 2, 1280, 5, 3, 2, 2, 2, 1281, 1283,
	9, 2, 2, 2, 1282, 1281, 3, 2, 2, 2, 1282, 1283, 3, 2, 2, 2, 1283, 1285,
	3, 2, 2, 2, 1284, 1286, 7, 310, 2, 2, 1285, 1284, 3, 2, 2, 2, 1285, 1286,
	3, 2, 2, 2, 1286, 7, 3, 2, 2, 2, 1287, 1289, 7, 32, 2, 2, 1288, 1290, 5,
	10, 6, 2, 1289, 1288, 3, 2, 2, 2, 1289, 1290, 3, 2, 2, 2, 1290, 1291, 3,
	2, 2, 2, 1291, 1293, 7, 33, 2, 2, 1292, 1287, 3, 2, 2, 2, 1292, 1293, 3,
	2, 2, 2, 1293, 1294, 3, 2, 2, 2, 1294, 1304, 9, 3, 2, 2, 1295, 1300, 5,
	40, 21, 2, 1296, 1297, 7, 38, 2, 2, 1297, 1299, 5, 40, 21, 2, 1298, 1296,
	3, 2, 2, 2, 1299, 1302, 3, 2, 2, 2, 1300, 1298, 3, 2, 2, 2, 1300, 1301,
	3, 2, 2, 2, 1301, 1305, 3, 2, 2, 2, 1302, 1300, 3, 2, 2, 2, 1303, 1305,
	5, 96, 49, 2, 1304, 1295, 3, 2, 2, 2, 1304, 1303, 3, 2, 2, 2, 1305, 1307,
	3, 2, 2, 2, 1306, 1308, 5, 20, 11, 2, 1307, 1306, 3, 2, 2, 2, 1307, 1308,
	3, 2, 2, 2, 1308, 9, 3, 2, 2, 2, 1309, 1314, 5, 12, 7, 2, 1310, 1311, 7,
	38, 2, 2, 1311, 1313, 5, 12, 7, 2, 1312, 1310, 3, 2, 2, 2, 1313, 1316,
	3, 2, 2, 2, 1314, 1312, 3, 2, 2, 2, 1314, 1315, 3, 2, 2, 2, 1315, 11, 3,
	2, 2, 2, 1316, 1314, 3, 2, 2, 2, 1317, 1320, 5, 348, 175, 2, 1318, 1320,
	5, 14, 8, 2, 1319, 1317, 3, 2, 2, 2, 1319, 1318, 3, 2, 2, 2, 1320, 13,
	3, 2, 2, 2, 1321, 1322, 5, 202, 102, 2, 1322, 1326, 7, 21, 2, 2, 1323,
	1324, 5, 202, 102, 2, 1324, 1325, 7, 21, 2, 2, 1325, 1327, 3, 2, 2, 2,
	1326, 1323, 3, 2, 2, 2, 1326, 1327, 3, 2, 2, 2, 1327, 1328, 3, 2, 2, 2,
	1328, 1329, 7, 18, 2, 2, 1329, 15, 3, 2, 2, 2, 1330, 1332, 5, 20, 11, 2,
	1331, 1330, 3, 2, 2, 2, 1331, 1332, 3, 2, 2, 2, 1332, 1338, 3, 2, 2, 2,
	1333, 1335, 7, 32, 2, 2, 1334, 1336, 5, 10, 6, 2, 1335, 1334, 3, 2, 2,
	2, 1335, 1336, 3, 2, 2, 2, 1336, 1337, 3, 2, 2, 2, 1337, 1339, 7, 33, 2,
	2, 1338, 1333, 3, 2, 2, 2, 1338, 1339, 3, 2, 2, 2, 1339, 1340, 3, 2, 2,
	2, 1340, 1341, 5, 54, 28, 2, 1341, 17, 3, 2, 2, 2, 1342, 1343, 7, 476,
	2, 2, 1343, 1344, 7, 220, 2, 2, 1344, 1345, 7, 349, 2, 2, 1345, 1346, 7,
	726, 2, 2, 1346, 1351, 5, 36, 19, 2, 1347, 1348, 7, 38, 2, 2, 1348, 1350,
	5, 36, 19, 2, 1349, 1347, 3, 2, 2, 2, 1350, 1353, 3, 2, 2, 2, 1351, 1349,
	3, 2, 2, 2, 1351, 1352, 3, 2, 2, 2, 1352, 19, 3, 2, 2, 2, 1353, 1351, 3,
	2, 2, 2, 1354, 1355, 7, 92, 2, 2, 1355, 1357, 5, 272, 137, 2, 1356, 1358,
	5, 22, 12, 2, 1357, 1356, 3, 2, 2, 2, 1357, 1358, 3, 2, 2, 2, 1358, 21,
	3, 2, 2, 2, 1359, 1360, 7, 32, 2, 2, 1360, 1365, 5, 272, 137, 2, 1361,
	1362, 7, 38, 2, 2, 1362, 1364, 5, 272, 137, 2, 1363, 1361, 3, 2, 2, 2,
	1364, 1367, 3, 2, 2, 2, 1365, 1363, 3, 2, 2, 2, 1365, 1366, 3, 2, 2, 2,
	1366, 1368, 3, 2, 2, 2, 1367, 1365, 3, 2, 2, 2, 1368, 1369, 7, 33, 2, 2,
	1369, 23, 3, 2, 2, 2, 1370, 1372, 7, 564, 2, 2, 1371, 1373, 5, 26, 14,
	2, 1372, 1371, 3, 2, 2, 2, 1372, 1373, 3, 2, 2, 2, 1373, 1375, 3, 2, 2,
	2, 1374, 1376, 7, 334, 2, 2, 1375, 1374, 3, 2, 2, 2, 1375, 1376, 3, 2,
	2, 2, 1376, 1377, 3, 2, 2, 2, 1377, 1379, 5, 248, 125, 2, 1378, 1380, 5,
	124, 63, 2, 1379, 1378, 3, 2, 2, 2, 1379, 1380, 3, 2, 2, 2, 1380, 1384,
	3, 2, 2, 2, 1381, 1385, 5, 28, 15, 2, 1382, 1385, 5, 38, 20, 2, 1383, 1385,
	5, 30, 16, 2, 1384, 1381, 3, 2, 2, 2, 1384, 1382, 3, 2, 2, 2, 1384, 1383,
	3, 2, 2, 2, 1385, 25, 3, 2, 2, 2, 1386, 1387, 9, 4, 2, 2, 1387, 27, 3,
	2, 2, 2, 1388, 1390, 7, 32, 2, 2, 1389, 1391, 5, 10, 6, 2, 1390, 1389,
	3, 2, 2, 2, 1390, 1391, 3, 2, 2, 2, 1391, 1392, 3, 2, 2, 2, 1392, 1394,
	7, 33, 2, 2, 1393, 1388, 3, 2, 2, 2, 1393, 1394, 3, 2, 2, 2, 1394, 1395,
	3, 2, 2, 2, 1395, 1405, 9, 3, 2, 2, 1396, 1401, 5, 40, 21, 2, 1397, 1398,
	7, 38, 2, 2, 1398, 1400, 5, 40, 21, 2, 1399, 1397, 3, 2, 2, 2, 1400, 1403,
	3, 2, 2, 2, 1401, 1399, 3, 2, 2, 2, 1401, 1402, 3, 2, 2, 2, 1402, 1406,
	3, 2, 2, 2, 1403, 1401, 3, 2, 2, 2, 1404, 1406, 5, 96, 49, 2, 1405, 1396,
	3, 2, 2, 2, 1405, 1404, 3, 2, 2, 2, 1406, 1408, 3, 2, 2, 2, 1407, 1409,
	5, 20, 11, 2, 1408, 1407, 3, 2, 2, 2, 1408, 1409, 3, 2, 2, 2, 1409, 29,
	3, 2, 2, 2, 1410, 1412, 5, 20, 11, 2, 1411, 1410, 3, 2, 2, 2, 1411, 1412,
	3, 2, 2, 2, 1412, 1418, 3, 2, 2, 2, 1413, 1415, 7, 32, 2, 2, 1414, 1416,
	5, 10, 6, 2, 1415, 1414, 3, 2, 2, 2, 1415, 1416, 3, 2, 2, 2, 1416, 1417,
	3, 2, 2, 2, 1417, 1419, 7, 33, 2, 2, 1418, 1413, 3, 2, 2, 2, 1418, 1419,
	3, 2, 2, 2, 1419, 1420, 3, 2, 2, 2, 1420, 1421, 5, 54, 28, 2, 1421, 31,
	3, 2, 2, 2, 1422, 1424, 5, 98, 50, 2, 1423, 1422, 3, 2, 2, 2, 1423, 1424,
	3, 2, 2, 2, 1424, 1425, 3, 2, 2, 2, 1425, 1426, 7, 726, 2, 2, 1426, 1427,
	5, 34, 18, 2, 1427, 1428, 5, 116, 59, 2, 1428, 1430, 5, 38, 20, 2, 1429,
	1431, 5, 140, 71, 2, 1430, 1429, 3, 2, 2, 2, 1430, 1431, 3, 2, 2, 2, 1431,
	1433, 3, 2, 2, 2, 1432, 1434, 5, 444, 223, 2, 1433, 1432, 3, 2, 2, 2, 1433,
	1434, 3, 2, 2, 2, 1434, 1436, 3, 2, 2, 2, 1435, 1437, 5, 146, 74, 2, 1436,
	1435, 3, 2, 2, 2, 1436, 1437, 3, 2, 2, 2, 1437, 33, 3, 2, 2, 2, 1438, 1440,
	7, 384, 2, 2, 1439, 1438, 3, 2, 2, 2, 1439, 1440, 3, 2, 2, 2, 1440, 1442,
	3, 2, 2, 2, 1441, 1443, 7, 310, 2, 2, 1442, 1441, 3, 2, 2, 2, 1442, 1443,
	3, 2, 2, 2, 1443, 35, 3, 2, 2, 2, 1444, 1445, 5, 348, 175, 2, 1445, 1446,
	7, 25, 2, 2, 1446, 1447, 5, 42, 22, 2, 1447, 37, 3, 2, 2, 2, 1448, 1450,
	5, 20, 11, 2, 1449, 1448, 3, 2, 2, 2, 1449, 1450, 3, 2, 2, 2, 1450, 1451,
	3, 2, 2, 2, 1451, 1452, 7, 626, 2, 2, 1452, 1457, 5, 36, 19, 2, 1453, 1454,
	7, 38, 2, 2, 1454, 1456, 5, 36, 19, 2, 1455, 1453, 3, 2, 2, 2, 1456, 1459,
	3, 2, 2, 2, 1457, 1455, 3, 2, 2, 2, 1457, 1458, 3, 2, 2, 2, 1458, 39, 3,
	2, 2, 2, 1459, 1457, 3, 2, 2, 2, 1460, 1461, 7, 32, 2, 2, 1461, 1466, 5,
	42, 22, 2, 1462, 1463, 7, 38, 2, 2, 1463, 1465, 5, 42, 22, 2, 1464, 1462,
	3, 2, 2, 2, 1465, 1468, 3, 2, 2, 2, 1466, 1464, 3, 2, 2, 2, 1466, 1467,
	3, 2, 2, 2, 1467, 1469, 3, 2, 2, 2, 1468, 1466, 3, 2, 2, 2, 1469, 1470,
	7, 33, 2, 2, 1470, 1474, 3, 2, 2, 2, 1471, 1472, 7, 32, 2, 2, 1472, 1474,
	7, 33, 2, 2, 1473, 1460, 3, 2, 2, 2, 1473, 1471, 3, 2, 2, 2, 1474, 41,
	3, 2, 2, 2, 1475, 1479, 5, 328, 165, 2, 1476, 1479, 7, 195, 2, 2, 1477,
	1479, 5, 44, 23, 2, 1478, 1475, 3, 2, 2, 2, 1478, 1476, 3, 2, 2, 2, 1478,
	1477, 3, 2, 2, 2, 1479, 43, 3, 2, 2, 2, 1480, 1481, 7, 70, 2, 2, 1481,
	1482, 5, 184, 93, 2, 1482, 45, 3, 2, 2, 2, 1483, 1484, 7, 201, 2, 2, 1484,
	1487, 5, 48, 25, 2, 1485, 1488, 5, 50, 26, 2, 1486, 1488, 5, 52, 27, 2,
	1487, 1485, 3, 2, 2, 2, 1487, 1486, 3, 2, 2, 2, 1488, 1490, 3, 2, 2, 2,
	1489, 1491, 5, 140, 71, 2, 1490, 1489, 3, 2, 2, 2, 1490, 1491, 3, 2, 2,
	2, 1491, 1493, 3, 2, 2, 2, 1492, 1494, 5, 444, 223, 2, 1493, 1492, 3, 2,
	2, 2, 1493, 1494, 3, 2, 2, 2, 1494, 1496, 3, 2, 2, 2, 1495, 1497, 5, 146,
	74, 2, 1496, 1495, 3, 2, 2, 2, 1496, 1497, 3, 2, 2, 2, 1497, 47, 3, 2,
	2, 2, 1498, 1500, 7, 384, 2, 2, 1499, 1498, 3, 2, 2, 2, 1499, 1500, 3,
	2, 2, 2, 1500, 1502, 3, 2, 2, 2, 1501, 1503, 7, 534, 2, 2, 1502, 1501,
	3, 2, 2, 2, 1502, 1503, 3, 2, 2, 2, 1503, 1505, 3, 2, 2, 2, 1504, 1506,
	7, 310, 2, 2, 1505, 1504, 3, 2, 2, 2, 1505, 1506, 3, 2, 2, 2, 1506, 49,
	3, 2, 2, 2, 1507, 1508, 7, 277, 2, 2, 1508, 1513, 5, 248, 125, 2, 1509,
	1511, 7, 92, 2, 2, 1510, 1509, 3, 2, 2, 2, 1510, 1511, 3, 2, 2, 2, 1511,
	1512, 3, 2, 2, 2, 1512, 1514, 5, 272, 137, 2, 1513, 1510, 3, 2, 2, 2, 1513,
	1514, 3, 2, 2, 2, 1514, 1516, 3, 2, 2, 2, 1515, 1517, 5, 124, 63, 2, 1516,
	1515, 3, 2, 2, 2, 1516, 1517, 3, 2, 2, 2, 1517, 51, 3, 2, 2, 2, 1518, 1519,
	5, 176, 89, 2, 1519, 1520, 7, 277, 2, 2, 1520, 1521, 5, 116, 59, 2, 1521,
	1528, 3, 2, 2, 2, 1522, 1523, 7, 277, 2, 2, 1523, 1524, 5, 176, 89, 2,
	1524, 1525, 7, 733, 2, 2, 1525, 1526, 5, 116, 59, 2, 1526, 1528, 3, 2,
	2, 2, 1527, 1518, 3, 2, 2, 2, 1527, 1522, 3, 2, 2, 2, 1528, 53, 3, 2, 2,
	2, 1529, 1531, 5, 58, 30, 2, 1530, 1532, 5, 166, 84, 2, 1531, 1530, 3,
	2, 2, 2, 1531, 1532, 3, 2, 2, 2, 1532, 1536, 3, 2, 2, 2, 1533, 1536, 5,
	64, 33, 2, 1534, 1536, 5, 56, 29, 2, 1535, 1529, 3, 2, 2, 2, 1535, 1533,
	3, 2, 2, 2, 1535, 1534, 3, 2, 2, 2, 1536, 55, 3, 2, 2, 2, 1537, 1538, 7,
	32, 2, 2, 1538, 1539, 5, 56, 29, 2, 1539, 1540, 7, 33, 2, 2, 1540, 1551,
	3, 2, 2, 2, 1541, 1542, 5, 58, 30, 2, 1542, 1544, 5, 162, 82, 2, 1543,
	1545, 5, 166, 84, 2, 1544, 1543, 3, 2, 2, 2, 1544, 1545, 3, 2, 2, 2, 1545,
	1551, 3, 2, 2, 2, 1546, 1547, 5, 58, 30, 2, 1547, 1548, 5, 166, 84, 2,
	1548, 1549, 5, 162, 82, 2, 1549, 1551, 3, 2, 2, 2, 1550, 1537, 3, 2, 2,
	2, 1550, 1541, 3, 2, 2, 2, 1550, 1546, 3, 2, 2, 2, 1551, 57, 3, 2, 2, 2,
	1552, 1554, 5, 98, 50, 2, 1553, 1552, 3, 2, 2, 2, 1553, 1554, 3, 2, 2,
	2, 1554, 1557, 3, 2, 2, 2, 1555, 1558, 5, 60, 31, 2, 1556, 1558, 5, 64,
	33, 2, 1557, 1555, 3, 2, 2, 2, 1557, 1556, 3, 2, 2, 2, 1558, 1560, 3, 2,
	2, 2, 1559, 1561, 5, 444, 223, 2, 1560, 1559, 3, 2, 2, 2, 1560, 1561, 3,
	2, 2, 2, 1561, 1563, 3, 2, 2, 2, 1562, 1564, 5, 146, 74, 2, 1563, 1562,
	3, 2, 2, 2, 1563, 1564, 3, 2, 2, 2, 1564, 59, 3, 2, 2, 2, 1565, 1566, 8,
	31, 1, 2, 1566, 1571, 5, 66, 34, 2, 1567, 1568, 5, 64, 33, 2, 1568, 1569,
	5, 62, 32, 2, 1569, 1571, 3, 2, 2, 2, 1570, 1565, 3, 2, 2, 2, 1570, 1567,
	3, 2, 2, 2, 1571, 1576, 3, 2, 2, 2, 1572, 1573, 12, 3, 2, 2, 1573, 1575,
	5, 62, 32, 2, 1574, 1572, 3, 2, 2, 2, 1575, 1578, 3, 2, 2, 2, 1576, 1574,
	3, 2, 2, 2, 1576, 1577, 3, 2, 2, 2, 1577, 61, 3, 2, 2, 2, 1578, 1576, 3,
	2, 2, 2, 1579, 1581, 7, 720, 2, 2, 1580, 1582, 5, 508, 255, 2, 1581, 1580,
	3, 2, 2, 2, 1581, 1582, 3, 2, 2, 2, 1582, 1585, 3, 2, 2, 2, 1583, 1586,
	5, 66, 34, 2, 1584, 1586, 5, 64, 33, 2, 1585, 1583, 3, 2, 2, 2, 1585, 1584,
	3, 2, 2, 2, 1586, 63, 3, 2, 2, 2, 1587, 1593, 7, 32, 2, 2, 1588, 1594,
	5, 64, 33, 2, 1589, 1591, 5, 58, 30, 2, 1590, 1592, 5, 166, 84, 2, 1591,
	1590, 3, 2, 2, 2, 1591, 1592, 3, 2, 2, 2, 1592, 1594, 3, 2, 2, 2, 1593,
	1588, 3, 2, 2, 2, 1593, 1589, 3, 2, 2, 2, 1594, 1595, 3, 2, 2, 2, 1595,
	1596, 7, 33, 2, 2, 1596, 65, 3, 2, 2, 2, 1597, 1601, 5, 68, 35, 2, 1598,
	1601, 5, 94, 48, 2, 1599, 1601, 5, 92, 47, 2, 1600, 1597, 3, 2, 2, 2, 1600,
	1598, 3, 2, 2, 2, 1600, 1599, 3, 2, 2, 2, 1601, 67, 3, 2, 2, 2, 1602, 1606,
	7, 619, 2, 2, 1603, 1605, 5, 102, 52, 2, 1604, 1603, 3, 2, 2, 2, 1605,
	1608, 3, 2, 2, 2, 1606, 1604, 3, 2, 2, 2, 1606, 1607, 3, 2, 2, 2, 1607,
	1609, 3, 2, 2, 2, 1608, 1606, 3, 2, 2, 2, 1609, 1611, 5, 106, 54, 2, 1610,
	1612, 5, 162, 82, 2, 1611, 1610, 3, 2, 2, 2, 1611, 1612, 3, 2, 2, 2, 1612,
	1614, 3, 2, 2, 2, 1613, 1615, 5, 114, 58, 2, 1614, 1613, 3, 2, 2, 2, 1614,
	1615, 3, 2, 2, 2, 1615, 1617, 3, 2, 2, 2, 1616, 1618, 5, 140, 71, 2, 1617,
	1616, 3, 2, 2, 2, 1617, 1618, 3, 2, 2, 2, 1618, 1620, 3, 2, 2, 2, 1619,
	1621, 5, 142, 72, 2, 1620, 1619, 3, 2, 2, 2, 1620, 1621, 3, 2, 2, 2, 1621,
	1623, 3, 2, 2, 2, 1622, 1624, 5, 144, 73, 2, 1623, 1622, 3, 2, 2, 2, 1623,
	1624, 3, 2, 2, 2, 1624, 1626, 3, 2, 2, 2, 1625, 1627, 5, 152, 77, 2, 1626,
	1625, 3, 2, 2, 2, 1626, 1627, 3, 2, 2, 2, 1627, 69, 3, 2, 2, 2, 1628, 1629,
	7, 121, 2, 2, 1629, 1642, 5, 202, 102, 2, 1630, 1639, 7, 32, 2, 2, 1631,
	1636, 5, 328, 165, 2, 1632, 1633, 7, 38, 2, 2, 1633, 1635, 5, 328, 165,
	2, 1634, 1632, 3, 2, 2, 2, 1635, 1638, 3, 2, 2, 2, 1636, 1634, 3, 2, 2,
	2, 1636, 1637, 3, 2, 2, 2, 1637, 1640, 3, 2, 2, 2, 1638, 1636, 3, 2, 2,
	2, 1639, 1631, 3, 2, 2, 2, 1639, 1640, 3, 2, 2, 2, 1640, 1641, 3, 2, 2,
	2, 1641, 1643, 7, 33, 2, 2, 1642, 1630, 3, 2, 2, 2, 1642, 1643, 3, 2, 2,
	2, 1643, 71, 3, 2, 2, 2, 1644, 1645, 7, 215, 2, 2, 1645, 1650, 5, 328,
	165, 2, 1646, 1647, 7, 38, 2, 2, 1647, 1649, 5, 328, 165, 2, 1648, 1646,
	3, 2, 2, 2, 1649, 1652, 3, 2, 2, 2, 1650, 1648, 3, 2, 2, 2, 1650, 1651,
	3, 2, 2, 2, 1651, 73, 3, 2, 2, 2, 1652, 1650, 3, 2, 2, 2, 1653, 1658, 5,
	76, 39, 2, 1654, 1658, 5, 78, 40, 2, 1655, 1658, 5, 80, 41, 2, 1656, 1658,
	5, 82, 42, 2, 1657, 1653, 3, 2, 2, 2, 1657, 1654, 3, 2, 2, 2, 1657, 1655,
	3, 2, 2, 2, 1657, 1656, 3, 2, 2, 2, 1658, 75, 3, 2, 2, 2, 1659, 1660, 7,
	295, 2, 2, 1660, 1661, 5, 248, 125, 2, 1661, 1666, 7, 479, 2, 2, 1662,
	1664, 7, 92, 2, 2, 1663, 1662, 3, 2, 2, 2, 1663, 1664, 3, 2, 2, 2, 1664,
	1665, 3, 2, 2, 2, 1665, 1667, 5, 202, 102, 2, 1666, 1663, 3, 2, 2, 2, 1666,
	1667, 3, 2, 2, 2, 1667, 77, 3, 2, 2, 2, 1668, 1669, 7, 295, 2, 2, 1669,
	1670, 5, 248, 125, 2, 1670, 1671, 7, 538, 2, 2, 1671, 1678, 5, 252, 127,
	2, 1672, 1673, 5, 340, 171, 2, 1673, 1674, 7, 32, 2, 2, 1674, 1675, 5,
	202, 102, 2, 1675, 1676, 7, 33, 2, 2, 1676, 1679, 3, 2, 2, 2, 1677, 1679,
	9, 5, 2, 2, 1678, 1672, 3, 2, 2, 2, 1678, 1677, 3, 2, 2, 2, 1679, 1681,
	3, 2, 2, 2, 1680, 1682, 5, 140, 71, 2, 1681, 1680, 3, 2, 2, 2, 1681, 1682,
	3, 2, 2, 2, 1682, 1684, 3, 2, 2, 2, 1683, 1685, 5, 146, 74, 2, 1684, 1683,
	3, 2, 2, 2, 1684, 1685, 3, 2, 2, 2, 1685, 79, 3, 2, 2, 2, 1686, 1687, 7,
	295, 2, 2, 1687, 1688, 5, 248, 125, 2, 1688, 1689, 7, 538, 2, 2, 1689,
	1691, 9, 6, 2, 2, 1690, 1692, 5, 140, 71, 2, 1691, 1690, 3, 2, 2, 2, 1691,
	1692, 3, 2, 2, 2, 1692, 1694, 3, 2, 2, 2, 1693, 1695, 5, 146, 74, 2, 1694,
	1693, 3, 2, 2, 2, 1694, 1695, 3, 2, 2, 2, 1695, 81, 3, 2, 2, 2, 1696, 1697,
	7, 295, 2, 2, 1697, 1698, 5, 248, 125, 2, 1698, 1699, 7, 139, 2, 2, 1699,
	83, 3, 2, 2, 2, 1700, 1701, 7, 312, 2, 2, 1701, 1702, 7, 682, 2, 2, 1702,
	1703, 7, 277, 2, 2, 1703, 1706, 5, 184, 93, 2, 1704, 1705, 7, 38, 2, 2,
	1705, 1707, 5, 184, 93, 2, 1706, 1704, 3, 2, 2, 2, 1706, 1707, 3, 2, 2,
	2, 1707, 85, 3, 2, 2, 2, 1708, 1711, 5, 88, 45, 2, 1709, 1711, 5, 90, 46,
	2, 1710, 1708, 3, 2, 2, 2, 1710, 1709, 3, 2, 2, 2, 1711, 87, 3, 2, 2, 2,
	1712, 1713, 7, 371, 2, 2, 1713, 1715, 7, 180, 2, 2, 1714, 1716, 9, 7, 2,
	2, 1715, 1714, 3, 2, 2, 2, 1715, 1716, 3, 2, 2, 2, 1716, 1718, 3, 2, 2,
	2, 1717, 1719, 7, 372, 2, 2, 1718, 1717, 3, 2, 2, 2, 1718, 1719, 3, 2,
	2, 2, 1719, 1720, 3, 2, 2, 2, 1720, 1721, 7, 317, 2, 2, 1721, 1723, 5,
	184, 93, 2, 1722, 1724, 9, 8, 2, 2, 1723, 1722, 3, 2, 2, 2, 1723, 1724,
	3, 2, 2, 2, 1724, 1725, 3, 2, 2, 2, 1725, 1726, 7, 334, 2, 2, 1726, 1727,
	7, 682, 2, 2, 1727, 1729, 5, 248, 125, 2, 1728, 1730, 5, 124, 63, 2, 1729,
	1728, 3, 2, 2, 2, 1729, 1730, 3, 2, 2, 2, 1730, 1734, 3, 2, 2, 2, 1731,
	1732, 7, 131, 2, 2, 1732, 1733, 7, 626, 2, 2, 1733, 1735, 5, 202, 102,
	2, 1734, 1731, 3, 2, 2, 2, 1734, 1735, 3, 2, 2, 2, 1735, 1742, 3, 2, 2,
	2, 1736, 1738, 7, 145, 2, 2, 1737, 1739, 5, 160, 81, 2, 1738, 1737, 3,
	2, 2, 2, 1739, 1740, 3, 2, 2, 2, 1740, 1738, 3, 2, 2, 2, 1740, 1741, 3,
	2, 2, 2, 1741, 1743, 3, 2, 2, 2, 1742, 1736, 3, 2, 2, 2, 1742, 1743, 3,
	2, 2, 2, 1743, 1750, 3, 2, 2, 2, 1744, 1746, 7, 368, 2, 2, 1745, 1747,
	5, 158, 80, 2, 1746, 1745, 3, 2, 2, 2, 1747, 1748, 3, 2, 2, 2, 1748, 1746,
	3, 2, 2, 2, 1748, 1749, 3, 2, 2, 2, 1749, 1751, 3, 2, 2, 2, 1750, 1744,
	3, 2, 2, 2, 1750, 1751, 3, 2, 2, 2, 1751, 1756, 3, 2, 2, 2, 1752, 1753,
	7, 310, 2, 2, 1753, 1754, 5, 188, 95, 2, 1754, 1755, 9, 9, 2, 2, 1755,
	1757, 3, 2, 2, 2, 1756, 1752, 3, 2, 2, 2, 1756, 1757, 3, 2, 2, 2, 1757,
	1759, 3, 2, 2, 2, 1758, 1760, 5, 494, 248, 2, 1759, 1758, 3, 2, 2, 2, 1759,
	1760, 3, 2, 2, 2, 1760, 1762, 3, 2, 2, 2, 1761, 1763, 5, 38, 20, 2, 1762,
	1761, 3, 2, 2, 2, 1762, 1763, 3, 2, 2, 2, 1763, 89, 3, 2, 2, 2, 1764, 1765,
	7, 371, 2, 2, 1765, 1767, 7, 765, 2, 2, 1766, 1768, 9, 7, 2, 2, 1767, 1766,
	3, 2, 2, 2, 1767, 1768, 3, 2, 2, 2, 1768, 1770, 3, 2, 2, 2, 1769, 1771,
	7, 372, 2, 2, 1770, 1769, 3, 2, 2, 2, 1770, 1771, 3, 2, 2, 2, 1771, 1772,
	3, 2, 2, 2, 1772, 1773, 7, 317, 2, 2, 1773, 1775, 5, 184, 93, 2, 1774,
	1776, 9, 8, 2, 2, 1775, 1774, 3, 2, 2, 2, 1775, 1776, 3, 2, 2, 2, 1776,
	1777, 3, 2, 2, 2, 1777, 1778, 7, 334, 2, 2, 1778, 1779, 7, 682, 2, 2, 1779,
	1783, 5, 248, 125, 2, 1780, 1781, 7, 131, 2, 2, 1781, 1782, 7, 626, 2,
	2, 1782, 1784, 5, 202, 102, 2, 1783, 1780, 3, 2, 2, 2, 1783, 1784, 3, 2,
	2, 2, 1784, 1792, 3, 2, 2, 2, 1785, 1786, 7, 601, 2, 2, 1786, 1787, 7,
	308, 2, 2, 1787, 1788, 7, 118, 2, 2, 1788, 1789, 7, 29, 2, 2, 1789, 1790,
	5, 184, 93, 2, 1790, 1791, 7, 27, 2, 2, 1791, 1793, 3, 2, 2, 2, 1792, 1785,
	3, 2, 2, 2, 1792, 1793, 3, 2, 2, 2, 1793, 1798, 3, 2, 2, 2, 1794, 1795,
	7, 310, 2, 2, 1795, 1796, 5, 188, 95, 2, 1796, 1797, 9, 9, 2, 2, 1797,
	1799, 3, 2, 2, 2, 1798, 1794, 3, 2, 2, 2, 1798, 1799, 3, 2, 2, 2, 1799,
	1801, 3, 2, 2, 2, 1800, 1802, 5, 494, 248, 2, 1801, 1800, 3, 2, 2, 2, 1801,
	1802, 3, 2, 2, 2, 1802, 1804, 3, 2, 2, 2, 1803, 1805, 5, 38, 20, 2, 1804,
	1803, 3, 2, 2, 2, 1804, 1805, 3, 2, 2, 2, 1805, 91, 3, 2, 2, 2, 1806, 1807,
	7, 682, 2, 2, 1807, 1808, 5, 248, 125, 2, 1808, 93, 3, 2, 2, 2, 1809, 1810,
	7, 739, 2, 2, 1810, 1811, 5, 96, 49, 2, 1811, 95, 3, 2, 2, 2, 1812, 1813,
	7, 600, 2, 2, 1813, 1819, 5, 40, 21, 2, 1814, 1815, 7, 38, 2, 2, 1815,
	1816, 7, 600, 2, 2, 1816, 1818, 5, 40, 21, 2, 1817, 1814, 3, 2, 2, 2, 1818,
	1821, 3, 2, 2, 2, 1819, 1817, 3, 2, 2, 2, 1819, 1820, 3, 2, 2, 2, 1820,
	97, 3, 2, 2, 2, 1821, 1819, 3, 2, 2, 2, 1822, 1824, 7, 757, 2, 2, 1823,
	1825, 7, 545, 2, 2, 1824, 1823, 3, 2, 2, 2, 1824, 1825, 3, 2, 2, 2, 1825,
	1826, 3, 2, 2, 2, 1826, 1831, 5, 100, 51, 2, 1827, 1828, 7, 38, 2, 2, 1828,
	1830, 5, 100, 51, 2, 1829, 1827, 3, 2, 2, 2, 1830, 1833, 3, 2, 2, 2, 1831,
	1829, 3, 2, 2, 2, 1831, 1832, 3, 2, 2, 2, 1832, 99, 3, 2, 2, 2, 1833, 1831,
	3, 2, 2, 2, 1834, 1839, 5, 202, 102, 2, 1835, 1836, 7, 32, 2, 2, 1836,
	1837, 5, 280, 141, 2, 1837, 1838, 7, 33, 2, 2, 1838, 1840, 3, 2, 2, 2,
	1839, 1835, 3, 2, 2, 2, 1839, 1840, 3, 2, 2, 2, 1840, 1841, 3, 2, 2, 2,
	1841, 1842, 7, 92, 2, 2, 1842, 1843, 5, 156, 79, 2, 1843, 101, 3, 2, 2,
	2, 1844, 1853, 5, 104, 53, 2, 1845, 1853, 7, 299, 2, 2, 1846, 1853, 7,
	670, 2, 2, 1847, 1853, 7, 655, 2, 2, 1848, 1853, 7, 651, 2, 2, 1849, 1853,
	7, 652, 2, 2, 1850, 1853, 7, 654, 2, 2, 1851, 1853, 7, 653, 2, 2, 1852,
	1844, 3, 2, 2, 2, 1852, 1845, 3, 2, 2, 2, 1852, 1846, 3, 2, 2, 2, 1852,
	1847, 3, 2, 2, 2, 1852, 1848, 3, 2, 2, 2, 1852, 1849, 3, 2, 2, 2, 1852,
	1850, 3, 2, 2, 2, 1852, 1851, 3, 2, 2, 2, 1853, 103, 3, 2, 2, 2, 1854,
	1855, 9, 10, 2, 2, 1855, 105, 3, 2, 2, 2, 1856, 1859, 5, 110, 56, 2, 1857,
	1859, 5, 108, 55, 2, 1858, 1856, 3, 2, 2, 2, 1858, 1857, 3, 2, 2, 2, 1859,
	1864, 3, 2, 2, 2, 1860, 1861, 7, 38, 2, 2, 1861, 1863, 5, 108, 55, 2, 1862,
	1860, 3, 2, 2, 2, 1863, 1866, 3, 2, 2, 2, 1864, 1862, 3, 2, 2, 2, 1864,
	1865, 3, 2, 2, 2, 1865, 107, 3, 2, 2, 2, 1866, 1864, 3, 2, 2, 2, 1867,
	1872, 5, 328, 165, 2, 1868, 1870, 7, 92, 2, 2, 1869, 1868, 3, 2, 2, 2,
	1869, 1870, 3, 2, 2, 2, 1870, 1871, 3, 2, 2, 2, 1871, 1873, 5, 272, 137,
	2, 1872, 1869, 3, 2, 2, 2, 1872, 1873, 3, 2, 2, 2, 1873, 1876, 3, 2, 2,
	2, 1874, 1876, 5, 112, 57, 2, 1875, 1867, 3, 2, 2, 2, 1875, 1874, 3, 2,
	2, 2, 1876, 109, 3, 2, 2, 2, 1877, 1878, 7, 18, 2, 2, 1878, 111, 3, 2,
	2, 2, 1879, 1880, 5, 202, 102, 2, 1880, 1881, 7, 22, 2, 2, 1881, 113, 3,
	2, 2, 2, 1882, 1885, 7, 277, 2, 2, 1883, 1886, 7, 218, 2, 2, 1884, 1886,
	5, 116, 59, 2, 1885, 1883, 3, 2, 2, 2, 1885, 1884, 3, 2, 2, 2, 1886, 115,
	3, 2, 2, 2, 1887, 1892, 5, 120, 61, 2, 1888, 1889, 7, 38, 2, 2, 1889, 1891,
	5, 120, 61, 2, 1890, 1888, 3, 2, 2, 2, 1891, 1894, 3, 2, 2, 2, 1892, 1890,
	3, 2, 2, 2, 1892, 1893, 3, 2, 2, 2, 1893, 117, 3, 2, 2, 2, 1894, 1892,
	3, 2, 2, 2, 1895, 1899, 5, 122, 62, 2, 1896, 1898, 5, 130, 66, 2, 1897,
	1896, 3, 2, 2, 2, 1898, 1901, 3, 2, 2, 2, 1899, 1897, 3, 2, 2, 2, 1899,
	1900, 3, 2, 2, 2, 1900, 119, 3, 2, 2, 2, 1901, 1899, 3, 2, 2, 2, 1902,
	1909, 5, 122, 62, 2, 1903, 1904, 7, 34, 2, 2, 1904, 1905, 7, 474, 2, 2,
	1905, 1906, 5, 118, 60, 2, 1906, 1907, 7, 35, 2, 2, 1907, 1909, 3, 2, 2,
	2, 1908, 1902, 3, 2, 2, 2, 1908, 1903, 3, 2, 2, 2, 1909, 1913, 3, 2, 2,
	2, 1910, 1912, 5, 130, 66, 2, 1911, 1910, 3, 2, 2, 2, 1912, 1915, 3, 2,
	2, 2, 1913, 1911, 3, 2, 2, 2, 1913, 1914, 3, 2, 2, 2, 1914, 121, 3, 2,
	2, 2, 1915, 1913, 3, 2, 2, 2, 1916, 1918, 5, 248, 125, 2, 1917, 1919, 5,
	124, 63, 2, 1918, 1917, 3, 2, 2, 2, 1918, 1919, 3, 2, 2, 2, 1919, 1924,
	3, 2, 2, 2, 1920, 1922, 7, 92, 2, 2, 1921, 1920, 3, 2, 2, 2, 1921, 1922,
	3, 2, 2, 2, 1922, 1923, 3, 2, 2, 2, 1923, 1925, 5, 272, 137, 2, 1924, 1921,
	3, 2, 2, 2, 1924, 1925, 3, 2, 2, 2, 1925, 1927, 3, 2, 2, 2, 1926, 1928,
	5, 126, 64, 2, 1927, 1926, 3, 2, 2, 2, 1927, 1928, 3, 2, 2, 2, 1928, 1945,
	3, 2, 2, 2, 1929, 1931, 5, 156, 79, 2, 1930, 1932, 7, 92, 2, 2, 1931, 1930,
	3, 2, 2, 2, 1931, 1932, 3, 2, 2, 2, 1932, 1933, 3, 2, 2, 2, 1933, 1938,
	5, 272, 137, 2, 1934, 1935, 7, 32, 2, 2, 1935, 1936, 5, 280, 141, 2, 1936,
	1937, 7, 33, 2, 2, 1937, 1939, 3, 2, 2, 2, 1938, 1934, 3, 2, 2, 2, 1938,
	1939, 3, 2, 2, 2, 1939, 1945, 3, 2, 2, 2, 1940, 1941, 7, 32, 2, 2, 1941,
	1942, 5, 116, 59, 2, 1942, 1943, 7, 33, 2, 2, 1943, 1945, 3, 2, 2, 2, 1944,
	1916, 3, 2, 2, 2, 1944, 1929, 3, 2, 2, 2, 1944, 1940, 3, 2, 2, 2, 1945,
	123, 3, 2, 2, 2, 1946, 1947, 7, 500, 2, 2, 1947, 1948, 7, 32, 2, 2, 1948,
	1953, 5, 202, 102, 2, 1949, 1950, 7, 38, 2, 2, 1950, 1952, 5, 202, 102,
	2, 1951, 1949, 3, 2, 2, 2, 1952, 1955, 3, 2, 2, 2, 1953, 1951, 3, 2, 2,
	2, 1953, 1954, 3, 2, 2, 2, 1954, 1956, 3, 2, 2, 2, 1955, 1953, 3, 2, 2,
	2, 1956, 1957, 7, 33, 2, 2, 1957, 125, 3, 2, 2, 2, 1958, 1963, 5, 128,
	65, 2, 1959, 1960, 7, 38, 2, 2, 1960, 1962, 5, 128, 65, 2, 1961, 1959,
	3, 2, 2, 2, 1962, 1965, 3, 2, 2, 2, 1963, 1961, 3, 2, 2, 2, 1963, 1964,
	3, 2, 2, 2, 1964, 127, 3, 2, 2, 2, 1965, 1963, 3, 2, 2, 2, 1966, 1967,
	9, 11, 2, 2, 1967, 1976, 9, 12, 2, 2, 1968, 1974, 7, 272, 2, 2, 1969, 1975,
	7, 345, 2, 2, 1970, 1971, 7, 487, 2, 2, 1971, 1975, 7, 118, 2, 2, 1972,
	1973, 7, 291, 2, 2, 1973, 1975, 7, 118, 2, 2, 1974, 1969, 3, 2, 2, 2, 1974,
	1970, 3, 2, 2, 2, 1974, 1972, 3, 2, 2, 2, 1975, 1977, 3, 2, 2, 2, 1976,
	1968, 3, 2, 2, 2, 1976, 1977, 3, 2, 2, 2, 1977, 1978, 3, 2, 2, 2, 1978,
	1979, 7, 32, 2, 2, 1979, 1984, 5, 252, 127, 2, 1980, 1981, 7, 38, 2, 2,
	1981, 1983, 5, 252, 127, 2, 1982, 1980, 3, 2, 2, 2, 1983, 1986, 3, 2, 2,
	2, 1984, 1982, 3, 2, 2, 2, 1984, 1985, 3, 2, 2, 2, 1985, 1987, 3, 2, 2,
	2, 1986, 1984, 3, 2, 2, 2, 1987, 1988, 7, 33, 2, 2, 1988, 129, 3, 2, 2,
	2, 1989, 1990, 5, 132, 67, 2, 1990, 1992, 5, 120, 61, 2, 1991, 1993, 5,
	138, 70, 2, 1992, 1991, 3, 2, 2, 2, 1992, 1993, 3, 2, 2, 2, 1993, 2002,
	3, 2, 2, 2, 1994, 1995, 5, 134, 68, 2, 1995, 1996, 5, 120, 61, 2, 1996,
	1997, 5, 138, 70, 2, 1997, 2002, 3, 2, 2, 2, 1998, 1999, 5, 136, 69, 2,
	1999, 2000, 5, 122, 62, 2, 2000, 2002, 3, 2, 2, 2, 2001, 1989, 3, 2, 2,
	2, 2001, 1994, 3, 2, 2, 2, 2001, 1998, 3, 2, 2, 2, 2002, 131, 3, 2, 2,
	2, 2003, 2005, 9, 13, 2, 2, 2004, 2003, 3, 2, 2, 2, 2004, 2005, 3, 2, 2,
	2, 2005, 2006, 3, 2, 2, 2, 2006, 2009, 7, 345, 2, 2, 2007, 2009, 7, 670,
	2, 2, 2008, 2004, 3, 2, 2, 2, 2008, 2007, 3, 2, 2, 2, 2009, 133, 3, 2,
	2, 2, 2010, 2012, 9, 14, 2, 2, 2011, 2013, 7, 492, 2, 2, 2012, 2011, 3,
	2, 2, 2, 2012, 2013, 3, 2, 2, 2, 2013, 2014, 3, 2, 2, 2, 2014, 2015, 7,
	345, 2, 2, 2015, 135, 3, 2, 2, 2, 2016, 2018, 7, 449, 2, 2, 2017, 2019,
	7, 319, 2, 2, 2018, 2017, 3, 2, 2, 2, 2018, 2019, 3, 2, 2, 2, 2019, 2020,
	3, 2, 2, 2, 2020, 2028, 7, 345, 2, 2, 2021, 2022, 7, 449, 2, 2, 2022, 2024,
	9, 14, 2, 2, 2023, 2025, 7, 492, 2, 2, 2024, 2023, 3, 2, 2, 2, 2024, 2025,
	3, 2, 2, 2, 2025, 2026, 3, 2, 2, 2, 2026, 2028, 7, 345, 2, 2, 2027, 2016,
	3, 2, 2, 2, 2027, 2021, 3, 2, 2, 2, 2028, 137, 3, 2, 2, 2, 2029, 2030,
	7, 476, 2, 2, 2030, 2037, 5, 328, 165, 2, 2031, 2032, 7, 733, 2, 2, 2032,
	2033, 7, 32, 2, 2, 2033, 2034, 5, 280, 141, 2, 2034, 2035, 7, 33, 2, 2,
	2035, 2037, 3, 2, 2, 2, 2036, 2029, 3, 2, 2, 2, 2036, 2031, 3, 2, 2, 2,
	2037, 139, 3, 2, 2, 2, 2038, 2039, 7, 754, 2, 2, 2039, 2040, 5, 328, 165,
	2, 2040, 141, 3, 2, 2, 2, 2041, 2042, 7, 291, 2, 2, 2042, 2043, 7, 118,
	2, 2, 2043, 2048, 5, 446, 224, 2, 2044, 2045, 7, 38, 2, 2, 2045, 2047,
	5, 446, 224, 2, 2046, 2044, 3, 2, 2, 2, 2047, 2050, 3, 2, 2, 2, 2048, 2046,
	3, 2, 2, 2, 2048, 2049, 3, 2, 2, 2, 2049, 2053, 3, 2, 2, 2, 2050, 2048,
	3, 2, 2, 2, 2051, 2052, 7, 757, 2, 2, 2052, 2054, 7, 597, 2, 2, 2053, 2051,
	3, 2, 2, 2, 2053, 2054, 3, 2, 2, 2, 2054, 143, 3, 2, 2, 2, 2055, 2056,
	7, 297, 2, 2, 2056, 2057, 5, 328, 165, 2, 2057, 145, 3, 2, 2, 2, 2058,
	2069, 7, 366, 2, 2, 2059, 2060, 5, 150, 76, 2, 2060, 2061, 7, 38, 2, 2,
	2061, 2063, 3, 2, 2, 2, 2062, 2059, 3, 2, 2, 2, 2062, 2063, 3, 2, 2, 2,
	2063, 2064, 3, 2, 2, 2, 2064, 2070, 5, 148, 75, 2, 2065, 2066, 5, 148,
	75, 2, 2066, 2067, 7, 473, 2, 2, 2067, 2068, 5, 150, 76, 2, 2068, 2070,
	3, 2, 2, 2, 2069, 2062, 3, 2, 2, 2, 2069, 2065, 3, 2, 2, 2, 2070, 147,
	3, 2, 2, 2, 2071, 2074, 5, 188, 95, 2, 2072, 2074, 5, 178, 90, 2, 2073,
	2071, 3, 2, 2, 2, 2073, 2072, 3, 2, 2, 2, 2074, 149, 3, 2, 2, 2, 2075,
	2078, 5, 188, 95, 2, 2076, 2078, 5, 178, 90, 2, 2077, 2075, 3, 2, 2, 2,
	2077, 2076, 3, 2, 2, 2, 2078, 151, 3, 2, 2, 2, 2079, 2080, 7, 756, 2, 2,
	2080, 2085, 5, 154, 78, 2, 2081, 2082, 7, 38, 2, 2, 2082, 2084, 5, 154,
	78, 2, 2083, 2081, 3, 2, 2, 2, 2084, 2087, 3, 2, 2, 2, 2085, 2083, 3, 2,
	2, 2, 2085, 2086, 3, 2, 2, 2, 2086, 153, 3, 2, 2, 2, 2087, 2085, 3, 2,
	2, 2, 2088, 2089, 5, 202, 102, 2, 2089, 2090, 7, 92, 2, 2, 2090, 2091,
	5, 362, 182, 2, 2091, 155, 3, 2, 2, 2, 2092, 2093, 5, 64, 33, 2, 2093,
	157, 3, 2, 2, 2, 2094, 2095, 7, 661, 2, 2, 2095, 2096, 7, 118, 2, 2, 2096,
	2101, 5, 184, 93, 2, 2097, 2098, 7, 689, 2, 2, 2098, 2099, 7, 118, 2, 2,
	2099, 2101, 5, 184, 93, 2, 2100, 2094, 3, 2, 2, 2, 2100, 2097, 3, 2, 2,
	2, 2101, 159, 3, 2, 2, 2, 2102, 2103, 7, 689, 2, 2, 2103, 2104, 7, 118,
	2, 2, 2104, 2115, 5, 184, 93, 2, 2105, 2107, 7, 484, 2, 2, 2106, 2105,
	3, 2, 2, 2, 2106, 2107, 3, 2, 2, 2, 2107, 2108, 3, 2, 2, 2, 2108, 2109,
	7, 227, 2, 2, 2109, 2110, 7, 118, 2, 2, 2110, 2115, 5, 184, 93, 2, 2111,
	2112, 7, 239, 2, 2, 2112, 2113, 7, 118, 2, 2, 2113, 2115, 5, 184, 93, 2,
	2114, 2102, 3, 2, 2, 2, 2114, 2106, 3, 2, 2, 2, 2114, 2111, 3, 2, 2, 2,
	2115, 161, 3, 2, 2, 2, 2116, 2117, 7, 334, 2, 2, 2117, 2122, 5, 216, 109,
	2, 2118, 2119, 7, 38, 2, 2, 2119, 2121, 5, 216, 109, 2, 2120, 2118, 3,
	2, 2, 2, 2121, 2124, 3, 2, 2, 2, 2122, 2120, 3, 2, 2, 2, 2122, 2123, 3,
	2, 2, 2, 2123, 2153, 3, 2, 2, 2, 2124, 2122, 3, 2, 2, 2, 2125, 2126, 7,
	334, 2, 2, 2126, 2127, 7, 219, 2, 2, 2127, 2153, 5, 184, 93, 2, 2128, 2129,
	7, 334, 2, 2, 2129, 2130, 7, 493, 2, 2, 2130, 2134, 5, 184, 93, 2, 2131,
	2132, 7, 131, 2, 2, 2132, 2133, 7, 626, 2, 2, 2133, 2135, 5, 242, 122,
	2, 2134, 2131, 3, 2, 2, 2, 2134, 2135, 3, 2, 2, 2, 2135, 2142, 3, 2, 2,
	2, 2136, 2138, 7, 145, 2, 2, 2137, 2139, 5, 160, 81, 2, 2138, 2137, 3,
	2, 2, 2, 2139, 2140, 3, 2, 2, 2, 2140, 2138, 3, 2, 2, 2, 2140, 2141, 3,
	2, 2, 2, 2141, 2143, 3, 2, 2, 2, 2142, 2136, 3, 2, 2, 2, 2142, 2143, 3,
	2, 2, 2, 2143, 2150, 3, 2, 2, 2, 2144, 2146, 7, 368, 2, 2, 2145, 2147,
	5, 158, 80, 2, 2146, 2145, 3, 2, 2, 2, 2147, 2148, 3, 2, 2, 2, 2148, 2146,
	3, 2, 2, 2, 2148, 2149, 3, 2, 2, 2, 2149, 2151, 3, 2, 2, 2, 2150, 2144,
	3, 2, 2, 2, 2150, 2151, 3, 2, 2, 2, 2151, 2153, 3, 2, 2, 2, 2152, 2116,
	3, 2, 2, 2, 2152, 2125, 3, 2, 2, 2, 2152, 2128, 3, 2, 2, 2, 2153, 163,
	3, 2, 2, 2, 2154, 2155, 7, 272, 2, 2, 2155, 2157, 5, 168, 85, 2, 2156,
	2158, 5, 172, 87, 2, 2157, 2156, 3, 2, 2, 2, 2157, 2158, 3, 2, 2, 2, 2158,
	2160, 3, 2, 2, 2, 2159, 2161, 5, 170, 86, 2, 2160, 2159, 3, 2, 2, 2, 2160,
	2161, 3, 2, 2, 2, 2161, 2167, 3, 2, 2, 2, 2162, 2163, 7, 375, 2, 2, 2163,
	2164, 7, 313, 2, 2, 2164, 2165, 7, 627, 2, 2, 2165, 2167, 7, 437, 2, 2,
	2166, 2154, 3, 2, 2, 2, 2166, 2162, 3, 2, 2, 2, 2167, 165, 3, 2, 2, 2,
	2168, 2170, 5, 164, 83, 2, 2169, 2168, 3, 2, 2, 2, 2170, 2171, 3, 2, 2,
	2, 2171, 2169, 3, 2, 2, 2, 2171, 2172, 3, 2, 2, 2, 2172, 167, 3, 2, 2,
	2, 2173, 2174, 9, 15, 2, 2, 2174, 169, 3, 2, 2, 2, 2175, 2176, 7, 633,
	2, 2, 2176, 2179, 7, 376, 2, 2, 2177, 2179, 7, 461, 2, 2, 2178, 2175, 3,
	2, 2, 2, 2178, 2177, 3, 2, 2, 2, 2179, 171, 3, 2, 2, 2, 2180, 2181, 7,
	471, 2, 2, 2181, 2182, 5, 176, 89, 2, 2182, 173, 3, 2, 2, 2, 2183, 2185,
	5, 248, 125, 2, 2184, 2186, 7, 22, 2, 2, 2185, 2184, 3, 2, 2, 2, 2185,
	2186, 3, 2, 2, 2, 2186, 175, 3, 2, 2, 2, 2187, 2192, 5, 174, 88, 2, 2188,
	2189, 7, 38, 2, 2, 2189, 2191, 5, 174, 88, 2, 2190, 2188, 3, 2, 2, 2, 2191,
	2194, 3, 2, 2, 2, 2192, 2190, 3, 2, 2, 2, 2192, 2193, 3, 2, 2, 2, 2193,
	177, 3, 2, 2, 2, 2194, 2192, 3, 2, 2, 2, 2195, 2196, 7, 42, 2, 2, 2196,
	179, 3, 2, 2, 2, 2197, 2198, 9, 16, 2, 2, 2198, 181, 3, 2, 2, 2, 2199,
	2207, 5, 186, 94, 2, 2200, 2207, 5, 188, 95, 2, 2201, 2207, 5, 190, 96,
	2, 2202, 2207, 5, 192, 97, 2, 2203, 2207, 5, 194, 98, 2, 2204, 2207, 5,
	196, 99, 2, 2205, 2207, 5, 198, 100, 2, 2206, 2199, 3, 2, 2, 2, 2206, 2200,
	3, 2, 2, 2, 2206, 2201, 3, 2, 2, 2, 2206, 2202, 3, 2, 2, 2, 2206, 2203,
	3, 2, 2, 2, 2206, 2204, 3, 2, 2, 2, 2206, 2205, 3, 2, 2, 2, 2207, 183,
	3, 2, 2, 2, 2208, 2209, 9, 17, 2, 2, 2209, 185, 3, 2, 2, 2, 2210, 2212,
	7, 775, 2, 2, 2211, 2210, 3, 2, 2, 2, 2211, 2212, 3, 2, 2, 2, 2212, 2213,
	3, 2, 2, 2, 2213, 2216, 5, 184, 93, 2, 2214, 2216, 7, 774, 2, 2, 2215,
	2211, 3, 2, 2, 2, 2215, 2214, 3, 2, 2, 2, 2216, 187, 3, 2, 2, 2, 2217,
	2218, 7, 776, 2, 2, 2218, 189, 3, 2, 2, 2, 2219, 2220, 9, 18, 2, 2, 2220,
	2221, 7, 772, 2, 2, 2221, 191, 3, 2, 2, 2, 2222, 2224, 7, 775, 2, 2, 2223,
	2222, 3, 2, 2, 2, 2223, 2224, 3, 2, 2, 2, 2224, 2225, 3, 2, 2, 2, 2225,
	2227, 7, 780, 2, 2, 2226, 2228, 5, 492, 247, 2, 2227, 2226, 3, 2, 2, 2,
	2227, 2228, 3, 2, 2, 2, 2228, 193, 3, 2, 2, 2, 2229, 2231, 7, 775, 2, 2,
	2230, 2229, 3, 2, 2, 2, 2230, 2231, 3, 2, 2, 2, 2231, 2232, 3, 2, 2, 2,
	2232, 2234, 7, 781, 2, 2, 2233, 2235, 5, 492, 247, 2, 2234, 2233, 3, 2,
	2, 2, 2234, 2235, 3, 2, 2, 2, 2235, 195, 3, 2, 2, 2, 2236, 2237, 9, 19,
	2, 2, 2237, 197, 3, 2, 2, 2, 2238, 2239, 7, 466, 2, 2, 2239, 199, 3, 2,
	2, 2, 2240, 2243, 5, 214, 108, 2, 2241, 2243, 7, 108, 2, 2, 2242, 2240,
	3, 2, 2, 2, 2242, 2241, 3, 2, 2, 2, 2243, 201, 3, 2, 2, 2, 2244, 2253,
	7, 771, 2, 2, 2245, 2253, 5, 204, 103, 2, 2246, 2253, 5, 206, 104, 2, 2247,
	2253, 5, 208, 105, 2, 2248, 2253, 5, 210, 106, 2, 2249, 2253, 5, 212, 107,
	2, 2250, 2253, 5, 180, 91, 2, 2251, 2253, 7, 773, 2, 2, 2252, 2244, 3,
	2, 2, 2, 2252, 2245, 3, 2, 2, 2, 2252, 2246, 3, 2, 2, 2, 2252, 2247, 3,
	2, 2, 2, 2252, 2248, 3, 2, 2, 2, 2252, 2249, 3, 2, 2, 2, 2252, 2250, 3,
	2, 2, 2, 2252, 2251, 3, 2, 2, 2, 2253, 203, 3, 2, 2, 2, 2254, 2255, 9,
	20, 2, 2, 2255, 205, 3, 2, 2, 2, 2256, 2257, 9, 21, 2, 2, 2257, 207, 3,
	2, 2, 2, 2258, 2259, 9, 22, 2, 2, 2259, 209, 3, 2, 2, 2, 2260, 2261, 9,
	23, 2, 2, 2261, 211, 3, 2, 2, 2, 2262, 2263, 9, 24, 2, 2, 2263, 213, 3,
	2, 2, 2, 2264, 2267, 5, 202, 102, 2, 2265, 2267, 5, 184, 93, 2, 2266, 2264,
	3, 2, 2, 2, 2266, 2265, 3, 2, 2, 2, 2267, 215, 3, 2, 2, 2, 2268, 2271,
	5, 218, 110, 2, 2269, 2271, 5, 220, 111, 2, 2270, 2268, 3, 2, 2, 2, 2270,
	2269, 3, 2, 2, 2, 2271, 217, 3, 2, 2, 2, 2272, 2273, 7, 43, 2, 2, 2273,
	2274, 5, 214, 108, 2, 2274, 219, 3, 2, 2, 2, 2275, 2276, 7, 43, 2, 2, 2276,
	2278, 7, 43, 2, 2, 2277, 2279, 9, 25, 2, 2, 2278, 2277, 3, 2, 2, 2, 2278,
	2279, 3, 2, 2, 2, 2279, 2280, 3, 2, 2, 2, 2280, 2283, 5, 214, 108, 2, 2281,
	2282, 7, 21, 2, 2, 2282, 2284, 5, 202, 102, 2, 2283, 2281, 3, 2, 2, 2,
	2283, 2284, 3, 2, 2, 2, 2284, 221, 3, 2, 2, 2, 2285, 2286, 7, 43, 2, 2,
	2286, 2290, 7, 43, 2, 2, 2287, 2288, 5, 224, 113, 2, 2288, 2289, 7, 21,
	2, 2, 2289, 2291, 3, 2, 2, 2, 2290, 2287, 3, 2, 2, 2, 2290, 2291, 3, 2,
	2, 2, 2291, 2292, 3, 2, 2, 2, 2292, 2293, 5, 226, 114, 2, 2293, 223, 3,
	2, 2, 2, 2294, 2295, 9, 24, 2, 2, 2295, 225, 3, 2, 2, 2, 2296, 2305, 5,
	202, 102, 2, 2297, 2298, 7, 195, 2, 2, 2298, 2299, 7, 21, 2, 2, 2299, 2305,
	5, 202, 102, 2, 2300, 2301, 5, 202, 102, 2, 2301, 2302, 7, 21, 2, 2, 2302,
	2303, 5, 202, 102, 2, 2303, 2305, 3, 2, 2, 2, 2304, 2296, 3, 2, 2, 2, 2304,
	2297, 3, 2, 2, 2, 2304, 2300, 3, 2, 2, 2, 2305, 227, 3, 2, 2, 2, 2306,
	2314, 5, 328, 165, 2, 2307, 2314, 7, 195, 2, 2, 2308, 2314, 7, 85, 2, 2,
	2309, 2314, 7, 476, 2, 2, 2310, 2314, 7, 108, 2, 2, 2311, 2314, 7, 600,
	2, 2, 2312, 2314, 7, 681, 2, 2, 2313, 2306, 3, 2, 2, 2, 2313, 2307, 3,
	2, 2, 2, 2313, 2308, 3, 2, 2, 2, 2313, 2309, 3, 2, 2, 2, 2313, 2310, 3,
	2, 2, 2, 2313, 2311, 3, 2, 2, 2, 2313, 2312, 3, 2, 2, 2, 2314, 229, 3,
	2, 2, 2, 2315, 2318, 5, 236, 119, 2, 2316, 2317, 7, 38, 2, 2, 2317, 2319,
	5, 232, 117, 2, 2318, 2316, 3, 2, 2, 2, 2318, 2319, 3, 2, 2, 2, 2319, 2326,
	3, 2, 2, 2, 2320, 2323, 5, 232, 117, 2, 2321, 2322, 7, 38, 2, 2, 2322,
	2324, 5, 236, 119, 2, 2323, 2321, 3, 2, 2, 2, 2323, 2324, 3, 2, 2, 2, 2324,
	2326, 3, 2, 2, 2, 2325, 2315, 3, 2, 2, 2, 2325, 2320, 3, 2, 2, 2, 2326,
	231, 3, 2, 2, 2, 2327, 2328, 7, 342, 2, 2, 2328, 2329, 7, 364, 2, 2, 2329,
	2330, 5, 234, 118, 2, 2330, 233, 3, 2, 2, 2, 2331, 2332, 7, 563, 2, 2,
	2332, 2339, 7, 538, 2, 2, 2333, 2334, 7, 538, 2, 2, 2334, 2339, 7, 150,
	2, 2, 2335, 2336, 7, 538, 2, 2, 2336, 2339, 7, 713, 2, 2, 2337, 2339, 7,
	623, 2, 2, 2338, 2331, 3, 2, 2, 2, 2338, 2333, 3, 2, 2, 2, 2338, 2335,
	3, 2, 2, 2, 2338, 2337, 3, 2, 2, 2, 2339, 235, 3, 2, 2, 2, 2340, 2341,
	7, 538, 2, 2, 2341, 2342, 9, 26, 2, 2, 2342, 237, 3, 2, 2, 2, 2343, 2344,
	5, 202, 102, 2, 2344, 239, 3, 2, 2, 2, 2345, 2350, 5, 238, 120, 2, 2346,
	2347, 7, 38, 2, 2, 2347, 2349, 5, 238, 120, 2, 2348, 2346, 3, 2, 2, 2,
	2349, 2352, 3, 2, 2, 2, 2350, 2348, 3, 2, 2, 2, 2350, 2351, 3, 2, 2, 2,
	2351, 241, 3, 2, 2, 2, 2352, 2350, 3, 2, 2, 2, 2353, 2356, 5, 214, 108,
	2, 2354, 2356, 7, 108, 2, 2, 2355, 2353, 3, 2, 2, 2, 2355, 2354, 3, 2,
	2, 2, 2356, 243, 3, 2, 2, 2, 2357, 2362, 5, 246, 124, 2, 2358, 2359, 7,
	38, 2, 2, 2359, 2361, 5, 246, 124, 2, 2360, 2358, 3, 2, 2, 2, 2361, 2364,
	3, 2, 2, 2, 2362, 2360, 3, 2, 2, 2, 2362, 2363, 3, 2, 2, 2, 2363, 245,
	3, 2, 2, 2, 2364, 2362, 3, 2, 2, 2, 2365, 2366, 7, 32, 2, 2, 2366, 2367,
	5, 238, 120, 2, 2367, 2368, 7, 38, 2, 2, 2368, 2369, 5, 238, 120, 2, 2369,
	2370, 7, 33, 2, 2, 2370, 247, 3, 2, 2, 2, 2371, 2372, 5, 270, 136, 2, 2372,
	2373, 7, 21, 2, 2, 2373, 2375, 3, 2, 2, 2, 2374, 2371, 3, 2, 2, 2, 2374,
	2375, 3, 2, 2, 2, 2375, 2376, 3, 2, 2, 2, 2376, 2377, 5, 274, 138, 2, 2377,
	249, 3, 2, 2, 2, 2378, 2379, 5, 202, 102, 2, 2379, 251, 3, 2, 2, 2, 2380,
	2381, 5, 202, 102, 2, 2381, 253, 3, 2, 2, 2, 2382, 2383, 5, 202, 102, 2,
	2383, 255, 3, 2, 2, 2, 2384, 2387, 5, 214, 108, 2, 2385, 2386, 7, 43, 2,
	2, 2386, 2388, 5, 214, 108, 2, 2387, 2385, 3, 2, 2, 2, 2387, 2388, 3, 2,
	2, 2, 2388, 257, 3, 2, 2, 2, 2389, 2396, 5, 256, 129, 2, 2390, 2393, 7,
	177, 2, 2, 2391, 2392, 7, 32, 2, 2, 2392, 2394, 7, 33, 2, 2, 2393, 2391,
	3, 2, 2, 2, 2393, 2394, 3, 2, 2, 2, 2394, 2396, 3, 2, 2, 2, 2395, 2389,
	3, 2, 2, 2, 2395, 2390, 3, 2, 2, 2, 2396, 259, 3, 2, 2, 2, 2397, 2400,
	5, 202, 102, 2, 2398, 2399, 7, 21, 2, 2, 2399, 2401, 5, 202, 102, 2, 2400,
	2398, 3, 2, 2, 2, 2400, 2401, 3, 2, 2, 2, 2401, 261, 3, 2, 2, 2, 2402,
	2403, 5, 214, 108, 2, 2403, 263, 3, 2, 2, 2, 2404, 2405, 5, 214, 108, 2,
	2405, 265, 3, 2, 2, 2, 2406, 2414, 5, 202, 102, 2, 2407, 2408, 5, 270,
	136, 2, 2408, 2409, 7, 21, 2, 2, 2409, 2411, 3, 2, 2, 2, 2410, 2407, 3,
	2, 2, 2, 2410, 2411, 3, 2, 2, 2, 2411, 2412, 3, 2, 2, 2, 2412, 2414, 5,
	202, 102, 2, 2413, 2406, 3, 2, 2, 2, 2413, 2410, 3, 2, 2, 2, 2414, 267,
	3, 2, 2, 2, 2415, 2423, 5, 202, 102, 2, 2416, 2417, 5, 270, 136, 2, 2417,
	2418, 7, 21, 2, 2, 2418, 2420, 3, 2, 2, 2, 2419, 2416, 3, 2, 2, 2, 2419,
	2420, 3, 2, 2, 2, 2420, 2421, 3, 2, 2, 2, 2421, 2423, 5, 202, 102, 2, 2422,
	2415, 3, 2, 2, 2, 2422, 2419, 3, 2, 2, 2, 2423, 269, 3, 2, 2, 2, 2424,
	2425, 5, 202, 102, 2, 2425, 271, 3, 2, 2, 2, 2426, 2427, 5, 214, 108, 2,
	2427, 273, 3, 2, 2, 2, 2428, 2429, 5, 202, 102, 2, 2429, 275, 3, 2, 2,
	2, 2430, 2435, 5, 248, 125, 2, 2431, 2432, 7, 38, 2, 2, 2432, 2434, 5,
	248, 125, 2, 2433, 2431, 3, 2, 2, 2, 2434, 2437, 3, 2, 2, 2, 2435, 2433,
	3, 2, 2, 2, 2435, 2436, 3, 2, 2, 2, 2436, 277, 3, 2, 2, 2, 2437, 2435,
	3, 2, 2, 2, 2438, 2443, 5, 268, 135, 2, 2439, 2440, 7, 38, 2, 2, 2440,
	2442, 5, 268, 135, 2, 2441, 2439, 3, 2, 2, 2, 2442, 2445, 3, 2, 2, 2, 2443,
	2441, 3, 2, 2, 2, 2443, 2444, 3, 2, 2, 2, 2444, 279, 3, 2, 2, 2, 2445,
	2443, 3, 2, 2, 2, 2446, 2451, 5, 250, 126, 2, 2447, 2448, 7, 38, 2, 2,
	2448, 2450, 5, 250, 126, 2, 2449, 2447, 3, 2, 2, 2, 2450, 2453, 3, 2, 2,
	2, 2451, 2449, 3, 2, 2, 2, 2451, 2452, 3, 2, 2, 2, 2452, 281, 3, 2, 2,
	2, 2453, 2451, 3, 2, 2, 2, 2454, 2455, 5, 202, 102, 2, 2455, 283, 3, 2,
	2, 2, 2456, 2457, 5, 202, 102, 2, 2457, 285, 3, 2, 2, 2, 2458, 2459, 5,
	186, 94, 2, 2459, 287, 3, 2, 2, 2, 2460, 2461, 5, 184, 93, 2, 2461, 289,
	3, 2, 2, 2, 2462, 2463, 5, 202, 102, 2, 2463, 291, 3, 2, 2, 2, 2464, 2465,
	5, 184, 93, 2, 2465, 293, 3, 2, 2, 2, 2466, 2467, 7, 776, 2, 2, 2467, 295,
	3, 2, 2, 2, 2468, 2469, 5, 258, 130, 2, 2469, 2470, 7, 43, 2, 2, 2470,
	2471, 5, 292, 147, 2, 2471, 2472, 7, 15, 2, 2, 2472, 2473, 5, 294, 148,
	2, 2473, 297, 3, 2, 2, 2, 2474, 2475, 5, 184, 93, 2, 2475, 299, 3, 2, 2,
	2, 2476, 2479, 5, 202, 102, 2, 2477, 2478, 7, 21, 2, 2, 2478, 2480, 5,
	202, 102, 2, 2479, 2477, 3, 2, 2, 2, 2479, 2480, 3, 2, 2, 2, 2480, 301,
	3, 2, 2, 2, 2481, 2482, 5, 186, 94, 2, 2482, 303, 3, 2, 2, 2, 2483, 2486,
	5, 306, 154, 2, 2484, 2485, 7, 43, 2, 2, 2485, 2487, 5, 214, 108, 2, 2486,
	2484, 3, 2, 2, 2, 2486, 2487, 3, 2, 2, 2, 2487, 305, 3, 2, 2, 2, 2488,
	2491, 5, 202, 102, 2, 2489, 2491, 5, 184, 93, 2, 2490, 2488, 3, 2, 2, 2,
	2490, 2489, 3, 2, 2, 2, 2491, 307, 3, 2, 2, 2, 2492, 2493, 5, 214, 108,
	2, 2493, 309, 3, 2, 2, 2, 2494, 2497, 5, 202, 102, 2, 2495, 2496, 7, 21,
	2, 2, 2496, 2498, 5, 202, 102, 2, 2497, 2495, 3, 2, 2, 2, 2497, 2498, 3,
	2, 2, 2, 2498, 311, 3, 2, 2, 2, 2499, 2500, 9, 27, 2, 2, 2500, 313, 3,
	2, 2, 2, 2501, 2502, 9, 28, 2, 2, 2502, 315, 3, 2, 2, 2, 2503, 2506, 5,
	258, 130, 2, 2504, 2506, 5, 304, 153, 2, 2505, 2503, 3, 2, 2, 2, 2505,
	2504, 3, 2, 2, 2, 2506, 317, 3, 2, 2, 2, 2507, 2508, 5, 202, 102, 2, 2508,
	319, 3, 2, 2, 2, 2509, 2514, 5, 202, 102, 2, 2510, 2511, 7, 38, 2, 2, 2511,
	2513, 5, 202, 102, 2, 2512, 2510, 3, 2, 2, 2, 2513, 2516, 3, 2, 2, 2, 2514,
	2512, 3, 2, 2, 2, 2514, 2515, 3, 2, 2, 2, 2515, 321, 3, 2, 2, 2, 2516,
	2514, 3, 2, 2, 2, 2517, 2520, 7, 85, 2, 2, 2518, 2520, 5, 320, 161, 2,
	2519, 2517, 3, 2, 2, 2, 2519, 2518, 3, 2, 2, 2, 2520, 323, 3, 2, 2, 2,
	2521, 2522, 9, 29, 2, 2, 2522, 325, 3, 2, 2, 2, 2523, 2524, 9, 30, 2, 2,
	2524, 2525, 5, 310, 156, 2, 2525, 327, 3, 2, 2, 2, 2526, 2527, 8, 165,
	1, 2, 2527, 2532, 5, 336, 169, 2, 2528, 2529, 5, 334, 168, 2, 2529, 2530,
	5, 328, 165, 3, 2530, 2532, 3, 2, 2, 2, 2531, 2526, 3, 2, 2, 2, 2531, 2528,
	3, 2, 2, 2, 2532, 2546, 3, 2, 2, 2, 2533, 2534, 12, 6, 2, 2, 2534, 2535,
	5, 330, 166, 2, 2535, 2536, 5, 328, 165, 7, 2536, 2545, 3, 2, 2, 2, 2537,
	2538, 12, 5, 2, 2, 2538, 2539, 5, 332, 167, 2, 2539, 2540, 5, 328, 165,
	6, 2540, 2545, 3, 2, 2, 2, 2541, 2542, 12, 4, 2, 2, 2542, 2543, 7, 766,
	2, 2, 2543, 2545, 5, 328, 165, 5, 2544, 2533, 3, 2, 2, 2, 2544, 2537, 3,
	2, 2, 2, 2544, 2541, 3, 2, 2, 2, 2545, 2548, 3, 2, 2, 2, 2546, 2544, 3,
	2, 2, 2, 2546, 2547, 3, 2, 2, 2, 2547, 329, 3, 2, 2, 2, 2548, 2546, 3,
	2, 2, 2, 2549, 2550, 9, 31, 2, 2, 2550, 331, 3, 2, 2, 2, 2551, 2552, 9,
	32, 2, 2, 2552, 333, 3, 2, 2, 2, 2553, 2554, 9, 33, 2, 2, 2554, 335, 3,
	2, 2, 2, 2555, 2556, 8, 169, 1, 2, 2556, 2557, 5, 342, 172, 2, 2557, 2582,
	3, 2, 2, 2, 2558, 2559, 12, 8, 2, 2, 2559, 2561, 7, 341, 2, 2, 2560, 2562,
	7, 460, 2, 2, 2561, 2560, 3, 2, 2, 2, 2561, 2562, 3, 2, 2, 2, 2562, 2563,
	3, 2, 2, 2, 2563, 2581, 9, 34, 2, 2, 2564, 2565, 12, 7, 2, 2, 2565, 2566,
	7, 23, 2, 2, 2566, 2581, 5, 342, 172, 2, 2567, 2568, 12, 6, 2, 2, 2568,
	2569, 5, 340, 171, 2, 2569, 2570, 5, 342, 172, 2, 2570, 2581, 3, 2, 2,
	2, 2571, 2572, 12, 5, 2, 2, 2572, 2573, 5, 340, 171, 2, 2573, 2574, 9,
	35, 2, 2, 2574, 2575, 5, 156, 79, 2, 2575, 2581, 3, 2, 2, 2, 2576, 2577,
	12, 4, 2, 2, 2577, 2578, 5, 338, 170, 2, 2578, 2579, 5, 342, 172, 2, 2579,
	2581, 3, 2, 2, 2, 2580, 2558, 3, 2, 2, 2, 2580, 2564, 3, 2, 2, 2, 2580,
	2567, 3, 2, 2, 2, 2580, 2571, 3, 2, 2, 2, 2580, 2576, 3, 2, 2, 2, 2581,
	2584, 3, 2, 2, 2, 2582, 2580, 3, 2, 2, 2, 2582, 2583, 3, 2, 2, 2, 2583,
	337, 3, 2, 2, 2, 2584, 2582, 3, 2, 2, 2, 2585, 2586, 9, 36, 2, 2, 2586,
	339, 3, 2, 2, 2, 2587, 2588, 9, 37, 2, 2, 2588, 341, 3, 2, 2, 2, 2589,
	2591, 5, 344, 173, 2, 2590, 2592, 7, 460, 2, 2, 2591, 2590, 3, 2, 2, 2,
	2591, 2592, 3, 2, 2, 2, 2592, 2593, 3, 2, 2, 2, 2593, 2594, 7, 313, 2,
	2, 2594, 2595, 5, 156, 79, 2, 2595, 2645, 3, 2, 2, 2, 2596, 2598, 5, 344,
	173, 2, 2597, 2599, 7, 460, 2, 2, 2598, 2597, 3, 2, 2, 2, 2598, 2599, 3,
	2, 2, 2, 2599, 2600, 3, 2, 2, 2, 2600, 2601, 7, 313, 2, 2, 2601, 2602,
	7, 32, 2, 2, 2602, 2607, 5, 328, 165, 2, 2603, 2604, 7, 38, 2, 2, 2604,
	2606, 5, 328, 165, 2, 2605, 2603, 3, 2, 2, 2, 2606, 2609, 3, 2, 2, 2, 2607,
	2605, 3, 2, 2, 2, 2607, 2608, 3, 2, 2, 2, 2608, 2610, 3, 2, 2, 2, 2609,
	2607, 3, 2, 2, 2, 2610, 2611, 7, 33, 2, 2, 2611, 2645, 3, 2, 2, 2, 2612,
	2614, 5, 344, 173, 2, 2613, 2615, 7, 460, 2, 2, 2614, 2613, 3, 2, 2, 2,
	2614, 2615, 3, 2, 2, 2, 2615, 2616, 3, 2, 2, 2, 2616, 2617, 7, 106, 2,
	2, 2617, 2618, 5, 344, 173, 2, 2618, 2619, 7, 89, 2, 2, 2619, 2620, 5,
	342, 172, 2, 2620, 2645, 3, 2, 2, 2, 2621, 2622, 5, 344, 173, 2, 2622,
	2623, 7, 640, 2, 2, 2623, 2624, 7, 365, 2, 2, 2624, 2625, 5, 344, 173,
	2, 2625, 2645, 3, 2, 2, 2, 2626, 2628, 5, 344, 173, 2, 2627, 2629, 7, 460,
	2, 2, 2628, 2627, 3, 2, 2, 2, 2628, 2629, 3, 2, 2, 2, 2629, 2630, 3, 2,
	2, 2, 2630, 2631, 7, 365, 2, 2, 2631, 2634, 5, 346, 174, 2, 2632, 2633,
	7, 238, 2, 2, 2633, 2635, 5, 346, 174, 2, 2634, 2632, 3, 2, 2, 2, 2634,
	2635, 3, 2, 2, 2, 2635, 2645, 3, 2, 2, 2, 2636, 2638, 5, 344, 173, 2, 2637,
	2639, 7, 460, 2, 2, 2638, 2637, 3, 2, 2, 2, 2638, 2639, 3, 2, 2, 2, 2639,
	2640, 3, 2, 2, 2, 2640, 2641, 7, 550, 2, 2, 2641, 2642, 5, 344, 173, 2,
	2642, 2645, 3, 2, 2, 2, 2643, 2645, 5, 344, 173, 2, 2644, 2589, 3, 2, 2,
	2, 2644, 2596, 3, 2, 2, 2, 2644, 2612, 3, 2, 2, 2, 2644, 2621, 3, 2, 2,
	2, 2644, 2626, 3, 2, 2, 2, 2644, 2636, 3, 2, 2, 2, 2644, 2643, 3, 2, 2,
	2, 2645, 343, 3, 2, 2, 2, 2646, 2647, 8, 173, 1, 2, 2647, 2648, 5, 346,
	174, 2, 2648, 2693, 3, 2, 2, 2, 2649, 2650, 12, 17, 2, 2, 2650, 2651, 7,
	9, 2, 2, 2651, 2692, 5, 344, 173, 18, 2652, 2653, 12, 16, 2, 2, 2653, 2654,
	7, 10, 2, 2, 2654, 2692, 5, 344, 173, 17, 2655, 2656, 12, 15, 2, 2, 2656,
	2657, 7, 11, 2, 2, 2657, 2692, 5, 344, 173, 16, 2658, 2659, 12, 14, 2,
	2, 2659, 2660, 7, 12, 2, 2, 2660, 2692, 5, 344, 173, 15, 2661, 2662, 12,
	13, 2, 2, 2662, 2663, 7, 16, 2, 2, 2663, 2692, 5, 344, 173, 14, 2664, 2665,
	12, 12, 2, 2, 2665, 2666, 7, 17, 2, 2, 2666, 2692, 5, 344, 173, 13, 2667,
	2668, 12, 11, 2, 2, 2668, 2669, 7, 18, 2, 2, 2669, 2692, 5, 344, 173, 12,
	2670, 2671, 12, 10, 2, 2, 2671, 2672, 7, 19, 2, 2, 2672, 2692, 5, 344,
	173, 11, 2673, 2674, 12, 9, 2, 2, 2674, 2675, 7, 214, 2, 2, 2675, 2692,
	5, 344, 173, 10, 2676, 2677, 12, 8, 2, 2, 2677, 2678, 7, 436, 2, 2, 2678,
	2692, 5, 344, 173, 9, 2679, 2680, 12, 7, 2, 2, 2680, 2681, 7, 14, 2, 2,
	2681, 2692, 5, 344, 173, 8, 2682, 2683, 12, 6, 2, 2, 2683, 2684, 7, 13,
	2, 2, 2684, 2692, 5, 344, 173, 7, 2685, 2686, 12, 5, 2, 2, 2686, 2687,
	7, 16, 2, 2, 2687, 2692, 5, 438, 220, 2, 2688, 2689, 12, 4, 2, 2, 2689,
	2690, 7, 17, 2, 2, 2690, 2692, 5, 438, 220, 2, 2691, 2649, 3, 2, 2, 2,
	2691, 2652, 3, 2, 2, 2, 2691, 2655, 3, 2, 2, 2, 2691, 2658, 3, 2, 2, 2,
	2691, 2661, 3, 2, 2, 2, 2691, 2664, 3, 2, 2, 2, 2691, 2667, 3, 2, 2, 2,
	2691, 2670, 3, 2, 2, 2, 2691, 2673, 3, 2, 2, 2, 2691, 2676, 3, 2, 2, 2,
	2691, 2679, 3, 2, 2, 2, 2691, 2682, 3, 2, 2, 2, 2691, 2685, 3, 2, 2, 2,
	2691, 2688, 3, 2, 2, 2, 2692, 2695, 3, 2, 2, 2, 2693, 2691, 3, 2, 2, 2,
	2693, 2694, 3, 2, 2, 2, 2694, 345, 3, 2, 2, 2, 2695, 2693, 3, 2, 2, 2,
	2696, 2697, 8, 174, 1, 2, 2697, 2741, 5, 352, 177, 2, 2698, 2741, 5, 178,
	90, 2, 2699, 2741, 5, 182, 92, 2, 2700, 2741, 5, 348, 175, 2, 2701, 2741,
	5, 216, 109, 2, 2702, 2708, 7, 16, 2, 2, 2703, 2708, 7, 17, 2, 2, 2704,
	2708, 7, 8, 2, 2, 2705, 2708, 5, 334, 168, 2, 2706, 2708, 7, 108, 2, 2,
	2707, 2702, 3, 2, 2, 2, 2707, 2703, 3, 2, 2, 2, 2707, 2704, 3, 2, 2, 2,
	2707, 2705, 3, 2, 2, 2, 2707, 2706, 3, 2, 2, 2, 2708, 2709, 3, 2, 2, 2,
	2709, 2741, 5, 346, 174, 10, 2710, 2712, 7, 600, 2, 2, 2711, 2710, 3, 2,
	2, 2, 2711, 2712, 3, 2, 2, 2, 2712, 2713, 3, 2, 2, 2, 2713, 2714, 7, 32,
	2, 2, 2714, 2719, 5, 328, 165, 2, 2715, 2716, 7, 38, 2, 2, 2716, 2718,
	5, 328, 165, 2, 2717, 2715, 3, 2, 2, 2, 2718, 2721, 3, 2, 2, 2, 2719, 2717,
	3, 2, 2, 2, 2719, 2720, 3, 2, 2, 2, 2720, 2722, 3, 2, 2, 2, 2721, 2719,
	3, 2, 2, 2, 2722, 2723, 7, 33, 2, 2, 2723, 2741, 3, 2, 2, 2, 2724, 2726,
	7, 247, 2, 2, 2725, 2724, 3, 2, 2, 2, 2725, 2726, 3, 2, 2, 2, 2726, 2727,
	3, 2, 2, 2, 2727, 2741, 5, 156, 79, 2, 2728, 2729, 7, 34, 2, 2, 2729, 2730,
	5, 202, 102, 2, 2730, 2731, 5, 328, 165, 2, 2731, 2732, 7, 35, 2, 2, 2732,
	2741, 3, 2, 2, 2, 2733, 2734, 5, 202, 102, 2, 2734, 2735, 9, 38, 2, 2,
	2735, 2736, 5, 184, 93, 2, 2736, 2741, 3, 2, 2, 2, 2737, 2741, 5, 424,
	213, 2, 2738, 2741, 5, 428, 215, 2, 2739, 2741, 5, 438, 220, 2, 2740, 2696,
	3, 2, 2, 2, 2740, 2698, 3, 2, 2, 2, 2740, 2699, 3, 2, 2, 2, 2740, 2700,
	3, 2, 2, 2, 2740, 2701, 3, 2, 2, 2, 2740, 2707, 3, 2, 2, 2, 2740, 2711,
	3, 2, 2, 2, 2740, 2725, 3, 2, 2, 2, 2740, 2728, 3, 2, 2, 2, 2740, 2733,
	3, 2, 2, 2, 2740, 2737, 3, 2, 2, 2, 2740, 2738, 3, 2, 2, 2, 2740, 2739,
	3, 2, 2, 2, 2741, 2750, 3, 2, 2, 2, 2742, 2743, 12, 11, 2, 2, 2743, 2744,
	7, 6, 2, 2, 2744, 2749, 5, 346, 174, 12, 2745, 2746, 12, 13, 2, 2, 2746,
	2747, 7, 142, 2, 2, 2747, 2749, 5, 214, 108, 2, 2748, 2742, 3, 2, 2, 2,
	2748, 2745, 3, 2, 2, 2, 2749, 2752, 3, 2, 2, 2, 2750, 2748, 3, 2, 2, 2,
	2750, 2751, 3, 2, 2, 2, 2751, 347, 3, 2, 2, 2, 2752, 2750, 3, 2, 2, 2,
	2753, 2756, 5, 202, 102, 2, 2754, 2755, 7, 21, 2, 2, 2755, 2757, 5, 202,
	102, 2, 2756, 2754, 3, 2, 2, 2, 2756, 2757, 3, 2, 2, 2, 2757, 2760, 3,
	2, 2, 2, 2758, 2759, 7, 21, 2, 2, 2759, 2761, 5, 202, 102, 2, 2760, 2758,
	3, 2, 2, 2, 2760, 2761, 3, 2, 2, 2, 2761, 349, 3, 2, 2, 2, 2762, 2767,
	5, 348, 175, 2, 2763, 2764, 7, 38, 2, 2, 2764, 2766, 5, 348, 175, 2, 2765,
	2763, 3, 2, 2, 2, 2766, 2769, 3, 2, 2, 2, 2767, 2765, 3, 2, 2, 2, 2767,
	2768, 3, 2, 2, 2, 2768, 351, 3, 2, 2, 2, 2769, 2767, 3, 2, 2, 2, 2770,
	2774, 5, 354, 178, 2, 2771, 2774, 5, 372, 187, 2, 2772, 2774, 5, 416, 209,
	2, 2773, 2770, 3, 2, 2, 2, 2773, 2771, 3, 2, 2, 2, 2773, 2772, 3, 2, 2,
	2, 2774, 353, 3, 2, 2, 2, 2775, 2776, 5, 356, 179, 2, 2776, 2778, 7, 32,
	2, 2, 2777, 2779, 5, 358, 180, 2, 2778, 2777, 3, 2, 2, 2, 2778, 2779, 3,
	2, 2, 2, 2779, 2789, 3, 2, 2, 2, 2780, 2785, 5, 328, 165, 2, 2781, 2782,
	7, 38, 2, 2, 2782, 2784, 5, 328, 165, 2, 2783, 2781, 3, 2, 2, 2, 2784,
	2787, 3, 2, 2, 2, 2785, 2783, 3, 2, 2, 2, 2785, 2786, 3, 2, 2, 2, 2786,
	2790, 3, 2, 2, 2, 2787, 2785, 3, 2, 2, 2, 2788, 2790, 7, 18, 2, 2, 2789,
	2780, 3, 2, 2, 2, 2789, 2788, 3, 2, 2, 2, 2789, 2790, 3, 2, 2, 2, 2790,
	2791, 3, 2, 2, 2, 2791, 2793, 7, 33, 2, 2, 2792, 2794, 5, 360, 181, 2,
	2793, 2792, 3, 2, 2, 2, 2793, 2794, 3, 2, 2, 2, 2794, 355, 3, 2, 2, 2,
	2795, 2796, 9, 39, 2, 2, 2796, 357, 3, 2, 2, 2, 2797, 2798, 7, 212, 2,
	2, 2798, 359, 3, 2, 2, 2, 2799, 2802, 7, 494, 2, 2, 2800, 2803, 5, 362,
	182, 2, 2801, 2803, 5, 202, 102, 2, 2802, 2800, 3, 2, 2, 2, 2802, 2801,
	3, 2, 2, 2, 2803, 361, 3, 2, 2, 2, 2804, 2806, 7, 32, 2, 2, 2805, 2807,
	5, 202, 102, 2, 2806, 2805, 3, 2, 2, 2, 2806, 2807, 3, 2, 2, 2, 2807, 2818,
	3, 2, 2, 2, 2808, 2809, 7, 500, 2, 2, 2809, 2810, 7, 118, 2, 2, 2810, 2815,
	5, 328, 165, 2, 2811, 2812, 7, 38, 2, 2, 2812, 2814, 5, 328, 165, 2, 2813,
	2811, 3, 2, 2, 2, 2814, 2817, 3, 2, 2, 2, 2815, 2813, 3, 2, 2, 2, 2815,
	2816, 3, 2, 2, 2, 2816, 2819, 3, 2, 2, 2, 2817, 2815, 3, 2, 2, 2, 2818,
	2808, 3, 2, 2, 2, 2818, 2819, 3, 2, 2, 2, 2819, 2821, 3, 2, 2, 2, 2820,
	2822, 5, 444, 223, 2, 2821, 2820, 3, 2, 2, 2, 2821, 2822, 3, 2, 2, 2, 2822,
	2824, 3, 2, 2, 2, 2823, 2825, 5, 364, 183, 2, 2824, 2823, 3, 2, 2, 2, 2824,
	2825, 3, 2, 2, 2, 2825, 2826, 3, 2, 2, 2, 2826, 2827, 7, 33, 2, 2, 2827,
	363, 3, 2, 2, 2, 2828, 2831, 9, 40, 2, 2, 2829, 2832, 5, 366, 184, 2, 2830,
	2832, 5, 370, 186, 2, 2831, 2829, 3, 2, 2, 2, 2831, 2830, 3, 2, 2, 2, 2832,
	365, 3, 2, 2, 2, 2833, 2834, 7, 173, 2, 2, 2834, 2846, 7, 600, 2, 2, 2835,
	2836, 7, 712, 2, 2, 2836, 2846, 7, 517, 2, 2, 2837, 2838, 7, 712, 2, 2,
	2838, 2846, 7, 270, 2, 2, 2839, 2840, 5, 328, 165, 2, 2840, 2841, 7, 517,
	2, 2, 2841, 2846, 3, 2, 2, 2, 2842, 2843, 5, 328, 165, 2, 2843, 2844, 7,
	270, 2, 2, 2844, 2846, 3, 2, 2, 2, 2845, 2833, 3, 2, 2, 2, 2845, 2835,
	3, 2, 2, 2, 2845, 2837, 3, 2, 2, 2, 2845, 2839, 3, 2, 2, 2, 2845, 2842,
	3, 2, 2, 2, 2846, 367, 3, 2, 2, 2, 2847, 2848, 5, 366, 184, 2, 2848, 369,
	3, 2, 2, 2, 2849, 2850, 7, 106, 2, 2, 2850, 2851, 5, 366, 184, 2, 2851,
	2852, 7, 89, 2, 2, 2852, 2853, 5, 368, 185, 2, 2853, 371, 3, 2, 2, 2, 2854,
	2867, 5, 376, 189, 2, 2855, 2867, 5, 378, 190, 2, 2856, 2867, 5, 390, 196,
	2, 2857, 2867, 5, 392, 197, 2, 2858, 2867, 5, 398, 200, 2, 2859, 2867,
	5, 400, 201, 2, 2860, 2867, 5, 402, 202, 2, 2861, 2867, 5, 404, 203, 2,
	2862, 2867, 5, 406, 204, 2, 2863, 2867, 5, 410, 206, 2, 2864, 2867, 5,
	408, 205, 2, 2865, 2867, 5, 374, 188, 2, 2866, 2854, 3, 2, 2, 2, 2866,
	2855, 3, 2, 2, 2, 2866, 2856, 3, 2, 2, 2, 2866, 2857, 3, 2, 2, 2, 2866,
	2858, 3, 2, 2, 2, 2866, 2859, 3, 2, 2, 2, 2866, 2860, 3, 2, 2, 2, 2866,
	2861, 3, 2, 2, 2, 2866, 2862, 3, 2, 2, 2, 2866, 2863, 3, 2, 2, 2, 2866,
	2864, 3, 2, 2, 2, 2866, 2865, 3, 2, 2, 2, 2867, 373, 3, 2, 2, 2, 2868,
	2871, 7, 177, 2, 2, 2869, 2870, 7, 32, 2, 2, 2870, 2872, 7, 33, 2, 2, 2871,
	2869, 3, 2, 2, 2, 2871, 2872, 3, 2, 2, 2, 2872, 375, 3, 2, 2, 2, 2873,
	2874, 7, 55, 2, 2, 2874, 2876, 7, 32, 2, 2, 2875, 2877, 5, 358, 180, 2,
	2876, 2875, 3, 2, 2, 2, 2876, 2877, 3, 2, 2, 2, 2877, 2887, 3, 2, 2, 2,
	2878, 2883, 5, 328, 165, 2, 2879, 2880, 7, 38, 2, 2, 2880, 2882, 5, 328,
	165, 2, 2881, 2879, 3, 2, 2, 2, 2882, 2885, 3, 2, 2, 2, 2883, 2881, 3,
	2, 2, 2, 2883, 2884, 3, 2, 2, 2, 2884, 2888, 3, 2, 2, 2, 2885, 2883, 3,
	2, 2, 2, 2886, 2888, 7, 18, 2, 2, 2887, 2878, 3, 2, 2, 2, 2887, 2886, 3,
	2, 2, 2, 2887, 2888, 3, 2, 2, 2, 2888, 2890, 3, 2, 2, 2, 2889, 2891, 5,
	444, 223, 2, 2890, 2889, 3, 2, 2, 2, 2890, 2891, 3, 2, 2, 2, 2891, 2894,
	3, 2, 2, 2, 2892, 2893, 7, 621, 2, 2, 2893, 2895, 5, 328, 165, 2, 2894,
	2892, 3, 2, 2, 2, 2894, 2895, 3, 2, 2, 2, 2895, 2896, 3, 2, 2, 2, 2896,
	2897, 7, 33, 2, 2, 2897, 377, 3, 2, 2, 2, 2898, 2899, 9, 41, 2, 2, 2899,
	2900, 7, 32, 2, 2, 2900, 2901, 7, 33, 2, 2, 2901, 2943, 5, 380, 191, 2,
	2902, 2903, 7, 465, 2, 2, 2903, 2904, 5, 346, 174, 2, 2904, 2905, 5, 380,
	191, 2, 2905, 2943, 3, 2, 2, 2, 2906, 2907, 9, 42, 2, 2, 2907, 2908, 7,
	32, 2, 2, 2908, 2910, 5, 328, 165, 2, 2909, 2911, 5, 382, 192, 2, 2910,
	2909, 3, 2, 2, 2, 2910, 2911, 3, 2, 2, 2, 2911, 2912, 3, 2, 2, 2, 2912,
	2914, 7, 33, 2, 2, 2913, 2915, 5, 384, 193, 2, 2914, 2913, 3, 2, 2, 2,
	2914, 2915, 3, 2, 2, 2, 2915, 2916, 3, 2, 2, 2, 2916, 2917, 5, 380, 191,
	2, 2917, 2943, 3, 2, 2, 2, 2918, 2919, 9, 43, 2, 2, 2919, 2920, 7, 32,
	2, 2, 2920, 2921, 5, 328, 165, 2, 2921, 2923, 7, 33, 2, 2, 2922, 2924,
	5, 384, 193, 2, 2923, 2922, 3, 2, 2, 2, 2923, 2924, 3, 2, 2, 2, 2924, 2925,
	3, 2, 2, 2, 2925, 2926, 5, 380, 191, 2, 2926, 2943, 3, 2, 2, 2, 2927, 2928,
	7, 464, 2, 2, 2928, 2929, 7, 32, 2, 2, 2929, 2930, 5, 328, 165, 2, 2930,
	2931, 7, 38, 2, 2, 2931, 2932, 5, 346, 174, 2, 2932, 2935, 7, 33, 2, 2,
	2933, 2934, 7, 277, 2, 2, 2934, 2936, 9, 44, 2, 2, 2935, 2933, 3, 2, 2,
	2, 2935, 2936, 3, 2, 2, 2, 2936, 2938, 3, 2, 2, 2, 2937, 2939, 5, 384,
	193, 2, 2938, 2937, 3, 2, 2, 2, 2938, 2939, 3, 2, 2, 2, 2939, 2940, 3,
	2, 2, 2, 2940, 2941, 5, 380, 191, 2, 2941, 2943, 3, 2, 2, 2, 2942, 2898,
	3, 2, 2, 2, 2942, 2902, 3, 2, 2, 2, 2942, 2906, 3, 2, 2, 2, 2942, 2918,
	3, 2, 2, 2, 2942, 2927, 3, 2, 2, 2, 2943, 379, 3, 2, 2, 2, 2944, 2947,
	7, 494, 2, 2, 2945, 2948, 5, 202, 102, 2, 2946, 2948, 5, 362, 182, 2, 2947,
	2945, 3, 2, 2, 2, 2947, 2946, 3, 2, 2, 2, 2948, 381, 3, 2, 2, 2, 2949,
	2950, 7, 38, 2, 2, 2950, 2953, 9, 45, 2, 2, 2951, 2952, 7, 38, 2, 2, 2952,
	2954, 5, 328, 165, 2, 2953, 2951, 3, 2, 2, 2, 2953, 2954, 3, 2, 2, 2, 2954,
	383, 3, 2, 2, 2, 2955, 2956, 9, 46, 2, 2, 2956, 2957, 7, 467, 2, 2, 2957,
	385, 3, 2, 2, 2, 2958, 2959, 7, 272, 2, 2, 2959, 2966, 7, 727, 2, 2, 2960,
	2966, 7, 534, 2, 2, 2961, 2966, 7, 257, 2, 2, 2962, 2966, 7, 421, 2, 2,
	2963, 2966, 7, 253, 2, 2, 2964, 2966, 7, 128, 2, 2, 2965, 2958, 3, 2, 2,
	2, 2965, 2960, 3, 2, 2, 2, 2965, 2961, 3, 2, 2, 2, 2965, 2962, 3, 2, 2,
	2, 2965, 2963, 3, 2, 2, 2, 2965, 2964, 3, 2, 2, 2, 2966, 387, 3, 2, 2,
	2, 2967, 2968, 9, 47, 2, 2, 2968, 389, 3, 2, 2, 2, 2969, 2970, 7, 56, 2,
	2, 2970, 2971, 7, 32, 2, 2, 2971, 2972, 5, 328, 165, 2, 2972, 2973, 7,
	92, 2, 2, 2973, 2974, 5, 448, 225, 2, 2974, 2975, 7, 33, 2, 2, 2975, 391,
	3, 2, 2, 2, 2976, 2977, 7, 167, 2, 2, 2977, 2978, 7, 32, 2, 2, 2978, 2979,
	5, 328, 165, 2, 2979, 2980, 7, 38, 2, 2, 2980, 2981, 5, 394, 198, 2, 2981,
	2982, 7, 33, 2, 2, 2982, 2991, 3, 2, 2, 2, 2983, 2984, 7, 167, 2, 2, 2984,
	2985, 7, 32, 2, 2, 2985, 2986, 5, 328, 165, 2, 2986, 2987, 7, 733, 2, 2,
	2987, 2988, 5, 242, 122, 2, 2988, 2989, 7, 33, 2, 2, 2989, 2991, 3, 2,
	2, 2, 2990, 2976, 3, 2, 2, 2, 2990, 2983, 3, 2, 2, 2, 2991, 393, 3, 2,
	2, 2, 2992, 2994, 7, 108, 2, 2, 2993, 2995, 5, 488, 245, 2, 2994, 2993,
	3, 2, 2, 2, 2994, 2995, 3, 2, 2, 2, 2995, 3038, 3, 2, 2, 2, 2996, 2998,
	7, 130, 2, 2, 2997, 2999, 5, 488, 245, 2, 2998, 2997, 3, 2, 2, 2, 2998,
	2999, 3, 2, 2, 2, 2999, 3001, 3, 2, 2, 2, 3000, 3002, 5, 462, 232, 2, 3001,
	3000, 3, 2, 2, 2, 3001, 3002, 3, 2, 2, 2, 3002, 3038, 3, 2, 2, 2, 3003,
	3005, 5, 396, 199, 2, 3004, 3006, 5, 488, 245, 2, 3005, 3004, 3, 2, 2,
	2, 3005, 3006, 3, 2, 2, 2, 3006, 3038, 3, 2, 2, 2, 3007, 3009, 7, 631,
	2, 2, 3008, 3010, 7, 326, 2, 2, 3009, 3008, 3, 2, 2, 2, 3009, 3010, 3,
	2, 2, 2, 3010, 3038, 3, 2, 2, 2, 3011, 3013, 7, 724, 2, 2, 3012, 3014,
	7, 326, 2, 2, 3013, 3012, 3, 2, 2, 2, 3013, 3014, 3, 2, 2, 2, 3014, 3038,
	3, 2, 2, 2, 3015, 3038, 7, 184, 2, 2, 3016, 3018, 7, 695, 2, 2, 3017, 3019,
	5, 460, 231, 2, 3018, 3017, 3, 2, 2, 2, 3018, 3019, 3, 2, 2, 2, 3019, 3038,
	3, 2, 2, 2, 3020, 3022, 7, 185, 2, 2, 3021, 3023, 5, 460, 231, 2, 3022,
	3021, 3, 2, 2, 2, 3022, 3023, 3, 2, 2, 2, 3023, 3038, 3, 2, 2, 2, 3024,
	3027, 7, 193, 2, 2, 3025, 3028, 5, 488, 245, 2, 3026, 3028, 5, 458, 230,
	2, 3027, 3025, 3, 2, 2, 2, 3027, 3026, 3, 2, 2, 2, 3027, 3028, 3, 2, 2,
	2, 3028, 3038, 3, 2, 2, 2, 3029, 3038, 7, 346, 2, 2, 3030, 3038, 7, 542,
	2, 2, 3031, 3032, 7, 216, 2, 2, 3032, 3038, 7, 518, 2, 2, 3033, 3035, 7,
	266, 2, 2, 3034, 3036, 5, 458, 230, 2, 3035, 3034, 3, 2, 2, 2, 3035, 3036,
	3, 2, 2, 2, 3036, 3038, 3, 2, 2, 2, 3037, 2992, 3, 2, 2, 2, 3037, 2996,
	3, 2, 2, 2, 3037, 3003, 3, 2, 2, 2, 3037, 3007, 3, 2, 2, 2, 3037, 3011,
	3, 2, 2, 2, 3037, 3015, 3, 2, 2, 2, 3037, 3016, 3, 2, 2, 2, 3037, 3020,
	3, 2, 2, 2, 3037, 3024, 3, 2, 2, 2, 3037, 3029, 3, 2, 2, 2, 3037, 3030,
	3, 2, 2, 2, 3037, 3031, 3, 2, 2, 2, 3037, 3033, 3, 2, 2, 2, 3038, 395,
	3, 2, 2, 2, 3039, 3043, 7, 450, 2, 2, 3040, 3041, 7, 448, 2, 2, 3041, 3043,
	7, 130, 2, 2, 3042, 3039, 3, 2, 2, 2, 3042, 3040, 3, 2, 2, 2, 3043, 397,
	3, 2, 2, 2, 3044, 3045, 7, 57, 2, 2, 3045, 3046, 7, 32, 2, 2, 3046, 3047,
	5, 328, 165, 2, 3047, 3048, 7, 313, 2, 2, 3048, 3049, 5, 328, 165, 2, 3049,
	3050, 7, 33, 2, 2, 3050, 399, 3, 2, 2, 2, 3051, 3052, 9, 48, 2, 2, 3052,
	3053, 7, 32, 2, 2, 3053, 3054, 5, 328, 165, 2, 3054, 3055, 7, 277, 2, 2,
	3055, 3058, 7, 776, 2, 2, 3056, 3057, 7, 272, 2, 2, 3057, 3059, 7, 776,
	2, 2, 3058, 3056, 3, 2, 2, 2, 3058, 3059, 3, 2, 2, 2, 3059, 3060, 3, 2,
	2, 2, 3060, 3061, 7, 33, 2, 2, 3061, 3074, 3, 2, 2, 2, 3062, 3063, 9, 48,
	2, 2, 3063, 3064, 7, 32, 2, 2, 3064, 3065, 5, 328, 165, 2, 3065, 3066,
	7, 38, 2, 2, 3066, 3069, 7, 776, 2, 2, 3067, 3068, 7, 38, 2, 2, 3068, 3070,
	7, 776, 2, 2, 3069, 3067, 3, 2, 2, 2, 3069, 3070, 3, 2, 2, 2, 3070, 3071,
	3, 2, 2, 2, 3071, 3072, 7, 33, 2, 2, 3072, 3074, 3, 2, 2, 2, 3073, 3051,
	3, 2, 2, 2, 3073, 3062, 3, 2, 2, 2, 3074, 401, 3, 2, 2, 2, 3075, 3076,
	7, 60, 2, 2, 3076, 3077, 7, 32, 2, 2, 3077, 3078, 5, 202, 102, 2, 3078,
	3079, 7, 277, 2, 2, 3079, 3080, 5, 328, 165, 2, 3080, 3081, 7, 33, 2, 2,
	3081, 403, 3, 2, 2, 2, 3082, 3083, 7, 130, 2, 2, 3083, 3084, 7, 32, 2,
	2, 3084, 3089, 5, 328, 165, 2, 3085, 3086, 7, 38, 2, 2, 3086, 3088, 5,
	328, 165, 2, 3087, 3085, 3, 2, 2, 2, 3088, 3091, 3, 2, 2, 2, 3089, 3087,
	3, 2, 2, 2, 3089, 3090, 3, 2, 2, 2, 3090, 3094, 3, 2, 2, 2, 3091, 3089,
	3, 2, 2, 2, 3092, 3093, 7, 733, 2, 2, 3093, 3095, 5, 242, 122, 2, 3094,
	3092, 3, 2, 2, 2, 3094, 3095, 3, 2, 2, 2, 3095, 3096, 3, 2, 2, 2, 3096,
	3097, 7, 33, 2, 2, 3097, 405, 3, 2, 2, 2, 3098, 3099, 7, 61, 2, 2, 3099,
	3105, 7, 32, 2, 2, 3100, 3102, 9, 49, 2, 2, 3101, 3103, 5, 184, 93, 2,
	3102, 3101, 3, 2, 2, 2, 3102, 3103, 3, 2, 2, 2, 3103, 3104, 3, 2, 2, 2,
	3104, 3106, 7, 277, 2, 2, 3105, 3100, 3, 2, 2, 2, 3105, 3106, 3, 2, 2,
	2, 3106, 3107, 3, 2, 2, 2, 3107, 3108, 5, 184, 93, 2, 3108, 3109, 7, 33,
	2, 2, 3109, 3121, 3, 2, 2, 2, 3110, 3111, 7, 61, 2, 2, 3111, 3115, 7, 32,
	2, 2, 3112, 3113, 5, 184, 93, 2, 3113, 3114, 7, 277, 2, 2, 3114, 3116,
	3, 2, 2, 2, 3115, 3112, 3, 2, 2, 2, 3115, 3116, 3, 2, 2, 2, 3116, 3117,
	3, 2, 2, 2, 3117, 3118, 5, 184, 93, 2, 3118, 3119, 7, 33, 2, 2, 3119, 3121,
	3, 2, 2, 2, 3120, 3098, 3, 2, 2, 2, 3120, 3110, 3, 2, 2, 2, 3121, 407,
	3, 2, 2, 2, 3122, 3123, 7, 739, 2, 2, 3123, 3124, 7, 32, 2, 2, 3124, 3125,
	5, 350, 176, 2, 3125, 3126, 7, 33, 2, 2, 3126, 409, 3, 2, 2, 2, 3127, 3128,
	7, 752, 2, 2, 3128, 3129, 7, 32, 2, 2, 3129, 3132, 5, 328, 165, 2, 3130,
	3131, 7, 92, 2, 2, 3131, 3133, 5, 448, 225, 2, 3132, 3130, 3, 2, 2, 2,
	3132, 3133, 3, 2, 2, 2, 3133, 3135, 3, 2, 2, 2, 3134, 3136, 5, 412, 207,
	2, 3135, 3134, 3, 2, 2, 2, 3135, 3136, 3, 2, 2, 2, 3136, 3137, 3, 2, 2,
	2, 3137, 3138, 7, 33, 2, 2, 3138, 411, 3, 2, 2, 2, 3139, 3151, 7, 364,
	2, 2, 3140, 3145, 5, 414, 208, 2, 3141, 3142, 7, 38, 2, 2, 3142, 3144,
	5, 414, 208, 2, 3143, 3141, 3, 2, 2, 2, 3144, 3147, 3, 2, 2, 2, 3145, 3143,
	3, 2, 2, 2, 3145, 3146, 3, 2, 2, 2, 3146, 3152, 3, 2, 2, 2, 3147, 3145,
	3, 2, 2, 2, 3148, 3149, 7, 776, 2, 2, 3149, 3150, 7, 17, 2, 2, 3150, 3152,
	7, 776, 2, 2, 3151, 3140, 3, 2, 2, 2, 3151, 3148, 3, 2, 2, 2, 3152, 413,
	3, 2, 2, 2, 3153, 3155, 7, 776, 2, 2, 3154, 3156, 5, 484, 243, 2, 3155,
	3154, 3, 2, 2, 2, 3155, 3156, 3, 2, 2, 2, 3156, 3158, 3, 2, 2, 2, 3157,
	3159, 7, 591, 2, 2, 3158, 3157, 3, 2, 2, 2, 3158, 3159, 3, 2, 2, 2, 3159,
	415, 3, 2, 2, 2, 3160, 3163, 5, 420, 211, 2, 3161, 3163, 5, 418, 210, 2,
	3162, 3160, 3, 2, 2, 2, 3162, 3161, 3, 2, 2, 2, 3163, 417, 3, 2, 2, 2,
	3164, 3178, 7, 174, 2, 2, 3165, 3171, 7, 175, 2, 2, 3166, 3168, 7, 32,
	2, 2, 3167, 3169, 7, 776, 2, 2, 3168, 3167, 3, 2, 2, 2, 3168, 3169, 3,
	2, 2, 2, 3169, 3170, 3, 2, 2, 2, 3170, 3172, 7, 33, 2, 2, 3171, 3166, 3,
	2, 2, 2, 3171, 3172, 3, 2, 2, 2, 3172, 3178, 3, 2, 2, 2, 3173, 3178, 7,
	176, 2, 2, 3174, 3178, 7, 62, 2, 2, 3175, 3178, 7, 373, 2, 2, 3176, 3178,
	7, 374, 2, 2, 3177, 3164, 3, 2, 2, 2, 3177, 3165, 3, 2, 2, 2, 3177, 3173,
	3, 2, 2, 2, 3177, 3174, 3, 2, 2, 2, 3177, 3175, 3, 2, 2, 2, 3177, 3176,
	3, 2, 2, 2, 3178, 419, 3, 2, 2, 2, 3179, 3180, 5, 422, 212, 2, 3180, 3190,
	7, 32, 2, 2, 3181, 3186, 5, 328, 165, 2, 3182, 3183, 7, 38, 2, 2, 3183,
	3185, 5, 328, 165, 2, 3184, 3182, 3, 2, 2, 2, 3185, 3188, 3, 2, 2, 2, 3186,
	3184, 3, 2, 2, 2, 3186, 3187, 3, 2, 2, 2, 3187, 3191, 3, 2, 2, 2, 3188,
	3186, 3, 2, 2, 2, 3189, 3191, 7, 18, 2, 2, 3190, 3181, 3, 2, 2, 2, 3190,
	3189, 3, 2, 2, 2, 3190, 3191, 3, 2, 2, 2, 3191, 3192, 3, 2, 2, 2, 3192,
	3193, 7, 33, 2, 2, 3193, 421, 3, 2, 2, 2, 3194, 3224, 7, 309, 2, 2, 3195,
	3224, 7, 373, 2, 2, 3196, 3224, 7, 374, 2, 2, 3197, 3224, 7, 564, 2, 2,
	3198, 3224, 7, 333, 2, 2, 3199, 3224, 7, 436, 2, 2, 3200, 3224, 7, 181,
	2, 2, 3201, 3224, 7, 608, 2, 2, 3202, 3224, 7, 362, 2, 2, 3203, 3224, 7,
	593, 2, 2, 3204, 3224, 7, 184, 2, 2, 3205, 3224, 7, 186, 2, 2, 3206, 3224,
	7, 284, 2, 2, 3207, 3224, 7, 369, 2, 2, 3208, 3224, 7, 441, 2, 2, 3209,
	3224, 7, 442, 2, 2, 3210, 3224, 7, 443, 2, 2, 3211, 3224, 7, 513, 2, 2,
	3212, 3224, 7, 514, 2, 2, 3213, 3224, 7, 695, 2, 2, 3214, 3224, 7, 696,
	2, 2, 3215, 3224, 7, 697, 2, 2, 3216, 3224, 7, 698, 2, 2, 3217, 3224, 7,
	184, 2, 2, 3218, 3224, 7, 176, 2, 2, 3219, 3224, 7, 174, 2, 2, 3220, 3224,
	7, 175, 2, 2, 3221, 3224, 7, 736, 2, 2, 3222, 3224, 5, 202, 102, 2, 3223,
	3194, 3, 2, 2, 2, 3223, 3195, 3, 2, 2, 2, 3223, 3196, 3, 2, 2, 2, 3223,
	3197, 3, 2, 2, 2, 3223, 3198, 3, 2, 2, 2, 3223, 3199, 3, 2, 2, 2, 3223,
	3200, 3, 2, 2, 2, 3223, 3201, 3, 2, 2, 2, 3223, 3202, 3, 2, 2, 2, 3223,
	3203, 3, 2, 2, 2, 3223, 3204, 3, 2, 2, 2, 3223, 3205, 3, 2, 2, 2, 3223,
	3206, 3, 2, 2, 2, 3223, 3207, 3, 2, 2, 2, 3223, 3208, 3, 2, 2, 2, 3223,
	3209, 3, 2, 2, 2, 3223, 3210, 3, 2, 2, 2, 3223, 3211, 3, 2, 2, 2, 3223,
	3212, 3, 2, 2, 2, 3223, 3213, 3, 2, 2, 2, 3223, 3214, 3, 2, 2, 2, 3223,
	3215, 3, 2, 2, 2, 3223, 3216, 3, 2, 2, 2, 3223, 3217, 3, 2, 2, 2, 3223,
	3218, 3, 2, 2, 2, 3223, 3219, 3, 2, 2, 2, 3223, 3220, 3, 2, 2, 2, 3223,
	3221, 3, 2, 2, 2, 3223, 3222, 3, 2, 2, 2, 3224, 423, 3, 2, 2, 2, 3225,
	3231, 7, 413, 2, 2, 3226, 3232, 5, 350, 176, 2, 3227, 3228, 7, 32, 2, 2,
	3228, 3229, 5, 350, 176, 2, 3229, 3230, 7, 33, 2, 2, 3230, 3232, 3, 2,
	2, 2, 3231, 3226, 3, 2, 2, 2, 3231, 3227, 3, 2, 2, 2, 3232, 3233, 3, 2,
	2, 2, 3233, 3234, 7, 82, 2, 2, 3234, 3235, 7, 32, 2, 2, 3235, 3237, 5,
	328, 165, 2, 3236, 3238, 5, 426, 214, 2, 3237, 3236, 3, 2, 2, 2, 3237,
	3238, 3, 2, 2, 2, 3238, 3239, 3, 2, 2, 2, 3239, 3240, 7, 33, 2, 2, 3240,
	425, 3, 2, 2, 2, 3241, 3242, 7, 313, 2, 2, 3242, 3243, 7, 449, 2, 2, 3243,
	3244, 7, 354, 2, 2, 3244, 3259, 7, 437, 2, 2, 3245, 3246, 7, 313, 2, 2,
	3246, 3247, 7, 449, 2, 2, 3247, 3248, 7, 354, 2, 2, 3248, 3249, 7, 437,
	2, 2, 3249, 3250, 7, 757, 2, 2, 3250, 3251, 7, 533, 2, 2, 3251, 3259, 7,
	249, 2, 2, 3252, 3253, 7, 313, 2, 2, 3253, 3254, 7, 114, 2, 2, 3254, 3259,
	7, 437, 2, 2, 3255, 3256, 7, 757, 2, 2, 3256, 3257, 7, 533, 2, 2, 3257,
	3259, 7, 249, 2, 2, 3258, 3241, 3, 2, 2, 2, 3258, 3245, 3, 2, 2, 2, 3258,
	3252, 3, 2, 2, 2, 3258, 3255, 3, 2, 2, 2, 3259, 427, 3, 2, 2, 2, 3260,
	3262, 7, 124, 2, 2, 3261, 3263, 5, 346, 174, 2, 3262, 3261, 3, 2, 2, 2,
	3262, 3263, 3, 2, 2, 2, 3263, 3265, 3, 2, 2, 2, 3264, 3266, 5, 434, 218,
	2, 3265, 3264, 3, 2, 2, 2, 3266, 3267, 3, 2, 2, 2, 3267, 3265, 3, 2, 2,
	2, 3267, 3268, 3, 2, 2, 2, 3268, 3270, 3, 2, 2, 2, 3269, 3271, 5, 436,
	219, 2, 3270, 3269, 3, 2, 2, 2, 3270, 3271, 3, 2, 2, 2, 3271, 3272, 3,
	2, 2, 2, 3272, 3273, 7, 229, 2, 2, 3273, 429, 3, 2, 2, 2, 3274, 3275, 5,
	328, 165, 2, 3275, 431, 3, 2, 2, 2, 3276, 3277, 7, 776, 2, 2, 3277, 433,
	3, 2, 2, 2, 3278, 3279, 7, 753, 2, 2, 3279, 3280, 5, 328, 165, 2, 3280,
	3281, 7, 692, 2, 2, 3281, 3282, 5, 328, 165, 2, 3282, 435, 3, 2, 2, 2,
	3283, 3284, 7, 223, 2, 2, 3284, 3285, 5, 328, 165, 2, 3285, 437, 3, 2,
	2, 2, 3286, 3287, 7, 333, 2, 2, 3287, 3288, 5, 440, 221, 2, 3288, 439,
	3, 2, 2, 2, 3289, 3290, 5, 328, 165, 2, 3290, 3291, 5, 442, 222, 2, 3291,
	441, 3, 2, 2, 2, 3292, 3293, 9, 50, 2, 2, 3293, 443, 3, 2, 2, 2, 3294,
	3295, 7, 487, 2, 2, 3295, 3296, 7, 118, 2, 2, 3296, 3301, 5, 446, 224,
	2, 3297, 3298, 7, 38, 2, 2, 3298, 3300, 5, 446, 224, 2, 3299, 3297, 3,
	2, 2, 2, 3300, 3303, 3, 2, 2, 2, 3301, 3299, 3, 2, 2, 2, 3301, 3302, 3,
	2, 2, 2, 3302, 445, 3, 2, 2, 2, 3303, 3301, 3, 2, 2, 2, 3304, 3307, 5,
	188, 95, 2, 3305, 3307, 5, 328, 165, 2, 3306, 3304, 3, 2, 2, 2, 3306, 3305,
	3, 2, 2, 2, 3307, 3309, 3, 2, 2, 2, 3308, 3310, 5, 484, 243, 2, 3309, 3308,
	3, 2, 2, 2, 3309, 3310, 3, 2, 2, 2, 3310, 447, 3, 2, 2, 2, 3311, 3313,
	9, 51, 2, 2, 3312, 3314, 5, 488, 245, 2, 3313, 3312, 3, 2, 2, 2, 3313,
	3314, 3, 2, 2, 2, 3314, 3316, 3, 2, 2, 2, 3315, 3317, 5, 456, 229, 2, 3316,
	3315, 3, 2, 2, 2, 3316, 3317, 3, 2, 2, 2, 3317, 3465, 3, 2, 2, 2, 3318,
	3324, 7, 542, 2, 2, 3319, 3321, 7, 216, 2, 2, 3320, 3322, 7, 518, 2, 2,
	3321, 3320, 3, 2, 2, 2, 3321, 3322, 3, 2, 2, 2, 3322, 3324, 3, 2, 2, 2,
	3323, 3318, 3, 2, 2, 2, 3323, 3319, 3, 2, 2, 2, 3324, 3326, 3, 2, 2, 2,
	3325, 3327, 5, 458, 230, 2, 3326, 3325, 3, 2, 2, 2, 3326, 3327, 3, 2, 2,
	2, 3327, 3329, 3, 2, 2, 2, 3328, 3330, 5, 456, 229, 2, 3329, 3328, 3, 2,
	2, 2, 3329, 3330, 3, 2, 2, 2, 3330, 3465, 3, 2, 2, 2, 3331, 3334, 9, 52,
	2, 2, 3332, 3335, 5, 488, 245, 2, 3333, 3335, 5, 458, 230, 2, 3334, 3332,
	3, 2, 2, 2, 3334, 3333, 3, 2, 2, 2, 3334, 3335, 3, 2, 2, 2, 3335, 3337,
	3, 2, 2, 2, 3336, 3338, 5, 456, 229, 2, 3337, 3336, 3, 2, 2, 2, 3337, 3338,
	3, 2, 2, 2, 3338, 3465, 3, 2, 2, 2, 3339, 3341, 7, 110, 2, 2, 3340, 3342,
	5, 488, 245, 2, 3341, 3340, 3, 2, 2, 2, 3341, 3342, 3, 2, 2, 2, 3342, 3465,
	3, 2, 2, 2, 3343, 3465, 9, 53, 2, 2, 3344, 3346, 7, 130, 2, 2, 3345, 3347,
	5, 488, 245, 2, 3346, 3345, 3, 2, 2, 2, 3346, 3347, 3, 2, 2, 2, 3347, 3349,
	3, 2, 2, 2, 3348, 3350, 5, 462, 232, 2, 3349, 3348, 3, 2, 2, 2, 3349, 3350,
	3, 2, 2, 2, 3350, 3465, 3, 2, 2, 2, 3351, 3355, 7, 450, 2, 2, 3352, 3353,
	7, 448, 2, 2, 3353, 3355, 7, 130, 2, 2, 3354, 3351, 3, 2, 2, 2, 3354, 3352,
	3, 2, 2, 2, 3355, 3357, 3, 2, 2, 2, 3356, 3358, 5, 488, 245, 2, 3357, 3356,
	3, 2, 2, 2, 3357, 3358, 3, 2, 2, 2, 3358, 3360, 3, 2, 2, 2, 3359, 3361,
	7, 108, 2, 2, 3360, 3359, 3, 2, 2, 2, 3360, 3361, 3, 2, 2, 2, 3361, 3465,
	3, 2, 2, 2, 3362, 3465, 7, 631, 2, 2, 3363, 3365, 7, 108, 2, 2, 3364, 3366,
	5, 488, 245, 2, 3365, 3364, 3, 2, 2, 2, 3365, 3366, 3, 2, 2, 2, 3366, 3465,
	3, 2, 2, 2, 3367, 3368, 7, 130, 2, 2, 3368, 3371, 7, 744, 2, 2, 3369, 3371,
	7, 741, 2, 2, 3370, 3367, 3, 2, 2, 2, 3370, 3369, 3, 2, 2, 2, 3371, 3372,
	3, 2, 2, 2, 3372, 3374, 5, 488, 245, 2, 3373, 3375, 5, 462, 232, 2, 3374,
	3373, 3, 2, 2, 2, 3374, 3375, 3, 2, 2, 2, 3375, 3465, 3, 2, 2, 2, 3376,
	3377, 7, 448, 2, 2, 3377, 3387, 7, 741, 2, 2, 3378, 3387, 7, 470, 2, 2,
	3379, 3380, 7, 450, 2, 2, 3380, 3387, 7, 741, 2, 2, 3381, 3382, 7, 448,
	2, 2, 3382, 3383, 7, 130, 2, 2, 3383, 3387, 7, 744, 2, 2, 3384, 3385, 7,
	450, 2, 2, 3385, 3387, 7, 744, 2, 2, 3386, 3376, 3, 2, 2, 2, 3386, 3378,
	3, 2, 2, 2, 3386, 3379, 3, 2, 2, 2, 3386, 3381, 3, 2, 2, 2, 3386, 3384,
	3, 2, 2, 2, 3387, 3388, 3, 2, 2, 2, 3388, 3390, 5, 488, 245, 2, 3389, 3391,
	7, 108, 2, 2, 3390, 3389, 3, 2, 2, 2, 3390, 3391, 3, 2, 2, 2, 3391, 3465,
	3, 2, 2, 2, 3392, 3394, 7, 740, 2, 2, 3393, 3395, 5, 488, 245, 2, 3394,
	3393, 3, 2, 2, 2, 3394, 3395, 3, 2, 2, 2, 3395, 3465, 3, 2, 2, 2, 3396,
	3398, 7, 767, 2, 2, 3397, 3399, 5, 488, 245, 2, 3398, 3397, 3, 2, 2, 2,
	3398, 3399, 3, 2, 2, 2, 3399, 3401, 3, 2, 2, 2, 3400, 3402, 5, 456, 229,
	2, 3401, 3400, 3, 2, 2, 2, 3401, 3402, 3, 2, 2, 2, 3402, 3465, 3, 2, 2,
	2, 3403, 3465, 7, 184, 2, 2, 3404, 3406, 7, 695, 2, 2, 3405, 3407, 5, 460,
	231, 2, 3406, 3405, 3, 2, 2, 2, 3406, 3407, 3, 2, 2, 2, 3407, 3465, 3,
	2, 2, 2, 3408, 3465, 7, 724, 2, 2, 3409, 3411, 7, 696, 2, 2, 3410, 3412,
	5, 460, 231, 2, 3411, 3410, 3, 2, 2, 2, 3411, 3412, 3, 2, 2, 2, 3412, 3465,
	3, 2, 2, 2, 3413, 3415, 7, 185, 2, 2, 3414, 3416, 5, 460, 231, 2, 3415,
	3414, 3, 2, 2, 2, 3415, 3416, 3, 2, 2, 2, 3416, 3465, 3, 2, 2, 2, 3417,
	3465, 7, 699, 2, 2, 3418, 3420, 7, 111, 2, 2, 3419, 3421, 5, 488, 245,
	2, 3420, 3419, 3, 2, 2, 2, 3420, 3421, 3, 2, 2, 2, 3421, 3465, 3, 2, 2,
	2, 3422, 3465, 9, 54, 2, 2, 3423, 3424, 7, 380, 2, 2, 3424, 3465, 7, 740,
	2, 2, 3425, 3429, 7, 380, 2, 2, 3426, 3427, 7, 130, 2, 2, 3427, 3430, 7,
	744, 2, 2, 3428, 3430, 7, 741, 2, 2, 3429, 3426, 3, 2, 2, 2, 3429, 3428,
	3, 2, 2, 2, 3429, 3430, 3, 2, 2, 2, 3430, 3432, 3, 2, 2, 2, 3431, 3433,
	5, 462, 232, 2, 3432, 3431, 3, 2, 2, 2, 3432, 3433, 3, 2, 2, 2, 3433, 3465,
	3, 2, 2, 2, 3434, 3436, 7, 701, 2, 2, 3435, 3437, 5, 462, 232, 2, 3436,
	3435, 3, 2, 2, 2, 3436, 3437, 3, 2, 2, 2, 3437, 3465, 3, 2, 2, 2, 3438,
	3440, 7, 690, 2, 2, 3439, 3441, 5, 488, 245, 2, 3440, 3439, 3, 2, 2, 2,
	3440, 3441, 3, 2, 2, 2, 3441, 3443, 3, 2, 2, 2, 3442, 3444, 5, 462, 232,
	2, 3443, 3442, 3, 2, 2, 2, 3443, 3444, 3, 2, 2, 2, 3444, 3465, 3, 2, 2,
	2, 3445, 3447, 7, 424, 2, 2, 3446, 3448, 5, 462, 232, 2, 3447, 3446, 3,
	2, 2, 2, 3447, 3448, 3, 2, 2, 2, 3448, 3465, 3, 2, 2, 2, 3449, 3451, 7,
	382, 2, 2, 3450, 3452, 5, 462, 232, 2, 3451, 3450, 3, 2, 2, 2, 3451, 3452,
	3, 2, 2, 2, 3452, 3465, 3, 2, 2, 2, 3453, 3454, 7, 235, 2, 2, 3454, 3456,
	5, 450, 226, 2, 3455, 3457, 5, 462, 232, 2, 3456, 3455, 3, 2, 2, 2, 3456,
	3457, 3, 2, 2, 2, 3457, 3465, 3, 2, 2, 2, 3458, 3459, 7, 626, 2, 2, 3459,
	3461, 5, 450, 226, 2, 3460, 3462, 5, 462, 232, 2, 3461, 3460, 3, 2, 2,
	2, 3461, 3462, 3, 2, 2, 2, 3462, 3465, 3, 2, 2, 2, 3463, 3465, 9, 55, 2,
	2, 3464, 3311, 3, 2, 2, 2, 3464, 3323, 3, 2, 2, 2, 3464, 3331, 3, 2, 2,
	2, 3464, 3339, 3, 2, 2, 2, 3464, 3343, 3, 2, 2, 2, 3464, 3344, 3, 2, 2,
	2, 3464, 3354, 3, 2, 2, 2, 3464, 3362, 3, 2, 2, 2, 3464, 3363, 3, 2, 2,
	2, 3464, 3370, 3, 2, 2, 2, 3464, 3386, 3, 2, 2, 2, 3464, 3392, 3, 2, 2,
	2, 3464, 3396, 3, 2, 2, 2, 3464, 3403, 3, 2, 2, 2, 3464, 3404, 3, 2, 2,
	2, 3464, 3408, 3, 2, 2, 2, 3464, 3409, 3, 2, 2, 2, 3464, 3413, 3, 2, 2,
	2, 3464, 3417, 3, 2, 2, 2, 3464, 3418, 3, 2, 2, 2, 3464, 3422, 3, 2, 2,
	2, 3464, 3423, 3, 2, 2, 2, 3464, 3425, 3, 2, 2, 2, 3464, 3434, 3, 2, 2,
	2, 3464, 3438, 3, 2, 2, 2, 3464, 3445, 3, 2, 2, 2, 3464, 3449, 3, 2, 2,
	2, 3464, 3453, 3, 2, 2, 2, 3464, 3458, 3, 2, 2, 2, 3464, 3463, 3, 2, 2,
	2, 3465, 449, 3, 2, 2, 2, 3466, 3467, 7, 32, 2, 2, 3467, 3472, 5, 452,
	227, 2, 3468, 3469, 7, 38, 2, 2, 3469, 3471, 5, 452, 227, 2, 3470, 3468,
	3, 2, 2, 2, 3471, 3474, 3, 2, 2, 2, 3472, 3470, 3, 2, 2, 2, 3472, 3473,
	3, 2, 2, 2, 3473, 3475, 3, 2, 2, 2, 3474, 3472, 3, 2, 2, 2, 3475, 3476,
	7, 33, 2, 2, 3476, 451, 3, 2, 2, 2, 3477, 3481, 5, 184, 93, 2, 3478, 3481,
	7, 780, 2, 2, 3479, 3481, 7, 781, 2, 2, 3480, 3477, 3, 2, 2, 2, 3480, 3478,
	3, 2, 2, 2, 3480, 3479, 3, 2, 2, 2, 3481, 453, 3, 2, 2, 2, 3482, 3485,
	5, 184, 93, 2, 3483, 3485, 7, 780, 2, 2, 3484, 3482, 3, 2, 2, 2, 3484,
	3483, 3, 2, 2, 2, 3485, 455, 3, 2, 2, 2, 3486, 3488, 9, 56, 2, 2, 3487,
	3486, 3, 2, 2, 2, 3488, 3489, 3, 2, 2, 2, 3489, 3487, 3, 2, 2, 2, 3489,
	3490, 3, 2, 2, 2, 3490, 457, 3, 2, 2, 2, 3491, 3492, 7, 32, 2, 2, 3492,
	3493, 7, 776, 2, 2, 3493, 3494, 7, 38, 2, 2, 3494, 3495, 7, 776, 2, 2,
	3495, 3496, 7, 33, 2, 2, 3496, 459, 3, 2, 2, 2, 3497, 3498, 7, 32, 2, 2,
	3498, 3499, 7, 776, 2, 2, 3499, 3500, 7, 33, 2, 2, 3500, 461, 3, 2, 2,
	2, 3501, 3516, 5, 464, 233, 2, 3502, 3516, 5, 466, 234, 2, 3503, 3516,
	7, 119, 2, 2, 3504, 3505, 5, 468, 235, 2, 3505, 3507, 5, 242, 122, 2, 3506,
	3508, 7, 108, 2, 2, 3507, 3506, 3, 2, 2, 2, 3507, 3508, 3, 2, 2, 2, 3508,
	3516, 3, 2, 2, 2, 3509, 3513, 7, 108, 2, 2, 3510, 3511, 5, 468, 235, 2,
	3511, 3512, 5, 242, 122, 2, 3512, 3514, 3, 2, 2, 2, 3513, 3510, 3, 2, 2,
	2, 3513, 3514, 3, 2, 2, 2, 3514, 3516, 3, 2, 2, 2, 3515, 3501, 3, 2, 2,
	2, 3515, 3502, 3, 2, 2, 2, 3515, 3503, 3, 2, 2, 2, 3515, 3504, 3, 2, 2,
	2, 3515, 3509, 3, 2, 2, 2, 3516, 463, 3, 2, 2, 2, 3517, 3519, 7, 94, 2,
	2, 3518, 3520, 7, 108, 2, 2, 3519, 3518, 3, 2, 2, 2, 3519, 3520, 3, 2,
	2, 2, 3520, 3524, 3, 2, 2, 2, 3521, 3522, 7, 108, 2, 2, 3522, 3524, 7,
	94, 2, 2, 3523, 3517, 3, 2, 2, 2, 3523, 3521, 3, 2, 2, 2, 3524, 465, 3,
	2, 2, 2, 3525, 3527, 7, 718, 2, 2, 3526, 3528, 7, 108, 2, 2, 3527, 3526,
	3, 2, 2, 2, 3527, 3528, 3, 2, 2, 2, 3528, 3532, 3, 2, 2, 2, 3529, 3530,
	7, 108, 2, 2, 3530, 3532, 7, 718, 2, 2, 3531, 3525, 3, 2, 2, 2, 3531, 3529,
	3, 2, 2, 2, 3532, 467, 3, 2, 2, 2, 3533, 3534, 9, 57, 2, 2, 3534, 3537,
	7, 626, 2, 2, 3535, 3537, 7, 132, 2, 2, 3536, 3533, 3, 2, 2, 2, 3536, 3535,
	3, 2, 2, 2, 3537, 469, 3, 2, 2, 2, 3538, 3540, 7, 195, 2, 2, 3539, 3538,
	3, 2, 2, 2, 3539, 3540, 3, 2, 2, 2, 3540, 3541, 3, 2, 2, 2, 3541, 3543,
	7, 142, 2, 2, 3542, 3544, 7, 25, 2, 2, 3543, 3542, 3, 2, 2, 2, 3543, 3544,
	3, 2, 2, 2, 3544, 3545, 3, 2, 2, 2, 3545, 3546, 5, 200, 101, 2, 3546, 471,
	3, 2, 2, 2, 3547, 3549, 7, 195, 2, 2, 3548, 3547, 3, 2, 2, 2, 3548, 3549,
	3, 2, 2, 2, 3549, 3550, 3, 2, 2, 2, 3550, 3552, 7, 228, 2, 2, 3551, 3553,
	7, 25, 2, 2, 3552, 3551, 3, 2, 2, 2, 3552, 3553, 3, 2, 2, 2, 3553, 3554,
	3, 2, 2, 2, 3554, 3555, 5, 184, 93, 2, 3555, 473, 3, 2, 2, 2, 3556, 3558,
	7, 195, 2, 2, 3557, 3556, 3, 2, 2, 2, 3557, 3558, 3, 2, 2, 2, 3558, 3559,
	3, 2, 2, 2, 3559, 3561, 5, 468, 235, 2, 3560, 3562, 7, 25, 2, 2, 3561,
	3560, 3, 2, 2, 2, 3561, 3562, 3, 2, 2, 2, 3562, 3563, 3, 2, 2, 2, 3563,
	3564, 5, 242, 122, 2, 3564, 475, 3, 2, 2, 2, 3565, 3569, 5, 182, 92, 2,
	3566, 3567, 9, 58, 2, 2, 3567, 3569, 5, 188, 95, 2, 3568, 3565, 3, 2, 2,
	2, 3568, 3566, 3, 2, 2, 2, 3569, 477, 3, 2, 2, 2, 3570, 3576, 9, 59, 2,
	2, 3571, 3573, 7, 32, 2, 2, 3572, 3574, 7, 776, 2, 2, 3573, 3572, 3, 2,
	2, 2, 3573, 3574, 3, 2, 2, 2, 3574, 3575, 3, 2, 2, 2, 3575, 3577, 7, 33,
	2, 2, 3576, 3571, 3, 2, 2, 2, 3576, 3577, 3, 2, 2, 2, 3577, 479, 3, 2,
	2, 2, 3578, 3579, 9, 60, 2, 2, 3579, 481, 3, 2, 2, 2, 3580, 3581, 9, 61,
	2, 2, 3581, 483, 3, 2, 2, 2, 3582, 3583, 9, 62, 2, 2, 3583, 485, 3, 2,
	2, 2, 3584, 3585, 9, 12, 2, 2, 3585, 487, 3, 2, 2, 2, 3586, 3587, 7, 32,
	2, 2, 3587, 3588, 7, 776, 2, 2, 3588, 3589, 7, 33, 2, 2, 3589, 489, 3,
	2, 2, 2, 3590, 3591, 5, 468, 235, 2, 3591, 3592, 5, 242, 122, 2, 3592,
	491, 3, 2, 2, 2, 3593, 3594, 7, 142, 2, 2, 3594, 3595, 5, 200, 101, 2,
	3595, 493, 3, 2, 2, 2, 3596, 3605, 7, 32, 2, 2, 3597, 3602, 5, 202, 102,
	2, 3598, 3599, 7, 38, 2, 2, 3599, 3601, 5, 202, 102, 2, 3600, 3598, 3,
	2, 2, 2, 3601, 3604, 3, 2, 2, 2, 3602, 3600, 3, 2, 2, 2, 3602, 3603, 3,
	2, 2, 2, 3603, 3606, 3, 2, 2, 2, 3604, 3602, 3, 2, 2, 2, 3605, 3597, 3,
	2, 2, 2, 3605, 3606, 3, 2, 2, 2, 3606, 3607, 3, 2, 2, 2, 3607, 3608, 7,
	33, 2, 2, 3608, 495, 3, 2, 2, 2, 3609, 3610, 7, 309, 2, 2, 3610, 3611,
	7, 460, 2, 2, 3611, 3612, 7, 247, 2, 2, 3612, 497, 3, 2, 2, 2, 3613, 3614,
	7, 309, 2, 2, 3614, 3615, 7, 247, 2, 2, 3615, 499, 3, 2, 2, 2, 3616, 3617,
	7, 776, 2, 2, 3617, 501, 3, 2, 2, 2, 3618, 3619, 5, 202, 102, 2, 3619,
	503, 3, 2, 2, 2, 3620, 3621, 5, 202, 102, 2, 3621, 505, 3, 2, 2, 2, 3622,
	3623, 5, 202, 102, 2, 3623, 507, 3, 2, 2, 2, 3624, 3625, 9, 63, 2, 2, 3625,
	509, 3, 2, 2, 2, 3626, 3627, 9, 64, 2, 2, 3627, 511, 3, 2, 2, 2, 3628,
	3629, 7, 272, 2, 2, 3629, 3630, 7, 129, 2, 2, 3630, 3631, 5, 184, 93, 2,
	3631, 513, 3, 2, 2, 2, 3632, 3633, 7, 519, 2, 2, 3633, 3634, 5, 202, 102,
	2, 3634, 3637, 7, 277, 2, 2, 3635, 3638, 5, 186, 94, 2, 3636, 3638, 5,
	218, 110, 2, 3637, 3635, 3, 2, 2, 2, 3637, 3636, 3, 2, 2, 2, 3638, 3644,
	3, 2, 2, 2, 3639, 3644, 5, 516, 259, 2, 3640, 3641, 9, 65, 2, 2, 3641,
	3642, 7, 519, 2, 2, 3642, 3644, 5, 202, 102, 2, 3643, 3632, 3, 2, 2, 2,
	3643, 3639, 3, 2, 2, 2, 3643, 3640, 3, 2, 2, 2, 3644, 515, 3, 2, 2, 2,
	3645, 3646, 7, 246, 2, 2, 3646, 3649, 5, 202, 102, 2, 3647, 3648, 7, 733,
	2, 2, 3648, 3650, 5, 518, 260, 2, 3649, 3647, 3, 2, 2, 2, 3649, 3650, 3,
	2, 2, 2, 3650, 517, 3, 2, 2, 2, 3651, 3656, 5, 218, 110, 2, 3652, 3653,
	7, 38, 2, 2, 3653, 3655, 5, 218, 110, 2, 3654, 3652, 3, 2, 2, 2, 3655,
	3658, 3, 2, 2, 2, 3656, 3654, 3, 2, 2, 2, 3656, 3657, 3, 2, 2, 2, 3657,
	519, 3, 2, 2, 2, 3658, 3656, 3, 2, 2, 2, 3659, 3669, 5, 534, 268, 2, 3660,
	3669, 5, 588, 295, 2, 3661, 3669, 5, 616, 309, 2, 3662, 3669, 5, 610, 306,
	2, 3663, 3669, 5, 604, 303, 2, 3664, 3669, 5, 628, 315, 2, 3665, 3669,
	5, 648, 325, 2, 3666, 3669, 5, 596, 299, 2, 3667, 3669, 5, 622, 312, 2,
	3668, 3659, 3, 2, 2, 2, 3668, 3660, 3, 2, 2, 2, 3668, 3661, 3, 2, 2, 2,
	3668, 3662, 3, 2, 2, 2, 3668, 3663, 3, 2, 2, 2, 3668, 3664, 3, 2, 2, 2,
	3668, 3665, 3, 2, 2, 2, 3668, 3666, 3, 2, 2, 2, 3668, 3667, 3, 2, 2, 2,
	3669, 521, 3, 2, 2, 2, 3670, 3672, 7, 169, 2, 2, 3671, 3673, 7, 687, 2,
	2, 3672, 3671, 3, 2, 2, 2, 3672, 3673, 3, 2, 2, 2, 3673, 3674, 3, 2, 2,
	2, 3674, 3676, 7, 682, 2, 2, 3675, 3677, 5, 496, 249, 2, 3676, 3675, 3,
	2, 2, 2, 3676, 3677, 3, 2, 2, 2, 3677, 3678, 3, 2, 2, 2, 3678, 3692, 5,
	248, 125, 2, 3679, 3681, 5, 658, 330, 2, 3680, 3679, 3, 2, 2, 2, 3680,
	3681, 3, 2, 2, 2, 3681, 3683, 3, 2, 2, 2, 3682, 3684, 5, 702, 352, 2, 3683,
	3682, 3, 2, 2, 2, 3683, 3684, 3, 2, 2, 2, 3684, 3686, 3, 2, 2, 2, 3685,
	3687, 5, 524, 263, 2, 3686, 3685, 3, 2, 2, 2, 3686, 3687, 3, 2, 2, 2, 3687,
	3689, 3, 2, 2, 2, 3688, 3690, 5, 532, 267, 2, 3689, 3688, 3, 2, 2, 2, 3689,
	3690, 3, 2, 2, 2, 3690, 3693, 3, 2, 2, 2, 3691, 3693, 5, 698, 350, 2, 3692,
	3680, 3, 2, 2, 2, 3692, 3691, 3, 2, 2, 2, 3693, 523, 3, 2, 2, 2, 3694,
	3695, 7, 500, 2, 2, 3695, 3696, 7, 118, 2, 2, 3696, 3699, 5, 526, 264,
	2, 3697, 3698, 7, 502, 2, 2, 3698, 3700, 7, 776, 2, 2, 3699, 3697, 3, 2,
	2, 2, 3699, 3700, 3, 2, 2, 2, 3700, 3702, 3, 2, 2, 2, 3701, 3703, 5, 528,
	265, 2, 3702, 3701, 3, 2, 2, 2, 3702, 3703, 3, 2, 2, 2, 3703, 3705, 3,
	2, 2, 2, 3704, 3706, 5, 714, 358, 2, 3705, 3704, 3, 2, 2, 2, 3705, 3706,
	3, 2, 2, 2, 3706, 525, 3, 2, 2, 2, 3707, 3709, 7, 367, 2, 2, 3708, 3707,
	3, 2, 2, 2, 3708, 3709, 3, 2, 2, 2, 3709, 3710, 3, 2, 2, 2, 3710, 3712,
	7, 349, 2, 2, 3711, 3713, 5, 530, 266, 2, 3712, 3711, 3, 2, 2, 2, 3712,
	3713, 3, 2, 2, 2, 3713, 3714, 3, 2, 2, 2, 3714, 3716, 7, 32, 2, 2, 3715,
	3717, 5, 280, 141, 2, 3716, 3715, 3, 2, 2, 2, 3716, 3717, 3, 2, 2, 2, 3717,
	3718, 3, 2, 2, 2, 3718, 3740, 7, 33, 2, 2, 3719, 3721, 7, 367, 2, 2, 3720,
	3719, 3, 2, 2, 2, 3720, 3721, 3, 2, 2, 2, 3721, 3722, 3, 2, 2, 2, 3722,
	3723, 7, 296, 2, 2, 3723, 3724, 7, 32, 2, 2, 3724, 3725, 5, 344, 173, 2,
	3725, 3726, 7, 33, 2, 2, 3726, 3740, 3, 2, 2, 2, 3727, 3737, 9, 66, 2,
	2, 3728, 3729, 7, 32, 2, 2, 3729, 3730, 5, 344, 173, 2, 3730, 3731, 7,
	33, 2, 2, 3731, 3738, 3, 2, 2, 2, 3732, 3733, 7, 145, 2, 2, 3733, 3734,
	7, 32, 2, 2, 3734, 3735, 5, 280, 141, 2, 3735, 3736, 7, 33, 2, 2, 3736,
	3738, 3, 2, 2, 2, 3737, 3728, 3, 2, 2, 2, 3737, 3732, 3, 2, 2, 2, 3738,
	3740, 3, 2, 2, 2, 3739, 3708, 3, 2, 2, 2, 3739, 3720, 3, 2, 2, 2, 3739,
	3727, 3, 2, 2, 2, 3740, 527, 3, 2, 2, 2, 3741, 3742, 7, 675, 2, 2, 3742,
	3744, 7, 118, 2, 2, 3743, 3745, 7, 367, 2, 2, 3744, 3743, 3, 2, 2, 2, 3744,
	3745, 3, 2, 2, 2, 3745, 3759, 3, 2, 2, 2, 3746, 3747, 7, 296, 2, 2, 3747,
	3748, 7, 32, 2, 2, 3748, 3749, 5, 344, 173, 2, 3749, 3750, 7, 33, 2, 2,
	3750, 3760, 3, 2, 2, 2, 3751, 3753, 7, 349, 2, 2, 3752, 3754, 5, 530, 266,
	2, 3753, 3752, 3, 2, 2, 2, 3753, 3754, 3, 2, 2, 2, 3754, 3755, 3, 2, 2,
	2, 3755, 3756, 7, 32, 2, 2, 3756, 3757, 5, 280, 141, 2, 3757, 3758, 7,
	33, 2, 2, 3758, 3760, 3, 2, 2, 2, 3759, 3746, 3, 2, 2, 2, 3759, 3751, 3,
	2, 2, 2, 3760, 3763, 3, 2, 2, 2, 3761, 3762, 7, 676, 2, 2, 3762, 3764,
	7, 776, 2, 2, 3763, 3761, 3, 2, 2, 2, 3763, 3764, 3, 2, 2, 2, 3764, 529,
	3, 2, 2, 2, 3765, 3766, 7, 84, 2, 2, 3766, 3767, 7, 25, 2, 2, 3767, 3768,
	7, 776, 2, 2, 3768, 531, 3, 2, 2, 2, 3769, 3771, 9, 8, 2, 2, 3770, 3769,
	3, 2, 2, 2, 3770, 3771, 3, 2, 2, 2, 3771, 3773, 3, 2, 2, 2, 3772, 3774,
	7, 92, 2, 2, 3773, 3772, 3, 2, 2, 2, 3773, 3774, 3, 2, 2, 2, 3774, 3776,
	3, 2, 2, 2, 3775, 3777, 7, 32, 2, 2, 3776, 3775, 3, 2, 2, 2, 3776, 3777,
	3, 2, 2, 2, 3777, 3778, 3, 2, 2, 2, 3778, 3780, 5, 54, 28, 2, 3779, 3781,
	7, 33, 2, 2, 3780, 3779, 3, 2, 2, 2, 3780, 3781, 3, 2, 2, 2, 3781, 533,
	3, 2, 2, 2, 3782, 3783, 7, 86, 2, 2, 3783, 3784, 7, 682, 2, 2, 3784, 3786,
	5, 248, 125, 2, 3785, 3787, 5, 538, 270, 2, 3786, 3785, 3, 2, 2, 2, 3786,
	3787, 3, 2, 2, 2, 3787, 3794, 3, 2, 2, 2, 3788, 3789, 7, 86, 2, 2, 3789,
	3790, 7, 682, 2, 2, 3790, 3791, 5, 248, 125, 2, 3791, 3792, 5, 536, 269,
	2, 3792, 3794, 3, 2, 2, 2, 3793, 3782, 3, 2, 2, 2, 3793, 3788, 3, 2, 2,
	2, 3794, 535, 3, 2, 2, 2, 3795, 3796, 5, 554, 278, 2, 3796, 3797, 7, 38,
	2, 2, 3797, 3799, 3, 2, 2, 2, 3798, 3795, 3, 2, 2, 2, 3798, 3799, 3, 2,
	2, 2, 3799, 3800, 3, 2, 2, 2, 3800, 3801, 5, 560, 281, 2, 3801, 537, 3,
	2, 2, 2, 3802, 3804, 5, 542, 272, 2, 3803, 3805, 5, 540, 271, 2, 3804,
	3803, 3, 2, 2, 2, 3804, 3805, 3, 2, 2, 2, 3805, 3808, 3, 2, 2, 2, 3806,
	3808, 5, 540, 271, 2, 3807, 3802, 3, 2, 2, 2, 3807, 3806, 3, 2, 2, 2, 3808,
	539, 3, 2, 2, 2, 3809, 3813, 5, 524, 263, 2, 3810, 3811, 7, 558, 2, 2,
	3811, 3813, 7, 501, 2, 2, 3812, 3809, 3, 2, 2, 2, 3812, 3810, 3, 2, 2,
	2, 3813, 541, 3, 2, 2, 2, 3814, 3822, 5, 554, 278, 2, 3815, 3816, 5, 554,
	278, 2, 3816, 3817, 7, 38, 2, 2, 3817, 3819, 3, 2, 2, 2, 3818, 3815, 3,
	2, 2, 2, 3818, 3819, 3, 2, 2, 2, 3819, 3820, 3, 2, 2, 2, 3820, 3822, 5,
	544, 273, 2, 3821, 3814, 3, 2, 2, 2, 3821, 3818, 3, 2, 2, 2, 3822, 543,
	3, 2, 2, 2, 3823, 3826, 5, 548, 275, 2, 3824, 3826, 5, 546, 274, 2, 3825,
	3823, 3, 2, 2, 2, 3825, 3824, 3, 2, 2, 2, 3826, 3835, 3, 2, 2, 2, 3827,
	3831, 7, 38, 2, 2, 3828, 3832, 5, 548, 275, 2, 3829, 3832, 5, 556, 279,
	2, 3830, 3832, 5, 546, 274, 2, 3831, 3828, 3, 2, 2, 2, 3831, 3829, 3, 2,
	2, 2, 3831, 3830, 3, 2, 2, 2, 3832, 3834, 3, 2, 2, 2, 3833, 3827, 3, 2,
	2, 2, 3834, 3837, 3, 2, 2, 2, 3835, 3833, 3, 2, 2, 2, 3835, 3836, 3, 2,
	2, 2, 3836, 545, 3, 2, 2, 2, 3837, 3835, 3, 2, 2, 2, 3838, 3840, 5, 704,
	353, 2, 3839, 3838, 3, 2, 2, 2, 3840, 3841, 3, 2, 2, 2, 3841, 3839, 3,
	2, 2, 2, 3841, 3842, 3, 2, 2, 2, 3842, 547, 3, 2, 2, 2, 3843, 3845, 7,
	79, 2, 2, 3844, 3846, 7, 144, 2, 2, 3845, 3844, 3, 2, 2, 2, 3845, 3846,
	3, 2, 2, 2, 3846, 3855, 3, 2, 2, 2, 3847, 3849, 5, 660, 331, 2, 3848, 3850,
	5, 712, 357, 2, 3849, 3848, 3, 2, 2, 2, 3849, 3850, 3, 2, 2, 2, 3850, 3856,
	3, 2, 2, 2, 3851, 3852, 7, 32, 2, 2, 3852, 3853, 5, 566, 284, 2, 3853,
	3854, 7, 33, 2, 2, 3854, 3856, 3, 2, 2, 2, 3855, 3847, 3, 2, 2, 2, 3855,
	3851, 3, 2, 2, 2, 3856, 3965, 3, 2, 2, 2, 3857, 3858, 7, 79, 2, 2, 3858,
	3965, 5, 552, 277, 2, 3859, 3861, 7, 127, 2, 2, 3860, 3862, 7, 144, 2,
	2, 3861, 3860, 3, 2, 2, 2, 3861, 3862, 3, 2, 2, 2, 3862, 3863, 3, 2, 2,
	2, 3863, 3864, 5, 202, 102, 2, 3864, 3866, 5, 660, 331, 2, 3865, 3867,
	5, 712, 357, 2, 3866, 3865, 3, 2, 2, 2, 3866, 3867, 3, 2, 2, 2, 3867, 3965,
	3, 2, 2, 2, 3868, 3870, 7, 439, 2, 2, 3869, 3871, 7, 144, 2, 2, 3870, 3869,
	3, 2, 2, 2, 3870, 3871, 3, 2, 2, 2, 3871, 3872, 3, 2, 2, 2, 3872, 3873,
	5, 202, 102, 2, 3873, 3875, 5, 662, 332, 2, 3874, 3876, 5, 712, 357, 2,
	3875, 3874, 3, 2, 2, 2, 3875, 3876, 3, 2, 2, 2, 3876, 3965, 3, 2, 2, 2,
	3877, 3897, 7, 217, 2, 2, 3878, 3880, 7, 144, 2, 2, 3879, 3878, 3, 2, 2,
	2, 3879, 3880, 3, 2, 2, 2, 3880, 3881, 3, 2, 2, 2, 3881, 3883, 5, 202,
	102, 2, 3882, 3884, 5, 570, 286, 2, 3883, 3882, 3, 2, 2, 2, 3883, 3884,
	3, 2, 2, 2, 3884, 3898, 3, 2, 2, 2, 3885, 3886, 7, 274, 2, 2, 3886, 3887,
	7, 349, 2, 2, 3887, 3898, 5, 202, 102, 2, 3888, 3889, 7, 522, 2, 2, 3889,
	3898, 7, 349, 2, 2, 3890, 3891, 5, 486, 244, 2, 3891, 3892, 5, 252, 127,
	2, 3892, 3898, 3, 2, 2, 2, 3893, 3894, 7, 133, 2, 2, 3894, 3898, 5, 202,
	102, 2, 3895, 3896, 7, 160, 2, 2, 3896, 3898, 5, 202, 102, 2, 3897, 3879,
	3, 2, 2, 2, 3897, 3885, 3, 2, 2, 2, 3897, 3888, 3, 2, 2, 2, 3897, 3890,
	3, 2, 2, 2, 3897, 3893, 3, 2, 2, 2, 3897, 3895, 3, 2, 2, 2, 3898, 3965,
	3, 2, 2, 2, 3899, 3900, 7, 209, 2, 2, 3900, 3965, 7, 350, 2, 2, 3901, 3902,
	7, 226, 2, 2, 3902, 3965, 7, 350, 2, 2, 3903, 3905, 7, 86, 2, 2, 3904,
	3906, 7, 144, 2, 2, 3905, 3904, 3, 2, 2, 2, 3905, 3906, 3, 2, 2, 2, 3906,
	3907, 3, 2, 2, 2, 3907, 3919, 5, 202, 102, 2, 3908, 3909, 7, 626, 2, 2,
	3909, 3915, 7, 195, 2, 2, 3910, 3911, 7, 32, 2, 2, 3911, 3912, 5, 328,
	165, 2, 3912, 3913, 7, 33, 2, 2, 3913, 3916, 3, 2, 2, 2, 3914, 3916, 5,
	476, 239, 2, 3915, 3910, 3, 2, 2, 2, 3915, 3914, 3, 2, 2, 2, 3916, 3920,
	3, 2, 2, 2, 3917, 3918, 7, 217, 2, 2, 3918, 3920, 7, 195, 2, 2, 3919, 3908,
	3, 2, 2, 2, 3919, 3917, 3, 2, 2, 2, 3920, 3965, 3, 2, 2, 2, 3921, 3922,
	7, 86, 2, 2, 3922, 3923, 7, 315, 2, 2, 3923, 3924, 5, 252, 127, 2, 3924,
	3925, 5, 696, 349, 2, 3925, 3965, 3, 2, 2, 2, 3926, 3927, 7, 86, 2, 2,
	3927, 3928, 7, 133, 2, 2, 3928, 3929, 5, 254, 128, 2, 3929, 3930, 5, 668,
	335, 2, 3930, 3965, 3, 2, 2, 2, 3931, 3932, 7, 86, 2, 2, 3932, 3933, 7,
	160, 2, 2, 3933, 3934, 5, 254, 128, 2, 3934, 3935, 5, 668, 335, 2, 3935,
	3965, 3, 2, 2, 2, 3936, 3937, 7, 559, 2, 2, 3937, 3938, 7, 144, 2, 2, 3938,
	3939, 5, 202, 102, 2, 3939, 3940, 7, 703, 2, 2, 3940, 3941, 5, 202, 102,
	2, 3941, 3965, 3, 2, 2, 2, 3942, 3944, 7, 559, 2, 2, 3943, 3945, 9, 67,
	2, 2, 3944, 3943, 3, 2, 2, 2, 3944, 3945, 3, 2, 2, 2, 3945, 3946, 3, 2,
	2, 2, 3946, 3965, 5, 248, 125, 2, 3947, 3948, 7, 559, 2, 2, 3948, 3949,
	5, 486, 244, 2, 3949, 3950, 5, 252, 127, 2, 3950, 3951, 7, 703, 2, 2, 3951,
	3952, 5, 252, 127, 2, 3952, 3965, 3, 2, 2, 2, 3953, 3954, 7, 167, 2, 2,
	3954, 3955, 7, 703, 2, 2, 3955, 3956, 5, 468, 235, 2, 3956, 3958, 5, 242,
	122, 2, 3957, 3959, 5, 492, 247, 2, 3958, 3957, 3, 2, 2, 2, 3958, 3959,
	3, 2, 2, 2, 3959, 3965, 3, 2, 2, 2, 3960, 3965, 7, 273, 2, 2, 3961, 3962,
	7, 487, 2, 2, 3962, 3963, 7, 118, 2, 2, 3963, 3965, 5, 550, 276, 2, 3964,
	3843, 3, 2, 2, 2, 3964, 3857, 3, 2, 2, 2, 3964, 3859, 3, 2, 2, 2, 3964,
	3868, 3, 2, 2, 2, 3964, 3877, 3, 2, 2, 2, 3964, 3899, 3, 2, 2, 2, 3964,
	3901, 3, 2, 2, 2, 3964, 3903, 3, 2, 2, 2, 3964, 3921, 3, 2, 2, 2, 3964,
	3926, 3, 2, 2, 2, 3964, 3931, 3, 2, 2, 2, 3964, 3936, 3, 2, 2, 2, 3964,
	3942, 3, 2, 2, 2, 3964, 3947, 3, 2, 2, 2, 3964, 3953, 3, 2, 2, 2, 3964,
	3960, 3, 2, 2, 2, 3964, 3961, 3, 2, 2, 2, 3965, 549, 3, 2, 2, 2, 3966,
	3968, 5, 202, 102, 2, 3967, 3969, 5, 484, 243, 2, 3968, 3967, 3, 2, 2,
	2, 3968, 3969, 3, 2, 2, 2, 3969, 3977, 3, 2, 2, 2, 3970, 3971, 7, 38, 2,
	2, 3971, 3973, 5, 202, 102, 2, 3972, 3974, 5, 484, 243, 2, 3973, 3972,
	3, 2, 2, 2, 3973, 3974, 3, 2, 2, 2, 3974, 3976, 3, 2, 2, 2, 3975, 3970,
	3, 2, 2, 2, 3976, 3979, 3, 2, 2, 2, 3977, 3975, 3, 2, 2, 2, 3977, 3978,
	3, 2, 2, 2, 3978, 551, 3, 2, 2, 2, 3979, 3977, 3, 2, 2, 2, 3980, 3982,
	5, 486, 244, 2, 3981, 3983, 5, 678, 340, 2, 3982, 3981, 3, 2, 2, 2, 3982,
	3983, 3, 2, 2, 2, 3983, 3984, 3, 2, 2, 2, 3984, 3988, 5, 690, 346, 2, 3985,
	3987, 5, 692, 347, 2, 3986, 3985, 3, 2, 2, 2, 3987, 3990, 3, 2, 2, 2, 3988,
	3986, 3, 2, 2, 2, 3988, 3989, 3, 2, 2, 2, 3989, 4059, 3, 2, 2, 2, 3990,
	3988, 3, 2, 2, 2, 3991, 3993, 7, 279, 2, 2, 3992, 3994, 5, 486, 244, 2,
	3993, 3992, 3, 2, 2, 2, 3993, 3994, 3, 2, 2, 2, 3994, 3996, 3, 2, 2, 2,
	3995, 3997, 5, 252, 127, 2, 3996, 3995, 3, 2, 2, 2, 3996, 3997, 3, 2, 2,
	2, 3997, 3998, 3, 2, 2, 2, 3998, 4002, 5, 690, 346, 2, 3999, 4001, 5, 572,
	287, 2, 4000, 3999, 3, 2, 2, 2, 4001, 4004, 3, 2, 2, 2, 4002, 4000, 3,
	2, 2, 2, 4002, 4003, 3, 2, 2, 2, 4003, 4059, 3, 2, 2, 2, 4004, 4002, 3,
	2, 2, 2, 4005, 4007, 7, 642, 2, 2, 4006, 4008, 5, 486, 244, 2, 4007, 4006,
	3, 2, 2, 2, 4007, 4008, 3, 2, 2, 2, 4008, 4010, 3, 2, 2, 2, 4009, 4011,
	5, 252, 127, 2, 4010, 4009, 3, 2, 2, 2, 4010, 4011, 3, 2, 2, 2, 4011, 4012,
	3, 2, 2, 2, 4012, 4016, 5, 690, 346, 2, 4013, 4015, 5, 694, 348, 2, 4014,
	4013, 3, 2, 2, 2, 4015, 4018, 3, 2, 2, 2, 4016, 4014, 3, 2, 2, 2, 4016,
	4017, 3, 2, 2, 2, 4017, 4059, 3, 2, 2, 2, 4018, 4016, 3, 2, 2, 2, 4019,
	4021, 5, 564, 283, 2, 4020, 4019, 3, 2, 2, 2, 4020, 4021, 3, 2, 2, 2, 4021,
	4028, 3, 2, 2, 2, 4022, 4023, 7, 522, 2, 2, 4023, 4029, 7, 349, 2, 2, 4024,
	4026, 7, 721, 2, 2, 4025, 4027, 5, 486, 244, 2, 4026, 4025, 3, 2, 2, 2,
	4026, 4027, 3, 2, 2, 2, 4027, 4029, 3, 2, 2, 2, 4028, 4022, 3, 2, 2, 2,
	4028, 4024, 3, 2, 2, 2, 4029, 4031, 3, 2, 2, 2, 4030, 4032, 5, 678, 340,
	2, 4031, 4030, 3, 2, 2, 2, 4031, 4032, 3, 2, 2, 2, 4032, 4033, 3, 2, 2,
	2, 4033, 4037, 5, 690, 346, 2, 4034, 4036, 5, 692, 347, 2, 4035, 4034,
	3, 2, 2, 2, 4036, 4039, 3, 2, 2, 2, 4037, 4035, 3, 2, 2, 2, 4037, 4038,
	3, 2, 2, 2, 4038, 4059, 3, 2, 2, 2, 4039, 4037, 3, 2, 2, 2, 4040, 4042,
	5, 564, 283, 2, 4041, 4040, 3, 2, 2, 2, 4041, 4042, 3, 2, 2, 2, 4042, 4043,
	3, 2, 2, 2, 4043, 4044, 7, 274, 2, 2, 4044, 4046, 7, 349, 2, 2, 4045, 4047,
	5, 252, 127, 2, 4046, 4045, 3, 2, 2, 2, 4046, 4047, 3, 2, 2, 2, 4047, 4048,
	3, 2, 2, 2, 4048, 4049, 5, 684, 343, 2, 4049, 4050, 5, 672, 337, 2, 4050,
	4059, 3, 2, 2, 2, 4051, 4053, 5, 564, 283, 2, 4052, 4051, 3, 2, 2, 2, 4052,
	4053, 3, 2, 2, 2, 4053, 4054, 3, 2, 2, 2, 4054, 4056, 5, 666, 334, 2, 4055,
	4057, 5, 668, 335, 2, 4056, 4055, 3, 2, 2, 2, 4056, 4057, 3, 2, 2, 2, 4057,
	4059, 3, 2, 2, 2, 4058, 3980, 3, 2, 2, 2, 4058, 3991, 3, 2, 2, 2, 4058,
	4005, 3, 2, 2, 2, 4058, 4020, 3, 2, 2, 2, 4058, 4041, 3, 2, 2, 2, 4058,
	4052, 3, 2, 2, 2, 4059, 553, 3, 2, 2, 2, 4060, 4065, 5, 556, 279, 2, 4061,
	4062, 7, 38, 2, 2, 4062, 4064, 5, 556, 279, 2, 4063, 4061, 3, 2, 2, 2,
	4064, 4067, 3, 2, 2, 2, 4065, 4063, 3, 2, 2, 2, 4065, 4066, 3, 2, 2, 2,
	4066, 555, 3, 2, 2, 2, 4067, 4065, 3, 2, 2, 2, 4068, 4072, 5, 578, 290,
	2, 4069, 4072, 5, 580, 291, 2, 4070, 4072, 5, 558, 280, 2, 4071, 4068,
	3, 2, 2, 2, 4071, 4069, 3, 2, 2, 2, 4071, 4070, 3, 2, 2, 2, 4072, 557,
	3, 2, 2, 2, 4073, 4074, 9, 68, 2, 2, 4074, 4075, 7, 737, 2, 2, 4075, 559,
	3, 2, 2, 2, 4076, 4077, 7, 210, 2, 2, 4077, 4083, 7, 684, 2, 2, 4078, 4079,
	7, 312, 2, 2, 4079, 4083, 7, 684, 2, 2, 4080, 4083, 5, 562, 282, 2, 4081,
	4083, 9, 69, 2, 2, 4082, 4076, 3, 2, 2, 2, 4082, 4078, 3, 2, 2, 2, 4082,
	4080, 3, 2, 2, 2, 4082, 4081, 3, 2, 2, 2, 4083, 561, 3, 2, 2, 2, 4084,
	4085, 7, 79, 2, 2, 4085, 4087, 7, 500, 2, 2, 4086, 4088, 5, 510, 256, 2,
	4087, 4086, 3, 2, 2, 2, 4087, 4088, 3, 2, 2, 2, 4088, 4092, 3, 2, 2, 2,
	4089, 4093, 5, 714, 358, 2, 4090, 4091, 7, 502, 2, 2, 4091, 4093, 7, 776,
	2, 2, 4092, 4089, 3, 2, 2, 2, 4092, 4090, 3, 2, 2, 2, 4093, 4179, 3, 2,
	2, 2, 4094, 4095, 7, 217, 2, 2, 4095, 4096, 7, 500, 2, 2, 4096, 4179, 5,
	320, 161, 2, 4097, 4098, 7, 543, 2, 2, 4098, 4100, 7, 500, 2, 2, 4099,
	4101, 5, 510, 256, 2, 4100, 4099, 3, 2, 2, 2, 4100, 4101, 3, 2, 2, 2, 4101,
	4102, 3, 2, 2, 2, 4102, 4179, 5, 322, 162, 2, 4103, 4104, 7, 480, 2, 2,
	4104, 4106, 7, 500, 2, 2, 4105, 4107, 5, 510, 256, 2, 4106, 4105, 3, 2,
	2, 2, 4106, 4107, 3, 2, 2, 2, 4107, 4108, 3, 2, 2, 2, 4108, 4110, 5, 322,
	162, 2, 4109, 4111, 5, 510, 256, 2, 4110, 4109, 3, 2, 2, 2, 4110, 4111,
	3, 2, 2, 2, 4111, 4179, 3, 2, 2, 2, 4112, 4113, 7, 88, 2, 2, 4113, 4115,
	7, 500, 2, 2, 4114, 4116, 5, 510, 256, 2, 4115, 4114, 3, 2, 2, 2, 4115,
	4116, 3, 2, 2, 2, 4116, 4117, 3, 2, 2, 2, 4117, 4179, 5, 322, 162, 2, 4118,
	4119, 7, 133, 2, 2, 4119, 4120, 7, 500, 2, 2, 4120, 4124, 5, 322, 162,
	2, 4121, 4123, 5, 386, 194, 2, 4122, 4121, 3, 2, 2, 2, 4123, 4126, 3, 2,
	2, 2, 4124, 4122, 3, 2, 2, 2, 4124, 4125, 3, 2, 2, 2, 4125, 4179, 3, 2,
	2, 2, 4126, 4124, 3, 2, 2, 2, 4127, 4128, 7, 561, 2, 2, 4128, 4130, 7,
	500, 2, 2, 4129, 4131, 5, 510, 256, 2, 4130, 4129, 3, 2, 2, 2, 4130, 4131,
	3, 2, 2, 2, 4131, 4132, 3, 2, 2, 2, 4132, 4136, 5, 322, 162, 2, 4133, 4135,
	5, 388, 195, 2, 4134, 4133, 3, 2, 2, 2, 4135, 4138, 3, 2, 2, 2, 4136, 4134,
	3, 2, 2, 2, 4136, 4137, 3, 2, 2, 2, 4137, 4179, 3, 2, 2, 2, 4138, 4136,
	3, 2, 2, 2, 4139, 4140, 7, 140, 2, 2, 4140, 4142, 7, 500, 2, 2, 4141, 4143,
	5, 510, 256, 2, 4142, 4141, 3, 2, 2, 2, 4142, 4143, 3, 2, 2, 2, 4143, 4144,
	3, 2, 2, 2, 4144, 4179, 7, 776, 2, 2, 4145, 4146, 7, 709, 2, 2, 4146, 4147,
	7, 500, 2, 2, 4147, 4179, 5, 322, 162, 2, 4148, 4149, 7, 560, 2, 2, 4149,
	4151, 7, 500, 2, 2, 4150, 4152, 5, 510, 256, 2, 4151, 4150, 3, 2, 2, 2,
	4151, 4152, 3, 2, 2, 2, 4152, 4157, 3, 2, 2, 2, 4153, 4154, 5, 320, 161,
	2, 4154, 4155, 7, 334, 2, 2, 4155, 4156, 5, 714, 358, 2, 4156, 4158, 3,
	2, 2, 2, 4157, 4153, 3, 2, 2, 2, 4157, 4158, 3, 2, 2, 2, 4158, 4179, 3,
	2, 2, 2, 4159, 4160, 7, 244, 2, 2, 4160, 4161, 7, 500, 2, 2, 4161, 4162,
	5, 202, 102, 2, 4162, 4163, 7, 757, 2, 2, 4163, 4164, 7, 682, 2, 2, 4164,
	4166, 5, 248, 125, 2, 4165, 4167, 5, 558, 280, 2, 4166, 4165, 3, 2, 2,
	2, 4166, 4167, 3, 2, 2, 2, 4167, 4179, 3, 2, 2, 2, 4168, 4169, 7, 210,
	2, 2, 4169, 4170, 7, 500, 2, 2, 4170, 4171, 5, 322, 162, 2, 4171, 4172,
	7, 684, 2, 2, 4172, 4179, 3, 2, 2, 2, 4173, 4174, 7, 312, 2, 2, 4174, 4175,
	7, 500, 2, 2, 4175, 4176, 5, 322, 162, 2, 4176, 4177, 7, 684, 2, 2, 4177,
	4179, 3, 2, 2, 2, 4178, 4084, 3, 2, 2, 2, 4178, 4094, 3, 2, 2, 2, 4178,
	4097, 3, 2, 2, 2, 4178, 4103, 3, 2, 2, 2, 4178, 4112, 3, 2, 2, 2, 4178,
	4118, 3, 2, 2, 2, 4178, 4127, 3, 2, 2, 2, 4178, 4139, 3, 2, 2, 2, 4178,
	4145, 3, 2, 2, 2, 4178, 4148, 3, 2, 2, 2, 4178, 4159, 3, 2, 2, 2, 4178,
	4168, 3, 2, 2, 2, 4178, 4173, 3, 2, 2, 2, 4179, 563, 3, 2, 2, 2, 4180,
	4182, 7, 160, 2, 2, 4181, 4183, 5, 254, 128, 2, 4182, 4181, 3, 2, 2, 2,
	4182, 4183, 3, 2, 2, 2, 4183, 565, 3, 2, 2, 2, 4184, 4189, 5, 568, 285,
	2, 4185, 4186, 7, 38, 2, 2, 4186, 4188, 5, 568, 285, 2, 4187, 4185, 3,
	2, 2, 2, 4188, 4191, 3, 2, 2, 2, 4189, 4187, 3, 2, 2, 2, 4189, 4190, 3,
	2, 2, 2, 4190, 567, 3, 2, 2, 2, 4191, 4189, 3, 2, 2, 2, 4192, 4195, 5,
	660, 331, 2, 4193, 4195, 5, 552, 277, 2, 4194, 4192, 3, 2, 2, 2, 4194,
	4193, 3, 2, 2, 2, 4195, 569, 3, 2, 2, 2, 4196, 4197, 9, 70, 2, 2, 4197,
	571, 3, 2, 2, 2, 4198, 4203, 5, 694, 348, 2, 4199, 4200, 7, 757, 2, 2,
	4200, 4201, 7, 498, 2, 2, 4201, 4203, 5, 202, 102, 2, 4202, 4198, 3, 2,
	2, 2, 4202, 4199, 3, 2, 2, 2, 4203, 573, 3, 2, 2, 2, 4204, 4206, 7, 217,
	2, 2, 4205, 4207, 7, 687, 2, 2, 4206, 4205, 3, 2, 2, 2, 4206, 4207, 3,
	2, 2, 2, 4207, 4208, 3, 2, 2, 2, 4208, 4210, 5, 314, 158, 2, 4209, 4211,
	5, 498, 250, 2, 4210, 4209, 3, 2, 2, 2, 4210, 4211, 3, 2, 2, 2, 4211, 4212,
	3, 2, 2, 2, 4212, 4214, 5, 276, 139, 2, 4213, 4215, 5, 570, 286, 2, 4214,
	4213, 3, 2, 2, 2, 4214, 4215, 3, 2, 2, 2, 4215, 575, 3, 2, 2, 2, 4216,
	4217, 7, 217, 2, 2, 4217, 4218, 7, 315, 2, 2, 4218, 4221, 5, 252, 127,
	2, 4219, 4220, 7, 476, 2, 2, 4220, 4222, 5, 248, 125, 2, 4221, 4219, 3,
	2, 2, 2, 4221, 4222, 3, 2, 2, 2, 4222, 4227, 3, 2, 2, 2, 4223, 4226, 5,
	578, 290, 2, 4224, 4226, 5, 580, 291, 2, 4225, 4223, 3, 2, 2, 2, 4225,
	4224, 3, 2, 2, 2, 4226, 4229, 3, 2, 2, 2, 4227, 4225, 3, 2, 2, 2, 4227,
	4228, 3, 2, 2, 2, 4228, 577, 3, 2, 2, 2, 4229, 4227, 3, 2, 2, 2, 4230,
	4232, 7, 84, 2, 2, 4231, 4233, 7, 25, 2, 2, 4232, 4231, 3, 2, 2, 2, 4232,
	4233, 3, 2, 2, 2, 4233, 4234, 3, 2, 2, 2, 4234, 4235, 9, 71, 2, 2, 4235,
	579, 3, 2, 2, 2, 4236, 4238, 7, 375, 2, 2, 4237, 4239, 7, 25, 2, 2, 4238,
	4237, 3, 2, 2, 2, 4238, 4239, 3, 2, 2, 2, 4239, 4240, 3, 2, 2, 2, 4240,
	4241, 9, 72, 2, 2, 4241, 581, 3, 2, 2, 2, 4242, 4244, 7, 709, 2, 2, 4243,
	4245, 7, 682, 2, 2, 4244, 4243, 3, 2, 2, 2, 4244, 4245, 3, 2, 2, 2, 4245,
	4246, 3, 2, 2, 2, 4246, 4247, 5, 248, 125, 2, 4247, 583, 3, 2, 2, 2, 4248,
	4250, 7, 169, 2, 2, 4249, 4251, 5, 700, 351, 2, 4250, 4249, 3, 2, 2, 2,
	4250, 4251, 3, 2, 2, 2, 4251, 4252, 3, 2, 2, 2, 4252, 4253, 7, 315, 2,
	2, 4253, 4255, 5, 252, 127, 2, 4254, 4256, 5, 682, 342, 2, 4255, 4254,
	3, 2, 2, 2, 4255, 4256, 3, 2, 2, 2, 4256, 4257, 3, 2, 2, 2, 4257, 4258,
	7, 476, 2, 2, 4258, 4259, 5, 248, 125, 2, 4259, 4261, 5, 690, 346, 2, 4260,
	4262, 5, 692, 347, 2, 4261, 4260, 3, 2, 2, 2, 4261, 4262, 3, 2, 2, 2, 4262,
	4267, 3, 2, 2, 2, 4263, 4266, 5, 578, 290, 2, 4264, 4266, 5, 580, 291,
	2, 4265, 4263, 3, 2, 2, 2, 4265, 4264, 3, 2, 2, 2, 4266, 4269, 3, 2, 2,
	2, 4267, 4265, 3, 2, 2, 2, 4267, 4268, 3, 2, 2, 2, 4268, 585, 3, 2, 2,
	2, 4269, 4267, 3, 2, 2, 2, 4270, 4271, 7, 169, 2, 2, 4271, 4273, 9, 73,
	2, 2, 4272, 4274, 5, 496, 249, 2, 4273, 4272, 3, 2, 2, 2, 4273, 4274, 3,
	2, 2, 2, 4274, 4275, 3, 2, 2, 2, 4275, 4279, 5, 238, 120, 2, 4276, 4278,
	5, 590, 296, 2, 4277, 4276, 3, 2, 2, 2, 4278, 4281, 3, 2, 2, 2, 4279, 4277,
	3, 2, 2, 2, 4279, 4280, 3, 2, 2, 2, 4280, 587, 3, 2, 2, 2, 4281, 4279,
	3, 2, 2, 2, 4282, 4283, 7, 86, 2, 2, 4283, 4285, 9, 73, 2, 2, 4284, 4286,
	5, 238, 120, 2, 4285, 4284, 3, 2, 2, 2, 4285, 4286, 3, 2, 2, 2, 4286, 4290,
	3, 2, 2, 2, 4287, 4289, 5, 592, 297, 2, 4288, 4287, 3, 2, 2, 2, 4289, 4292,
	3, 2, 2, 2, 4290, 4288, 3, 2, 2, 2, 4290, 4291, 3, 2, 2, 2, 4291, 589,
	3, 2, 2, 2, 4292, 4290, 3, 2, 2, 2, 4293, 4297, 5, 474, 238, 2, 4294, 4297,
	5, 470, 236, 2, 4295, 4297, 5, 472, 237, 2, 4296, 4293, 3, 2, 2, 2, 4296,
	4294, 3, 2, 2, 2, 4296, 4295, 3, 2, 2, 2, 4297, 591, 3, 2, 2, 2, 4298,
	4306, 5, 590, 296, 2, 4299, 4300, 7, 538, 2, 2, 4300, 4302, 7, 478, 2,
	2, 4301, 4303, 7, 25, 2, 2, 4302, 4301, 3, 2, 2, 2, 4302, 4303, 3, 2, 2,
	2, 4303, 4304, 3, 2, 2, 2, 4304, 4306, 9, 74, 2, 2, 4305, 4298, 3, 2, 2,
	2, 4305, 4299, 3, 2, 2, 2, 4306, 593, 3, 2, 2, 2, 4307, 4308, 7, 217, 2,
	2, 4308, 4310, 9, 73, 2, 2, 4309, 4311, 5, 498, 250, 2, 4310, 4309, 3,
	2, 2, 2, 4310, 4311, 3, 2, 2, 2, 4311, 4312, 3, 2, 2, 2, 4312, 4313, 5,
	238, 120, 2, 4313, 595, 3, 2, 2, 2, 4314, 4315, 7, 86, 2, 2, 4315, 4316,
	7, 325, 2, 2, 4316, 4317, 5, 598, 300, 2, 4317, 597, 3, 2, 2, 2, 4318,
	4319, 9, 75, 2, 2, 4319, 4320, 7, 72, 2, 2, 4320, 4343, 7, 73, 2, 2, 4321,
	4322, 7, 598, 2, 2, 4322, 4323, 7, 72, 2, 2, 4323, 4324, 7, 385, 2, 2,
	4324, 4343, 7, 349, 2, 2, 4325, 4326, 7, 598, 2, 2, 4326, 4327, 7, 109,
	2, 2, 4327, 4328, 7, 385, 2, 2, 4328, 4343, 7, 349, 2, 2, 4329, 4330, 7,
	557, 2, 2, 4330, 4334, 7, 702, 2, 2, 4331, 4332, 7, 272, 2, 2, 4332, 4333,
	7, 129, 2, 2, 4333, 4335, 5, 600, 301, 2, 4334, 4331, 3, 2, 2, 2, 4334,
	4335, 3, 2, 2, 2, 4335, 4340, 3, 2, 2, 2, 4336, 4337, 7, 457, 2, 2, 4337,
	4338, 7, 596, 2, 2, 4338, 4339, 7, 476, 2, 2, 4339, 4341, 7, 236, 2, 2,
	4340, 4336, 3, 2, 2, 2, 4340, 4341, 3, 2, 2, 2, 4341, 4343, 3, 2, 2, 2,
	4342, 4318, 3, 2, 2, 2, 4342, 4321, 3, 2, 2, 2, 4342, 4325, 3, 2, 2, 2,
	4342, 4329, 3, 2, 2, 2, 4343, 599, 3, 2, 2, 2, 4344, 4345, 9, 76, 2, 2,
	4345, 601, 3, 2, 2, 2, 4346, 4348, 7, 169, 2, 2, 4347, 4349, 5, 726, 364,
	2, 4348, 4347, 3, 2, 2, 2, 4348, 4349, 3, 2, 2, 2, 4349, 4350, 3, 2, 2,
	2, 4350, 4352, 7, 240, 2, 2, 4351, 4353, 5, 496, 249, 2, 4352, 4351, 3,
	2, 2, 2, 4352, 4353, 3, 2, 2, 2, 4353, 4354, 3, 2, 2, 2, 4354, 4355, 5,
	260, 131, 2, 4355, 4356, 7, 476, 2, 2, 4356, 4357, 7, 607, 2, 2, 4357,
	4364, 5, 728, 365, 2, 4358, 4359, 7, 476, 2, 2, 4359, 4361, 7, 152, 2,
	2, 4360, 4362, 7, 460, 2, 2, 4361, 4360, 3, 2, 2, 2, 4361, 4362, 3, 2,
	2, 2, 4362, 4363, 3, 2, 2, 2, 4363, 4365, 7, 520, 2, 2, 4364, 4358, 3,
	2, 2, 2, 4364, 4365, 3, 2, 2, 2, 4365, 4371, 3, 2, 2, 2, 4366, 4372, 7,
	226, 2, 2, 4367, 4372, 7, 209, 2, 2, 4368, 4369, 7, 209, 2, 2, 4369, 4370,
	7, 476, 2, 2, 4370, 4372, 7, 634, 2, 2, 4371, 4366, 3, 2, 2, 2, 4371, 4367,
	3, 2, 2, 2, 4371, 4368, 3, 2, 2, 2, 4371, 4372, 3, 2, 2, 2, 4372, 4375,
	3, 2, 2, 2, 4373, 4374, 7, 148, 2, 2, 4374, 4376, 5, 184, 93, 2, 4375,
	4373, 3, 2, 2, 2, 4375, 4376, 3, 2, 2, 2, 4376, 4377, 3, 2, 2, 2, 4377,
	4378, 7, 215, 2, 2, 4378, 4379, 5, 732, 367, 2, 4379, 603, 3, 2, 2, 2,
	4380, 4382, 7, 86, 2, 2, 4381, 4383, 5, 726, 364, 2, 4382, 4381, 3, 2,
	2, 2, 4382, 4383, 3, 2, 2, 2, 4383, 4384, 3, 2, 2, 2, 4384, 4385, 7, 240,
	2, 2, 4385, 4389, 5, 260, 131, 2, 4386, 4387, 7, 476, 2, 2, 4387, 4388,
	7, 607, 2, 2, 4388, 4390, 5, 728, 365, 2, 4389, 4386, 3, 2, 2, 2, 4389,
	4390, 3, 2, 2, 2, 4390, 4397, 3, 2, 2, 2, 4391, 4392, 7, 476, 2, 2, 4392,
	4394, 7, 152, 2, 2, 4393, 4395, 7, 460, 2, 2, 4394, 4393, 3, 2, 2, 2, 4394,
	4395, 3, 2, 2, 2, 4395, 4396, 3, 2, 2, 2, 4396, 4398, 7, 520, 2, 2, 4397,
	4391, 3, 2, 2, 2, 4397, 4398, 3, 2, 2, 2, 4398, 4402, 3, 2, 2, 2, 4399,
	4400, 7, 559, 2, 2, 4400, 4401, 7, 703, 2, 2, 4401, 4403, 5, 260, 131,
	2, 4402, 4399, 3, 2, 2, 2, 4402, 4403, 3, 2, 2, 2, 4403, 4409, 3, 2, 2,
	2, 4404, 4410, 7, 226, 2, 2, 4405, 4410, 7, 209, 2, 2, 4406, 4407, 7, 209,
	2, 2, 4407, 4408, 7, 476, 2, 2, 4408, 4410, 7, 634, 2, 2, 4409, 4404, 3,
	2, 2, 2, 4409, 4405, 3, 2, 2, 2, 4409, 4406, 3, 2, 2, 2, 4409, 4410, 3,
	2, 2, 2, 4410, 4413, 3, 2, 2, 2, 4411, 4412, 7, 148, 2, 2, 4412, 4414,
	5, 184, 93, 2, 4413, 4411, 3, 2, 2, 2, 4413, 4414, 3, 2, 2, 2, 4414, 4417,
	3, 2, 2, 2, 4415, 4416, 7, 215, 2, 2, 4416, 4418, 5, 732, 367, 2, 4417,
	4415, 3, 2, 2, 2, 4417, 4418, 3, 2, 2, 2, 4418, 605, 3, 2, 2, 2, 4419,
	4420, 7, 217, 2, 2, 4420, 4422, 7, 240, 2, 2, 4421, 4423, 5, 498, 250,
	2, 4422, 4421, 3, 2, 2, 2, 4422, 4423, 3, 2, 2, 2, 4423, 4424, 3, 2, 2,
	2, 4424, 4425, 5, 260, 131, 2, 4425, 607, 3, 2, 2, 2, 4426, 4428, 7, 169,
	2, 2, 4427, 4429, 5, 726, 364, 2, 4428, 4427, 3, 2, 2, 2, 4428, 4429, 3,
	2, 2, 2, 4429, 4430, 3, 2, 2, 2, 4430, 4431, 7, 280, 2, 2, 4431, 4432,
	5, 266, 134, 2, 4432, 4436, 7, 32, 2, 2, 4433, 4434, 5, 202, 102, 2, 4434,
	4435, 5, 448, 225, 2, 4435, 4437, 3, 2, 2, 2, 4436, 4433, 3, 2, 2, 2, 4436,
	4437, 3, 2, 2, 2, 4437, 4444, 3, 2, 2, 2, 4438, 4439, 7, 38, 2, 2, 4439,
	4440, 5, 202, 102, 2, 4440, 4441, 5, 448, 225, 2, 4441, 4443, 3, 2, 2,
	2, 4442, 4438, 3, 2, 2, 2, 4443, 4446, 3, 2, 2, 2, 4444, 4442, 3, 2, 2,
	2, 4444, 4445, 3, 2, 2, 2, 4445, 4447, 3, 2, 2, 2, 4446, 4444, 3, 2, 2,
	2, 4447, 4448, 7, 33, 2, 2, 4448, 4449, 7, 589, 2, 2, 4449, 4453, 5, 448,
	225, 2, 4450, 4452, 5, 736, 369, 2, 4451, 4450, 3, 2, 2, 2, 4452, 4455,
	3, 2, 2, 2, 4453, 4451, 3, 2, 2, 2, 4453, 4454, 3, 2, 2, 2, 4454, 4456,
	3, 2, 2, 2, 4455, 4453, 3, 2, 2, 2, 4456, 4457, 5, 732, 367, 2, 4457, 609,
	3, 2, 2, 2, 4458, 4459, 7, 86, 2, 2, 4459, 4460, 7, 280, 2, 2, 4460, 4464,
	5, 266, 134, 2, 4461, 4463, 5, 736, 369, 2, 4462, 4461, 3, 2, 2, 2, 4463,
	4466, 3, 2, 2, 2, 4464, 4462, 3, 2, 2, 2, 4464, 4465, 3, 2, 2, 2, 4465,
	611, 3, 2, 2, 2, 4466, 4464, 3, 2, 2, 2, 4467, 4468, 7, 217, 2, 2, 4468,
	4470, 7, 280, 2, 2, 4469, 4471, 5, 498, 250, 2, 4470, 4469, 3, 2, 2, 2,
	4470, 4471, 3, 2, 2, 2, 4471, 4472, 3, 2, 2, 2, 4472, 4473, 5, 266, 134,
	2, 4473, 613, 3, 2, 2, 2, 4474, 4476, 7, 169, 2, 2, 4475, 4477, 5, 726,
	364, 2, 4476, 4475, 3, 2, 2, 2, 4476, 4477, 3, 2, 2, 2, 4477, 4478, 3,
	2, 2, 2, 4478, 4479, 7, 525, 2, 2, 4479, 4480, 5, 266, 134, 2, 4480, 4482,
	7, 32, 2, 2, 4481, 4483, 5, 738, 370, 2, 4482, 4481, 3, 2, 2, 2, 4482,
	4483, 3, 2, 2, 2, 4483, 4488, 3, 2, 2, 2, 4484, 4485, 7, 38, 2, 2, 4485,
	4487, 5, 738, 370, 2, 4486, 4484, 3, 2, 2, 2, 4487, 4490, 3, 2, 2, 2, 4488,
	4486, 3, 2, 2, 2, 4488, 4489, 3, 2, 2, 2, 4489, 4491, 3, 2, 2, 2, 4490,
	4488, 3, 2, 2, 2, 4491, 4495, 7, 33, 2, 2, 4492, 4494, 5, 736, 369, 2,
	4493, 4492, 3, 2, 2, 2, 4494, 4497, 3, 2, 2, 2, 4495, 4493, 3, 2, 2, 2,
	4495, 4496, 3, 2, 2, 2, 4496, 4498, 3, 2, 2, 2, 4497, 4495, 3, 2, 2, 2,
	4498, 4499, 5, 732, 367, 2, 4499, 615, 3, 2, 2, 2, 4500, 4501, 7, 86, 2,
	2, 4501, 4502, 7, 525, 2, 2, 4502, 4506, 5, 266, 134, 2, 4503, 4505, 5,
	736, 369, 2, 4504, 4503, 3, 2, 2, 2, 4505, 4508, 3, 2, 2, 2, 4506, 4504,
	3, 2, 2, 2, 4506, 4507, 3, 2, 2, 2, 4507, 617, 3, 2, 2, 2, 4508, 4506,
	3, 2, 2, 2, 4509, 4510, 7, 217, 2, 2, 4510, 4512, 7, 525, 2, 2, 4511, 4513,
	5, 498, 250, 2, 4512, 4511, 3, 2, 2, 2, 4512, 4513, 3, 2, 2, 2, 4513, 4514,
	3, 2, 2, 2, 4514, 4515, 5, 266, 134, 2, 4515, 619, 3, 2, 2, 2, 4516, 4517,
	7, 169, 2, 2, 4517, 4518, 7, 624, 2, 2, 4518, 4519, 5, 262, 132, 2, 4519,
	4520, 7, 274, 2, 2, 4520, 4521, 7, 180, 2, 2, 4521, 4522, 7, 760, 2, 2,
	4522, 4523, 5, 264, 133, 2, 4523, 4524, 7, 485, 2, 2, 4524, 4525, 7, 32,
	2, 2, 4525, 4530, 5, 734, 368, 2, 4526, 4527, 7, 38, 2, 2, 4527, 4529,
	5, 734, 368, 2, 4528, 4526, 3, 2, 2, 2, 4529, 4532, 3, 2, 2, 2, 4530, 4528,
	3, 2, 2, 2, 4530, 4531, 3, 2, 2, 2, 4531, 4533, 3, 2, 2, 2, 4532, 4530,
	3, 2, 2, 2, 4533, 4534, 7, 33, 2, 2, 4534, 621, 3, 2, 2, 2, 4535, 4536,
	7, 86, 2, 2, 4536, 4537, 7, 624, 2, 2, 4537, 4538, 5, 262, 132, 2, 4538,
	4539, 7, 485, 2, 2, 4539, 4540, 7, 32, 2, 2, 4540, 4545, 5, 734, 368, 2,
	4541, 4542, 7, 38, 2, 2, 4542, 4544, 5, 734, 368, 2, 4543, 4541, 3, 2,
	2, 2, 4544, 4547, 3, 2, 2, 2, 4545, 4543, 3, 2, 2, 2, 4545, 4546, 3, 2,
	2, 2, 4546, 4548, 3, 2, 2, 2, 4547, 4545, 3, 2, 2, 2, 4548, 4549, 7, 33,
	2, 2, 4549, 623, 3, 2, 2, 2, 4550, 4551, 7, 217, 2, 2, 4551, 4553, 7, 624,
	2, 2, 4552, 4554, 5, 498, 250, 2, 4553, 4552, 3, 2, 2, 2, 4553, 4554, 3,
	2, 2, 2, 4554, 4555, 3, 2, 2, 2, 4555, 4556, 5, 262, 132, 2, 4556, 625,
	3, 2, 2, 2, 4557, 4560, 7, 169, 2, 2, 4558, 4559, 7, 486, 2, 2, 4559, 4561,
	7, 564, 2, 2, 4560, 4558, 3, 2, 2, 2, 4560, 4561, 3, 2, 2, 2, 4561, 4565,
	3, 2, 2, 2, 4562, 4563, 7, 84, 2, 2, 4563, 4564, 7, 25, 2, 2, 4564, 4566,
	9, 77, 2, 2, 4565, 4562, 3, 2, 2, 2, 4565, 4566, 3, 2, 2, 2, 4566, 4568,
	3, 2, 2, 2, 4567, 4569, 5, 726, 364, 2, 4568, 4567, 3, 2, 2, 2, 4568, 4569,
	3, 2, 2, 2, 4569, 4573, 3, 2, 2, 2, 4570, 4571, 7, 644, 2, 2, 4571, 4572,
	7, 618, 2, 2, 4572, 4574, 9, 78, 2, 2, 4573, 4570, 3, 2, 2, 2, 4573, 4574,
	3, 2, 2, 2, 4574, 4575, 3, 2, 2, 2, 4575, 4576, 7, 746, 2, 2, 4576, 4581,
	5, 268, 135, 2, 4577, 4578, 7, 32, 2, 2, 4578, 4579, 5, 280, 141, 2, 4579,
	4580, 7, 33, 2, 2, 4580, 4582, 3, 2, 2, 2, 4581, 4577, 3, 2, 2, 2, 4581,
	4582, 3, 2, 2, 2, 4582, 4583, 3, 2, 2, 2, 4583, 4584, 7, 92, 2, 2, 4584,
	4591, 5, 54, 28, 2, 4585, 4587, 7, 757, 2, 2, 4586, 4588, 9, 79, 2, 2,
	4587, 4586, 3, 2, 2, 2, 4587, 4588, 3, 2, 2, 2, 4588, 4589, 3, 2, 2, 2,
	4589, 4590, 7, 133, 2, 2, 4590, 4592, 7, 482, 2, 2, 4591, 4585, 3, 2, 2,
	2, 4591, 4592, 3, 2, 2, 2, 4592, 627, 3, 2, 2, 2, 4593, 4597, 7, 86, 2,
	2, 4594, 4595, 7, 84, 2, 2, 4595, 4596, 7, 25, 2, 2, 4596, 4598, 9, 77,
	2, 2, 4597, 4594, 3, 2, 2, 2, 4597, 4598, 3, 2, 2, 2, 4598, 4600, 3, 2,
	2, 2, 4599, 4601, 5, 726, 364, 2, 4600, 4599, 3, 2, 2, 2, 4600, 4601, 3,
	2, 2, 2, 4601, 4605, 3, 2, 2, 2, 4602, 4603, 7, 644, 2, 2, 4603, 4604,
	7, 618, 2, 2, 4604, 4606, 9, 78, 2, 2, 4605, 4602, 3, 2, 2, 2, 4605, 4606,
	3, 2, 2, 2, 4606, 4607, 3, 2, 2, 2, 4607, 4608, 7, 746, 2, 2, 4608, 4613,
	5, 268, 135, 2, 4609, 4610, 7, 32, 2, 2, 4610, 4611, 5, 280, 141, 2, 4611,
	4612, 7, 33, 2, 2, 4612, 4614, 3, 2, 2, 2, 4613, 4609, 3, 2, 2, 2, 4613,
	4614, 3, 2, 2, 2, 4614, 4615, 3, 2, 2, 2, 4615, 4616, 7, 92, 2, 2, 4616,
	4623, 5, 54, 28, 2, 4617, 4619, 7, 757, 2, 2, 4618, 4620, 9, 79, 2, 2,
	4619, 4618, 3, 2, 2, 2, 4619, 4620, 3, 2, 2, 2, 4620, 4621, 3, 2, 2, 2,
	4621, 4622, 7, 133, 2, 2, 4622, 4624, 7, 482, 2, 2, 4623, 4617, 3, 2, 2,
	2, 4623, 4624, 3, 2, 2, 2, 4624, 629, 3, 2, 2, 2, 4625, 4626, 7, 217, 2,
	2, 4626, 4628, 7, 746, 2, 2, 4627, 4629, 5, 498, 250, 2, 4628, 4627, 3,
	2, 2, 2, 4628, 4629, 3, 2, 2, 2, 4629, 4630, 3, 2, 2, 2, 4630, 4632, 5,
	278, 140, 2, 4631, 4633, 5, 570, 286, 2, 4632, 4631, 3, 2, 2, 2, 4632,
	4633, 3, 2, 2, 2, 4633, 631, 3, 2, 2, 2, 4634, 4637, 5, 634, 318, 2, 4635,
	4637, 5, 636, 319, 2, 4636, 4634, 3, 2, 2, 2, 4636, 4635, 3, 2, 2, 2, 4637,
	633, 3, 2, 2, 2, 4638, 4640, 7, 169, 2, 2, 4639, 4641, 7, 715, 2, 2, 4640,
	4639, 3, 2, 2, 2, 4640, 4641, 3, 2, 2, 2, 4641, 4642, 3, 2, 2, 2, 4642,
	4643, 7, 684, 2, 2, 4643, 4644, 5, 202, 102, 2, 4644, 4645, 7, 79, 2, 2,
	4645, 4646, 7, 183, 2, 2, 4646, 4650, 5, 184, 93, 2, 4647, 4648, 7, 261,
	2, 2, 4648, 4649, 7, 25, 2, 2, 4649, 4651, 5, 740, 371, 2, 4650, 4647,
	3, 2, 2, 2, 4650, 4651, 3, 2, 2, 2, 4651, 4655, 3, 2, 2, 2, 4652, 4653,
	7, 228, 2, 2, 4653, 4654, 7, 25, 2, 2, 4654, 4656, 5, 184, 93, 2, 4655,
	4652, 3, 2, 2, 2, 4655, 4656, 3, 2, 2, 2, 4656, 4662, 3, 2, 2, 2, 4657,
	4659, 7, 232, 2, 2, 4658, 4660, 7, 25, 2, 2, 4659, 4658, 3, 2, 2, 2, 4659,
	4660, 3, 2, 2, 2, 4660, 4661, 3, 2, 2, 2, 4661, 4663, 5, 184, 93, 2, 4662,
	4657, 3, 2, 2, 2, 4662, 4663, 3, 2, 2, 2, 4663, 635, 3, 2, 2, 2, 4664,
	4666, 7, 169, 2, 2, 4665, 4667, 7, 715, 2, 2, 4666, 4665, 3, 2, 2, 2, 4666,
	4667, 3, 2, 2, 2, 4667, 4668, 3, 2, 2, 2, 4668, 4669, 7, 684, 2, 2, 4669,
	4670, 5, 202, 102, 2, 4670, 4671, 7, 79, 2, 2, 4671, 4672, 7, 183, 2, 2,
	4672, 4673, 5, 184, 93, 2, 4673, 4674, 7, 729, 2, 2, 4674, 4675, 7, 378,
	2, 2, 4675, 4676, 7, 291, 2, 2, 4676, 4682, 5, 202, 102, 2, 4677, 4679,
	7, 254, 2, 2, 4678, 4680, 7, 25, 2, 2, 4679, 4678, 3, 2, 2, 2, 4679, 4680,
	3, 2, 2, 2, 4680, 4681, 3, 2, 2, 2, 4681, 4683, 5, 740, 371, 2, 4682, 4677,
	3, 2, 2, 2, 4682, 4683, 3, 2, 2, 2, 4683, 4689, 3, 2, 2, 2, 4684, 4686,
	7, 318, 2, 2, 4685, 4687, 7, 25, 2, 2, 4686, 4685, 3, 2, 2, 2, 4686, 4687,
	3, 2, 2, 2, 4687, 4688, 3, 2, 2, 2, 4688, 4690, 5, 740, 371, 2, 4689, 4684,
	3, 2, 2, 2, 4689, 4690, 3, 2, 2, 2, 4690, 4696, 3, 2, 2, 2, 4691, 4693,
	7, 98, 2, 2, 4692, 4694, 7, 25, 2, 2, 4693, 4692, 3, 2, 2, 2, 4693, 4694,
	3, 2, 2, 2, 4694, 4695, 3, 2, 2, 2, 4695, 4697, 5, 740, 371, 2, 4696, 4691,
	3, 2, 2, 2, 4696, 4697, 3, 2, 2, 2, 4697, 4703, 3, 2, 2, 2, 4698, 4700,
	7, 418, 2, 2, 4699, 4701, 7, 25, 2, 2, 4700, 4699, 3, 2, 2, 2, 4700, 4701,
	3, 2, 2, 2, 4701, 4702, 3, 2, 2, 2, 4702, 4704, 5, 740, 371, 2, 4703, 4698,
	3, 2, 2, 2, 4703, 4704, 3, 2, 2, 2, 4704, 4710, 3, 2, 2, 2, 4705, 4707,
	7, 458, 2, 2, 4706, 4708, 7, 25, 2, 2, 4707, 4706, 3, 2, 2, 2, 4707, 4708,
	3, 2, 2, 2, 4708, 4709, 3, 2, 2, 2, 4709, 4711, 5, 202, 102, 2, 4710, 4705,
	3, 2, 2, 2, 4710, 4711, 3, 2, 2, 2, 4711, 4713, 3, 2, 2, 2, 4712, 4714,
	7, 749, 2, 2, 4713, 4712, 3, 2, 2, 2, 4713, 4714, 3, 2, 2, 2, 4714, 4720,
	3, 2, 2, 2, 4715, 4717, 7, 148, 2, 2, 4716, 4718, 7, 25, 2, 2, 4717, 4716,
	3, 2, 2, 2, 4717, 4718, 3, 2, 2, 2, 4718, 4719, 3, 2, 2, 2, 4719, 4721,
	5, 184, 93, 2, 4720, 4715, 3, 2, 2, 2, 4720, 4721, 3, 2, 2, 2, 4721, 4727,
	3, 2, 2, 2, 4722, 4724, 7, 232, 2, 2, 4723, 4725, 7, 25, 2, 2, 4724, 4723,
	3, 2, 2, 2, 4724, 4725, 3, 2, 2, 2, 4725, 4726, 3, 2, 2, 2, 4726, 4728,
	5, 202, 102, 2, 4727, 4722, 3, 2, 2, 2, 4727, 4728, 3, 2, 2, 2, 4728, 637,
	3, 2, 2, 2, 4729, 4732, 5, 642, 322, 2, 4730, 4732, 5, 640, 321, 2, 4731,
	4729, 3, 2, 2, 2, 4731, 4730, 3, 2, 2, 2, 4732, 639, 3, 2, 2, 2, 4733,
	4735, 7, 86, 2, 2, 4734, 4736, 7, 715, 2, 2, 4735, 4734, 3, 2, 2, 2, 4735,
	4736, 3, 2, 2, 2, 4736, 4737, 3, 2, 2, 2, 4737, 4738, 7, 684, 2, 2, 4738,
	4739, 5, 202, 102, 2, 4739, 4740, 9, 80, 2, 2, 4740, 4741, 7, 183, 2, 2,
	4741, 4745, 5, 184, 93, 2, 4742, 4743, 7, 318, 2, 2, 4743, 4744, 7, 25,
	2, 2, 4744, 4746, 5, 740, 371, 2, 4745, 4742, 3, 2, 2, 2, 4745, 4746, 3,
	2, 2, 2, 4746, 4748, 3, 2, 2, 2, 4747, 4749, 7, 749, 2, 2, 4748, 4747,
	3, 2, 2, 2, 4748, 4749, 3, 2, 2, 2, 4749, 4753, 3, 2, 2, 2, 4750, 4751,
	7, 559, 2, 2, 4751, 4752, 7, 703, 2, 2, 4752, 4754, 5, 202, 102, 2, 4753,
	4750, 3, 2, 2, 2, 4753, 4754, 3, 2, 2, 2, 4754, 4760, 3, 2, 2, 2, 4755,
	4757, 7, 232, 2, 2, 4756, 4758, 7, 25, 2, 2, 4757, 4756, 3, 2, 2, 2, 4757,
	4758, 3, 2, 2, 2, 4758, 4759, 3, 2, 2, 2, 4759, 4761, 5, 202, 102, 2, 4760,
	4755, 3, 2, 2, 2, 4760, 4761, 3, 2, 2, 2, 4761, 641, 3, 2, 2, 2, 4762,
	4764, 7, 86, 2, 2, 4763, 4765, 7, 715, 2, 2, 4764, 4763, 3, 2, 2, 2, 4764,
	4765, 3, 2, 2, 2, 4765, 4766, 3, 2, 2, 2, 4766, 4767, 7, 684, 2, 2, 4767,
	4770, 5, 202, 102, 2, 4768, 4769, 7, 626, 2, 2, 4769, 4771, 9, 81, 2, 2,
	4770, 4768, 3, 2, 2, 2, 4770, 4771, 3, 2, 2, 2, 4771, 4772, 3, 2, 2, 2,
	4772, 4774, 7, 228, 2, 2, 4773, 4775, 7, 25, 2, 2, 4774, 4773, 3, 2, 2,
	2, 4774, 4775, 3, 2, 2, 2, 4775, 4776, 3, 2, 2, 2, 4776, 4777, 5, 184,
	93, 2, 4777, 4781, 3, 2, 2, 2, 4778, 4779, 7, 559, 2, 2, 4779, 4780, 7,
	703, 2, 2, 4780, 4782, 5, 202, 102, 2, 4781, 4778, 3, 2, 2, 2, 4781, 4782,
	3, 2, 2, 2, 4782, 4788, 3, 2, 2, 2, 4783, 4785, 7, 232, 2, 2, 4784, 4786,
	7, 25, 2, 2, 4785, 4784, 3, 2, 2, 2, 4785, 4786, 3, 2, 2, 2, 4786, 4787,
	3, 2, 2, 2, 4787, 4789, 5, 202, 102, 2, 4788, 4783, 3, 2, 2, 2, 4788, 4789,
	3, 2, 2, 2, 4789, 643, 3, 2, 2, 2, 4790, 4792, 7, 217, 2, 2, 4791, 4793,
	7, 715, 2, 2, 4792, 4791, 3, 2, 2, 2, 4792, 4793, 3, 2, 2, 2, 4793, 4794,
	3, 2, 2, 2, 4794, 4795, 7, 684, 2, 2, 4795, 4801, 5, 202, 102, 2, 4796,
	4798, 7, 232, 2, 2, 4797, 4799, 7, 25, 2, 2, 4798, 4797, 3, 2, 2, 2, 4798,
	4799, 3, 2, 2, 2, 4799, 4800, 3, 2, 2, 2, 4800, 4802, 5, 202, 102, 2, 4801,
	4796, 3, 2, 2, 2, 4801, 4802, 3, 2, 2, 2, 4802, 645, 3, 2, 2, 2, 4803,
	4804, 7, 169, 2, 2, 4804, 4805, 7, 378, 2, 2, 4805, 4806, 7, 291, 2, 2,
	4806, 4807, 5, 202, 102, 2, 4807, 4808, 7, 79, 2, 2, 4808, 4809, 7, 716,
	2, 2, 4809, 4815, 5, 184, 93, 2, 4810, 4812, 7, 318, 2, 2, 4811, 4813,
	7, 25, 2, 2, 4812, 4811, 3, 2, 2, 2, 4812, 4813, 3, 2, 2, 2, 4813, 4814,
	3, 2, 2, 2, 4814, 4816, 5, 740, 371, 2, 4815, 4810, 3, 2, 2, 2, 4815, 4816,
	3, 2, 2, 2, 4816, 4822, 3, 2, 2, 2, 4817, 4819, 7, 717, 2, 2, 4818, 4820,
	7, 25, 2, 2, 4819, 4818, 3, 2, 2, 2, 4819, 4820, 3, 2, 2, 2, 4820, 4821,
	3, 2, 2, 2, 4821, 4823, 5, 740, 371, 2, 4822, 4817, 3, 2, 2, 2, 4822, 4823,
	3, 2, 2, 2, 4823, 4829, 3, 2, 2, 2, 4824, 4826, 7, 546, 2, 2, 4825, 4827,
	7, 25, 2, 2, 4826, 4825, 3, 2, 2, 2, 4826, 4827, 3, 2, 2, 2, 4827, 4828,
	3, 2, 2, 2, 4828, 4830, 5, 740, 371, 2, 4829, 4824, 3, 2, 2, 2, 4829, 4830,
	3, 2, 2, 2, 4830, 4836, 3, 2, 2, 2, 4831, 4833, 7, 458, 2, 2, 4832, 4834,
	7, 25, 2, 2, 4833, 4832, 3, 2, 2, 2, 4833, 4834, 3, 2, 2, 2, 4834, 4835,
	3, 2, 2, 2, 4835, 4837, 5, 202, 102, 2, 4836, 4831, 3, 2, 2, 2, 4836, 4837,
	3, 2, 2, 2, 4837, 4839, 3, 2, 2, 2, 4838, 4840, 7, 749, 2, 2, 4839, 4838,
	3, 2, 2, 2, 4839, 4840, 3, 2, 2, 2, 4840, 4846, 3, 2, 2, 2, 4841, 4843,
	7, 148, 2, 2, 4842, 4844, 7, 25, 2, 2, 4843, 4842, 3, 2, 2, 2, 4843, 4844,
	3, 2, 2, 2, 4844, 4845, 3, 2, 2, 2, 4845, 4847, 5, 184, 93, 2, 4846, 4841,
	3, 2, 2, 2, 4846, 4847, 3, 2, 2, 2, 4847, 4853, 3, 2, 2, 2, 4848, 4850,
	7, 232, 2, 2, 4849, 4851, 7, 25, 2, 2, 4850, 4849, 3, 2, 2, 2, 4850, 4851,
	3, 2, 2, 2, 4851, 4852, 3, 2, 2, 2, 4852, 4854, 5, 202, 102, 2, 4853, 4848,
	3, 2, 2, 2, 4853, 4854, 3, 2, 2, 2, 4854, 647, 3, 2, 2, 2, 4855, 4856,
	7, 86, 2, 2, 4856, 4857, 7, 378, 2, 2, 4857, 4858, 7, 291, 2, 2, 4858,
	4859, 5, 202, 102, 2, 4859, 4860, 7, 79, 2, 2, 4860, 4861, 7, 716, 2, 2,
	4861, 4867, 5, 184, 93, 2, 4862, 4864, 7, 318, 2, 2, 4863, 4865, 7, 25,
	2, 2, 4864, 4863, 3, 2, 2, 2, 4864, 4865, 3, 2, 2, 2, 4865, 4866, 3, 2,
	2, 2, 4866, 4868, 5, 740, 371, 2, 4867, 4862, 3, 2, 2, 2, 4867, 4868, 3,
	2, 2, 2, 4868, 4870, 3, 2, 2, 2, 4869, 4871, 7, 749, 2, 2, 4870, 4869,
	3, 2, 2, 2, 4870, 4871, 3, 2, 2, 2, 4871, 4877, 3, 2, 2, 2, 4872, 4874,
	7, 232, 2, 2, 4873, 4875, 7, 25, 2, 2, 4874, 4873, 3, 2, 2, 2, 4874, 4875,
	3, 2, 2, 2, 4875, 4876, 3, 2, 2, 2, 4876, 4878, 5, 202, 102, 2, 4877, 4872,
	3, 2, 2, 2, 4877, 4878, 3, 2, 2, 2, 4878, 649, 3, 2, 2, 2, 4879, 4880,
	7, 217, 2, 2, 4880, 4881, 7, 378, 2, 2, 4881, 4882, 7, 291, 2, 2, 4882,
	4888, 5, 202, 102, 2, 4883, 4885, 7, 232, 2, 2, 4884, 4886, 7, 25, 2, 2,
	4885, 4884, 3, 2, 2, 2, 4885, 4886, 3, 2, 2, 2, 4886, 4887, 3, 2, 2, 2,
	4887, 4889, 5, 202, 102, 2, 4888, 4883, 3, 2, 2, 2, 4888, 4889, 3, 2, 2,
	2, 4889, 651, 3, 2, 2, 2, 4890, 4892, 7, 169, 2, 2, 4891, 4893, 5, 726,
	364, 2, 4892, 4891, 3, 2, 2, 2, 4892, 4893, 3, 2, 2, 2, 4893, 4894, 3,
	2, 2, 2, 4894, 4895, 7, 706, 2, 2, 4895, 4896, 5, 310, 156, 2, 4896, 4897,
	5, 312, 157, 2, 4897, 4898, 5, 324, 163, 2, 4898, 4899, 7, 476, 2, 2, 4899,
	4900, 5, 248, 125, 2, 4900, 4901, 7, 272, 2, 2, 4901, 4902, 7, 222, 2,
	2, 4902, 4904, 7, 600, 2, 2, 4903, 4905, 5, 326, 164, 2, 4904, 4903, 3,
	2, 2, 2, 4904, 4905, 3, 2, 2, 2, 4905, 4906, 3, 2, 2, 2, 4906, 4907, 5,
	732, 367, 2, 4907, 653, 3, 2, 2, 2, 4908, 4909, 7, 217, 2, 2, 4909, 4911,
	7, 706, 2, 2, 4910, 4912, 5, 498, 250, 2, 4911, 4910, 3, 2, 2, 2, 4911,
	4912, 3, 2, 2, 2, 4912, 4916, 3, 2, 2, 2, 4913, 4914, 5, 238, 120, 2, 4914,
	4915, 7, 21, 2, 2, 4915, 4917, 3, 2, 2, 2, 4916, 4913, 3, 2, 2, 2, 4916,
	4917, 3, 2, 2, 2, 4917, 4918, 3, 2, 2, 2, 4918, 4919, 5, 310, 156, 2, 4919,
	655, 3, 2, 2, 2, 4920, 4921, 7, 559, 2, 2, 4921, 4922, 7, 682, 2, 2, 4922,
	4923, 5, 248, 125, 2, 4923, 4924, 7, 703, 2, 2, 4924, 4931, 5, 248, 125,
	2, 4925, 4926, 5, 248, 125, 2, 4926, 4927, 7, 703, 2, 2, 4927, 4928, 5,
	248, 125, 2, 4928, 4930, 3, 2, 2, 2, 4929, 4925, 3, 2, 2, 2, 4930, 4933,
	3, 2, 2, 2, 4931, 4929, 3, 2, 2, 2, 4931, 4932, 3, 2, 2, 2, 4932, 657,
	3, 2, 2, 2, 4933, 4931, 3, 2, 2, 2, 4934, 4935, 7, 32, 2, 2, 4935, 4936,
	5, 566, 284, 2, 4936, 4937, 7, 33, 2, 2, 4937, 659, 3, 2, 2, 2, 4938, 4939,
	5, 202, 102, 2, 4939, 4941, 5, 662, 332, 2, 4940, 4942, 5, 672, 337, 2,
	4941, 4940, 3, 2, 2, 2, 4941, 4942, 3, 2, 2, 2, 4942, 661, 3, 2, 2, 2,
	4943, 4969, 5, 448, 225, 2, 4944, 4946, 5, 664, 333, 2, 4945, 4944, 3,
	2, 2, 2, 4946, 4949, 3, 2, 2, 2, 4947, 4945, 3, 2, 2, 2, 4947, 4948, 3,
	2, 2, 2, 4948, 4970, 3, 2, 2, 2, 4949, 4947, 3, 2, 2, 2, 4950, 4952, 5,
	492, 247, 2, 4951, 4950, 3, 2, 2, 2, 4951, 4952, 3, 2, 2, 2, 4952, 4954,
	3, 2, 2, 2, 4953, 4955, 5, 670, 336, 2, 4954, 4953, 3, 2, 2, 2, 4954, 4955,
	3, 2, 2, 2, 4955, 4956, 3, 2, 2, 2, 4956, 4957, 7, 92, 2, 2, 4957, 4958,
	7, 32, 2, 2, 4958, 4959, 5, 328, 165, 2, 4959, 4961, 7, 33, 2, 2, 4960,
	4962, 9, 82, 2, 2, 4961, 4960, 3, 2, 2, 2, 4961, 4962, 3, 2, 2, 2, 4962,
	4966, 3, 2, 2, 2, 4963, 4965, 5, 664, 333, 2, 4964, 4963, 3, 2, 2, 2, 4965,
	4968, 3, 2, 2, 2, 4966, 4964, 3, 2, 2, 2, 4966, 4967, 3, 2, 2, 2, 4967,
	4970, 3, 2, 2, 2, 4968, 4966, 3, 2, 2, 2, 4969, 4947, 3, 2, 2, 2, 4969,
	4951, 3, 2, 2, 2, 4970, 663, 3, 2, 2, 2, 4971, 4973, 7, 460, 2, 2, 4972,
	4971, 3, 2, 2, 2, 4972, 4973, 3, 2, 2, 2, 4973, 4974, 3, 2, 2, 2, 4974,
	5016, 7, 466, 2, 2, 4975, 4976, 7, 460, 2, 2, 4976, 5016, 7, 612, 2, 2,
	4977, 4984, 7, 195, 2, 2, 4978, 4985, 5, 476, 239, 2, 4979, 4985, 5, 478,
	240, 2, 4980, 4981, 7, 32, 2, 2, 4981, 4982, 5, 328, 165, 2, 4982, 4983,
	7, 33, 2, 2, 4983, 4985, 3, 2, 2, 2, 4984, 4978, 3, 2, 2, 2, 4984, 4979,
	3, 2, 2, 2, 4984, 4980, 3, 2, 2, 2, 4985, 5016, 3, 2, 2, 2, 4986, 4987,
	7, 476, 2, 2, 4987, 4988, 7, 726, 2, 2, 4988, 5016, 5, 478, 240, 2, 4989,
	5016, 7, 99, 2, 2, 4990, 4991, 7, 622, 2, 2, 4991, 4992, 7, 195, 2, 2,
	4992, 5016, 7, 738, 2, 2, 4993, 4995, 7, 522, 2, 2, 4994, 4993, 3, 2, 2,
	2, 4994, 4995, 3, 2, 2, 2, 4995, 4996, 3, 2, 2, 2, 4996, 5016, 7, 349,
	2, 2, 4997, 4999, 7, 721, 2, 2, 4998, 5000, 7, 349, 2, 2, 4999, 4998, 3,
	2, 2, 2, 4999, 5000, 3, 2, 2, 2, 5000, 5016, 3, 2, 2, 2, 5001, 5002, 7,
	148, 2, 2, 5002, 5016, 5, 184, 93, 2, 5003, 5016, 5, 492, 247, 2, 5004,
	5005, 7, 146, 2, 2, 5005, 5016, 5, 480, 241, 2, 5006, 5007, 7, 668, 2,
	2, 5007, 5016, 5, 482, 242, 2, 5008, 5009, 7, 657, 2, 2, 5009, 5016, 7,
	776, 2, 2, 5010, 5012, 5, 564, 283, 2, 5011, 5010, 3, 2, 2, 2, 5011, 5012,
	3, 2, 2, 2, 5012, 5013, 3, 2, 2, 2, 5013, 5016, 5, 666, 334, 2, 5014, 5016,
	5, 668, 335, 2, 5015, 4972, 3, 2, 2, 2, 5015, 4975, 3, 2, 2, 2, 5015, 4977,
	3, 2, 2, 2, 5015, 4986, 3, 2, 2, 2, 5015, 4989, 3, 2, 2, 2, 5015, 4990,
	3, 2, 2, 2, 5015, 4994, 3, 2, 2, 2, 5015, 4997, 3, 2, 2, 2, 5015, 5001,
	3, 2, 2, 2, 5015, 5003, 3, 2, 2, 2, 5015, 5004, 3, 2, 2, 2, 5015, 5006,
	3, 2, 2, 2, 5015, 5008, 3, 2, 2, 2, 5015, 5011, 3, 2, 2, 2, 5015, 5014,
	3, 2, 2, 2, 5016, 665, 3, 2, 2, 2, 5017, 5018, 7, 133, 2, 2, 5018, 5019,
	7, 32, 2, 2, 5019, 5020, 5, 328, 165, 2, 5020, 5021, 7, 33, 2, 2, 5021,
	667, 3, 2, 2, 2, 5022, 5024, 7, 460, 2, 2, 5023, 5022, 3, 2, 2, 2, 5023,
	5024, 3, 2, 2, 2, 5024, 5025, 3, 2, 2, 2, 5025, 5026, 7, 231, 2, 2, 5026,
	669, 3, 2, 2, 2, 5027, 5028, 7, 282, 2, 2, 5028, 5029, 7, 87, 2, 2, 5029,
	671, 3, 2, 2, 2, 5030, 5031, 7, 549, 2, 2, 5031, 5032, 5, 248, 125, 2,
	5032, 5039, 5, 684, 343, 2, 5033, 5034, 7, 413, 2, 2, 5034, 5040, 7, 278,
	2, 2, 5035, 5036, 7, 413, 2, 2, 5036, 5040, 7, 499, 2, 2, 5037, 5038, 7,
	413, 2, 2, 5038, 5040, 7, 632, 2, 2, 5039, 5033, 3, 2, 2, 2, 5039, 5035,
	3, 2, 2, 2, 5039, 5037, 3, 2, 2, 2, 5039, 5040, 3, 2, 2, 2, 5040, 5042,
	3, 2, 2, 2, 5041, 5043, 5, 674, 338, 2, 5042, 5041, 3, 2, 2, 2, 5042, 5043,
	3, 2, 2, 2, 5043, 673, 3, 2, 2, 2, 5044, 5045, 7, 476, 2, 2, 5045, 5046,
	7, 726, 2, 2, 5046, 5050, 5, 676, 339, 2, 5047, 5048, 7, 476, 2, 2, 5048,
	5049, 7, 201, 2, 2, 5049, 5051, 5, 676, 339, 2, 5050, 5047, 3, 2, 2, 2,
	5050, 5051, 3, 2, 2, 2, 5051, 5061, 3, 2, 2, 2, 5052, 5053, 7, 476, 2,
	2, 5053, 5054, 7, 201, 2, 2, 5054, 5058, 5, 676, 339, 2, 5055, 5056, 7,
	476, 2, 2, 5056, 5057, 7, 726, 2, 2, 5057, 5059, 5, 676, 339, 2, 5058,
	5055, 3, 2, 2, 2, 5058, 5059, 3, 2, 2, 2, 5059, 5061, 3, 2, 2, 2, 5060,
	5044, 3, 2, 2, 2, 5060, 5052, 3, 2, 2, 2, 5061, 675, 3, 2, 2, 2, 5062,
	5071, 7, 583, 2, 2, 5063, 5071, 7, 122, 2, 2, 5064, 5065, 7, 626, 2, 2,
	5065, 5071, 7, 466, 2, 2, 5066, 5067, 7, 457, 2, 2, 5067, 5071, 7, 77,
	2, 2, 5068, 5069, 7, 626, 2, 2, 5069, 5071, 7, 195, 2, 2, 5070, 5062, 3,
	2, 2, 2, 5070, 5063, 3, 2, 2, 2, 5070, 5064, 3, 2, 2, 2, 5070, 5066, 3,
	2, 2, 2, 5070, 5068, 3, 2, 2, 2, 5071, 677, 3, 2, 2, 2, 5072, 5074, 5,
	252, 127, 2, 5073, 5075, 5, 682, 342, 2, 5074, 5073, 3, 2, 2, 2, 5074,
	5075, 3, 2, 2, 2, 5075, 679, 3, 2, 2, 2, 5076, 5077, 9, 83, 2, 2, 5077,
	681, 3, 2, 2, 2, 5078, 5079, 9, 84, 2, 2, 5079, 5080, 5, 680, 341, 2, 5080,
	683, 3, 2, 2, 2, 5081, 5082, 7, 32, 2, 2, 5082, 5087, 5, 686, 344, 2, 5083,
	5084, 7, 38, 2, 2, 5084, 5086, 5, 686, 344, 2, 5085, 5083, 3, 2, 2, 2,
	5086, 5089, 3, 2, 2, 2, 5087, 5085, 3, 2, 2, 2, 5087, 5088, 3, 2, 2, 2,
	5088, 5090, 3, 2, 2, 2, 5089, 5087, 3, 2, 2, 2, 5090, 5091, 7, 33, 2, 2,
	5091, 685, 3, 2, 2, 2, 5092, 5094, 5, 250, 126, 2, 5093, 5095, 5, 488,
	245, 2, 5094, 5093, 3, 2, 2, 2, 5094, 5095, 3, 2, 2, 2, 5095, 5097, 3,
	2, 2, 2, 5096, 5098, 5, 484, 243, 2, 5097, 5096, 3, 2, 2, 2, 5097, 5098,
	3, 2, 2, 2, 5098, 687, 3, 2, 2, 2, 5099, 5107, 5, 686, 344, 2, 5100, 5101,
	7, 32, 2, 2, 5101, 5102, 5, 328, 165, 2, 5102, 5104, 7, 33, 2, 2, 5103,
	5105, 5, 484, 243, 2, 5104, 5103, 3, 2, 2, 2, 5104, 5105, 3, 2, 2, 2, 5105,
	5107, 3, 2, 2, 2, 5106, 5099, 3, 2, 2, 2, 5106, 5100, 3, 2, 2, 2, 5107,
	689, 3, 2, 2, 2, 5108, 5109, 7, 32, 2, 2, 5109, 5114, 5, 688, 345, 2, 5110,
	5111, 7, 38, 2, 2, 5111, 5113, 5, 688, 345, 2, 5112, 5110, 3, 2, 2, 2,
	5113, 5116, 3, 2, 2, 2, 5114, 5112, 3, 2, 2, 2, 5114, 5115, 3, 2, 2, 2,
	5115, 5117, 3, 2, 2, 2, 5116, 5114, 3, 2, 2, 2, 5117, 5118, 7, 33, 2, 2,
	5118, 691, 3, 2, 2, 2, 5119, 5122, 5, 694, 348, 2, 5120, 5122, 5, 682,
	342, 2, 5121, 5119, 3, 2, 2, 2, 5121, 5120, 3, 2, 2, 2, 5122, 693, 3, 2,
	2, 2, 5123, 5125, 7, 351, 2, 2, 5124, 5126, 7, 25, 2, 2, 5125, 5124, 3,
	2, 2, 2, 5125, 5126, 3, 2, 2, 2, 5126, 5127, 3, 2, 2, 2, 5127, 5132, 7,
	776, 2, 2, 5128, 5129, 7, 148, 2, 2, 5129, 5132, 5, 186, 94, 2, 5130, 5132,
	5, 696, 349, 2, 5131, 5123, 3, 2, 2, 2, 5131, 5128, 3, 2, 2, 2, 5131, 5130,
	3, 2, 2, 2, 5132, 695, 3, 2, 2, 2, 5133, 5134, 9, 85, 2, 2, 5134, 697,
	3, 2, 2, 2, 5135, 5137, 7, 32, 2, 2, 5136, 5135, 3, 2, 2, 2, 5136, 5137,
	3, 2, 2, 2, 5137, 5138, 3, 2, 2, 2, 5138, 5139, 7, 365, 2, 2, 5139, 5141,
	5, 248, 125, 2, 5140, 5142, 7, 33, 2, 2, 5141, 5140, 3, 2, 2, 2, 5141,
	5142, 3, 2, 2, 2, 5142, 699, 3, 2, 2, 2, 5143, 5144, 9, 86, 2, 2, 5144,
	701, 3, 2, 2, 2, 5145, 5152, 5, 704, 353, 2, 5146, 5148, 7, 38, 2, 2, 5147,
	5146, 3, 2, 2, 2, 5147, 5148, 3, 2, 2, 2, 5148, 5149, 3, 2, 2, 2, 5149,
	5151, 5, 704, 353, 2, 5150, 5147, 3, 2, 2, 2, 5151, 5154, 3, 2, 2, 2, 5152,
	5150, 3, 2, 2, 2, 5152, 5153, 3, 2, 2, 2, 5153, 703, 3, 2, 2, 2, 5154,
	5152, 3, 2, 2, 2, 5155, 5157, 7, 232, 2, 2, 5156, 5158, 7, 25, 2, 2, 5157,
	5156, 3, 2, 2, 2, 5157, 5158, 3, 2, 2, 2, 5158, 5159, 3, 2, 2, 2, 5159,
	5287, 5, 308, 155, 2, 5160, 5162, 7, 613, 2, 2, 5161, 5163, 7, 25, 2, 2,
	5162, 5161, 3, 2, 2, 2, 5162, 5163, 3, 2, 2, 2, 5163, 5167, 3, 2, 2, 2,
	5164, 5168, 7, 466, 2, 2, 5165, 5168, 5, 184, 93, 2, 5166, 5168, 5, 202,
	102, 2, 5167, 5164, 3, 2, 2, 2, 5167, 5165, 3, 2, 2, 2, 5167, 5166, 3,
	2, 2, 2, 5168, 5287, 3, 2, 2, 2, 5169, 5171, 7, 417, 2, 2, 5170, 5172,
	7, 25, 2, 2, 5171, 5170, 3, 2, 2, 2, 5171, 5172, 3, 2, 2, 2, 5172, 5173,
	3, 2, 2, 2, 5173, 5287, 7, 776, 2, 2, 5174, 5176, 7, 435, 2, 2, 5175, 5177,
	7, 25, 2, 2, 5176, 5175, 3, 2, 2, 2, 5176, 5177, 3, 2, 2, 2, 5177, 5178,
	3, 2, 2, 2, 5178, 5287, 7, 776, 2, 2, 5179, 5181, 7, 102, 2, 2, 5180, 5182,
	7, 25, 2, 2, 5181, 5180, 3, 2, 2, 2, 5181, 5182, 3, 2, 2, 2, 5182, 5183,
	3, 2, 2, 2, 5183, 5287, 7, 776, 2, 2, 5184, 5186, 7, 503, 2, 2, 5185, 5187,
	7, 25, 2, 2, 5186, 5185, 3, 2, 2, 2, 5186, 5187, 3, 2, 2, 2, 5187, 5188,
	3, 2, 2, 2, 5188, 5287, 5, 184, 93, 2, 5189, 5191, 7, 148, 2, 2, 5190,
	5192, 7, 25, 2, 2, 5191, 5190, 3, 2, 2, 2, 5191, 5192, 3, 2, 2, 2, 5192,
	5193, 3, 2, 2, 2, 5193, 5287, 5, 184, 93, 2, 5194, 5196, 7, 155, 2, 2,
	5195, 5197, 7, 25, 2, 2, 5196, 5195, 3, 2, 2, 2, 5196, 5197, 3, 2, 2, 2,
	5197, 5198, 3, 2, 2, 2, 5198, 5287, 5, 452, 227, 2, 5199, 5201, 7, 228,
	2, 2, 5200, 5202, 7, 25, 2, 2, 5201, 5200, 3, 2, 2, 2, 5201, 5202, 3, 2,
	2, 2, 5202, 5203, 3, 2, 2, 2, 5203, 5287, 5, 452, 227, 2, 5204, 5206, 7,
	99, 2, 2, 5205, 5207, 7, 25, 2, 2, 5206, 5205, 3, 2, 2, 2, 5206, 5207,
	3, 2, 2, 2, 5207, 5208, 3, 2, 2, 2, 5208, 5287, 7, 776, 2, 2, 5209, 5211,
	7, 496, 2, 2, 5210, 5212, 7, 25, 2, 2, 5211, 5210, 3, 2, 2, 2, 5211, 5212,
	3, 2, 2, 2, 5212, 5213, 3, 2, 2, 2, 5213, 5287, 9, 74, 2, 2, 5214, 5216,
	9, 87, 2, 2, 5215, 5217, 7, 25, 2, 2, 5216, 5215, 3, 2, 2, 2, 5216, 5217,
	3, 2, 2, 2, 5217, 5218, 3, 2, 2, 2, 5218, 5287, 9, 74, 2, 2, 5219, 5221,
	9, 88, 2, 2, 5220, 5222, 7, 25, 2, 2, 5221, 5220, 3, 2, 2, 2, 5221, 5222,
	3, 2, 2, 2, 5222, 5223, 3, 2, 2, 2, 5223, 5287, 7, 776, 2, 2, 5224, 5226,
	7, 200, 2, 2, 5225, 5227, 7, 25, 2, 2, 5226, 5225, 3, 2, 2, 2, 5226, 5227,
	3, 2, 2, 2, 5227, 5228, 3, 2, 2, 2, 5228, 5287, 7, 776, 2, 2, 5229, 5231,
	7, 603, 2, 2, 5230, 5232, 7, 25, 2, 2, 5231, 5230, 3, 2, 2, 2, 5231, 5232,
	3, 2, 2, 2, 5232, 5233, 3, 2, 2, 2, 5233, 5287, 9, 89, 2, 2, 5234, 5236,
	7, 720, 2, 2, 5235, 5237, 7, 25, 2, 2, 5236, 5235, 3, 2, 2, 2, 5236, 5237,
	3, 2, 2, 2, 5237, 5238, 3, 2, 2, 2, 5238, 5239, 7, 32, 2, 2, 5239, 5240,
	5, 276, 139, 2, 5240, 5241, 7, 33, 2, 2, 5241, 5287, 3, 2, 2, 2, 5242,
	5287, 5, 474, 238, 2, 5243, 5287, 5, 470, 236, 2, 5244, 5246, 7, 323, 2,
	2, 5245, 5247, 7, 25, 2, 2, 5246, 5245, 3, 2, 2, 2, 5246, 5247, 3, 2, 2,
	2, 5247, 5248, 3, 2, 2, 2, 5248, 5287, 9, 90, 2, 2, 5249, 5250, 7, 180,
	2, 2, 5250, 5252, 7, 208, 2, 2, 5251, 5253, 7, 25, 2, 2, 5252, 5251, 3,
	2, 2, 2, 5252, 5253, 3, 2, 2, 2, 5253, 5254, 3, 2, 2, 2, 5254, 5287, 5,
	452, 227, 2, 5255, 5256, 7, 315, 2, 2, 5256, 5258, 7, 208, 2, 2, 5257,
	5259, 7, 25, 2, 2, 5258, 5257, 3, 2, 2, 2, 5258, 5259, 3, 2, 2, 2, 5259,
	5260, 3, 2, 2, 2, 5260, 5287, 5, 452, 227, 2, 5261, 5263, 7, 684, 2, 2,
	5262, 5264, 7, 25, 2, 2, 5263, 5262, 3, 2, 2, 2, 5263, 5264, 3, 2, 2, 2,
	5264, 5265, 3, 2, 2, 2, 5265, 5287, 5, 202, 102, 2, 5266, 5267, 7, 668,
	2, 2, 5267, 5287, 9, 91, 2, 2, 5268, 5270, 7, 158, 2, 2, 5269, 5271, 7,
	25, 2, 2, 5270, 5269, 3, 2, 2, 2, 5270, 5271, 3, 2, 2, 2, 5271, 5272, 3,
	2, 2, 2, 5272, 5287, 5, 452, 227, 2, 5273, 5275, 7, 351, 2, 2, 5274, 5276,
	7, 25, 2, 2, 5275, 5274, 3, 2, 2, 2, 5275, 5276, 3, 2, 2, 2, 5276, 5277,
	3, 2, 2, 2, 5277, 5287, 7, 776, 2, 2, 5278, 5280, 7, 234, 2, 2, 5279, 5281,
	7, 25, 2, 2, 5280, 5279, 3, 2, 2, 2, 5280, 5281, 3, 2, 2, 2, 5281, 5282,
	3, 2, 2, 2, 5282, 5287, 5, 184, 93, 2, 5283, 5284, 7, 614, 2, 2, 5284,
	5285, 7, 25, 2, 2, 5285, 5287, 5, 184, 93, 2, 5286, 5155, 3, 2, 2, 2, 5286,
	5160, 3, 2, 2, 2, 5286, 5169, 3, 2, 2, 2, 5286, 5174, 3, 2, 2, 2, 5286,
	5179, 3, 2, 2, 2, 5286, 5184, 3, 2, 2, 2, 5286, 5189, 3, 2, 2, 2, 5286,
	5194, 3, 2, 2, 2, 5286, 5199, 3, 2, 2, 2, 5286, 5204, 3, 2, 2, 2, 5286,
	5209, 3, 2, 2, 2, 5286, 5214, 3, 2, 2, 2, 5286, 5219, 3, 2, 2, 2, 5286,
	5224, 3, 2, 2, 2, 5286, 5229, 3, 2, 2, 2, 5286, 5234, 3, 2, 2, 2, 5286,
	5242, 3, 2, 2, 2, 5286, 5243, 3, 2, 2, 2, 5286, 5244, 3, 2, 2, 2, 5286,
	5249, 3, 2, 2, 2, 5286, 5255, 3, 2, 2, 2, 5286, 5261, 3, 2, 2, 2, 5286,
	5266, 3, 2, 2, 2, 5286, 5268, 3, 2, 2, 2, 5286, 5273, 3, 2, 2, 2, 5286,
	5278, 3, 2, 2, 2, 5286, 5283, 3, 2, 2, 2, 5287, 705, 3, 2, 2, 2, 5288,
	5289, 7, 169, 2, 2, 5289, 5290, 7, 486, 2, 2, 5290, 5291, 7, 564, 2, 2,
	5291, 5292, 7, 642, 2, 2, 5292, 5293, 7, 548, 2, 2, 5293, 5294, 7, 681,
	2, 2, 5294, 5298, 7, 776, 2, 2, 5295, 5297, 5, 710, 356, 2, 5296, 5295,
	3, 2, 2, 2, 5297, 5300, 3, 2, 2, 2, 5298, 5296, 3, 2, 2, 2, 5298, 5299,
	3, 2, 2, 2, 5299, 5316, 3, 2, 2, 2, 5300, 5298, 3, 2, 2, 2, 5301, 5302,
	7, 169, 2, 2, 5302, 5303, 7, 642, 2, 2, 5303, 5304, 7, 548, 2, 2, 5304,
	5306, 7, 681, 2, 2, 5305, 5307, 5, 496, 249, 2, 5306, 5305, 3, 2, 2, 2,
	5306, 5307, 3, 2, 2, 2, 5307, 5308, 3, 2, 2, 2, 5308, 5312, 7, 776, 2,
	2, 5309, 5311, 5, 710, 356, 2, 5310, 5309, 3, 2, 2, 2, 5311, 5314, 3, 2,
	2, 2, 5312, 5310, 3, 2, 2, 2, 5312, 5313, 3, 2, 2, 2, 5313, 5316, 3, 2,
	2, 2, 5314, 5312, 3, 2, 2, 2, 5315, 5288, 3, 2, 2, 2, 5315, 5301, 3, 2,
	2, 2, 5316, 707, 3, 2, 2, 2, 5317, 5318, 7, 217, 2, 2, 5318, 5319, 7, 642,
	2, 2, 5319, 5320, 7, 548, 2, 2, 5320, 5322, 7, 681, 2, 2, 5321, 5323, 5,
	496, 249, 2, 5322, 5321, 3, 2, 2, 2, 5322, 5323, 3, 2, 2, 2, 5323, 5324,
	3, 2, 2, 2, 5324, 5325, 7, 776, 2, 2, 5325, 709, 3, 2, 2, 2, 5326, 5327,
	7, 446, 2, 2, 5327, 5339, 5, 184, 93, 2, 5328, 5329, 7, 198, 2, 2, 5329,
	5339, 5, 184, 93, 2, 5330, 5331, 7, 489, 2, 2, 5331, 5332, 5, 184, 93,
	2, 5332, 5333, 7, 308, 2, 2, 5333, 5334, 7, 118, 2, 2, 5334, 5335, 7, 776,
	2, 2, 5335, 5339, 3, 2, 2, 2, 5336, 5337, 7, 205, 2, 2, 5337, 5339, 5,
	184, 93, 2, 5338, 5326, 3, 2, 2, 2, 5338, 5328, 3, 2, 2, 2, 5338, 5330,
	3, 2, 2, 2, 5338, 5336, 3, 2, 2, 2, 5339, 711, 3, 2, 2, 2, 5340, 5344,
	7, 263, 2, 2, 5341, 5342, 7, 81, 2, 2, 5342, 5344, 5, 250, 126, 2, 5343,
	5340, 3, 2, 2, 2, 5343, 5341, 3, 2, 2, 2, 5344, 713, 3, 2, 2, 2, 5345,
	5346, 7, 32, 2, 2, 5346, 5351, 5, 716, 359, 2, 5347, 5348, 7, 38, 2, 2,
	5348, 5350, 5, 716, 359, 2, 5349, 5347, 3, 2, 2, 2, 5350, 5353, 3, 2, 2,
	2, 5351, 5349, 3, 2, 2, 2, 5351, 5352, 3, 2, 2, 2, 5352, 5354, 3, 2, 2,
	2, 5353, 5351, 3, 2, 2, 2, 5354, 5355, 7, 33, 2, 2, 5355, 715, 3, 2, 2,
	2, 5356, 5357, 7, 500, 2, 2, 5357, 5369, 5, 318, 160, 2, 5358, 5367, 7,
	739, 2, 2, 5359, 5360, 7, 363, 2, 2, 5360, 5361, 7, 691, 2, 2, 5361, 5368,
	5, 718, 360, 2, 5362, 5363, 7, 313, 2, 2, 5363, 5364, 7, 32, 2, 2, 5364,
	5365, 5, 720, 361, 2, 5365, 5366, 7, 33, 2, 2, 5366, 5368, 3, 2, 2, 2,
	5367, 5359, 3, 2, 2, 2, 5367, 5362, 3, 2, 2, 2, 5368, 5370, 3, 2, 2, 2,
	5369, 5358, 3, 2, 2, 2, 5369, 5370, 3, 2, 2, 2, 5370, 5374, 3, 2, 2, 2,
	5371, 5373, 5, 722, 362, 2, 5372, 5371, 3, 2, 2, 2, 5373, 5376, 3, 2, 2,
	2, 5374, 5372, 3, 2, 2, 2, 5374, 5375, 3, 2, 2, 2, 5375, 5388, 3, 2, 2,
	2, 5376, 5374, 3, 2, 2, 2, 5377, 5378, 7, 32, 2, 2, 5378, 5383, 5, 724,
	363, 2, 5379, 5380, 7, 38, 2, 2, 5380, 5382, 5, 724, 363, 2, 5381, 5379,
	3, 2, 2, 2, 5382, 5385, 3, 2, 2, 2, 5383, 5381, 3, 2, 2, 2, 5383, 5384,
	3, 2, 2, 2, 5384, 5386, 3, 2, 2, 2, 5385, 5383, 3, 2, 2, 2, 5386, 5387,
	7, 33, 2, 2, 5387, 5389, 3, 2, 2, 2, 5388, 5377, 3, 2, 2, 2, 5388, 5389,
	3, 2, 2, 2, 5389, 717, 3, 2, 2, 2, 5390, 5393, 7, 32, 2, 2, 5391, 5394,
	5, 328, 165, 2, 5392, 5394, 5, 720, 361, 2, 5393, 5391, 3, 2, 2, 2, 5393,
	5392, 3, 2, 2, 2, 5394, 5395, 3, 2, 2, 2, 5395, 5396, 7, 33, 2, 2, 5396,
	5399, 3, 2, 2, 2, 5397, 5399, 7, 414, 2, 2, 5398, 5390, 3, 2, 2, 2, 5398,
	5397, 3, 2, 2, 2, 5399, 719, 3, 2, 2, 2, 5400, 5405, 5, 328, 165, 2, 5401,
	5402, 7, 38, 2, 2, 5402, 5404, 5, 328, 165, 2, 5403, 5401, 3, 2, 2, 2,
	5404, 5407, 3, 2, 2, 2, 5405, 5403, 3, 2, 2, 2, 5405, 5406, 3, 2, 2, 2,
	5406, 721, 3, 2, 2, 2, 5407, 5405, 3, 2, 2, 2, 5408, 5410, 7, 668, 2, 2,
	5409, 5408, 3, 2, 2, 2, 5409, 5410, 3, 2, 2, 2, 5410, 5411, 3, 2, 2, 2,
	5411, 5413, 7, 232, 2, 2, 5412, 5414, 7, 25, 2, 2, 5413, 5412, 3, 2, 2,
	2, 5413, 5414, 3, 2, 2, 2, 5414, 5415, 3, 2, 2, 2, 5415, 5449, 5, 202,
	102, 2, 5416, 5418, 7, 148, 2, 2, 5417, 5419, 7, 25, 2, 2, 5418, 5417,
	3, 2, 2, 2, 5418, 5419, 3, 2, 2, 2, 5419, 5420, 3, 2, 2, 2, 5420, 5449,
	5, 184, 93, 2, 5421, 5422, 7, 180, 2, 2, 5422, 5424, 7, 208, 2, 2, 5423,
	5425, 7, 25, 2, 2, 5424, 5423, 3, 2, 2, 2, 5424, 5425, 3, 2, 2, 2, 5425,
	5426, 3, 2, 2, 2, 5426, 5449, 5, 184, 93, 2, 5427, 5428, 7, 315, 2, 2,
	5428, 5430, 7, 208, 2, 2, 5429, 5431, 7, 25, 2, 2, 5430, 5429, 3, 2, 2,
	2, 5430, 5431, 3, 2, 2, 2, 5431, 5432, 3, 2, 2, 2, 5432, 5449, 5, 184,
	93, 2, 5433, 5435, 7, 417, 2, 2, 5434, 5436, 7, 25, 2, 2, 5435, 5434, 3,
	2, 2, 2, 5435, 5436, 3, 2, 2, 2, 5436, 5437, 3, 2, 2, 2, 5437, 5449, 7,
	776, 2, 2, 5438, 5440, 7, 435, 2, 2, 5439, 5441, 7, 25, 2, 2, 5440, 5439,
	3, 2, 2, 2, 5440, 5441, 3, 2, 2, 2, 5441, 5442, 3, 2, 2, 2, 5442, 5449,
	7, 776, 2, 2, 5443, 5445, 7, 684, 2, 2, 5444, 5446, 7, 25, 2, 2, 5445,
	5444, 3, 2, 2, 2, 5445, 5446, 3, 2, 2, 2, 5446, 5447, 3, 2, 2, 2, 5447,
	5449, 5, 202, 102, 2, 5448, 5409, 3, 2, 2, 2, 5448, 5416, 3, 2, 2, 2, 5448,
	5421, 3, 2, 2, 2, 5448, 5427, 3, 2, 2, 2, 5448, 5433, 3, 2, 2, 2, 5448,
	5438, 3, 2, 2, 2, 5448, 5443, 3, 2, 2, 2, 5449, 723, 3, 2, 2, 2, 5450,
	5451, 7, 675, 2, 2, 5451, 5455, 5, 202, 102, 2, 5452, 5454, 5, 722, 362,
	2, 5453, 5452, 3, 2, 2, 2, 5454, 5457, 3, 2, 2, 2, 5455, 5453, 3, 2, 2,
	2, 5455, 5456, 3, 2, 2, 2, 5456, 725, 3, 2, 2, 2, 5457, 5455, 3, 2, 2,
	2, 5458, 5459, 7, 197, 2, 2, 5459, 5466, 7, 25, 2, 2, 5460, 5467, 5, 258,
	130, 2, 5461, 5464, 7, 177, 2, 2, 5462, 5463, 7, 32, 2, 2, 5463, 5465,
	7, 33, 2, 2, 5464, 5462, 3, 2, 2, 2, 5464, 5465, 3, 2, 2, 2, 5465, 5467,
	3, 2, 2, 2, 5466, 5460, 3, 2, 2, 2, 5466, 5461, 3, 2, 2, 2, 5467, 727,
	3, 2, 2, 2, 5468, 5469, 7, 96, 2, 2, 5469, 5474, 5, 730, 366, 2, 5470,
	5471, 7, 16, 2, 2, 5471, 5473, 5, 438, 220, 2, 5472, 5470, 3, 2, 2, 2,
	5473, 5476, 3, 2, 2, 2, 5474, 5472, 3, 2, 2, 2, 5474, 5475, 3, 2, 2, 2,
	5475, 5502, 3, 2, 2, 2, 5476, 5474, 3, 2, 2, 2, 5477, 5478, 7, 242, 2,
	2, 5478, 5488, 5, 440, 221, 2, 5479, 5480, 7, 662, 2, 2, 5480, 5485, 5,
	730, 366, 2, 5481, 5482, 7, 16, 2, 2, 5482, 5484, 5, 438, 220, 2, 5483,
	5481, 3, 2, 2, 2, 5484, 5487, 3, 2, 2, 2, 5485, 5483, 3, 2, 2, 2, 5485,
	5486, 3, 2, 2, 2, 5486, 5489, 3, 2, 2, 2, 5487, 5485, 3, 2, 2, 2, 5488,
	5479, 3, 2, 2, 2, 5488, 5489, 3, 2, 2, 2, 5489, 5499, 3, 2, 2, 2, 5490,
	5491, 7, 230, 2, 2, 5491, 5496, 5, 730, 366, 2, 5492, 5493, 7, 16, 2, 2,
	5493, 5495, 5, 438, 220, 2, 5494, 5492, 3, 2, 2, 2, 5495, 5498, 3, 2, 2,
	2, 5496, 5494, 3, 2, 2, 2, 5496, 5497, 3, 2, 2, 2, 5497, 5500, 3, 2, 2,
	2, 5498, 5496, 3, 2, 2, 2, 5499, 5490, 3, 2, 2, 2, 5499, 5500, 3, 2, 2,
	2, 5500, 5502, 3, 2, 2, 2, 5501, 5468, 3, 2, 2, 2, 5501, 5477, 3, 2, 2,
	2, 5502, 729, 3, 2, 2, 2, 5503, 5508, 7, 176, 2, 2, 5504, 5508, 5, 186,
	94, 2, 5505, 5508, 5, 188, 95, 2, 5506, 5508, 5, 328, 165, 2, 5507, 5503,
	3, 2, 2, 2, 5507, 5504, 3, 2, 2, 2, 5507, 5505, 3, 2, 2, 2, 5507, 5506,
	3, 2, 2, 2, 5508, 731, 3, 2, 2, 2, 5509, 5512, 5, 742, 372, 2, 5510, 5512,
	5, 744, 373, 2, 5511, 5509, 3, 2, 2, 2, 5511, 5510, 3, 2, 2, 2, 5512, 733,
	3, 2, 2, 2, 5513, 5514, 7, 302, 2, 2, 5514, 5528, 5, 184, 93, 2, 5515,
	5516, 7, 181, 2, 2, 5516, 5528, 5, 184, 93, 2, 5517, 5518, 7, 730, 2, 2,
	5518, 5528, 5, 184, 93, 2, 5519, 5520, 7, 503, 2, 2, 5520, 5528, 5, 184,
	93, 2, 5521, 5522, 7, 638, 2, 2, 5522, 5528, 5, 184, 93, 2, 5523, 5524,
	7, 495, 2, 2, 5524, 5528, 5, 184, 93, 2, 5525, 5526, 7, 515, 2, 2, 5526,
	5528, 5, 188, 95, 2, 5527, 5513, 3, 2, 2, 2, 5527, 5515, 3, 2, 2, 2, 5527,
	5517, 3, 2, 2, 2, 5527, 5519, 3, 2, 2, 2, 5527, 5521, 3, 2, 2, 2, 5527,
	5523, 3, 2, 2, 2, 5527, 5525, 3, 2, 2, 2, 5528, 735, 3, 2, 2, 2, 5529,
	5530, 7, 148, 2, 2, 5530, 5553, 5, 184, 93, 2, 5531, 5532, 7, 354, 2, 2,
	5532, 5553, 7, 644, 2, 2, 5533, 5535, 7, 460, 2, 2, 5534, 5533, 3, 2, 2,
	2, 5534, 5535, 3, 2, 2, 2, 5535, 5536, 3, 2, 2, 2, 5536, 5553, 7, 206,
	2, 2, 5537, 5538, 7, 164, 2, 2, 5538, 5548, 7, 644, 2, 2, 5539, 5540, 7,
	457, 2, 2, 5540, 5548, 7, 644, 2, 2, 5541, 5542, 7, 539, 2, 2, 5542, 5543,
	7, 644, 2, 2, 5543, 5548, 7, 180, 2, 2, 5544, 5545, 7, 438, 2, 2, 5545,
	5546, 7, 644, 2, 2, 5546, 5548, 7, 180, 2, 2, 5547, 5537, 3, 2, 2, 2, 5547,
	5539, 3, 2, 2, 2, 5547, 5541, 3, 2, 2, 2, 5547, 5544, 3, 2, 2, 2, 5548,
	5553, 3, 2, 2, 2, 5549, 5550, 7, 644, 2, 2, 5550, 5551, 7, 618, 2, 2, 5551,
	5553, 9, 78, 2, 2, 5552, 5529, 3, 2, 2, 2, 5552, 5531, 3, 2, 2, 2, 5552,
	5534, 3, 2, 2, 2, 5552, 5547, 3, 2, 2, 2, 5552, 5549, 3, 2, 2, 2, 5553,
	737, 3, 2, 2, 2, 5554, 5556, 9, 92, 2, 2, 5555, 5554, 3, 2, 2, 2, 5555,
	5556, 3, 2, 2, 2, 5556, 5557, 3, 2, 2, 2, 5557, 5558, 5, 202, 102, 2, 5558,
	5559, 5, 448, 225, 2, 5559, 739, 3, 2, 2, 2, 5560, 5563, 7, 770, 2, 2,
	5561, 5563, 5, 188, 95, 2, 5562, 5560, 3, 2, 2, 2, 5562, 5561, 3, 2, 2,
	2, 5563, 741, 3, 2, 2, 2, 5564, 5565, 5, 746, 374, 2, 5565, 743, 3, 2,
	2, 2, 5566, 5567, 5, 748, 375, 2, 5567, 745, 3, 2, 2, 2, 5568, 5585, 5,
	522, 262, 2, 5569, 5585, 5, 534, 268, 2, 5570, 5585, 5, 574, 288, 2, 5571,
	5585, 5, 582, 292, 2, 5572, 5585, 5, 4, 3, 2, 5573, 5585, 5, 24, 13, 2,
	5574, 5585, 5, 32, 17, 2, 5575, 5585, 5, 46, 24, 2, 5576, 5585, 5, 54,
	28, 2, 5577, 5585, 5, 70, 36, 2, 5578, 5585, 5, 838, 420, 2, 5579, 5585,
	5, 748, 375, 2, 5580, 5585, 5, 750, 376, 2, 5581, 5585, 5, 752, 377, 2,
	5582, 5585, 5, 770, 386, 2, 5583, 5585, 5, 780, 391, 2, 5584, 5568, 3,
	2, 2, 2, 5584, 5569, 3, 2, 2, 2, 5584, 5570, 3, 2, 2, 2, 5584, 5571, 3,
	2, 2, 2, 5584, 5572, 3, 2, 2, 2, 5584, 5573, 3, 2, 2, 2, 5584, 5574, 3,
	2, 2, 2, 5584, 5575, 3, 2, 2, 2, 5584, 5576, 3, 2, 2, 2, 5584, 5577, 3,
	2, 2, 2, 5584, 5578, 3, 2, 2, 2, 5584, 5579, 3, 2, 2, 2, 5584, 5580, 3,
	2, 2, 2, 5584, 5581, 3, 2, 2, 2, 5584, 5582, 3, 2, 2, 2, 5584, 5583, 3,
	2, 2, 2, 5585, 5587, 3, 2, 2, 2, 5586, 5588, 7, 44, 2, 2, 5587, 5586, 3,
	2, 2, 2, 5587, 5588, 3, 2, 2, 2, 5588, 747, 3, 2, 2, 2, 5589, 5590, 5,
	502, 252, 2, 5590, 5591, 7, 15, 2, 2, 5591, 5593, 3, 2, 2, 2, 5592, 5589,
	3, 2, 2, 2, 5592, 5593, 3, 2, 2, 2, 5593, 5594, 3, 2, 2, 2, 5594, 5598,
	7, 105, 2, 2, 5595, 5597, 5, 746, 374, 2, 5596, 5595, 3, 2, 2, 2, 5597,
	5600, 3, 2, 2, 2, 5598, 5596, 3, 2, 2, 2, 5598, 5599, 3, 2, 2, 2, 5599,
	5601, 3, 2, 2, 2, 5600, 5598, 3, 2, 2, 2, 5601, 5603, 7, 229, 2, 2, 5602,
	5604, 5, 502, 252, 2, 5603, 5602, 3, 2, 2, 2, 5603, 5604, 3, 2, 2, 2, 5604,
	5606, 3, 2, 2, 2, 5605, 5607, 7, 44, 2, 2, 5606, 5605, 3, 2, 2, 2, 5606,
	5607, 3, 2, 2, 2, 5607, 749, 3, 2, 2, 2, 5608, 5609, 7, 194, 2, 2, 5609,
	5614, 5, 216, 109, 2, 5610, 5611, 7, 38, 2, 2, 5611, 5613, 5, 216, 109,
	2, 5612, 5610, 3, 2, 2, 2, 5613, 5616, 3, 2, 2, 2, 5614, 5612, 3, 2, 2,
	2, 5614, 5615, 3, 2, 2, 2, 5615, 5617, 3, 2, 2, 2, 5616, 5614, 3, 2, 2,
	2, 5617, 5622, 5, 448, 225, 2, 5618, 5619, 7, 195, 2, 2, 5619, 5621, 5,
	346, 174, 2, 5620, 5618, 3, 2, 2, 2, 5621, 5624, 3, 2, 2, 2, 5622, 5620,
	3, 2, 2, 2, 5622, 5623, 3, 2, 2, 2, 5623, 751, 3, 2, 2, 2, 5624, 5622,
	3, 2, 2, 2, 5625, 5634, 5, 754, 378, 2, 5626, 5634, 5, 756, 379, 2, 5627,
	5634, 5, 758, 380, 2, 5628, 5634, 5, 760, 381, 2, 5629, 5634, 5, 762, 382,
	2, 5630, 5634, 5, 764, 383, 2, 5631, 5634, 5, 766, 384, 2, 5632, 5634,
	5, 768, 385, 2, 5633, 5625, 3, 2, 2, 2, 5633, 5626, 3, 2, 2, 2, 5633, 5627,
	3, 2, 2, 2, 5633, 5628, 3, 2, 2, 2, 5633, 5629, 3, 2, 2, 2, 5633, 5630,
	3, 2, 2, 2, 5633, 5631, 3, 2, 2, 2, 5633, 5632, 3, 2, 2, 2, 5634, 753,
	3, 2, 2, 2, 5635, 5637, 7, 124, 2, 2, 5636, 5638, 5, 328, 165, 2, 5637,
	5636, 3, 2, 2, 2, 5637, 5638, 3, 2, 2, 2, 5638, 5647, 3, 2, 2, 2, 5639,
	5640, 7, 753, 2, 2, 5640, 5641, 5, 328, 165, 2, 5641, 5643, 7, 692, 2,
	2, 5642, 5644, 5, 746, 374, 2, 5643, 5642, 3, 2, 2, 2, 5644, 5645, 3, 2,
	2, 2, 5645, 5643, 3, 2, 2, 2, 5645, 5646, 3, 2, 2, 2, 5646, 5648, 3, 2,
	2, 2, 5647, 5639, 3, 2, 2, 2, 5648, 5649, 3, 2, 2, 2, 5649, 5647, 3, 2,
	2, 2, 5649, 5650, 3, 2, 2, 2, 5650, 5657, 3, 2, 2, 2, 5651, 5653, 7, 223,
	2, 2, 5652, 5654, 5, 746, 374, 2, 5653, 5652, 3, 2, 2, 2, 5654, 5655, 3,
	2, 2, 2, 5655, 5653, 3, 2, 2, 2, 5655, 5656, 3, 2, 2, 2, 5656, 5658, 3,
	2, 2, 2, 5657, 5651, 3, 2, 2, 2, 5657, 5658, 3, 2, 2, 2, 5658, 5659, 3,
	2, 2, 2, 5659, 5660, 7, 229, 2, 2, 5660, 5661, 7, 124, 2, 2, 5661, 755,
	3, 2, 2, 2, 5662, 5663, 7, 309, 2, 2, 5663, 5664, 5, 328, 165, 2, 5664,
	5666, 7, 692, 2, 2, 5665, 5667, 5, 746, 374, 2, 5666, 5665, 3, 2, 2, 2,
	5667, 5668, 3, 2, 2, 2, 5668, 5666, 3, 2, 2, 2, 5668, 5669, 3, 2, 2, 2,
	5669, 5680, 3, 2, 2, 2, 5670, 5671, 7, 224, 2, 2, 5671, 5672, 5, 328, 165,
	2, 5672, 5674, 7, 692, 2, 2, 5673, 5675, 5, 746, 374, 2, 5674, 5673, 3,
	2, 2, 2, 5675, 5676, 3, 2, 2, 2, 5676, 5674, 3, 2, 2, 2, 5676, 5677, 3,
	2, 2, 2, 5677, 5679, 3, 2, 2, 2, 5678, 5670, 3, 2, 2, 2, 5679, 5682, 3,
	2, 2, 2, 5680, 5678, 3, 2, 2, 2, 5680, 5681, 3, 2, 2, 2, 5681, 5689, 3,
	2, 2, 2, 5682, 5680, 3, 2, 2, 2, 5683, 5685, 7, 223, 2, 2, 5684, 5686,
	5, 746, 374, 2, 5685, 5684, 3, 2, 2, 2, 5686, 5687, 3, 2, 2, 2, 5687, 5685,
	3, 2, 2, 2, 5687, 5688, 3, 2, 2, 2, 5688, 5690, 3, 2, 2, 2, 5689, 5683,
	3, 2, 2, 2, 5689, 5690, 3, 2, 2, 2, 5690, 5691, 3, 2, 2, 2, 5691, 5692,
	7, 229, 2, 2, 5692, 5693, 7, 309, 2, 2, 5693, 757, 3, 2, 2, 2, 5694, 5695,
	7, 344, 2, 2, 5695, 5696, 5, 502, 252, 2, 5696, 759, 3, 2, 2, 2, 5697,
	5698, 7, 360, 2, 2, 5698, 5699, 5, 502, 252, 2, 5699, 761, 3, 2, 2, 2,
	5700, 5701, 5, 502, 252, 2, 5701, 5702, 7, 15, 2, 2, 5702, 5704, 3, 2,
	2, 2, 5703, 5700, 3, 2, 2, 2, 5703, 5704, 3, 2, 2, 2, 5704, 5705, 3, 2,
	2, 2, 5705, 5707, 7, 383, 2, 2, 5706, 5708, 5, 746, 374, 2, 5707, 5706,
	3, 2, 2, 2, 5708, 5709, 3, 2, 2, 2, 5709, 5707, 3, 2, 2, 2, 5709, 5710,
	3, 2, 2, 2, 5710, 5711, 3, 2, 2, 2, 5711, 5712, 7, 229, 2, 2, 5712, 5714,
	7, 383, 2, 2, 5713, 5715, 5, 502, 252, 2, 5714, 5713, 3, 2, 2, 2, 5714,
	5715, 3, 2, 2, 2, 5715, 763, 3, 2, 2, 2, 5716, 5717, 5, 502, 252, 2, 5717,
	5718, 7, 15, 2, 2, 5718, 5720, 3, 2, 2, 2, 5719, 5716, 3, 2, 2, 2, 5719,
	5720, 3, 2, 2, 2, 5720, 5721, 3, 2, 2, 2, 5721, 5723, 7, 562, 2, 2, 5722,
	5724, 5, 746, 374, 2, 5723, 5722, 3, 2, 2, 2, 5724, 5725, 3, 2, 2, 2, 5725,
	5723, 3, 2, 2, 2, 5725, 5726, 3, 2, 2, 2, 5726, 5727, 3, 2, 2, 2, 5727,
	5728, 7, 725, 2, 2, 5728, 5729, 5, 328, 165, 2, 5729, 5730, 7, 229, 2,
	2, 5730, 5732, 7, 562, 2, 2, 5731, 5733, 5, 502, 252, 2, 5732, 5731, 3,
	2, 2, 2, 5732, 5733, 3, 2, 2, 2, 5733, 765, 3, 2, 2, 2, 5734, 5735, 7,
	586, 2, 2, 5735, 5736, 5, 328, 165, 2, 5736, 767, 3, 2, 2, 2, 5737, 5738,
	5, 502, 252, 2, 5738, 5739, 7, 15, 2, 2, 5739, 5741, 3, 2, 2, 2, 5740,
	5737, 3, 2, 2, 2, 5740, 5741, 3, 2, 2, 2, 5741, 5742, 3, 2, 2, 2, 5742,
	5743, 7, 755, 2, 2, 5743, 5744, 5, 328, 165, 2, 5744, 5746, 7, 215, 2,
	2, 5745, 5747, 5, 746, 374, 2, 5746, 5745, 3, 2, 2, 2, 5747, 5748, 3, 2,
	2, 2, 5748, 5746, 3, 2, 2, 2, 5748, 5749, 3, 2, 2, 2, 5749, 5750, 3, 2,
	2, 2, 5750, 5751, 7, 229, 2, 2, 5751, 5753, 7, 755, 2, 2, 5752, 5754, 5,
	502, 252, 2, 5753, 5752, 3, 2, 2, 2, 5753, 5754, 3, 2, 2, 2, 5754, 769,
	3, 2, 2, 2, 5755, 5760, 5, 772, 387, 2, 5756, 5760, 5, 774, 388, 2, 5757,
	5760, 5, 776, 389, 2, 5758, 5760, 5, 778, 390, 2, 5759, 5755, 3, 2, 2,
	2, 5759, 5756, 3, 2, 2, 2, 5759, 5757, 3, 2, 2, 2, 5759, 5758, 3, 2, 2,
	2, 5760, 771, 3, 2, 2, 2, 5761, 5762, 7, 139, 2, 2, 5762, 5763, 5, 504,
	253, 2, 5763, 773, 3, 2, 2, 2, 5764, 5765, 7, 194, 2, 2, 5765, 5766, 5,
	504, 253, 2, 5766, 5767, 7, 178, 2, 2, 5767, 5768, 7, 272, 2, 2, 5768,
	5769, 5, 54, 28, 2, 5769, 775, 3, 2, 2, 2, 5770, 5775, 7, 259, 2, 2, 5771,
	5773, 7, 456, 2, 2, 5772, 5771, 3, 2, 2, 2, 5772, 5773, 3, 2, 2, 2, 5773,
	5774, 3, 2, 2, 2, 5774, 5776, 7, 277, 2, 2, 5775, 5772, 3, 2, 2, 2, 5775,
	5776, 3, 2, 2, 2, 5776, 5777, 3, 2, 2, 2, 5777, 5778, 5, 504, 253, 2, 5778,
	5779, 7, 334, 2, 2, 5779, 5784, 5, 216, 109, 2, 5780, 5781, 7, 38, 2, 2,
	5781, 5783, 5, 216, 109, 2, 5782, 5780, 3, 2, 2, 2, 5783, 5786, 3, 2, 2,
	2, 5784, 5782, 3, 2, 2, 2, 5784, 5785, 3, 2, 2, 2, 5785, 777, 3, 2, 2,
	2, 5786, 5784, 3, 2, 2, 2, 5787, 5788, 7, 479, 2, 2, 5788, 5789, 5, 504,
	253, 2, 5789, 779, 3, 2, 2, 2, 5790, 5796, 5, 782, 392, 2, 5791, 5796,
	5, 784, 393, 2, 5792, 5796, 5, 786, 394, 2, 5793, 5796, 5, 802, 402, 2,
	5794, 5796, 5, 804, 403, 2, 5795, 5790, 3, 2, 2, 2, 5795, 5791, 3, 2, 2,
	2, 5795, 5792, 3, 2, 2, 2, 5795, 5793, 3, 2, 2, 2, 5795, 5794, 3, 2, 2,
	2, 5796, 781, 3, 2, 2, 2, 5797, 5798, 7, 194, 2, 2, 5798, 5799, 5, 506,
	254, 2, 5799, 5800, 7, 157, 2, 2, 5800, 5801, 7, 272, 2, 2, 5801, 5802,
	5, 800, 401, 2, 5802, 783, 3, 2, 2, 2, 5803, 5804, 7, 194, 2, 2, 5804,
	5805, 5, 798, 400, 2, 5805, 5806, 7, 295, 2, 2, 5806, 5807, 7, 272, 2,
	2, 5807, 5812, 5, 800, 401, 2, 5808, 5809, 7, 38, 2, 2, 5809, 5811, 5,
	800, 401, 2, 5810, 5808, 3, 2, 2, 2, 5811, 5814, 3, 2, 2, 2, 5812, 5810,
	3, 2, 2, 2, 5812, 5813, 3, 2, 2, 2, 5813, 5815, 3, 2, 2, 2, 5814, 5812,
	3, 2, 2, 2, 5815, 5816, 5, 746, 374, 2, 5816, 785, 3, 2, 2, 2, 5817, 5819,
	7, 285, 2, 2, 5818, 5820, 9, 93, 2, 2, 5819, 5818, 3, 2, 2, 2, 5819, 5820,
	3, 2, 2, 2, 5820, 5821, 3, 2, 2, 2, 5821, 5840, 7, 207, 2, 2, 5822, 5827,
	5, 788, 395, 2, 5823, 5824, 7, 38, 2, 2, 5824, 5826, 5, 788, 395, 2, 5825,
	5823, 3, 2, 2, 2, 5826, 5829, 3, 2, 2, 2, 5827, 5825, 3, 2, 2, 2, 5827,
	5828, 3, 2, 2, 2, 5828, 5841, 3, 2, 2, 2, 5829, 5827, 3, 2, 2, 2, 5830,
	5831, 7, 157, 2, 2, 5831, 5832, 5, 792, 397, 2, 5832, 5837, 5, 790, 396,
	2, 5833, 5834, 7, 38, 2, 2, 5834, 5836, 5, 790, 396, 2, 5835, 5833, 3,
	2, 2, 2, 5836, 5839, 3, 2, 2, 2, 5837, 5835, 3, 2, 2, 2, 5837, 5838, 3,
	2, 2, 2, 5838, 5841, 3, 2, 2, 2, 5839, 5837, 3, 2, 2, 2, 5840, 5822, 3,
	2, 2, 2, 5840, 5830, 3, 2, 2, 2, 5841, 787, 3, 2, 2, 2, 5842, 5843, 5,
	216, 109, 2, 5843, 5844, 7, 25, 2, 2, 5844, 5845, 5, 794, 398, 2, 5845,
	789, 3, 2, 2, 2, 5846, 5847, 5, 216, 109, 2, 5847, 5848, 7, 25, 2, 2, 5848,
	5849, 5, 796, 399, 2, 5849, 791, 3, 2, 2, 2, 5850, 5853, 5, 216, 109, 2,
	5851, 5853, 5, 188, 95, 2, 5852, 5850, 3, 2, 2, 2, 5852, 5851, 3, 2, 2,
	2, 5853, 793, 3, 2, 2, 2, 5854, 5855, 9, 94, 2, 2, 5855, 795, 3, 2, 2,
	2, 5856, 5857, 9, 95, 2, 2, 5857, 797, 3, 2, 2, 2, 5858, 5859, 9, 96, 2,
	2, 5859, 799, 3, 2, 2, 2, 5860, 5872, 5, 188, 95, 2, 5861, 5863, 7, 646,
	2, 2, 5862, 5864, 7, 738, 2, 2, 5863, 5862, 3, 2, 2, 2, 5863, 5864, 3,
	2, 2, 2, 5864, 5865, 3, 2, 2, 2, 5865, 5872, 5, 186, 94, 2, 5866, 5872,
	5, 506, 254, 2, 5867, 5872, 7, 647, 2, 2, 5868, 5869, 7, 460, 2, 2, 5869,
	5872, 7, 276, 2, 2, 5870, 5872, 7, 645, 2, 2, 5871, 5860, 3, 2, 2, 2, 5871,
	5861, 3, 2, 2, 2, 5871, 5866, 3, 2, 2, 2, 5871, 5867, 3, 2, 2, 2, 5871,
	5868, 3, 2, 2, 2, 5871, 5870, 3, 2, 2, 2, 5872, 801, 3, 2, 2, 2, 5873,
	5875, 7, 578, 2, 2, 5874, 5876, 5, 800, 401, 2, 5875, 5874, 3, 2, 2, 2,
	5875, 5876, 3, 2, 2, 2, 5876, 5886, 3, 2, 2, 2, 5877, 5878, 7, 626, 2,
	2, 5878, 5883, 5, 806, 404, 2, 5879, 5880, 7, 38, 2, 2, 5880, 5882, 5,
	806, 404, 2, 5881, 5879, 3, 2, 2, 2, 5882, 5885, 3, 2, 2, 2, 5883, 5881,
	3, 2, 2, 2, 5883, 5884, 3, 2, 2, 2, 5884, 5887, 3, 2, 2, 2, 5885, 5883,
	3, 2, 2, 2, 5886, 5877, 3, 2, 2, 2, 5886, 5887, 3, 2, 2, 2, 5887, 803,
	3, 2, 2, 2, 5888, 5889, 7, 630, 2, 2, 5889, 5899, 5, 800, 401, 2, 5890,
	5891, 7, 626, 2, 2, 5891, 5896, 5, 806, 404, 2, 5892, 5893, 7, 38, 2, 2,
	5893, 5895, 5, 806, 404, 2, 5894, 5892, 3, 2, 2, 2, 5895, 5898, 3, 2, 2,
	2, 5896, 5894, 3, 2, 2, 2, 5896, 5897, 3, 2, 2, 2, 5897, 5900, 3, 2, 2,
	2, 5898, 5896, 3, 2, 2, 2, 5899, 5890, 3, 2, 2, 2, 5899, 5900, 3, 2, 2,
	2, 5900, 805, 3, 2, 2, 2, 5901, 5902, 5, 796, 399, 2, 5902, 5903, 7, 25,
	2, 2, 5903, 5904, 5, 328, 165, 2, 5904, 807, 3, 2, 2, 2, 5905, 5906, 7,
	729, 2, 2, 5906, 5907, 5, 238, 120, 2, 5907, 809, 3, 2, 2, 2, 5908, 5909,
	7, 298, 2, 2, 5909, 5910, 5, 184, 93, 2, 5910, 811, 3, 2, 2, 2, 5911, 5928,
	9, 97, 2, 2, 5912, 5915, 5, 248, 125, 2, 5913, 5916, 5, 348, 175, 2, 5914,
	5916, 5, 452, 227, 2, 5915, 5913, 3, 2, 2, 2, 5915, 5914, 3, 2, 2, 2, 5915,
	5916, 3, 2, 2, 2, 5916, 5929, 3, 2, 2, 2, 5917, 5919, 5, 994, 498, 2, 5918,
	5917, 3, 2, 2, 2, 5918, 5919, 3, 2, 2, 2, 5919, 5924, 3, 2, 2, 2, 5920,
	5925, 5, 996, 499, 2, 5921, 5922, 7, 272, 2, 2, 5922, 5923, 7, 158, 2,
	2, 5923, 5925, 5, 500, 251, 2, 5924, 5920, 3, 2, 2, 2, 5924, 5921, 3, 2,
	2, 2, 5925, 5929, 3, 2, 2, 2, 5926, 5927, 7, 88, 2, 2, 5927, 5929, 5, 54,
	28, 2, 5928, 5912, 3, 2, 2, 2, 5928, 5918, 3, 2, 2, 2, 5928, 5926, 3, 2,
	2, 2, 5929, 813, 3, 2, 2, 2, 5930, 5931, 7, 628, 2, 2, 5931, 5933, 9, 98,
	2, 2, 5932, 5934, 5, 834, 418, 2, 5933, 5932, 3, 2, 2, 2, 5933, 5934, 3,
	2, 2, 2, 5934, 815, 3, 2, 2, 2, 5935, 5937, 7, 628, 2, 2, 5936, 5938, 7,
	253, 2, 2, 5937, 5936, 3, 2, 2, 2, 5937, 5938, 3, 2, 2, 2, 5938, 5940,
	3, 2, 2, 2, 5939, 5941, 7, 278, 2, 2, 5940, 5939, 3, 2, 2, 2, 5940, 5941,
	3, 2, 2, 2, 5941, 5942, 3, 2, 2, 2, 5942, 5944, 7, 683, 2, 2, 5943, 5945,
	5, 826, 414, 2, 5944, 5943, 3, 2, 2, 2, 5944, 5945, 3, 2, 2, 2, 5945, 5947,
	3, 2, 2, 2, 5946, 5948, 5, 834, 418, 2, 5947, 5946, 3, 2, 2, 2, 5947, 5948,
	3, 2, 2, 2, 5948, 817, 3, 2, 2, 2, 5949, 5950, 7, 628, 2, 2, 5950, 5951,
	7, 682, 2, 2, 5951, 5953, 7, 666, 2, 2, 5952, 5954, 5, 826, 414, 2, 5953,
	5952, 3, 2, 2, 2, 5953, 5954, 3, 2, 2, 2, 5954, 5956, 3, 2, 2, 2, 5955,
	5957, 5, 834, 418, 2, 5956, 5955, 3, 2, 2, 2, 5956, 5957, 3, 2, 2, 2, 5957,
	819, 3, 2, 2, 2, 5958, 5960, 7, 628, 2, 2, 5959, 5961, 7, 253, 2, 2, 5960,
	5959, 3, 2, 2, 2, 5960, 5961, 3, 2, 2, 2, 5961, 5963, 3, 2, 2, 2, 5962,
	5964, 7, 278, 2, 2, 5963, 5962, 3, 2, 2, 2, 5963, 5964, 3, 2, 2, 2, 5964,
	5965, 3, 2, 2, 2, 5965, 5966, 7, 145, 2, 2, 5966, 5968, 5, 828, 415, 2,
	5967, 5969, 5, 826, 414, 2, 5968, 5967, 3, 2, 2, 2, 5968, 5969, 3, 2, 2,
	2, 5969, 5971, 3, 2, 2, 2, 5970, 5972, 5, 834, 418, 2, 5971, 5970, 3, 2,
	2, 2, 5971, 5972, 3, 2, 2, 2, 5972, 821, 3, 2, 2, 2, 5973, 5975, 7, 628,
	2, 2, 5974, 5976, 7, 253, 2, 2, 5975, 5974, 3, 2, 2, 2, 5975, 5976, 3,
	2, 2, 2, 5976, 5977, 3, 2, 2, 2, 5977, 5978, 9, 99, 2, 2, 5978, 5980, 5,
	828, 415, 2, 5979, 5981, 5, 826, 414, 2, 5980, 5979, 3, 2, 2, 2, 5980,
	5981, 3, 2, 2, 2, 5981, 5983, 3, 2, 2, 2, 5982, 5984, 5, 832, 417, 2, 5983,
	5982, 3, 2, 2, 2, 5983, 5984, 3, 2, 2, 2, 5984, 823, 3, 2, 2, 2, 5985,
	5986, 7, 628, 2, 2, 5986, 5987, 7, 169, 2, 2, 5987, 5988, 7, 682, 2, 2,
	5988, 5989, 5, 248, 125, 2, 5989, 825, 3, 2, 2, 2, 5990, 5991, 9, 100,
	2, 2, 5991, 5992, 5, 238, 120, 2, 5992, 827, 3, 2, 2, 2, 5993, 5994, 9,
	100, 2, 2, 5994, 5995, 5, 248, 125, 2, 5995, 829, 3, 2, 2, 2, 5996, 5997,
	7, 365, 2, 2, 5997, 5998, 5, 186, 94, 2, 5998, 831, 3, 2, 2, 2, 5999, 6000,
	7, 754, 2, 2, 6000, 6001, 5, 328, 165, 2, 6001, 833, 3, 2, 2, 2, 6002,
	6005, 5, 830, 416, 2, 6003, 6005, 5, 832, 417, 2, 6004, 6002, 3, 2, 2,
	2, 6004, 6003, 3, 2, 2, 2, 6005, 835, 3, 2, 2, 2, 6006, 6019, 7, 85, 2,
	2, 6007, 6008, 7, 112, 2, 2, 6008, 6019, 7, 337, 2, 2, 6009, 6010, 7, 165,
	2, 2, 6010, 6019, 7, 680, 2, 2, 6011, 6019, 7, 168, 2, 2, 6012, 6019, 7,
	340, 2, 2, 6013, 6019, 7, 426, 2, 2, 6014, 6015, 7, 497, 2, 2, 6015, 6019,
	7, 258, 2, 2, 6016, 6019, 7, 641, 2, 2, 6017, 6019, 7, 679, 2, 2, 6018,
	6006, 3, 2, 2, 2, 6018, 6007, 3, 2, 2, 2, 6018, 6009, 3, 2, 2, 2, 6018,
	6011, 3, 2, 2, 2, 6018, 6012, 3, 2, 2, 2, 6018, 6013, 3, 2, 2, 2, 6018,
	6014, 3, 2, 2, 2, 6018, 6016, 3, 2, 2, 2, 6018, 6017, 3, 2, 2, 2, 6019,
	837, 3, 2, 2, 2, 6020, 6021, 7, 626, 2, 2, 6021, 6022, 5, 840, 421, 2,
	6022, 839, 3, 2, 2, 2, 6023, 6028, 5, 842, 422, 2, 6024, 6025, 7, 38, 2,
	2, 6025, 6027, 5, 844, 423, 2, 6026, 6024, 3, 2, 2, 2, 6027, 6030, 3, 2,
	2, 2, 6028, 6026, 3, 2, 2, 2, 6028, 6029, 3, 2, 2, 2, 6029, 6044, 3, 2,
	2, 2, 6030, 6028, 3, 2, 2, 2, 6031, 6032, 5, 224, 113, 2, 6032, 6033, 5,
	226, 114, 2, 6033, 6034, 7, 25, 2, 2, 6034, 6035, 5, 228, 115, 2, 6035,
	6040, 3, 2, 2, 2, 6036, 6037, 7, 38, 2, 2, 6037, 6039, 5, 844, 423, 2,
	6038, 6036, 3, 2, 2, 2, 6039, 6042, 3, 2, 2, 2, 6040, 6038, 3, 2, 2, 2,
	6040, 6041, 3, 2, 2, 2, 6041, 6044, 3, 2, 2, 2, 6042, 6040, 3, 2, 2, 2,
	6043, 6023, 3, 2, 2, 2, 6043, 6031, 3, 2, 2, 2, 6044, 841, 3, 2, 2, 2,
	6045, 6046, 5, 226, 114, 2, 6046, 6047, 7, 25, 2, 2, 6047, 6048, 5, 228,
	115, 2, 6048, 6068, 3, 2, 2, 2, 6049, 6050, 5, 218, 110, 2, 6050, 6051,
	7, 25, 2, 2, 6051, 6052, 5, 328, 165, 2, 6052, 6068, 3, 2, 2, 2, 6053,
	6054, 5, 222, 112, 2, 6054, 6055, 7, 25, 2, 2, 6055, 6056, 5, 228, 115,
	2, 6056, 6068, 3, 2, 2, 2, 6057, 6065, 7, 447, 2, 2, 6058, 6059, 7, 25,
	2, 2, 6059, 6066, 5, 328, 165, 2, 6060, 6062, 5, 242, 122, 2, 6061, 6063,
	5, 492, 247, 2, 6062, 6061, 3, 2, 2, 2, 6062, 6063, 3, 2, 2, 2, 6063, 6066,
	3, 2, 2, 2, 6064, 6066, 7, 195, 2, 2, 6065, 6058, 3, 2, 2, 2, 6065, 6060,
	3, 2, 2, 2, 6065, 6064, 3, 2, 2, 2, 6066, 6068, 3, 2, 2, 2, 6067, 6045,
	3, 2, 2, 2, 6067, 6049, 3, 2, 2, 2, 6067, 6053, 3, 2, 2, 2, 6067, 6057,
	3, 2, 2, 2, 6068, 843, 3, 2, 2, 2, 6069, 6070, 5, 224, 113, 2, 6070, 6071,
	5, 226, 114, 2, 6071, 6072, 7, 25, 2, 2, 6072, 6073, 5, 228, 115, 2, 6073,
	6076, 3, 2, 2, 2, 6074, 6076, 5, 842, 422, 2, 6075, 6069, 3, 2, 2, 2, 6075,
	6074, 3, 2, 2, 2, 6076, 845, 3, 2, 2, 2, 6077, 6078, 7, 628, 2, 2, 6078,
	6079, 9, 101, 2, 2, 6079, 6080, 7, 379, 2, 2, 6080, 847, 3, 2, 2, 2, 6081,
	6082, 7, 628, 2, 2, 6082, 6083, 7, 109, 2, 2, 6083, 6086, 7, 241, 2, 2,
	6084, 6085, 7, 313, 2, 2, 6085, 6087, 7, 197, 2, 2, 6086, 6084, 3, 2, 2,
	2, 6086, 6087, 3, 2, 2, 2, 6087, 6090, 3, 2, 2, 2, 6088, 6089, 7, 277,
	2, 2, 6089, 6091, 7, 776, 2, 2, 6090, 6088, 3, 2, 2, 2, 6090, 6091, 3,
	2, 2, 2, 6091, 6098, 3, 2, 2, 2, 6092, 6095, 7, 366, 2, 2, 6093, 6094,
	7, 776, 2, 2, 6094, 6096, 7, 38, 2, 2, 6095, 6093, 3, 2, 2, 2, 6095, 6096,
	3, 2, 2, 2, 6096, 6097, 3, 2, 2, 2, 6097, 6099, 7, 776, 2, 2, 6098, 6092,
	3, 2, 2, 2, 6098, 6099, 3, 2, 2, 2, 6099, 849, 3, 2, 2, 2, 6100, 6101,
	7, 628, 2, 2, 6101, 6102, 7, 131, 2, 2, 6102, 6104, 7, 626, 2, 2, 6103,
	6105, 5, 834, 418, 2, 6104, 6103, 3, 2, 2, 2, 6104, 6105, 3, 2, 2, 2, 6105,
	851, 3, 2, 2, 2, 6106, 6107, 7, 628, 2, 2, 6107, 6109, 7, 143, 2, 2, 6108,
	6110, 5, 834, 418, 2, 6109, 6108, 3, 2, 2, 2, 6109, 6110, 3, 2, 2, 2, 6110,
	853, 3, 2, 2, 2, 6111, 6112, 7, 628, 2, 2, 6112, 6113, 7, 169, 2, 2, 6113,
	6115, 9, 73, 2, 2, 6114, 6116, 5, 496, 249, 2, 6115, 6114, 3, 2, 2, 2,
	6115, 6116, 3, 2, 2, 2, 6116, 6117, 3, 2, 2, 2, 6117, 6118, 5, 238, 120,
	2, 6118, 855, 3, 2, 2, 2, 6119, 6120, 7, 628, 2, 2, 6120, 6121, 7, 169,
	2, 2, 6121, 6122, 7, 240, 2, 2, 6122, 6123, 5, 260, 131, 2, 6123, 857,
	3, 2, 2, 2, 6124, 6125, 7, 628, 2, 2, 6125, 6126, 7, 169, 2, 2, 6126, 6127,
	7, 280, 2, 2, 6127, 6128, 5, 266, 134, 2, 6128, 859, 3, 2, 2, 2, 6129,
	6130, 7, 628, 2, 2, 6130, 6131, 7, 169, 2, 2, 6131, 6132, 7, 525, 2, 2,
	6132, 6133, 5, 266, 134, 2, 6133, 861, 3, 2, 2, 2, 6134, 6135, 7, 628,
	2, 2, 6135, 6136, 7, 169, 2, 2, 6136, 6137, 7, 706, 2, 2, 6137, 6138, 5,
	310, 156, 2, 6138, 863, 3, 2, 2, 2, 6139, 6140, 7, 628, 2, 2, 6140, 6141,
	7, 169, 2, 2, 6141, 6142, 7, 730, 2, 2, 6142, 6143, 5, 258, 130, 2, 6143,
	865, 3, 2, 2, 2, 6144, 6145, 7, 628, 2, 2, 6145, 6146, 7, 169, 2, 2, 6146,
	6147, 7, 746, 2, 2, 6147, 6148, 5, 268, 135, 2, 6148, 867, 3, 2, 2, 2,
	6149, 6150, 7, 628, 2, 2, 6150, 6151, 7, 232, 2, 2, 6151, 6152, 5, 308,
	155, 2, 6152, 6153, 9, 102, 2, 2, 6153, 869, 3, 2, 2, 2, 6154, 6156, 7,
	628, 2, 2, 6155, 6157, 7, 668, 2, 2, 6156, 6155, 3, 2, 2, 2, 6156, 6157,
	3, 2, 2, 2, 6157, 6158, 3, 2, 2, 2, 6158, 6159, 7, 233, 2, 2, 6159, 871,
	3, 2, 2, 2, 6160, 6161, 7, 628, 2, 2, 6161, 6162, 7, 132, 2, 2, 6162, 873,
	3, 2, 2, 2, 6163, 6168, 7, 628, 2, 2, 6164, 6165, 7, 54, 2, 2, 6165, 6166,
	7, 32, 2, 2, 6166, 6167, 7, 18, 2, 2, 6167, 6169, 7, 33, 2, 2, 6168, 6164,
	3, 2, 2, 2, 6168, 6169, 3, 2, 2, 2, 6169, 6170, 3, 2, 2, 2, 6170, 6177,
	7, 237, 2, 2, 6171, 6174, 7, 366, 2, 2, 6172, 6173, 7, 776, 2, 2, 6173,
	6175, 7, 38, 2, 2, 6174, 6172, 3, 2, 2, 2, 6174, 6175, 3, 2, 2, 2, 6175,
	6176, 3, 2, 2, 2, 6176, 6178, 7, 776, 2, 2, 6177, 6171, 3, 2, 2, 2, 6177,
	6178, 3, 2, 2, 2, 6178, 875, 3, 2, 2, 2, 6179, 6180, 7, 628, 2, 2, 6180,
	6182, 7, 241, 2, 2, 6181, 6183, 5, 826, 414, 2, 6182, 6181, 3, 2, 2, 2,
	6182, 6183, 3, 2, 2, 2, 6183, 6185, 3, 2, 2, 2, 6184, 6186, 5, 834, 418,
	2, 6185, 6184, 3, 2, 2, 2, 6185, 6186, 3, 2, 2, 2, 6186, 877, 3, 2, 2,
	2, 6187, 6188, 7, 628, 2, 2, 6188, 6189, 7, 280, 2, 2, 6189, 6190, 7, 141,
	2, 2, 6190, 6191, 5, 266, 134, 2, 6191, 879, 3, 2, 2, 2, 6192, 6193, 7,
	628, 2, 2, 6193, 6194, 7, 280, 2, 2, 6194, 6196, 7, 666, 2, 2, 6195, 6197,
	5, 834, 418, 2, 6196, 6195, 3, 2, 2, 2, 6196, 6197, 3, 2, 2, 2, 6197, 881,
	3, 2, 2, 2, 6198, 6199, 7, 628, 2, 2, 6199, 6212, 7, 290, 2, 2, 6200, 6201,
	7, 272, 2, 2, 6201, 6210, 5, 258, 130, 2, 6202, 6203, 7, 733, 2, 2, 6203,
	6206, 5, 258, 130, 2, 6204, 6205, 7, 38, 2, 2, 6205, 6207, 5, 258, 130,
	2, 6206, 6204, 3, 2, 2, 2, 6207, 6208, 3, 2, 2, 2, 6208, 6206, 3, 2, 2,
	2, 6208, 6209, 3, 2, 2, 2, 6209, 6211, 3, 2, 2, 2, 6210, 6202, 3, 2, 2,
	2, 6210, 6211, 3, 2, 2, 2, 6211, 6213, 3, 2, 2, 2, 6212, 6200, 3, 2, 2,
	2, 6212, 6213, 3, 2, 2, 2, 6213, 883, 3, 2, 2, 2, 6214, 6215, 7, 628, 2,
	2, 6215, 6216, 7, 385, 2, 2, 6216, 6217, 7, 666, 2, 2, 6217, 885, 3, 2,
	2, 2, 6218, 6219, 7, 628, 2, 2, 6219, 6220, 7, 479, 2, 2, 6220, 6222, 7,
	683, 2, 2, 6221, 6223, 5, 826, 414, 2, 6222, 6221, 3, 2, 2, 2, 6222, 6223,
	3, 2, 2, 2, 6223, 6225, 3, 2, 2, 2, 6224, 6226, 5, 834, 418, 2, 6225, 6224,
	3, 2, 2, 2, 6225, 6226, 3, 2, 2, 2, 6226, 887, 3, 2, 2, 2, 6227, 6228,
	7, 628, 2, 2, 6228, 6229, 7, 511, 2, 2, 6229, 889, 3, 2, 2, 2, 6230, 6231,
	7, 628, 2, 2, 6231, 6232, 7, 523, 2, 2, 6232, 891, 3, 2, 2, 2, 6233, 6234,
	7, 628, 2, 2, 6234, 6235, 7, 525, 2, 2, 6235, 6236, 7, 141, 2, 2, 6236,
	6237, 5, 266, 134, 2, 6237, 893, 3, 2, 2, 2, 6238, 6239, 7, 628, 2, 2,
	6239, 6240, 7, 525, 2, 2, 6240, 6242, 7, 666, 2, 2, 6241, 6243, 5, 834,
	418, 2, 6242, 6241, 3, 2, 2, 2, 6242, 6243, 3, 2, 2, 2, 6243, 895, 3, 2,
	2, 2, 6244, 6246, 7, 628, 2, 2, 6245, 6247, 7, 278, 2, 2, 6246, 6245, 3,
	2, 2, 2, 6246, 6247, 3, 2, 2, 2, 6247, 6248, 3, 2, 2, 2, 6248, 6249, 7,
	527, 2, 2, 6249, 897, 3, 2, 2, 2, 6250, 6251, 7, 628, 2, 2, 6251, 6260,
	7, 528, 2, 2, 6252, 6257, 5, 836, 419, 2, 6253, 6254, 7, 38, 2, 2, 6254,
	6256, 5, 836, 419, 2, 6255, 6253, 3, 2, 2, 2, 6256, 6259, 3, 2, 2, 2, 6257,
	6255, 3, 2, 2, 2, 6257, 6258, 3, 2, 2, 2, 6258, 6261, 3, 2, 2, 2, 6259,
	6257, 3, 2, 2, 2, 6260, 6252, 3, 2, 2, 2, 6260, 6261, 3, 2, 2, 2, 6261,
	6265, 3, 2, 2, 2, 6262, 6263, 7, 272, 2, 2, 6263, 6264, 7, 533, 2, 2, 6264,
	6266, 7, 776, 2, 2, 6265, 6262, 3, 2, 2, 2, 6265, 6266, 3, 2, 2, 2, 6266,
	6273, 3, 2, 2, 2, 6267, 6268, 7, 366, 2, 2, 6268, 6271, 7, 776, 2, 2, 6269,
	6270, 7, 473, 2, 2, 6270, 6272, 7, 776, 2, 2, 6271, 6269, 3, 2, 2, 2, 6271,
	6272, 3, 2, 2, 2, 6272, 6274, 3, 2, 2, 2, 6273, 6267, 3, 2, 2, 2, 6273,
	6274, 3, 2, 2, 2, 6274, 899, 3, 2, 2, 2, 6275, 6276, 7, 628, 2, 2, 6276,
	6277, 7, 529, 2, 2, 6277, 901, 3, 2, 2, 2, 6278, 6279, 7, 628, 2, 2, 6279,
	6280, 7, 552, 2, 2, 6280, 6283, 7, 241, 2, 2, 6281, 6282, 7, 313, 2, 2,
	6282, 6284, 5, 302, 152, 2, 6283, 6281, 3, 2, 2, 2, 6283, 6284, 3, 2, 2,
	2, 6284, 6287, 3, 2, 2, 2, 6285, 6286, 7, 277, 2, 2, 6286, 6288, 7, 776,
	2, 2, 6287, 6285, 3, 2, 2, 2, 6287, 6288, 3, 2, 2, 2, 6288, 6295, 3, 2,
	2, 2, 6289, 6292, 7, 366, 2, 2, 6290, 6291, 7, 776, 2, 2, 6291, 6293, 7,
	38, 2, 2, 6292, 6290, 3, 2, 2, 2, 6292, 6293, 3, 2, 2, 2, 6293, 6294, 3,
	2, 2, 2, 6294, 6296, 7, 776, 2, 2, 6295, 6289, 3, 2, 2, 2, 6295, 6296,
	3, 2, 2, 2, 6296, 6297, 3, 2, 2, 2, 6297, 6298, 7, 272, 2, 2, 6298, 6299,
	7, 129, 2, 2, 6299, 6300, 5, 300, 151, 2, 6300, 903, 3, 2, 2, 2, 6301,
	6302, 7, 628, 2, 2, 6302, 6303, 7, 634, 2, 2, 6303, 6304, 7, 302, 2, 2,
	6304, 905, 3, 2, 2, 2, 6305, 6306, 7, 628, 2, 2, 6306, 6307, 7, 634, 2,
	2, 6307, 6311, 7, 666, 2, 2, 6308, 6309, 7, 272, 2, 2, 6309, 6310, 7, 129,
	2, 2, 6310, 6312, 5, 300, 151, 2, 6311, 6308, 3, 2, 2, 2, 6311, 6312, 3,
	2, 2, 2, 6312, 907, 3, 2, 2, 2, 6313, 6315, 7, 628, 2, 2, 6314, 6316, 9,
	103, 2, 2, 6315, 6314, 3, 2, 2, 2, 6315, 6316, 3, 2, 2, 2, 6316, 6317,
	3, 2, 2, 2, 6317, 6319, 7, 666, 2, 2, 6318, 6320, 5, 834, 418, 2, 6319,
	6318, 3, 2, 2, 2, 6319, 6320, 3, 2, 2, 2, 6320, 909, 3, 2, 2, 2, 6321,
	6322, 7, 628, 2, 2, 6322, 6324, 7, 707, 2, 2, 6323, 6325, 5, 826, 414,
	2, 6324, 6323, 3, 2, 2, 2, 6324, 6325, 3, 2, 2, 2, 6325, 6327, 3, 2, 2,
	2, 6326, 6328, 5, 834, 418, 2, 6327, 6326, 3, 2, 2, 2, 6327, 6328, 3, 2,
	2, 2, 6328, 911, 3, 2, 2, 2, 6329, 6331, 7, 628, 2, 2, 6330, 6332, 9, 103,
	2, 2, 6331, 6330, 3, 2, 2, 2, 6331, 6332, 3, 2, 2, 2, 6332, 6333, 3, 2,
	2, 2, 6333, 6335, 7, 743, 2, 2, 6334, 6336, 5, 834, 418, 2, 6335, 6334,
	3, 2, 2, 2, 6335, 6336, 3, 2, 2, 2, 6336, 913, 3, 2, 2, 2, 6337, 6342,
	7, 628, 2, 2, 6338, 6339, 7, 54, 2, 2, 6339, 6340, 7, 32, 2, 2, 6340, 6341,
	7, 18, 2, 2, 6341, 6343, 7, 33, 2, 2, 6342, 6338, 3, 2, 2, 2, 6342, 6343,
	3, 2, 2, 2, 6343, 6344, 3, 2, 2, 2, 6344, 6351, 7, 750, 2, 2, 6345, 6348,
	7, 366, 2, 2, 6346, 6347, 7, 776, 2, 2, 6347, 6349, 7, 38, 2, 2, 6348,
	6346, 3, 2, 2, 2, 6348, 6349, 3, 2, 2, 2, 6349, 6350, 3, 2, 2, 2, 6350,
	6352, 7, 776, 2, 2, 6351, 6345, 3, 2, 2, 2, 6351, 6352, 3, 2, 2, 2, 6352,
	915, 3, 2, 2, 2, 6353, 6354, 7, 628, 2, 2, 6354, 6355, 7, 566, 2, 2, 6355,
	917, 3, 2, 2, 2, 6356, 6357, 7, 628, 2, 2, 6357, 6358, 7, 565, 2, 2, 6358,
	6362, 7, 666, 2, 2, 6359, 6360, 7, 272, 2, 2, 6360, 6361, 7, 129, 2, 2,
	6361, 6363, 5, 300, 151, 2, 6362, 6359, 3, 2, 2, 2, 6362, 6363, 3, 2, 2,
	2, 6363, 919, 3, 2, 2, 2, 6364, 6368, 7, 626, 2, 2, 6365, 6366, 7, 131,
	2, 2, 6366, 6369, 7, 626, 2, 2, 6367, 6369, 7, 132, 2, 2, 6368, 6365, 3,
	2, 2, 2, 6368, 6367, 3, 2, 2, 2, 6369, 6372, 3, 2, 2, 2, 6370, 6373, 5,
	242, 122, 2, 6371, 6373, 7, 195, 2, 2, 6372, 6370, 3, 2, 2, 2, 6372, 6371,
	3, 2, 2, 2, 6373, 921, 3, 2, 2, 2, 6374, 6375, 7, 138, 2, 2, 6375, 6376,
	5, 924, 463, 2, 6376, 923, 3, 2, 2, 2, 6377, 6378, 7, 372, 2, 2, 6378,
	6379, 7, 180, 2, 2, 6379, 6381, 7, 208, 2, 2, 6380, 6382, 7, 25, 2, 2,
	6381, 6380, 3, 2, 2, 2, 6381, 6382, 3, 2, 2, 2, 6382, 6383, 3, 2, 2, 2,
	6383, 6406, 5, 298, 150, 2, 6384, 6385, 7, 325, 2, 2, 6385, 6386, 7, 277,
	2, 2, 6386, 6387, 5, 296, 149, 2, 6387, 6388, 7, 308, 2, 2, 6388, 6389,
	7, 118, 2, 2, 6389, 6396, 5, 184, 93, 2, 6390, 6391, 7, 180, 2, 2, 6391,
	6393, 7, 208, 2, 2, 6392, 6394, 7, 25, 2, 2, 6393, 6392, 3, 2, 2, 2, 6393,
	6394, 3, 2, 2, 2, 6394, 6395, 3, 2, 2, 2, 6395, 6397, 5, 298, 150, 2, 6396,
	6390, 3, 2, 2, 2, 6396, 6397, 3, 2, 2, 2, 6397, 6403, 3, 2, 2, 2, 6398,
	6400, 7, 575, 2, 2, 6399, 6401, 7, 457, 2, 2, 6400, 6399, 3, 2, 2, 2, 6400,
	6401, 3, 2, 2, 2, 6401, 6402, 3, 2, 2, 2, 6402, 6404, 7, 658, 2, 2, 6403,
	6398, 3, 2, 2, 2, 6403, 6404, 3, 2, 2, 2, 6404, 6406, 3, 2, 2, 2, 6405,
	6377, 3, 2, 2, 2, 6405, 6384, 3, 2, 2, 2, 6406, 925, 3, 2, 2, 2, 6407,
	6409, 7, 169, 2, 2, 6408, 6410, 7, 83, 2, 2, 6409, 6408, 3, 2, 2, 2, 6409,
	6410, 3, 2, 2, 2, 6410, 6411, 3, 2, 2, 2, 6411, 6412, 7, 280, 2, 2, 6412,
	6413, 5, 266, 134, 2, 6413, 6414, 7, 589, 2, 2, 6414, 6415, 9, 104, 2,
	2, 6415, 6416, 7, 639, 2, 2, 6416, 6417, 5, 286, 144, 2, 6417, 927, 3,
	2, 2, 2, 6418, 6421, 5, 932, 467, 2, 6419, 6421, 5, 934, 468, 2, 6420,
	6418, 3, 2, 2, 2, 6420, 6419, 3, 2, 2, 2, 6421, 929, 3, 2, 2, 2, 6422,
	6425, 5, 936, 469, 2, 6423, 6425, 5, 938, 470, 2, 6424, 6422, 3, 2, 2,
	2, 6424, 6423, 3, 2, 2, 2, 6425, 931, 3, 2, 2, 2, 6426, 6427, 7, 324, 2,
	2, 6427, 6428, 7, 153, 2, 2, 6428, 6433, 5, 288, 145, 2, 6429, 6430, 7,
	38, 2, 2, 6430, 6432, 5, 288, 145, 2, 6431, 6429, 3, 2, 2, 2, 6432, 6435,
	3, 2, 2, 2, 6433, 6431, 3, 2, 2, 2, 6433, 6434, 3, 2, 2, 2, 6434, 933,
	3, 2, 2, 2, 6435, 6433, 3, 2, 2, 2, 6436, 6437, 7, 324, 2, 2, 6437, 6438,
	7, 510, 2, 2, 6438, 6439, 5, 290, 146, 2, 6439, 6440, 7, 639, 2, 2, 6440,
	6441, 5, 286, 144, 2, 6441, 935, 3, 2, 2, 2, 6442, 6443, 7, 719, 2, 2,
	6443, 6444, 7, 153, 2, 2, 6444, 6449, 5, 288, 145, 2, 6445, 6446, 7, 38,
	2, 2, 6446, 6448, 5, 288, 145, 2, 6447, 6445, 3, 2, 2, 2, 6448, 6451, 3,
	2, 2, 2, 6449, 6447, 3, 2, 2, 2, 6449, 6450, 3, 2, 2, 2, 6450, 937, 3,
	2, 2, 2, 6451, 6449, 3, 2, 2, 2, 6452, 6453, 7, 719, 2, 2, 6453, 6454,
	7, 510, 2, 2, 6454, 6455, 5, 290, 146, 2, 6455, 939, 3, 2, 2, 2, 6456,
	6458, 7, 88, 2, 2, 6457, 6459, 9, 64, 2, 2, 6458, 6457, 3, 2, 2, 2, 6458,
	6459, 3, 2, 2, 2, 6459, 6460, 3, 2, 2, 2, 6460, 6461, 5, 314, 158, 2, 6461,
	6463, 5, 276, 139, 2, 6462, 6464, 5, 942, 472, 2, 6463, 6462, 3, 2, 2,
	2, 6463, 6464, 3, 2, 2, 2, 6464, 941, 3, 2, 2, 2, 6465, 6466, 7, 726, 2,
	2, 6466, 6467, 7, 300, 2, 2, 6467, 6468, 7, 476, 2, 2, 6468, 6472, 5, 280,
	141, 2, 6469, 6470, 7, 757, 2, 2, 6470, 6471, 7, 776, 2, 2, 6471, 6473,
	7, 117, 2, 2, 6472, 6469, 3, 2, 2, 2, 6472, 6473, 3, 2, 2, 2, 6473, 6479,
	3, 2, 2, 2, 6474, 6475, 7, 217, 2, 2, 6475, 6476, 7, 300, 2, 2, 6476, 6477,
	7, 476, 2, 2, 6477, 6479, 5, 280, 141, 2, 6478, 6465, 3, 2, 2, 2, 6478,
	6474, 3, 2, 2, 2, 6479, 943, 3, 2, 2, 2, 6480, 6481, 7, 133, 2, 2, 6481,
	6482, 7, 682, 2, 2, 6482, 6484, 5, 276, 139, 2, 6483, 6485, 5, 946, 474,
	2, 6484, 6483, 3, 2, 2, 2, 6484, 6485, 3, 2, 2, 2, 6485, 945, 3, 2, 2,
	2, 6486, 6487, 7, 272, 2, 2, 6487, 6494, 7, 727, 2, 2, 6488, 6494, 7, 534,
	2, 2, 6489, 6494, 7, 257, 2, 2, 6490, 6494, 7, 421, 2, 2, 6491, 6494, 7,
	253, 2, 2, 6492, 6494, 7, 128, 2, 2, 6493, 6486, 3, 2, 2, 2, 6493, 6488,
	3, 2, 2, 2, 6493, 6489, 3, 2, 2, 2, 6493, 6490, 3, 2, 2, 2, 6493, 6491,
	3, 2, 2, 2, 6493, 6492, 3, 2, 2, 2, 6494, 947, 3, 2, 2, 2, 6495, 6496,
	7, 134, 2, 2, 6496, 6497, 5, 314, 158, 2, 6497, 6499, 5, 276, 139, 2, 6498,
	6500, 9, 105, 2, 2, 6499, 6498, 3, 2, 2, 2, 6499, 6500, 3, 2, 2, 2, 6500,
	949, 3, 2, 2, 2, 6501, 6503, 7, 480, 2, 2, 6502, 6504, 9, 64, 2, 2, 6503,
	6502, 3, 2, 2, 2, 6503, 6504, 3, 2, 2, 2, 6504, 6505, 3, 2, 2, 2, 6505,
	6506, 5, 314, 158, 2, 6506, 6507, 5, 276, 139, 2, 6507, 951, 3, 2, 2, 2,
	6508, 6510, 7, 561, 2, 2, 6509, 6511, 9, 64, 2, 2, 6510, 6509, 3, 2, 2,
	2, 6510, 6511, 3, 2, 2, 2, 6511, 6512, 3, 2, 2, 2, 6512, 6513, 5, 314,
	158, 2, 6513, 6515, 5, 276, 139, 2, 6514, 6516, 7, 534, 2, 2, 6515, 6514,
	3, 2, 2, 2, 6515, 6516, 3, 2, 2, 2, 6516, 6518, 3, 2, 2, 2, 6517, 6519,
	7, 253, 2, 2, 6518, 6517, 3, 2, 2, 2, 6518, 6519, 3, 2, 2, 2, 6519, 6521,
	3, 2, 2, 2, 6520, 6522, 7, 732, 2, 2, 6521, 6520, 3, 2, 2, 2, 6521, 6522,
	3, 2, 2, 2, 6522, 953, 3, 2, 2, 2, 6523, 6524, 7, 86, 2, 2, 6524, 6525,
	7, 579, 2, 2, 6525, 6526, 7, 291, 2, 2, 6526, 6539, 5, 282, 142, 2, 6527,
	6529, 7, 745, 2, 2, 6528, 6530, 7, 25, 2, 2, 6529, 6528, 3, 2, 2, 2, 6529,
	6530, 3, 2, 2, 2, 6530, 6531, 3, 2, 2, 2, 6531, 6536, 5, 956, 479, 2, 6532,
	6533, 7, 38, 2, 2, 6533, 6535, 5, 956, 479, 2, 6534, 6532, 3, 2, 2, 2,
	6535, 6538, 3, 2, 2, 2, 6536, 6534, 3, 2, 2, 2, 6536, 6537, 3, 2, 2, 2,
	6537, 6540, 3, 2, 2, 2, 6538, 6536, 3, 2, 2, 2, 6539, 6527, 3, 2, 2, 2,
	6539, 6540, 3, 2, 2, 2, 6540, 6546, 3, 2, 2, 2, 6541, 6543, 7, 693, 2,
	2, 6542, 6544, 7, 25, 2, 2, 6543, 6542, 3, 2, 2, 2, 6543, 6544, 3, 2, 2,
	2, 6544, 6545, 3, 2, 2, 2, 6545, 6547, 7, 776, 2, 2, 6546, 6541, 3, 2,
	2, 2, 6546, 6547, 3, 2, 2, 2, 6547, 6553, 3, 2, 2, 2, 6548, 6554, 7, 226,
	2, 2, 6549, 6551, 7, 209, 2, 2, 6550, 6552, 7, 273, 2, 2, 6551, 6550, 3,
	2, 2, 2, 6551, 6552, 3, 2, 2, 2, 6552, 6554, 3, 2, 2, 2, 6553, 6548, 3,
	2, 2, 2, 6553, 6549, 3, 2, 2, 2, 6553, 6554, 3, 2, 2, 2, 6554, 955, 3,
	2, 2, 2, 6555, 6560, 7, 776, 2, 2, 6556, 6557, 7, 776, 2, 2, 6557, 6558,
	7, 17, 2, 2, 6558, 6560, 7, 776, 2, 2, 6559, 6555, 3, 2, 2, 2, 6559, 6556,
	3, 2, 2, 2, 6560, 957, 3, 2, 2, 2, 6561, 6562, 7, 169, 2, 2, 6562, 6563,
	7, 579, 2, 2, 6563, 6564, 7, 291, 2, 2, 6564, 6565, 5, 282, 142, 2, 6565,
	6566, 7, 710, 2, 2, 6566, 6567, 7, 25, 2, 2, 6567, 6580, 9, 106, 2, 2,
	6568, 6570, 7, 745, 2, 2, 6569, 6571, 7, 25, 2, 2, 6570, 6569, 3, 2, 2,
	2, 6570, 6571, 3, 2, 2, 2, 6571, 6572, 3, 2, 2, 2, 6572, 6577, 5, 956,
	479, 2, 6573, 6574, 7, 38, 2, 2, 6574, 6576, 5, 956, 479, 2, 6575, 6573,
	3, 2, 2, 2, 6576, 6579, 3, 2, 2, 2, 6577, 6575, 3, 2, 2, 2, 6577, 6578,
	3, 2, 2, 2, 6578, 6581, 3, 2, 2, 2, 6579, 6577, 3, 2, 2, 2, 6580, 6568,
	3, 2, 2, 2, 6580, 6581, 3, 2, 2, 2, 6581, 6587, 3, 2, 2, 2, 6582, 6584,
	7, 693, 2, 2, 6583, 6585, 7, 25, 2, 2, 6584, 6583, 3, 2, 2, 2, 6584, 6585,
	3, 2, 2, 2, 6585, 6586, 3, 2, 2, 2, 6586, 6588, 7, 776, 2, 2, 6587, 6582,
	3, 2, 2, 2, 6587, 6588, 3, 2, 2, 2, 6588, 6590, 3, 2, 2, 2, 6589, 6591,
	9, 75, 2, 2, 6590, 6589, 3, 2, 2, 2, 6590, 6591, 3, 2, 2, 2, 6591, 959,
	3, 2, 2, 2, 6592, 6593, 7, 217, 2, 2, 6593, 6594, 7, 579, 2, 2, 6594, 6595,
	7, 291, 2, 2, 6595, 6597, 5, 282, 142, 2, 6596, 6598, 7, 273, 2, 2, 6597,
	6596, 3, 2, 2, 2, 6597, 6598, 3, 2, 2, 2, 6598, 961, 3, 2, 2, 2, 6599,
	6600, 7, 626, 2, 2, 6600, 6601, 7, 579, 2, 2, 6601, 6602, 7, 291, 2, 2,
	6602, 6612, 5, 282, 142, 2, 6603, 6604, 7, 272, 2, 2, 6604, 6609, 7, 776,
	2, 2, 6605, 6606, 7, 38, 2, 2, 6606, 6608, 7, 776, 2, 2, 6607, 6605, 3,
	2, 2, 2, 6608, 6611, 3, 2, 2, 2, 6609, 6607, 3, 2, 2, 2, 6609, 6610, 3,
	2, 2, 2, 6610, 6613, 3, 2, 2, 2, 6611, 6609, 3, 2, 2, 2, 6612, 6603, 3,
	2, 2, 2, 6612, 6613, 3, 2, 2, 2, 6613, 963, 3, 2, 2, 2, 6614, 6615, 7,
	109, 2, 2, 6615, 6616, 5, 186, 94, 2, 6616, 965, 3, 2, 2, 2, 6617, 6618,
	7, 120, 2, 2, 6618, 6633, 7, 315, 2, 2, 6619, 6624, 5, 968, 485, 2, 6620,
	6621, 7, 38, 2, 2, 6621, 6623, 5, 968, 485, 2, 6622, 6620, 3, 2, 2, 2,
	6623, 6626, 3, 2, 2, 2, 6624, 6622, 3, 2, 2, 2, 6624, 6625, 3, 2, 2, 2,
	6625, 6634, 3, 2, 2, 2, 6626, 6624, 3, 2, 2, 2, 6627, 6628, 5, 248, 125,
	2, 6628, 6629, 7, 500, 2, 2, 6629, 6630, 7, 32, 2, 2, 6630, 6631, 5, 970,
	486, 2, 6631, 6632, 7, 33, 2, 2, 6632, 6634, 3, 2, 2, 2, 6633, 6619, 3,
	2, 2, 2, 6633, 6627, 3, 2, 2, 2, 6634, 6635, 3, 2, 2, 2, 6635, 6638, 7,
	313, 2, 2, 6636, 6639, 5, 202, 102, 2, 6637, 6639, 7, 195, 2, 2, 6638,
	6636, 3, 2, 2, 2, 6638, 6637, 3, 2, 2, 2, 6639, 967, 3, 2, 2, 2, 6640,
	6653, 5, 248, 125, 2, 6641, 6642, 9, 12, 2, 2, 6642, 6643, 7, 32, 2, 2,
	6643, 6648, 5, 252, 127, 2, 6644, 6645, 7, 38, 2, 2, 6645, 6647, 5, 252,
	127, 2, 6646, 6644, 3, 2, 2, 2, 6647, 6650, 3, 2, 2, 2, 6648, 6646, 3,
	2, 2, 2, 6648, 6649, 3, 2, 2, 2, 6649, 6651, 3, 2, 2, 2, 6650, 6648, 3,
	2, 2, 2, 6651, 6652, 7, 33, 2, 2, 6652, 6654, 3, 2, 2, 2, 6653, 6641, 3,
	2, 2, 2, 6653, 6654, 3, 2, 2, 2, 6654, 969, 3, 2, 2, 2, 6655, 6660, 5,
	318, 160, 2, 6656, 6657, 7, 38, 2, 2, 6657, 6659, 5, 318, 160, 2, 6658,
	6656, 3, 2, 2, 2, 6659, 6662, 3, 2, 2, 2, 6660, 6658, 3, 2, 2, 2, 6660,
	6661, 3, 2, 2, 2, 6661, 6665, 3, 2, 2, 2, 6662, 6660, 3, 2, 2, 2, 6663,
	6665, 7, 85, 2, 2, 6664, 6655, 3, 2, 2, 2, 6664, 6663, 3, 2, 2, 2, 6665,
	971, 3, 2, 2, 2, 6666, 6668, 7, 269, 2, 2, 6667, 6669, 9, 64, 2, 2, 6668,
	6667, 3, 2, 2, 2, 6668, 6669, 3, 2, 2, 2, 6669, 6679, 3, 2, 2, 2, 6670,
	6675, 5, 974, 488, 2, 6671, 6672, 7, 38, 2, 2, 6672, 6674, 5, 974, 488,
	2, 6673, 6671, 3, 2, 2, 2, 6674, 6677, 3, 2, 2, 2, 6675, 6673, 3, 2, 2,
	2, 6675, 6676, 3, 2, 2, 2, 6676, 6680, 3, 2, 2, 2, 6677, 6675, 3, 2, 2,
	2, 6678, 6680, 5, 976, 489, 2, 6679, 6670, 3, 2, 2, 2, 6679, 6678, 3, 2,
	2, 2, 6680, 973, 3, 2, 2, 2, 6681, 6682, 7, 108, 2, 2, 6682, 6705, 7, 379,
	2, 2, 6683, 6684, 7, 232, 2, 2, 6684, 6705, 7, 379, 2, 2, 6685, 6686, 7,
	236, 2, 2, 6686, 6705, 7, 379, 2, 2, 6687, 6688, 7, 281, 2, 2, 6688, 6705,
	7, 379, 2, 2, 6689, 6705, 7, 303, 2, 2, 6690, 6705, 7, 379, 2, 2, 6691,
	6705, 7, 523, 2, 2, 6692, 6705, 7, 481, 2, 2, 6693, 6694, 7, 551, 2, 2,
	6694, 6698, 7, 379, 2, 2, 6695, 6696, 7, 272, 2, 2, 6696, 6697, 7, 129,
	2, 2, 6697, 6699, 5, 300, 151, 2, 6698, 6695, 3, 2, 2, 2, 6698, 6699, 3,
	2, 2, 2, 6699, 6705, 3, 2, 2, 2, 6700, 6701, 7, 635, 2, 2, 6701, 6705,
	7, 379, 2, 2, 6702, 6705, 7, 666, 2, 2, 6703, 6705, 7, 731, 2, 2, 6704,
	6681, 3, 2, 2, 2, 6704, 6683, 3, 2, 2, 2, 6704, 6685, 3, 2, 2, 2, 6704,
	6687, 3, 2, 2, 2, 6704, 6689, 3, 2, 2, 2, 6704, 6690, 3, 2, 2, 2, 6704,
	6691, 3, 2, 2, 2, 6704, 6692, 3, 2, 2, 2, 6704, 6693, 3, 2, 2, 2, 6704,
	6700, 3, 2, 2, 2, 6704, 6702, 3, 2, 2, 2, 6704, 6703, 3, 2, 2, 2, 6705,
	975, 3, 2, 2, 2, 6706, 6746, 7, 683, 2, 2, 6707, 6708, 7, 683, 2, 2, 6708,
	6713, 5, 248, 125, 2, 6709, 6710, 7, 38, 2, 2, 6710, 6712, 5, 248, 125,
	2, 6711, 6709, 3, 2, 2, 2, 6712, 6715, 3, 2, 2, 2, 6713, 6711, 3, 2, 2,
	2, 6713, 6714, 3, 2, 2, 2, 6714, 6746, 3, 2, 2, 2, 6715, 6713, 3, 2, 2,
	2, 6716, 6717, 7, 683, 2, 2, 6717, 6718, 7, 757, 2, 2, 6718, 6719, 7, 538,
	2, 2, 6719, 6746, 7, 375, 2, 2, 6720, 6721, 7, 683, 2, 2, 6721, 6726, 5,
	248, 125, 2, 6722, 6723, 7, 38, 2, 2, 6723, 6725, 5, 248, 125, 2, 6724,
	6722, 3, 2, 2, 2, 6725, 6728, 3, 2, 2, 2, 6726, 6724, 3, 2, 2, 2, 6726,
	6727, 3, 2, 2, 2, 6727, 6729, 3, 2, 2, 2, 6728, 6726, 3, 2, 2, 2, 6729,
	6730, 7, 757, 2, 2, 6730, 6731, 7, 538, 2, 2, 6731, 6732, 7, 375, 2, 2,
	6732, 6746, 3, 2, 2, 2, 6733, 6734, 7, 683, 2, 2, 6734, 6739, 5, 248, 125,
	2, 6735, 6736, 7, 38, 2, 2, 6736, 6738, 5, 248, 125, 2, 6737, 6735, 3,
	2, 2, 2, 6738, 6741, 3, 2, 2, 2, 6739, 6737, 3, 2, 2, 2, 6739, 6740, 3,
	2, 2, 2, 6740, 6742, 3, 2, 2, 2, 6741, 6739, 3, 2, 2, 2, 6742, 6743, 7,
	272, 2, 2, 6743, 6744, 7, 252, 2, 2, 6744, 6746, 3, 2, 2, 2, 6745, 6706,
	3, 2, 2, 2, 6745, 6707, 3, 2, 2, 2, 6745, 6716, 3, 2, 2, 2, 6745, 6720,
	3, 2, 2, 2, 6745, 6733, 3, 2, 2, 2, 6746, 977, 3, 2, 2, 2, 6747, 6749,
	7, 352, 2, 2, 6748, 6750, 9, 107, 2, 2, 6749, 6748, 3, 2, 2, 2, 6749, 6750,
	3, 2, 2, 2, 6750, 6752, 3, 2, 2, 2, 6751, 6753, 7, 776, 2, 2, 6752, 6751,
	3, 2, 2, 2, 6753, 6754, 3, 2, 2, 2, 6754, 6752, 3, 2, 2, 2, 6754, 6755,
	3, 2, 2, 2, 6755, 979, 3, 2, 2, 2, 6756, 6757, 7, 371, 2, 2, 6757, 6758,
	7, 315, 2, 2, 6758, 6759, 7, 334, 2, 2, 6759, 6760, 7, 120, 2, 2, 6760,
	6765, 5, 982, 492, 2, 6761, 6762, 7, 38, 2, 2, 6762, 6764, 5, 982, 492,
	2, 6763, 6761, 3, 2, 2, 2, 6764, 6767, 3, 2, 2, 2, 6765, 6763, 3, 2, 2,
	2, 6765, 6766, 3, 2, 2, 2, 6766, 981, 3, 2, 2, 2, 6767, 6765, 3, 2, 2,
	2, 6768, 6774, 5, 248, 125, 2, 6769, 6770, 7, 500, 2, 2, 6770, 6771, 7,
	32, 2, 2, 6771, 6772, 5, 970, 486, 2, 6772, 6773, 7, 33, 2, 2, 6773, 6775,
	3, 2, 2, 2, 6774, 6769, 3, 2, 2, 2, 6774, 6775, 3, 2, 2, 2, 6775, 6788,
	3, 2, 2, 2, 6776, 6777, 9, 12, 2, 2, 6777, 6778, 7, 32, 2, 2, 6778, 6783,
	5, 252, 127, 2, 6779, 6780, 7, 38, 2, 2, 6780, 6782, 5, 252, 127, 2, 6781,
	6779, 3, 2, 2, 2, 6782, 6785, 3, 2, 2, 2, 6783, 6781, 3, 2, 2, 2, 6783,
	6784, 3, 2, 2, 2, 6784, 6786, 3, 2, 2, 2, 6785, 6783, 3, 2, 2, 2, 6786,
	6787, 7, 33, 2, 2, 6787, 6789, 3, 2, 2, 2, 6788, 6776, 3, 2, 2, 2, 6788,
	6789, 3, 2, 2, 2, 6789, 6792, 3, 2, 2, 2, 6790, 6791, 7, 310, 2, 2, 6791,
	6793, 7, 361, 2, 2, 6792, 6790, 3, 2, 2, 2, 6792, 6793, 3, 2, 2, 2, 6793,
	983, 3, 2, 2, 2, 6794, 6795, 7, 577, 2, 2, 6795, 6800, 5, 986, 494, 2,
	6796, 6797, 7, 38, 2, 2, 6797, 6799, 5, 986, 494, 2, 6798, 6796, 3, 2,
	2, 2, 6799, 6802, 3, 2, 2, 2, 6800, 6798, 3, 2, 2, 2, 6800, 6801, 3, 2,
	2, 2, 6801, 6805, 3, 2, 2, 2, 6802, 6800, 3, 2, 2, 2, 6803, 6805, 5, 988,
	495, 2, 6804, 6794, 3, 2, 2, 2, 6804, 6803, 3, 2, 2, 2, 6805, 985, 3, 2,
	2, 2, 6806, 6809, 7, 385, 2, 2, 6807, 6808, 7, 703, 2, 2, 6808, 6810, 5,
	432, 217, 2, 6809, 6807, 3, 2, 2, 2, 6809, 6810, 3, 2, 2, 2, 6810, 6819,
	3, 2, 2, 2, 6811, 6813, 7, 634, 2, 2, 6812, 6814, 7, 85, 2, 2, 6813, 6812,
	3, 2, 2, 2, 6813, 6814, 3, 2, 2, 2, 6814, 6816, 3, 2, 2, 2, 6815, 6817,
	5, 512, 257, 2, 6816, 6815, 3, 2, 2, 2, 6816, 6817, 3, 2, 2, 2, 6817, 6819,
	3, 2, 2, 2, 6818, 6806, 3, 2, 2, 2, 6818, 6811, 3, 2, 2, 2, 6819, 987,
	3, 2, 2, 2, 6820, 6821, 7, 577, 2, 2, 6821, 6826, 7, 507, 2, 2, 6822, 6824,
	5, 498, 250, 2, 6823, 6822, 3, 2, 2, 2, 6823, 6824, 3, 2, 2, 2, 6824, 6825,
	3, 2, 2, 2, 6825, 6827, 5, 202, 102, 2, 6826, 6823, 3, 2, 2, 2, 6826, 6827,
	3, 2, 2, 2, 6827, 989, 3, 2, 2, 2, 6828, 6829, 7, 581, 2, 2, 6829, 991,
	3, 2, 2, 2, 6830, 6831, 7, 629, 2, 2, 6831, 993, 3, 2, 2, 2, 6832, 6833,
	7, 275, 2, 2, 6833, 6834, 7, 25, 2, 2, 6834, 6835, 5, 998, 500, 2, 6835,
	995, 3, 2, 2, 2, 6836, 6842, 5, 54, 28, 2, 6837, 6842, 5, 46, 24, 2, 6838,
	6842, 5, 4, 3, 2, 6839, 6842, 5, 24, 13, 2, 6840, 6842, 5, 32, 17, 2, 6841,
	6836, 3, 2, 2, 2, 6841, 6837, 3, 2, 2, 2, 6841, 6838, 3, 2, 2, 2, 6841,
	6839, 3, 2, 2, 2, 6841, 6840, 3, 2, 2, 2, 6842, 997, 3, 2, 2, 2, 6843,
	6844, 9, 108, 2, 2, 6844, 999, 3, 2, 2, 2, 6845, 6889, 5, 814, 408, 2,
	6846, 6889, 5, 816, 409, 2, 6847, 6889, 5, 818, 410, 2, 6848, 6889, 5,
	846, 424, 2, 6849, 6889, 5, 820, 411, 2, 6850, 6889, 5, 822, 412, 2, 6851,
	6889, 5, 854, 428, 2, 6852, 6889, 5, 824, 413, 2, 6853, 6889, 5, 848, 425,
	2, 6854, 6889, 5, 850, 426, 2, 6855, 6889, 5, 852, 427, 2, 6856, 6889,
	5, 856, 429, 2, 6857, 6889, 5, 858, 430, 2, 6858, 6889, 5, 860, 431, 2,
	6859, 6889, 5, 862, 432, 2, 6860, 6889, 5, 864, 433, 2, 6861, 6889, 5,
	866, 434, 2, 6862, 6889, 5, 868, 435, 2, 6863, 6889, 5, 870, 436, 2, 6864,
	6889, 5, 872, 437, 2, 6865, 6889, 5, 874, 438, 2, 6866, 6889, 5, 876, 439,
	2, 6867, 6889, 5, 878, 440, 2, 6868, 6889, 5, 880, 441, 2, 6869, 6889,
	5, 882, 442, 2, 6870, 6889, 5, 884, 443, 2, 6871, 6889, 5, 888, 445, 2,
	6872, 6889, 5, 886, 444, 2, 6873, 6889, 5, 890, 446, 2, 6874, 6889, 5,
	892, 447, 2, 6875, 6889, 5, 896, 449, 2, 6876, 6889, 5, 898, 450, 2, 6877,
	6889, 5, 894, 448, 2, 6878, 6889, 5, 900, 451, 2, 6879, 6889, 5, 904, 453,
	2, 6880, 6889, 5, 906, 454, 2, 6881, 6889, 5, 902, 452, 2, 6882, 6889,
	5, 908, 455, 2, 6883, 6889, 5, 910, 456, 2, 6884, 6889, 5, 914, 458, 2,
	6885, 6889, 5, 912, 457, 2, 6886, 6889, 5, 916, 459, 2, 6887, 6889, 5,
	918, 460, 2, 6888, 6845, 3, 2, 2, 2, 6888, 6846, 3, 2, 2, 2, 6888, 6847,
	3, 2, 2, 2, 6888, 6848, 3, 2, 2, 2, 6888, 6849, 3, 2, 2, 2, 6888, 6850,
	3, 2, 2, 2, 6888, 6851, 3, 2, 2, 2, 6888, 6852, 3, 2, 2, 2, 6888, 6853,
	3, 2, 2, 2, 6888, 6854, 3, 2, 2, 2, 6888, 6855, 3, 2, 2, 2, 6888, 6856,
	3, 2, 2, 2, 6888, 6857, 3, 2, 2, 2, 6888, 6858, 3, 2, 2, 2, 6888, 6859,
	3, 2, 2, 2, 6888, 6860, 3, 2, 2, 2, 6888, 6861, 3, 2, 2, 2, 6888, 6862,
	3, 2, 2, 2, 6888, 6863, 3, 2, 2, 2, 6888, 6864, 3, 2, 2, 2, 6888, 6865,
	3, 2, 2, 2, 6888, 6866, 3, 2, 2, 2, 6888, 6867, 3, 2, 2, 2, 6888, 6868,
	3, 2, 2, 2, 6888, 6869, 3, 2, 2, 2, 6888, 6870, 3, 2, 2, 2, 6888, 6871,
	3, 2, 2, 2, 6888, 6872, 3, 2, 2, 2, 6888, 6873, 3, 2, 2, 2, 6888, 6874,
	3, 2, 2, 2, 6888, 6875, 3, 2, 2, 2, 6888, 6876, 3, 2, 2, 2, 6888, 6877,
	3, 2, 2, 2, 6888, 6878, 3, 2, 2, 2, 6888, 6879, 3, 2, 2, 2, 6888, 6880,
	3, 2, 2, 2, 6888, 6881, 3, 2, 2, 2, 6888, 6882, 3, 2, 2, 2, 6888, 6883,
	3, 2, 2, 2, 6888, 6884, 3, 2, 2, 2, 6888, 6885, 3, 2, 2, 2, 6888, 6886,
	3, 2, 2, 2, 6888, 6887, 3, 2, 2, 2, 6889, 1001, 3, 2, 2, 2, 6890, 6892,
	7, 626, 2, 2, 6891, 6893, 5, 224, 113, 2, 6892, 6891, 3, 2, 2, 2, 6892,
	6893, 3, 2, 2, 2, 6893, 6894, 3, 2, 2, 2, 6894, 6895, 7, 705, 2, 2, 6895,
	6896, 5, 230, 116, 2, 6896, 1003, 3, 2, 2, 2, 6897, 6902, 7, 626, 2, 2,
	6898, 6900, 7, 43, 2, 2, 6899, 6898, 3, 2, 2, 2, 6899, 6900, 3, 2, 2, 2,
	6900, 6901, 3, 2, 2, 2, 6901, 6903, 7, 43, 2, 2, 6902, 6899, 3, 2, 2, 2,
	6902, 6903, 3, 2, 2, 2, 6903, 6905, 3, 2, 2, 2, 6904, 6906, 5, 224, 113,
	2, 6905, 6904, 3, 2, 2, 2, 6905, 6906, 3, 2, 2, 2, 6906, 6908, 3, 2, 2,
	2, 6907, 6909, 7, 21, 2, 2, 6908, 6907, 3, 2, 2, 2, 6908, 6909, 3, 2, 2,
	2, 6909, 6910, 3, 2, 2, 2, 6910, 6911, 7, 71, 2, 2, 6911, 6912, 7, 25,
	2, 2, 6912, 6913, 9, 109, 2, 2, 6913, 1005, 3, 2, 2, 2, 6914, 6928, 7,
	105, 2, 2, 6915, 6916, 7, 660, 2, 2, 6916, 6925, 7, 705, 2, 2, 6917, 6922,
	5, 1008, 505, 2, 6918, 6919, 7, 38, 2, 2, 6919, 6921, 5, 1008, 505, 2,
	6920, 6918, 3, 2, 2, 2, 6921, 6924, 3, 2, 2, 2, 6922, 6920, 3, 2, 2, 2,
	6922, 6923, 3, 2, 2, 2, 6923, 6926, 3, 2, 2, 2, 6924, 6922, 3, 2, 2, 2,
	6925, 6917, 3, 2, 2, 2, 6925, 6926, 3, 2, 2, 2, 6926, 6928, 3, 2, 2, 2,
	6927, 6914, 3, 2, 2, 2, 6927, 6915, 3, 2, 2, 2, 6928, 1007, 3, 2, 2, 2,
	6929, 6930, 7, 757, 2, 2, 6930, 6931, 7, 159, 2, 2, 6931, 6934, 7, 637,
	2, 2, 6932, 6934, 5, 236, 119, 2, 6933, 6929, 3, 2, 2, 2, 6933, 6932, 3,
	2, 2, 2, 6934, 1009, 3, 2, 2, 2, 6935, 6937, 7, 149, 2, 2, 6936, 6938,
	7, 759, 2, 2, 6937, 6936, 3, 2, 2, 2, 6937, 6938, 3, 2, 2, 2, 6938, 6940,
	3, 2, 2, 2, 6939, 6941, 5, 1026, 514, 2, 6940, 6939, 3, 2, 2, 2, 6940,
	6941, 3, 2, 2, 2, 6941, 6943, 3, 2, 2, 2, 6942, 6944, 5, 1028, 515, 2,
	6943, 6942, 3, 2, 2, 2, 6943, 6944, 3, 2, 2, 2, 6944, 1011, 3, 2, 2, 2,
	6945, 6963, 7, 596, 2, 2, 6946, 6948, 7, 759, 2, 2, 6947, 6946, 3, 2, 2,
	2, 6947, 6948, 3, 2, 2, 2, 6948, 6949, 3, 2, 2, 2, 6949, 6951, 7, 703,
	2, 2, 6950, 6952, 7, 606, 2, 2, 6951, 6950, 3, 2, 2, 2, 6951, 6952, 3,
	2, 2, 2, 6952, 6953, 3, 2, 2, 2, 6953, 6964, 5, 202, 102, 2, 6954, 6956,
	7, 759, 2, 2, 6955, 6954, 3, 2, 2, 2, 6955, 6956, 3, 2, 2, 2, 6956, 6958,
	3, 2, 2, 2, 6957, 6959, 5, 1026, 514, 2, 6958, 6957, 3, 2, 2, 2, 6958,
	6959, 3, 2, 2, 2, 6959, 6961, 3, 2, 2, 2, 6960, 6962, 5, 1028, 515, 2,
	6961, 6960, 3, 2, 2, 2, 6961, 6962, 3, 2, 2, 2, 6962, 6964, 3, 2, 2, 2,
	6963, 6947, 3, 2, 2, 2, 6963, 6955, 3, 2, 2, 2, 6964, 1013, 3, 2, 2, 2,
	6965, 6966, 7, 606, 2, 2, 6966, 6967, 5, 202, 102, 2, 6967, 1015, 3, 2,
	2, 2, 6968, 6970, 7, 105, 2, 2, 6969, 6971, 7, 759, 2, 2, 6970, 6969, 3,
	2, 2, 2, 6970, 6971, 3, 2, 2, 2, 6971, 1017, 3, 2, 2, 2, 6972, 6985, 7,
	375, 2, 2, 6973, 6974, 7, 325, 2, 2, 6974, 6975, 7, 272, 2, 2, 6975, 6986,
	7, 103, 2, 2, 6976, 6977, 9, 28, 2, 2, 6977, 6982, 5, 1030, 516, 2, 6978,
	6979, 7, 38, 2, 2, 6979, 6981, 5, 1030, 516, 2, 6980, 6978, 3, 2, 2, 2,
	6981, 6984, 3, 2, 2, 2, 6982, 6980, 3, 2, 2, 2, 6982, 6983, 3, 2, 2, 2,
	6983, 6986, 3, 2, 2, 2, 6984, 6982, 3, 2, 2, 2, 6985, 6973, 3, 2, 2, 2,
	6985, 6976, 3, 2, 2, 2, 6986, 1019, 3, 2, 2, 2, 6987, 6988, 7, 723, 2,
	2, 6988, 6989, 9, 110, 2, 2, 6989, 1021, 3, 2, 2, 2, 6990, 6991, 7, 556,
	2, 2, 6991, 6992, 7, 606, 2, 2, 6992, 6993, 5, 202, 102, 2, 6993, 1023,
	3, 2, 2, 2, 6994, 7023, 7, 763, 2, 2, 6995, 6996, 9, 111, 2, 2, 6996, 6997,
	5, 1034, 518, 2, 6997, 6998, 9, 112, 2, 2, 6998, 7024, 3, 2, 2, 2, 6999,
	7000, 7, 229, 2, 2, 7000, 7006, 5, 1034, 518, 2, 7001, 7004, 7, 678, 2,
	2, 7002, 7003, 7, 272, 2, 2, 7003, 7005, 7, 431, 2, 2, 7004, 7002, 3, 2,
	2, 2, 7004, 7005, 3, 2, 2, 2, 7005, 7007, 3, 2, 2, 2, 7006, 7001, 3, 2,
	2, 2, 7006, 7007, 3, 2, 2, 2, 7007, 7024, 3, 2, 2, 2, 7008, 7009, 7, 519,
	2, 2, 7009, 7024, 5, 1034, 518, 2, 7010, 7011, 7, 149, 2, 2, 7011, 7014,
	5, 1034, 518, 2, 7012, 7013, 7, 477, 2, 2, 7013, 7015, 7, 509, 2, 2, 7014,
	7012, 3, 2, 2, 2, 7014, 7015, 3, 2, 2, 2, 7015, 7024, 3, 2, 2, 2, 7016,
	7017, 7, 596, 2, 2, 7017, 7024, 5, 1034, 518, 2, 7018, 7021, 7, 544, 2,
	2, 7019, 7020, 7, 167, 2, 2, 7020, 7022, 5, 1034, 518, 2, 7021, 7019, 3,
	2, 2, 2, 7021, 7022, 3, 2, 2, 2, 7022, 7024, 3, 2, 2, 2, 7023, 6995, 3,
	2, 2, 2, 7023, 6999, 3, 2, 2, 2, 7023, 7008, 3, 2, 2, 2, 7023, 7010, 3,
	2, 2, 2, 7023, 7016, 3, 2, 2, 2, 7023, 7018, 3, 2, 2, 2, 7024, 1025, 3,
	2, 2, 2, 7025, 7027, 7, 89, 2, 2, 7026, 7028, 7, 457, 2, 2, 7027, 7026,
	3, 2, 2, 2, 7027, 7028, 3, 2, 2, 2, 7028, 7029, 3, 2, 2, 2, 7029, 7030,
	7, 126, 2, 2, 7030, 1027, 3, 2, 2, 2, 7031, 7033, 7, 457, 2, 2, 7032, 7031,
	3, 2, 2, 2, 7032, 7033, 3, 2, 2, 2, 7033, 7034, 3, 2, 2, 2, 7034, 7035,
	7, 556, 2, 2, 7035, 1029, 3, 2, 2, 2, 7036, 7041, 5, 248, 125, 2, 7037,
	7039, 7, 92, 2, 2, 7038, 7037, 3, 2, 2, 2, 7038, 7039, 3, 2, 2, 2, 7039,
	7040, 3, 2, 2, 2, 7040, 7042, 5, 272, 137, 2, 7041, 7038, 3, 2, 2, 2, 7041,
	7042, 3, 2, 2, 2, 7042, 7043, 3, 2, 2, 2, 7043, 7044, 5, 1032, 517, 2,
	7044, 1031, 3, 2, 2, 2, 7045, 7047, 7, 538, 2, 2, 7046, 7048, 7, 372, 2,
	2, 7047, 7046, 3, 2, 2, 2, 7047, 7048, 3, 2, 2, 2, 7048, 7054, 3, 2, 2,
	2, 7049, 7051, 7, 384, 2, 2, 7050, 7049, 3, 2, 2, 2, 7050, 7051, 3, 2,
	2, 2, 7051, 7052, 3, 2, 2, 2, 7052, 7054, 7, 761, 2, 2, 7053, 7045, 3,
	2, 2, 2, 7053, 7050, 3, 2, 2, 2, 7054, 1033, 3, 2, 2, 2, 7055, 7060, 5,
	184, 93, 2, 7056, 7057, 7, 38, 2, 2, 7057, 7059, 5, 184, 93, 2, 7058, 7056,
	3, 2, 2, 2, 7059, 7062, 3, 2, 2, 2, 7060, 7058, 3, 2, 2, 2, 7060, 7061,
	3, 2, 2, 2, 7061, 7064, 3, 2, 2, 2, 7062, 7060, 3, 2, 2, 2, 7063, 7065,
	5, 188, 95, 2, 7064, 7063, 3, 2, 2, 2, 7064, 7065, 3, 2, 2, 2, 7065, 1035,
	3, 2, 2, 2, 7066, 7067, 7, 289, 2, 2, 7067, 7068, 5, 1042, 522, 2, 7068,
	7069, 7, 703, 2, 2, 7069, 7071, 5, 1040, 521, 2, 7070, 7072, 5, 1088, 545,
	2, 7071, 7070, 3, 2, 2, 2, 7071, 7072, 3, 2, 2, 2, 7072, 7116, 3, 2, 2,
	2, 7073, 7074, 7, 289, 2, 2, 7074, 7075, 5, 1042, 522, 2, 7075, 7077, 7,
	476, 2, 2, 7076, 7078, 5, 1046, 524, 2, 7077, 7076, 3, 2, 2, 2, 7077, 7078,
	3, 2, 2, 2, 7078, 7079, 3, 2, 2, 2, 7079, 7080, 5, 1048, 525, 2, 7080,
	7081, 7, 703, 2, 2, 7081, 7083, 5, 1040, 521, 2, 7082, 7084, 5, 1088, 545,
	2, 7083, 7082, 3, 2, 2, 2, 7083, 7084, 3, 2, 2, 2, 7084, 7086, 3, 2, 2,
	2, 7085, 7087, 5, 1094, 548, 2, 7086, 7085, 3, 2, 2, 2, 7086, 7087, 3,
	2, 2, 2, 7087, 7116, 3, 2, 2, 2, 7088, 7089, 7, 289, 2, 2, 7089, 7091,
	7, 85, 2, 2, 7090, 7092, 7, 523, 2, 2, 7091, 7090, 3, 2, 2, 2, 7091, 7092,
	3, 2, 2, 2, 7092, 7093, 3, 2, 2, 2, 7093, 7095, 7, 476, 2, 2, 7094, 7096,
	5, 1046, 524, 2, 7095, 7094, 3, 2, 2, 2, 7095, 7096, 3, 2, 2, 2, 7096,
	7097, 3, 2, 2, 2, 7097, 7098, 5, 1048, 525, 2, 7098, 7099, 7, 703, 2, 2,
	7099, 7101, 5, 1040, 521, 2, 7100, 7102, 5, 1088, 545, 2, 7101, 7100, 3,
	2, 2, 2, 7101, 7102, 3, 2, 2, 2, 7102, 7104, 3, 2, 2, 2, 7103, 7105, 5,
	1094, 548, 2, 7104, 7103, 3, 2, 2, 2, 7104, 7105, 3, 2, 2, 2, 7105, 7116,
	3, 2, 2, 2, 7106, 7107, 7, 289, 2, 2, 7107, 7108, 7, 530, 2, 2, 7108, 7109,
	7, 476, 2, 2, 7109, 7110, 5, 258, 130, 2, 7110, 7111, 7, 703, 2, 2, 7111,
	7113, 5, 1040, 521, 2, 7112, 7114, 5, 1088, 545, 2, 7113, 7112, 3, 2, 2,
	2, 7113, 7114, 3, 2, 2, 2, 7114, 7116, 3, 2, 2, 2, 7115, 7066, 3, 2, 2,
	2, 7115, 7073, 3, 2, 2, 2, 7115, 7088, 3, 2, 2, 2, 7115, 7106, 3, 2, 2,
	2, 7116, 1037, 3, 2, 2, 2, 7117, 7118, 7, 592, 2, 2, 7118, 7119, 5, 1042,
	522, 2, 7119, 7120, 7, 277, 2, 2, 7120, 7121, 5, 1040, 521, 2, 7121, 7163,
	3, 2, 2, 2, 7122, 7123, 7, 592, 2, 2, 7123, 7124, 5, 1042, 522, 2, 7124,
	7126, 7, 476, 2, 2, 7125, 7127, 5, 1046, 524, 2, 7126, 7125, 3, 2, 2, 2,
	7126, 7127, 3, 2, 2, 2, 7127, 7128, 3, 2, 2, 2, 7128, 7129, 5, 1048, 525,
	2, 7129, 7130, 7, 277, 2, 2, 7130, 7131, 5, 1040, 521, 2, 7131, 7163, 3,
	2, 2, 2, 7132, 7133, 7, 592, 2, 2, 7133, 7135, 7, 85, 2, 2, 7134, 7136,
	7, 523, 2, 2, 7135, 7134, 3, 2, 2, 2, 7135, 7136, 3, 2, 2, 2, 7136, 7137,
	3, 2, 2, 2, 7137, 7139, 7, 476, 2, 2, 7138, 7140, 5, 1046, 524, 2, 7139,
	7138, 3, 2, 2, 2, 7139, 7140, 3, 2, 2, 2, 7140, 7141, 3, 2, 2, 2, 7141,
	7142, 5, 1048, 525, 2, 7142, 7143, 7, 277, 2, 2, 7143, 7144, 5, 1040, 521,
	2, 7144, 7163, 3, 2, 2, 2, 7145, 7146, 7, 592, 2, 2, 7146, 7148, 7, 85,
	2, 2, 7147, 7149, 7, 523, 2, 2, 7148, 7147, 3, 2, 2, 2, 7148, 7149, 3,
	2, 2, 2, 7149, 7150, 3, 2, 2, 2, 7150, 7151, 7, 38, 2, 2, 7151, 7152, 7,
	289, 2, 2, 7152, 7153, 7, 482, 2, 2, 7153, 7154, 7, 277, 2, 2, 7154, 7163,
	5, 1040, 521, 2, 7155, 7156, 7, 592, 2, 2, 7156, 7157, 7, 530, 2, 2, 7157,
	7158, 7, 476, 2, 2, 7158, 7159, 5, 258, 130, 2, 7159, 7160, 7, 277, 2,
	2, 7160, 7161, 5, 1040, 521, 2, 7161, 7163, 3, 2, 2, 2, 7162, 7117, 3,
	2, 2, 2, 7162, 7122, 3, 2, 2, 2, 7162, 7132, 3, 2, 2, 2, 7162, 7145, 3,
	2, 2, 2, 7162, 7155, 3, 2, 2, 2, 7163, 1039, 3, 2, 2, 2, 7164, 7169, 5,
	258, 130, 2, 7165, 7166, 7, 38, 2, 2, 7166, 7168, 5, 258, 130, 2, 7167,
	7165, 3, 2, 2, 2, 7168, 7171, 3, 2, 2, 2, 7169, 7167, 3, 2, 2, 2, 7169,
	7170, 3, 2, 2, 2, 7170, 1041, 3, 2, 2, 2, 7171, 7169, 3, 2, 2, 2, 7172,
	7177, 5, 1044, 523, 2, 7173, 7174, 7, 38, 2, 2, 7174, 7176, 5, 1044, 523,
	2, 7175, 7173, 3, 2, 2, 2, 7176, 7179, 3, 2, 2, 2, 7177, 7175, 3, 2, 2,
	2, 7177, 7178, 3, 2, 2, 2, 7178, 1043, 3, 2, 2, 2, 7179, 7177, 3, 2, 2,
	2, 7180, 7185, 5, 306, 154, 2, 7181, 7182, 7, 32, 2, 2, 7182, 7183, 5,
	280, 141, 2, 7183, 7184, 7, 33, 2, 2, 7184, 7186, 3, 2, 2, 2, 7185, 7181,
	3, 2, 2, 2, 7185, 7186, 3, 2, 2, 2, 7186, 7263, 3, 2, 2, 2, 7187, 7188,
	5, 306, 154, 2, 7188, 7189, 7, 43, 2, 2, 7189, 7190, 5, 214, 108, 2, 7190,
	7263, 3, 2, 2, 2, 7191, 7196, 7, 619, 2, 2, 7192, 7193, 7, 32, 2, 2, 7193,
	7194, 5, 280, 141, 2, 7194, 7195, 7, 33, 2, 2, 7195, 7197, 3, 2, 2, 2,
	7196, 7192, 3, 2, 2, 2, 7196, 7197, 3, 2, 2, 2, 7197, 7263, 3, 2, 2, 2,
	7198, 7203, 7, 322, 2, 2, 7199, 7200, 7, 32, 2, 2, 7200, 7201, 5, 280,
	141, 2, 7201, 7202, 7, 33, 2, 2, 7202, 7204, 3, 2, 2, 2, 7203, 7199, 3,
	2, 2, 2, 7203, 7204, 3, 2, 2, 2, 7204, 7263, 3, 2, 2, 2, 7205, 7210, 7,
	726, 2, 2, 7206, 7207, 7, 32, 2, 2, 7207, 7208, 5, 280, 141, 2, 7208, 7209,
	7, 33, 2, 2, 7209, 7211, 3, 2, 2, 2, 7210, 7206, 3, 2, 2, 2, 7210, 7211,
	3, 2, 2, 2, 7211, 7263, 3, 2, 2, 2, 7212, 7217, 7, 549, 2, 2, 7213, 7214,
	7, 32, 2, 2, 7214, 7215, 5, 280, 141, 2, 7215, 7216, 7, 33, 2, 2, 7216,
	7218, 3, 2, 2, 2, 7217, 7213, 3, 2, 2, 2, 7217, 7218, 3, 2, 2, 2, 7218,
	7263, 3, 2, 2, 2, 7219, 7263, 7, 201, 2, 2, 7220, 7263, 7, 728, 2, 2, 7221,
	7263, 7, 315, 2, 2, 7222, 7263, 7, 86, 2, 2, 7223, 7263, 7, 169, 2, 2,
	7224, 7263, 7, 217, 2, 2, 7225, 7263, 7, 246, 2, 2, 7226, 7263, 7, 557,
	2, 2, 7227, 7263, 7, 629, 2, 2, 7228, 7263, 7, 526, 2, 2, 7229, 7263, 7,
	260, 2, 2, 7230, 7231, 7, 289, 2, 2, 7231, 7263, 7, 482, 2, 2, 7232, 7233,
	7, 628, 2, 2, 7233, 7263, 7, 182, 2, 2, 7234, 7263, 7, 677, 2, 2, 7235,
	7236, 7, 169, 2, 2, 7236, 7237, 7, 687, 2, 2, 7237, 7263, 7, 683, 2, 2,
	7238, 7239, 7, 375, 2, 2, 7239, 7263, 7, 683, 2, 2, 7240, 7241, 7, 574,
	2, 2, 7241, 7263, 7, 634, 2, 2, 7242, 7243, 7, 574, 2, 2, 7243, 7263, 7,
	137, 2, 2, 7244, 7245, 7, 169, 2, 2, 7245, 7263, 7, 746, 2, 2, 7246, 7247,
	7, 628, 2, 2, 7247, 7263, 7, 746, 2, 2, 7248, 7249, 7, 169, 2, 2, 7249,
	7263, 7, 599, 2, 2, 7250, 7251, 7, 86, 2, 2, 7251, 7263, 7, 599, 2, 2,
	7252, 7253, 7, 169, 2, 2, 7253, 7263, 7, 730, 2, 2, 7254, 7263, 7, 240,
	2, 2, 7255, 7263, 7, 706, 2, 2, 7256, 7257, 7, 169, 2, 2, 7257, 7263, 7,
	684, 2, 2, 7258, 7259, 7, 169, 2, 2, 7259, 7263, 7, 595, 2, 2, 7260, 7261,
	7, 217, 2, 2, 7261, 7263, 7, 595, 2, 2, 7262, 7180, 3, 2, 2, 2, 7262, 7187,
	3, 2, 2, 2, 7262, 7191, 3, 2, 2, 2, 7262, 7198, 3, 2, 2, 2, 7262, 7205,
	3, 2, 2, 2, 7262, 7212, 3, 2, 2, 2, 7262, 7219, 3, 2, 2, 2, 7262, 7220,
	3, 2, 2, 2, 7262, 7221, 3, 2, 2, 2, 7262, 7222, 3, 2, 2, 2, 7262, 7223,
	3, 2, 2, 2, 7262, 7224, 3, 2, 2, 2, 7262, 7225, 3, 2, 2, 2, 7262, 7226,
	3, 2, 2, 2, 7262, 7227, 3, 2, 2, 2, 7262, 7228, 3, 2, 2, 2, 7262, 7229,
	3, 2, 2, 2, 7262, 7230, 3, 2, 2, 2, 7262, 7232, 3, 2, 2, 2, 7262, 7234,
	3, 2, 2, 2, 7262, 7235, 3, 2, 2, 2, 7262, 7238, 3, 2, 2, 2, 7262, 7240,
	3, 2, 2, 2, 7262, 7242, 3, 2, 2, 2, 7262, 7244, 3, 2, 2, 2, 7262, 7246,
	3, 2, 2, 2, 7262, 7248, 3, 2, 2, 2, 7262, 7250, 3, 2, 2, 2, 7262, 7252,
	3, 2, 2, 2, 7262, 7254, 3, 2, 2, 2, 7262, 7255, 3, 2, 2, 2, 7262, 7256,
	3, 2, 2, 2, 7262, 7258, 3, 2, 2, 2, 7262, 7260, 3, 2, 2, 2, 7263, 1045,
	3, 2, 2, 2, 7264, 7265, 9, 113, 2, 2, 7265, 1047, 3, 2, 2, 2, 7266, 7274,
	7, 18, 2, 2, 7267, 7268, 7, 18, 2, 2, 7268, 7274, 7, 22, 2, 2, 7269, 7270,
	5, 238, 120, 2, 7270, 7271, 7, 22, 2, 2, 7271, 7274, 3, 2, 2, 2, 7272,
	7274, 5, 248, 125, 2, 7273, 7266, 3, 2, 2, 2, 7273, 7267, 3, 2, 2, 2, 7273,
	7269, 3, 2, 2, 2, 7273, 7272, 3, 2, 2, 2, 7274, 1049, 3, 2, 2, 2, 7275,
	7276, 7, 169, 2, 2, 7276, 7280, 7, 730, 2, 2, 7277, 7278, 7, 309, 2, 2,
	7278, 7279, 7, 460, 2, 2, 7279, 7281, 7, 247, 2, 2, 7280, 7277, 3, 2, 2,
	2, 7280, 7281, 3, 2, 2, 2, 7281, 7282, 3, 2, 2, 2, 7282, 7284, 5, 1054,
	528, 2, 7283, 7285, 5, 1056, 529, 2, 7284, 7283, 3, 2, 2, 2, 7284, 7285,
	3, 2, 2, 2, 7285, 7287, 3, 2, 2, 2, 7286, 7288, 5, 1058, 530, 2, 7287,
	7286, 3, 2, 2, 2, 7287, 7288, 3, 2, 2, 2, 7288, 7290, 3, 2, 2, 2, 7289,
	7291, 5, 1060, 531, 2, 7290, 7289, 3, 2, 2, 2, 7290, 7291, 3, 2, 2, 2,
	7291, 7293, 3, 2, 2, 2, 7292, 7294, 5, 1062, 532, 2, 7293, 7292, 3, 2,
	2, 2, 7293, 7294, 3, 2, 2, 2, 7294, 1051, 3, 2, 2, 2, 7295, 7335, 5, 258,
	130, 2, 7296, 7297, 5, 258, 130, 2, 7297, 7298, 7, 308, 2, 2, 7298, 7299,
	7, 118, 2, 2, 7299, 7300, 5, 184, 93, 2, 7300, 7335, 3, 2, 2, 2, 7301,
	7302, 5, 258, 130, 2, 7302, 7303, 7, 308, 2, 2, 7303, 7304, 7, 118, 2,
	2, 7304, 7305, 7, 535, 2, 2, 7305, 7306, 7, 503, 2, 2, 7306, 7335, 3, 2,
	2, 2, 7307, 7308, 5, 258, 130, 2, 7308, 7309, 7, 308, 2, 2, 7309, 7310,
	7, 757, 2, 2, 7310, 7311, 5, 214, 108, 2, 7311, 7335, 3, 2, 2, 2, 7312,
	7313, 5, 258, 130, 2, 7313, 7314, 7, 308, 2, 2, 7314, 7315, 7, 757, 2,
	2, 7315, 7316, 5, 214, 108, 2, 7316, 7317, 7, 92, 2, 2, 7317, 7318, 5,
	184, 93, 2, 7318, 7335, 3, 2, 2, 2, 7319, 7320, 5, 258, 130, 2, 7320, 7321,
	7, 308, 2, 2, 7321, 7322, 7, 757, 2, 2, 7322, 7323, 5, 214, 108, 2, 7323,
	7324, 7, 118, 2, 2, 7324, 7325, 5, 184, 93, 2, 7325, 7335, 3, 2, 2, 2,
	7326, 7327, 5, 258, 130, 2, 7327, 7328, 7, 308, 2, 2, 7328, 7329, 7, 757,
	2, 2, 7329, 7330, 5, 214, 108, 2, 7330, 7331, 7, 118, 2, 2, 7331, 7332,
	7, 535, 2, 2, 7332, 7333, 7, 503, 2, 2, 7333, 7335, 3, 2, 2, 2, 7334, 7295,
	3, 2, 2, 2, 7334, 7296, 3, 2, 2, 2, 7334, 7301, 3, 2, 2, 2, 7334, 7307,
	3, 2, 2, 2, 7334, 7312, 3, 2, 2, 2, 7334, 7319, 3, 2, 2, 2, 7334, 7326,
	3, 2, 2, 2, 7335, 1053, 3, 2, 2, 2, 7336, 7341, 5, 1052, 527, 2, 7337,
	7338, 7, 38, 2, 2, 7338, 7340, 5, 1052, 527, 2, 7339, 7337, 3, 2, 2, 2,
	7340, 7343, 3, 2, 2, 2, 7341, 7339, 3, 2, 2, 2, 7341, 7342, 3, 2, 2, 2,
	7342, 1055, 3, 2, 2, 2, 7343, 7341, 3, 2, 2, 2, 7344, 7345, 7, 195, 2,
	2, 7345, 7346, 7, 595, 2, 2, 7346, 7351, 5, 304, 153, 2, 7347, 7348, 7,
	38, 2, 2, 7348, 7350, 5, 304, 153, 2, 7349, 7347, 3, 2, 2, 2, 7350, 7353,
	3, 2, 2, 2, 7351, 7349, 3, 2, 2, 2, 7351, 7352, 3, 2, 2, 2, 7352, 1057,
	3, 2, 2, 2, 7353, 7351, 3, 2, 2, 2, 7354, 7368, 7, 575, 2, 2, 7355, 7369,
	7, 459, 2, 2, 7356, 7369, 7, 658, 2, 2, 7357, 7369, 7, 762, 2, 2, 7358,
	7365, 5, 1106, 554, 2, 7359, 7361, 7, 89, 2, 2, 7360, 7359, 3, 2, 2, 2,
	7360, 7361, 3, 2, 2, 2, 7361, 7362, 3, 2, 2, 2, 7362, 7364, 5, 1106, 554,
	2, 7363, 7360, 3, 2, 2, 2, 7364, 7367, 3, 2, 2, 2, 7365, 7363, 3, 2, 2,
	2, 7365, 7366, 3, 2, 2, 2, 7366, 7369, 3, 2, 2, 2, 7367, 7365, 3, 2, 2,
	2, 7368, 7355, 3, 2, 2, 2, 7368, 7356, 3, 2, 2, 2, 7368, 7357, 3, 2, 2,
	2, 7368, 7358, 3, 2, 2, 2, 7369, 1059, 3, 2, 2, 2, 7370, 7371, 7, 757,
	2, 2, 7371, 7375, 5, 1104, 553, 2, 7372, 7374, 5, 1104, 553, 2, 7373, 7372,
	3, 2, 2, 2, 7374, 7377, 3, 2, 2, 2, 7375, 7373, 3, 2, 2, 2, 7375, 7376,
	3, 2, 2, 2, 7376, 1061, 3, 2, 2, 2, 7377, 7375, 3, 2, 2, 2, 7378, 7380,
	5, 1064, 533, 2, 7379, 7378, 3, 2, 2, 2, 7380, 7381, 3, 2, 2, 2, 7381,
	7379, 3, 2, 2, 2, 7381, 7382, 3, 2, 2, 2, 7382, 1063, 3, 2, 2, 2, 7383,
	7384, 7, 76, 2, 2, 7384, 7416, 9, 114, 2, 2, 7385, 7386, 7, 503, 2, 2,
	7386, 7392, 7, 250, 2, 2, 7387, 7393, 7, 195, 2, 2, 7388, 7393, 7, 454,
	2, 2, 7389, 7390, 7, 333, 2, 2, 7390, 7391, 7, 776, 2, 2, 7391, 7393, 7,
	186, 2, 2, 7392, 7387, 3, 2, 2, 2, 7392, 7388, 3, 2, 2, 2, 7392, 7389,
	3, 2, 2, 2, 7392, 7393, 3, 2, 2, 2, 7393, 7416, 3, 2, 2, 2, 7394, 7395,
	7, 503, 2, 2, 7395, 7396, 7, 301, 2, 2, 7396, 7416, 9, 74, 2, 2, 7397,
	7398, 7, 503, 2, 2, 7398, 7399, 7, 590, 2, 2, 7399, 7403, 7, 333, 2, 2,
	7400, 7404, 7, 195, 2, 2, 7401, 7402, 7, 776, 2, 2, 7402, 7404, 7, 186,
	2, 2, 7403, 7400, 3, 2, 2, 2, 7403, 7401, 3, 2, 2, 2, 7404, 7416, 3, 2,
	2, 2, 7405, 7406, 7, 503, 2, 2, 7406, 7407, 7, 575, 2, 2, 7407, 7409, 7,
	173, 2, 2, 7408, 7410, 9, 115, 2, 2, 7409, 7408, 3, 2, 2, 2, 7409, 7410,
	3, 2, 2, 2, 7410, 7416, 3, 2, 2, 2, 7411, 7412, 7, 255, 2, 2, 7412, 7416,
	7, 776, 2, 2, 7413, 7414, 7, 504, 2, 2, 7414, 7416, 9, 116, 2, 2, 7415,
	7383, 3, 2, 2, 2, 7415, 7385, 3, 2, 2, 2, 7415, 7394, 3, 2, 2, 2, 7415,
	7397, 3, 2, 2, 2, 7415, 7405, 3, 2, 2, 2, 7415, 7411, 3, 2, 2, 2, 7415,
	7413, 3, 2, 2, 2, 7416, 1065, 3, 2, 2, 2, 7417, 7418, 7, 86, 2, 2, 7418,
	7421, 7, 730, 2, 2, 7419, 7420, 7, 309, 2, 2, 7420, 7422, 7, 247, 2, 2,
	7421, 7419, 3, 2, 2, 2, 7421, 7422, 3, 2, 2, 2, 7422, 7423, 3, 2, 2, 2,
	7423, 7425, 5, 1070, 536, 2, 7424, 7426, 5, 1058, 530, 2, 7425, 7424, 3,
	2, 2, 2, 7425, 7426, 3, 2, 2, 2, 7426, 7428, 3, 2, 2, 2, 7427, 7429, 5,
	1060, 531, 2, 7428, 7427, 3, 2, 2, 2, 7428, 7429, 3, 2, 2, 2, 7429, 7431,
	3, 2, 2, 2, 7430, 7432, 5, 1062, 532, 2, 7431, 7430, 3, 2, 2, 2, 7431,
	7432, 3, 2, 2, 2, 7432, 7465, 3, 2, 2, 2, 7433, 7434, 7, 86, 2, 2, 7434,
	7437, 7, 730, 2, 2, 7435, 7436, 7, 309, 2, 2, 7436, 7438, 7, 247, 2, 2,
	7437, 7435, 3, 2, 2, 2, 7437, 7438, 3, 2, 2, 2, 7438, 7439, 3, 2, 2, 2,
	7439, 7440, 7, 730, 2, 2, 7440, 7441, 7, 32, 2, 2, 7441, 7442, 7, 33, 2,
	2, 7442, 7465, 5, 1108, 555, 2, 7443, 7444, 7, 86, 2, 2, 7444, 7447, 7,
	730, 2, 2, 7445, 7446, 7, 309, 2, 2, 7446, 7448, 7, 247, 2, 2, 7447, 7445,
	3, 2, 2, 2, 7447, 7448, 3, 2, 2, 2, 7448, 7449, 3, 2, 2, 2, 7449, 7450,
	5, 258, 130, 2, 7450, 7451, 7, 195, 2, 2, 7451, 7462, 7, 595, 2, 2, 7452,
	7463, 7, 459, 2, 2, 7453, 7463, 7, 85, 2, 2, 7454, 7459, 5, 304, 153, 2,
	7455, 7456, 7, 38, 2, 2, 7456, 7458, 5, 304, 153, 2, 7457, 7455, 3, 2,
	2, 2, 7458, 7461, 3, 2, 2, 2, 7459, 7457, 3, 2, 2, 2, 7459, 7460, 3, 2,
	2, 2, 7460, 7463, 3, 2, 2, 2, 7461, 7459, 3, 2, 2, 2, 7462, 7452, 3, 2,
	2, 2, 7462, 7453, 3, 2, 2, 2, 7462, 7454, 3, 2, 2, 2, 7463, 7465, 3, 2,
	2, 2, 7464, 7417, 3, 2, 2, 2, 7464, 7433, 3, 2, 2, 2, 7464, 7443, 3, 2,
	2, 2, 7465, 1067, 3, 2, 2, 2, 7466, 7468, 5, 258, 130, 2, 7467, 7469, 5,
	1098, 550, 2, 7468, 7467, 3, 2, 2, 2, 7468, 7469, 3, 2, 2, 2, 7469, 1069,
	3, 2, 2, 2, 7470, 7475, 5, 1068, 535, 2, 7471, 7472, 7, 38, 2, 2, 7472,
	7474, 5, 1068, 535, 2, 7473, 7471, 3, 2, 2, 2, 7474, 7477, 3, 2, 2, 2,
	7475, 7473, 3, 2, 2, 2, 7475, 7476, 3, 2, 2, 2, 7476, 1071, 3, 2, 2, 2,
	7477, 7475, 3, 2, 2, 2, 7478, 7479, 7, 217, 2, 2, 7479, 7482, 7, 730, 2,
	2, 7480, 7481, 7, 309, 2, 2, 7481, 7483, 7, 247, 2, 2, 7482, 7480, 3, 2,
	2, 2, 7482, 7483, 3, 2, 2, 2, 7483, 7484, 3, 2, 2, 2, 7484, 7489, 5, 258,
	130, 2, 7485, 7486, 7, 38, 2, 2, 7486, 7488, 5, 258, 130, 2, 7487, 7485,
	3, 2, 2, 2, 7488, 7491, 3, 2, 2, 2, 7489, 7487, 3, 2, 2, 2, 7489, 7490,
	3, 2, 2, 2, 7490, 1073, 3, 2, 2, 2, 7491, 7489, 3, 2, 2, 2, 7492, 7493,
	7, 169, 2, 2, 7493, 7497, 7, 595, 2, 2, 7494, 7495, 7, 309, 2, 2, 7495,
	7496, 7, 460, 2, 2, 7496, 7498, 7, 247, 2, 2, 7497, 7494, 3, 2, 2, 2, 7497,
	7498, 3, 2, 2, 2, 7498, 7499, 3, 2, 2, 2, 7499, 7504, 5, 304, 153, 2, 7500,
	7501, 7, 38, 2, 2, 7501, 7503, 5, 304, 153, 2, 7502, 7500, 3, 2, 2, 2,
	7503, 7506, 3, 2, 2, 2, 7504, 7502, 3, 2, 2, 2, 7504, 7505, 3, 2, 2, 2,
	7505, 1075, 3, 2, 2, 2, 7506, 7504, 3, 2, 2, 2, 7507, 7508, 7, 217, 2,
	2, 7508, 7511, 7, 595, 2, 2, 7509, 7510, 7, 309, 2, 2, 7510, 7512, 7, 247,
	2, 2, 7511, 7509, 3, 2, 2, 2, 7511, 7512, 3, 2, 2, 2, 7512, 7513, 3, 2,
	2, 2, 7513, 7518, 5, 304, 153, 2, 7514, 7515, 7, 38, 2, 2, 7515, 7517,
	5, 304, 153, 2, 7516, 7514, 3, 2, 2, 2, 7517, 7520, 3, 2, 2, 2, 7518, 7516,
	3, 2, 2, 2, 7518, 7519, 3, 2, 2, 2, 7519, 1077, 3, 2, 2, 2, 7520, 7518,
	3, 2, 2, 2, 7521, 7522, 7, 559, 2, 2, 7522, 7523, 7, 730, 2, 2, 7523, 7524,
	5, 258, 130, 2, 7524, 7525, 7, 703, 2, 2, 7525, 7533, 5, 258, 130, 2, 7526,
	7527, 7, 38, 2, 2, 7527, 7528, 5, 258, 130, 2, 7528, 7529, 7, 703, 2, 2,
	7529, 7530, 5, 258, 130, 2, 7530, 7532, 3, 2, 2, 2, 7531, 7526, 3, 2, 2,
	2, 7532, 7535, 3, 2, 2, 2, 7533, 7531, 3, 2, 2, 2, 7533, 7534, 3, 2, 2,
	2, 7534, 1079, 3, 2, 2, 2, 7535, 7533, 3, 2, 2, 2, 7536, 7537, 7, 626,
	2, 2, 7537, 7538, 7, 195, 2, 2, 7538, 7549, 7, 595, 2, 2, 7539, 7550, 7,
	459, 2, 2, 7540, 7550, 7, 85, 2, 2, 7541, 7546, 5, 304, 153, 2, 7542, 7543,
	7, 38, 2, 2, 7543, 7545, 5, 304, 153, 2, 7544, 7542, 3, 2, 2, 2, 7545,
	7548, 3, 2, 2, 2, 7546, 7544, 3, 2, 2, 2, 7546, 7547, 3, 2, 2, 2, 7547,
	7550, 3, 2, 2, 2, 7548, 7546, 3, 2, 2, 2, 7549, 7539, 3, 2, 2, 2, 7549,
	7540, 3, 2, 2, 2, 7549, 7541, 3, 2, 2, 2, 7550, 7551, 3, 2, 2, 2, 7551,
	7552, 7, 703, 2, 2, 7552, 7557, 5, 258, 130, 2, 7553, 7554, 7, 38, 2, 2,
	7554, 7556, 5, 258, 130, 2, 7555, 7553, 3, 2, 2, 2, 7556, 7559, 3, 2, 2,
	2, 7557, 7555, 3, 2, 2, 2, 7557, 7558, 3, 2, 2, 2, 7558, 1081, 3, 2, 2,
	2, 7559, 7557, 3, 2, 2, 2, 7560, 7561, 7, 626, 2, 2, 7561, 7569, 7, 595,
	2, 2, 7562, 7570, 7, 195, 2, 2, 7563, 7570, 7, 459, 2, 2, 7564, 7570, 7,
	85, 2, 2, 7565, 7566, 7, 85, 2, 2, 7566, 7567, 7, 243, 2, 2, 7567, 7570,
	5, 1092, 547, 2, 7568, 7570, 5, 1092, 547, 2, 7569, 7562, 3, 2, 2, 2, 7569,
	7563, 3, 2, 2, 2, 7569, 7564, 3, 2, 2, 2, 7569, 7565, 3, 2, 2, 2, 7569,
	7568, 3, 2, 2, 2, 7570, 1083, 3, 2, 2, 2, 7571, 7572, 7, 626, 2, 2, 7572,
	7575, 7, 503, 2, 2, 7573, 7574, 7, 272, 2, 2, 7574, 7576, 5, 258, 130,
	2, 7575, 7573, 3, 2, 2, 2, 7575, 7576, 3, 2, 2, 2, 7576, 7577, 3, 2, 2,
	2, 7577, 7580, 5, 1086, 544, 2, 7578, 7579, 7, 564, 2, 2, 7579, 7581, 5,
	184, 93, 2, 7580, 7578, 3, 2, 2, 2, 7580, 7581, 3, 2, 2, 2, 7581, 7585,
	3, 2, 2, 2, 7582, 7583, 7, 585, 2, 2, 7583, 7584, 7, 173, 2, 2, 7584, 7586,
	7, 503, 2, 2, 7585, 7582, 3, 2, 2, 2, 7585, 7586, 3, 2, 2, 2, 7586, 1085,
	3, 2, 2, 2, 7587, 7588, 7, 25, 2, 2, 7588, 7598, 5, 186, 94, 2, 7589, 7590,
	7, 703, 2, 2, 7590, 7598, 7, 535, 2, 2, 7591, 7592, 7, 25, 2, 2, 7592,
	7593, 7, 503, 2, 2, 7593, 7594, 7, 32, 2, 2, 7594, 7595, 5, 186, 94, 2,
	7595, 7596, 7, 33, 2, 2, 7596, 7598, 3, 2, 2, 2, 7597, 7587, 3, 2, 2, 2,
	7597, 7589, 3, 2, 2, 2, 7597, 7591, 3, 2, 2, 2, 7598, 1087, 3, 2, 2, 2,
	7599, 7600, 7, 757, 2, 2, 7600, 7601, 7, 289, 2, 2, 7601, 7602, 7, 482,
	2, 2, 7602, 1089, 3, 2, 2, 2, 7603, 7608, 5, 316, 159, 2, 7604, 7605, 7,
	38, 2, 2, 7605, 7607, 5, 316, 159, 2, 7606, 7604, 3, 2, 2, 2, 7607, 7610,
	3, 2, 2, 2, 7608, 7606, 3, 2, 2, 2, 7608, 7609, 3, 2, 2, 2, 7609, 1091,
	3, 2, 2, 2, 7610, 7608, 3, 2, 2, 2, 7611, 7616, 5, 304, 153, 2, 7612, 7613,
	7, 38, 2, 2, 7613, 7615, 5, 304, 153, 2, 7614, 7612, 3, 2, 2, 2, 7615,
	7618, 3, 2, 2, 2, 7616, 7614, 3, 2, 2, 2, 7616, 7617, 3, 2, 2, 2, 7617,
	1093, 3, 2, 2, 2, 7618, 7616, 3, 2, 2, 2, 7619, 7620, 7, 92, 2, 2, 7620,
	7622, 5, 258, 130, 2, 7621, 7623, 5, 1096, 549, 2, 7622, 7621, 3, 2, 2,
	2, 7622, 7623, 3, 2, 2, 2, 7623, 1095, 3, 2, 2, 2, 7624, 7625, 7, 757,
	2, 2, 7625, 7633, 7, 595, 2, 2, 7626, 7634, 7, 195, 2, 2, 7627, 7634, 7,
	459, 2, 2, 7628, 7634, 7, 85, 2, 2, 7629, 7630, 7, 85, 2, 2, 7630, 7631,
	7, 243, 2, 2, 7631, 7634, 5, 1092, 547, 2, 7632, 7634, 5, 1092, 547, 2,
	7633, 7626, 3, 2, 2, 2, 7633, 7627, 3, 2, 2, 2, 7633, 7628, 3, 2, 2, 2,
	7633, 7629, 3, 2, 2, 2, 7633, 7632, 3, 2, 2, 2, 7634, 1097, 3, 2, 2, 2,
	7635, 7641, 5, 1100, 551, 2, 7636, 7641, 5, 1102, 552, 2, 7637, 7638, 7,
	210, 2, 2, 7638, 7639, 7, 475, 2, 2, 7639, 7641, 7, 503, 2, 2, 7640, 7635,
	3, 2, 2, 2, 7640, 7636, 3, 2, 2, 2, 7640, 7637, 3, 2, 2, 2, 7641, 1099,
	3, 2, 2, 2, 7642, 7643, 7, 308, 2, 2, 7643, 7647, 7, 118, 2, 2, 7644, 7648,
	5, 184, 93, 2, 7645, 7646, 7, 535, 2, 2, 7646, 7648, 7, 503, 2, 2, 7647,
	7644, 3, 2, 2, 2, 7647, 7645, 3, 2, 2, 2, 7648, 7651, 3, 2, 2, 2, 7649,
	7650, 7, 564, 2, 2, 7650, 7652, 5, 184, 93, 2, 7651, 7649, 3, 2, 2, 2,
	7651, 7652, 3, 2, 2, 2, 7652, 7656, 3, 2, 2, 2, 7653, 7654, 7, 585, 2,
	2, 7654, 7655, 7, 173, 2, 2, 7655, 7657, 7, 503, 2, 2, 7656, 7653, 3, 2,
	2, 2, 7656, 7657, 3, 2, 2, 2, 7657, 1101, 3, 2, 2, 2, 7658, 7659, 7, 308,
	2, 2, 7659, 7660, 7, 757, 2, 2, 7660, 7690, 5, 290, 146, 2, 7661, 7662,
	7, 308, 2, 2, 7662, 7663, 7, 757, 2, 2, 7663, 7664, 5, 290, 146, 2, 7664,
	7668, 7, 118, 2, 2, 7665, 7669, 5, 184, 93, 2, 7666, 7667, 7, 535, 2, 2,
	7667, 7669, 7, 503, 2, 2, 7668, 7665, 3, 2, 2, 2, 7668, 7666, 3, 2, 2,
	2, 7669, 7672, 3, 2, 2, 2, 7670, 7671, 7, 564, 2, 2, 7671, 7673, 5, 186,
	94, 2, 7672, 7670, 3, 2, 2, 2, 7672, 7673, 3, 2, 2, 2, 7673, 7677, 3, 2,
	2, 2, 7674, 7675, 7, 585, 2, 2, 7675, 7676, 7, 173, 2, 2, 7676, 7678, 7,
	503, 2, 2, 7677, 7674, 3, 2, 2, 2, 7677, 7678, 3, 2, 2, 2, 7678, 7690,
	3, 2, 2, 2, 7679, 7680, 7, 308, 2, 2, 7680, 7681, 7, 757, 2, 2, 7681, 7682,
	5, 290, 146, 2, 7682, 7683, 7, 92, 2, 2, 7683, 7687, 5, 454, 228, 2, 7684,
	7685, 7, 585, 2, 2, 7685, 7686, 7, 173, 2, 2, 7686, 7688, 7, 503, 2, 2,
	7687, 7684, 3, 2, 2, 2, 7687, 7688, 3, 2, 2, 2, 7688, 7690, 3, 2, 2, 2,
	7689, 7658, 3, 2, 2, 2, 7689, 7661, 3, 2, 2, 2, 7689, 7679, 3, 2, 2, 2,
	7690, 1103, 3, 2, 2, 2, 7691, 7692, 7, 416, 2, 2, 7692, 7700, 7, 776, 2,
	2, 7693, 7694, 7, 419, 2, 2, 7694, 7700, 7, 776, 2, 2, 7695, 7696, 7, 415,
	2, 2, 7696, 7700, 7, 776, 2, 2, 7697, 7698, 7, 420, 2, 2, 7698, 7700, 7,
	776, 2, 2, 7699, 7691, 3, 2, 2, 2, 7699, 7693, 3, 2, 2, 2, 7699, 7695,
	3, 2, 2, 2, 7699, 7697, 3, 2, 2, 2, 7700, 1105, 3, 2, 2, 2, 7701, 7702,
	7, 135, 2, 2, 7702, 7708, 5, 184, 93, 2, 7703, 7704, 7, 343, 2, 2, 7704,
	7708, 5, 184, 93, 2, 7705, 7706, 7, 674, 2, 2, 7706, 7708, 5, 184, 93,
	2, 7707, 7701, 3, 2, 2, 2, 7707, 7703, 3, 2, 2, 2, 7707, 7705, 3, 2, 2,
	2, 7708, 1107, 3, 2, 2, 2, 7709, 7714, 5, 1100, 551, 2, 7710, 7711, 7,
	210, 2, 2, 7711, 7712, 7, 475, 2, 2, 7712, 7714, 7, 503, 2, 2, 7713, 7709,
	3, 2, 2, 2, 7713, 7710, 3, 2, 2, 2, 7714, 1109, 3, 2, 2, 2, 7715, 7718,
	5, 1112, 557, 2, 7716, 7718, 5, 1114, 558, 2, 7717, 7715, 3, 2, 2, 2, 7717,
	7716, 3, 2, 2, 2, 7718, 1111, 3, 2, 2, 2, 7719, 7720, 7, 127, 2, 2, 7720,
	7721, 7, 385, 2, 2, 7721, 7722, 7, 703, 2, 2, 7722, 7724, 5, 1136, 569,
	2, 7723, 7725, 5, 512, 257, 2, 7724, 7723, 3, 2, 2, 2, 7724, 7725, 3, 2,
	2, 2, 7725, 1113, 3, 2, 2, 2, 7726, 7727, 7, 127, 2, 2, 7727, 7728, 7,
	574, 2, 2, 7728, 7729, 7, 262, 2, 2, 7729, 7731, 5, 1144, 573, 2, 7730,
	7732, 5, 512, 257, 2, 7731, 7730, 3, 2, 2, 2, 7731, 7732, 3, 2, 2, 2, 7732,
	1115, 3, 2, 2, 2, 7733, 7734, 7, 660, 2, 2, 7734, 7736, 7, 634, 2, 2, 7735,
	7737, 5, 1128, 565, 2, 7736, 7735, 3, 2, 2, 2, 7736, 7737, 3, 2, 2, 2,
	7737, 7739, 3, 2, 2, 2, 7738, 7740, 5, 1132, 567, 2, 7739, 7738, 3, 2,
	2, 2, 7739, 7740, 3, 2, 2, 2, 7740, 7741, 3, 2, 2, 2, 7741, 7743, 5, 1134,
	568, 2, 7742, 7744, 5, 512, 257, 2, 7743, 7742, 3, 2, 2, 2, 7743, 7744,
	3, 2, 2, 2, 7744, 1117, 3, 2, 2, 2, 7745, 7746, 7, 667, 2, 2, 7746, 7747,
	7, 634, 2, 2, 7747, 7751, 5, 1128, 565, 2, 7748, 7750, 5, 512, 257, 2,
	7749, 7748, 3, 2, 2, 2, 7750, 7753, 3, 2, 2, 2, 7751, 7749, 3, 2, 2, 2,
	7751, 7752, 3, 2, 2, 2, 7752, 1119, 3, 2, 2, 2, 7753, 7751, 3, 2, 2, 2,
	7754, 7757, 5, 1122, 562, 2, 7755, 7757, 5, 1124, 563, 2, 7756, 7754, 3,
	2, 2, 2, 7756, 7755, 3, 2, 2, 2, 7757, 1121, 3, 2, 2, 2, 7758, 7759, 7,
	660, 2, 2, 7759, 7760, 7, 294, 2, 2, 7760, 1123, 3, 2, 2, 2, 7761, 7762,
	7, 667, 2, 2, 7762, 7763, 7, 294, 2, 2, 7763, 1125, 3, 2, 2, 2, 7764, 7765,
	7, 531, 2, 2, 7765, 7766, 9, 101, 2, 2, 7766, 7771, 7, 379, 2, 2, 7767,
	7768, 7, 703, 2, 2, 7768, 7772, 5, 302, 152, 2, 7769, 7770, 7, 104, 2,
	2, 7770, 7772, 5, 430, 216, 2, 7771, 7767, 3, 2, 2, 2, 7771, 7769, 3, 2,
	2, 2, 7772, 1127, 3, 2, 2, 2, 7773, 7775, 5, 1130, 566, 2, 7774, 7773,
	3, 2, 2, 2, 7775, 7776, 3, 2, 2, 2, 7776, 7774, 3, 2, 2, 2, 7776, 7777,
	3, 2, 2, 2, 7777, 1129, 3, 2, 2, 2, 7778, 7779, 9, 117, 2, 2, 7779, 1131,
	3, 2, 2, 2, 7780, 7801, 7, 725, 2, 2, 7781, 7782, 9, 118, 2, 2, 7782, 7783,
	7, 25, 2, 2, 7783, 7802, 5, 202, 102, 2, 7784, 7785, 7, 393, 2, 2, 7785,
	7786, 7, 25, 2, 2, 7786, 7787, 5, 184, 93, 2, 7787, 7788, 7, 38, 2, 2,
	7788, 7789, 7, 394, 2, 2, 7789, 7790, 7, 25, 2, 2, 7790, 7791, 7, 776,
	2, 2, 7791, 7802, 3, 2, 2, 2, 7792, 7793, 7, 553, 2, 2, 7793, 7794, 7,
	25, 2, 2, 7794, 7795, 5, 184, 93, 2, 7795, 7796, 7, 38, 2, 2, 7796, 7797,
	7, 554, 2, 2, 7797, 7798, 7, 25, 2, 2, 7798, 7799, 7, 776, 2, 2, 7799,
	7802, 3, 2, 2, 2, 7800, 7802, 7, 649, 2, 2, 7801, 7781, 3, 2, 2, 2, 7801,
	7784, 3, 2, 2, 2, 7801, 7792, 3, 2, 2, 2, 7801, 7800, 3, 2, 2, 2, 7802,
	1133, 3, 2, 2, 2, 7803, 7804, 7, 730, 2, 2, 7804, 7805, 7, 25, 2, 2, 7805,
	7807, 5, 184, 93, 2, 7806, 7803, 3, 2, 2, 2, 7806, 7807, 3, 2, 2, 2, 7807,
	7811, 3, 2, 2, 2, 7808, 7809, 7, 503, 2, 2, 7809, 7810, 7, 25, 2, 2, 7810,
	7812, 5, 184, 93, 2, 7811, 7808, 3, 2, 2, 2, 7811, 7812, 3, 2, 2, 2, 7812,
	7816, 3, 2, 2, 2, 7813, 7814, 7, 196, 2, 2, 7814, 7815, 7, 25, 2, 2, 7815,
	7817, 5, 184, 93, 2, 7816, 7813, 3, 2, 2, 2, 7816, 7817, 3, 2, 2, 2, 7817,
	7821, 3, 2, 2, 2, 7818, 7819, 7, 512, 2, 2, 7819, 7820, 7, 25, 2, 2, 7820,
	7822, 5, 184, 93, 2, 7821, 7818, 3, 2, 2, 2, 7821, 7822, 3, 2, 2, 2, 7822,
	1135, 3, 2, 2, 2, 7823, 7828, 5, 1138, 570, 2, 7824, 7825, 7, 38, 2, 2,
	7825, 7827, 5, 1138, 570, 2, 7826, 7824, 3, 2, 2, 2, 7827, 7830, 3, 2,
	2, 2, 7828, 7826, 3, 2, 2, 2, 7828, 7829, 3, 2, 2, 2, 7829, 1137, 3, 2,
	2, 2, 7830, 7828, 3, 2, 2, 2, 7831, 7832, 7, 387, 2, 2, 7832, 7833, 7,
	25, 2, 2, 7833, 7931, 5, 184, 93, 2, 7834, 7835, 7, 392, 2, 2, 7835, 7836,
	7, 25, 2, 2, 7836, 7931, 5, 184, 93, 2, 7837, 7838, 7, 411, 2, 2, 7838,
	7839, 7, 25, 2, 2, 7839, 7931, 5, 184, 93, 2, 7840, 7841, 7, 395, 2, 2,
	7841, 7842, 7, 25, 2, 2, 7842, 7931, 5, 184, 93, 2, 7843, 7844, 7, 396,
	2, 2, 7844, 7845, 7, 25, 2, 2, 7845, 7931, 7, 776, 2, 2, 7846, 7847, 7,
	524, 2, 2, 7847, 7848, 7, 25, 2, 2, 7848, 7931, 9, 119, 2, 2, 7849, 7850,
	7, 576, 2, 2, 7850, 7851, 7, 25, 2, 2, 7851, 7931, 7, 776, 2, 2, 7852,
	7853, 7, 389, 2, 2, 7853, 7854, 7, 25, 2, 2, 7854, 7931, 7, 776, 2, 2,
	7855, 7856, 7, 398, 2, 2, 7856, 7857, 7, 25, 2, 2, 7857, 7931, 7, 776,
	2, 2, 7858, 7859, 7, 390, 2, 2, 7859, 7860, 7, 25, 2, 2, 7860, 7931, 7,
	776, 2, 2, 7861, 7862, 7, 391, 2, 2, 7862, 7863, 7, 25, 2, 2, 7863, 7931,
	7, 776, 2, 2, 7864, 7865, 7, 393, 2, 2, 7865, 7866, 7, 25, 2, 2, 7866,
	7931, 5, 184, 93, 2, 7867, 7868, 7, 394, 2, 2, 7868, 7869, 7, 25, 2, 2,
	7869, 7931, 7, 776, 2, 2, 7870, 7871, 7, 386, 2, 2, 7871, 7872, 7, 25,
	2, 2, 7872, 7931, 7, 776, 2, 2, 7873, 7874, 7, 553, 2, 2, 7874, 7875, 7,
	25, 2, 2, 7875, 7931, 5, 184, 93, 2, 7876, 7877, 7, 554, 2, 2, 7877, 7878,
	7, 25, 2, 2, 7878, 7931, 7, 776, 2, 2, 7879, 7880, 7, 388, 2, 2, 7880,
	7881, 7, 25, 2, 2, 7881, 7931, 5, 184, 93, 2, 7882, 7883, 7, 412, 2, 2,
	7883, 7884, 7, 25, 2, 2, 7884, 7931, 7, 776, 2, 2, 7885, 7886, 7, 400,
	2, 2, 7886, 7887, 7, 25, 2, 2, 7887, 7931, 7, 776, 2, 2, 7888, 7889, 7,
	401, 2, 2, 7889, 7890, 7, 25, 2, 2, 7890, 7931, 5, 184, 93, 2, 7891, 7892,
	7, 402, 2, 2, 7892, 7893, 7, 25, 2, 2, 7893, 7931, 5, 184, 93, 2, 7894,
	7895, 7, 403, 2, 2, 7895, 7896, 7, 25, 2, 2, 7896, 7931, 5, 184, 93, 2,
	7897, 7898, 7, 405, 2, 2, 7898, 7899, 7, 25, 2, 2, 7899, 7931, 5, 184,
	93, 2, 7900, 7901, 7, 406, 2, 2, 7901, 7902, 7, 25, 2, 2, 7902, 7931, 5,
	184, 93, 2, 7903, 7904, 7, 407, 2, 2, 7904, 7905, 7, 25, 2, 2, 7905, 7931,
	5, 184, 93, 2, 7906, 7907, 7, 404, 2, 2, 7907, 7908, 7, 25, 2, 2, 7908,
	7931, 5, 184, 93, 2, 7909, 7910, 7, 408, 2, 2, 7910, 7911, 7, 25, 2, 2,
	7911, 7931, 7, 776, 2, 2, 7912, 7913, 7, 410, 2, 2, 7913, 7914, 7, 25,
	2, 2, 7914, 7931, 5, 184, 93, 2, 7915, 7916, 7, 409, 2, 2, 7916, 7917,
	7, 25, 2, 2, 7917, 7931, 5, 184, 93, 2, 7918, 7919, 7, 397, 2, 2, 7919,
	7920, 7, 25, 2, 2, 7920, 7931, 5, 184, 93, 2, 7921, 7922, 7, 287, 2, 2,
	7922, 7923, 7, 25, 2, 2, 7923, 7931, 7, 776, 2, 2, 7924, 7925, 7, 311,
	2, 2, 7925, 7926, 7, 25, 2, 2, 7926, 7927, 7, 32, 2, 2, 7927, 7928, 5,
	1140, 571, 2, 7928, 7929, 7, 33, 2, 2, 7929, 7931, 3, 2, 2, 2, 7930, 7831,
	3, 2, 2, 2, 7930, 7834, 3, 2, 2, 2, 7930, 7837, 3, 2, 2, 2, 7930, 7840,
	3, 2, 2, 2, 7930, 7843, 3, 2, 2, 2, 7930, 7846, 3, 2, 2, 2, 7930, 7849,
	3, 2, 2, 2, 7930, 7852, 3, 2, 2, 2, 7930, 7855, 3, 2, 2, 2, 7930, 7858,
	3, 2, 2, 2, 7930, 7861, 3, 2, 2, 2, 7930, 7864, 3, 2, 2, 2, 7930, 7867,
	3, 2, 2, 2, 7930, 7870, 3, 2, 2, 2, 7930, 7873, 3, 2, 2, 2, 7930, 7876,
	3, 2, 2, 2, 7930, 7879, 3, 2, 2, 2, 7930, 7882, 3, 2, 2, 2, 7930, 7885,
	3, 2, 2, 2, 7930, 7888, 3, 2, 2, 2, 7930, 7891, 3, 2, 2, 2, 7930, 7894,
	3, 2, 2, 2, 7930, 7897, 3, 2, 2, 2, 7930, 7900, 3, 2, 2, 2, 7930, 7903,
	3, 2, 2, 2, 7930, 7906, 3, 2, 2, 2, 7930, 7909, 3, 2, 2, 2, 7930, 7912,
	3, 2, 2, 2, 7930, 7915, 3, 2, 2, 2, 7930, 7918, 3, 2, 2, 2, 7930, 7921,
	3, 2, 2, 2, 7930, 7924, 3, 2, 2, 2, 7931, 1139, 3, 2, 2, 2, 7932, 7933,
	5, 1142, 572, 2, 7933, 7934, 7, 38, 2, 2, 7934, 7935, 5, 1142, 572, 2,
	7935, 1141, 3, 2, 2, 2, 7936, 7937, 7, 776, 2, 2, 7937, 1143, 3, 2, 2,
	2, 7938, 7943, 5, 1146, 574, 2, 7939, 7940, 7, 38, 2, 2, 7940, 7942, 5,
	1146, 574, 2, 7941, 7939, 3, 2, 2, 2, 7942, 7945, 3, 2, 2, 2, 7943, 7941,
	3, 2, 2, 2, 7943, 7944, 3, 2, 2, 2, 7944, 1145, 3, 2, 2, 2, 7945, 7943,
	3, 2, 2, 2, 7946, 7947, 7, 567, 2, 2, 7947, 7948, 7, 25, 2, 2, 7948, 7950,
	7, 32, 2, 2, 7949, 7951, 5, 240, 121, 2, 7950, 7949, 3, 2, 2, 2, 7950,
	7951, 3, 2, 2, 2, 7951, 7952, 3, 2, 2, 2, 7952, 7996, 7, 33, 2, 2, 7953,
	7954, 7, 569, 2, 2, 7954, 7955, 7, 25, 2, 2, 7955, 7957, 7, 32, 2, 2, 7956,
	7958, 5, 240, 121, 2, 7957, 7956, 3, 2, 2, 2, 7957, 7958, 3, 2, 2, 2, 7958,
	7959, 3, 2, 2, 2, 7959, 7996, 7, 33, 2, 2, 7960, 7961, 7, 568, 2, 2, 7961,
	7962, 7, 25, 2, 2, 7962, 7964, 7, 32, 2, 2, 7963, 7965, 5, 276, 139, 2,
	7964, 7963, 3, 2, 2, 2, 7964, 7965, 3, 2, 2, 2, 7965, 7966, 3, 2, 2, 2,
	7966, 7996, 7, 33, 2, 2, 7967, 7968, 7, 570, 2, 2, 7968, 7969, 7, 25, 2,
	2, 7969, 7971, 7, 32, 2, 2, 7970, 7972, 5, 276, 139, 2, 7971, 7970, 3,
	2, 2, 2, 7971, 7972, 3, 2, 2, 2, 7972, 7973, 3, 2, 2, 2, 7973, 7996, 7,
	33, 2, 2, 7974, 7975, 7, 572, 2, 2, 7975, 7976, 7, 25, 2, 2, 7976, 7978,
	7, 32, 2, 2, 7977, 7979, 5, 1148, 575, 2, 7978, 7977, 3, 2, 2, 2, 7978,
	7979, 3, 2, 2, 2, 7979, 7980, 3, 2, 2, 2, 7980, 7996, 7, 33, 2, 2, 7981,
	7982, 7, 573, 2, 2, 7982, 7983, 7, 25, 2, 2, 7983, 7985, 7, 32, 2, 2, 7984,
	7986, 5, 1148, 575, 2, 7985, 7984, 3, 2, 2, 2, 7985, 7986, 3, 2, 2, 2,
	7986, 7987, 3, 2, 2, 2, 7987, 7996, 7, 33, 2, 2, 7988, 7989, 7, 571, 2,
	2, 7989, 7990, 7, 25, 2, 2, 7990, 7992, 7, 32, 2, 2, 7991, 7993, 5, 244,
	123, 2, 7992, 7991, 3, 2, 2, 2, 7992, 7993, 3, 2, 2, 2, 7993, 7994, 3,
	2, 2, 2, 7994, 7996, 7, 33, 2, 2, 7995, 7946, 3, 2, 2, 2, 7995, 7953, 3,
	2, 2, 2, 7995, 7960, 3, 2, 2, 2, 7995, 7967, 3, 2, 2, 2, 7995, 7974, 3,
	2, 2, 2, 7995, 7981, 3, 2, 2, 2, 7995, 7988, 3, 2, 2, 2, 7996, 1147, 3,
	2, 2, 2, 7997, 8002, 5, 1150, 576, 2, 7998, 7999, 7, 38, 2, 2, 7999, 8001,
	5, 1150, 576, 2, 8000, 7998, 3, 2, 2, 2, 8001, 8004, 3, 2, 2, 2, 8002,
	8000, 3, 2, 2, 2, 8002, 8003, 3, 2, 2, 2, 8003, 1149, 3, 2, 2, 2, 8004,
	8002, 3, 2, 2, 2, 8005, 8006, 5, 184, 93, 2, 8006, 1151, 3, 2, 2, 2, 1043,
	1252, 1256, 1259, 1262, 1267, 1271, 1276, 1279, 1282, 1285, 1289, 1292,
	1300, 1304, 1307, 1314, 1319, 1326, 1331, 1335, 1338, 1351, 1357, 1365,
	1372, 1375, 1379, 1384, 1390, 1393, 1401, 1405, 1408, 1411, 1415, 1418,
	1423, 1430, 1433, 1436, 1439, 1442, 1449, 1457, 1466, 1473, 1478, 1487,
	1490, 1493, 1496, 1499, 1502, 1505, 1510, 1513, 1516, 1527, 1531, 1535,
	1544, 1550, 1553, 1557, 1560, 1563, 1570, 1576, 1581, 1585, 1591, 1593,
	1600, 1606, 1611, 1614, 1617, 1620, 1623, 1626, 1636, 1639, 1642, 1650,
	1657, 1663, 1666, 1678, 1681, 1684, 1691, 1694, 1706, 1710, 1715, 1718,
	1723, 1729, 1734, 1740, 1742, 1748, 1750, 1756, 1759, 1762, 1767, 1770,
	1775, 1783, 1792, 1798, 1801, 1804, 1819, 1824, 1831, 1839, 1852, 1858,
	1864, 1869, 1872, 1875, 1885, 1892, 1899, 1908, 1913, 1918, 1921, 1924,
	1927, 1931, 1938, 1944, 1953, 1963, 1974, 1976, 1984, 1992, 2001, 2004,
	2008, 2012, 2018, 2024, 2027, 2036, 2048, 2053, 2062, 2069, 2073, 2077,
	2085, 2100, 2106, 2114, 2122, 2134, 2140, 2142, 2148, 2150, 2152, 2157,
	2160, 2166, 2171, 2178, 2185, 2192, 2206, 2211, 2215, 2223, 2227, 2230,
	2234, 2242, 2252, 2266, 2270, 2278, 2283, 2290, 2304, 2313, 2318, 2323,
	2325, 2338, 2350, 2355, 2362, 2374, 2387, 2393, 2395, 2400, 2410, 2413,
	2419, 2422, 2435, 2443, 2451, 2479, 2486, 2490, 2497, 2505, 2514, 2519,
	2531, 2544, 2546, 2561, 2580, 2582, 2591, 2598, 2607, 2614, 2628, 2634,
	2638, 2644, 2691, 2693, 2707, 2711, 2719, 2725, 2740, 2748, 2750, 2756,
	2760, 2767, 2773, 2778, 2785, 2789, 2793, 2802, 2806, 2815, 2818, 2821,
	2824, 2831, 2845, 2866, 2871, 2876, 2883, 2887, 2890, 2894, 2910, 2914,
	2923, 2935, 2938, 2942, 2947, 2953, 2965, 2990, 2994, 2998, 3001, 3005,
	3009, 3013, 3018, 3022, 3027, 3035, 3037, 3042, 3058, 3069, 3073, 3089,
	3094, 3102, 3105, 3115, 3120, 3132, 3135, 3145, 3151, 3155, 3158, 3162,
	3168, 3171, 3177, 3186, 3190, 3223, 3231, 3237, 3258, 3262, 3267, 3270,
	3301, 3306, 3309, 3313, 3316, 3321, 3323, 3326, 3329, 3334, 3337, 3341,
	3346, 3349, 3354, 3357, 3360, 3365, 3370, 3374, 3386, 3390, 3394, 3398,
	3401, 3406, 3411, 3415, 3420, 3429, 3432, 3436, 3440, 3443, 3447, 3451,
	3456, 3461, 3464, 3472, 3480, 3484, 3489, 3507, 3513, 3515, 3519, 3523,
	3527, 3531, 3536, 3539, 3543, 3548, 3552, 3557, 3561, 3568, 3573, 3576,
	3602, 3605, 3637, 3643, 3649, 3656, 3668, 3672, 3676, 3680, 3683, 3686,
	3689, 3692, 3699, 3702, 3705, 3708, 3712, 3716, 3720, 3737, 3739, 3744,
	3753, 3759, 3763, 3770, 3773, 3776, 3780, 3786, 3793, 3798, 3804, 3807,
	3812, 3818, 3821, 3825, 3831, 3835, 3841, 3845, 3849, 3855, 3861, 3866,
	3870, 3875, 3879, 3883, 3897, 3905, 3915, 3919, 3944, 3958, 3964, 3968,
	3973, 3977, 3982, 3988, 3993, 3996, 4002, 4007, 4010, 4016, 4020, 4026,
	4028, 4031, 4037, 4041, 4046, 4052, 4056, 4058, 4065, 4071, 4082, 4087,
	4092, 4100, 4106, 4110, 4115, 4124, 4130, 4136, 4142, 4151, 4157, 4166,
	4178, 4182, 4189, 4194, 4202, 4206, 4210, 4214, 4221, 4225, 4227, 4232,
	4238, 4244, 4250, 4255, 4261, 4265, 4267, 4273, 4279, 4285, 4290, 4296,
	4302, 4305, 4310, 4334, 4340, 4342, 4348, 4352, 4361, 4364, 4371, 4375,
	4382, 4389, 4394, 4397, 4402, 4409, 4413, 4417, 4422, 4428, 4436, 4444,
	4453, 4464, 4470, 4476, 4482, 4488, 4495, 4506, 4512, 4530, 4545, 4553,
	4560, 4565, 4568, 4573, 4581, 4587, 4591, 4597, 4600, 4605, 4613, 4619,
	4623, 4628, 4632, 4636, 4640, 4650, 4655, 4659, 4662, 4666, 4679, 4682,
	4686, 4689, 4693, 4696, 4700, 4703, 4707, 4710, 4713, 4717, 4720, 4724,
	4727, 4731, 4735, 4745, 4748, 4753, 4757, 4760, 4764, 4770, 4774, 4781,
	4785, 4788, 4792, 4798, 4801, 4812, 4815, 4819, 4822, 4826, 4829, 4833,
	4836, 4839, 4843, 4846, 4850, 4853, 4864, 4867, 4870, 4874, 4877, 4885,
	4888, 4892, 4904, 4911, 4916, 4931, 4941, 4947, 4951, 4954, 4961, 4966,
	4969, 4972, 4984, 4994, 4999, 5011, 5015, 5023, 5039, 5042, 5050, 5058,
	5060, 5070, 5074, 5087, 5094, 5097, 5104, 5106, 5114, 5121, 5125, 5131,
	5136, 5141, 5147, 5152, 5157, 5162, 5167, 5171, 5176, 5181, 5186, 5191,
	5196, 5201, 5206, 5211, 5216, 5221, 5226, 5231, 5236, 5246, 5252, 5258,
	5263, 5270, 5275, 5280, 5286, 5298, 5306, 5312, 5315, 5322, 5338, 5343,
	5351, 5367, 5369, 5374, 5383, 5388, 5393, 5398, 5405, 5409, 5413, 5418,
	5424, 5430, 5435, 5440, 5445, 5448, 5455, 5464, 5466, 5474, 5485, 5488,
	5496, 5499, 5501, 5507, 5511, 5527, 5534, 5547, 5552, 5555, 5562, 5584,
	5587, 5592, 5598, 5603, 5606, 5614, 5622, 5633, 5637, 5645, 5649, 5655,
	5657, 5668, 5676, 5680, 5687, 5689, 5703, 5709, 5714, 5719, 5725, 5732,
	5740, 5748, 5753, 5759, 5772, 5775, 5784, 5795, 5812, 5819, 5827, 5837,
	5840, 5852, 5863, 5871, 5875, 5883, 5886, 5896, 5899, 5915, 5918, 5924,
	5928, 5933, 5937, 5940, 5944, 5947, 5953, 5956, 5960, 5963, 5968, 5971,
	5975, 5980, 5983, 6004, 6018, 6028, 6040, 6043, 6062, 6065, 6067, 6075,
	6086, 6090, 6095, 6098, 6104, 6109, 6115, 6156, 6168, 6174, 6177, 6182,
	6185, 6196, 6208, 6210, 6212, 6222, 6225, 6242, 6246, 6257, 6260, 6265,
	6271, 6273, 6283, 6287, 6292, 6295, 6311, 6315, 6319, 6324, 6327, 6331,
	6335, 6342, 6348, 6351, 6362, 6368, 6372, 6381, 6393, 6396, 6400, 6403,
	6405, 6409, 6420, 6424, 6433, 6449, 6458, 6463, 6472, 6478, 6484, 6493,
	6499, 6503, 6510, 6515, 6518, 6521, 6529, 6536, 6539, 6543, 6546, 6551,
	6553, 6559, 6570, 6577, 6580, 6584, 6587, 6590, 6597, 6609, 6612, 6624,
	6633, 6638, 6648, 6653, 6660, 6664, 6668, 6675, 6679, 6698, 6704, 6713,
	6726, 6739, 6745, 6749, 6754, 6765, 6774, 6783, 6788, 6792, 6800, 6804,
	6809, 6813, 6816, 6818, 6823, 6826, 6841, 6888, 6892, 6899, 6902, 6905,
	6908, 6922, 6925, 6927, 6933, 6937, 6940, 6943, 6947, 6951, 6955, 6958,
	6961, 6963, 6970, 6982, 6985, 7004, 7006, 7014, 7021, 7023, 7027, 7032,
	7038, 7041, 7047, 7050, 7053, 7060, 7064, 7071, 7077, 7083, 7086, 7091,
	7095, 7101, 7104, 7113, 7115, 7126, 7135, 7139, 7148, 7162, 7169, 7177,
	7185, 7196, 7203, 7210, 7217, 7262, 7273, 7280, 7284, 7287, 7290, 7293,
	7334, 7341, 7351, 7360, 7365, 7368, 7375, 7381, 7392, 7403, 7409, 7415,
	7421, 7425, 7428, 7431, 7437, 7447, 7459, 7462, 7464, 7468, 7475, 7482,
	7489, 7497, 7504, 7511, 7518, 7533, 7546, 7549, 7557, 7569, 7575, 7580,
	7585, 7597, 7608, 7616, 7622, 7633, 7640, 7647, 7651, 7656, 7668, 7672,
	7677, 7687, 7689, 7699, 7707, 7713, 7717, 7724, 7731, 7736, 7739, 7743,
	7751, 7756, 7771, 7776, 7801, 7806, 7811, 7816, 7821, 7828, 7930, 7943,
	7950, 7957, 7964, 7971, 7978, 7985, 7992, 7995, 8002,
}
var literalNames = []string{
	"", "'SHARED'", "'EXCLUSIVE'", "'&&'", "'||'", "'!'", "'~'", "'|'", "'&'",
	"'<<'", "'>>'", "'^'", "'%'", "':'", "'+'", "'-'", "'*'", "'/'", "'\\'",
	"'.'", "'.*'", "'<=>'", "'=='", "'='", "", "'>'", "'>='", "'<'", "'<='",
	"'#'", "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "'\"'", "'''",
	"'`'", "'?'", "'@'", "';'", "':='", "'->'", "'->>'", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "'INNODB'", "'REDO_LOG'", "'DO NOT MATCH ANY THING, JUST FOR GENERATOR'",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "'not support'",
}
var symbolicNames = []string{
	"", "", "", "AND_", "OR_", "NOT_", "TILDE_", "VERTICAL_BAR_", "AMPERSAND_",
	"SIGNED_LEFT_SHIFT_", "SIGNED_RIGHT_SHIFT_", "CARET_", "MOD_", "COLON_",
	"PLUS_", "MINUS_", "ASTERISK_", "SLASH_", "BACKSLASH_", "DOT_", "DOT_ASTERISK_",
	"SAFE_EQ_", "DEQ_", "EQ_", "NEQ_", "GT_", "GTE_", "LT_", "LTE_", "POUND_",
	"LP_", "RP_", "LBE_", "RBE_", "LBT_", "RBT_", "COMMA_", "DQ_", "SQ_", "BQ_",
	"QUESTION_", "AT_", "SEMI_", "ASSIGNMENT_", "JSON_SEPARATOR", "JSON_UNQUOTED_SEPARATOR",
	"BLOCK_COMMENT", "INLINE_COMMENT", "WS", "MAX", "MIN", "SUM", "COUNT",
	"GROUP_CONCAT", "CAST", "POSITION", "SUBSTRING", "SUBSTR", "EXTRACT", "TRIM",
	"LAST_DAY", "TRADITIONAL", "TREE", "MYSQL_MAIN", "MYSQL_ADMIN", "INSTANT",
	"INPLACE", "COPY", "UL_BINARY", "AUTOCOMMIT", "INNODB", "REDO_LOG", "FOR_GENERATOR",
	"ACCESSIBLE", "ACCOUNT", "ACTION", "ACTIVE", "ADD", "ADMIN", "AFTER", "AGAINST",
	"AGGREGATE", "ALGORITHM", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "ANY",
	"ARRAY", "AS", "ASC", "ASCII", "ASENSITIVE", "AT", "ATTRIBUTE", "AUTOEXTEND_SIZE",
	"AUTO_INCREMENT", "AVG", "BIT_XOR", "AVG_ROW_LENGTH", "BACKUP", "BEFORE",
	"BEGIN", "BETWEEN", "BIGINT", "BINARY", "BINLOG", "BIT", "BLOB", "BLOCK",
	"BOOL", "BOOLEAN", "BOTH", "BTREE", "BUCKETS", "BY", "BYTE", "CACHE", "CALL",
	"CASCADE", "CASCADED", "CASE", "CATALOG_NAME", "CHAIN", "CHANGE", "CHANGED",
	"CHANNEL", "CHAR", "CHARACTER", "CHARSET", "CHECK", "CHECKSUM", "CIPHER",
	"CLASS_ORIGIN", "CLIENT", "CLONE", "CLOSE", "COALESCE", "CODE", "COLLATE",
	"COLLATION", "COLUMN", "COLUMNS", "COLUMN_FORMAT", "COLUMN_NAME", "COMMENT",
	"COMMIT", "COMMITTED", "COMPACT", "COMPLETION", "COMPONENT", "COMPRESSED",
	"COMPRESSION", "CONCURRENT", "CONDITION", "CONNECTION", "CONSISTENT", "CONSTRAINT",
	"CONSTRAINT_CATALOG", "CONSTRAINT_NAME", "CONSTRAINT_SCHEMA", "CONTAINS",
	"CONTEXT", "CONTINUE", "CONVERT", "CPU", "CREATE", "CROSS", "CUBE", "CUME_DIST",
	"CURRENT", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER",
	"CURSOR", "CURSOR_NAME", "DATA", "DATABASE", "DATABASES", "DATAFILE", "DATE",
	"DATETIME", "DAY", "DAY_HOUR", "DAY_MICROSECOND", "DAY_MINUTE", "DAY_SECOND",
	"DEALLOCATE", "DEC", "DECIMAL", "DECLARE", "DEFAULT", "DEFAULT_AUTH", "DEFINER",
	"DEFINITION", "DELAYED", "DELAY_KEY_WRITE", "DELETE", "DENSE_RANK", "DESC",
	"DESCRIBE", "DESCRIPTION", "DETERMINISTIC", "DIAGNOSTICS", "DIRECTORY",
	"DISABLE", "DISCARD", "DISK", "DISTINCT", "DISTINCTROW", "DIV", "DO", "DOUBLE",
	"DROP", "DUAL", "DUMPFILE", "DUPLICATE", "DYNAMIC", "EACH", "ELSE", "ELSEIF",
	"EMPTY", "ENABLE", "ENCLOSED", "ENCRYPTION", "END", "ENDS", "ENFORCED",
	"ENGINE", "ENGINES", "ENGINE_ATTRIBUTE", "ENUM", "ERROR", "ERRORS", "ESCAPE",
	"ESCAPED", "EVENT", "EVENTS", "EVERY", "EXCEPT", "EXCHANGE", "EXCLUDE",
	"EXECUTE", "EXISTS", "EXIT", "EXPANSION", "EXPIRE", "EXPLAIN", "EXPORT",
	"EXTENDED", "EXTENT_SIZE", "FAILED_LOGIN_ATTEMPTS", "FALSE", "FAST", "FAULTS",
	"FETCH", "FILE", "FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIRST_VALUE", "FIXED",
	"FLOAT", "FLOAT4", "FLOAT8", "FLUSH", "FOLLOWING", "FOLLOWS", "FOR", "FORCE",
	"FOREIGN", "FORMAT", "FOUND", "FROM", "FULL", "FULLTEXT", "FUNCTION", "GENERAL",
	"GENERATED", "GEOMETRY", "GEOMETRYCOLLECTION", "GET", "GET_FORMAT", "GET_MASTER_PUBLIC_KEY",
	"GLOBAL", "GRANT", "GRANTS", "GROUP", "GROUPING", "GROUPS", "GROUP_REPLICATION",
	"HANDLER", "HASH", "HAVING", "HELP", "HIGH_PRIORITY", "HISTOGRAM", "HISTORY",
	"HOST", "HOSTS", "HOUR", "HOUR_MICROSECOND", "HOUR_MINUTE", "HOUR_SECOND",
	"IDENTIFIED", "IF", "IGNORE", "IGNORE_SERVER_IDS", "IMPORT", "IN", "INACTIVE",
	"INDEX", "INDEXES", "INFILE", "INITIAL_SIZE", "INNER", "INOUT", "INSENSITIVE",
	"INSERT", "INSERT_METHOD", "INSTALL", "INSTANCE", "INT", "INT1", "INT2",
	"INT3", "INT4", "INT8", "INTEGER", "INTERVAL", "INTO", "INVISIBLE", "INVOKER",
	"IO", "IO_AFTER_GTIDS", "IO_BEFORE_GTIDS", "IPC", "IS", "ISOLATION", "ISSUER",
	"ITERATE", "JOIN", "JSON", "JSON_TABLE", "JSON_VALUE", "KEY", "KEYS", "KEY_BLOCK_SIZE",
	"KILL", "LAG", "LANGUAGE", "LAST", "LAST_VALUE", "LATERAL", "LEAD", "LEADING",
	"LEAVE", "LEAVES", "LEFT", "LESS", "LEVEL", "LIKE", "LIMIT", "LINEAR",
	"LINES", "LINESTRING", "LIST", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP",
	"LOCK", "LOCKED", "LOCKS", "LOGFILE", "LOGS", "LONG", "LONGBLOB", "LONGTEXT",
	"LOOP", "LOW_PRIORITY", "MASTER", "MASTER_AUTO_POSITION", "MASTER_BIND",
	"MASTER_COMPRESSION_ALGORITHM", "MASTER_CONNECT_RETRY", "MASTER_DELAY",
	"MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS",
	"MASTER_PASSWORD", "MASTER_PORT", "MASTER_PUBLIC_KEY_PATH", "MASTER_RETRY_COUNT",
	"MASTER_SERVER_ID", "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH",
	"MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH",
	"MASTER_SSL_KEY", "MASTER_SSL_VERIFY_SERVER_CERT", "MASTER_TLS_CIPHERSUITES",
	"MASTER_TLS_VERSION", "MASTER_USER", "MASTER_ZSTD_COMPRESSION_LEVEL", "MATCH",
	"MAXVALUE", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS",
	"MAX_SIZE", "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", "MEDIUM", "MEDIUMBLOB",
	"MEDIUMINT", "MEDIUMTEXT", "MEMBER", "MEMORY", "MERGE", "MESSAGE_TEXT",
	"MICROSECOND", "MIDDLEINT", "MIGRATE", "MINUTE", "MINUTE_MICROSECOND",
	"MINUTE_SECOND", "MIN_ROWS", "MOD", "MODE", "MODIFIES", "MODIFY", "MONTH",
	"MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON", "MUTEX", "MYSQL_ERRNO",
	"NAME", "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NDBCLUSTER", "NESTED",
	"NETWORK_NAMESPACE", "NEVER", "NEW", "NEXT", "NO", "NODEGROUP", "NONE",
	"NOT", "NOWAIT", "NO_WAIT", "NO_WRITE_TO_BINLOG", "NTH_VALUE", "NTILE",
	"NULL", "NULLS", "NUMBER", "NUMERIC", "NVARCHAR", "OF", "OFF", "OFFSET",
	"OJ", "OLD", "ON", "ONE", "ONLY", "OPEN", "OPTIMIZE", "OPTIMIZER_COSTS",
	"OPTION", "OPTIONAL", "OPTIONALLY", "OPTIONS", "OR", "ORDER", "ORDINALITY",
	"ORGANIZATION", "OTHERS", "OUT", "OUTER", "OUTFILE", "OVER", "OWNER", "PACK_KEYS",
	"PAGE", "PARSER", "PARTIAL", "PARTITION", "PARTITIONING", "PARTITIONS",
	"PASSWORD", "PASSWORD_LOCK_TIME", "PATH", "PERCENT_RANK", "PERSIST", "PERSIST_ONLY",
	"PHASE", "PLUGIN", "PLUGINS", "PLUGIN_DIR", "POINT", "POLYGON", "PORT",
	"PRECEDES", "PRECEDING", "PRECISION", "PREPARE", "PRESERVE", "PREV", "PRIMARY",
	"PRIVILEGES", "PRIVILEGE_CHECKS_USER", "PROCEDURE", "PROCESS", "PROCESSLIST",
	"PROFILE", "PROFILES", "PROXY", "PURGE", "QUARTER", "QUERY", "QUICK", "RANDOM",
	"RANGE", "RANK", "READ", "READS", "READ_ONLY", "READ_WRITE", "REAL", "REBUILD",
	"RECOVER", "RECURSIVE", "REDO_BUFFER_SIZE", "REDUNDANT", "REFERENCE", "REFERENCES",
	"REGEXP", "RELAY", "RELAYLOG", "RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAY_THREAD",
	"RELEASE", "RELOAD", "REMOVE", "RENAME", "REORGANIZE", "REPAIR", "REPEAT",
	"REPEATABLE", "REPLACE", "REPLICA", "REPLICAS", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE",
	"REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB",
	"REPLICATE_WILD_DO_TABLE", "REPLICATE_WILD_IGNORE_TABLE", "REPLICATION",
	"REQUIRE", "REQUIRE_ROW_FORMAT", "RESET", "RESIGNAL", "RESOURCE", "RESPECT",
	"RESTART", "RESTORE", "RESTRICT", "RESUME", "RETAIN", "RETURN", "RETURNED_SQLSTATE",
	"RETURNING", "RETURNS", "REUSE", "REVERSE", "REVOKE", "RIGHT", "RLIKE",
	"ROLE", "ROLLBACK", "ROLLUP", "ROTATE", "ROUTINE", "ROW", "ROWS", "ROW_COUNT",
	"ROW_FORMAT", "ROW_NUMBER", "RTREE", "SAVEPOINT", "SCHEDULE", "SCHEMA",
	"SCHEMAS", "SCHEMA_NAME", "SECOND", "SECONDARY", "SECONDARY_ENGINE", "SECONDARY_ENGINE_ATTRIBUTE",
	"SECONDARY_LOAD", "SECONDARY_UNLOAD", "SECOND_MICROSECOND", "SECURITY",
	"SELECT", "SENSITIVE", "SEPARATOR", "SERIAL", "SERIALIZABLE", "SERVER",
	"SESSION", "SET", "SHARE", "SHOW", "SHUTDOWN", "SIGNAL", "SIGNED", "SIMPLE",
	"SKIP_SYMBOL", "SLAVE", "SLOW", "SMALLINT", "SNAPSHOT", "SOCKET", "SONAME",
	"SOUNDS", "SOURCE", "SPATIAL", "SPECIFIC", "SQL", "SQLEXCEPTION", "SQLSTATE",
	"SQLWARNING", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS",
	"SQL_BIG_RESULT", "SQL_BUFFER_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE",
	"SQL_SMALL_RESULT", "SQL_THREAD", "SRID", "SSL", "STACKED", "START", "STARTING",
	"STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES",
	"STATUS", "STOP", "STORAGE", "STORED", "STRAIGHT_JOIN", "STREAM", "STRING",
	"SUBCLASS_ORIGIN", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", "SUPER",
	"SUSPEND", "SWAPS", "SWITCHES", "SYSTEM", "TABLE", "TABLES", "TABLESPACE",
	"TABLE_CHECKSUM", "TABLE_NAME", "TEMPORARY", "TEMPTABLE", "TERMINATED",
	"TEXT", "THAN", "THEN", "THREAD_PRIORITY", "TIES", "TIME", "TIMESTAMP",
	"TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TINYBLOB", "TINYINT", "TINYTEXT", "TLS",
	"TO", "TRAILING", "TRANSACTION", "TRIGGER", "TRIGGERS", "TRUE", "TRUNCATE",
	"TYPE", "TYPES", "UNBOUNDED", "UNCOMMITTED", "UNDEFINED", "UNDO", "UNDOFILE",
	"UNDO_BUFFER_SIZE", "UNICODE", "UNINSTALL", "UNION", "UNIQUE", "UNKNOWN",
	"UNLOCK", "UNSIGNED", "UNTIL", "UPDATE", "UPGRADE", "USAGE", "USE", "USER",
	"USER_RESOURCES", "USE_FRM", "USING", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP",
	"VALIDATION", "VALUE", "VALUES", "VARBINARY", "VARCHAR", "VARCHARACTER",
	"VARIABLES", "VARYING", "VCPU", "VIEW", "VIRTUAL", "VISIBLE", "WAIT", "WARNINGS",
	"WEEK", "WEIGHT_STRING", "WHEN", "WHERE", "WHILE", "WINDOW", "WITH", "WITHOUT",
	"WORK", "WRAPPER", "WRITE", "X509", "XA", "XID", "XML", "XOR", "YEAR",
	"YEAR_MONTH", "ZEROFILL", "FILESIZE_LITERAL", "IDENTIFIER_", "SINGLE_QUOTED_TEXT",
	"DOUBLE_QUOTED_TEXT", "NCHAR_TEXT", "UNDERSCORE_CHARSET", "NUMBER_", "INT_NUM_",
	"FLOAT_NUM_", "DECIMAL_NUM_", "HEX_DIGIT_", "BIT_NUM_", "NOT_SUPPORT_",
}

var ruleNames = []string{
	"execute", "insert", "insertSpecification", "insertValuesClause", "fields",
	"insertIdentifier", "tableWild", "insertSelectClause", "onDuplicateKeyClause",
	"valueReference", "derivedColumns", "replace", "replaceSpecification",
	"replaceValuesClause", "replaceSelectClause", "update", "updateSpecification_",
	"assignment", "setAssignmentsClause", "assignmentValues", "assignmentValue",
	"blobValue", "delete", "deleteSpecification", "singleTableClause", "multipleTablesClause",
	"select", "selectWithInto", "queryExpression", "queryExpressionBody", "unionClause",
	"queryExpressionParens", "queryPrimary", "querySpecification", "call",
	"doStatement", "handlerStatement", "handlerOpenStatement", "handlerReadIndexStatement",
	"handlerReadStatement", "handlerCloseStatement", "importStatement", "loadStatement",
	"loadDataStatement", "loadXmlStatement", "explicitTable", "tableValueConstructor",
	"rowConstructorList", "withClause", "cteClause", "selectSpecification",
	"duplicateSpecification", "projections", "projection", "unqualifiedShorthand",
	"qualifiedShorthand", "fromClause", "tableReferences", "escapedTableReference",
	"tableReference", "tableFactor", "partitionNames", "indexHintList", "indexHint",
	"joinedTable", "innerJoinType", "outerJoinType", "naturalJoinType", "joinSpecification",
	"whereClause", "groupByClause", "havingClause", "limitClause", "limitRowCount",
	"limitOffset", "windowClause", "windowItem", "subquery", "selectLinesInto",
	"selectFieldsInto", "selectIntoExpression", "lockClause", "lockClauseList",
	"lockStrength", "lockedRowAction", "tableLockingList", "tableIdentOptWild",
	"tableAliasRefList", "parameterMarker", "customKeyword", "literals", "string_",
	"stringLiterals", "numberLiterals", "temporalLiterals", "hexadecimalLiterals",
	"bitValueLiterals", "booleanLiterals", "nullValueLiterals", "collationName",
	"identifier", "identifierKeywordsUnambiguous", "identifierKeywordsAmbiguous1RolesAndLabels",
	"identifierKeywordsAmbiguous2Labels", "identifierKeywordsAmbiguous3Roles",
	"identifierKeywordsAmbiguous4SystemVariables", "textOrIdentifier", "variable",
	"userVariable", "systemVariable", "setSystemVariable", "optionType", "internalVariableName",
	"setExprOrDefault", "transactionCharacteristics", "isolationLevel", "isolationTypes",
	"transactionAccessMode", "schemaName", "schemaNames", "charsetName", "schemaPairs",
	"schemaPair", "tableName", "columnName", "indexName", "constraintName",
	"userIdentifierOrText", "userName", "eventName", "serverName", "wrapperName",
	"functionName", "viewName", "owner", "alias", "name", "tableList", "viewNames",
	"columnNames", "groupName", "routineName", "shardLibraryName", "componentName",
	"pluginName", "hostName", "port", "cloneInstance", "cloneDir", "channelName",
	"logName", "roleName", "roleIdentifierOrText", "engineRef", "triggerName",
	"triggerTime", "tableOrTables", "userOrRole", "partitionName", "identifierList",
	"allOrPartitionNameList", "triggerEvent", "triggerOrder", "expr", "andOperator",
	"orOperator", "notOperator", "booleanPrimary", "assignmentOperator", "comparisonOperator",
	"predicate", "bitExpr", "simpleExpr", "columnRef", "columnRefList", "functionCall",
	"aggregationFunction", "aggregationFunctionName", "distinct", "overClause",
	"windowSpecification", "frameClause", "frameStart", "frameEnd", "frameBetween",
	"specialFunction", "currentUserFunction", "groupConcatFunction", "windowFunction",
	"windowingClause", "leadLagInfo", "nullTreatment", "checkType", "repairType",
	"castFunction", "convertFunction", "castType", "nchar", "positionFunction",
	"substringFunction", "extractFunction", "charFunction", "trimFunction",
	"valuesFunction", "weightStringFunction", "levelClause", "levelInWeightListElement",
	"regularFunction", "shorthandRegularFunction", "completeRegularFunction",
	"regularFunctionName", "matchExpression", "matchSearchModifier", "caseExpression",
	"datetimeExpr", "binaryLogFileIndexNumber", "caseWhen", "caseElse", "intervalExpression",
	"intervalValue", "intervalUnit", "orderByClause", "orderByItem", "dataType",
	"stringList", "textString", "textStringHash", "fieldOptions", "precision",
	"typeDatetimePrecision", "charsetWithOptBinary", "ascii", "unicode", "charset",
	"defaultCollation", "defaultEncryption", "defaultCharset", "signedLiteral",
	"now", "columnFormat", "storageMedia", "direction", "keyOrIndex", "fieldLength",
	"characterSet", "collateClause", "fieldOrVarSpec", "notExistClause", "existClause",
	"connectionId", "labelName", "cursorName", "conditionName", "unionOption",
	"noWriteToBinLog", "channelOption", "preparedStatement", "executeStatement",
	"executeVarList", "alterStatement", "createTable", "partitionClause", "partitionTypeDef",
	"subPartitions", "partitionKeyAlgorithm", "duplicateAsQueryExpression",
	"alterTable", "standaloneAlterTableAction", "alterTableActions", "alterTablePartitionOptions",
	"alterCommandList", "alterList", "createTableOptionsSpaceSeparated", "alterListItem",
	"alterOrderList", "tableConstraintDef", "alterCommandsModifierList", "alterCommandsModifier",
	"withValidation", "standaloneAlterCommands", "alterPartition", "constraintClause",
	"tableElementList", "tableElement", "restrict", "fulltextIndexOption",
	"dropTable", "dropIndex", "alterAlgorithmOption", "alterLockOption", "truncateTable",
	"createIndex", "createDatabase", "alterDatabase", "createDatabaseSpecification_",
	"alterDatabaseSpecification_", "dropDatabase", "alterInstance", "instanceAction",
	"channel", "createEvent", "alterEvent", "dropEvent", "createFunction",
	"alterFunction", "dropFunction", "createProcedure", "alterProcedure", "dropProcedure",
	"createServer", "alterServer", "dropServer", "createView", "alterView",
	"dropView", "createTablespace", "createTablespaceInnodb", "createTablespaceNdb",
	"alterTablespace", "alterTablespaceNdb", "alterTablespaceInnodb", "dropTablespace",
	"createLogfileGroup", "alterLogfileGroup", "dropLogfileGroup", "createTrigger",
	"dropTrigger", "renameTable", "createDefinitionClause", "columnDefinition",
	"fieldDefinition", "columnAttribute", "checkConstraint", "constraintEnforcement",
	"generatedOption", "referenceDefinition", "onUpdateDelete", "referenceOption",
	"indexNameAndType", "indexType", "indexTypeClause", "keyParts", "keyPart",
	"keyPartWithExpression", "keyListWithExpression", "indexOption", "commonIndexOption",
	"visibility", "createLikeClause", "createIndexSpecification", "createTableOptions",
	"createTableOption", "createSRSStatement", "dropSRSStatement", "srsAttribute",
	"place", "partitionDefinitions", "partitionDefinition", "partitionLessThanValue",
	"partitionValueList", "partitionDefinitionOption", "subpartitionDefinition",
	"ownerStatement", "scheduleExpression", "timestampValue", "routineBody",
	"serverOption", "routineOption", "procedureParameter", "fileSizeLiteral",
	"simpleStatement", "compoundStatement", "validStatement", "beginStatement",
	"declareStatement", "flowControlStatement", "caseStatement", "ifStatement",
	"iterateStatement", "leaveStatement", "loopStatement", "repeatStatement",
	"returnStatement", "whileStatement", "cursorStatement", "cursorCloseStatement",
	"cursorDeclareStatement", "cursorFetchStatement", "cursorOpenStatement",
	"conditionHandlingStatement", "declareConditionStatement", "declareHandlerStatement",
	"getDiagnosticsStatement", "statementInformationItem", "conditionInformationItem",
	"conditionNumber", "statementInformationItemName", "conditionInformationItemName",
	"handlerAction", "conditionValue", "resignalStatement", "signalStatement",
	"signalInformationItem", "use", "help", "explain", "showDatabases", "showTables",
	"showTableStatus", "showColumns", "showIndex", "showCreateTable", "fromSchema",
	"fromTable", "showLike", "showWhereClause", "showFilter", "showProfileType",
	"setVariable", "optionValueList", "optionValueNoOptionType", "optionValue",
	"showBinaryLogs", "showBinlogEvents", "showCharacterSet", "showCollation",
	"showCreateDatabase", "showCreateEvent", "showCreateFunction", "showCreateProcedure",
	"showCreateTrigger", "showCreateUser", "showCreateView", "showEngine",
	"showEngines", "showCharset", "showErrors", "showEvents", "showFunctionCode",
	"showFunctionStatus", "showGrant", "showMasterStatus", "showOpenTables",
	"showPlugins", "showPrivileges", "showProcedureCode", "showProcedureStatus",
	"showProcesslist", "showProfile", "showProfiles", "showRelaylogEvent",
	"showSlavehost", "showSlaveStatus", "showStatus", "showTriggers", "showVariables",
	"showWarnings", "showReplicas", "showReplicaStatus", "setCharacter", "clone",
	"cloneAction", "createLoadableFunction", "install", "uninstall", "installComponent",
	"installPlugin", "uninstallComponent", "uninstallPlugin", "analyzeTable",
	"histogram", "checkTable", "checkTableOption", "checksumTable", "optimizeTable",
	"repairTable", "alterResourceGroup", "vcpuSpec", "createResourceGroup",
	"dropResourceGroup", "setResourceGroup", "binlog", "cacheIndex", "cacheTableIndexList",
	"partitionList", "flush", "flushOption", "tablesOption", "kill", "loadIndexInfo",
	"loadTableIndexList", "resetStatement", "resetOption", "resetPersist",
	"restart", "shutdown", "explainType", "explainableStatement", "formatName",
	"show", "setTransaction", "setAutoCommit", "beginTransaction", "transactionCharacteristic",
	"commit", "rollback", "savepoint", "begin", "lock", "unlock", "releaseSavepoint",
	"xa", "optionChain", "optionRelease", "tableLock", "lockOption", "xid",
	"grant", "revoke", "userList", "roleOrPrivileges", "roleOrPrivilege", "aclType",
	"grantIdentifier", "createUser", "createUserEntry", "createUserList", "defaultRoleClause",
	"requireClause", "connectOptions", "accountLockPasswordExpireOptions",
	"accountLockPasswordExpireOption", "alterUser", "alterUserEntry", "alterUserList",
	"dropUser", "createRole", "dropRole", "renameUser", "setDefaultRole", "setRole",
	"setPassword", "authOption", "withGrantOption", "userOrRoles", "roles",
	"grantAs", "withRoles", "userAuthOption", "identifiedBy", "identifiedWith",
	"connectOption", "tlsOption", "userFuncAuthOption", "change", "changeMasterTo",
	"changeReplicationFilter", "startSlave", "stopSlave", "groupReplication",
	"startGroupReplication", "stopGroupReplication", "purgeBinaryLog", "threadTypes",
	"threadType", "utilOption", "connectionOptions", "masterDefs", "masterDef",
	"ignoreServerIds", "ignoreServerId", "filterDefs", "filterDef", "wildTables",
	"wildTable",
}

type MySQLStatementParser struct {
	*antlr.BaseParser
}

// NewMySQLStatementParser produces a new parser instance for the optional input antlr.TokenStream.
//
// The *MySQLStatementParser instance produced may be reused by calling the SetInputStream method.
// The initial parser configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewMySQLStatementParser(input antlr.TokenStream) *MySQLStatementParser {
	this := new(MySQLStatementParser)
	deserializer := antlr.NewATNDeserializer(nil)
	deserializedATN := deserializer.DeserializeFromUInt16(parserATN)
	decisionToDFA := make([]*antlr.DFA, len(deserializedATN.DecisionToState))
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "MySQLStatement.g4"

	return this
}

// MySQLStatementParser tokens.
const (
	MySQLStatementParserEOF                           = antlr.TokenEOF
	MySQLStatementParserT__0                          = 1
	MySQLStatementParserT__1                          = 2
	MySQLStatementParserAND_                          = 3
	MySQLStatementParserOR_                           = 4
	MySQLStatementParserNOT_                          = 5
	MySQLStatementParserTILDE_                        = 6
	MySQLStatementParserVERTICAL_BAR_                 = 7
	MySQLStatementParserAMPERSAND_                    = 8
	MySQLStatementParserSIGNED_LEFT_SHIFT_            = 9
	MySQLStatementParserSIGNED_RIGHT_SHIFT_           = 10
	MySQLStatementParserCARET_                        = 11
	MySQLStatementParserMOD_                          = 12
	MySQLStatementParserCOLON_                        = 13
	MySQLStatementParserPLUS_                         = 14
	MySQLStatementParserMINUS_                        = 15
	MySQLStatementParserASTERISK_                     = 16
	MySQLStatementParserSLASH_                        = 17
	MySQLStatementParserBACKSLASH_                    = 18
	MySQLStatementParserDOT_                          = 19
	MySQLStatementParserDOT_ASTERISK_                 = 20
	MySQLStatementParserSAFE_EQ_                      = 21
	MySQLStatementParserDEQ_                          = 22
	MySQLStatementParserEQ_                           = 23
	MySQLStatementParserNEQ_                          = 24
	MySQLStatementParserGT_                           = 25
	MySQLStatementParserGTE_                          = 26
	MySQLStatementParserLT_                           = 27
	MySQLStatementParserLTE_                          = 28
	MySQLStatementParserPOUND_                        = 29
	MySQLStatementParserLP_                           = 30
	MySQLStatementParserRP_                           = 31
	MySQLStatementParserLBE_                          = 32
	MySQLStatementParserRBE_                          = 33
	MySQLStatementParserLBT_                          = 34
	MySQLStatementParserRBT_                          = 35
	MySQLStatementParserCOMMA_                        = 36
	MySQLStatementParserDQ_                           = 37
	MySQLStatementParserSQ_                           = 38
	MySQLStatementParserBQ_                           = 39
	MySQLStatementParserQUESTION_                     = 40
	MySQLStatementParserAT_                           = 41
	MySQLStatementParserSEMI_                         = 42
	MySQLStatementParserASSIGNMENT_                   = 43
	MySQLStatementParserJSON_SEPARATOR                = 44
	MySQLStatementParserJSON_UNQUOTED_SEPARATOR       = 45
	MySQLStatementParserBLOCK_COMMENT                 = 46
	MySQLStatementParserINLINE_COMMENT                = 47
	MySQLStatementParserWS                            = 48
	MySQLStatementParserMAX                           = 49
	MySQLStatementParserMIN                           = 50
	MySQLStatementParserSUM                           = 51
	MySQLStatementParserCOUNT                         = 52
	MySQLStatementParserGROUP_CONCAT                  = 53
	MySQLStatementParserCAST                          = 54
	MySQLStatementParserPOSITION                      = 55
	MySQLStatementParserSUBSTRING                     = 56
	MySQLStatementParserSUBSTR                        = 57
	MySQLStatementParserEXTRACT                       = 58
	MySQLStatementParserTRIM                          = 59
	MySQLStatementParserLAST_DAY                      = 60
	MySQLStatementParserTRADITIONAL                   = 61
	MySQLStatementParserTREE                          = 62
	MySQLStatementParserMYSQL_MAIN                    = 63
	MySQLStatementParserMYSQL_ADMIN                   = 64
	MySQLStatementParserINSTANT                       = 65
	MySQLStatementParserINPLACE                       = 66
	MySQLStatementParserCOPY                          = 67
	MySQLStatementParserUL_BINARY                     = 68
	MySQLStatementParserAUTOCOMMIT                    = 69
	MySQLStatementParserINNODB                        = 70
	MySQLStatementParserREDO_LOG                      = 71
	MySQLStatementParserFOR_GENERATOR                 = 72
	MySQLStatementParserACCESSIBLE                    = 73
	MySQLStatementParserACCOUNT                       = 74
	MySQLStatementParserACTION                        = 75
	MySQLStatementParserACTIVE                        = 76
	MySQLStatementParserADD                           = 77
	MySQLStatementParserADMIN                         = 78
	MySQLStatementParserAFTER                         = 79
	MySQLStatementParserAGAINST                       = 80
	MySQLStatementParserAGGREGATE                     = 81
	MySQLStatementParserALGORITHM                     = 82
	MySQLStatementParserALL                           = 83
	MySQLStatementParserALTER                         = 84
	MySQLStatementParserALWAYS                        = 85
	MySQLStatementParserANALYZE                       = 86
	MySQLStatementParserAND                           = 87
	MySQLStatementParserANY                           = 88
	MySQLStatementParserARRAY                         = 89
	MySQLStatementParserAS                            = 90
	MySQLStatementParserASC                           = 91
	MySQLStatementParserASCII                         = 92
	MySQLStatementParserASENSITIVE                    = 93
	MySQLStatementParserAT                            = 94
	MySQLStatementParserATTRIBUTE                     = 95
	MySQLStatementParserAUTOEXTEND_SIZE               = 96
	MySQLStatementParserAUTO_INCREMENT                = 97
	MySQLStatementParserAVG                           = 98
	MySQLStatementParserBIT_XOR                       = 99
	MySQLStatementParserAVG_ROW_LENGTH                = 100
	MySQLStatementParserBACKUP                        = 101
	MySQLStatementParserBEFORE                        = 102
	MySQLStatementParserBEGIN                         = 103
	MySQLStatementParserBETWEEN                       = 104
	MySQLStatementParserBIGINT                        = 105
	MySQLStatementParserBINARY                        = 106
	MySQLStatementParserBINLOG                        = 107
	MySQLStatementParserBIT                           = 108
	MySQLStatementParserBLOB                          = 109
	MySQLStatementParserBLOCK                         = 110
	MySQLStatementParserBOOL                          = 111
	MySQLStatementParserBOOLEAN                       = 112
	MySQLStatementParserBOTH                          = 113
	MySQLStatementParserBTREE                         = 114
	MySQLStatementParserBUCKETS                       = 115
	MySQLStatementParserBY                            = 116
	MySQLStatementParserBYTE                          = 117
	MySQLStatementParserCACHE                         = 118
	MySQLStatementParserCALL                          = 119
	MySQLStatementParserCASCADE                       = 120
	MySQLStatementParserCASCADED                      = 121
	MySQLStatementParserCASE                          = 122
	MySQLStatementParserCATALOG_NAME                  = 123
	MySQLStatementParserCHAIN                         = 124
	MySQLStatementParserCHANGE                        = 125
	MySQLStatementParserCHANGED                       = 126
	MySQLStatementParserCHANNEL                       = 127
	MySQLStatementParserCHAR                          = 128
	MySQLStatementParserCHARACTER                     = 129
	MySQLStatementParserCHARSET                       = 130
	MySQLStatementParserCHECK                         = 131
	MySQLStatementParserCHECKSUM                      = 132
	MySQLStatementParserCIPHER                        = 133
	MySQLStatementParserCLASS_ORIGIN                  = 134
	MySQLStatementParserCLIENT                        = 135
	MySQLStatementParserCLONE                         = 136
	MySQLStatementParserCLOSE                         = 137
	MySQLStatementParserCOALESCE                      = 138
	MySQLStatementParserCODE                          = 139
	MySQLStatementParserCOLLATE                       = 140
	MySQLStatementParserCOLLATION                     = 141
	MySQLStatementParserCOLUMN                        = 142
	MySQLStatementParserCOLUMNS                       = 143
	MySQLStatementParserCOLUMN_FORMAT                 = 144
	MySQLStatementParserCOLUMN_NAME                   = 145
	MySQLStatementParserCOMMENT                       = 146
	MySQLStatementParserCOMMIT                        = 147
	MySQLStatementParserCOMMITTED                     = 148
	MySQLStatementParserCOMPACT                       = 149
	MySQLStatementParserCOMPLETION                    = 150
	MySQLStatementParserCOMPONENT                     = 151
	MySQLStatementParserCOMPRESSED                    = 152
	MySQLStatementParserCOMPRESSION                   = 153
	MySQLStatementParserCONCURRENT                    = 154
	MySQLStatementParserCONDITION                     = 155
	MySQLStatementParserCONNECTION                    = 156
	MySQLStatementParserCONSISTENT                    = 157
	MySQLStatementParserCONSTRAINT                    = 158
	MySQLStatementParserCONSTRAINT_CATALOG            = 159
	MySQLStatementParserCONSTRAINT_NAME               = 160
	MySQLStatementParserCONSTRAINT_SCHEMA             = 161
	MySQLStatementParserCONTAINS                      = 162
	MySQLStatementParserCONTEXT                       = 163
	MySQLStatementParserCONTINUE                      = 164
	MySQLStatementParserCONVERT                       = 165
	MySQLStatementParserCPU                           = 166
	MySQLStatementParserCREATE                        = 167
	MySQLStatementParserCROSS                         = 168
	MySQLStatementParserCUBE                          = 169
	MySQLStatementParserCUME_DIST                     = 170
	MySQLStatementParserCURRENT                       = 171
	MySQLStatementParserCURRENT_DATE                  = 172
	MySQLStatementParserCURRENT_TIME                  = 173
	MySQLStatementParserCURRENT_TIMESTAMP             = 174
	MySQLStatementParserCURRENT_USER                  = 175
	MySQLStatementParserCURSOR                        = 176
	MySQLStatementParserCURSOR_NAME                   = 177
	MySQLStatementParserDATA                          = 178
	MySQLStatementParserDATABASE                      = 179
	MySQLStatementParserDATABASES                     = 180
	MySQLStatementParserDATAFILE                      = 181
	MySQLStatementParserDATE                          = 182
	MySQLStatementParserDATETIME                      = 183
	MySQLStatementParserDAY                           = 184
	MySQLStatementParserDAY_HOUR                      = 185
	MySQLStatementParserDAY_MICROSECOND               = 186
	MySQLStatementParserDAY_MINUTE                    = 187
	MySQLStatementParserDAY_SECOND                    = 188
	MySQLStatementParserDEALLOCATE                    = 189
	MySQLStatementParserDEC                           = 190
	MySQLStatementParserDECIMAL                       = 191
	MySQLStatementParserDECLARE                       = 192
	MySQLStatementParserDEFAULT                       = 193
	MySQLStatementParserDEFAULT_AUTH                  = 194
	MySQLStatementParserDEFINER                       = 195
	MySQLStatementParserDEFINITION                    = 196
	MySQLStatementParserDELAYED                       = 197
	MySQLStatementParserDELAY_KEY_WRITE               = 198
	MySQLStatementParserDELETE                        = 199
	MySQLStatementParserDENSE_RANK                    = 200
	MySQLStatementParserDESC                          = 201
	MySQLStatementParserDESCRIBE                      = 202
	MySQLStatementParserDESCRIPTION                   = 203
	MySQLStatementParserDETERMINISTIC                 = 204
	MySQLStatementParserDIAGNOSTICS                   = 205
	MySQLStatementParserDIRECTORY                     = 206
	MySQLStatementParserDISABLE                       = 207
	MySQLStatementParserDISCARD                       = 208
	MySQLStatementParserDISK                          = 209
	MySQLStatementParserDISTINCT                      = 210
	MySQLStatementParserDISTINCTROW                   = 211
	MySQLStatementParserDIV                           = 212
	MySQLStatementParserDO                            = 213
	MySQLStatementParserDOUBLE                        = 214
	MySQLStatementParserDROP                          = 215
	MySQLStatementParserDUAL                          = 216
	MySQLStatementParserDUMPFILE                      = 217
	MySQLStatementParserDUPLICATE                     = 218
	MySQLStatementParserDYNAMIC                       = 219
	MySQLStatementParserEACH                          = 220
	MySQLStatementParserELSE                          = 221
	MySQLStatementParserELSEIF                        = 222
	MySQLStatementParserEMPTY                         = 223
	MySQLStatementParserENABLE                        = 224
	MySQLStatementParserENCLOSED                      = 225
	MySQLStatementParserENCRYPTION                    = 226
	MySQLStatementParserEND                           = 227
	MySQLStatementParserENDS                          = 228
	MySQLStatementParserENFORCED                      = 229
	MySQLStatementParserENGINE                        = 230
	MySQLStatementParserENGINES                       = 231
	MySQLStatementParserENGINE_ATTRIBUTE              = 232
	MySQLStatementParserENUM                          = 233
	MySQLStatementParserERROR                         = 234
	MySQLStatementParserERRORS                        = 235
	MySQLStatementParserESCAPE                        = 236
	MySQLStatementParserESCAPED                       = 237
	MySQLStatementParserEVENT                         = 238
	MySQLStatementParserEVENTS                        = 239
	MySQLStatementParserEVERY                         = 240
	MySQLStatementParserEXCEPT                        = 241
	MySQLStatementParserEXCHANGE                      = 242
	MySQLStatementParserEXCLUDE                       = 243
	MySQLStatementParserEXECUTE                       = 244
	MySQLStatementParserEXISTS                        = 245
	MySQLStatementParserEXIT                          = 246
	MySQLStatementParserEXPANSION                     = 247
	MySQLStatementParserEXPIRE                        = 248
	MySQLStatementParserEXPLAIN                       = 249
	MySQLStatementParserEXPORT                        = 250
	MySQLStatementParserEXTENDED                      = 251
	MySQLStatementParserEXTENT_SIZE                   = 252
	MySQLStatementParserFAILED_LOGIN_ATTEMPTS         = 253
	MySQLStatementParserFALSE                         = 254
	MySQLStatementParserFAST                          = 255
	MySQLStatementParserFAULTS                        = 256
	MySQLStatementParserFETCH                         = 257
	MySQLStatementParserFILE                          = 258
	MySQLStatementParserFILE_BLOCK_SIZE               = 259
	MySQLStatementParserFILTER                        = 260
	MySQLStatementParserFIRST                         = 261
	MySQLStatementParserFIRST_VALUE                   = 262
	MySQLStatementParserFIXED                         = 263
	MySQLStatementParserFLOAT                         = 264
	MySQLStatementParserFLOAT4                        = 265
	MySQLStatementParserFLOAT8                        = 266
	MySQLStatementParserFLUSH                         = 267
	MySQLStatementParserFOLLOWING                     = 268
	MySQLStatementParserFOLLOWS                       = 269
	MySQLStatementParserFOR                           = 270
	MySQLStatementParserFORCE                         = 271
	MySQLStatementParserFOREIGN                       = 272
	MySQLStatementParserFORMAT                        = 273
	MySQLStatementParserFOUND                         = 274
	MySQLStatementParserFROM                          = 275
	MySQLStatementParserFULL                          = 276
	MySQLStatementParserFULLTEXT                      = 277
	MySQLStatementParserFUNCTION                      = 278
	MySQLStatementParserGENERAL                       = 279
	MySQLStatementParserGENERATED                     = 280
	MySQLStatementParserGEOMETRY                      = 281
	MySQLStatementParserGEOMETRYCOLLECTION            = 282
	MySQLStatementParserGET                           = 283
	MySQLStatementParserGET_FORMAT                    = 284
	MySQLStatementParserGET_MASTER_PUBLIC_KEY         = 285
	MySQLStatementParserGLOBAL                        = 286
	MySQLStatementParserGRANT                         = 287
	MySQLStatementParserGRANTS                        = 288
	MySQLStatementParserGROUP                         = 289
	MySQLStatementParserGROUPING                      = 290
	MySQLStatementParserGROUPS                        = 291
	MySQLStatementParserGROUP_REPLICATION             = 292
	MySQLStatementParserHANDLER                       = 293
	MySQLStatementParserHASH                          = 294
	MySQLStatementParserHAVING                        = 295
	MySQLStatementParserHELP                          = 296
	MySQLStatementParserHIGH_PRIORITY                 = 297
	MySQLStatementParserHISTOGRAM                     = 298
	MySQLStatementParserHISTORY                       = 299
	MySQLStatementParserHOST                          = 300
	MySQLStatementParserHOSTS                         = 301
	MySQLStatementParserHOUR                          = 302
	MySQLStatementParserHOUR_MICROSECOND              = 303
	MySQLStatementParserHOUR_MINUTE                   = 304
	MySQLStatementParserHOUR_SECOND                   = 305
	MySQLStatementParserIDENTIFIED                    = 306
	MySQLStatementParserIF                            = 307
	MySQLStatementParserIGNORE                        = 308
	MySQLStatementParserIGNORE_SERVER_IDS             = 309
	MySQLStatementParserIMPORT                        = 310
	MySQLStatementParserIN                            = 311
	MySQLStatementParserINACTIVE                      = 312
	MySQLStatementParserINDEX                         = 313
	MySQLStatementParserINDEXES                       = 314
	MySQLStatementParserINFILE                        = 315
	MySQLStatementParserINITIAL_SIZE                  = 316
	MySQLStatementParserINNER                         = 317
	MySQLStatementParserINOUT                         = 318
	MySQLStatementParserINSENSITIVE                   = 319
	MySQLStatementParserINSERT                        = 320
	MySQLStatementParserINSERT_METHOD                 = 321
	MySQLStatementParserINSTALL                       = 322
	MySQLStatementParserINSTANCE                      = 323
	MySQLStatementParserINT                           = 324
	MySQLStatementParserINT1                          = 325
	MySQLStatementParserINT2                          = 326
	MySQLStatementParserINT3                          = 327
	MySQLStatementParserINT4                          = 328
	MySQLStatementParserINT8                          = 329
	MySQLStatementParserINTEGER                       = 330
	MySQLStatementParserINTERVAL                      = 331
	MySQLStatementParserINTO                          = 332
	MySQLStatementParserINVISIBLE                     = 333
	MySQLStatementParserINVOKER                       = 334
	MySQLStatementParserIO                            = 335
	MySQLStatementParserIO_AFTER_GTIDS                = 336
	MySQLStatementParserIO_BEFORE_GTIDS               = 337
	MySQLStatementParserIPC                           = 338
	MySQLStatementParserIS                            = 339
	MySQLStatementParserISOLATION                     = 340
	MySQLStatementParserISSUER                        = 341
	MySQLStatementParserITERATE                       = 342
	MySQLStatementParserJOIN                          = 343
	MySQLStatementParserJSON                          = 344
	MySQLStatementParserJSON_TABLE                    = 345
	MySQLStatementParserJSON_VALUE                    = 346
	MySQLStatementParserKEY                           = 347
	MySQLStatementParserKEYS                          = 348
	MySQLStatementParserKEY_BLOCK_SIZE                = 349
	MySQLStatementParserKILL                          = 350
	MySQLStatementParserLAG                           = 351
	MySQLStatementParserLANGUAGE                      = 352
	MySQLStatementParserLAST                          = 353
	MySQLStatementParserLAST_VALUE                    = 354
	MySQLStatementParserLATERAL                       = 355
	MySQLStatementParserLEAD                          = 356
	MySQLStatementParserLEADING                       = 357
	MySQLStatementParserLEAVE                         = 358
	MySQLStatementParserLEAVES                        = 359
	MySQLStatementParserLEFT                          = 360
	MySQLStatementParserLESS                          = 361
	MySQLStatementParserLEVEL                         = 362
	MySQLStatementParserLIKE                          = 363
	MySQLStatementParserLIMIT                         = 364
	MySQLStatementParserLINEAR                        = 365
	MySQLStatementParserLINES                         = 366
	MySQLStatementParserLINESTRING                    = 367
	MySQLStatementParserLIST                          = 368
	MySQLStatementParserLOAD                          = 369
	MySQLStatementParserLOCAL                         = 370
	MySQLStatementParserLOCALTIME                     = 371
	MySQLStatementParserLOCALTIMESTAMP                = 372
	MySQLStatementParserLOCK                          = 373
	MySQLStatementParserLOCKED                        = 374
	MySQLStatementParserLOCKS                         = 375
	MySQLStatementParserLOGFILE                       = 376
	MySQLStatementParserLOGS                          = 377
	MySQLStatementParserLONG                          = 378
	MySQLStatementParserLONGBLOB                      = 379
	MySQLStatementParserLONGTEXT                      = 380
	MySQLStatementParserLOOP                          = 381
	MySQLStatementParserLOW_PRIORITY                  = 382
	MySQLStatementParserMASTER                        = 383
	MySQLStatementParserMASTER_AUTO_POSITION          = 384
	MySQLStatementParserMASTER_BIND                   = 385
	MySQLStatementParserMASTER_COMPRESSION_ALGORITHM  = 386
	MySQLStatementParserMASTER_CONNECT_RETRY          = 387
	MySQLStatementParserMASTER_DELAY                  = 388
	MySQLStatementParserMASTER_HEARTBEAT_PERIOD       = 389
	MySQLStatementParserMASTER_HOST                   = 390
	MySQLStatementParserMASTER_LOG_FILE               = 391
	MySQLStatementParserMASTER_LOG_POS                = 392
	MySQLStatementParserMASTER_PASSWORD               = 393
	MySQLStatementParserMASTER_PORT                   = 394
	MySQLStatementParserMASTER_PUBLIC_KEY_PATH        = 395
	MySQLStatementParserMASTER_RETRY_COUNT            = 396
	MySQLStatementParserMASTER_SERVER_ID              = 397
	MySQLStatementParserMASTER_SSL                    = 398
	MySQLStatementParserMASTER_SSL_CA                 = 399
	MySQLStatementParserMASTER_SSL_CAPATH             = 400
	MySQLStatementParserMASTER_SSL_CERT               = 401
	MySQLStatementParserMASTER_SSL_CIPHER             = 402
	MySQLStatementParserMASTER_SSL_CRL                = 403
	MySQLStatementParserMASTER_SSL_CRLPATH            = 404
	MySQLStatementParserMASTER_SSL_KEY                = 405
	MySQLStatementParserMASTER_SSL_VERIFY_SERVER_CERT = 406
	MySQLStatementParserMASTER_TLS_CIPHERSUITES       = 407
	MySQLStatementParserMASTER_TLS_VERSION            = 408
	MySQLStatementParserMASTER_USER                   = 409
	MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL = 410
	MySQLStatementParserMATCH                         = 411
	MySQLStatementParserMAXVALUE                      = 412
	MySQLStatementParserMAX_CONNECTIONS_PER_HOUR      = 413
	MySQLStatementParserMAX_QUERIES_PER_HOUR          = 414
	MySQLStatementParserMAX_ROWS                      = 415
	MySQLStatementParserMAX_SIZE                      = 416
	MySQLStatementParserMAX_UPDATES_PER_HOUR          = 417
	MySQLStatementParserMAX_USER_CONNECTIONS          = 418
	MySQLStatementParserMEDIUM                        = 419
	MySQLStatementParserMEDIUMBLOB                    = 420
	MySQLStatementParserMEDIUMINT                     = 421
	MySQLStatementParserMEDIUMTEXT                    = 422
	MySQLStatementParserMEMBER                        = 423
	MySQLStatementParserMEMORY                        = 424
	MySQLStatementParserMERGE                         = 425
	MySQLStatementParserMESSAGE_TEXT                  = 426
	MySQLStatementParserMICROSECOND                   = 427
	MySQLStatementParserMIDDLEINT                     = 428
	MySQLStatementParserMIGRATE                       = 429
	MySQLStatementParserMINUTE                        = 430
	MySQLStatementParserMINUTE_MICROSECOND            = 431
	MySQLStatementParserMINUTE_SECOND                 = 432
	MySQLStatementParserMIN_ROWS                      = 433
	MySQLStatementParserMOD                           = 434
	MySQLStatementParserMODE                          = 435
	MySQLStatementParserMODIFIES                      = 436
	MySQLStatementParserMODIFY                        = 437
	MySQLStatementParserMONTH                         = 438
	MySQLStatementParserMULTILINESTRING               = 439
	MySQLStatementParserMULTIPOINT                    = 440
	MySQLStatementParserMULTIPOLYGON                  = 441
	MySQLStatementParserMUTEX                         = 442
	MySQLStatementParserMYSQL_ERRNO                   = 443
	MySQLStatementParserNAME                          = 444
	MySQLStatementParserNAMES                         = 445
	MySQLStatementParserNATIONAL                      = 446
	MySQLStatementParserNATURAL                       = 447
	MySQLStatementParserNCHAR                         = 448
	MySQLStatementParserNDBCLUSTER                    = 449
	MySQLStatementParserNESTED                        = 450
	MySQLStatementParserNETWORK_NAMESPACE             = 451
	MySQLStatementParserNEVER                         = 452
	MySQLStatementParserNEW                           = 453
	MySQLStatementParserNEXT                          = 454
	MySQLStatementParserNO                            = 455
	MySQLStatementParserNODEGROUP                     = 456
	MySQLStatementParserNONE                          = 457
	MySQLStatementParserNOT                           = 458
	MySQLStatementParserNOWAIT                        = 459
	MySQLStatementParserNO_WAIT                       = 460
	MySQLStatementParserNO_WRITE_TO_BINLOG            = 461
	MySQLStatementParserNTH_VALUE                     = 462
	MySQLStatementParserNTILE                         = 463
	MySQLStatementParserNULL                          = 464
	MySQLStatementParserNULLS                         = 465
	MySQLStatementParserNUMBER                        = 466
	MySQLStatementParserNUMERIC                       = 467
	MySQLStatementParserNVARCHAR                      = 468
	MySQLStatementParserOF                            = 469
	MySQLStatementParserOFF                           = 470
	MySQLStatementParserOFFSET                        = 471
	MySQLStatementParserOJ                            = 472
	MySQLStatementParserOLD                           = 473
	MySQLStatementParserON                            = 474
	MySQLStatementParserONE                           = 475
	MySQLStatementParserONLY                          = 476
	MySQLStatementParserOPEN                          = 477
	MySQLStatementParserOPTIMIZE                      = 478
	MySQLStatementParserOPTIMIZER_COSTS               = 479
	MySQLStatementParserOPTION                        = 480
	MySQLStatementParserOPTIONAL                      = 481
	MySQLStatementParserOPTIONALLY                    = 482
	MySQLStatementParserOPTIONS                       = 483
	MySQLStatementParserOR                            = 484
	MySQLStatementParserORDER                         = 485
	MySQLStatementParserORDINALITY                    = 486
	MySQLStatementParserORGANIZATION                  = 487
	MySQLStatementParserOTHERS                        = 488
	MySQLStatementParserOUT                           = 489
	MySQLStatementParserOUTER                         = 490
	MySQLStatementParserOUTFILE                       = 491
	MySQLStatementParserOVER                          = 492
	MySQLStatementParserOWNER                         = 493
	MySQLStatementParserPACK_KEYS                     = 494
	MySQLStatementParserPAGE                          = 495
	MySQLStatementParserPARSER                        = 496
	MySQLStatementParserPARTIAL                       = 497
	MySQLStatementParserPARTITION                     = 498
	MySQLStatementParserPARTITIONING                  = 499
	MySQLStatementParserPARTITIONS                    = 500
	MySQLStatementParserPASSWORD                      = 501
	MySQLStatementParserPASSWORD_LOCK_TIME            = 502
	MySQLStatementParserPATH                          = 503
	MySQLStatementParserPERCENT_RANK                  = 504
	MySQLStatementParserPERSIST                       = 505
	MySQLStatementParserPERSIST_ONLY                  = 506
	MySQLStatementParserPHASE                         = 507
	MySQLStatementParserPLUGIN                        = 508
	MySQLStatementParserPLUGINS                       = 509
	MySQLStatementParserPLUGIN_DIR                    = 510
	MySQLStatementParserPOINT                         = 511
	MySQLStatementParserPOLYGON                       = 512
	MySQLStatementParserPORT                          = 513
	MySQLStatementParserPRECEDES                      = 514
	MySQLStatementParserPRECEDING                     = 515
	MySQLStatementParserPRECISION                     = 516
	MySQLStatementParserPREPARE                       = 517
	MySQLStatementParserPRESERVE                      = 518
	MySQLStatementParserPREV                          = 519
	MySQLStatementParserPRIMARY                       = 520
	MySQLStatementParserPRIVILEGES                    = 521
	MySQLStatementParserPRIVILEGE_CHECKS_USER         = 522
	MySQLStatementParserPROCEDURE                     = 523
	MySQLStatementParserPROCESS                       = 524
	MySQLStatementParserPROCESSLIST                   = 525
	MySQLStatementParserPROFILE                       = 526
	MySQLStatementParserPROFILES                      = 527
	MySQLStatementParserPROXY                         = 528
	MySQLStatementParserPURGE                         = 529
	MySQLStatementParserQUARTER                       = 530
	MySQLStatementParserQUERY                         = 531
	MySQLStatementParserQUICK                         = 532
	MySQLStatementParserRANDOM                        = 533
	MySQLStatementParserRANGE                         = 534
	MySQLStatementParserRANK                          = 535
	MySQLStatementParserREAD                          = 536
	MySQLStatementParserREADS                         = 537
	MySQLStatementParserREAD_ONLY                     = 538
	MySQLStatementParserREAD_WRITE                    = 539
	MySQLStatementParserREAL                          = 540
	MySQLStatementParserREBUILD                       = 541
	MySQLStatementParserRECOVER                       = 542
	MySQLStatementParserRECURSIVE                     = 543
	MySQLStatementParserREDO_BUFFER_SIZE              = 544
	MySQLStatementParserREDUNDANT                     = 545
	MySQLStatementParserREFERENCE                     = 546
	MySQLStatementParserREFERENCES                    = 547
	MySQLStatementParserREGEXP                        = 548
	MySQLStatementParserRELAY                         = 549
	MySQLStatementParserRELAYLOG                      = 550
	MySQLStatementParserRELAY_LOG_FILE                = 551
	MySQLStatementParserRELAY_LOG_POS                 = 552
	MySQLStatementParserRELAY_THREAD                  = 553
	MySQLStatementParserRELEASE                       = 554
	MySQLStatementParserRELOAD                        = 555
	MySQLStatementParserREMOVE                        = 556
	MySQLStatementParserRENAME                        = 557
	MySQLStatementParserREORGANIZE                    = 558
	MySQLStatementParserREPAIR                        = 559
	MySQLStatementParserREPEAT                        = 560
	MySQLStatementParserREPEATABLE                    = 561
	MySQLStatementParserREPLACE                       = 562
	MySQLStatementParserREPLICA                       = 563
	MySQLStatementParserREPLICAS                      = 564
	MySQLStatementParserREPLICATE_DO_DB               = 565
	MySQLStatementParserREPLICATE_DO_TABLE            = 566
	MySQLStatementParserREPLICATE_IGNORE_DB           = 567
	MySQLStatementParserREPLICATE_IGNORE_TABLE        = 568
	MySQLStatementParserREPLICATE_REWRITE_DB          = 569
	MySQLStatementParserREPLICATE_WILD_DO_TABLE       = 570
	MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE   = 571
	MySQLStatementParserREPLICATION                   = 572
	MySQLStatementParserREQUIRE                       = 573
	MySQLStatementParserREQUIRE_ROW_FORMAT            = 574
	MySQLStatementParserRESET                         = 575
	MySQLStatementParserRESIGNAL                      = 576
	MySQLStatementParserRESOURCE                      = 577
	MySQLStatementParserRESPECT                       = 578
	MySQLStatementParserRESTART                       = 579
	MySQLStatementParserRESTORE                       = 580
	MySQLStatementParserRESTRICT                      = 581
	MySQLStatementParserRESUME                        = 582
	MySQLStatementParserRETAIN                        = 583
	MySQLStatementParserRETURN                        = 584
	MySQLStatementParserRETURNED_SQLSTATE             = 585
	MySQLStatementParserRETURNING                     = 586
	MySQLStatementParserRETURNS                       = 587
	MySQLStatementParserREUSE                         = 588
	MySQLStatementParserREVERSE                       = 589
	MySQLStatementParserREVOKE                        = 590
	MySQLStatementParserRIGHT                         = 591
	MySQLStatementParserRLIKE                         = 592
	MySQLStatementParserROLE                          = 593
	MySQLStatementParserROLLBACK                      = 594
	MySQLStatementParserROLLUP                        = 595
	MySQLStatementParserROTATE                        = 596
	MySQLStatementParserROUTINE                       = 597
	MySQLStatementParserROW                           = 598
	MySQLStatementParserROWS                          = 599
	MySQLStatementParserROW_COUNT                     = 600
	MySQLStatementParserROW_FORMAT                    = 601
	MySQLStatementParserROW_NUMBER                    = 602
	MySQLStatementParserRTREE                         = 603
	MySQLStatementParserSAVEPOINT                     = 604
	MySQLStatementParserSCHEDULE                      = 605
	MySQLStatementParserSCHEMA                        = 606
	MySQLStatementParserSCHEMAS                       = 607
	MySQLStatementParserSCHEMA_NAME                   = 608
	MySQLStatementParserSECOND                        = 609
	MySQLStatementParserSECONDARY                     = 610
	MySQLStatementParserSECONDARY_ENGINE              = 611
	MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE    = 612
	MySQLStatementParserSECONDARY_LOAD                = 613
	MySQLStatementParserSECONDARY_UNLOAD              = 614
	MySQLStatementParserSECOND_MICROSECOND            = 615
	MySQLStatementParserSECURITY                      = 616
	MySQLStatementParserSELECT                        = 617
	MySQLStatementParserSENSITIVE                     = 618
	MySQLStatementParserSEPARATOR                     = 619
	MySQLStatementParserSERIAL                        = 620
	MySQLStatementParserSERIALIZABLE                  = 621
	MySQLStatementParserSERVER                        = 622
	MySQLStatementParserSESSION                       = 623
	MySQLStatementParserSET                           = 624
	MySQLStatementParserSHARE                         = 625
	MySQLStatementParserSHOW                          = 626
	MySQLStatementParserSHUTDOWN                      = 627
	MySQLStatementParserSIGNAL                        = 628
	MySQLStatementParserSIGNED                        = 629
	MySQLStatementParserSIMPLE                        = 630
	MySQLStatementParserSKIP_SYMBOL                   = 631
	MySQLStatementParserSLAVE                         = 632
	MySQLStatementParserSLOW                          = 633
	MySQLStatementParserSMALLINT                      = 634
	MySQLStatementParserSNAPSHOT                      = 635
	MySQLStatementParserSOCKET                        = 636
	MySQLStatementParserSONAME                        = 637
	MySQLStatementParserSOUNDS                        = 638
	MySQLStatementParserSOURCE                        = 639
	MySQLStatementParserSPATIAL                       = 640
	MySQLStatementParserSPECIFIC                      = 641
	MySQLStatementParserSQL                           = 642
	MySQLStatementParserSQLEXCEPTION                  = 643
	MySQLStatementParserSQLSTATE                      = 644
	MySQLStatementParserSQLWARNING                    = 645
	MySQLStatementParserSQL_AFTER_GTIDS               = 646
	MySQLStatementParserSQL_AFTER_MTS_GAPS            = 647
	MySQLStatementParserSQL_BEFORE_GTIDS              = 648
	MySQLStatementParserSQL_BIG_RESULT                = 649
	MySQLStatementParserSQL_BUFFER_RESULT             = 650
	MySQLStatementParserSQL_CALC_FOUND_ROWS           = 651
	MySQLStatementParserSQL_NO_CACHE                  = 652
	MySQLStatementParserSQL_SMALL_RESULT              = 653
	MySQLStatementParserSQL_THREAD                    = 654
	MySQLStatementParserSRID                          = 655
	MySQLStatementParserSSL                           = 656
	MySQLStatementParserSTACKED                       = 657
	MySQLStatementParserSTART                         = 658
	MySQLStatementParserSTARTING                      = 659
	MySQLStatementParserSTARTS                        = 660
	MySQLStatementParserSTATS_AUTO_RECALC             = 661
	MySQLStatementParserSTATS_PERSISTENT              = 662
	MySQLStatementParserSTATS_SAMPLE_PAGES            = 663
	MySQLStatementParserSTATUS                        = 664
	MySQLStatementParserSTOP                          = 665
	MySQLStatementParserSTORAGE                       = 666
	MySQLStatementParserSTORED                        = 667
	MySQLStatementParserSTRAIGHT_JOIN                 = 668
	MySQLStatementParserSTREAM                        = 669
	MySQLStatementParserSTRING                        = 670
	MySQLStatementParserSUBCLASS_ORIGIN               = 671
	MySQLStatementParserSUBJECT                       = 672
	MySQLStatementParserSUBPARTITION                  = 673
	MySQLStatementParserSUBPARTITIONS                 = 674
	MySQLStatementParserSUPER                         = 675
	MySQLStatementParserSUSPEND                       = 676
	MySQLStatementParserSWAPS                         = 677
	MySQLStatementParserSWITCHES                      = 678
	MySQLStatementParserSYSTEM                        = 679
	MySQLStatementParserTABLE                         = 680
	MySQLStatementParserTABLES                        = 681
	MySQLStatementParserTABLESPACE                    = 682
	MySQLStatementParserTABLE_CHECKSUM                = 683
	MySQLStatementParserTABLE_NAME                    = 684
	MySQLStatementParserTEMPORARY                     = 685
	MySQLStatementParserTEMPTABLE                     = 686
	MySQLStatementParserTERMINATED                    = 687
	MySQLStatementParserTEXT                          = 688
	MySQLStatementParserTHAN                          = 689
	MySQLStatementParserTHEN                          = 690
	MySQLStatementParserTHREAD_PRIORITY               = 691
	MySQLStatementParserTIES                          = 692
	MySQLStatementParserTIME                          = 693
	MySQLStatementParserTIMESTAMP                     = 694
	MySQLStatementParserTIMESTAMP_ADD                 = 695
	MySQLStatementParserTIMESTAMP_DIFF                = 696
	MySQLStatementParserTINYBLOB                      = 697
	MySQLStatementParserTINYINT                       = 698
	MySQLStatementParserTINYTEXT                      = 699
	MySQLStatementParserTLS                           = 700
	MySQLStatementParserTO                            = 701
	MySQLStatementParserTRAILING                      = 702
	MySQLStatementParserTRANSACTION                   = 703
	MySQLStatementParserTRIGGER                       = 704
	MySQLStatementParserTRIGGERS                      = 705
	MySQLStatementParserTRUE                          = 706
	MySQLStatementParserTRUNCATE                      = 707
	MySQLStatementParserTYPE                          = 708
	MySQLStatementParserTYPES                         = 709
	MySQLStatementParserUNBOUNDED                     = 710
	MySQLStatementParserUNCOMMITTED                   = 711
	MySQLStatementParserUNDEFINED                     = 712
	MySQLStatementParserUNDO                          = 713
	MySQLStatementParserUNDOFILE                      = 714
	MySQLStatementParserUNDO_BUFFER_SIZE              = 715
	MySQLStatementParserUNICODE                       = 716
	MySQLStatementParserUNINSTALL                     = 717
	MySQLStatementParserUNION                         = 718
	MySQLStatementParserUNIQUE                        = 719
	MySQLStatementParserUNKNOWN                       = 720
	MySQLStatementParserUNLOCK                        = 721
	MySQLStatementParserUNSIGNED                      = 722
	MySQLStatementParserUNTIL                         = 723
	MySQLStatementParserUPDATE                        = 724
	MySQLStatementParserUPGRADE                       = 725
	MySQLStatementParserUSAGE                         = 726
	MySQLStatementParserUSE                           = 727
	MySQLStatementParserUSER                          = 728
	MySQLStatementParserUSER_RESOURCES                = 729
	MySQLStatementParserUSE_FRM                       = 730
	MySQLStatementParserUSING                         = 731
	MySQLStatementParserUTC_DATE                      = 732
	MySQLStatementParserUTC_TIME                      = 733
	MySQLStatementParserUTC_TIMESTAMP                 = 734
	MySQLStatementParserVALIDATION                    = 735
	MySQLStatementParserVALUE                         = 736
	MySQLStatementParserVALUES                        = 737
	MySQLStatementParserVARBINARY                     = 738
	MySQLStatementParserVARCHAR                       = 739
	MySQLStatementParserVARCHARACTER                  = 740
	MySQLStatementParserVARIABLES                     = 741
	MySQLStatementParserVARYING                       = 742
	MySQLStatementParserVCPU                          = 743
	MySQLStatementParserVIEW                          = 744
	MySQLStatementParserVIRTUAL                       = 745
	MySQLStatementParserVISIBLE                       = 746
	MySQLStatementParserWAIT                          = 747
	MySQLStatementParserWARNINGS                      = 748
	MySQLStatementParserWEEK                          = 749
	MySQLStatementParserWEIGHT_STRING                 = 750
	MySQLStatementParserWHEN                          = 751
	MySQLStatementParserWHERE                         = 752
	MySQLStatementParserWHILE                         = 753
	MySQLStatementParserWINDOW                        = 754
	MySQLStatementParserWITH                          = 755
	MySQLStatementParserWITHOUT                       = 756
	MySQLStatementParserWORK                          = 757
	MySQLStatementParserWRAPPER                       = 758
	MySQLStatementParserWRITE                         = 759
	MySQLStatementParserX509                          = 760
	MySQLStatementParserXA                            = 761
	MySQLStatementParserXID                           = 762
	MySQLStatementParserXML                           = 763
	MySQLStatementParserXOR                           = 764
	MySQLStatementParserYEAR                          = 765
	MySQLStatementParserYEAR_MONTH                    = 766
	MySQLStatementParserZEROFILL                      = 767
	MySQLStatementParserFILESIZE_LITERAL              = 768
	MySQLStatementParserIDENTIFIER_                   = 769
	MySQLStatementParserSINGLE_QUOTED_TEXT            = 770
	MySQLStatementParserDOUBLE_QUOTED_TEXT            = 771
	MySQLStatementParserNCHAR_TEXT                    = 772
	MySQLStatementParserUNDERSCORE_CHARSET            = 773
	MySQLStatementParserNUMBER_                       = 774
	MySQLStatementParserINT_NUM_                      = 775
	MySQLStatementParserFLOAT_NUM_                    = 776
	MySQLStatementParserDECIMAL_NUM_                  = 777
	MySQLStatementParserHEX_DIGIT_                    = 778
	MySQLStatementParserBIT_NUM_                      = 779
	MySQLStatementParserNOT_SUPPORT_                  = 780
)

// MySQLStatementParser rules.
const (
	MySQLStatementParserRULE_execute                                     = 0
	MySQLStatementParserRULE_insert                                      = 1
	MySQLStatementParserRULE_insertSpecification                         = 2
	MySQLStatementParserRULE_insertValuesClause                          = 3
	MySQLStatementParserRULE_fields                                      = 4
	MySQLStatementParserRULE_insertIdentifier                            = 5
	MySQLStatementParserRULE_tableWild                                   = 6
	MySQLStatementParserRULE_insertSelectClause                          = 7
	MySQLStatementParserRULE_onDuplicateKeyClause                        = 8
	MySQLStatementParserRULE_valueReference                              = 9
	MySQLStatementParserRULE_derivedColumns                              = 10
	MySQLStatementParserRULE_replace                                     = 11
	MySQLStatementParserRULE_replaceSpecification                        = 12
	MySQLStatementParserRULE_replaceValuesClause                         = 13
	MySQLStatementParserRULE_replaceSelectClause                         = 14
	MySQLStatementParserRULE_update                                      = 15
	MySQLStatementParserRULE_updateSpecification_                        = 16
	MySQLStatementParserRULE_assignment                                  = 17
	MySQLStatementParserRULE_setAssignmentsClause                        = 18
	MySQLStatementParserRULE_assignmentValues                            = 19
	MySQLStatementParserRULE_assignmentValue                             = 20
	MySQLStatementParserRULE_blobValue                                   = 21
	MySQLStatementParserRULE_delete                                      = 22
	MySQLStatementParserRULE_deleteSpecification                         = 23
	MySQLStatementParserRULE_singleTableClause                           = 24
	MySQLStatementParserRULE_multipleTablesClause                        = 25
	MySQLStatementParserRULE_select                                      = 26
	MySQLStatementParserRULE_selectWithInto                              = 27
	MySQLStatementParserRULE_queryExpression                             = 28
	MySQLStatementParserRULE_queryExpressionBody                         = 29
	MySQLStatementParserRULE_unionClause                                 = 30
	MySQLStatementParserRULE_queryExpressionParens                       = 31
	MySQLStatementParserRULE_queryPrimary                                = 32
	MySQLStatementParserRULE_querySpecification                          = 33
	MySQLStatementParserRULE_call                                        = 34
	MySQLStatementParserRULE_doStatement                                 = 35
	MySQLStatementParserRULE_handlerStatement                            = 36
	MySQLStatementParserRULE_handlerOpenStatement                        = 37
	MySQLStatementParserRULE_handlerReadIndexStatement                   = 38
	MySQLStatementParserRULE_handlerReadStatement                        = 39
	MySQLStatementParserRULE_handlerCloseStatement                       = 40
	MySQLStatementParserRULE_importStatement                             = 41
	MySQLStatementParserRULE_loadStatement                               = 42
	MySQLStatementParserRULE_loadDataStatement                           = 43
	MySQLStatementParserRULE_loadXmlStatement                            = 44
	MySQLStatementParserRULE_explicitTable                               = 45
	MySQLStatementParserRULE_tableValueConstructor                       = 46
	MySQLStatementParserRULE_rowConstructorList                          = 47
	MySQLStatementParserRULE_withClause                                  = 48
	MySQLStatementParserRULE_cteClause                                   = 49
	MySQLStatementParserRULE_selectSpecification                         = 50
	MySQLStatementParserRULE_duplicateSpecification                      = 51
	MySQLStatementParserRULE_projections                                 = 52
	MySQLStatementParserRULE_projection                                  = 53
	MySQLStatementParserRULE_unqualifiedShorthand                        = 54
	MySQLStatementParserRULE_qualifiedShorthand                          = 55
	MySQLStatementParserRULE_fromClause                                  = 56
	MySQLStatementParserRULE_tableReferences                             = 57
	MySQLStatementParserRULE_escapedTableReference                       = 58
	MySQLStatementParserRULE_tableReference                              = 59
	MySQLStatementParserRULE_tableFactor                                 = 60
	MySQLStatementParserRULE_partitionNames                              = 61
	MySQLStatementParserRULE_indexHintList                               = 62
	MySQLStatementParserRULE_indexHint                                   = 63
	MySQLStatementParserRULE_joinedTable                                 = 64
	MySQLStatementParserRULE_innerJoinType                               = 65
	MySQLStatementParserRULE_outerJoinType                               = 66
	MySQLStatementParserRULE_naturalJoinType                             = 67
	MySQLStatementParserRULE_joinSpecification                           = 68
	MySQLStatementParserRULE_whereClause                                 = 69
	MySQLStatementParserRULE_groupByClause                               = 70
	MySQLStatementParserRULE_havingClause                                = 71
	MySQLStatementParserRULE_limitClause                                 = 72
	MySQLStatementParserRULE_limitRowCount                               = 73
	MySQLStatementParserRULE_limitOffset                                 = 74
	MySQLStatementParserRULE_windowClause                                = 75
	MySQLStatementParserRULE_windowItem                                  = 76
	MySQLStatementParserRULE_subquery                                    = 77
	MySQLStatementParserRULE_selectLinesInto                             = 78
	MySQLStatementParserRULE_selectFieldsInto                            = 79
	MySQLStatementParserRULE_selectIntoExpression                        = 80
	MySQLStatementParserRULE_lockClause                                  = 81
	MySQLStatementParserRULE_lockClauseList                              = 82
	MySQLStatementParserRULE_lockStrength                                = 83
	MySQLStatementParserRULE_lockedRowAction                             = 84
	MySQLStatementParserRULE_tableLockingList                            = 85
	MySQLStatementParserRULE_tableIdentOptWild                           = 86
	MySQLStatementParserRULE_tableAliasRefList                           = 87
	MySQLStatementParserRULE_parameterMarker                             = 88
	MySQLStatementParserRULE_customKeyword                               = 89
	MySQLStatementParserRULE_literals                                    = 90
	MySQLStatementParserRULE_string_                                     = 91
	MySQLStatementParserRULE_stringLiterals                              = 92
	MySQLStatementParserRULE_numberLiterals                              = 93
	MySQLStatementParserRULE_temporalLiterals                            = 94
	MySQLStatementParserRULE_hexadecimalLiterals                         = 95
	MySQLStatementParserRULE_bitValueLiterals                            = 96
	MySQLStatementParserRULE_booleanLiterals                             = 97
	MySQLStatementParserRULE_nullValueLiterals                           = 98
	MySQLStatementParserRULE_collationName                               = 99
	MySQLStatementParserRULE_identifier                                  = 100
	MySQLStatementParserRULE_identifierKeywordsUnambiguous               = 101
	MySQLStatementParserRULE_identifierKeywordsAmbiguous1RolesAndLabels  = 102
	MySQLStatementParserRULE_identifierKeywordsAmbiguous2Labels          = 103
	MySQLStatementParserRULE_identifierKeywordsAmbiguous3Roles           = 104
	MySQLStatementParserRULE_identifierKeywordsAmbiguous4SystemVariables = 105
	MySQLStatementParserRULE_textOrIdentifier                            = 106
	MySQLStatementParserRULE_variable                                    = 107
	MySQLStatementParserRULE_userVariable                                = 108
	MySQLStatementParserRULE_systemVariable                              = 109
	MySQLStatementParserRULE_setSystemVariable                           = 110
	MySQLStatementParserRULE_optionType                                  = 111
	MySQLStatementParserRULE_internalVariableName                        = 112
	MySQLStatementParserRULE_setExprOrDefault                            = 113
	MySQLStatementParserRULE_transactionCharacteristics                  = 114
	MySQLStatementParserRULE_isolationLevel                              = 115
	MySQLStatementParserRULE_isolationTypes                              = 116
	MySQLStatementParserRULE_transactionAccessMode                       = 117
	MySQLStatementParserRULE_schemaName                                  = 118
	MySQLStatementParserRULE_schemaNames                                 = 119
	MySQLStatementParserRULE_charsetName                                 = 120
	MySQLStatementParserRULE_schemaPairs                                 = 121
	MySQLStatementParserRULE_schemaPair                                  = 122
	MySQLStatementParserRULE_tableName                                   = 123
	MySQLStatementParserRULE_columnName                                  = 124
	MySQLStatementParserRULE_indexName                                   = 125
	MySQLStatementParserRULE_constraintName                              = 126
	MySQLStatementParserRULE_userIdentifierOrText                        = 127
	MySQLStatementParserRULE_userName                                    = 128
	MySQLStatementParserRULE_eventName                                   = 129
	MySQLStatementParserRULE_serverName                                  = 130
	MySQLStatementParserRULE_wrapperName                                 = 131
	MySQLStatementParserRULE_functionName                                = 132
	MySQLStatementParserRULE_viewName                                    = 133
	MySQLStatementParserRULE_owner                                       = 134
	MySQLStatementParserRULE_alias                                       = 135
	MySQLStatementParserRULE_name                                        = 136
	MySQLStatementParserRULE_tableList                                   = 137
	MySQLStatementParserRULE_viewNames                                   = 138
	MySQLStatementParserRULE_columnNames                                 = 139
	MySQLStatementParserRULE_groupName                                   = 140
	MySQLStatementParserRULE_routineName                                 = 141
	MySQLStatementParserRULE_shardLibraryName                            = 142
	MySQLStatementParserRULE_componentName                               = 143
	MySQLStatementParserRULE_pluginName                                  = 144
	MySQLStatementParserRULE_hostName                                    = 145
	MySQLStatementParserRULE_port                                        = 146
	MySQLStatementParserRULE_cloneInstance                               = 147
	MySQLStatementParserRULE_cloneDir                                    = 148
	MySQLStatementParserRULE_channelName                                 = 149
	MySQLStatementParserRULE_logName                                     = 150
	MySQLStatementParserRULE_roleName                                    = 151
	MySQLStatementParserRULE_roleIdentifierOrText                        = 152
	MySQLStatementParserRULE_engineRef                                   = 153
	MySQLStatementParserRULE_triggerName                                 = 154
	MySQLStatementParserRULE_triggerTime                                 = 155
	MySQLStatementParserRULE_tableOrTables                               = 156
	MySQLStatementParserRULE_userOrRole                                  = 157
	MySQLStatementParserRULE_partitionName                               = 158
	MySQLStatementParserRULE_identifierList                              = 159
	MySQLStatementParserRULE_allOrPartitionNameList                      = 160
	MySQLStatementParserRULE_triggerEvent                                = 161
	MySQLStatementParserRULE_triggerOrder                                = 162
	MySQLStatementParserRULE_expr                                        = 163
	MySQLStatementParserRULE_andOperator                                 = 164
	MySQLStatementParserRULE_orOperator                                  = 165
	MySQLStatementParserRULE_notOperator                                 = 166
	MySQLStatementParserRULE_booleanPrimary                              = 167
	MySQLStatementParserRULE_assignmentOperator                          = 168
	MySQLStatementParserRULE_comparisonOperator                          = 169
	MySQLStatementParserRULE_predicate                                   = 170
	MySQLStatementParserRULE_bitExpr                                     = 171
	MySQLStatementParserRULE_simpleExpr                                  = 172
	MySQLStatementParserRULE_columnRef                                   = 173
	MySQLStatementParserRULE_columnRefList                               = 174
	MySQLStatementParserRULE_functionCall                                = 175
	MySQLStatementParserRULE_aggregationFunction                         = 176
	MySQLStatementParserRULE_aggregationFunctionName                     = 177
	MySQLStatementParserRULE_distinct                                    = 178
	MySQLStatementParserRULE_overClause                                  = 179
	MySQLStatementParserRULE_windowSpecification                         = 180
	MySQLStatementParserRULE_frameClause                                 = 181
	MySQLStatementParserRULE_frameStart                                  = 182
	MySQLStatementParserRULE_frameEnd                                    = 183
	MySQLStatementParserRULE_frameBetween                                = 184
	MySQLStatementParserRULE_specialFunction                             = 185
	MySQLStatementParserRULE_currentUserFunction                         = 186
	MySQLStatementParserRULE_groupConcatFunction                         = 187
	MySQLStatementParserRULE_windowFunction                              = 188
	MySQLStatementParserRULE_windowingClause                             = 189
	MySQLStatementParserRULE_leadLagInfo                                 = 190
	MySQLStatementParserRULE_nullTreatment                               = 191
	MySQLStatementParserRULE_checkType                                   = 192
	MySQLStatementParserRULE_repairType                                  = 193
	MySQLStatementParserRULE_castFunction                                = 194
	MySQLStatementParserRULE_convertFunction                             = 195
	MySQLStatementParserRULE_castType                                    = 196
	MySQLStatementParserRULE_nchar                                       = 197
	MySQLStatementParserRULE_positionFunction                            = 198
	MySQLStatementParserRULE_substringFunction                           = 199
	MySQLStatementParserRULE_extractFunction                             = 200
	MySQLStatementParserRULE_charFunction                                = 201
	MySQLStatementParserRULE_trimFunction                                = 202
	MySQLStatementParserRULE_valuesFunction                              = 203
	MySQLStatementParserRULE_weightStringFunction                        = 204
	MySQLStatementParserRULE_levelClause                                 = 205
	MySQLStatementParserRULE_levelInWeightListElement                    = 206
	MySQLStatementParserRULE_regularFunction                             = 207
	MySQLStatementParserRULE_shorthandRegularFunction                    = 208
	MySQLStatementParserRULE_completeRegularFunction                     = 209
	MySQLStatementParserRULE_regularFunctionName                         = 210
	MySQLStatementParserRULE_matchExpression                             = 211
	MySQLStatementParserRULE_matchSearchModifier                         = 212
	MySQLStatementParserRULE_caseExpression                              = 213
	MySQLStatementParserRULE_datetimeExpr                                = 214
	MySQLStatementParserRULE_binaryLogFileIndexNumber                    = 215
	MySQLStatementParserRULE_caseWhen                                    = 216
	MySQLStatementParserRULE_caseElse                                    = 217
	MySQLStatementParserRULE_intervalExpression                          = 218
	MySQLStatementParserRULE_intervalValue                               = 219
	MySQLStatementParserRULE_intervalUnit                                = 220
	MySQLStatementParserRULE_orderByClause                               = 221
	MySQLStatementParserRULE_orderByItem                                 = 222
	MySQLStatementParserRULE_dataType                                    = 223
	MySQLStatementParserRULE_stringList                                  = 224
	MySQLStatementParserRULE_textString                                  = 225
	MySQLStatementParserRULE_textStringHash                              = 226
	MySQLStatementParserRULE_fieldOptions                                = 227
	MySQLStatementParserRULE_precision                                   = 228
	MySQLStatementParserRULE_typeDatetimePrecision                       = 229
	MySQLStatementParserRULE_charsetWithOptBinary                        = 230
	MySQLStatementParserRULE_ascii                                       = 231
	MySQLStatementParserRULE_unicode                                     = 232
	MySQLStatementParserRULE_charset                                     = 233
	MySQLStatementParserRULE_defaultCollation                            = 234
	MySQLStatementParserRULE_defaultEncryption                           = 235
	MySQLStatementParserRULE_defaultCharset                              = 236
	MySQLStatementParserRULE_signedLiteral                               = 237
	MySQLStatementParserRULE_now                                         = 238
	MySQLStatementParserRULE_columnFormat                                = 239
	MySQLStatementParserRULE_storageMedia                                = 240
	MySQLStatementParserRULE_direction                                   = 241
	MySQLStatementParserRULE_keyOrIndex                                  = 242
	MySQLStatementParserRULE_fieldLength                                 = 243
	MySQLStatementParserRULE_characterSet                                = 244
	MySQLStatementParserRULE_collateClause                               = 245
	MySQLStatementParserRULE_fieldOrVarSpec                              = 246
	MySQLStatementParserRULE_notExistClause                              = 247
	MySQLStatementParserRULE_existClause                                 = 248
	MySQLStatementParserRULE_connectionId                                = 249
	MySQLStatementParserRULE_labelName                                   = 250
	MySQLStatementParserRULE_cursorName                                  = 251
	MySQLStatementParserRULE_conditionName                               = 252
	MySQLStatementParserRULE_unionOption                                 = 253
	MySQLStatementParserRULE_noWriteToBinLog                             = 254
	MySQLStatementParserRULE_channelOption                               = 255
	MySQLStatementParserRULE_preparedStatement                           = 256
	MySQLStatementParserRULE_executeStatement                            = 257
	MySQLStatementParserRULE_executeVarList                              = 258
	MySQLStatementParserRULE_alterStatement                              = 259
	MySQLStatementParserRULE_createTable                                 = 260
	MySQLStatementParserRULE_partitionClause                             = 261
	MySQLStatementParserRULE_partitionTypeDef                            = 262
	MySQLStatementParserRULE_subPartitions                               = 263
	MySQLStatementParserRULE_partitionKeyAlgorithm                       = 264
	MySQLStatementParserRULE_duplicateAsQueryExpression                  = 265
	MySQLStatementParserRULE_alterTable                                  = 266
	MySQLStatementParserRULE_standaloneAlterTableAction                  = 267
	MySQLStatementParserRULE_alterTableActions                           = 268
	MySQLStatementParserRULE_alterTablePartitionOptions                  = 269
	MySQLStatementParserRULE_alterCommandList                            = 270
	MySQLStatementParserRULE_alterList                                   = 271
	MySQLStatementParserRULE_createTableOptionsSpaceSeparated            = 272
	MySQLStatementParserRULE_alterListItem                               = 273
	MySQLStatementParserRULE_alterOrderList                              = 274
	MySQLStatementParserRULE_tableConstraintDef                          = 275
	MySQLStatementParserRULE_alterCommandsModifierList                   = 276
	MySQLStatementParserRULE_alterCommandsModifier                       = 277
	MySQLStatementParserRULE_withValidation                              = 278
	MySQLStatementParserRULE_standaloneAlterCommands                     = 279
	MySQLStatementParserRULE_alterPartition                              = 280
	MySQLStatementParserRULE_constraintClause                            = 281
	MySQLStatementParserRULE_tableElementList                            = 282
	MySQLStatementParserRULE_tableElement                                = 283
	MySQLStatementParserRULE_restrict                                    = 284
	MySQLStatementParserRULE_fulltextIndexOption                         = 285
	MySQLStatementParserRULE_dropTable                                   = 286
	MySQLStatementParserRULE_dropIndex                                   = 287
	MySQLStatementParserRULE_alterAlgorithmOption                        = 288
	MySQLStatementParserRULE_alterLockOption                             = 289
	MySQLStatementParserRULE_truncateTable                               = 290
	MySQLStatementParserRULE_createIndex                                 = 291
	MySQLStatementParserRULE_createDatabase                              = 292
	MySQLStatementParserRULE_alterDatabase                               = 293
	MySQLStatementParserRULE_createDatabaseSpecification_                = 294
	MySQLStatementParserRULE_alterDatabaseSpecification_                 = 295
	MySQLStatementParserRULE_dropDatabase                                = 296
	MySQLStatementParserRULE_alterInstance                               = 297
	MySQLStatementParserRULE_instanceAction                              = 298
	MySQLStatementParserRULE_channel                                     = 299
	MySQLStatementParserRULE_createEvent                                 = 300
	MySQLStatementParserRULE_alterEvent                                  = 301
	MySQLStatementParserRULE_dropEvent                                   = 302
	MySQLStatementParserRULE_createFunction                              = 303
	MySQLStatementParserRULE_alterFunction                               = 304
	MySQLStatementParserRULE_dropFunction                                = 305
	MySQLStatementParserRULE_createProcedure                             = 306
	MySQLStatementParserRULE_alterProcedure                              = 307
	MySQLStatementParserRULE_dropProcedure                               = 308
	MySQLStatementParserRULE_createServer                                = 309
	MySQLStatementParserRULE_alterServer                                 = 310
	MySQLStatementParserRULE_dropServer                                  = 311
	MySQLStatementParserRULE_createView                                  = 312
	MySQLStatementParserRULE_alterView                                   = 313
	MySQLStatementParserRULE_dropView                                    = 314
	MySQLStatementParserRULE_createTablespace                            = 315
	MySQLStatementParserRULE_createTablespaceInnodb                      = 316
	MySQLStatementParserRULE_createTablespaceNdb                         = 317
	MySQLStatementParserRULE_alterTablespace                             = 318
	MySQLStatementParserRULE_alterTablespaceNdb                          = 319
	MySQLStatementParserRULE_alterTablespaceInnodb                       = 320
	MySQLStatementParserRULE_dropTablespace                              = 321
	MySQLStatementParserRULE_createLogfileGroup                          = 322
	MySQLStatementParserRULE_alterLogfileGroup                           = 323
	MySQLStatementParserRULE_dropLogfileGroup                            = 324
	MySQLStatementParserRULE_createTrigger                               = 325
	MySQLStatementParserRULE_dropTrigger                                 = 326
	MySQLStatementParserRULE_renameTable                                 = 327
	MySQLStatementParserRULE_createDefinitionClause                      = 328
	MySQLStatementParserRULE_columnDefinition                            = 329
	MySQLStatementParserRULE_fieldDefinition                             = 330
	MySQLStatementParserRULE_columnAttribute                             = 331
	MySQLStatementParserRULE_checkConstraint                             = 332
	MySQLStatementParserRULE_constraintEnforcement                       = 333
	MySQLStatementParserRULE_generatedOption                             = 334
	MySQLStatementParserRULE_referenceDefinition                         = 335
	MySQLStatementParserRULE_onUpdateDelete                              = 336
	MySQLStatementParserRULE_referenceOption                             = 337
	MySQLStatementParserRULE_indexNameAndType                            = 338
	MySQLStatementParserRULE_indexType                                   = 339
	MySQLStatementParserRULE_indexTypeClause                             = 340
	MySQLStatementParserRULE_keyParts                                    = 341
	MySQLStatementParserRULE_keyPart                                     = 342
	MySQLStatementParserRULE_keyPartWithExpression                       = 343
	MySQLStatementParserRULE_keyListWithExpression                       = 344
	MySQLStatementParserRULE_indexOption                                 = 345
	MySQLStatementParserRULE_commonIndexOption                           = 346
	MySQLStatementParserRULE_visibility                                  = 347
	MySQLStatementParserRULE_createLikeClause                            = 348
	MySQLStatementParserRULE_createIndexSpecification                    = 349
	MySQLStatementParserRULE_createTableOptions                          = 350
	MySQLStatementParserRULE_createTableOption                           = 351
	MySQLStatementParserRULE_createSRSStatement                          = 352
	MySQLStatementParserRULE_dropSRSStatement                            = 353
	MySQLStatementParserRULE_srsAttribute                                = 354
	MySQLStatementParserRULE_place                                       = 355
	MySQLStatementParserRULE_partitionDefinitions                        = 356
	MySQLStatementParserRULE_partitionDefinition                         = 357
	MySQLStatementParserRULE_partitionLessThanValue                      = 358
	MySQLStatementParserRULE_partitionValueList                          = 359
	MySQLStatementParserRULE_partitionDefinitionOption                   = 360
	MySQLStatementParserRULE_subpartitionDefinition                      = 361
	MySQLStatementParserRULE_ownerStatement                              = 362
	MySQLStatementParserRULE_scheduleExpression                          = 363
	MySQLStatementParserRULE_timestampValue                              = 364
	MySQLStatementParserRULE_routineBody                                 = 365
	MySQLStatementParserRULE_serverOption                                = 366
	MySQLStatementParserRULE_routineOption                               = 367
	MySQLStatementParserRULE_procedureParameter                          = 368
	MySQLStatementParserRULE_fileSizeLiteral                             = 369
	MySQLStatementParserRULE_simpleStatement                             = 370
	MySQLStatementParserRULE_compoundStatement                           = 371
	MySQLStatementParserRULE_validStatement                              = 372
	MySQLStatementParserRULE_beginStatement                              = 373
	MySQLStatementParserRULE_declareStatement                            = 374
	MySQLStatementParserRULE_flowControlStatement                        = 375
	MySQLStatementParserRULE_caseStatement                               = 376
	MySQLStatementParserRULE_ifStatement                                 = 377
	MySQLStatementParserRULE_iterateStatement                            = 378
	MySQLStatementParserRULE_leaveStatement                              = 379
	MySQLStatementParserRULE_loopStatement                               = 380
	MySQLStatementParserRULE_repeatStatement                             = 381
	MySQLStatementParserRULE_returnStatement                             = 382
	MySQLStatementParserRULE_whileStatement                              = 383
	MySQLStatementParserRULE_cursorStatement                             = 384
	MySQLStatementParserRULE_cursorCloseStatement                        = 385
	MySQLStatementParserRULE_cursorDeclareStatement                      = 386
	MySQLStatementParserRULE_cursorFetchStatement                        = 387
	MySQLStatementParserRULE_cursorOpenStatement                         = 388
	MySQLStatementParserRULE_conditionHandlingStatement                  = 389
	MySQLStatementParserRULE_declareConditionStatement                   = 390
	MySQLStatementParserRULE_declareHandlerStatement                     = 391
	MySQLStatementParserRULE_getDiagnosticsStatement                     = 392
	MySQLStatementParserRULE_statementInformationItem                    = 393
	MySQLStatementParserRULE_conditionInformationItem                    = 394
	MySQLStatementParserRULE_conditionNumber                             = 395
	MySQLStatementParserRULE_statementInformationItemName                = 396
	MySQLStatementParserRULE_conditionInformationItemName                = 397
	MySQLStatementParserRULE_handlerAction                               = 398
	MySQLStatementParserRULE_conditionValue                              = 399
	MySQLStatementParserRULE_resignalStatement                           = 400
	MySQLStatementParserRULE_signalStatement                             = 401
	MySQLStatementParserRULE_signalInformationItem                       = 402
	MySQLStatementParserRULE_use                                         = 403
	MySQLStatementParserRULE_help                                        = 404
	MySQLStatementParserRULE_explain                                     = 405
	MySQLStatementParserRULE_showDatabases                               = 406
	MySQLStatementParserRULE_showTables                                  = 407
	MySQLStatementParserRULE_showTableStatus                             = 408
	MySQLStatementParserRULE_showColumns                                 = 409
	MySQLStatementParserRULE_showIndex                                   = 410
	MySQLStatementParserRULE_showCreateTable                             = 411
	MySQLStatementParserRULE_fromSchema                                  = 412
	MySQLStatementParserRULE_fromTable                                   = 413
	MySQLStatementParserRULE_showLike                                    = 414
	MySQLStatementParserRULE_showWhereClause                             = 415
	MySQLStatementParserRULE_showFilter                                  = 416
	MySQLStatementParserRULE_showProfileType                             = 417
	MySQLStatementParserRULE_setVariable                                 = 418
	MySQLStatementParserRULE_optionValueList                             = 419
	MySQLStatementParserRULE_optionValueNoOptionType                     = 420
	MySQLStatementParserRULE_optionValue                                 = 421
	MySQLStatementParserRULE_showBinaryLogs                              = 422
	MySQLStatementParserRULE_showBinlogEvents                            = 423
	MySQLStatementParserRULE_showCharacterSet                            = 424
	MySQLStatementParserRULE_showCollation                               = 425
	MySQLStatementParserRULE_showCreateDatabase                          = 426
	MySQLStatementParserRULE_showCreateEvent                             = 427
	MySQLStatementParserRULE_showCreateFunction                          = 428
	MySQLStatementParserRULE_showCreateProcedure                         = 429
	MySQLStatementParserRULE_showCreateTrigger                           = 430
	MySQLStatementParserRULE_showCreateUser                              = 431
	MySQLStatementParserRULE_showCreateView                              = 432
	MySQLStatementParserRULE_showEngine                                  = 433
	MySQLStatementParserRULE_showEngines                                 = 434
	MySQLStatementParserRULE_showCharset                                 = 435
	MySQLStatementParserRULE_showErrors                                  = 436
	MySQLStatementParserRULE_showEvents                                  = 437
	MySQLStatementParserRULE_showFunctionCode                            = 438
	MySQLStatementParserRULE_showFunctionStatus                          = 439
	MySQLStatementParserRULE_showGrant                                   = 440
	MySQLStatementParserRULE_showMasterStatus                            = 441
	MySQLStatementParserRULE_showOpenTables                              = 442
	MySQLStatementParserRULE_showPlugins                                 = 443
	MySQLStatementParserRULE_showPrivileges                              = 444
	MySQLStatementParserRULE_showProcedureCode                           = 445
	MySQLStatementParserRULE_showProcedureStatus                         = 446
	MySQLStatementParserRULE_showProcesslist                             = 447
	MySQLStatementParserRULE_showProfile                                 = 448
	MySQLStatementParserRULE_showProfiles                                = 449
	MySQLStatementParserRULE_showRelaylogEvent                           = 450
	MySQLStatementParserRULE_showSlavehost                               = 451
	MySQLStatementParserRULE_showSlaveStatus                             = 452
	MySQLStatementParserRULE_showStatus                                  = 453
	MySQLStatementParserRULE_showTriggers                                = 454
	MySQLStatementParserRULE_showVariables                               = 455
	MySQLStatementParserRULE_showWarnings                                = 456
	MySQLStatementParserRULE_showReplicas                                = 457
	MySQLStatementParserRULE_showReplicaStatus                           = 458
	MySQLStatementParserRULE_setCharacter                                = 459
	MySQLStatementParserRULE_clone                                       = 460
	MySQLStatementParserRULE_cloneAction                                 = 461
	MySQLStatementParserRULE_createLoadableFunction                      = 462
	MySQLStatementParserRULE_install                                     = 463
	MySQLStatementParserRULE_uninstall                                   = 464
	MySQLStatementParserRULE_installComponent                            = 465
	MySQLStatementParserRULE_installPlugin                               = 466
	MySQLStatementParserRULE_uninstallComponent                          = 467
	MySQLStatementParserRULE_uninstallPlugin                             = 468
	MySQLStatementParserRULE_analyzeTable                                = 469
	MySQLStatementParserRULE_histogram                                   = 470
	MySQLStatementParserRULE_checkTable                                  = 471
	MySQLStatementParserRULE_checkTableOption                            = 472
	MySQLStatementParserRULE_checksumTable                               = 473
	MySQLStatementParserRULE_optimizeTable                               = 474
	MySQLStatementParserRULE_repairTable                                 = 475
	MySQLStatementParserRULE_alterResourceGroup                          = 476
	MySQLStatementParserRULE_vcpuSpec                                    = 477
	MySQLStatementParserRULE_createResourceGroup                         = 478
	MySQLStatementParserRULE_dropResourceGroup                           = 479
	MySQLStatementParserRULE_setResourceGroup                            = 480
	MySQLStatementParserRULE_binlog                                      = 481
	MySQLStatementParserRULE_cacheIndex                                  = 482
	MySQLStatementParserRULE_cacheTableIndexList                         = 483
	MySQLStatementParserRULE_partitionList                               = 484
	MySQLStatementParserRULE_flush                                       = 485
	MySQLStatementParserRULE_flushOption                                 = 486
	MySQLStatementParserRULE_tablesOption                                = 487
	MySQLStatementParserRULE_kill                                        = 488
	MySQLStatementParserRULE_loadIndexInfo                               = 489
	MySQLStatementParserRULE_loadTableIndexList                          = 490
	MySQLStatementParserRULE_resetStatement                              = 491
	MySQLStatementParserRULE_resetOption                                 = 492
	MySQLStatementParserRULE_resetPersist                                = 493
	MySQLStatementParserRULE_restart                                     = 494
	MySQLStatementParserRULE_shutdown                                    = 495
	MySQLStatementParserRULE_explainType                                 = 496
	MySQLStatementParserRULE_explainableStatement                        = 497
	MySQLStatementParserRULE_formatName                                  = 498
	MySQLStatementParserRULE_show                                        = 499
	MySQLStatementParserRULE_setTransaction                              = 500
	MySQLStatementParserRULE_setAutoCommit                               = 501
	MySQLStatementParserRULE_beginTransaction                            = 502
	MySQLStatementParserRULE_transactionCharacteristic                   = 503
	MySQLStatementParserRULE_commit                                      = 504
	MySQLStatementParserRULE_rollback                                    = 505
	MySQLStatementParserRULE_savepoint                                   = 506
	MySQLStatementParserRULE_begin                                       = 507
	MySQLStatementParserRULE_lock                                        = 508
	MySQLStatementParserRULE_unlock                                      = 509
	MySQLStatementParserRULE_releaseSavepoint                            = 510
	MySQLStatementParserRULE_xa                                          = 511
	MySQLStatementParserRULE_optionChain                                 = 512
	MySQLStatementParserRULE_optionRelease                               = 513
	MySQLStatementParserRULE_tableLock                                   = 514
	MySQLStatementParserRULE_lockOption                                  = 515
	MySQLStatementParserRULE_xid                                         = 516
	MySQLStatementParserRULE_grant                                       = 517
	MySQLStatementParserRULE_revoke                                      = 518
	MySQLStatementParserRULE_userList                                    = 519
	MySQLStatementParserRULE_roleOrPrivileges                            = 520
	MySQLStatementParserRULE_roleOrPrivilege                             = 521
	MySQLStatementParserRULE_aclType                                     = 522
	MySQLStatementParserRULE_grantIdentifier                             = 523
	MySQLStatementParserRULE_createUser                                  = 524
	MySQLStatementParserRULE_createUserEntry                             = 525
	MySQLStatementParserRULE_createUserList                              = 526
	MySQLStatementParserRULE_defaultRoleClause                           = 527
	MySQLStatementParserRULE_requireClause                               = 528
	MySQLStatementParserRULE_connectOptions                              = 529
	MySQLStatementParserRULE_accountLockPasswordExpireOptions            = 530
	MySQLStatementParserRULE_accountLockPasswordExpireOption             = 531
	MySQLStatementParserRULE_alterUser                                   = 532
	MySQLStatementParserRULE_alterUserEntry                              = 533
	MySQLStatementParserRULE_alterUserList                               = 534
	MySQLStatementParserRULE_dropUser                                    = 535
	MySQLStatementParserRULE_createRole                                  = 536
	MySQLStatementParserRULE_dropRole                                    = 537
	MySQLStatementParserRULE_renameUser                                  = 538
	MySQLStatementParserRULE_setDefaultRole                              = 539
	MySQLStatementParserRULE_setRole                                     = 540
	MySQLStatementParserRULE_setPassword                                 = 541
	MySQLStatementParserRULE_authOption                                  = 542
	MySQLStatementParserRULE_withGrantOption                             = 543
	MySQLStatementParserRULE_userOrRoles                                 = 544
	MySQLStatementParserRULE_roles                                       = 545
	MySQLStatementParserRULE_grantAs                                     = 546
	MySQLStatementParserRULE_withRoles                                   = 547
	MySQLStatementParserRULE_userAuthOption                              = 548
	MySQLStatementParserRULE_identifiedBy                                = 549
	MySQLStatementParserRULE_identifiedWith                              = 550
	MySQLStatementParserRULE_connectOption                               = 551
	MySQLStatementParserRULE_tlsOption                                   = 552
	MySQLStatementParserRULE_userFuncAuthOption                          = 553
	MySQLStatementParserRULE_change                                      = 554
	MySQLStatementParserRULE_changeMasterTo                              = 555
	MySQLStatementParserRULE_changeReplicationFilter                     = 556
	MySQLStatementParserRULE_startSlave                                  = 557
	MySQLStatementParserRULE_stopSlave                                   = 558
	MySQLStatementParserRULE_groupReplication                            = 559
	MySQLStatementParserRULE_startGroupReplication                       = 560
	MySQLStatementParserRULE_stopGroupReplication                        = 561
	MySQLStatementParserRULE_purgeBinaryLog                              = 562
	MySQLStatementParserRULE_threadTypes                                 = 563
	MySQLStatementParserRULE_threadType                                  = 564
	MySQLStatementParserRULE_utilOption                                  = 565
	MySQLStatementParserRULE_connectionOptions                           = 566
	MySQLStatementParserRULE_masterDefs                                  = 567
	MySQLStatementParserRULE_masterDef                                   = 568
	MySQLStatementParserRULE_ignoreServerIds                             = 569
	MySQLStatementParserRULE_ignoreServerId                              = 570
	MySQLStatementParserRULE_filterDefs                                  = 571
	MySQLStatementParserRULE_filterDef                                   = 572
	MySQLStatementParserRULE_wildTables                                  = 573
	MySQLStatementParserRULE_wildTable                                   = 574
)

// IExecuteContext is an interface to support dynamic dispatch.
type IExecuteContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExecuteContext differentiates from other interfaces.
	IsExecuteContext()
}

type ExecuteContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExecuteContext() *ExecuteContext {
	var p = new(ExecuteContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_execute
	return p
}

func (*ExecuteContext) IsExecuteContext() {}

func NewExecuteContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExecuteContext {
	var p = new(ExecuteContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_execute

	return p
}

func (s *ExecuteContext) GetParser() antlr.Parser { return s.parser }

func (s *ExecuteContext) Select() ISelectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectContext)
}

func (s *ExecuteContext) Insert() IInsertContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsertContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsertContext)
}

func (s *ExecuteContext) Update() IUpdateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdateContext)
}

func (s *ExecuteContext) Delete() IDeleteContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeleteContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeleteContext)
}

func (s *ExecuteContext) Replace() IReplaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReplaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReplaceContext)
}

func (s *ExecuteContext) Binlog() IBinlogContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBinlogContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBinlogContext)
}

func (s *ExecuteContext) CreateTable() ICreateTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateTableContext)
}

func (s *ExecuteContext) AlterStatement() IAlterStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementContext)
}

func (s *ExecuteContext) RepairTable() IRepairTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRepairTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRepairTableContext)
}

func (s *ExecuteContext) DropTable() IDropTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropTableContext)
}

func (s *ExecuteContext) TruncateTable() ITruncateTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITruncateTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITruncateTableContext)
}

func (s *ExecuteContext) CreateIndex() ICreateIndexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateIndexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateIndexContext)
}

func (s *ExecuteContext) DropIndex() IDropIndexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropIndexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropIndexContext)
}

func (s *ExecuteContext) CreateProcedure() ICreateProcedureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateProcedureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateProcedureContext)
}

func (s *ExecuteContext) DropProcedure() IDropProcedureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropProcedureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropProcedureContext)
}

func (s *ExecuteContext) CreateFunction() ICreateFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateFunctionContext)
}

func (s *ExecuteContext) DropFunction() IDropFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropFunctionContext)
}

func (s *ExecuteContext) CreateDatabase() ICreateDatabaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateDatabaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateDatabaseContext)
}

func (s *ExecuteContext) DropDatabase() IDropDatabaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropDatabaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropDatabaseContext)
}

func (s *ExecuteContext) CreateEvent() ICreateEventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateEventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateEventContext)
}

func (s *ExecuteContext) DropEvent() IDropEventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropEventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropEventContext)
}

func (s *ExecuteContext) CreateLogfileGroup() ICreateLogfileGroupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateLogfileGroupContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateLogfileGroupContext)
}

func (s *ExecuteContext) DropLogfileGroup() IDropLogfileGroupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropLogfileGroupContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropLogfileGroupContext)
}

func (s *ExecuteContext) CreateServer() ICreateServerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateServerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateServerContext)
}

func (s *ExecuteContext) DropServer() IDropServerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropServerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropServerContext)
}

func (s *ExecuteContext) CreateView() ICreateViewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateViewContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateViewContext)
}

func (s *ExecuteContext) DropView() IDropViewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropViewContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropViewContext)
}

func (s *ExecuteContext) CreateTrigger() ICreateTriggerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateTriggerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateTriggerContext)
}

func (s *ExecuteContext) DropTrigger() IDropTriggerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropTriggerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropTriggerContext)
}

func (s *ExecuteContext) AlterResourceGroup() IAlterResourceGroupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterResourceGroupContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterResourceGroupContext)
}

func (s *ExecuteContext) CreateResourceGroup() ICreateResourceGroupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateResourceGroupContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateResourceGroupContext)
}

func (s *ExecuteContext) DropResourceGroup() IDropResourceGroupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropResourceGroupContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropResourceGroupContext)
}

func (s *ExecuteContext) PreparedStatement() IPreparedStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPreparedStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPreparedStatementContext)
}

func (s *ExecuteContext) SetTransaction() ISetTransactionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetTransactionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetTransactionContext)
}

func (s *ExecuteContext) BeginTransaction() IBeginTransactionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBeginTransactionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBeginTransactionContext)
}

func (s *ExecuteContext) SetAutoCommit() ISetAutoCommitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetAutoCommitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetAutoCommitContext)
}

func (s *ExecuteContext) Commit() ICommitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICommitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICommitContext)
}

func (s *ExecuteContext) Rollback() IRollbackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRollbackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRollbackContext)
}

func (s *ExecuteContext) Savepoint() ISavepointContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISavepointContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISavepointContext)
}

func (s *ExecuteContext) Grant() IGrantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGrantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGrantContext)
}

func (s *ExecuteContext) Revoke() IRevokeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRevokeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRevokeContext)
}

func (s *ExecuteContext) CreateUser() ICreateUserContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateUserContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateUserContext)
}

func (s *ExecuteContext) DropUser() IDropUserContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropUserContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropUserContext)
}

func (s *ExecuteContext) AlterUser() IAlterUserContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterUserContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterUserContext)
}

func (s *ExecuteContext) RenameUser() IRenameUserContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRenameUserContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRenameUserContext)
}

func (s *ExecuteContext) CreateRole() ICreateRoleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateRoleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateRoleContext)
}

func (s *ExecuteContext) DropRole() IDropRoleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropRoleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropRoleContext)
}

func (s *ExecuteContext) SetDefaultRole() ISetDefaultRoleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetDefaultRoleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetDefaultRoleContext)
}

func (s *ExecuteContext) SetRole() ISetRoleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetRoleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetRoleContext)
}

func (s *ExecuteContext) CreateTablespaceInnodb() ICreateTablespaceInnodbContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateTablespaceInnodbContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateTablespaceInnodbContext)
}

func (s *ExecuteContext) CreateTablespaceNdb() ICreateTablespaceNdbContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateTablespaceNdbContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateTablespaceNdbContext)
}

func (s *ExecuteContext) DropTablespace() IDropTablespaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropTablespaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropTablespaceContext)
}

func (s *ExecuteContext) CreateSRSStatement() ICreateSRSStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateSRSStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateSRSStatementContext)
}

func (s *ExecuteContext) DropSRSStatement() IDropSRSStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropSRSStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropSRSStatementContext)
}

func (s *ExecuteContext) Flush() IFlushContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFlushContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFlushContext)
}

func (s *ExecuteContext) GetDiagnosticsStatement() IGetDiagnosticsStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGetDiagnosticsStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGetDiagnosticsStatementContext)
}

func (s *ExecuteContext) GroupReplication() IGroupReplicationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupReplicationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroupReplicationContext)
}

func (s *ExecuteContext) HandlerStatement() IHandlerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandlerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHandlerStatementContext)
}

func (s *ExecuteContext) Help() IHelpContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHelpContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHelpContext)
}

func (s *ExecuteContext) ImportStatement() IImportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportStatementContext)
}

func (s *ExecuteContext) Install() IInstallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstallContext)
}

func (s *ExecuteContext) Kill() IKillContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKillContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKillContext)
}

func (s *ExecuteContext) LoadStatement() ILoadStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoadStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoadStatementContext)
}

func (s *ExecuteContext) Lock() ILockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILockContext)
}

func (s *ExecuteContext) CacheIndex() ICacheIndexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICacheIndexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICacheIndexContext)
}

func (s *ExecuteContext) LoadIndexInfo() ILoadIndexInfoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoadIndexInfoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoadIndexInfoContext)
}

func (s *ExecuteContext) OptimizeTable() IOptimizeTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptimizeTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOptimizeTableContext)
}

func (s *ExecuteContext) PurgeBinaryLog() IPurgeBinaryLogContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPurgeBinaryLogContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPurgeBinaryLogContext)
}

func (s *ExecuteContext) ReleaseSavepoint() IReleaseSavepointContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReleaseSavepointContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReleaseSavepointContext)
}

func (s *ExecuteContext) ResetStatement() IResetStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IResetStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IResetStatementContext)
}

func (s *ExecuteContext) SetPassword() ISetPasswordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetPasswordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetPasswordContext)
}

func (s *ExecuteContext) SetResourceGroup() ISetResourceGroupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetResourceGroupContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetResourceGroupContext)
}

func (s *ExecuteContext) ResignalStatement() IResignalStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IResignalStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IResignalStatementContext)
}

func (s *ExecuteContext) SignalStatement() ISignalStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISignalStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISignalStatementContext)
}

func (s *ExecuteContext) Restart() IRestartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRestartContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRestartContext)
}

func (s *ExecuteContext) Shutdown() IShutdownContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShutdownContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShutdownContext)
}

func (s *ExecuteContext) Begin() IBeginContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBeginContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBeginContext)
}

func (s *ExecuteContext) Use() IUseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUseContext)
}

func (s *ExecuteContext) Explain() IExplainContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExplainContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExplainContext)
}

func (s *ExecuteContext) DoStatement() IDoStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDoStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDoStatementContext)
}

func (s *ExecuteContext) Show() IShowContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowContext)
}

func (s *ExecuteContext) SetVariable() ISetVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetVariableContext)
}

func (s *ExecuteContext) SetCharacter() ISetCharacterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetCharacterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetCharacterContext)
}

func (s *ExecuteContext) Call() ICallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *ExecuteContext) Change() IChangeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChangeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChangeContext)
}

func (s *ExecuteContext) CheckTable() ICheckTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICheckTableContext)
}

func (s *ExecuteContext) ChecksumTable() IChecksumTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChecksumTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChecksumTableContext)
}

func (s *ExecuteContext) Clone() ICloneContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICloneContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICloneContext)
}

func (s *ExecuteContext) StartSlave() IStartSlaveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStartSlaveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStartSlaveContext)
}

func (s *ExecuteContext) StopSlave() IStopSlaveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStopSlaveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStopSlaveContext)
}

func (s *ExecuteContext) AnalyzeTable() IAnalyzeTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnalyzeTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnalyzeTableContext)
}

func (s *ExecuteContext) RenameTable() IRenameTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRenameTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRenameTableContext)
}

func (s *ExecuteContext) Uninstall() IUninstallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUninstallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUninstallContext)
}

func (s *ExecuteContext) Unlock() IUnlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnlockContext)
}

func (s *ExecuteContext) Xa() IXaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXaContext)
}

func (s *ExecuteContext) CreateLoadableFunction() ICreateLoadableFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateLoadableFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateLoadableFunctionContext)
}

func (s *ExecuteContext) CreateTablespace() ICreateTablespaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateTablespaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateTablespaceContext)
}

func (s *ExecuteContext) AlterTablespace() IAlterTablespaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterTablespaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterTablespaceContext)
}

func (s *ExecuteContext) SEMI_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSEMI_, 0)
}

func (s *ExecuteContext) EOF() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEOF, 0)
}

func (s *ExecuteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExecuteContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExecuteContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterExecute(s)
	}
}

func (s *ExecuteContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitExecute(s)
	}
}

func (s *ExecuteContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitExecute(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Execute() (localctx IExecuteContext) {
	this := p
	_ = this

	localctx = NewExecuteContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, MySQLStatementParserRULE_execute)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1260)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserLP_, MySQLStatementParserALTER, MySQLStatementParserANALYZE, MySQLStatementParserBEGIN, MySQLStatementParserBINLOG, MySQLStatementParserCACHE, MySQLStatementParserCALL, MySQLStatementParserCHANGE, MySQLStatementParserCHECK, MySQLStatementParserCHECKSUM, MySQLStatementParserCLONE, MySQLStatementParserCOMMIT, MySQLStatementParserCREATE, MySQLStatementParserDEALLOCATE, MySQLStatementParserDELETE, MySQLStatementParserDESC, MySQLStatementParserDESCRIBE, MySQLStatementParserDO, MySQLStatementParserDROP, MySQLStatementParserEXECUTE, MySQLStatementParserEXPLAIN, MySQLStatementParserFLUSH, MySQLStatementParserGET, MySQLStatementParserGRANT, MySQLStatementParserHANDLER, MySQLStatementParserHELP, MySQLStatementParserIMPORT, MySQLStatementParserINSERT, MySQLStatementParserINSTALL, MySQLStatementParserKILL, MySQLStatementParserLOAD, MySQLStatementParserLOCK, MySQLStatementParserOPTIMIZE, MySQLStatementParserPREPARE, MySQLStatementParserPURGE, MySQLStatementParserRELEASE, MySQLStatementParserRENAME, MySQLStatementParserREPAIR, MySQLStatementParserREPLACE, MySQLStatementParserRESET, MySQLStatementParserRESIGNAL, MySQLStatementParserRESTART, MySQLStatementParserREVOKE, MySQLStatementParserROLLBACK, MySQLStatementParserSAVEPOINT, MySQLStatementParserSELECT, MySQLStatementParserSET, MySQLStatementParserSHOW, MySQLStatementParserSHUTDOWN, MySQLStatementParserSIGNAL, MySQLStatementParserSTART, MySQLStatementParserSTOP, MySQLStatementParserTABLE, MySQLStatementParserTRUNCATE, MySQLStatementParserUNINSTALL, MySQLStatementParserUNLOCK, MySQLStatementParserUPDATE, MySQLStatementParserUSE, MySQLStatementParserVALUES, MySQLStatementParserWITH, MySQLStatementParserXA:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1250)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 0, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1150)
				p.Select()
			}

		case 2:
			{
				p.SetState(1151)
				p.Insert()
			}

		case 3:
			{
				p.SetState(1152)
				p.Update()
			}

		case 4:
			{
				p.SetState(1153)
				p.Delete()
			}

		case 5:
			{
				p.SetState(1154)
				p.Replace()
			}

		case 6:
			{
				p.SetState(1155)
				p.Binlog()
			}

		case 7:
			{
				p.SetState(1156)
				p.CreateTable()
			}

		case 8:
			{
				p.SetState(1157)
				p.AlterStatement()
			}

		case 9:
			{
				p.SetState(1158)
				p.RepairTable()
			}

		case 10:
			{
				p.SetState(1159)
				p.DropTable()
			}

		case 11:
			{
				p.SetState(1160)
				p.TruncateTable()
			}

		case 12:
			{
				p.SetState(1161)
				p.CreateIndex()
			}

		case 13:
			{
				p.SetState(1162)
				p.DropIndex()
			}

		case 14:
			{
				p.SetState(1163)
				p.CreateProcedure()
			}

		case 15:
			{
				p.SetState(1164)
				p.DropProcedure()
			}

		case 16:
			{
				p.SetState(1165)
				p.CreateFunction()
			}

		case 17:
			{
				p.SetState(1166)
				p.DropFunction()
			}

		case 18:
			{
				p.SetState(1167)
				p.CreateDatabase()
			}

		case 19:
			{
				p.SetState(1168)
				p.DropDatabase()
			}

		case 20:
			{
				p.SetState(1169)
				p.CreateEvent()
			}

		case 21:
			{
				p.SetState(1170)
				p.DropEvent()
			}

		case 22:
			{
				p.SetState(1171)
				p.CreateLogfileGroup()
			}

		case 23:
			{
				p.SetState(1172)
				p.DropLogfileGroup()
			}

		case 24:
			{
				p.SetState(1173)
				p.CreateServer()
			}

		case 25:
			{
				p.SetState(1174)
				p.DropServer()
			}

		case 26:
			{
				p.SetState(1175)
				p.CreateView()
			}

		case 27:
			{
				p.SetState(1176)
				p.DropView()
			}

		case 28:
			{
				p.SetState(1177)
				p.CreateTrigger()
			}

		case 29:
			{
				p.SetState(1178)
				p.DropTrigger()
			}

		case 30:
			{
				p.SetState(1179)
				p.AlterResourceGroup()
			}

		case 31:
			{
				p.SetState(1180)
				p.CreateResourceGroup()
			}

		case 32:
			{
				p.SetState(1181)
				p.DropResourceGroup()
			}

		case 33:
			{
				p.SetState(1182)
				p.PreparedStatement()
			}

		case 34:
			{
				p.SetState(1183)
				p.SetTransaction()
			}

		case 35:
			{
				p.SetState(1184)
				p.BeginTransaction()
			}

		case 36:
			{
				p.SetState(1185)
				p.SetAutoCommit()
			}

		case 37:
			{
				p.SetState(1186)
				p.Commit()
			}

		case 38:
			{
				p.SetState(1187)
				p.Rollback()
			}

		case 39:
			{
				p.SetState(1188)
				p.Savepoint()
			}

		case 40:
			{
				p.SetState(1189)
				p.Grant()
			}

		case 41:
			{
				p.SetState(1190)
				p.Revoke()
			}

		case 42:
			{
				p.SetState(1191)
				p.CreateUser()
			}

		case 43:
			{
				p.SetState(1192)
				p.DropUser()
			}

		case 44:
			{
				p.SetState(1193)
				p.AlterUser()
			}

		case 45:
			{
				p.SetState(1194)
				p.RenameUser()
			}

		case 46:
			{
				p.SetState(1195)
				p.CreateRole()
			}

		case 47:
			{
				p.SetState(1196)
				p.DropRole()
			}

		case 48:
			{
				p.SetState(1197)
				p.SetDefaultRole()
			}

		case 49:
			{
				p.SetState(1198)
				p.SetRole()
			}

		case 50:
			{
				p.SetState(1199)
				p.CreateTablespaceInnodb()
			}

		case 51:
			{
				p.SetState(1200)
				p.CreateTablespaceNdb()
			}

		case 52:
			{
				p.SetState(1201)
				p.DropTablespace()
			}

		case 53:
			{
				p.SetState(1202)
				p.CreateSRSStatement()
			}

		case 54:
			{
				p.SetState(1203)
				p.DropSRSStatement()
			}

		case 55:
			{
				p.SetState(1204)
				p.Flush()
			}

		case 56:
			{
				p.SetState(1205)
				p.GetDiagnosticsStatement()
			}

		case 57:
			{
				p.SetState(1206)
				p.GroupReplication()
			}

		case 58:
			{
				p.SetState(1207)
				p.HandlerStatement()
			}

		case 59:
			{
				p.SetState(1208)
				p.Help()
			}

		case 60:
			{
				p.SetState(1209)
				p.ImportStatement()
			}

		case 61:
			{
				p.SetState(1210)
				p.Install()
			}

		case 62:
			{
				p.SetState(1211)
				p.Kill()
			}

		case 63:
			{
				p.SetState(1212)
				p.LoadStatement()
			}

		case 64:
			{
				p.SetState(1213)
				p.Lock()
			}

		case 65:
			{
				p.SetState(1214)
				p.CacheIndex()
			}

		case 66:
			{
				p.SetState(1215)
				p.LoadIndexInfo()
			}

		case 67:
			{
				p.SetState(1216)
				p.OptimizeTable()
			}

		case 68:
			{
				p.SetState(1217)
				p.PurgeBinaryLog()
			}

		case 69:
			{
				p.SetState(1218)
				p.ReleaseSavepoint()
			}

		case 70:
			{
				p.SetState(1219)
				p.ResetStatement()
			}

		case 71:
			{
				p.SetState(1220)
				p.SetPassword()
			}

		case 72:
			{
				p.SetState(1221)
				p.SetTransaction()
			}

		case 73:
			{
				p.SetState(1222)
				p.SetResourceGroup()
			}

		case 74:
			{
				p.SetState(1223)
				p.ResignalStatement()
			}

		case 75:
			{
				p.SetState(1224)
				p.SignalStatement()
			}

		case 76:
			{
				p.SetState(1225)
				p.Restart()
			}

		case 77:
			{
				p.SetState(1226)
				p.Shutdown()
			}

		case 78:
			{
				p.SetState(1227)
				p.Begin()
			}

		case 79:
			{
				p.SetState(1228)
				p.Use()
			}

		case 80:
			{
				p.SetState(1229)
				p.Explain()
			}

		case 81:
			{
				p.SetState(1230)
				p.DoStatement()
			}

		case 82:
			{
				p.SetState(1231)
				p.Show()
			}

		case 83:
			{
				p.SetState(1232)
				p.SetVariable()
			}

		case 84:
			{
				p.SetState(1233)
				p.SetCharacter()
			}

		case 85:
			{
				p.SetState(1234)
				p.Call()
			}

		case 86:
			{
				p.SetState(1235)
				p.Change()
			}

		case 87:
			{
				p.SetState(1236)
				p.CheckTable()
			}

		case 88:
			{
				p.SetState(1237)
				p.ChecksumTable()
			}

		case 89:
			{
				p.SetState(1238)
				p.Clone()
			}

		case 90:
			{
				p.SetState(1239)
				p.StartSlave()
			}

		case 91:
			{
				p.SetState(1240)
				p.StopSlave()
			}

		case 92:
			{
				p.SetState(1241)
				p.AnalyzeTable()
			}

		case 93:
			{
				p.SetState(1242)
				p.RenameTable()
			}

		case 94:
			{
				p.SetState(1243)
				p.Uninstall()
			}

		case 95:
			{
				p.SetState(1244)
				p.Unlock()
			}

		case 96:
			{
				p.SetState(1245)
				p.Xa()
			}

		case 97:
			{
				p.SetState(1246)
				p.CreateLoadableFunction()
			}

		case 98:
			{
				p.SetState(1247)
				p.CreateTablespace()
			}

		case 99:
			{
				p.SetState(1248)
				p.AlterTablespace()
			}

		case 100:
			{
				p.SetState(1249)
				p.DropTablespace()
			}

		}
		p.SetState(1257)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySQLStatementParserSEMI_:
			{
				p.SetState(1252)
				p.Match(MySQLStatementParserSEMI_)
			}
			p.SetState(1254)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1253)
					p.Match(MySQLStatementParserEOF)
				}

			}

		case MySQLStatementParserEOF:
			{
				p.SetState(1256)
				p.Match(MySQLStatementParserEOF)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case MySQLStatementParserEOF:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1259)
			p.Match(MySQLStatementParserEOF)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IInsertContext is an interface to support dynamic dispatch.
type IInsertContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInsertContext differentiates from other interfaces.
	IsInsertContext()
}

type InsertContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsertContext() *InsertContext {
	var p = new(InsertContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_insert
	return p
}

func (*InsertContext) IsInsertContext() {}

func NewInsertContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InsertContext {
	var p = new(InsertContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_insert

	return p
}

func (s *InsertContext) GetParser() antlr.Parser { return s.parser }

func (s *InsertContext) INSERT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINSERT, 0)
}

func (s *InsertContext) InsertSpecification() IInsertSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsertSpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsertSpecificationContext)
}

func (s *InsertContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *InsertContext) InsertValuesClause() IInsertValuesClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsertValuesClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsertValuesClauseContext)
}

func (s *InsertContext) SetAssignmentsClause() ISetAssignmentsClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetAssignmentsClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetAssignmentsClauseContext)
}

func (s *InsertContext) InsertSelectClause() IInsertSelectClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsertSelectClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsertSelectClauseContext)
}

func (s *InsertContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINTO, 0)
}

func (s *InsertContext) PartitionNames() IPartitionNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionNamesContext)
}

func (s *InsertContext) OnDuplicateKeyClause() IOnDuplicateKeyClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOnDuplicateKeyClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOnDuplicateKeyClauseContext)
}

func (s *InsertContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InsertContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InsertContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterInsert(s)
	}
}

func (s *InsertContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitInsert(s)
	}
}

func (s *InsertContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitInsert(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Insert() (localctx IInsertContext) {
	this := p
	_ = this

	localctx = NewInsertContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, MySQLStatementParserRULE_insert)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1262)
		p.Match(MySQLStatementParserINSERT)
	}
	{
		p.SetState(1263)
		p.InsertSpecification()
	}
	p.SetState(1265)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserINTO {
		{
			p.SetState(1264)
			p.Match(MySQLStatementParserINTO)
		}

	}
	{
		p.SetState(1267)
		p.TableName()
	}
	p.SetState(1269)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserPARTITION {
		{
			p.SetState(1268)
			p.PartitionNames()
		}

	}
	p.SetState(1274)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1271)
			p.InsertValuesClause()
		}

	case 2:
		{
			p.SetState(1272)
			p.SetAssignmentsClause()
		}

	case 3:
		{
			p.SetState(1273)
			p.InsertSelectClause()
		}

	}
	p.SetState(1277)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserON {
		{
			p.SetState(1276)
			p.OnDuplicateKeyClause()
		}

	}

	return localctx
}

// IInsertSpecificationContext is an interface to support dynamic dispatch.
type IInsertSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInsertSpecificationContext differentiates from other interfaces.
	IsInsertSpecificationContext()
}

type InsertSpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsertSpecificationContext() *InsertSpecificationContext {
	var p = new(InsertSpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_insertSpecification
	return p
}

func (*InsertSpecificationContext) IsInsertSpecificationContext() {}

func NewInsertSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InsertSpecificationContext {
	var p = new(InsertSpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_insertSpecification

	return p
}

func (s *InsertSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *InsertSpecificationContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIGNORE, 0)
}

func (s *InsertSpecificationContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOW_PRIORITY, 0)
}

func (s *InsertSpecificationContext) DELAYED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDELAYED, 0)
}

func (s *InsertSpecificationContext) HIGH_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHIGH_PRIORITY, 0)
}

func (s *InsertSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InsertSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InsertSpecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterInsertSpecification(s)
	}
}

func (s *InsertSpecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitInsertSpecification(s)
	}
}

func (s *InsertSpecificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitInsertSpecification(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) InsertSpecification() (localctx IInsertSpecificationContext) {
	this := p
	_ = this

	localctx = NewInsertSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, MySQLStatementParserRULE_insertSpecification)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1280)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserDELAYED || _la == MySQLStatementParserHIGH_PRIORITY || _la == MySQLStatementParserLOW_PRIORITY {
		{
			p.SetState(1279)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserDELAYED || _la == MySQLStatementParserHIGH_PRIORITY || _la == MySQLStatementParserLOW_PRIORITY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(1283)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIGNORE {
		{
			p.SetState(1282)
			p.Match(MySQLStatementParserIGNORE)
		}

	}

	return localctx
}

// IInsertValuesClauseContext is an interface to support dynamic dispatch.
type IInsertValuesClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInsertValuesClauseContext differentiates from other interfaces.
	IsInsertValuesClauseContext()
}

type InsertValuesClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsertValuesClauseContext() *InsertValuesClauseContext {
	var p = new(InsertValuesClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_insertValuesClause
	return p
}

func (*InsertValuesClauseContext) IsInsertValuesClauseContext() {}

func NewInsertValuesClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InsertValuesClauseContext {
	var p = new(InsertValuesClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_insertValuesClause

	return p
}

func (s *InsertValuesClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *InsertValuesClauseContext) VALUES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVALUES, 0)
}

func (s *InsertValuesClauseContext) VALUE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVALUE, 0)
}

func (s *InsertValuesClauseContext) AllAssignmentValues() []IAssignmentValuesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssignmentValuesContext)(nil)).Elem())
	var tst = make([]IAssignmentValuesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssignmentValuesContext)
		}
	}

	return tst
}

func (s *InsertValuesClauseContext) AssignmentValues(i int) IAssignmentValuesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentValuesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssignmentValuesContext)
}

func (s *InsertValuesClauseContext) RowConstructorList() IRowConstructorListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRowConstructorListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRowConstructorListContext)
}

func (s *InsertValuesClauseContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *InsertValuesClauseContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *InsertValuesClauseContext) ValueReference() IValueReferenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueReferenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueReferenceContext)
}

func (s *InsertValuesClauseContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *InsertValuesClauseContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *InsertValuesClauseContext) Fields() IFieldsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldsContext)
}

func (s *InsertValuesClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InsertValuesClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InsertValuesClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterInsertValuesClause(s)
	}
}

func (s *InsertValuesClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitInsertValuesClause(s)
	}
}

func (s *InsertValuesClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitInsertValuesClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) InsertValuesClause() (localctx IInsertValuesClauseContext) {
	this := p
	_ = this

	localctx = NewInsertValuesClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, MySQLStatementParserRULE_insertValuesClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1290)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLP_ {
		{
			p.SetState(1285)
			p.Match(MySQLStatementParserLP_)
		}
		p.SetState(1287)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49))|(1<<(MySQLStatementParserGROUP_CONCAT-49))|(1<<(MySQLStatementParserCAST-49))|(1<<(MySQLStatementParserPOSITION-49))|(1<<(MySQLStatementParserSUBSTRING-49))|(1<<(MySQLStatementParserSUBSTR-49))|(1<<(MySQLStatementParserEXTRACT-49))|(1<<(MySQLStatementParserTRIM-49))|(1<<(MySQLStatementParserLAST_DAY-49))|(1<<(MySQLStatementParserTRADITIONAL-49))|(1<<(MySQLStatementParserTREE-49))|(1<<(MySQLStatementParserMYSQL_ADMIN-49))|(1<<(MySQLStatementParserINSTANT-49))|(1<<(MySQLStatementParserINPLACE-49))|(1<<(MySQLStatementParserCOPY-49))|(1<<(MySQLStatementParserUL_BINARY-49))|(1<<(MySQLStatementParserAUTOCOMMIT-49))|(1<<(MySQLStatementParserINNODB-49))|(1<<(MySQLStatementParserREDO_LOG-49))|(1<<(MySQLStatementParserACCOUNT-49))|(1<<(MySQLStatementParserACTION-49))|(1<<(MySQLStatementParserACTIVE-49))|(1<<(MySQLStatementParserADMIN-49))|(1<<(MySQLStatementParserAFTER-49))|(1<<(MySQLStatementParserAGAINST-49)))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(MySQLStatementParserAGGREGATE-81))|(1<<(MySQLStatementParserALGORITHM-81))|(1<<(MySQLStatementParserALWAYS-81))|(1<<(MySQLStatementParserANY-81))|(1<<(MySQLStatementParserARRAY-81))|(1<<(MySQLStatementParserASCII-81))|(1<<(MySQLStatementParserAT-81))|(1<<(MySQLStatementParserATTRIBUTE-81))|(1<<(MySQLStatementParserAUTOEXTEND_SIZE-81))|(1<<(MySQLStatementParserAUTO_INCREMENT-81))|(1<<(MySQLStatementParserAVG-81))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-81))|(1<<(MySQLStatementParserBACKUP-81))|(1<<(MySQLStatementParserBEGIN-81))|(1<<(MySQLStatementParserBINLOG-81))|(1<<(MySQLStatementParserBIT-81))|(1<<(MySQLStatementParserBLOCK-81))|(1<<(MySQLStatementParserBOOL-81))|(1<<(MySQLStatementParserBOOLEAN-81)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(MySQLStatementParserBTREE-114))|(1<<(MySQLStatementParserBUCKETS-114))|(1<<(MySQLStatementParserBYTE-114))|(1<<(MySQLStatementParserCACHE-114))|(1<<(MySQLStatementParserCASCADED-114))|(1<<(MySQLStatementParserCATALOG_NAME-114))|(1<<(MySQLStatementParserCHAIN-114))|(1<<(MySQLStatementParserCHANGED-114))|(1<<(MySQLStatementParserCHANNEL-114))|(1<<(MySQLStatementParserCHARSET-114))|(1<<(MySQLStatementParserCHECKSUM-114))|(1<<(MySQLStatementParserCIPHER-114))|(1<<(MySQLStatementParserCLASS_ORIGIN-114))|(1<<(MySQLStatementParserCLIENT-114))|(1<<(MySQLStatementParserCLONE-114))|(1<<(MySQLStatementParserCLOSE-114))|(1<<(MySQLStatementParserCOALESCE-114))|(1<<(MySQLStatementParserCODE-114))|(1<<(MySQLStatementParserCOLLATION-114))|(1<<(MySQLStatementParserCOLUMNS-114))|(1<<(MySQLStatementParserCOLUMN_FORMAT-114))|(1<<(MySQLStatementParserCOLUMN_NAME-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(MySQLStatementParserCOMMENT-146))|(1<<(MySQLStatementParserCOMMIT-146))|(1<<(MySQLStatementParserCOMMITTED-146))|(1<<(MySQLStatementParserCOMPACT-146))|(1<<(MySQLStatementParserCOMPLETION-146))|(1<<(MySQLStatementParserCOMPONENT-146))|(1<<(MySQLStatementParserCOMPRESSED-146))|(1<<(MySQLStatementParserCOMPRESSION-146))|(1<<(MySQLStatementParserCONCURRENT-146))|(1<<(MySQLStatementParserCONNECTION-146))|(1<<(MySQLStatementParserCONSISTENT-146))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-146))|(1<<(MySQLStatementParserCONSTRAINT_NAME-146))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-146))|(1<<(MySQLStatementParserCONTAINS-146))|(1<<(MySQLStatementParserCONTEXT-146))|(1<<(MySQLStatementParserCPU-146))|(1<<(MySQLStatementParserCURRENT-146))|(1<<(MySQLStatementParserCURSOR_NAME-146)))) != 0) || (((_la-178)&-(0x1f+1)) == 0 && ((1<<uint((_la-178)))&((1<<(MySQLStatementParserDATA-178))|(1<<(MySQLStatementParserDATAFILE-178))|(1<<(MySQLStatementParserDATE-178))|(1<<(MySQLStatementParserDATETIME-178))|(1<<(MySQLStatementParserDAY-178))|(1<<(MySQLStatementParserDEALLOCATE-178))|(1<<(MySQLStatementParserDEFAULT_AUTH-178))|(1<<(MySQLStatementParserDEFINER-178))|(1<<(MySQLStatementParserDEFINITION-178))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-178))|(1<<(MySQLStatementParserDESCRIPTION-178))|(1<<(MySQLStatementParserDIAGNOSTICS-178))|(1<<(MySQLStatementParserDIRECTORY-178))|(1<<(MySQLStatementParserDISABLE-178))|(1<<(MySQLStatementParserDISCARD-178))|(1<<(MySQLStatementParserDISK-178)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(MySQLStatementParserDO-213))|(1<<(MySQLStatementParserDUMPFILE-213))|(1<<(MySQLStatementParserDUPLICATE-213))|(1<<(MySQLStatementParserDYNAMIC-213))|(1<<(MySQLStatementParserENABLE-213))|(1<<(MySQLStatementParserENCRYPTION-213))|(1<<(MySQLStatementParserEND-213))|(1<<(MySQLStatementParserENDS-213))|(1<<(MySQLStatementParserENFORCED-213))|(1<<(MySQLStatementParserENGINE-213))|(1<<(MySQLStatementParserENGINES-213))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-213))|(1<<(MySQLStatementParserENUM-213))|(1<<(MySQLStatementParserERROR-213))|(1<<(MySQLStatementParserERRORS-213))|(1<<(MySQLStatementParserESCAPE-213))|(1<<(MySQLStatementParserEVENT-213))|(1<<(MySQLStatementParserEVENTS-213))|(1<<(MySQLStatementParserEVERY-213))|(1<<(MySQLStatementParserEXCHANGE-213))|(1<<(MySQLStatementParserEXCLUDE-213))|(1<<(MySQLStatementParserEXECUTE-213)))) != 0) || (((_la-247)&-(0x1f+1)) == 0 && ((1<<uint((_la-247)))&((1<<(MySQLStatementParserEXPANSION-247))|(1<<(MySQLStatementParserEXPIRE-247))|(1<<(MySQLStatementParserEXPORT-247))|(1<<(MySQLStatementParserEXTENDED-247))|(1<<(MySQLStatementParserEXTENT_SIZE-247))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-247))|(1<<(MySQLStatementParserFAST-247))|(1<<(MySQLStatementParserFAULTS-247))|(1<<(MySQLStatementParserFILE-247))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-247))|(1<<(MySQLStatementParserFILTER-247))|(1<<(MySQLStatementParserFIRST-247))|(1<<(MySQLStatementParserFIXED-247))|(1<<(MySQLStatementParserFLUSH-247))|(1<<(MySQLStatementParserFOLLOWING-247))|(1<<(MySQLStatementParserFOLLOWS-247))|(1<<(MySQLStatementParserFORMAT-247))|(1<<(MySQLStatementParserFOUND-247))|(1<<(MySQLStatementParserFULL-247)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(MySQLStatementParserGENERAL-279))|(1<<(MySQLStatementParserGEOMETRY-279))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-279))|(1<<(MySQLStatementParserGET_FORMAT-279))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-279))|(1<<(MySQLStatementParserGLOBAL-279))|(1<<(MySQLStatementParserGRANTS-279))|(1<<(MySQLStatementParserGROUP_REPLICATION-279))|(1<<(MySQLStatementParserHANDLER-279))|(1<<(MySQLStatementParserHASH-279))|(1<<(MySQLStatementParserHELP-279))|(1<<(MySQLStatementParserHISTOGRAM-279))|(1<<(MySQLStatementParserHISTORY-279))|(1<<(MySQLStatementParserHOST-279))|(1<<(MySQLStatementParserHOSTS-279))|(1<<(MySQLStatementParserHOUR-279))|(1<<(MySQLStatementParserIDENTIFIED-279))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-279))|(1<<(MySQLStatementParserIMPORT-279)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySQLStatementParserINACTIVE-312))|(1<<(MySQLStatementParserINDEXES-312))|(1<<(MySQLStatementParserINITIAL_SIZE-312))|(1<<(MySQLStatementParserINSERT_METHOD-312))|(1<<(MySQLStatementParserINSTALL-312))|(1<<(MySQLStatementParserINSTANCE-312))|(1<<(MySQLStatementParserINVISIBLE-312))|(1<<(MySQLStatementParserINVOKER-312))|(1<<(MySQLStatementParserIO-312))|(1<<(MySQLStatementParserIPC-312))|(1<<(MySQLStatementParserISOLATION-312))|(1<<(MySQLStatementParserISSUER-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySQLStatementParserJSON-344))|(1<<(MySQLStatementParserJSON_VALUE-344))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-344))|(1<<(MySQLStatementParserLANGUAGE-344))|(1<<(MySQLStatementParserLAST-344))|(1<<(MySQLStatementParserLAST_VALUE-344))|(1<<(MySQLStatementParserLEAVES-344))|(1<<(MySQLStatementParserLESS-344))|(1<<(MySQLStatementParserLEVEL-344))|(1<<(MySQLStatementParserLINESTRING-344))|(1<<(MySQLStatementParserLIST-344))|(1<<(MySQLStatementParserLOCAL-344))|(1<<(MySQLStatementParserLOCKED-344))|(1<<(MySQLStatementParserLOCKS-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySQLStatementParserLOGFILE-376))|(1<<(MySQLStatementParserLOGS-376))|(1<<(MySQLStatementParserMASTER-376))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-376))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-376))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-376))|(1<<(MySQLStatementParserMASTER_DELAY-376))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-376))|(1<<(MySQLStatementParserMASTER_HOST-376))|(1<<(MySQLStatementParserMASTER_LOG_FILE-376))|(1<<(MySQLStatementParserMASTER_LOG_POS-376))|(1<<(MySQLStatementParserMASTER_PASSWORD-376))|(1<<(MySQLStatementParserMASTER_PORT-376))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-376))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-376))|(1<<(MySQLStatementParserMASTER_SERVER_ID-376))|(1<<(MySQLStatementParserMASTER_SSL-376))|(1<<(MySQLStatementParserMASTER_SSL_CA-376))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_CERT-376))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-376))|(1<<(MySQLStatementParserMASTER_SSL_CRL-376))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_KEY-376))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySQLStatementParserMASTER_TLS_VERSION-408))|(1<<(MySQLStatementParserMASTER_USER-408))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-408))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_ROWS-408))|(1<<(MySQLStatementParserMAX_SIZE-408))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-408))|(1<<(MySQLStatementParserMEDIUM-408))|(1<<(MySQLStatementParserMEMBER-408))|(1<<(MySQLStatementParserMEMORY-408))|(1<<(MySQLStatementParserMERGE-408))|(1<<(MySQLStatementParserMESSAGE_TEXT-408))|(1<<(MySQLStatementParserMICROSECOND-408))|(1<<(MySQLStatementParserMIGRATE-408))|(1<<(MySQLStatementParserMINUTE-408))|(1<<(MySQLStatementParserMIN_ROWS-408))|(1<<(MySQLStatementParserMODE-408))|(1<<(MySQLStatementParserMODIFY-408))|(1<<(MySQLStatementParserMONTH-408))|(1<<(MySQLStatementParserMULTILINESTRING-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySQLStatementParserMULTIPOINT-440))|(1<<(MySQLStatementParserMULTIPOLYGON-440))|(1<<(MySQLStatementParserMUTEX-440))|(1<<(MySQLStatementParserMYSQL_ERRNO-440))|(1<<(MySQLStatementParserNAME-440))|(1<<(MySQLStatementParserNAMES-440))|(1<<(MySQLStatementParserNATIONAL-440))|(1<<(MySQLStatementParserNCHAR-440))|(1<<(MySQLStatementParserNDBCLUSTER-440))|(1<<(MySQLStatementParserNESTED-440))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-440))|(1<<(MySQLStatementParserNEVER-440))|(1<<(MySQLStatementParserNEW-440))|(1<<(MySQLStatementParserNEXT-440))|(1<<(MySQLStatementParserNO-440))|(1<<(MySQLStatementParserNODEGROUP-440))|(1<<(MySQLStatementParserNONE-440))|(1<<(MySQLStatementParserNOWAIT-440))|(1<<(MySQLStatementParserNO_WAIT-440))|(1<<(MySQLStatementParserNULLS-440))|(1<<(MySQLStatementParserNUMBER-440))|(1<<(MySQLStatementParserNVARCHAR-440))|(1<<(MySQLStatementParserOFF-440))|(1<<(MySQLStatementParserOFFSET-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySQLStatementParserOJ-472))|(1<<(MySQLStatementParserOLD-472))|(1<<(MySQLStatementParserONE-472))|(1<<(MySQLStatementParserONLY-472))|(1<<(MySQLStatementParserOPEN-472))|(1<<(MySQLStatementParserOPTIONAL-472))|(1<<(MySQLStatementParserOPTIONS-472))|(1<<(MySQLStatementParserORDINALITY-472))|(1<<(MySQLStatementParserORGANIZATION-472))|(1<<(MySQLStatementParserOTHERS-472))|(1<<(MySQLStatementParserOWNER-472))|(1<<(MySQLStatementParserPACK_KEYS-472))|(1<<(MySQLStatementParserPAGE-472))|(1<<(MySQLStatementParserPARSER-472))|(1<<(MySQLStatementParserPARTIAL-472))|(1<<(MySQLStatementParserPARTITIONING-472))|(1<<(MySQLStatementParserPARTITIONS-472))|(1<<(MySQLStatementParserPASSWORD-472))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-472))|(1<<(MySQLStatementParserPATH-472)))) != 0) || (((_la-505)&-(0x1f+1)) == 0 && ((1<<uint((_la-505)))&((1<<(MySQLStatementParserPERSIST-505))|(1<<(MySQLStatementParserPERSIST_ONLY-505))|(1<<(MySQLStatementParserPHASE-505))|(1<<(MySQLStatementParserPLUGIN-505))|(1<<(MySQLStatementParserPLUGINS-505))|(1<<(MySQLStatementParserPLUGIN_DIR-505))|(1<<(MySQLStatementParserPOINT-505))|(1<<(MySQLStatementParserPOLYGON-505))|(1<<(MySQLStatementParserPORT-505))|(1<<(MySQLStatementParserPRECEDES-505))|(1<<(MySQLStatementParserPRECEDING-505))|(1<<(MySQLStatementParserPREPARE-505))|(1<<(MySQLStatementParserPRESERVE-505))|(1<<(MySQLStatementParserPREV-505))|(1<<(MySQLStatementParserPRIVILEGES-505))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-505))|(1<<(MySQLStatementParserPROCESS-505))|(1<<(MySQLStatementParserPROCESSLIST-505))|(1<<(MySQLStatementParserPROFILE-505))|(1<<(MySQLStatementParserPROFILES-505))|(1<<(MySQLStatementParserPROXY-505))|(1<<(MySQLStatementParserQUARTER-505))|(1<<(MySQLStatementParserQUERY-505))|(1<<(MySQLStatementParserQUICK-505))|(1<<(MySQLStatementParserRANDOM-505)))) != 0) || (((_la-538)&-(0x1f+1)) == 0 && ((1<<uint((_la-538)))&((1<<(MySQLStatementParserREAD_ONLY-538))|(1<<(MySQLStatementParserREBUILD-538))|(1<<(MySQLStatementParserRECOVER-538))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-538))|(1<<(MySQLStatementParserREDUNDANT-538))|(1<<(MySQLStatementParserREFERENCE-538))|(1<<(MySQLStatementParserRELAY-538))|(1<<(MySQLStatementParserRELAYLOG-538))|(1<<(MySQLStatementParserRELAY_LOG_FILE-538))|(1<<(MySQLStatementParserRELAY_LOG_POS-538))|(1<<(MySQLStatementParserRELAY_THREAD-538))|(1<<(MySQLStatementParserRELOAD-538))|(1<<(MySQLStatementParserREMOVE-538))|(1<<(MySQLStatementParserREORGANIZE-538))|(1<<(MySQLStatementParserREPAIR-538))|(1<<(MySQLStatementParserREPEATABLE-538))|(1<<(MySQLStatementParserREPLICATE_DO_DB-538))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-538)))) != 0) || (((_la-570)&-(0x1f+1)) == 0 && ((1<<uint((_la-570)))&((1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-570))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-570))|(1<<(MySQLStatementParserREPLICATION-570))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-570))|(1<<(MySQLStatementParserRESET-570))|(1<<(MySQLStatementParserRESOURCE-570))|(1<<(MySQLStatementParserRESPECT-570))|(1<<(MySQLStatementParserRESTART-570))|(1<<(MySQLStatementParserRESTORE-570))|(1<<(MySQLStatementParserRESUME-570))|(1<<(MySQLStatementParserRETAIN-570))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-570))|(1<<(MySQLStatementParserRETURNING-570))|(1<<(MySQLStatementParserRETURNS-570))|(1<<(MySQLStatementParserREUSE-570))|(1<<(MySQLStatementParserREVERSE-570))|(1<<(MySQLStatementParserROLE-570))|(1<<(MySQLStatementParserROLLBACK-570))|(1<<(MySQLStatementParserROLLUP-570))|(1<<(MySQLStatementParserROTATE-570))|(1<<(MySQLStatementParserROUTINE-570))|(1<<(MySQLStatementParserROW_COUNT-570))|(1<<(MySQLStatementParserROW_FORMAT-570)))) != 0) || (((_la-603)&-(0x1f+1)) == 0 && ((1<<uint((_la-603)))&((1<<(MySQLStatementParserRTREE-603))|(1<<(MySQLStatementParserSAVEPOINT-603))|(1<<(MySQLStatementParserSCHEDULE-603))|(1<<(MySQLStatementParserSCHEMA_NAME-603))|(1<<(MySQLStatementParserSECOND-603))|(1<<(MySQLStatementParserSECONDARY-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-603))|(1<<(MySQLStatementParserSECONDARY_LOAD-603))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-603))|(1<<(MySQLStatementParserSECURITY-603))|(1<<(MySQLStatementParserSERIAL-603))|(1<<(MySQLStatementParserSERIALIZABLE-603))|(1<<(MySQLStatementParserSERVER-603))|(1<<(MySQLStatementParserSESSION-603))|(1<<(MySQLStatementParserSHARE-603))|(1<<(MySQLStatementParserSHUTDOWN-603))|(1<<(MySQLStatementParserSIGNED-603))|(1<<(MySQLStatementParserSIMPLE-603))|(1<<(MySQLStatementParserSLAVE-603))|(1<<(MySQLStatementParserSLOW-603)))) != 0) || (((_la-635)&-(0x1f+1)) == 0 && ((1<<uint((_la-635)))&((1<<(MySQLStatementParserSNAPSHOT-635))|(1<<(MySQLStatementParserSOCKET-635))|(1<<(MySQLStatementParserSONAME-635))|(1<<(MySQLStatementParserSOUNDS-635))|(1<<(MySQLStatementParserSOURCE-635))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-635))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-635))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-635))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-635))|(1<<(MySQLStatementParserSQL_NO_CACHE-635))|(1<<(MySQLStatementParserSQL_THREAD-635))|(1<<(MySQLStatementParserSRID-635))|(1<<(MySQLStatementParserSTACKED-635))|(1<<(MySQLStatementParserSTART-635))|(1<<(MySQLStatementParserSTARTS-635))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-635))|(1<<(MySQLStatementParserSTATS_PERSISTENT-635))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-635))|(1<<(MySQLStatementParserSTATUS-635))|(1<<(MySQLStatementParserSTOP-635))|(1<<(MySQLStatementParserSTORAGE-635)))) != 0) || (((_la-669)&-(0x1f+1)) == 0 && ((1<<uint((_la-669)))&((1<<(MySQLStatementParserSTREAM-669))|(1<<(MySQLStatementParserSTRING-669))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-669))|(1<<(MySQLStatementParserSUBJECT-669))|(1<<(MySQLStatementParserSUBPARTITION-669))|(1<<(MySQLStatementParserSUBPARTITIONS-669))|(1<<(MySQLStatementParserSUPER-669))|(1<<(MySQLStatementParserSUSPEND-669))|(1<<(MySQLStatementParserSWAPS-669))|(1<<(MySQLStatementParserSWITCHES-669))|(1<<(MySQLStatementParserTABLES-669))|(1<<(MySQLStatementParserTABLESPACE-669))|(1<<(MySQLStatementParserTABLE_CHECKSUM-669))|(1<<(MySQLStatementParserTABLE_NAME-669))|(1<<(MySQLStatementParserTEMPORARY-669))|(1<<(MySQLStatementParserTEMPTABLE-669))|(1<<(MySQLStatementParserTEXT-669))|(1<<(MySQLStatementParserTHAN-669))|(1<<(MySQLStatementParserTHREAD_PRIORITY-669))|(1<<(MySQLStatementParserTIES-669))|(1<<(MySQLStatementParserTIME-669))|(1<<(MySQLStatementParserTIMESTAMP-669))|(1<<(MySQLStatementParserTIMESTAMP_ADD-669))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-669))|(1<<(MySQLStatementParserTLS-669)))) != 0) || (((_la-703)&-(0x1f+1)) == 0 && ((1<<uint((_la-703)))&((1<<(MySQLStatementParserTRANSACTION-703))|(1<<(MySQLStatementParserTRIGGERS-703))|(1<<(MySQLStatementParserTRUNCATE-703))|(1<<(MySQLStatementParserTYPE-703))|(1<<(MySQLStatementParserTYPES-703))|(1<<(MySQLStatementParserUNBOUNDED-703))|(1<<(MySQLStatementParserUNCOMMITTED-703))|(1<<(MySQLStatementParserUNDEFINED-703))|(1<<(MySQLStatementParserUNDOFILE-703))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-703))|(1<<(MySQLStatementParserUNICODE-703))|(1<<(MySQLStatementParserUNINSTALL-703))|(1<<(MySQLStatementParserUNKNOWN-703))|(1<<(MySQLStatementParserUNTIL-703))|(1<<(MySQLStatementParserUPGRADE-703))|(1<<(MySQLStatementParserUSER-703))|(1<<(MySQLStatementParserUSER_RESOURCES-703))|(1<<(MySQLStatementParserUSE_FRM-703)))) != 0) || (((_la-735)&-(0x1f+1)) == 0 && ((1<<uint((_la-735)))&((1<<(MySQLStatementParserVALIDATION-735))|(1<<(MySQLStatementParserVALUE-735))|(1<<(MySQLStatementParserVARIABLES-735))|(1<<(MySQLStatementParserVCPU-735))|(1<<(MySQLStatementParserVIEW-735))|(1<<(MySQLStatementParserVISIBLE-735))|(1<<(MySQLStatementParserWAIT-735))|(1<<(MySQLStatementParserWARNINGS-735))|(1<<(MySQLStatementParserWEEK-735))|(1<<(MySQLStatementParserWEIGHT_STRING-735))|(1<<(MySQLStatementParserWITHOUT-735))|(1<<(MySQLStatementParserWORK-735))|(1<<(MySQLStatementParserWRAPPER-735))|(1<<(MySQLStatementParserX509-735))|(1<<(MySQLStatementParserXA-735))|(1<<(MySQLStatementParserXID-735))|(1<<(MySQLStatementParserXML-735))|(1<<(MySQLStatementParserYEAR-735)))) != 0) || _la == MySQLStatementParserIDENTIFIER_ || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
			{
				p.SetState(1286)
				p.Fields()
			}

		}
		{
			p.SetState(1289)
			p.Match(MySQLStatementParserRP_)
		}

	}
	{
		p.SetState(1292)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserVALUE || _la == MySQLStatementParserVALUES) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1302)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserLP_:
		{
			p.SetState(1293)
			p.AssignmentValues()
		}
		p.SetState(1298)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(1294)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(1295)
				p.AssignmentValues()
			}

			p.SetState(1300)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case MySQLStatementParserROW:
		{
			p.SetState(1301)
			p.RowConstructorList()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(1305)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserAS {
		{
			p.SetState(1304)
			p.ValueReference()
		}

	}

	return localctx
}

// IFieldsContext is an interface to support dynamic dispatch.
type IFieldsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFieldsContext differentiates from other interfaces.
	IsFieldsContext()
}

type FieldsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldsContext() *FieldsContext {
	var p = new(FieldsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_fields
	return p
}

func (*FieldsContext) IsFieldsContext() {}

func NewFieldsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldsContext {
	var p = new(FieldsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_fields

	return p
}

func (s *FieldsContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldsContext) AllInsertIdentifier() []IInsertIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInsertIdentifierContext)(nil)).Elem())
	var tst = make([]IInsertIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInsertIdentifierContext)
		}
	}

	return tst
}

func (s *FieldsContext) InsertIdentifier(i int) IInsertIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsertIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInsertIdentifierContext)
}

func (s *FieldsContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *FieldsContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *FieldsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterFields(s)
	}
}

func (s *FieldsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitFields(s)
	}
}

func (s *FieldsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitFields(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Fields() (localctx IFieldsContext) {
	this := p
	_ = this

	localctx = NewFieldsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, MySQLStatementParserRULE_fields)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1307)
		p.InsertIdentifier()
	}
	p.SetState(1312)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(1308)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(1309)
			p.InsertIdentifier()
		}

		p.SetState(1314)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IInsertIdentifierContext is an interface to support dynamic dispatch.
type IInsertIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInsertIdentifierContext differentiates from other interfaces.
	IsInsertIdentifierContext()
}

type InsertIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsertIdentifierContext() *InsertIdentifierContext {
	var p = new(InsertIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_insertIdentifier
	return p
}

func (*InsertIdentifierContext) IsInsertIdentifierContext() {}

func NewInsertIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InsertIdentifierContext {
	var p = new(InsertIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_insertIdentifier

	return p
}

func (s *InsertIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *InsertIdentifierContext) ColumnRef() IColumnRefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnRefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnRefContext)
}

func (s *InsertIdentifierContext) TableWild() ITableWildContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableWildContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableWildContext)
}

func (s *InsertIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InsertIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InsertIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterInsertIdentifier(s)
	}
}

func (s *InsertIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitInsertIdentifier(s)
	}
}

func (s *InsertIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitInsertIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) InsertIdentifier() (localctx IInsertIdentifierContext) {
	this := p
	_ = this

	localctx = NewInsertIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, MySQLStatementParserRULE_insertIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1317)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1315)
			p.ColumnRef()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1316)
			p.TableWild()
		}

	}

	return localctx
}

// ITableWildContext is an interface to support dynamic dispatch.
type ITableWildContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableWildContext differentiates from other interfaces.
	IsTableWildContext()
}

type TableWildContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableWildContext() *TableWildContext {
	var p = new(TableWildContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_tableWild
	return p
}

func (*TableWildContext) IsTableWildContext() {}

func NewTableWildContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableWildContext {
	var p = new(TableWildContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_tableWild

	return p
}

func (s *TableWildContext) GetParser() antlr.Parser { return s.parser }

func (s *TableWildContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *TableWildContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *TableWildContext) AllDOT_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserDOT_)
}

func (s *TableWildContext) DOT_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDOT_, i)
}

func (s *TableWildContext) ASTERISK_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserASTERISK_, 0)
}

func (s *TableWildContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableWildContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableWildContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTableWild(s)
	}
}

func (s *TableWildContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTableWild(s)
	}
}

func (s *TableWildContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTableWild(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TableWild() (localctx ITableWildContext) {
	this := p
	_ = this

	localctx = NewTableWildContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, MySQLStatementParserRULE_tableWild)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1319)
		p.Identifier()
	}
	{
		p.SetState(1320)
		p.Match(MySQLStatementParserDOT_)
	}
	p.SetState(1324)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49))|(1<<(MySQLStatementParserGROUP_CONCAT-49))|(1<<(MySQLStatementParserCAST-49))|(1<<(MySQLStatementParserPOSITION-49))|(1<<(MySQLStatementParserSUBSTRING-49))|(1<<(MySQLStatementParserSUBSTR-49))|(1<<(MySQLStatementParserEXTRACT-49))|(1<<(MySQLStatementParserTRIM-49))|(1<<(MySQLStatementParserLAST_DAY-49))|(1<<(MySQLStatementParserTRADITIONAL-49))|(1<<(MySQLStatementParserTREE-49))|(1<<(MySQLStatementParserMYSQL_ADMIN-49))|(1<<(MySQLStatementParserINSTANT-49))|(1<<(MySQLStatementParserINPLACE-49))|(1<<(MySQLStatementParserCOPY-49))|(1<<(MySQLStatementParserUL_BINARY-49))|(1<<(MySQLStatementParserAUTOCOMMIT-49))|(1<<(MySQLStatementParserINNODB-49))|(1<<(MySQLStatementParserREDO_LOG-49))|(1<<(MySQLStatementParserACCOUNT-49))|(1<<(MySQLStatementParserACTION-49))|(1<<(MySQLStatementParserACTIVE-49))|(1<<(MySQLStatementParserADMIN-49))|(1<<(MySQLStatementParserAFTER-49))|(1<<(MySQLStatementParserAGAINST-49)))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(MySQLStatementParserAGGREGATE-81))|(1<<(MySQLStatementParserALGORITHM-81))|(1<<(MySQLStatementParserALWAYS-81))|(1<<(MySQLStatementParserANY-81))|(1<<(MySQLStatementParserARRAY-81))|(1<<(MySQLStatementParserASCII-81))|(1<<(MySQLStatementParserAT-81))|(1<<(MySQLStatementParserATTRIBUTE-81))|(1<<(MySQLStatementParserAUTOEXTEND_SIZE-81))|(1<<(MySQLStatementParserAUTO_INCREMENT-81))|(1<<(MySQLStatementParserAVG-81))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-81))|(1<<(MySQLStatementParserBACKUP-81))|(1<<(MySQLStatementParserBEGIN-81))|(1<<(MySQLStatementParserBINLOG-81))|(1<<(MySQLStatementParserBIT-81))|(1<<(MySQLStatementParserBLOCK-81))|(1<<(MySQLStatementParserBOOL-81))|(1<<(MySQLStatementParserBOOLEAN-81)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(MySQLStatementParserBTREE-114))|(1<<(MySQLStatementParserBUCKETS-114))|(1<<(MySQLStatementParserBYTE-114))|(1<<(MySQLStatementParserCACHE-114))|(1<<(MySQLStatementParserCASCADED-114))|(1<<(MySQLStatementParserCATALOG_NAME-114))|(1<<(MySQLStatementParserCHAIN-114))|(1<<(MySQLStatementParserCHANGED-114))|(1<<(MySQLStatementParserCHANNEL-114))|(1<<(MySQLStatementParserCHARSET-114))|(1<<(MySQLStatementParserCHECKSUM-114))|(1<<(MySQLStatementParserCIPHER-114))|(1<<(MySQLStatementParserCLASS_ORIGIN-114))|(1<<(MySQLStatementParserCLIENT-114))|(1<<(MySQLStatementParserCLONE-114))|(1<<(MySQLStatementParserCLOSE-114))|(1<<(MySQLStatementParserCOALESCE-114))|(1<<(MySQLStatementParserCODE-114))|(1<<(MySQLStatementParserCOLLATION-114))|(1<<(MySQLStatementParserCOLUMNS-114))|(1<<(MySQLStatementParserCOLUMN_FORMAT-114))|(1<<(MySQLStatementParserCOLUMN_NAME-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(MySQLStatementParserCOMMENT-146))|(1<<(MySQLStatementParserCOMMIT-146))|(1<<(MySQLStatementParserCOMMITTED-146))|(1<<(MySQLStatementParserCOMPACT-146))|(1<<(MySQLStatementParserCOMPLETION-146))|(1<<(MySQLStatementParserCOMPONENT-146))|(1<<(MySQLStatementParserCOMPRESSED-146))|(1<<(MySQLStatementParserCOMPRESSION-146))|(1<<(MySQLStatementParserCONCURRENT-146))|(1<<(MySQLStatementParserCONNECTION-146))|(1<<(MySQLStatementParserCONSISTENT-146))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-146))|(1<<(MySQLStatementParserCONSTRAINT_NAME-146))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-146))|(1<<(MySQLStatementParserCONTAINS-146))|(1<<(MySQLStatementParserCONTEXT-146))|(1<<(MySQLStatementParserCPU-146))|(1<<(MySQLStatementParserCURRENT-146))|(1<<(MySQLStatementParserCURSOR_NAME-146)))) != 0) || (((_la-178)&-(0x1f+1)) == 0 && ((1<<uint((_la-178)))&((1<<(MySQLStatementParserDATA-178))|(1<<(MySQLStatementParserDATAFILE-178))|(1<<(MySQLStatementParserDATE-178))|(1<<(MySQLStatementParserDATETIME-178))|(1<<(MySQLStatementParserDAY-178))|(1<<(MySQLStatementParserDEALLOCATE-178))|(1<<(MySQLStatementParserDEFAULT_AUTH-178))|(1<<(MySQLStatementParserDEFINER-178))|(1<<(MySQLStatementParserDEFINITION-178))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-178))|(1<<(MySQLStatementParserDESCRIPTION-178))|(1<<(MySQLStatementParserDIAGNOSTICS-178))|(1<<(MySQLStatementParserDIRECTORY-178))|(1<<(MySQLStatementParserDISABLE-178))|(1<<(MySQLStatementParserDISCARD-178))|(1<<(MySQLStatementParserDISK-178)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(MySQLStatementParserDO-213))|(1<<(MySQLStatementParserDUMPFILE-213))|(1<<(MySQLStatementParserDUPLICATE-213))|(1<<(MySQLStatementParserDYNAMIC-213))|(1<<(MySQLStatementParserENABLE-213))|(1<<(MySQLStatementParserENCRYPTION-213))|(1<<(MySQLStatementParserEND-213))|(1<<(MySQLStatementParserENDS-213))|(1<<(MySQLStatementParserENFORCED-213))|(1<<(MySQLStatementParserENGINE-213))|(1<<(MySQLStatementParserENGINES-213))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-213))|(1<<(MySQLStatementParserENUM-213))|(1<<(MySQLStatementParserERROR-213))|(1<<(MySQLStatementParserERRORS-213))|(1<<(MySQLStatementParserESCAPE-213))|(1<<(MySQLStatementParserEVENT-213))|(1<<(MySQLStatementParserEVENTS-213))|(1<<(MySQLStatementParserEVERY-213))|(1<<(MySQLStatementParserEXCHANGE-213))|(1<<(MySQLStatementParserEXCLUDE-213))|(1<<(MySQLStatementParserEXECUTE-213)))) != 0) || (((_la-247)&-(0x1f+1)) == 0 && ((1<<uint((_la-247)))&((1<<(MySQLStatementParserEXPANSION-247))|(1<<(MySQLStatementParserEXPIRE-247))|(1<<(MySQLStatementParserEXPORT-247))|(1<<(MySQLStatementParserEXTENDED-247))|(1<<(MySQLStatementParserEXTENT_SIZE-247))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-247))|(1<<(MySQLStatementParserFAST-247))|(1<<(MySQLStatementParserFAULTS-247))|(1<<(MySQLStatementParserFILE-247))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-247))|(1<<(MySQLStatementParserFILTER-247))|(1<<(MySQLStatementParserFIRST-247))|(1<<(MySQLStatementParserFIXED-247))|(1<<(MySQLStatementParserFLUSH-247))|(1<<(MySQLStatementParserFOLLOWING-247))|(1<<(MySQLStatementParserFOLLOWS-247))|(1<<(MySQLStatementParserFORMAT-247))|(1<<(MySQLStatementParserFOUND-247))|(1<<(MySQLStatementParserFULL-247)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(MySQLStatementParserGENERAL-279))|(1<<(MySQLStatementParserGEOMETRY-279))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-279))|(1<<(MySQLStatementParserGET_FORMAT-279))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-279))|(1<<(MySQLStatementParserGLOBAL-279))|(1<<(MySQLStatementParserGRANTS-279))|(1<<(MySQLStatementParserGROUP_REPLICATION-279))|(1<<(MySQLStatementParserHANDLER-279))|(1<<(MySQLStatementParserHASH-279))|(1<<(MySQLStatementParserHELP-279))|(1<<(MySQLStatementParserHISTOGRAM-279))|(1<<(MySQLStatementParserHISTORY-279))|(1<<(MySQLStatementParserHOST-279))|(1<<(MySQLStatementParserHOSTS-279))|(1<<(MySQLStatementParserHOUR-279))|(1<<(MySQLStatementParserIDENTIFIED-279))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-279))|(1<<(MySQLStatementParserIMPORT-279)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySQLStatementParserINACTIVE-312))|(1<<(MySQLStatementParserINDEXES-312))|(1<<(MySQLStatementParserINITIAL_SIZE-312))|(1<<(MySQLStatementParserINSERT_METHOD-312))|(1<<(MySQLStatementParserINSTALL-312))|(1<<(MySQLStatementParserINSTANCE-312))|(1<<(MySQLStatementParserINVISIBLE-312))|(1<<(MySQLStatementParserINVOKER-312))|(1<<(MySQLStatementParserIO-312))|(1<<(MySQLStatementParserIPC-312))|(1<<(MySQLStatementParserISOLATION-312))|(1<<(MySQLStatementParserISSUER-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySQLStatementParserJSON-344))|(1<<(MySQLStatementParserJSON_VALUE-344))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-344))|(1<<(MySQLStatementParserLANGUAGE-344))|(1<<(MySQLStatementParserLAST-344))|(1<<(MySQLStatementParserLAST_VALUE-344))|(1<<(MySQLStatementParserLEAVES-344))|(1<<(MySQLStatementParserLESS-344))|(1<<(MySQLStatementParserLEVEL-344))|(1<<(MySQLStatementParserLINESTRING-344))|(1<<(MySQLStatementParserLIST-344))|(1<<(MySQLStatementParserLOCAL-344))|(1<<(MySQLStatementParserLOCKED-344))|(1<<(MySQLStatementParserLOCKS-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySQLStatementParserLOGFILE-376))|(1<<(MySQLStatementParserLOGS-376))|(1<<(MySQLStatementParserMASTER-376))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-376))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-376))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-376))|(1<<(MySQLStatementParserMASTER_DELAY-376))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-376))|(1<<(MySQLStatementParserMASTER_HOST-376))|(1<<(MySQLStatementParserMASTER_LOG_FILE-376))|(1<<(MySQLStatementParserMASTER_LOG_POS-376))|(1<<(MySQLStatementParserMASTER_PASSWORD-376))|(1<<(MySQLStatementParserMASTER_PORT-376))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-376))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-376))|(1<<(MySQLStatementParserMASTER_SERVER_ID-376))|(1<<(MySQLStatementParserMASTER_SSL-376))|(1<<(MySQLStatementParserMASTER_SSL_CA-376))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_CERT-376))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-376))|(1<<(MySQLStatementParserMASTER_SSL_CRL-376))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_KEY-376))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySQLStatementParserMASTER_TLS_VERSION-408))|(1<<(MySQLStatementParserMASTER_USER-408))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-408))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_ROWS-408))|(1<<(MySQLStatementParserMAX_SIZE-408))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-408))|(1<<(MySQLStatementParserMEDIUM-408))|(1<<(MySQLStatementParserMEMBER-408))|(1<<(MySQLStatementParserMEMORY-408))|(1<<(MySQLStatementParserMERGE-408))|(1<<(MySQLStatementParserMESSAGE_TEXT-408))|(1<<(MySQLStatementParserMICROSECOND-408))|(1<<(MySQLStatementParserMIGRATE-408))|(1<<(MySQLStatementParserMINUTE-408))|(1<<(MySQLStatementParserMIN_ROWS-408))|(1<<(MySQLStatementParserMODE-408))|(1<<(MySQLStatementParserMODIFY-408))|(1<<(MySQLStatementParserMONTH-408))|(1<<(MySQLStatementParserMULTILINESTRING-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySQLStatementParserMULTIPOINT-440))|(1<<(MySQLStatementParserMULTIPOLYGON-440))|(1<<(MySQLStatementParserMUTEX-440))|(1<<(MySQLStatementParserMYSQL_ERRNO-440))|(1<<(MySQLStatementParserNAME-440))|(1<<(MySQLStatementParserNAMES-440))|(1<<(MySQLStatementParserNATIONAL-440))|(1<<(MySQLStatementParserNCHAR-440))|(1<<(MySQLStatementParserNDBCLUSTER-440))|(1<<(MySQLStatementParserNESTED-440))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-440))|(1<<(MySQLStatementParserNEVER-440))|(1<<(MySQLStatementParserNEW-440))|(1<<(MySQLStatementParserNEXT-440))|(1<<(MySQLStatementParserNO-440))|(1<<(MySQLStatementParserNODEGROUP-440))|(1<<(MySQLStatementParserNONE-440))|(1<<(MySQLStatementParserNOWAIT-440))|(1<<(MySQLStatementParserNO_WAIT-440))|(1<<(MySQLStatementParserNULLS-440))|(1<<(MySQLStatementParserNUMBER-440))|(1<<(MySQLStatementParserNVARCHAR-440))|(1<<(MySQLStatementParserOFF-440))|(1<<(MySQLStatementParserOFFSET-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySQLStatementParserOJ-472))|(1<<(MySQLStatementParserOLD-472))|(1<<(MySQLStatementParserONE-472))|(1<<(MySQLStatementParserONLY-472))|(1<<(MySQLStatementParserOPEN-472))|(1<<(MySQLStatementParserOPTIONAL-472))|(1<<(MySQLStatementParserOPTIONS-472))|(1<<(MySQLStatementParserORDINALITY-472))|(1<<(MySQLStatementParserORGANIZATION-472))|(1<<(MySQLStatementParserOTHERS-472))|(1<<(MySQLStatementParserOWNER-472))|(1<<(MySQLStatementParserPACK_KEYS-472))|(1<<(MySQLStatementParserPAGE-472))|(1<<(MySQLStatementParserPARSER-472))|(1<<(MySQLStatementParserPARTIAL-472))|(1<<(MySQLStatementParserPARTITIONING-472))|(1<<(MySQLStatementParserPARTITIONS-472))|(1<<(MySQLStatementParserPASSWORD-472))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-472))|(1<<(MySQLStatementParserPATH-472)))) != 0) || (((_la-505)&-(0x1f+1)) == 0 && ((1<<uint((_la-505)))&((1<<(MySQLStatementParserPERSIST-505))|(1<<(MySQLStatementParserPERSIST_ONLY-505))|(1<<(MySQLStatementParserPHASE-505))|(1<<(MySQLStatementParserPLUGIN-505))|(1<<(MySQLStatementParserPLUGINS-505))|(1<<(MySQLStatementParserPLUGIN_DIR-505))|(1<<(MySQLStatementParserPOINT-505))|(1<<(MySQLStatementParserPOLYGON-505))|(1<<(MySQLStatementParserPORT-505))|(1<<(MySQLStatementParserPRECEDES-505))|(1<<(MySQLStatementParserPRECEDING-505))|(1<<(MySQLStatementParserPREPARE-505))|(1<<(MySQLStatementParserPRESERVE-505))|(1<<(MySQLStatementParserPREV-505))|(1<<(MySQLStatementParserPRIVILEGES-505))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-505))|(1<<(MySQLStatementParserPROCESS-505))|(1<<(MySQLStatementParserPROCESSLIST-505))|(1<<(MySQLStatementParserPROFILE-505))|(1<<(MySQLStatementParserPROFILES-505))|(1<<(MySQLStatementParserPROXY-505))|(1<<(MySQLStatementParserQUARTER-505))|(1<<(MySQLStatementParserQUERY-505))|(1<<(MySQLStatementParserQUICK-505))|(1<<(MySQLStatementParserRANDOM-505)))) != 0) || (((_la-538)&-(0x1f+1)) == 0 && ((1<<uint((_la-538)))&((1<<(MySQLStatementParserREAD_ONLY-538))|(1<<(MySQLStatementParserREBUILD-538))|(1<<(MySQLStatementParserRECOVER-538))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-538))|(1<<(MySQLStatementParserREDUNDANT-538))|(1<<(MySQLStatementParserREFERENCE-538))|(1<<(MySQLStatementParserRELAY-538))|(1<<(MySQLStatementParserRELAYLOG-538))|(1<<(MySQLStatementParserRELAY_LOG_FILE-538))|(1<<(MySQLStatementParserRELAY_LOG_POS-538))|(1<<(MySQLStatementParserRELAY_THREAD-538))|(1<<(MySQLStatementParserRELOAD-538))|(1<<(MySQLStatementParserREMOVE-538))|(1<<(MySQLStatementParserREORGANIZE-538))|(1<<(MySQLStatementParserREPAIR-538))|(1<<(MySQLStatementParserREPEATABLE-538))|(1<<(MySQLStatementParserREPLICATE_DO_DB-538))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-538)))) != 0) || (((_la-570)&-(0x1f+1)) == 0 && ((1<<uint((_la-570)))&((1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-570))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-570))|(1<<(MySQLStatementParserREPLICATION-570))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-570))|(1<<(MySQLStatementParserRESET-570))|(1<<(MySQLStatementParserRESOURCE-570))|(1<<(MySQLStatementParserRESPECT-570))|(1<<(MySQLStatementParserRESTART-570))|(1<<(MySQLStatementParserRESTORE-570))|(1<<(MySQLStatementParserRESUME-570))|(1<<(MySQLStatementParserRETAIN-570))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-570))|(1<<(MySQLStatementParserRETURNING-570))|(1<<(MySQLStatementParserRETURNS-570))|(1<<(MySQLStatementParserREUSE-570))|(1<<(MySQLStatementParserREVERSE-570))|(1<<(MySQLStatementParserROLE-570))|(1<<(MySQLStatementParserROLLBACK-570))|(1<<(MySQLStatementParserROLLUP-570))|(1<<(MySQLStatementParserROTATE-570))|(1<<(MySQLStatementParserROUTINE-570))|(1<<(MySQLStatementParserROW_COUNT-570))|(1<<(MySQLStatementParserROW_FORMAT-570)))) != 0) || (((_la-603)&-(0x1f+1)) == 0 && ((1<<uint((_la-603)))&((1<<(MySQLStatementParserRTREE-603))|(1<<(MySQLStatementParserSAVEPOINT-603))|(1<<(MySQLStatementParserSCHEDULE-603))|(1<<(MySQLStatementParserSCHEMA_NAME-603))|(1<<(MySQLStatementParserSECOND-603))|(1<<(MySQLStatementParserSECONDARY-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-603))|(1<<(MySQLStatementParserSECONDARY_LOAD-603))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-603))|(1<<(MySQLStatementParserSECURITY-603))|(1<<(MySQLStatementParserSERIAL-603))|(1<<(MySQLStatementParserSERIALIZABLE-603))|(1<<(MySQLStatementParserSERVER-603))|(1<<(MySQLStatementParserSESSION-603))|(1<<(MySQLStatementParserSHARE-603))|(1<<(MySQLStatementParserSHUTDOWN-603))|(1<<(MySQLStatementParserSIGNED-603))|(1<<(MySQLStatementParserSIMPLE-603))|(1<<(MySQLStatementParserSLAVE-603))|(1<<(MySQLStatementParserSLOW-603)))) != 0) || (((_la-635)&-(0x1f+1)) == 0 && ((1<<uint((_la-635)))&((1<<(MySQLStatementParserSNAPSHOT-635))|(1<<(MySQLStatementParserSOCKET-635))|(1<<(MySQLStatementParserSONAME-635))|(1<<(MySQLStatementParserSOUNDS-635))|(1<<(MySQLStatementParserSOURCE-635))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-635))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-635))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-635))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-635))|(1<<(MySQLStatementParserSQL_NO_CACHE-635))|(1<<(MySQLStatementParserSQL_THREAD-635))|(1<<(MySQLStatementParserSRID-635))|(1<<(MySQLStatementParserSTACKED-635))|(1<<(MySQLStatementParserSTART-635))|(1<<(MySQLStatementParserSTARTS-635))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-635))|(1<<(MySQLStatementParserSTATS_PERSISTENT-635))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-635))|(1<<(MySQLStatementParserSTATUS-635))|(1<<(MySQLStatementParserSTOP-635))|(1<<(MySQLStatementParserSTORAGE-635)))) != 0) || (((_la-669)&-(0x1f+1)) == 0 && ((1<<uint((_la-669)))&((1<<(MySQLStatementParserSTREAM-669))|(1<<(MySQLStatementParserSTRING-669))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-669))|(1<<(MySQLStatementParserSUBJECT-669))|(1<<(MySQLStatementParserSUBPARTITION-669))|(1<<(MySQLStatementParserSUBPARTITIONS-669))|(1<<(MySQLStatementParserSUPER-669))|(1<<(MySQLStatementParserSUSPEND-669))|(1<<(MySQLStatementParserSWAPS-669))|(1<<(MySQLStatementParserSWITCHES-669))|(1<<(MySQLStatementParserTABLES-669))|(1<<(MySQLStatementParserTABLESPACE-669))|(1<<(MySQLStatementParserTABLE_CHECKSUM-669))|(1<<(MySQLStatementParserTABLE_NAME-669))|(1<<(MySQLStatementParserTEMPORARY-669))|(1<<(MySQLStatementParserTEMPTABLE-669))|(1<<(MySQLStatementParserTEXT-669))|(1<<(MySQLStatementParserTHAN-669))|(1<<(MySQLStatementParserTHREAD_PRIORITY-669))|(1<<(MySQLStatementParserTIES-669))|(1<<(MySQLStatementParserTIME-669))|(1<<(MySQLStatementParserTIMESTAMP-669))|(1<<(MySQLStatementParserTIMESTAMP_ADD-669))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-669))|(1<<(MySQLStatementParserTLS-669)))) != 0) || (((_la-703)&-(0x1f+1)) == 0 && ((1<<uint((_la-703)))&((1<<(MySQLStatementParserTRANSACTION-703))|(1<<(MySQLStatementParserTRIGGERS-703))|(1<<(MySQLStatementParserTRUNCATE-703))|(1<<(MySQLStatementParserTYPE-703))|(1<<(MySQLStatementParserTYPES-703))|(1<<(MySQLStatementParserUNBOUNDED-703))|(1<<(MySQLStatementParserUNCOMMITTED-703))|(1<<(MySQLStatementParserUNDEFINED-703))|(1<<(MySQLStatementParserUNDOFILE-703))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-703))|(1<<(MySQLStatementParserUNICODE-703))|(1<<(MySQLStatementParserUNINSTALL-703))|(1<<(MySQLStatementParserUNKNOWN-703))|(1<<(MySQLStatementParserUNTIL-703))|(1<<(MySQLStatementParserUPGRADE-703))|(1<<(MySQLStatementParserUSER-703))|(1<<(MySQLStatementParserUSER_RESOURCES-703))|(1<<(MySQLStatementParserUSE_FRM-703)))) != 0) || (((_la-735)&-(0x1f+1)) == 0 && ((1<<uint((_la-735)))&((1<<(MySQLStatementParserVALIDATION-735))|(1<<(MySQLStatementParserVALUE-735))|(1<<(MySQLStatementParserVARIABLES-735))|(1<<(MySQLStatementParserVCPU-735))|(1<<(MySQLStatementParserVIEW-735))|(1<<(MySQLStatementParserVISIBLE-735))|(1<<(MySQLStatementParserWAIT-735))|(1<<(MySQLStatementParserWARNINGS-735))|(1<<(MySQLStatementParserWEEK-735))|(1<<(MySQLStatementParserWEIGHT_STRING-735))|(1<<(MySQLStatementParserWITHOUT-735))|(1<<(MySQLStatementParserWORK-735))|(1<<(MySQLStatementParserWRAPPER-735))|(1<<(MySQLStatementParserX509-735))|(1<<(MySQLStatementParserXA-735))|(1<<(MySQLStatementParserXID-735))|(1<<(MySQLStatementParserXML-735))|(1<<(MySQLStatementParserYEAR-735)))) != 0) || _la == MySQLStatementParserIDENTIFIER_ || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
		{
			p.SetState(1321)
			p.Identifier()
		}
		{
			p.SetState(1322)
			p.Match(MySQLStatementParserDOT_)
		}

	}
	{
		p.SetState(1326)
		p.Match(MySQLStatementParserASTERISK_)
	}

	return localctx
}

// IInsertSelectClauseContext is an interface to support dynamic dispatch.
type IInsertSelectClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInsertSelectClauseContext differentiates from other interfaces.
	IsInsertSelectClauseContext()
}

type InsertSelectClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsertSelectClauseContext() *InsertSelectClauseContext {
	var p = new(InsertSelectClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_insertSelectClause
	return p
}

func (*InsertSelectClauseContext) IsInsertSelectClauseContext() {}

func NewInsertSelectClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InsertSelectClauseContext {
	var p = new(InsertSelectClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_insertSelectClause

	return p
}

func (s *InsertSelectClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *InsertSelectClauseContext) Select() ISelectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectContext)
}

func (s *InsertSelectClauseContext) ValueReference() IValueReferenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueReferenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueReferenceContext)
}

func (s *InsertSelectClauseContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *InsertSelectClauseContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *InsertSelectClauseContext) Fields() IFieldsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldsContext)
}

func (s *InsertSelectClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InsertSelectClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InsertSelectClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterInsertSelectClause(s)
	}
}

func (s *InsertSelectClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitInsertSelectClause(s)
	}
}

func (s *InsertSelectClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitInsertSelectClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) InsertSelectClause() (localctx IInsertSelectClauseContext) {
	this := p
	_ = this

	localctx = NewInsertSelectClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, MySQLStatementParserRULE_insertSelectClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1329)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserAS {
		{
			p.SetState(1328)
			p.ValueReference()
		}

	}
	p.SetState(1336)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 20, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1331)
			p.Match(MySQLStatementParserLP_)
		}
		p.SetState(1333)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49))|(1<<(MySQLStatementParserGROUP_CONCAT-49))|(1<<(MySQLStatementParserCAST-49))|(1<<(MySQLStatementParserPOSITION-49))|(1<<(MySQLStatementParserSUBSTRING-49))|(1<<(MySQLStatementParserSUBSTR-49))|(1<<(MySQLStatementParserEXTRACT-49))|(1<<(MySQLStatementParserTRIM-49))|(1<<(MySQLStatementParserLAST_DAY-49))|(1<<(MySQLStatementParserTRADITIONAL-49))|(1<<(MySQLStatementParserTREE-49))|(1<<(MySQLStatementParserMYSQL_ADMIN-49))|(1<<(MySQLStatementParserINSTANT-49))|(1<<(MySQLStatementParserINPLACE-49))|(1<<(MySQLStatementParserCOPY-49))|(1<<(MySQLStatementParserUL_BINARY-49))|(1<<(MySQLStatementParserAUTOCOMMIT-49))|(1<<(MySQLStatementParserINNODB-49))|(1<<(MySQLStatementParserREDO_LOG-49))|(1<<(MySQLStatementParserACCOUNT-49))|(1<<(MySQLStatementParserACTION-49))|(1<<(MySQLStatementParserACTIVE-49))|(1<<(MySQLStatementParserADMIN-49))|(1<<(MySQLStatementParserAFTER-49))|(1<<(MySQLStatementParserAGAINST-49)))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(MySQLStatementParserAGGREGATE-81))|(1<<(MySQLStatementParserALGORITHM-81))|(1<<(MySQLStatementParserALWAYS-81))|(1<<(MySQLStatementParserANY-81))|(1<<(MySQLStatementParserARRAY-81))|(1<<(MySQLStatementParserASCII-81))|(1<<(MySQLStatementParserAT-81))|(1<<(MySQLStatementParserATTRIBUTE-81))|(1<<(MySQLStatementParserAUTOEXTEND_SIZE-81))|(1<<(MySQLStatementParserAUTO_INCREMENT-81))|(1<<(MySQLStatementParserAVG-81))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-81))|(1<<(MySQLStatementParserBACKUP-81))|(1<<(MySQLStatementParserBEGIN-81))|(1<<(MySQLStatementParserBINLOG-81))|(1<<(MySQLStatementParserBIT-81))|(1<<(MySQLStatementParserBLOCK-81))|(1<<(MySQLStatementParserBOOL-81))|(1<<(MySQLStatementParserBOOLEAN-81)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(MySQLStatementParserBTREE-114))|(1<<(MySQLStatementParserBUCKETS-114))|(1<<(MySQLStatementParserBYTE-114))|(1<<(MySQLStatementParserCACHE-114))|(1<<(MySQLStatementParserCASCADED-114))|(1<<(MySQLStatementParserCATALOG_NAME-114))|(1<<(MySQLStatementParserCHAIN-114))|(1<<(MySQLStatementParserCHANGED-114))|(1<<(MySQLStatementParserCHANNEL-114))|(1<<(MySQLStatementParserCHARSET-114))|(1<<(MySQLStatementParserCHECKSUM-114))|(1<<(MySQLStatementParserCIPHER-114))|(1<<(MySQLStatementParserCLASS_ORIGIN-114))|(1<<(MySQLStatementParserCLIENT-114))|(1<<(MySQLStatementParserCLONE-114))|(1<<(MySQLStatementParserCLOSE-114))|(1<<(MySQLStatementParserCOALESCE-114))|(1<<(MySQLStatementParserCODE-114))|(1<<(MySQLStatementParserCOLLATION-114))|(1<<(MySQLStatementParserCOLUMNS-114))|(1<<(MySQLStatementParserCOLUMN_FORMAT-114))|(1<<(MySQLStatementParserCOLUMN_NAME-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(MySQLStatementParserCOMMENT-146))|(1<<(MySQLStatementParserCOMMIT-146))|(1<<(MySQLStatementParserCOMMITTED-146))|(1<<(MySQLStatementParserCOMPACT-146))|(1<<(MySQLStatementParserCOMPLETION-146))|(1<<(MySQLStatementParserCOMPONENT-146))|(1<<(MySQLStatementParserCOMPRESSED-146))|(1<<(MySQLStatementParserCOMPRESSION-146))|(1<<(MySQLStatementParserCONCURRENT-146))|(1<<(MySQLStatementParserCONNECTION-146))|(1<<(MySQLStatementParserCONSISTENT-146))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-146))|(1<<(MySQLStatementParserCONSTRAINT_NAME-146))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-146))|(1<<(MySQLStatementParserCONTAINS-146))|(1<<(MySQLStatementParserCONTEXT-146))|(1<<(MySQLStatementParserCPU-146))|(1<<(MySQLStatementParserCURRENT-146))|(1<<(MySQLStatementParserCURSOR_NAME-146)))) != 0) || (((_la-178)&-(0x1f+1)) == 0 && ((1<<uint((_la-178)))&((1<<(MySQLStatementParserDATA-178))|(1<<(MySQLStatementParserDATAFILE-178))|(1<<(MySQLStatementParserDATE-178))|(1<<(MySQLStatementParserDATETIME-178))|(1<<(MySQLStatementParserDAY-178))|(1<<(MySQLStatementParserDEALLOCATE-178))|(1<<(MySQLStatementParserDEFAULT_AUTH-178))|(1<<(MySQLStatementParserDEFINER-178))|(1<<(MySQLStatementParserDEFINITION-178))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-178))|(1<<(MySQLStatementParserDESCRIPTION-178))|(1<<(MySQLStatementParserDIAGNOSTICS-178))|(1<<(MySQLStatementParserDIRECTORY-178))|(1<<(MySQLStatementParserDISABLE-178))|(1<<(MySQLStatementParserDISCARD-178))|(1<<(MySQLStatementParserDISK-178)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(MySQLStatementParserDO-213))|(1<<(MySQLStatementParserDUMPFILE-213))|(1<<(MySQLStatementParserDUPLICATE-213))|(1<<(MySQLStatementParserDYNAMIC-213))|(1<<(MySQLStatementParserENABLE-213))|(1<<(MySQLStatementParserENCRYPTION-213))|(1<<(MySQLStatementParserEND-213))|(1<<(MySQLStatementParserENDS-213))|(1<<(MySQLStatementParserENFORCED-213))|(1<<(MySQLStatementParserENGINE-213))|(1<<(MySQLStatementParserENGINES-213))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-213))|(1<<(MySQLStatementParserENUM-213))|(1<<(MySQLStatementParserERROR-213))|(1<<(MySQLStatementParserERRORS-213))|(1<<(MySQLStatementParserESCAPE-213))|(1<<(MySQLStatementParserEVENT-213))|(1<<(MySQLStatementParserEVENTS-213))|(1<<(MySQLStatementParserEVERY-213))|(1<<(MySQLStatementParserEXCHANGE-213))|(1<<(MySQLStatementParserEXCLUDE-213))|(1<<(MySQLStatementParserEXECUTE-213)))) != 0) || (((_la-247)&-(0x1f+1)) == 0 && ((1<<uint((_la-247)))&((1<<(MySQLStatementParserEXPANSION-247))|(1<<(MySQLStatementParserEXPIRE-247))|(1<<(MySQLStatementParserEXPORT-247))|(1<<(MySQLStatementParserEXTENDED-247))|(1<<(MySQLStatementParserEXTENT_SIZE-247))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-247))|(1<<(MySQLStatementParserFAST-247))|(1<<(MySQLStatementParserFAULTS-247))|(1<<(MySQLStatementParserFILE-247))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-247))|(1<<(MySQLStatementParserFILTER-247))|(1<<(MySQLStatementParserFIRST-247))|(1<<(MySQLStatementParserFIXED-247))|(1<<(MySQLStatementParserFLUSH-247))|(1<<(MySQLStatementParserFOLLOWING-247))|(1<<(MySQLStatementParserFOLLOWS-247))|(1<<(MySQLStatementParserFORMAT-247))|(1<<(MySQLStatementParserFOUND-247))|(1<<(MySQLStatementParserFULL-247)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(MySQLStatementParserGENERAL-279))|(1<<(MySQLStatementParserGEOMETRY-279))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-279))|(1<<(MySQLStatementParserGET_FORMAT-279))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-279))|(1<<(MySQLStatementParserGLOBAL-279))|(1<<(MySQLStatementParserGRANTS-279))|(1<<(MySQLStatementParserGROUP_REPLICATION-279))|(1<<(MySQLStatementParserHANDLER-279))|(1<<(MySQLStatementParserHASH-279))|(1<<(MySQLStatementParserHELP-279))|(1<<(MySQLStatementParserHISTOGRAM-279))|(1<<(MySQLStatementParserHISTORY-279))|(1<<(MySQLStatementParserHOST-279))|(1<<(MySQLStatementParserHOSTS-279))|(1<<(MySQLStatementParserHOUR-279))|(1<<(MySQLStatementParserIDENTIFIED-279))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-279))|(1<<(MySQLStatementParserIMPORT-279)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySQLStatementParserINACTIVE-312))|(1<<(MySQLStatementParserINDEXES-312))|(1<<(MySQLStatementParserINITIAL_SIZE-312))|(1<<(MySQLStatementParserINSERT_METHOD-312))|(1<<(MySQLStatementParserINSTALL-312))|(1<<(MySQLStatementParserINSTANCE-312))|(1<<(MySQLStatementParserINVISIBLE-312))|(1<<(MySQLStatementParserINVOKER-312))|(1<<(MySQLStatementParserIO-312))|(1<<(MySQLStatementParserIPC-312))|(1<<(MySQLStatementParserISOLATION-312))|(1<<(MySQLStatementParserISSUER-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySQLStatementParserJSON-344))|(1<<(MySQLStatementParserJSON_VALUE-344))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-344))|(1<<(MySQLStatementParserLANGUAGE-344))|(1<<(MySQLStatementParserLAST-344))|(1<<(MySQLStatementParserLAST_VALUE-344))|(1<<(MySQLStatementParserLEAVES-344))|(1<<(MySQLStatementParserLESS-344))|(1<<(MySQLStatementParserLEVEL-344))|(1<<(MySQLStatementParserLINESTRING-344))|(1<<(MySQLStatementParserLIST-344))|(1<<(MySQLStatementParserLOCAL-344))|(1<<(MySQLStatementParserLOCKED-344))|(1<<(MySQLStatementParserLOCKS-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySQLStatementParserLOGFILE-376))|(1<<(MySQLStatementParserLOGS-376))|(1<<(MySQLStatementParserMASTER-376))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-376))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-376))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-376))|(1<<(MySQLStatementParserMASTER_DELAY-376))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-376))|(1<<(MySQLStatementParserMASTER_HOST-376))|(1<<(MySQLStatementParserMASTER_LOG_FILE-376))|(1<<(MySQLStatementParserMASTER_LOG_POS-376))|(1<<(MySQLStatementParserMASTER_PASSWORD-376))|(1<<(MySQLStatementParserMASTER_PORT-376))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-376))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-376))|(1<<(MySQLStatementParserMASTER_SERVER_ID-376))|(1<<(MySQLStatementParserMASTER_SSL-376))|(1<<(MySQLStatementParserMASTER_SSL_CA-376))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_CERT-376))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-376))|(1<<(MySQLStatementParserMASTER_SSL_CRL-376))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_KEY-376))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySQLStatementParserMASTER_TLS_VERSION-408))|(1<<(MySQLStatementParserMASTER_USER-408))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-408))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_ROWS-408))|(1<<(MySQLStatementParserMAX_SIZE-408))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-408))|(1<<(MySQLStatementParserMEDIUM-408))|(1<<(MySQLStatementParserMEMBER-408))|(1<<(MySQLStatementParserMEMORY-408))|(1<<(MySQLStatementParserMERGE-408))|(1<<(MySQLStatementParserMESSAGE_TEXT-408))|(1<<(MySQLStatementParserMICROSECOND-408))|(1<<(MySQLStatementParserMIGRATE-408))|(1<<(MySQLStatementParserMINUTE-408))|(1<<(MySQLStatementParserMIN_ROWS-408))|(1<<(MySQLStatementParserMODE-408))|(1<<(MySQLStatementParserMODIFY-408))|(1<<(MySQLStatementParserMONTH-408))|(1<<(MySQLStatementParserMULTILINESTRING-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySQLStatementParserMULTIPOINT-440))|(1<<(MySQLStatementParserMULTIPOLYGON-440))|(1<<(MySQLStatementParserMUTEX-440))|(1<<(MySQLStatementParserMYSQL_ERRNO-440))|(1<<(MySQLStatementParserNAME-440))|(1<<(MySQLStatementParserNAMES-440))|(1<<(MySQLStatementParserNATIONAL-440))|(1<<(MySQLStatementParserNCHAR-440))|(1<<(MySQLStatementParserNDBCLUSTER-440))|(1<<(MySQLStatementParserNESTED-440))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-440))|(1<<(MySQLStatementParserNEVER-440))|(1<<(MySQLStatementParserNEW-440))|(1<<(MySQLStatementParserNEXT-440))|(1<<(MySQLStatementParserNO-440))|(1<<(MySQLStatementParserNODEGROUP-440))|(1<<(MySQLStatementParserNONE-440))|(1<<(MySQLStatementParserNOWAIT-440))|(1<<(MySQLStatementParserNO_WAIT-440))|(1<<(MySQLStatementParserNULLS-440))|(1<<(MySQLStatementParserNUMBER-440))|(1<<(MySQLStatementParserNVARCHAR-440))|(1<<(MySQLStatementParserOFF-440))|(1<<(MySQLStatementParserOFFSET-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySQLStatementParserOJ-472))|(1<<(MySQLStatementParserOLD-472))|(1<<(MySQLStatementParserONE-472))|(1<<(MySQLStatementParserONLY-472))|(1<<(MySQLStatementParserOPEN-472))|(1<<(MySQLStatementParserOPTIONAL-472))|(1<<(MySQLStatementParserOPTIONS-472))|(1<<(MySQLStatementParserORDINALITY-472))|(1<<(MySQLStatementParserORGANIZATION-472))|(1<<(MySQLStatementParserOTHERS-472))|(1<<(MySQLStatementParserOWNER-472))|(1<<(MySQLStatementParserPACK_KEYS-472))|(1<<(MySQLStatementParserPAGE-472))|(1<<(MySQLStatementParserPARSER-472))|(1<<(MySQLStatementParserPARTIAL-472))|(1<<(MySQLStatementParserPARTITIONING-472))|(1<<(MySQLStatementParserPARTITIONS-472))|(1<<(MySQLStatementParserPASSWORD-472))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-472))|(1<<(MySQLStatementParserPATH-472)))) != 0) || (((_la-505)&-(0x1f+1)) == 0 && ((1<<uint((_la-505)))&((1<<(MySQLStatementParserPERSIST-505))|(1<<(MySQLStatementParserPERSIST_ONLY-505))|(1<<(MySQLStatementParserPHASE-505))|(1<<(MySQLStatementParserPLUGIN-505))|(1<<(MySQLStatementParserPLUGINS-505))|(1<<(MySQLStatementParserPLUGIN_DIR-505))|(1<<(MySQLStatementParserPOINT-505))|(1<<(MySQLStatementParserPOLYGON-505))|(1<<(MySQLStatementParserPORT-505))|(1<<(MySQLStatementParserPRECEDES-505))|(1<<(MySQLStatementParserPRECEDING-505))|(1<<(MySQLStatementParserPREPARE-505))|(1<<(MySQLStatementParserPRESERVE-505))|(1<<(MySQLStatementParserPREV-505))|(1<<(MySQLStatementParserPRIVILEGES-505))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-505))|(1<<(MySQLStatementParserPROCESS-505))|(1<<(MySQLStatementParserPROCESSLIST-505))|(1<<(MySQLStatementParserPROFILE-505))|(1<<(MySQLStatementParserPROFILES-505))|(1<<(MySQLStatementParserPROXY-505))|(1<<(MySQLStatementParserQUARTER-505))|(1<<(MySQLStatementParserQUERY-505))|(1<<(MySQLStatementParserQUICK-505))|(1<<(MySQLStatementParserRANDOM-505)))) != 0) || (((_la-538)&-(0x1f+1)) == 0 && ((1<<uint((_la-538)))&((1<<(MySQLStatementParserREAD_ONLY-538))|(1<<(MySQLStatementParserREBUILD-538))|(1<<(MySQLStatementParserRECOVER-538))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-538))|(1<<(MySQLStatementParserREDUNDANT-538))|(1<<(MySQLStatementParserREFERENCE-538))|(1<<(MySQLStatementParserRELAY-538))|(1<<(MySQLStatementParserRELAYLOG-538))|(1<<(MySQLStatementParserRELAY_LOG_FILE-538))|(1<<(MySQLStatementParserRELAY_LOG_POS-538))|(1<<(MySQLStatementParserRELAY_THREAD-538))|(1<<(MySQLStatementParserRELOAD-538))|(1<<(MySQLStatementParserREMOVE-538))|(1<<(MySQLStatementParserREORGANIZE-538))|(1<<(MySQLStatementParserREPAIR-538))|(1<<(MySQLStatementParserREPEATABLE-538))|(1<<(MySQLStatementParserREPLICATE_DO_DB-538))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-538)))) != 0) || (((_la-570)&-(0x1f+1)) == 0 && ((1<<uint((_la-570)))&((1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-570))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-570))|(1<<(MySQLStatementParserREPLICATION-570))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-570))|(1<<(MySQLStatementParserRESET-570))|(1<<(MySQLStatementParserRESOURCE-570))|(1<<(MySQLStatementParserRESPECT-570))|(1<<(MySQLStatementParserRESTART-570))|(1<<(MySQLStatementParserRESTORE-570))|(1<<(MySQLStatementParserRESUME-570))|(1<<(MySQLStatementParserRETAIN-570))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-570))|(1<<(MySQLStatementParserRETURNING-570))|(1<<(MySQLStatementParserRETURNS-570))|(1<<(MySQLStatementParserREUSE-570))|(1<<(MySQLStatementParserREVERSE-570))|(1<<(MySQLStatementParserROLE-570))|(1<<(MySQLStatementParserROLLBACK-570))|(1<<(MySQLStatementParserROLLUP-570))|(1<<(MySQLStatementParserROTATE-570))|(1<<(MySQLStatementParserROUTINE-570))|(1<<(MySQLStatementParserROW_COUNT-570))|(1<<(MySQLStatementParserROW_FORMAT-570)))) != 0) || (((_la-603)&-(0x1f+1)) == 0 && ((1<<uint((_la-603)))&((1<<(MySQLStatementParserRTREE-603))|(1<<(MySQLStatementParserSAVEPOINT-603))|(1<<(MySQLStatementParserSCHEDULE-603))|(1<<(MySQLStatementParserSCHEMA_NAME-603))|(1<<(MySQLStatementParserSECOND-603))|(1<<(MySQLStatementParserSECONDARY-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-603))|(1<<(MySQLStatementParserSECONDARY_LOAD-603))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-603))|(1<<(MySQLStatementParserSECURITY-603))|(1<<(MySQLStatementParserSERIAL-603))|(1<<(MySQLStatementParserSERIALIZABLE-603))|(1<<(MySQLStatementParserSERVER-603))|(1<<(MySQLStatementParserSESSION-603))|(1<<(MySQLStatementParserSHARE-603))|(1<<(MySQLStatementParserSHUTDOWN-603))|(1<<(MySQLStatementParserSIGNED-603))|(1<<(MySQLStatementParserSIMPLE-603))|(1<<(MySQLStatementParserSLAVE-603))|(1<<(MySQLStatementParserSLOW-603)))) != 0) || (((_la-635)&-(0x1f+1)) == 0 && ((1<<uint((_la-635)))&((1<<(MySQLStatementParserSNAPSHOT-635))|(1<<(MySQLStatementParserSOCKET-635))|(1<<(MySQLStatementParserSONAME-635))|(1<<(MySQLStatementParserSOUNDS-635))|(1<<(MySQLStatementParserSOURCE-635))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-635))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-635))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-635))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-635))|(1<<(MySQLStatementParserSQL_NO_CACHE-635))|(1<<(MySQLStatementParserSQL_THREAD-635))|(1<<(MySQLStatementParserSRID-635))|(1<<(MySQLStatementParserSTACKED-635))|(1<<(MySQLStatementParserSTART-635))|(1<<(MySQLStatementParserSTARTS-635))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-635))|(1<<(MySQLStatementParserSTATS_PERSISTENT-635))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-635))|(1<<(MySQLStatementParserSTATUS-635))|(1<<(MySQLStatementParserSTOP-635))|(1<<(MySQLStatementParserSTORAGE-635)))) != 0) || (((_la-669)&-(0x1f+1)) == 0 && ((1<<uint((_la-669)))&((1<<(MySQLStatementParserSTREAM-669))|(1<<(MySQLStatementParserSTRING-669))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-669))|(1<<(MySQLStatementParserSUBJECT-669))|(1<<(MySQLStatementParserSUBPARTITION-669))|(1<<(MySQLStatementParserSUBPARTITIONS-669))|(1<<(MySQLStatementParserSUPER-669))|(1<<(MySQLStatementParserSUSPEND-669))|(1<<(MySQLStatementParserSWAPS-669))|(1<<(MySQLStatementParserSWITCHES-669))|(1<<(MySQLStatementParserTABLES-669))|(1<<(MySQLStatementParserTABLESPACE-669))|(1<<(MySQLStatementParserTABLE_CHECKSUM-669))|(1<<(MySQLStatementParserTABLE_NAME-669))|(1<<(MySQLStatementParserTEMPORARY-669))|(1<<(MySQLStatementParserTEMPTABLE-669))|(1<<(MySQLStatementParserTEXT-669))|(1<<(MySQLStatementParserTHAN-669))|(1<<(MySQLStatementParserTHREAD_PRIORITY-669))|(1<<(MySQLStatementParserTIES-669))|(1<<(MySQLStatementParserTIME-669))|(1<<(MySQLStatementParserTIMESTAMP-669))|(1<<(MySQLStatementParserTIMESTAMP_ADD-669))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-669))|(1<<(MySQLStatementParserTLS-669)))) != 0) || (((_la-703)&-(0x1f+1)) == 0 && ((1<<uint((_la-703)))&((1<<(MySQLStatementParserTRANSACTION-703))|(1<<(MySQLStatementParserTRIGGERS-703))|(1<<(MySQLStatementParserTRUNCATE-703))|(1<<(MySQLStatementParserTYPE-703))|(1<<(MySQLStatementParserTYPES-703))|(1<<(MySQLStatementParserUNBOUNDED-703))|(1<<(MySQLStatementParserUNCOMMITTED-703))|(1<<(MySQLStatementParserUNDEFINED-703))|(1<<(MySQLStatementParserUNDOFILE-703))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-703))|(1<<(MySQLStatementParserUNICODE-703))|(1<<(MySQLStatementParserUNINSTALL-703))|(1<<(MySQLStatementParserUNKNOWN-703))|(1<<(MySQLStatementParserUNTIL-703))|(1<<(MySQLStatementParserUPGRADE-703))|(1<<(MySQLStatementParserUSER-703))|(1<<(MySQLStatementParserUSER_RESOURCES-703))|(1<<(MySQLStatementParserUSE_FRM-703)))) != 0) || (((_la-735)&-(0x1f+1)) == 0 && ((1<<uint((_la-735)))&((1<<(MySQLStatementParserVALIDATION-735))|(1<<(MySQLStatementParserVALUE-735))|(1<<(MySQLStatementParserVARIABLES-735))|(1<<(MySQLStatementParserVCPU-735))|(1<<(MySQLStatementParserVIEW-735))|(1<<(MySQLStatementParserVISIBLE-735))|(1<<(MySQLStatementParserWAIT-735))|(1<<(MySQLStatementParserWARNINGS-735))|(1<<(MySQLStatementParserWEEK-735))|(1<<(MySQLStatementParserWEIGHT_STRING-735))|(1<<(MySQLStatementParserWITHOUT-735))|(1<<(MySQLStatementParserWORK-735))|(1<<(MySQLStatementParserWRAPPER-735))|(1<<(MySQLStatementParserX509-735))|(1<<(MySQLStatementParserXA-735))|(1<<(MySQLStatementParserXID-735))|(1<<(MySQLStatementParserXML-735))|(1<<(MySQLStatementParserYEAR-735)))) != 0) || _la == MySQLStatementParserIDENTIFIER_ || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
			{
				p.SetState(1332)
				p.Fields()
			}

		}
		{
			p.SetState(1335)
			p.Match(MySQLStatementParserRP_)
		}

	}
	{
		p.SetState(1338)
		p.Select()
	}

	return localctx
}

// IOnDuplicateKeyClauseContext is an interface to support dynamic dispatch.
type IOnDuplicateKeyClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOnDuplicateKeyClauseContext differentiates from other interfaces.
	IsOnDuplicateKeyClauseContext()
}

type OnDuplicateKeyClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOnDuplicateKeyClauseContext() *OnDuplicateKeyClauseContext {
	var p = new(OnDuplicateKeyClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_onDuplicateKeyClause
	return p
}

func (*OnDuplicateKeyClauseContext) IsOnDuplicateKeyClauseContext() {}

func NewOnDuplicateKeyClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OnDuplicateKeyClauseContext {
	var p = new(OnDuplicateKeyClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_onDuplicateKeyClause

	return p
}

func (s *OnDuplicateKeyClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *OnDuplicateKeyClauseContext) ON() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserON, 0)
}

func (s *OnDuplicateKeyClauseContext) DUPLICATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDUPLICATE, 0)
}

func (s *OnDuplicateKeyClauseContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserKEY, 0)
}

func (s *OnDuplicateKeyClauseContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUPDATE, 0)
}

func (s *OnDuplicateKeyClauseContext) AllAssignment() []IAssignmentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssignmentContext)(nil)).Elem())
	var tst = make([]IAssignmentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssignmentContext)
		}
	}

	return tst
}

func (s *OnDuplicateKeyClauseContext) Assignment(i int) IAssignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssignmentContext)
}

func (s *OnDuplicateKeyClauseContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *OnDuplicateKeyClauseContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *OnDuplicateKeyClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OnDuplicateKeyClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OnDuplicateKeyClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterOnDuplicateKeyClause(s)
	}
}

func (s *OnDuplicateKeyClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitOnDuplicateKeyClause(s)
	}
}

func (s *OnDuplicateKeyClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitOnDuplicateKeyClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) OnDuplicateKeyClause() (localctx IOnDuplicateKeyClauseContext) {
	this := p
	_ = this

	localctx = NewOnDuplicateKeyClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, MySQLStatementParserRULE_onDuplicateKeyClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1340)
		p.Match(MySQLStatementParserON)
	}
	{
		p.SetState(1341)
		p.Match(MySQLStatementParserDUPLICATE)
	}
	{
		p.SetState(1342)
		p.Match(MySQLStatementParserKEY)
	}
	{
		p.SetState(1343)
		p.Match(MySQLStatementParserUPDATE)
	}
	{
		p.SetState(1344)
		p.Assignment()
	}
	p.SetState(1349)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(1345)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(1346)
			p.Assignment()
		}

		p.SetState(1351)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IValueReferenceContext is an interface to support dynamic dispatch.
type IValueReferenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsValueReferenceContext differentiates from other interfaces.
	IsValueReferenceContext()
}

type ValueReferenceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValueReferenceContext() *ValueReferenceContext {
	var p = new(ValueReferenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_valueReference
	return p
}

func (*ValueReferenceContext) IsValueReferenceContext() {}

func NewValueReferenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ValueReferenceContext {
	var p = new(ValueReferenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_valueReference

	return p
}

func (s *ValueReferenceContext) GetParser() antlr.Parser { return s.parser }

func (s *ValueReferenceContext) AS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAS, 0)
}

func (s *ValueReferenceContext) Alias() IAliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAliasContext)
}

func (s *ValueReferenceContext) DerivedColumns() IDerivedColumnsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDerivedColumnsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDerivedColumnsContext)
}

func (s *ValueReferenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValueReferenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ValueReferenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterValueReference(s)
	}
}

func (s *ValueReferenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitValueReference(s)
	}
}

func (s *ValueReferenceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitValueReference(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ValueReference() (localctx IValueReferenceContext) {
	this := p
	_ = this

	localctx = NewValueReferenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, MySQLStatementParserRULE_valueReference)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1352)
		p.Match(MySQLStatementParserAS)
	}
	{
		p.SetState(1353)
		p.Alias()
	}
	p.SetState(1355)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 22, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1354)
			p.DerivedColumns()
		}

	}

	return localctx
}

// IDerivedColumnsContext is an interface to support dynamic dispatch.
type IDerivedColumnsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDerivedColumnsContext differentiates from other interfaces.
	IsDerivedColumnsContext()
}

type DerivedColumnsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDerivedColumnsContext() *DerivedColumnsContext {
	var p = new(DerivedColumnsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_derivedColumns
	return p
}

func (*DerivedColumnsContext) IsDerivedColumnsContext() {}

func NewDerivedColumnsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DerivedColumnsContext {
	var p = new(DerivedColumnsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_derivedColumns

	return p
}

func (s *DerivedColumnsContext) GetParser() antlr.Parser { return s.parser }

func (s *DerivedColumnsContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *DerivedColumnsContext) AllAlias() []IAliasContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAliasContext)(nil)).Elem())
	var tst = make([]IAliasContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAliasContext)
		}
	}

	return tst
}

func (s *DerivedColumnsContext) Alias(i int) IAliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAliasContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAliasContext)
}

func (s *DerivedColumnsContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *DerivedColumnsContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *DerivedColumnsContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *DerivedColumnsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DerivedColumnsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DerivedColumnsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDerivedColumns(s)
	}
}

func (s *DerivedColumnsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDerivedColumns(s)
	}
}

func (s *DerivedColumnsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDerivedColumns(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DerivedColumns() (localctx IDerivedColumnsContext) {
	this := p
	_ = this

	localctx = NewDerivedColumnsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, MySQLStatementParserRULE_derivedColumns)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1357)
		p.Match(MySQLStatementParserLP_)
	}
	{
		p.SetState(1358)
		p.Alias()
	}
	p.SetState(1363)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(1359)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(1360)
			p.Alias()
		}

		p.SetState(1365)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1366)
		p.Match(MySQLStatementParserRP_)
	}

	return localctx
}

// IReplaceContext is an interface to support dynamic dispatch.
type IReplaceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReplaceContext differentiates from other interfaces.
	IsReplaceContext()
}

type ReplaceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReplaceContext() *ReplaceContext {
	var p = new(ReplaceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_replace
	return p
}

func (*ReplaceContext) IsReplaceContext() {}

func NewReplaceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReplaceContext {
	var p = new(ReplaceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_replace

	return p
}

func (s *ReplaceContext) GetParser() antlr.Parser { return s.parser }

func (s *ReplaceContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLACE, 0)
}

func (s *ReplaceContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *ReplaceContext) ReplaceValuesClause() IReplaceValuesClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReplaceValuesClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReplaceValuesClauseContext)
}

func (s *ReplaceContext) SetAssignmentsClause() ISetAssignmentsClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetAssignmentsClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetAssignmentsClauseContext)
}

func (s *ReplaceContext) ReplaceSelectClause() IReplaceSelectClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReplaceSelectClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReplaceSelectClauseContext)
}

func (s *ReplaceContext) ReplaceSpecification() IReplaceSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReplaceSpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReplaceSpecificationContext)
}

func (s *ReplaceContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINTO, 0)
}

func (s *ReplaceContext) PartitionNames() IPartitionNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionNamesContext)
}

func (s *ReplaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReplaceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReplaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterReplace(s)
	}
}

func (s *ReplaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitReplace(s)
	}
}

func (s *ReplaceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitReplace(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Replace() (localctx IReplaceContext) {
	this := p
	_ = this

	localctx = NewReplaceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, MySQLStatementParserRULE_replace)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1368)
		p.Match(MySQLStatementParserREPLACE)
	}
	p.SetState(1370)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserDELAYED || _la == MySQLStatementParserLOW_PRIORITY {
		{
			p.SetState(1369)
			p.ReplaceSpecification()
		}

	}
	p.SetState(1373)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserINTO {
		{
			p.SetState(1372)
			p.Match(MySQLStatementParserINTO)
		}

	}
	{
		p.SetState(1375)
		p.TableName()
	}
	p.SetState(1377)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserPARTITION {
		{
			p.SetState(1376)
			p.PartitionNames()
		}

	}
	p.SetState(1382)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1379)
			p.ReplaceValuesClause()
		}

	case 2:
		{
			p.SetState(1380)
			p.SetAssignmentsClause()
		}

	case 3:
		{
			p.SetState(1381)
			p.ReplaceSelectClause()
		}

	}

	return localctx
}

// IReplaceSpecificationContext is an interface to support dynamic dispatch.
type IReplaceSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReplaceSpecificationContext differentiates from other interfaces.
	IsReplaceSpecificationContext()
}

type ReplaceSpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReplaceSpecificationContext() *ReplaceSpecificationContext {
	var p = new(ReplaceSpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_replaceSpecification
	return p
}

func (*ReplaceSpecificationContext) IsReplaceSpecificationContext() {}

func NewReplaceSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReplaceSpecificationContext {
	var p = new(ReplaceSpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_replaceSpecification

	return p
}

func (s *ReplaceSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *ReplaceSpecificationContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOW_PRIORITY, 0)
}

func (s *ReplaceSpecificationContext) DELAYED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDELAYED, 0)
}

func (s *ReplaceSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReplaceSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReplaceSpecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterReplaceSpecification(s)
	}
}

func (s *ReplaceSpecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitReplaceSpecification(s)
	}
}

func (s *ReplaceSpecificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitReplaceSpecification(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ReplaceSpecification() (localctx IReplaceSpecificationContext) {
	this := p
	_ = this

	localctx = NewReplaceSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, MySQLStatementParserRULE_replaceSpecification)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1384)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserDELAYED || _la == MySQLStatementParserLOW_PRIORITY) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IReplaceValuesClauseContext is an interface to support dynamic dispatch.
type IReplaceValuesClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReplaceValuesClauseContext differentiates from other interfaces.
	IsReplaceValuesClauseContext()
}

type ReplaceValuesClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReplaceValuesClauseContext() *ReplaceValuesClauseContext {
	var p = new(ReplaceValuesClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_replaceValuesClause
	return p
}

func (*ReplaceValuesClauseContext) IsReplaceValuesClauseContext() {}

func NewReplaceValuesClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReplaceValuesClauseContext {
	var p = new(ReplaceValuesClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_replaceValuesClause

	return p
}

func (s *ReplaceValuesClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ReplaceValuesClauseContext) VALUES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVALUES, 0)
}

func (s *ReplaceValuesClauseContext) VALUE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVALUE, 0)
}

func (s *ReplaceValuesClauseContext) AllAssignmentValues() []IAssignmentValuesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssignmentValuesContext)(nil)).Elem())
	var tst = make([]IAssignmentValuesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssignmentValuesContext)
		}
	}

	return tst
}

func (s *ReplaceValuesClauseContext) AssignmentValues(i int) IAssignmentValuesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentValuesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssignmentValuesContext)
}

func (s *ReplaceValuesClauseContext) RowConstructorList() IRowConstructorListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRowConstructorListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRowConstructorListContext)
}

func (s *ReplaceValuesClauseContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *ReplaceValuesClauseContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *ReplaceValuesClauseContext) ValueReference() IValueReferenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueReferenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueReferenceContext)
}

func (s *ReplaceValuesClauseContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *ReplaceValuesClauseContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *ReplaceValuesClauseContext) Fields() IFieldsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldsContext)
}

func (s *ReplaceValuesClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReplaceValuesClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReplaceValuesClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterReplaceValuesClause(s)
	}
}

func (s *ReplaceValuesClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitReplaceValuesClause(s)
	}
}

func (s *ReplaceValuesClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitReplaceValuesClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ReplaceValuesClause() (localctx IReplaceValuesClauseContext) {
	this := p
	_ = this

	localctx = NewReplaceValuesClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, MySQLStatementParserRULE_replaceValuesClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1391)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLP_ {
		{
			p.SetState(1386)
			p.Match(MySQLStatementParserLP_)
		}
		p.SetState(1388)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49))|(1<<(MySQLStatementParserGROUP_CONCAT-49))|(1<<(MySQLStatementParserCAST-49))|(1<<(MySQLStatementParserPOSITION-49))|(1<<(MySQLStatementParserSUBSTRING-49))|(1<<(MySQLStatementParserSUBSTR-49))|(1<<(MySQLStatementParserEXTRACT-49))|(1<<(MySQLStatementParserTRIM-49))|(1<<(MySQLStatementParserLAST_DAY-49))|(1<<(MySQLStatementParserTRADITIONAL-49))|(1<<(MySQLStatementParserTREE-49))|(1<<(MySQLStatementParserMYSQL_ADMIN-49))|(1<<(MySQLStatementParserINSTANT-49))|(1<<(MySQLStatementParserINPLACE-49))|(1<<(MySQLStatementParserCOPY-49))|(1<<(MySQLStatementParserUL_BINARY-49))|(1<<(MySQLStatementParserAUTOCOMMIT-49))|(1<<(MySQLStatementParserINNODB-49))|(1<<(MySQLStatementParserREDO_LOG-49))|(1<<(MySQLStatementParserACCOUNT-49))|(1<<(MySQLStatementParserACTION-49))|(1<<(MySQLStatementParserACTIVE-49))|(1<<(MySQLStatementParserADMIN-49))|(1<<(MySQLStatementParserAFTER-49))|(1<<(MySQLStatementParserAGAINST-49)))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(MySQLStatementParserAGGREGATE-81))|(1<<(MySQLStatementParserALGORITHM-81))|(1<<(MySQLStatementParserALWAYS-81))|(1<<(MySQLStatementParserANY-81))|(1<<(MySQLStatementParserARRAY-81))|(1<<(MySQLStatementParserASCII-81))|(1<<(MySQLStatementParserAT-81))|(1<<(MySQLStatementParserATTRIBUTE-81))|(1<<(MySQLStatementParserAUTOEXTEND_SIZE-81))|(1<<(MySQLStatementParserAUTO_INCREMENT-81))|(1<<(MySQLStatementParserAVG-81))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-81))|(1<<(MySQLStatementParserBACKUP-81))|(1<<(MySQLStatementParserBEGIN-81))|(1<<(MySQLStatementParserBINLOG-81))|(1<<(MySQLStatementParserBIT-81))|(1<<(MySQLStatementParserBLOCK-81))|(1<<(MySQLStatementParserBOOL-81))|(1<<(MySQLStatementParserBOOLEAN-81)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(MySQLStatementParserBTREE-114))|(1<<(MySQLStatementParserBUCKETS-114))|(1<<(MySQLStatementParserBYTE-114))|(1<<(MySQLStatementParserCACHE-114))|(1<<(MySQLStatementParserCASCADED-114))|(1<<(MySQLStatementParserCATALOG_NAME-114))|(1<<(MySQLStatementParserCHAIN-114))|(1<<(MySQLStatementParserCHANGED-114))|(1<<(MySQLStatementParserCHANNEL-114))|(1<<(MySQLStatementParserCHARSET-114))|(1<<(MySQLStatementParserCHECKSUM-114))|(1<<(MySQLStatementParserCIPHER-114))|(1<<(MySQLStatementParserCLASS_ORIGIN-114))|(1<<(MySQLStatementParserCLIENT-114))|(1<<(MySQLStatementParserCLONE-114))|(1<<(MySQLStatementParserCLOSE-114))|(1<<(MySQLStatementParserCOALESCE-114))|(1<<(MySQLStatementParserCODE-114))|(1<<(MySQLStatementParserCOLLATION-114))|(1<<(MySQLStatementParserCOLUMNS-114))|(1<<(MySQLStatementParserCOLUMN_FORMAT-114))|(1<<(MySQLStatementParserCOLUMN_NAME-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(MySQLStatementParserCOMMENT-146))|(1<<(MySQLStatementParserCOMMIT-146))|(1<<(MySQLStatementParserCOMMITTED-146))|(1<<(MySQLStatementParserCOMPACT-146))|(1<<(MySQLStatementParserCOMPLETION-146))|(1<<(MySQLStatementParserCOMPONENT-146))|(1<<(MySQLStatementParserCOMPRESSED-146))|(1<<(MySQLStatementParserCOMPRESSION-146))|(1<<(MySQLStatementParserCONCURRENT-146))|(1<<(MySQLStatementParserCONNECTION-146))|(1<<(MySQLStatementParserCONSISTENT-146))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-146))|(1<<(MySQLStatementParserCONSTRAINT_NAME-146))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-146))|(1<<(MySQLStatementParserCONTAINS-146))|(1<<(MySQLStatementParserCONTEXT-146))|(1<<(MySQLStatementParserCPU-146))|(1<<(MySQLStatementParserCURRENT-146))|(1<<(MySQLStatementParserCURSOR_NAME-146)))) != 0) || (((_la-178)&-(0x1f+1)) == 0 && ((1<<uint((_la-178)))&((1<<(MySQLStatementParserDATA-178))|(1<<(MySQLStatementParserDATAFILE-178))|(1<<(MySQLStatementParserDATE-178))|(1<<(MySQLStatementParserDATETIME-178))|(1<<(MySQLStatementParserDAY-178))|(1<<(MySQLStatementParserDEALLOCATE-178))|(1<<(MySQLStatementParserDEFAULT_AUTH-178))|(1<<(MySQLStatementParserDEFINER-178))|(1<<(MySQLStatementParserDEFINITION-178))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-178))|(1<<(MySQLStatementParserDESCRIPTION-178))|(1<<(MySQLStatementParserDIAGNOSTICS-178))|(1<<(MySQLStatementParserDIRECTORY-178))|(1<<(MySQLStatementParserDISABLE-178))|(1<<(MySQLStatementParserDISCARD-178))|(1<<(MySQLStatementParserDISK-178)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(MySQLStatementParserDO-213))|(1<<(MySQLStatementParserDUMPFILE-213))|(1<<(MySQLStatementParserDUPLICATE-213))|(1<<(MySQLStatementParserDYNAMIC-213))|(1<<(MySQLStatementParserENABLE-213))|(1<<(MySQLStatementParserENCRYPTION-213))|(1<<(MySQLStatementParserEND-213))|(1<<(MySQLStatementParserENDS-213))|(1<<(MySQLStatementParserENFORCED-213))|(1<<(MySQLStatementParserENGINE-213))|(1<<(MySQLStatementParserENGINES-213))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-213))|(1<<(MySQLStatementParserENUM-213))|(1<<(MySQLStatementParserERROR-213))|(1<<(MySQLStatementParserERRORS-213))|(1<<(MySQLStatementParserESCAPE-213))|(1<<(MySQLStatementParserEVENT-213))|(1<<(MySQLStatementParserEVENTS-213))|(1<<(MySQLStatementParserEVERY-213))|(1<<(MySQLStatementParserEXCHANGE-213))|(1<<(MySQLStatementParserEXCLUDE-213))|(1<<(MySQLStatementParserEXECUTE-213)))) != 0) || (((_la-247)&-(0x1f+1)) == 0 && ((1<<uint((_la-247)))&((1<<(MySQLStatementParserEXPANSION-247))|(1<<(MySQLStatementParserEXPIRE-247))|(1<<(MySQLStatementParserEXPORT-247))|(1<<(MySQLStatementParserEXTENDED-247))|(1<<(MySQLStatementParserEXTENT_SIZE-247))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-247))|(1<<(MySQLStatementParserFAST-247))|(1<<(MySQLStatementParserFAULTS-247))|(1<<(MySQLStatementParserFILE-247))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-247))|(1<<(MySQLStatementParserFILTER-247))|(1<<(MySQLStatementParserFIRST-247))|(1<<(MySQLStatementParserFIXED-247))|(1<<(MySQLStatementParserFLUSH-247))|(1<<(MySQLStatementParserFOLLOWING-247))|(1<<(MySQLStatementParserFOLLOWS-247))|(1<<(MySQLStatementParserFORMAT-247))|(1<<(MySQLStatementParserFOUND-247))|(1<<(MySQLStatementParserFULL-247)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(MySQLStatementParserGENERAL-279))|(1<<(MySQLStatementParserGEOMETRY-279))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-279))|(1<<(MySQLStatementParserGET_FORMAT-279))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-279))|(1<<(MySQLStatementParserGLOBAL-279))|(1<<(MySQLStatementParserGRANTS-279))|(1<<(MySQLStatementParserGROUP_REPLICATION-279))|(1<<(MySQLStatementParserHANDLER-279))|(1<<(MySQLStatementParserHASH-279))|(1<<(MySQLStatementParserHELP-279))|(1<<(MySQLStatementParserHISTOGRAM-279))|(1<<(MySQLStatementParserHISTORY-279))|(1<<(MySQLStatementParserHOST-279))|(1<<(MySQLStatementParserHOSTS-279))|(1<<(MySQLStatementParserHOUR-279))|(1<<(MySQLStatementParserIDENTIFIED-279))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-279))|(1<<(MySQLStatementParserIMPORT-279)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySQLStatementParserINACTIVE-312))|(1<<(MySQLStatementParserINDEXES-312))|(1<<(MySQLStatementParserINITIAL_SIZE-312))|(1<<(MySQLStatementParserINSERT_METHOD-312))|(1<<(MySQLStatementParserINSTALL-312))|(1<<(MySQLStatementParserINSTANCE-312))|(1<<(MySQLStatementParserINVISIBLE-312))|(1<<(MySQLStatementParserINVOKER-312))|(1<<(MySQLStatementParserIO-312))|(1<<(MySQLStatementParserIPC-312))|(1<<(MySQLStatementParserISOLATION-312))|(1<<(MySQLStatementParserISSUER-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySQLStatementParserJSON-344))|(1<<(MySQLStatementParserJSON_VALUE-344))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-344))|(1<<(MySQLStatementParserLANGUAGE-344))|(1<<(MySQLStatementParserLAST-344))|(1<<(MySQLStatementParserLAST_VALUE-344))|(1<<(MySQLStatementParserLEAVES-344))|(1<<(MySQLStatementParserLESS-344))|(1<<(MySQLStatementParserLEVEL-344))|(1<<(MySQLStatementParserLINESTRING-344))|(1<<(MySQLStatementParserLIST-344))|(1<<(MySQLStatementParserLOCAL-344))|(1<<(MySQLStatementParserLOCKED-344))|(1<<(MySQLStatementParserLOCKS-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySQLStatementParserLOGFILE-376))|(1<<(MySQLStatementParserLOGS-376))|(1<<(MySQLStatementParserMASTER-376))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-376))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-376))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-376))|(1<<(MySQLStatementParserMASTER_DELAY-376))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-376))|(1<<(MySQLStatementParserMASTER_HOST-376))|(1<<(MySQLStatementParserMASTER_LOG_FILE-376))|(1<<(MySQLStatementParserMASTER_LOG_POS-376))|(1<<(MySQLStatementParserMASTER_PASSWORD-376))|(1<<(MySQLStatementParserMASTER_PORT-376))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-376))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-376))|(1<<(MySQLStatementParserMASTER_SERVER_ID-376))|(1<<(MySQLStatementParserMASTER_SSL-376))|(1<<(MySQLStatementParserMASTER_SSL_CA-376))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_CERT-376))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-376))|(1<<(MySQLStatementParserMASTER_SSL_CRL-376))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_KEY-376))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySQLStatementParserMASTER_TLS_VERSION-408))|(1<<(MySQLStatementParserMASTER_USER-408))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-408))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_ROWS-408))|(1<<(MySQLStatementParserMAX_SIZE-408))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-408))|(1<<(MySQLStatementParserMEDIUM-408))|(1<<(MySQLStatementParserMEMBER-408))|(1<<(MySQLStatementParserMEMORY-408))|(1<<(MySQLStatementParserMERGE-408))|(1<<(MySQLStatementParserMESSAGE_TEXT-408))|(1<<(MySQLStatementParserMICROSECOND-408))|(1<<(MySQLStatementParserMIGRATE-408))|(1<<(MySQLStatementParserMINUTE-408))|(1<<(MySQLStatementParserMIN_ROWS-408))|(1<<(MySQLStatementParserMODE-408))|(1<<(MySQLStatementParserMODIFY-408))|(1<<(MySQLStatementParserMONTH-408))|(1<<(MySQLStatementParserMULTILINESTRING-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySQLStatementParserMULTIPOINT-440))|(1<<(MySQLStatementParserMULTIPOLYGON-440))|(1<<(MySQLStatementParserMUTEX-440))|(1<<(MySQLStatementParserMYSQL_ERRNO-440))|(1<<(MySQLStatementParserNAME-440))|(1<<(MySQLStatementParserNAMES-440))|(1<<(MySQLStatementParserNATIONAL-440))|(1<<(MySQLStatementParserNCHAR-440))|(1<<(MySQLStatementParserNDBCLUSTER-440))|(1<<(MySQLStatementParserNESTED-440))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-440))|(1<<(MySQLStatementParserNEVER-440))|(1<<(MySQLStatementParserNEW-440))|(1<<(MySQLStatementParserNEXT-440))|(1<<(MySQLStatementParserNO-440))|(1<<(MySQLStatementParserNODEGROUP-440))|(1<<(MySQLStatementParserNONE-440))|(1<<(MySQLStatementParserNOWAIT-440))|(1<<(MySQLStatementParserNO_WAIT-440))|(1<<(MySQLStatementParserNULLS-440))|(1<<(MySQLStatementParserNUMBER-440))|(1<<(MySQLStatementParserNVARCHAR-440))|(1<<(MySQLStatementParserOFF-440))|(1<<(MySQLStatementParserOFFSET-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySQLStatementParserOJ-472))|(1<<(MySQLStatementParserOLD-472))|(1<<(MySQLStatementParserONE-472))|(1<<(MySQLStatementParserONLY-472))|(1<<(MySQLStatementParserOPEN-472))|(1<<(MySQLStatementParserOPTIONAL-472))|(1<<(MySQLStatementParserOPTIONS-472))|(1<<(MySQLStatementParserORDINALITY-472))|(1<<(MySQLStatementParserORGANIZATION-472))|(1<<(MySQLStatementParserOTHERS-472))|(1<<(MySQLStatementParserOWNER-472))|(1<<(MySQLStatementParserPACK_KEYS-472))|(1<<(MySQLStatementParserPAGE-472))|(1<<(MySQLStatementParserPARSER-472))|(1<<(MySQLStatementParserPARTIAL-472))|(1<<(MySQLStatementParserPARTITIONING-472))|(1<<(MySQLStatementParserPARTITIONS-472))|(1<<(MySQLStatementParserPASSWORD-472))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-472))|(1<<(MySQLStatementParserPATH-472)))) != 0) || (((_la-505)&-(0x1f+1)) == 0 && ((1<<uint((_la-505)))&((1<<(MySQLStatementParserPERSIST-505))|(1<<(MySQLStatementParserPERSIST_ONLY-505))|(1<<(MySQLStatementParserPHASE-505))|(1<<(MySQLStatementParserPLUGIN-505))|(1<<(MySQLStatementParserPLUGINS-505))|(1<<(MySQLStatementParserPLUGIN_DIR-505))|(1<<(MySQLStatementParserPOINT-505))|(1<<(MySQLStatementParserPOLYGON-505))|(1<<(MySQLStatementParserPORT-505))|(1<<(MySQLStatementParserPRECEDES-505))|(1<<(MySQLStatementParserPRECEDING-505))|(1<<(MySQLStatementParserPREPARE-505))|(1<<(MySQLStatementParserPRESERVE-505))|(1<<(MySQLStatementParserPREV-505))|(1<<(MySQLStatementParserPRIVILEGES-505))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-505))|(1<<(MySQLStatementParserPROCESS-505))|(1<<(MySQLStatementParserPROCESSLIST-505))|(1<<(MySQLStatementParserPROFILE-505))|(1<<(MySQLStatementParserPROFILES-505))|(1<<(MySQLStatementParserPROXY-505))|(1<<(MySQLStatementParserQUARTER-505))|(1<<(MySQLStatementParserQUERY-505))|(1<<(MySQLStatementParserQUICK-505))|(1<<(MySQLStatementParserRANDOM-505)))) != 0) || (((_la-538)&-(0x1f+1)) == 0 && ((1<<uint((_la-538)))&((1<<(MySQLStatementParserREAD_ONLY-538))|(1<<(MySQLStatementParserREBUILD-538))|(1<<(MySQLStatementParserRECOVER-538))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-538))|(1<<(MySQLStatementParserREDUNDANT-538))|(1<<(MySQLStatementParserREFERENCE-538))|(1<<(MySQLStatementParserRELAY-538))|(1<<(MySQLStatementParserRELAYLOG-538))|(1<<(MySQLStatementParserRELAY_LOG_FILE-538))|(1<<(MySQLStatementParserRELAY_LOG_POS-538))|(1<<(MySQLStatementParserRELAY_THREAD-538))|(1<<(MySQLStatementParserRELOAD-538))|(1<<(MySQLStatementParserREMOVE-538))|(1<<(MySQLStatementParserREORGANIZE-538))|(1<<(MySQLStatementParserREPAIR-538))|(1<<(MySQLStatementParserREPEATABLE-538))|(1<<(MySQLStatementParserREPLICATE_DO_DB-538))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-538)))) != 0) || (((_la-570)&-(0x1f+1)) == 0 && ((1<<uint((_la-570)))&((1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-570))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-570))|(1<<(MySQLStatementParserREPLICATION-570))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-570))|(1<<(MySQLStatementParserRESET-570))|(1<<(MySQLStatementParserRESOURCE-570))|(1<<(MySQLStatementParserRESPECT-570))|(1<<(MySQLStatementParserRESTART-570))|(1<<(MySQLStatementParserRESTORE-570))|(1<<(MySQLStatementParserRESUME-570))|(1<<(MySQLStatementParserRETAIN-570))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-570))|(1<<(MySQLStatementParserRETURNING-570))|(1<<(MySQLStatementParserRETURNS-570))|(1<<(MySQLStatementParserREUSE-570))|(1<<(MySQLStatementParserREVERSE-570))|(1<<(MySQLStatementParserROLE-570))|(1<<(MySQLStatementParserROLLBACK-570))|(1<<(MySQLStatementParserROLLUP-570))|(1<<(MySQLStatementParserROTATE-570))|(1<<(MySQLStatementParserROUTINE-570))|(1<<(MySQLStatementParserROW_COUNT-570))|(1<<(MySQLStatementParserROW_FORMAT-570)))) != 0) || (((_la-603)&-(0x1f+1)) == 0 && ((1<<uint((_la-603)))&((1<<(MySQLStatementParserRTREE-603))|(1<<(MySQLStatementParserSAVEPOINT-603))|(1<<(MySQLStatementParserSCHEDULE-603))|(1<<(MySQLStatementParserSCHEMA_NAME-603))|(1<<(MySQLStatementParserSECOND-603))|(1<<(MySQLStatementParserSECONDARY-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-603))|(1<<(MySQLStatementParserSECONDARY_LOAD-603))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-603))|(1<<(MySQLStatementParserSECURITY-603))|(1<<(MySQLStatementParserSERIAL-603))|(1<<(MySQLStatementParserSERIALIZABLE-603))|(1<<(MySQLStatementParserSERVER-603))|(1<<(MySQLStatementParserSESSION-603))|(1<<(MySQLStatementParserSHARE-603))|(1<<(MySQLStatementParserSHUTDOWN-603))|(1<<(MySQLStatementParserSIGNED-603))|(1<<(MySQLStatementParserSIMPLE-603))|(1<<(MySQLStatementParserSLAVE-603))|(1<<(MySQLStatementParserSLOW-603)))) != 0) || (((_la-635)&-(0x1f+1)) == 0 && ((1<<uint((_la-635)))&((1<<(MySQLStatementParserSNAPSHOT-635))|(1<<(MySQLStatementParserSOCKET-635))|(1<<(MySQLStatementParserSONAME-635))|(1<<(MySQLStatementParserSOUNDS-635))|(1<<(MySQLStatementParserSOURCE-635))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-635))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-635))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-635))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-635))|(1<<(MySQLStatementParserSQL_NO_CACHE-635))|(1<<(MySQLStatementParserSQL_THREAD-635))|(1<<(MySQLStatementParserSRID-635))|(1<<(MySQLStatementParserSTACKED-635))|(1<<(MySQLStatementParserSTART-635))|(1<<(MySQLStatementParserSTARTS-635))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-635))|(1<<(MySQLStatementParserSTATS_PERSISTENT-635))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-635))|(1<<(MySQLStatementParserSTATUS-635))|(1<<(MySQLStatementParserSTOP-635))|(1<<(MySQLStatementParserSTORAGE-635)))) != 0) || (((_la-669)&-(0x1f+1)) == 0 && ((1<<uint((_la-669)))&((1<<(MySQLStatementParserSTREAM-669))|(1<<(MySQLStatementParserSTRING-669))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-669))|(1<<(MySQLStatementParserSUBJECT-669))|(1<<(MySQLStatementParserSUBPARTITION-669))|(1<<(MySQLStatementParserSUBPARTITIONS-669))|(1<<(MySQLStatementParserSUPER-669))|(1<<(MySQLStatementParserSUSPEND-669))|(1<<(MySQLStatementParserSWAPS-669))|(1<<(MySQLStatementParserSWITCHES-669))|(1<<(MySQLStatementParserTABLES-669))|(1<<(MySQLStatementParserTABLESPACE-669))|(1<<(MySQLStatementParserTABLE_CHECKSUM-669))|(1<<(MySQLStatementParserTABLE_NAME-669))|(1<<(MySQLStatementParserTEMPORARY-669))|(1<<(MySQLStatementParserTEMPTABLE-669))|(1<<(MySQLStatementParserTEXT-669))|(1<<(MySQLStatementParserTHAN-669))|(1<<(MySQLStatementParserTHREAD_PRIORITY-669))|(1<<(MySQLStatementParserTIES-669))|(1<<(MySQLStatementParserTIME-669))|(1<<(MySQLStatementParserTIMESTAMP-669))|(1<<(MySQLStatementParserTIMESTAMP_ADD-669))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-669))|(1<<(MySQLStatementParserTLS-669)))) != 0) || (((_la-703)&-(0x1f+1)) == 0 && ((1<<uint((_la-703)))&((1<<(MySQLStatementParserTRANSACTION-703))|(1<<(MySQLStatementParserTRIGGERS-703))|(1<<(MySQLStatementParserTRUNCATE-703))|(1<<(MySQLStatementParserTYPE-703))|(1<<(MySQLStatementParserTYPES-703))|(1<<(MySQLStatementParserUNBOUNDED-703))|(1<<(MySQLStatementParserUNCOMMITTED-703))|(1<<(MySQLStatementParserUNDEFINED-703))|(1<<(MySQLStatementParserUNDOFILE-703))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-703))|(1<<(MySQLStatementParserUNICODE-703))|(1<<(MySQLStatementParserUNINSTALL-703))|(1<<(MySQLStatementParserUNKNOWN-703))|(1<<(MySQLStatementParserUNTIL-703))|(1<<(MySQLStatementParserUPGRADE-703))|(1<<(MySQLStatementParserUSER-703))|(1<<(MySQLStatementParserUSER_RESOURCES-703))|(1<<(MySQLStatementParserUSE_FRM-703)))) != 0) || (((_la-735)&-(0x1f+1)) == 0 && ((1<<uint((_la-735)))&((1<<(MySQLStatementParserVALIDATION-735))|(1<<(MySQLStatementParserVALUE-735))|(1<<(MySQLStatementParserVARIABLES-735))|(1<<(MySQLStatementParserVCPU-735))|(1<<(MySQLStatementParserVIEW-735))|(1<<(MySQLStatementParserVISIBLE-735))|(1<<(MySQLStatementParserWAIT-735))|(1<<(MySQLStatementParserWARNINGS-735))|(1<<(MySQLStatementParserWEEK-735))|(1<<(MySQLStatementParserWEIGHT_STRING-735))|(1<<(MySQLStatementParserWITHOUT-735))|(1<<(MySQLStatementParserWORK-735))|(1<<(MySQLStatementParserWRAPPER-735))|(1<<(MySQLStatementParserX509-735))|(1<<(MySQLStatementParserXA-735))|(1<<(MySQLStatementParserXID-735))|(1<<(MySQLStatementParserXML-735))|(1<<(MySQLStatementParserYEAR-735)))) != 0) || _la == MySQLStatementParserIDENTIFIER_ || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
			{
				p.SetState(1387)
				p.Fields()
			}

		}
		{
			p.SetState(1390)
			p.Match(MySQLStatementParserRP_)
		}

	}
	{
		p.SetState(1393)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserVALUE || _la == MySQLStatementParserVALUES) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1403)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserLP_:
		{
			p.SetState(1394)
			p.AssignmentValues()
		}
		p.SetState(1399)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(1395)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(1396)
				p.AssignmentValues()
			}

			p.SetState(1401)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case MySQLStatementParserROW:
		{
			p.SetState(1402)
			p.RowConstructorList()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(1406)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserAS {
		{
			p.SetState(1405)
			p.ValueReference()
		}

	}

	return localctx
}

// IReplaceSelectClauseContext is an interface to support dynamic dispatch.
type IReplaceSelectClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReplaceSelectClauseContext differentiates from other interfaces.
	IsReplaceSelectClauseContext()
}

type ReplaceSelectClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReplaceSelectClauseContext() *ReplaceSelectClauseContext {
	var p = new(ReplaceSelectClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_replaceSelectClause
	return p
}

func (*ReplaceSelectClauseContext) IsReplaceSelectClauseContext() {}

func NewReplaceSelectClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReplaceSelectClauseContext {
	var p = new(ReplaceSelectClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_replaceSelectClause

	return p
}

func (s *ReplaceSelectClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ReplaceSelectClauseContext) Select() ISelectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectContext)
}

func (s *ReplaceSelectClauseContext) ValueReference() IValueReferenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueReferenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueReferenceContext)
}

func (s *ReplaceSelectClauseContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *ReplaceSelectClauseContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *ReplaceSelectClauseContext) Fields() IFieldsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldsContext)
}

func (s *ReplaceSelectClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReplaceSelectClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReplaceSelectClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterReplaceSelectClause(s)
	}
}

func (s *ReplaceSelectClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitReplaceSelectClause(s)
	}
}

func (s *ReplaceSelectClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitReplaceSelectClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ReplaceSelectClause() (localctx IReplaceSelectClauseContext) {
	this := p
	_ = this

	localctx = NewReplaceSelectClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, MySQLStatementParserRULE_replaceSelectClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1409)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserAS {
		{
			p.SetState(1408)
			p.ValueReference()
		}

	}
	p.SetState(1416)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1411)
			p.Match(MySQLStatementParserLP_)
		}
		p.SetState(1413)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49))|(1<<(MySQLStatementParserGROUP_CONCAT-49))|(1<<(MySQLStatementParserCAST-49))|(1<<(MySQLStatementParserPOSITION-49))|(1<<(MySQLStatementParserSUBSTRING-49))|(1<<(MySQLStatementParserSUBSTR-49))|(1<<(MySQLStatementParserEXTRACT-49))|(1<<(MySQLStatementParserTRIM-49))|(1<<(MySQLStatementParserLAST_DAY-49))|(1<<(MySQLStatementParserTRADITIONAL-49))|(1<<(MySQLStatementParserTREE-49))|(1<<(MySQLStatementParserMYSQL_ADMIN-49))|(1<<(MySQLStatementParserINSTANT-49))|(1<<(MySQLStatementParserINPLACE-49))|(1<<(MySQLStatementParserCOPY-49))|(1<<(MySQLStatementParserUL_BINARY-49))|(1<<(MySQLStatementParserAUTOCOMMIT-49))|(1<<(MySQLStatementParserINNODB-49))|(1<<(MySQLStatementParserREDO_LOG-49))|(1<<(MySQLStatementParserACCOUNT-49))|(1<<(MySQLStatementParserACTION-49))|(1<<(MySQLStatementParserACTIVE-49))|(1<<(MySQLStatementParserADMIN-49))|(1<<(MySQLStatementParserAFTER-49))|(1<<(MySQLStatementParserAGAINST-49)))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(MySQLStatementParserAGGREGATE-81))|(1<<(MySQLStatementParserALGORITHM-81))|(1<<(MySQLStatementParserALWAYS-81))|(1<<(MySQLStatementParserANY-81))|(1<<(MySQLStatementParserARRAY-81))|(1<<(MySQLStatementParserASCII-81))|(1<<(MySQLStatementParserAT-81))|(1<<(MySQLStatementParserATTRIBUTE-81))|(1<<(MySQLStatementParserAUTOEXTEND_SIZE-81))|(1<<(MySQLStatementParserAUTO_INCREMENT-81))|(1<<(MySQLStatementParserAVG-81))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-81))|(1<<(MySQLStatementParserBACKUP-81))|(1<<(MySQLStatementParserBEGIN-81))|(1<<(MySQLStatementParserBINLOG-81))|(1<<(MySQLStatementParserBIT-81))|(1<<(MySQLStatementParserBLOCK-81))|(1<<(MySQLStatementParserBOOL-81))|(1<<(MySQLStatementParserBOOLEAN-81)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(MySQLStatementParserBTREE-114))|(1<<(MySQLStatementParserBUCKETS-114))|(1<<(MySQLStatementParserBYTE-114))|(1<<(MySQLStatementParserCACHE-114))|(1<<(MySQLStatementParserCASCADED-114))|(1<<(MySQLStatementParserCATALOG_NAME-114))|(1<<(MySQLStatementParserCHAIN-114))|(1<<(MySQLStatementParserCHANGED-114))|(1<<(MySQLStatementParserCHANNEL-114))|(1<<(MySQLStatementParserCHARSET-114))|(1<<(MySQLStatementParserCHECKSUM-114))|(1<<(MySQLStatementParserCIPHER-114))|(1<<(MySQLStatementParserCLASS_ORIGIN-114))|(1<<(MySQLStatementParserCLIENT-114))|(1<<(MySQLStatementParserCLONE-114))|(1<<(MySQLStatementParserCLOSE-114))|(1<<(MySQLStatementParserCOALESCE-114))|(1<<(MySQLStatementParserCODE-114))|(1<<(MySQLStatementParserCOLLATION-114))|(1<<(MySQLStatementParserCOLUMNS-114))|(1<<(MySQLStatementParserCOLUMN_FORMAT-114))|(1<<(MySQLStatementParserCOLUMN_NAME-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(MySQLStatementParserCOMMENT-146))|(1<<(MySQLStatementParserCOMMIT-146))|(1<<(MySQLStatementParserCOMMITTED-146))|(1<<(MySQLStatementParserCOMPACT-146))|(1<<(MySQLStatementParserCOMPLETION-146))|(1<<(MySQLStatementParserCOMPONENT-146))|(1<<(MySQLStatementParserCOMPRESSED-146))|(1<<(MySQLStatementParserCOMPRESSION-146))|(1<<(MySQLStatementParserCONCURRENT-146))|(1<<(MySQLStatementParserCONNECTION-146))|(1<<(MySQLStatementParserCONSISTENT-146))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-146))|(1<<(MySQLStatementParserCONSTRAINT_NAME-146))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-146))|(1<<(MySQLStatementParserCONTAINS-146))|(1<<(MySQLStatementParserCONTEXT-146))|(1<<(MySQLStatementParserCPU-146))|(1<<(MySQLStatementParserCURRENT-146))|(1<<(MySQLStatementParserCURSOR_NAME-146)))) != 0) || (((_la-178)&-(0x1f+1)) == 0 && ((1<<uint((_la-178)))&((1<<(MySQLStatementParserDATA-178))|(1<<(MySQLStatementParserDATAFILE-178))|(1<<(MySQLStatementParserDATE-178))|(1<<(MySQLStatementParserDATETIME-178))|(1<<(MySQLStatementParserDAY-178))|(1<<(MySQLStatementParserDEALLOCATE-178))|(1<<(MySQLStatementParserDEFAULT_AUTH-178))|(1<<(MySQLStatementParserDEFINER-178))|(1<<(MySQLStatementParserDEFINITION-178))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-178))|(1<<(MySQLStatementParserDESCRIPTION-178))|(1<<(MySQLStatementParserDIAGNOSTICS-178))|(1<<(MySQLStatementParserDIRECTORY-178))|(1<<(MySQLStatementParserDISABLE-178))|(1<<(MySQLStatementParserDISCARD-178))|(1<<(MySQLStatementParserDISK-178)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(MySQLStatementParserDO-213))|(1<<(MySQLStatementParserDUMPFILE-213))|(1<<(MySQLStatementParserDUPLICATE-213))|(1<<(MySQLStatementParserDYNAMIC-213))|(1<<(MySQLStatementParserENABLE-213))|(1<<(MySQLStatementParserENCRYPTION-213))|(1<<(MySQLStatementParserEND-213))|(1<<(MySQLStatementParserENDS-213))|(1<<(MySQLStatementParserENFORCED-213))|(1<<(MySQLStatementParserENGINE-213))|(1<<(MySQLStatementParserENGINES-213))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-213))|(1<<(MySQLStatementParserENUM-213))|(1<<(MySQLStatementParserERROR-213))|(1<<(MySQLStatementParserERRORS-213))|(1<<(MySQLStatementParserESCAPE-213))|(1<<(MySQLStatementParserEVENT-213))|(1<<(MySQLStatementParserEVENTS-213))|(1<<(MySQLStatementParserEVERY-213))|(1<<(MySQLStatementParserEXCHANGE-213))|(1<<(MySQLStatementParserEXCLUDE-213))|(1<<(MySQLStatementParserEXECUTE-213)))) != 0) || (((_la-247)&-(0x1f+1)) == 0 && ((1<<uint((_la-247)))&((1<<(MySQLStatementParserEXPANSION-247))|(1<<(MySQLStatementParserEXPIRE-247))|(1<<(MySQLStatementParserEXPORT-247))|(1<<(MySQLStatementParserEXTENDED-247))|(1<<(MySQLStatementParserEXTENT_SIZE-247))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-247))|(1<<(MySQLStatementParserFAST-247))|(1<<(MySQLStatementParserFAULTS-247))|(1<<(MySQLStatementParserFILE-247))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-247))|(1<<(MySQLStatementParserFILTER-247))|(1<<(MySQLStatementParserFIRST-247))|(1<<(MySQLStatementParserFIXED-247))|(1<<(MySQLStatementParserFLUSH-247))|(1<<(MySQLStatementParserFOLLOWING-247))|(1<<(MySQLStatementParserFOLLOWS-247))|(1<<(MySQLStatementParserFORMAT-247))|(1<<(MySQLStatementParserFOUND-247))|(1<<(MySQLStatementParserFULL-247)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(MySQLStatementParserGENERAL-279))|(1<<(MySQLStatementParserGEOMETRY-279))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-279))|(1<<(MySQLStatementParserGET_FORMAT-279))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-279))|(1<<(MySQLStatementParserGLOBAL-279))|(1<<(MySQLStatementParserGRANTS-279))|(1<<(MySQLStatementParserGROUP_REPLICATION-279))|(1<<(MySQLStatementParserHANDLER-279))|(1<<(MySQLStatementParserHASH-279))|(1<<(MySQLStatementParserHELP-279))|(1<<(MySQLStatementParserHISTOGRAM-279))|(1<<(MySQLStatementParserHISTORY-279))|(1<<(MySQLStatementParserHOST-279))|(1<<(MySQLStatementParserHOSTS-279))|(1<<(MySQLStatementParserHOUR-279))|(1<<(MySQLStatementParserIDENTIFIED-279))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-279))|(1<<(MySQLStatementParserIMPORT-279)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySQLStatementParserINACTIVE-312))|(1<<(MySQLStatementParserINDEXES-312))|(1<<(MySQLStatementParserINITIAL_SIZE-312))|(1<<(MySQLStatementParserINSERT_METHOD-312))|(1<<(MySQLStatementParserINSTALL-312))|(1<<(MySQLStatementParserINSTANCE-312))|(1<<(MySQLStatementParserINVISIBLE-312))|(1<<(MySQLStatementParserINVOKER-312))|(1<<(MySQLStatementParserIO-312))|(1<<(MySQLStatementParserIPC-312))|(1<<(MySQLStatementParserISOLATION-312))|(1<<(MySQLStatementParserISSUER-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySQLStatementParserJSON-344))|(1<<(MySQLStatementParserJSON_VALUE-344))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-344))|(1<<(MySQLStatementParserLANGUAGE-344))|(1<<(MySQLStatementParserLAST-344))|(1<<(MySQLStatementParserLAST_VALUE-344))|(1<<(MySQLStatementParserLEAVES-344))|(1<<(MySQLStatementParserLESS-344))|(1<<(MySQLStatementParserLEVEL-344))|(1<<(MySQLStatementParserLINESTRING-344))|(1<<(MySQLStatementParserLIST-344))|(1<<(MySQLStatementParserLOCAL-344))|(1<<(MySQLStatementParserLOCKED-344))|(1<<(MySQLStatementParserLOCKS-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySQLStatementParserLOGFILE-376))|(1<<(MySQLStatementParserLOGS-376))|(1<<(MySQLStatementParserMASTER-376))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-376))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-376))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-376))|(1<<(MySQLStatementParserMASTER_DELAY-376))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-376))|(1<<(MySQLStatementParserMASTER_HOST-376))|(1<<(MySQLStatementParserMASTER_LOG_FILE-376))|(1<<(MySQLStatementParserMASTER_LOG_POS-376))|(1<<(MySQLStatementParserMASTER_PASSWORD-376))|(1<<(MySQLStatementParserMASTER_PORT-376))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-376))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-376))|(1<<(MySQLStatementParserMASTER_SERVER_ID-376))|(1<<(MySQLStatementParserMASTER_SSL-376))|(1<<(MySQLStatementParserMASTER_SSL_CA-376))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_CERT-376))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-376))|(1<<(MySQLStatementParserMASTER_SSL_CRL-376))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_KEY-376))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySQLStatementParserMASTER_TLS_VERSION-408))|(1<<(MySQLStatementParserMASTER_USER-408))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-408))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_ROWS-408))|(1<<(MySQLStatementParserMAX_SIZE-408))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-408))|(1<<(MySQLStatementParserMEDIUM-408))|(1<<(MySQLStatementParserMEMBER-408))|(1<<(MySQLStatementParserMEMORY-408))|(1<<(MySQLStatementParserMERGE-408))|(1<<(MySQLStatementParserMESSAGE_TEXT-408))|(1<<(MySQLStatementParserMICROSECOND-408))|(1<<(MySQLStatementParserMIGRATE-408))|(1<<(MySQLStatementParserMINUTE-408))|(1<<(MySQLStatementParserMIN_ROWS-408))|(1<<(MySQLStatementParserMODE-408))|(1<<(MySQLStatementParserMODIFY-408))|(1<<(MySQLStatementParserMONTH-408))|(1<<(MySQLStatementParserMULTILINESTRING-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySQLStatementParserMULTIPOINT-440))|(1<<(MySQLStatementParserMULTIPOLYGON-440))|(1<<(MySQLStatementParserMUTEX-440))|(1<<(MySQLStatementParserMYSQL_ERRNO-440))|(1<<(MySQLStatementParserNAME-440))|(1<<(MySQLStatementParserNAMES-440))|(1<<(MySQLStatementParserNATIONAL-440))|(1<<(MySQLStatementParserNCHAR-440))|(1<<(MySQLStatementParserNDBCLUSTER-440))|(1<<(MySQLStatementParserNESTED-440))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-440))|(1<<(MySQLStatementParserNEVER-440))|(1<<(MySQLStatementParserNEW-440))|(1<<(MySQLStatementParserNEXT-440))|(1<<(MySQLStatementParserNO-440))|(1<<(MySQLStatementParserNODEGROUP-440))|(1<<(MySQLStatementParserNONE-440))|(1<<(MySQLStatementParserNOWAIT-440))|(1<<(MySQLStatementParserNO_WAIT-440))|(1<<(MySQLStatementParserNULLS-440))|(1<<(MySQLStatementParserNUMBER-440))|(1<<(MySQLStatementParserNVARCHAR-440))|(1<<(MySQLStatementParserOFF-440))|(1<<(MySQLStatementParserOFFSET-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySQLStatementParserOJ-472))|(1<<(MySQLStatementParserOLD-472))|(1<<(MySQLStatementParserONE-472))|(1<<(MySQLStatementParserONLY-472))|(1<<(MySQLStatementParserOPEN-472))|(1<<(MySQLStatementParserOPTIONAL-472))|(1<<(MySQLStatementParserOPTIONS-472))|(1<<(MySQLStatementParserORDINALITY-472))|(1<<(MySQLStatementParserORGANIZATION-472))|(1<<(MySQLStatementParserOTHERS-472))|(1<<(MySQLStatementParserOWNER-472))|(1<<(MySQLStatementParserPACK_KEYS-472))|(1<<(MySQLStatementParserPAGE-472))|(1<<(MySQLStatementParserPARSER-472))|(1<<(MySQLStatementParserPARTIAL-472))|(1<<(MySQLStatementParserPARTITIONING-472))|(1<<(MySQLStatementParserPARTITIONS-472))|(1<<(MySQLStatementParserPASSWORD-472))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-472))|(1<<(MySQLStatementParserPATH-472)))) != 0) || (((_la-505)&-(0x1f+1)) == 0 && ((1<<uint((_la-505)))&((1<<(MySQLStatementParserPERSIST-505))|(1<<(MySQLStatementParserPERSIST_ONLY-505))|(1<<(MySQLStatementParserPHASE-505))|(1<<(MySQLStatementParserPLUGIN-505))|(1<<(MySQLStatementParserPLUGINS-505))|(1<<(MySQLStatementParserPLUGIN_DIR-505))|(1<<(MySQLStatementParserPOINT-505))|(1<<(MySQLStatementParserPOLYGON-505))|(1<<(MySQLStatementParserPORT-505))|(1<<(MySQLStatementParserPRECEDES-505))|(1<<(MySQLStatementParserPRECEDING-505))|(1<<(MySQLStatementParserPREPARE-505))|(1<<(MySQLStatementParserPRESERVE-505))|(1<<(MySQLStatementParserPREV-505))|(1<<(MySQLStatementParserPRIVILEGES-505))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-505))|(1<<(MySQLStatementParserPROCESS-505))|(1<<(MySQLStatementParserPROCESSLIST-505))|(1<<(MySQLStatementParserPROFILE-505))|(1<<(MySQLStatementParserPROFILES-505))|(1<<(MySQLStatementParserPROXY-505))|(1<<(MySQLStatementParserQUARTER-505))|(1<<(MySQLStatementParserQUERY-505))|(1<<(MySQLStatementParserQUICK-505))|(1<<(MySQLStatementParserRANDOM-505)))) != 0) || (((_la-538)&-(0x1f+1)) == 0 && ((1<<uint((_la-538)))&((1<<(MySQLStatementParserREAD_ONLY-538))|(1<<(MySQLStatementParserREBUILD-538))|(1<<(MySQLStatementParserRECOVER-538))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-538))|(1<<(MySQLStatementParserREDUNDANT-538))|(1<<(MySQLStatementParserREFERENCE-538))|(1<<(MySQLStatementParserRELAY-538))|(1<<(MySQLStatementParserRELAYLOG-538))|(1<<(MySQLStatementParserRELAY_LOG_FILE-538))|(1<<(MySQLStatementParserRELAY_LOG_POS-538))|(1<<(MySQLStatementParserRELAY_THREAD-538))|(1<<(MySQLStatementParserRELOAD-538))|(1<<(MySQLStatementParserREMOVE-538))|(1<<(MySQLStatementParserREORGANIZE-538))|(1<<(MySQLStatementParserREPAIR-538))|(1<<(MySQLStatementParserREPEATABLE-538))|(1<<(MySQLStatementParserREPLICATE_DO_DB-538))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-538)))) != 0) || (((_la-570)&-(0x1f+1)) == 0 && ((1<<uint((_la-570)))&((1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-570))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-570))|(1<<(MySQLStatementParserREPLICATION-570))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-570))|(1<<(MySQLStatementParserRESET-570))|(1<<(MySQLStatementParserRESOURCE-570))|(1<<(MySQLStatementParserRESPECT-570))|(1<<(MySQLStatementParserRESTART-570))|(1<<(MySQLStatementParserRESTORE-570))|(1<<(MySQLStatementParserRESUME-570))|(1<<(MySQLStatementParserRETAIN-570))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-570))|(1<<(MySQLStatementParserRETURNING-570))|(1<<(MySQLStatementParserRETURNS-570))|(1<<(MySQLStatementParserREUSE-570))|(1<<(MySQLStatementParserREVERSE-570))|(1<<(MySQLStatementParserROLE-570))|(1<<(MySQLStatementParserROLLBACK-570))|(1<<(MySQLStatementParserROLLUP-570))|(1<<(MySQLStatementParserROTATE-570))|(1<<(MySQLStatementParserROUTINE-570))|(1<<(MySQLStatementParserROW_COUNT-570))|(1<<(MySQLStatementParserROW_FORMAT-570)))) != 0) || (((_la-603)&-(0x1f+1)) == 0 && ((1<<uint((_la-603)))&((1<<(MySQLStatementParserRTREE-603))|(1<<(MySQLStatementParserSAVEPOINT-603))|(1<<(MySQLStatementParserSCHEDULE-603))|(1<<(MySQLStatementParserSCHEMA_NAME-603))|(1<<(MySQLStatementParserSECOND-603))|(1<<(MySQLStatementParserSECONDARY-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-603))|(1<<(MySQLStatementParserSECONDARY_LOAD-603))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-603))|(1<<(MySQLStatementParserSECURITY-603))|(1<<(MySQLStatementParserSERIAL-603))|(1<<(MySQLStatementParserSERIALIZABLE-603))|(1<<(MySQLStatementParserSERVER-603))|(1<<(MySQLStatementParserSESSION-603))|(1<<(MySQLStatementParserSHARE-603))|(1<<(MySQLStatementParserSHUTDOWN-603))|(1<<(MySQLStatementParserSIGNED-603))|(1<<(MySQLStatementParserSIMPLE-603))|(1<<(MySQLStatementParserSLAVE-603))|(1<<(MySQLStatementParserSLOW-603)))) != 0) || (((_la-635)&-(0x1f+1)) == 0 && ((1<<uint((_la-635)))&((1<<(MySQLStatementParserSNAPSHOT-635))|(1<<(MySQLStatementParserSOCKET-635))|(1<<(MySQLStatementParserSONAME-635))|(1<<(MySQLStatementParserSOUNDS-635))|(1<<(MySQLStatementParserSOURCE-635))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-635))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-635))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-635))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-635))|(1<<(MySQLStatementParserSQL_NO_CACHE-635))|(1<<(MySQLStatementParserSQL_THREAD-635))|(1<<(MySQLStatementParserSRID-635))|(1<<(MySQLStatementParserSTACKED-635))|(1<<(MySQLStatementParserSTART-635))|(1<<(MySQLStatementParserSTARTS-635))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-635))|(1<<(MySQLStatementParserSTATS_PERSISTENT-635))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-635))|(1<<(MySQLStatementParserSTATUS-635))|(1<<(MySQLStatementParserSTOP-635))|(1<<(MySQLStatementParserSTORAGE-635)))) != 0) || (((_la-669)&-(0x1f+1)) == 0 && ((1<<uint((_la-669)))&((1<<(MySQLStatementParserSTREAM-669))|(1<<(MySQLStatementParserSTRING-669))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-669))|(1<<(MySQLStatementParserSUBJECT-669))|(1<<(MySQLStatementParserSUBPARTITION-669))|(1<<(MySQLStatementParserSUBPARTITIONS-669))|(1<<(MySQLStatementParserSUPER-669))|(1<<(MySQLStatementParserSUSPEND-669))|(1<<(MySQLStatementParserSWAPS-669))|(1<<(MySQLStatementParserSWITCHES-669))|(1<<(MySQLStatementParserTABLES-669))|(1<<(MySQLStatementParserTABLESPACE-669))|(1<<(MySQLStatementParserTABLE_CHECKSUM-669))|(1<<(MySQLStatementParserTABLE_NAME-669))|(1<<(MySQLStatementParserTEMPORARY-669))|(1<<(MySQLStatementParserTEMPTABLE-669))|(1<<(MySQLStatementParserTEXT-669))|(1<<(MySQLStatementParserTHAN-669))|(1<<(MySQLStatementParserTHREAD_PRIORITY-669))|(1<<(MySQLStatementParserTIES-669))|(1<<(MySQLStatementParserTIME-669))|(1<<(MySQLStatementParserTIMESTAMP-669))|(1<<(MySQLStatementParserTIMESTAMP_ADD-669))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-669))|(1<<(MySQLStatementParserTLS-669)))) != 0) || (((_la-703)&-(0x1f+1)) == 0 && ((1<<uint((_la-703)))&((1<<(MySQLStatementParserTRANSACTION-703))|(1<<(MySQLStatementParserTRIGGERS-703))|(1<<(MySQLStatementParserTRUNCATE-703))|(1<<(MySQLStatementParserTYPE-703))|(1<<(MySQLStatementParserTYPES-703))|(1<<(MySQLStatementParserUNBOUNDED-703))|(1<<(MySQLStatementParserUNCOMMITTED-703))|(1<<(MySQLStatementParserUNDEFINED-703))|(1<<(MySQLStatementParserUNDOFILE-703))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-703))|(1<<(MySQLStatementParserUNICODE-703))|(1<<(MySQLStatementParserUNINSTALL-703))|(1<<(MySQLStatementParserUNKNOWN-703))|(1<<(MySQLStatementParserUNTIL-703))|(1<<(MySQLStatementParserUPGRADE-703))|(1<<(MySQLStatementParserUSER-703))|(1<<(MySQLStatementParserUSER_RESOURCES-703))|(1<<(MySQLStatementParserUSE_FRM-703)))) != 0) || (((_la-735)&-(0x1f+1)) == 0 && ((1<<uint((_la-735)))&((1<<(MySQLStatementParserVALIDATION-735))|(1<<(MySQLStatementParserVALUE-735))|(1<<(MySQLStatementParserVARIABLES-735))|(1<<(MySQLStatementParserVCPU-735))|(1<<(MySQLStatementParserVIEW-735))|(1<<(MySQLStatementParserVISIBLE-735))|(1<<(MySQLStatementParserWAIT-735))|(1<<(MySQLStatementParserWARNINGS-735))|(1<<(MySQLStatementParserWEEK-735))|(1<<(MySQLStatementParserWEIGHT_STRING-735))|(1<<(MySQLStatementParserWITHOUT-735))|(1<<(MySQLStatementParserWORK-735))|(1<<(MySQLStatementParserWRAPPER-735))|(1<<(MySQLStatementParserX509-735))|(1<<(MySQLStatementParserXA-735))|(1<<(MySQLStatementParserXID-735))|(1<<(MySQLStatementParserXML-735))|(1<<(MySQLStatementParserYEAR-735)))) != 0) || _la == MySQLStatementParserIDENTIFIER_ || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
			{
				p.SetState(1412)
				p.Fields()
			}

		}
		{
			p.SetState(1415)
			p.Match(MySQLStatementParserRP_)
		}

	}
	{
		p.SetState(1418)
		p.Select()
	}

	return localctx
}

// IUpdateContext is an interface to support dynamic dispatch.
type IUpdateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdateContext differentiates from other interfaces.
	IsUpdateContext()
}

type UpdateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdateContext() *UpdateContext {
	var p = new(UpdateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_update
	return p
}

func (*UpdateContext) IsUpdateContext() {}

func NewUpdateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UpdateContext {
	var p = new(UpdateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_update

	return p
}

func (s *UpdateContext) GetParser() antlr.Parser { return s.parser }

func (s *UpdateContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUPDATE, 0)
}

func (s *UpdateContext) UpdateSpecification_() IUpdateSpecification_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateSpecification_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdateSpecification_Context)
}

func (s *UpdateContext) TableReferences() ITableReferencesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableReferencesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableReferencesContext)
}

func (s *UpdateContext) SetAssignmentsClause() ISetAssignmentsClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetAssignmentsClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetAssignmentsClauseContext)
}

func (s *UpdateContext) WithClause() IWithClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWithClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWithClauseContext)
}

func (s *UpdateContext) WhereClause() IWhereClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *UpdateContext) OrderByClause() IOrderByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderByClauseContext)
}

func (s *UpdateContext) LimitClause() ILimitClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimitClauseContext)
}

func (s *UpdateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UpdateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UpdateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterUpdate(s)
	}
}

func (s *UpdateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitUpdate(s)
	}
}

func (s *UpdateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitUpdate(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Update() (localctx IUpdateContext) {
	this := p
	_ = this

	localctx = NewUpdateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, MySQLStatementParserRULE_update)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1421)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserWITH {
		{
			p.SetState(1420)
			p.WithClause()
		}

	}
	{
		p.SetState(1423)
		p.Match(MySQLStatementParserUPDATE)
	}
	{
		p.SetState(1424)
		p.UpdateSpecification_()
	}
	{
		p.SetState(1425)
		p.TableReferences()
	}
	{
		p.SetState(1426)
		p.SetAssignmentsClause()
	}
	p.SetState(1428)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserWHERE {
		{
			p.SetState(1427)
			p.WhereClause()
		}

	}
	p.SetState(1431)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserORDER {
		{
			p.SetState(1430)
			p.OrderByClause()
		}

	}
	p.SetState(1434)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLIMIT {
		{
			p.SetState(1433)
			p.LimitClause()
		}

	}

	return localctx
}

// IUpdateSpecification_Context is an interface to support dynamic dispatch.
type IUpdateSpecification_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdateSpecification_Context differentiates from other interfaces.
	IsUpdateSpecification_Context()
}

type UpdateSpecification_Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdateSpecification_Context() *UpdateSpecification_Context {
	var p = new(UpdateSpecification_Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_updateSpecification_
	return p
}

func (*UpdateSpecification_Context) IsUpdateSpecification_Context() {}

func NewUpdateSpecification_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UpdateSpecification_Context {
	var p = new(UpdateSpecification_Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_updateSpecification_

	return p
}

func (s *UpdateSpecification_Context) GetParser() antlr.Parser { return s.parser }

func (s *UpdateSpecification_Context) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOW_PRIORITY, 0)
}

func (s *UpdateSpecification_Context) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIGNORE, 0)
}

func (s *UpdateSpecification_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UpdateSpecification_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UpdateSpecification_Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterUpdateSpecification_(s)
	}
}

func (s *UpdateSpecification_Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitUpdateSpecification_(s)
	}
}

func (s *UpdateSpecification_Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitUpdateSpecification_(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) UpdateSpecification_() (localctx IUpdateSpecification_Context) {
	this := p
	_ = this

	localctx = NewUpdateSpecification_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, MySQLStatementParserRULE_updateSpecification_)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1437)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLOW_PRIORITY {
		{
			p.SetState(1436)
			p.Match(MySQLStatementParserLOW_PRIORITY)
		}

	}
	p.SetState(1440)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIGNORE {
		{
			p.SetState(1439)
			p.Match(MySQLStatementParserIGNORE)
		}

	}

	return localctx
}

// IAssignmentContext is an interface to support dynamic dispatch.
type IAssignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentContext differentiates from other interfaces.
	IsAssignmentContext()
}

type AssignmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentContext() *AssignmentContext {
	var p = new(AssignmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_assignment
	return p
}

func (*AssignmentContext) IsAssignmentContext() {}

func NewAssignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentContext {
	var p = new(AssignmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_assignment

	return p
}

func (s *AssignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentContext) ColumnRef() IColumnRefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnRefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnRefContext)
}

func (s *AssignmentContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *AssignmentContext) AssignmentValue() IAssignmentValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentValueContext)
}

func (s *AssignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAssignment(s)
	}
}

func (s *AssignmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAssignment(s)
	}
}

func (s *AssignmentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAssignment(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Assignment() (localctx IAssignmentContext) {
	this := p
	_ = this

	localctx = NewAssignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, MySQLStatementParserRULE_assignment)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1442)
		p.ColumnRef()
	}
	{
		p.SetState(1443)
		p.Match(MySQLStatementParserEQ_)
	}
	{
		p.SetState(1444)
		p.AssignmentValue()
	}

	return localctx
}

// ISetAssignmentsClauseContext is an interface to support dynamic dispatch.
type ISetAssignmentsClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetAssignmentsClauseContext differentiates from other interfaces.
	IsSetAssignmentsClauseContext()
}

type SetAssignmentsClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetAssignmentsClauseContext() *SetAssignmentsClauseContext {
	var p = new(SetAssignmentsClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_setAssignmentsClause
	return p
}

func (*SetAssignmentsClauseContext) IsSetAssignmentsClauseContext() {}

func NewSetAssignmentsClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetAssignmentsClauseContext {
	var p = new(SetAssignmentsClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_setAssignmentsClause

	return p
}

func (s *SetAssignmentsClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *SetAssignmentsClauseContext) SET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSET, 0)
}

func (s *SetAssignmentsClauseContext) AllAssignment() []IAssignmentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssignmentContext)(nil)).Elem())
	var tst = make([]IAssignmentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssignmentContext)
		}
	}

	return tst
}

func (s *SetAssignmentsClauseContext) Assignment(i int) IAssignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssignmentContext)
}

func (s *SetAssignmentsClauseContext) ValueReference() IValueReferenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueReferenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueReferenceContext)
}

func (s *SetAssignmentsClauseContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *SetAssignmentsClauseContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *SetAssignmentsClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetAssignmentsClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetAssignmentsClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSetAssignmentsClause(s)
	}
}

func (s *SetAssignmentsClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSetAssignmentsClause(s)
	}
}

func (s *SetAssignmentsClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSetAssignmentsClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SetAssignmentsClause() (localctx ISetAssignmentsClauseContext) {
	this := p
	_ = this

	localctx = NewSetAssignmentsClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, MySQLStatementParserRULE_setAssignmentsClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1447)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserAS {
		{
			p.SetState(1446)
			p.ValueReference()
		}

	}
	{
		p.SetState(1449)
		p.Match(MySQLStatementParserSET)
	}
	{
		p.SetState(1450)
		p.Assignment()
	}
	p.SetState(1455)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(1451)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(1452)
			p.Assignment()
		}

		p.SetState(1457)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAssignmentValuesContext is an interface to support dynamic dispatch.
type IAssignmentValuesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentValuesContext differentiates from other interfaces.
	IsAssignmentValuesContext()
}

type AssignmentValuesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentValuesContext() *AssignmentValuesContext {
	var p = new(AssignmentValuesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_assignmentValues
	return p
}

func (*AssignmentValuesContext) IsAssignmentValuesContext() {}

func NewAssignmentValuesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentValuesContext {
	var p = new(AssignmentValuesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_assignmentValues

	return p
}

func (s *AssignmentValuesContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentValuesContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *AssignmentValuesContext) AllAssignmentValue() []IAssignmentValueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssignmentValueContext)(nil)).Elem())
	var tst = make([]IAssignmentValueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssignmentValueContext)
		}
	}

	return tst
}

func (s *AssignmentValuesContext) AssignmentValue(i int) IAssignmentValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentValueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssignmentValueContext)
}

func (s *AssignmentValuesContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *AssignmentValuesContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *AssignmentValuesContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *AssignmentValuesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentValuesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentValuesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAssignmentValues(s)
	}
}

func (s *AssignmentValuesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAssignmentValues(s)
	}
}

func (s *AssignmentValuesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAssignmentValues(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AssignmentValues() (localctx IAssignmentValuesContext) {
	this := p
	_ = this

	localctx = NewAssignmentValuesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, MySQLStatementParserRULE_assignmentValues)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1471)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 45, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1458)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(1459)
			p.AssignmentValue()
		}
		p.SetState(1464)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(1460)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(1461)
				p.AssignmentValue()
			}

			p.SetState(1466)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1467)
			p.Match(MySQLStatementParserRP_)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1469)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(1470)
			p.Match(MySQLStatementParserRP_)
		}

	}

	return localctx
}

// IAssignmentValueContext is an interface to support dynamic dispatch.
type IAssignmentValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentValueContext differentiates from other interfaces.
	IsAssignmentValueContext()
}

type AssignmentValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentValueContext() *AssignmentValueContext {
	var p = new(AssignmentValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_assignmentValue
	return p
}

func (*AssignmentValueContext) IsAssignmentValueContext() {}

func NewAssignmentValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentValueContext {
	var p = new(AssignmentValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_assignmentValue

	return p
}

func (s *AssignmentValueContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentValueContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *AssignmentValueContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFAULT, 0)
}

func (s *AssignmentValueContext) BlobValue() IBlobValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlobValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlobValueContext)
}

func (s *AssignmentValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAssignmentValue(s)
	}
}

func (s *AssignmentValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAssignmentValue(s)
	}
}

func (s *AssignmentValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAssignmentValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AssignmentValue() (localctx IAssignmentValueContext) {
	this := p
	_ = this

	localctx = NewAssignmentValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, MySQLStatementParserRULE_assignmentValue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1476)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1473)
			p.expr(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1474)
			p.Match(MySQLStatementParserDEFAULT)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1475)
			p.BlobValue()
		}

	}

	return localctx
}

// IBlobValueContext is an interface to support dynamic dispatch.
type IBlobValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlobValueContext differentiates from other interfaces.
	IsBlobValueContext()
}

type BlobValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlobValueContext() *BlobValueContext {
	var p = new(BlobValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_blobValue
	return p
}

func (*BlobValueContext) IsBlobValueContext() {}

func NewBlobValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlobValueContext {
	var p = new(BlobValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_blobValue

	return p
}

func (s *BlobValueContext) GetParser() antlr.Parser { return s.parser }

func (s *BlobValueContext) UL_BINARY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUL_BINARY, 0)
}

func (s *BlobValueContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *BlobValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlobValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlobValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterBlobValue(s)
	}
}

func (s *BlobValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitBlobValue(s)
	}
}

func (s *BlobValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitBlobValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) BlobValue() (localctx IBlobValueContext) {
	this := p
	_ = this

	localctx = NewBlobValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, MySQLStatementParserRULE_blobValue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1478)
		p.Match(MySQLStatementParserUL_BINARY)
	}
	{
		p.SetState(1479)
		p.String_()
	}

	return localctx
}

// IDeleteContext is an interface to support dynamic dispatch.
type IDeleteContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeleteContext differentiates from other interfaces.
	IsDeleteContext()
}

type DeleteContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeleteContext() *DeleteContext {
	var p = new(DeleteContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_delete
	return p
}

func (*DeleteContext) IsDeleteContext() {}

func NewDeleteContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeleteContext {
	var p = new(DeleteContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_delete

	return p
}

func (s *DeleteContext) GetParser() antlr.Parser { return s.parser }

func (s *DeleteContext) DELETE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDELETE, 0)
}

func (s *DeleteContext) DeleteSpecification() IDeleteSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeleteSpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeleteSpecificationContext)
}

func (s *DeleteContext) SingleTableClause() ISingleTableClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleTableClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleTableClauseContext)
}

func (s *DeleteContext) MultipleTablesClause() IMultipleTablesClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultipleTablesClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultipleTablesClauseContext)
}

func (s *DeleteContext) WhereClause() IWhereClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *DeleteContext) OrderByClause() IOrderByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderByClauseContext)
}

func (s *DeleteContext) LimitClause() ILimitClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimitClauseContext)
}

func (s *DeleteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeleteContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeleteContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDelete(s)
	}
}

func (s *DeleteContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDelete(s)
	}
}

func (s *DeleteContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDelete(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Delete() (localctx IDeleteContext) {
	this := p
	_ = this

	localctx = NewDeleteContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, MySQLStatementParserRULE_delete)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1481)
		p.Match(MySQLStatementParserDELETE)
	}
	{
		p.SetState(1482)
		p.DeleteSpecification()
	}
	p.SetState(1485)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 47, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1483)
			p.SingleTableClause()
		}

	case 2:
		{
			p.SetState(1484)
			p.MultipleTablesClause()
		}

	}
	p.SetState(1488)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserWHERE {
		{
			p.SetState(1487)
			p.WhereClause()
		}

	}
	p.SetState(1491)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserORDER {
		{
			p.SetState(1490)
			p.OrderByClause()
		}

	}
	p.SetState(1494)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLIMIT {
		{
			p.SetState(1493)
			p.LimitClause()
		}

	}

	return localctx
}

// IDeleteSpecificationContext is an interface to support dynamic dispatch.
type IDeleteSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeleteSpecificationContext differentiates from other interfaces.
	IsDeleteSpecificationContext()
}

type DeleteSpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeleteSpecificationContext() *DeleteSpecificationContext {
	var p = new(DeleteSpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_deleteSpecification
	return p
}

func (*DeleteSpecificationContext) IsDeleteSpecificationContext() {}

func NewDeleteSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeleteSpecificationContext {
	var p = new(DeleteSpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_deleteSpecification

	return p
}

func (s *DeleteSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *DeleteSpecificationContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOW_PRIORITY, 0)
}

func (s *DeleteSpecificationContext) QUICK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserQUICK, 0)
}

func (s *DeleteSpecificationContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIGNORE, 0)
}

func (s *DeleteSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeleteSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeleteSpecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDeleteSpecification(s)
	}
}

func (s *DeleteSpecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDeleteSpecification(s)
	}
}

func (s *DeleteSpecificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDeleteSpecification(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DeleteSpecification() (localctx IDeleteSpecificationContext) {
	this := p
	_ = this

	localctx = NewDeleteSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, MySQLStatementParserRULE_deleteSpecification)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1497)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLOW_PRIORITY {
		{
			p.SetState(1496)
			p.Match(MySQLStatementParserLOW_PRIORITY)
		}

	}
	p.SetState(1500)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 52, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1499)
			p.Match(MySQLStatementParserQUICK)
		}

	}
	p.SetState(1503)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIGNORE {
		{
			p.SetState(1502)
			p.Match(MySQLStatementParserIGNORE)
		}

	}

	return localctx
}

// ISingleTableClauseContext is an interface to support dynamic dispatch.
type ISingleTableClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSingleTableClauseContext differentiates from other interfaces.
	IsSingleTableClauseContext()
}

type SingleTableClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySingleTableClauseContext() *SingleTableClauseContext {
	var p = new(SingleTableClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_singleTableClause
	return p
}

func (*SingleTableClauseContext) IsSingleTableClauseContext() {}

func NewSingleTableClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SingleTableClauseContext {
	var p = new(SingleTableClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_singleTableClause

	return p
}

func (s *SingleTableClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *SingleTableClauseContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFROM, 0)
}

func (s *SingleTableClauseContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *SingleTableClauseContext) Alias() IAliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAliasContext)
}

func (s *SingleTableClauseContext) PartitionNames() IPartitionNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionNamesContext)
}

func (s *SingleTableClauseContext) AS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAS, 0)
}

func (s *SingleTableClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SingleTableClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SingleTableClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSingleTableClause(s)
	}
}

func (s *SingleTableClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSingleTableClause(s)
	}
}

func (s *SingleTableClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSingleTableClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SingleTableClause() (localctx ISingleTableClauseContext) {
	this := p
	_ = this

	localctx = NewSingleTableClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, MySQLStatementParserRULE_singleTableClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1505)
		p.Match(MySQLStatementParserFROM)
	}
	{
		p.SetState(1506)
		p.TableName()
	}
	p.SetState(1511)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 55, p.GetParserRuleContext()) == 1 {
		p.SetState(1508)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserAS {
			{
				p.SetState(1507)
				p.Match(MySQLStatementParserAS)
			}

		}
		{
			p.SetState(1510)
			p.Alias()
		}

	}
	p.SetState(1514)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserPARTITION {
		{
			p.SetState(1513)
			p.PartitionNames()
		}

	}

	return localctx
}

// IMultipleTablesClauseContext is an interface to support dynamic dispatch.
type IMultipleTablesClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMultipleTablesClauseContext differentiates from other interfaces.
	IsMultipleTablesClauseContext()
}

type MultipleTablesClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMultipleTablesClauseContext() *MultipleTablesClauseContext {
	var p = new(MultipleTablesClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_multipleTablesClause
	return p
}

func (*MultipleTablesClauseContext) IsMultipleTablesClauseContext() {}

func NewMultipleTablesClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MultipleTablesClauseContext {
	var p = new(MultipleTablesClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_multipleTablesClause

	return p
}

func (s *MultipleTablesClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *MultipleTablesClauseContext) TableAliasRefList() ITableAliasRefListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableAliasRefListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableAliasRefListContext)
}

func (s *MultipleTablesClauseContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFROM, 0)
}

func (s *MultipleTablesClauseContext) TableReferences() ITableReferencesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableReferencesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableReferencesContext)
}

func (s *MultipleTablesClauseContext) USING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUSING, 0)
}

func (s *MultipleTablesClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultipleTablesClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MultipleTablesClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterMultipleTablesClause(s)
	}
}

func (s *MultipleTablesClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitMultipleTablesClause(s)
	}
}

func (s *MultipleTablesClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitMultipleTablesClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) MultipleTablesClause() (localctx IMultipleTablesClauseContext) {
	this := p
	_ = this

	localctx = NewMultipleTablesClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, MySQLStatementParserRULE_multipleTablesClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1525)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserMAX, MySQLStatementParserMIN, MySQLStatementParserSUM, MySQLStatementParserCOUNT, MySQLStatementParserGROUP_CONCAT, MySQLStatementParserCAST, MySQLStatementParserPOSITION, MySQLStatementParserSUBSTRING, MySQLStatementParserSUBSTR, MySQLStatementParserEXTRACT, MySQLStatementParserTRIM, MySQLStatementParserLAST_DAY, MySQLStatementParserTRADITIONAL, MySQLStatementParserTREE, MySQLStatementParserMYSQL_ADMIN, MySQLStatementParserINSTANT, MySQLStatementParserINPLACE, MySQLStatementParserCOPY, MySQLStatementParserUL_BINARY, MySQLStatementParserAUTOCOMMIT, MySQLStatementParserINNODB, MySQLStatementParserREDO_LOG, MySQLStatementParserACCOUNT, MySQLStatementParserACTION, MySQLStatementParserACTIVE, MySQLStatementParserADMIN, MySQLStatementParserAFTER, MySQLStatementParserAGAINST, MySQLStatementParserAGGREGATE, MySQLStatementParserALGORITHM, MySQLStatementParserALWAYS, MySQLStatementParserANY, MySQLStatementParserARRAY, MySQLStatementParserASCII, MySQLStatementParserAT, MySQLStatementParserATTRIBUTE, MySQLStatementParserAUTOEXTEND_SIZE, MySQLStatementParserAUTO_INCREMENT, MySQLStatementParserAVG, MySQLStatementParserAVG_ROW_LENGTH, MySQLStatementParserBACKUP, MySQLStatementParserBEGIN, MySQLStatementParserBINLOG, MySQLStatementParserBIT, MySQLStatementParserBLOCK, MySQLStatementParserBOOL, MySQLStatementParserBOOLEAN, MySQLStatementParserBTREE, MySQLStatementParserBUCKETS, MySQLStatementParserBYTE, MySQLStatementParserCACHE, MySQLStatementParserCASCADED, MySQLStatementParserCATALOG_NAME, MySQLStatementParserCHAIN, MySQLStatementParserCHANGED, MySQLStatementParserCHANNEL, MySQLStatementParserCHARSET, MySQLStatementParserCHECKSUM, MySQLStatementParserCIPHER, MySQLStatementParserCLASS_ORIGIN, MySQLStatementParserCLIENT, MySQLStatementParserCLONE, MySQLStatementParserCLOSE, MySQLStatementParserCOALESCE, MySQLStatementParserCODE, MySQLStatementParserCOLLATION, MySQLStatementParserCOLUMNS, MySQLStatementParserCOLUMN_FORMAT, MySQLStatementParserCOLUMN_NAME, MySQLStatementParserCOMMENT, MySQLStatementParserCOMMIT, MySQLStatementParserCOMMITTED, MySQLStatementParserCOMPACT, MySQLStatementParserCOMPLETION, MySQLStatementParserCOMPONENT, MySQLStatementParserCOMPRESSED, MySQLStatementParserCOMPRESSION, MySQLStatementParserCONCURRENT, MySQLStatementParserCONNECTION, MySQLStatementParserCONSISTENT, MySQLStatementParserCONSTRAINT_CATALOG, MySQLStatementParserCONSTRAINT_NAME, MySQLStatementParserCONSTRAINT_SCHEMA, MySQLStatementParserCONTAINS, MySQLStatementParserCONTEXT, MySQLStatementParserCPU, MySQLStatementParserCURRENT, MySQLStatementParserCURSOR_NAME, MySQLStatementParserDATA, MySQLStatementParserDATAFILE, MySQLStatementParserDATE, MySQLStatementParserDATETIME, MySQLStatementParserDAY, MySQLStatementParserDEALLOCATE, MySQLStatementParserDEFAULT_AUTH, MySQLStatementParserDEFINER, MySQLStatementParserDEFINITION, MySQLStatementParserDELAY_KEY_WRITE, MySQLStatementParserDESCRIPTION, MySQLStatementParserDIAGNOSTICS, MySQLStatementParserDIRECTORY, MySQLStatementParserDISABLE, MySQLStatementParserDISCARD, MySQLStatementParserDISK, MySQLStatementParserDO, MySQLStatementParserDUMPFILE, MySQLStatementParserDUPLICATE, MySQLStatementParserDYNAMIC, MySQLStatementParserENABLE, MySQLStatementParserENCRYPTION, MySQLStatementParserEND, MySQLStatementParserENDS, MySQLStatementParserENFORCED, MySQLStatementParserENGINE, MySQLStatementParserENGINES, MySQLStatementParserENGINE_ATTRIBUTE, MySQLStatementParserENUM, MySQLStatementParserERROR, MySQLStatementParserERRORS, MySQLStatementParserESCAPE, MySQLStatementParserEVENT, MySQLStatementParserEVENTS, MySQLStatementParserEVERY, MySQLStatementParserEXCHANGE, MySQLStatementParserEXCLUDE, MySQLStatementParserEXECUTE, MySQLStatementParserEXPANSION, MySQLStatementParserEXPIRE, MySQLStatementParserEXPORT, MySQLStatementParserEXTENDED, MySQLStatementParserEXTENT_SIZE, MySQLStatementParserFAILED_LOGIN_ATTEMPTS, MySQLStatementParserFAST, MySQLStatementParserFAULTS, MySQLStatementParserFILE, MySQLStatementParserFILE_BLOCK_SIZE, MySQLStatementParserFILTER, MySQLStatementParserFIRST, MySQLStatementParserFIXED, MySQLStatementParserFLUSH, MySQLStatementParserFOLLOWING, MySQLStatementParserFOLLOWS, MySQLStatementParserFORMAT, MySQLStatementParserFOUND, MySQLStatementParserFULL, MySQLStatementParserGENERAL, MySQLStatementParserGEOMETRY, MySQLStatementParserGEOMETRYCOLLECTION, MySQLStatementParserGET_FORMAT, MySQLStatementParserGET_MASTER_PUBLIC_KEY, MySQLStatementParserGLOBAL, MySQLStatementParserGRANTS, MySQLStatementParserGROUP_REPLICATION, MySQLStatementParserHANDLER, MySQLStatementParserHASH, MySQLStatementParserHELP, MySQLStatementParserHISTOGRAM, MySQLStatementParserHISTORY, MySQLStatementParserHOST, MySQLStatementParserHOSTS, MySQLStatementParserHOUR, MySQLStatementParserIDENTIFIED, MySQLStatementParserIGNORE_SERVER_IDS, MySQLStatementParserIMPORT, MySQLStatementParserINACTIVE, MySQLStatementParserINDEXES, MySQLStatementParserINITIAL_SIZE, MySQLStatementParserINSERT_METHOD, MySQLStatementParserINSTALL, MySQLStatementParserINSTANCE, MySQLStatementParserINVISIBLE, MySQLStatementParserINVOKER, MySQLStatementParserIO, MySQLStatementParserIPC, MySQLStatementParserISOLATION, MySQLStatementParserISSUER, MySQLStatementParserJSON, MySQLStatementParserJSON_VALUE, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserLANGUAGE, MySQLStatementParserLAST, MySQLStatementParserLAST_VALUE, MySQLStatementParserLEAVES, MySQLStatementParserLESS, MySQLStatementParserLEVEL, MySQLStatementParserLINESTRING, MySQLStatementParserLIST, MySQLStatementParserLOCAL, MySQLStatementParserLOCKED, MySQLStatementParserLOCKS, MySQLStatementParserLOGFILE, MySQLStatementParserLOGS, MySQLStatementParserMASTER, MySQLStatementParserMASTER_AUTO_POSITION, MySQLStatementParserMASTER_COMPRESSION_ALGORITHM, MySQLStatementParserMASTER_CONNECT_RETRY, MySQLStatementParserMASTER_DELAY, MySQLStatementParserMASTER_HEARTBEAT_PERIOD, MySQLStatementParserMASTER_HOST, MySQLStatementParserMASTER_LOG_FILE, MySQLStatementParserMASTER_LOG_POS, MySQLStatementParserMASTER_PASSWORD, MySQLStatementParserMASTER_PORT, MySQLStatementParserMASTER_PUBLIC_KEY_PATH, MySQLStatementParserMASTER_RETRY_COUNT, MySQLStatementParserMASTER_SERVER_ID, MySQLStatementParserMASTER_SSL, MySQLStatementParserMASTER_SSL_CA, MySQLStatementParserMASTER_SSL_CAPATH, MySQLStatementParserMASTER_SSL_CERT, MySQLStatementParserMASTER_SSL_CIPHER, MySQLStatementParserMASTER_SSL_CRL, MySQLStatementParserMASTER_SSL_CRLPATH, MySQLStatementParserMASTER_SSL_KEY, MySQLStatementParserMASTER_TLS_CIPHERSUITES, MySQLStatementParserMASTER_TLS_VERSION, MySQLStatementParserMASTER_USER, MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL, MySQLStatementParserMAX_CONNECTIONS_PER_HOUR, MySQLStatementParserMAX_QUERIES_PER_HOUR, MySQLStatementParserMAX_ROWS, MySQLStatementParserMAX_SIZE, MySQLStatementParserMAX_UPDATES_PER_HOUR, MySQLStatementParserMAX_USER_CONNECTIONS, MySQLStatementParserMEDIUM, MySQLStatementParserMEMBER, MySQLStatementParserMEMORY, MySQLStatementParserMERGE, MySQLStatementParserMESSAGE_TEXT, MySQLStatementParserMICROSECOND, MySQLStatementParserMIGRATE, MySQLStatementParserMINUTE, MySQLStatementParserMIN_ROWS, MySQLStatementParserMODE, MySQLStatementParserMODIFY, MySQLStatementParserMONTH, MySQLStatementParserMULTILINESTRING, MySQLStatementParserMULTIPOINT, MySQLStatementParserMULTIPOLYGON, MySQLStatementParserMUTEX, MySQLStatementParserMYSQL_ERRNO, MySQLStatementParserNAME, MySQLStatementParserNAMES, MySQLStatementParserNATIONAL, MySQLStatementParserNCHAR, MySQLStatementParserNDBCLUSTER, MySQLStatementParserNESTED, MySQLStatementParserNETWORK_NAMESPACE, MySQLStatementParserNEVER, MySQLStatementParserNEW, MySQLStatementParserNEXT, MySQLStatementParserNO, MySQLStatementParserNODEGROUP, MySQLStatementParserNONE, MySQLStatementParserNOWAIT, MySQLStatementParserNO_WAIT, MySQLStatementParserNULLS, MySQLStatementParserNUMBER, MySQLStatementParserNVARCHAR, MySQLStatementParserOFF, MySQLStatementParserOFFSET, MySQLStatementParserOJ, MySQLStatementParserOLD, MySQLStatementParserONE, MySQLStatementParserONLY, MySQLStatementParserOPEN, MySQLStatementParserOPTIONAL, MySQLStatementParserOPTIONS, MySQLStatementParserORDINALITY, MySQLStatementParserORGANIZATION, MySQLStatementParserOTHERS, MySQLStatementParserOWNER, MySQLStatementParserPACK_KEYS, MySQLStatementParserPAGE, MySQLStatementParserPARSER, MySQLStatementParserPARTIAL, MySQLStatementParserPARTITIONING, MySQLStatementParserPARTITIONS, MySQLStatementParserPASSWORD, MySQLStatementParserPASSWORD_LOCK_TIME, MySQLStatementParserPATH, MySQLStatementParserPERSIST, MySQLStatementParserPERSIST_ONLY, MySQLStatementParserPHASE, MySQLStatementParserPLUGIN, MySQLStatementParserPLUGINS, MySQLStatementParserPLUGIN_DIR, MySQLStatementParserPOINT, MySQLStatementParserPOLYGON, MySQLStatementParserPORT, MySQLStatementParserPRECEDES, MySQLStatementParserPRECEDING, MySQLStatementParserPREPARE, MySQLStatementParserPRESERVE, MySQLStatementParserPREV, MySQLStatementParserPRIVILEGES, MySQLStatementParserPRIVILEGE_CHECKS_USER, MySQLStatementParserPROCESS, MySQLStatementParserPROCESSLIST, MySQLStatementParserPROFILE, MySQLStatementParserPROFILES, MySQLStatementParserPROXY, MySQLStatementParserQUARTER, MySQLStatementParserQUERY, MySQLStatementParserQUICK, MySQLStatementParserRANDOM, MySQLStatementParserREAD_ONLY, MySQLStatementParserREBUILD, MySQLStatementParserRECOVER, MySQLStatementParserREDO_BUFFER_SIZE, MySQLStatementParserREDUNDANT, MySQLStatementParserREFERENCE, MySQLStatementParserRELAY, MySQLStatementParserRELAYLOG, MySQLStatementParserRELAY_LOG_FILE, MySQLStatementParserRELAY_LOG_POS, MySQLStatementParserRELAY_THREAD, MySQLStatementParserRELOAD, MySQLStatementParserREMOVE, MySQLStatementParserREORGANIZE, MySQLStatementParserREPAIR, MySQLStatementParserREPEATABLE, MySQLStatementParserREPLICATE_DO_DB, MySQLStatementParserREPLICATE_DO_TABLE, MySQLStatementParserREPLICATE_IGNORE_DB, MySQLStatementParserREPLICATE_IGNORE_TABLE, MySQLStatementParserREPLICATE_REWRITE_DB, MySQLStatementParserREPLICATE_WILD_DO_TABLE, MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE, MySQLStatementParserREPLICATION, MySQLStatementParserREQUIRE_ROW_FORMAT, MySQLStatementParserRESET, MySQLStatementParserRESOURCE, MySQLStatementParserRESPECT, MySQLStatementParserRESTART, MySQLStatementParserRESTORE, MySQLStatementParserRESUME, MySQLStatementParserRETAIN, MySQLStatementParserRETURNED_SQLSTATE, MySQLStatementParserRETURNING, MySQLStatementParserRETURNS, MySQLStatementParserREUSE, MySQLStatementParserREVERSE, MySQLStatementParserROLE, MySQLStatementParserROLLBACK, MySQLStatementParserROLLUP, MySQLStatementParserROTATE, MySQLStatementParserROUTINE, MySQLStatementParserROW_COUNT, MySQLStatementParserROW_FORMAT, MySQLStatementParserRTREE, MySQLStatementParserSAVEPOINT, MySQLStatementParserSCHEDULE, MySQLStatementParserSCHEMA_NAME, MySQLStatementParserSECOND, MySQLStatementParserSECONDARY, MySQLStatementParserSECONDARY_ENGINE, MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, MySQLStatementParserSECONDARY_LOAD, MySQLStatementParserSECONDARY_UNLOAD, MySQLStatementParserSECURITY, MySQLStatementParserSERIAL, MySQLStatementParserSERIALIZABLE, MySQLStatementParserSERVER, MySQLStatementParserSESSION, MySQLStatementParserSHARE, MySQLStatementParserSHUTDOWN, MySQLStatementParserSIGNED, MySQLStatementParserSIMPLE, MySQLStatementParserSLAVE, MySQLStatementParserSLOW, MySQLStatementParserSNAPSHOT, MySQLStatementParserSOCKET, MySQLStatementParserSONAME, MySQLStatementParserSOUNDS, MySQLStatementParserSOURCE, MySQLStatementParserSQL_AFTER_GTIDS, MySQLStatementParserSQL_AFTER_MTS_GAPS, MySQLStatementParserSQL_BEFORE_GTIDS, MySQLStatementParserSQL_BUFFER_RESULT, MySQLStatementParserSQL_NO_CACHE, MySQLStatementParserSQL_THREAD, MySQLStatementParserSRID, MySQLStatementParserSTACKED, MySQLStatementParserSTART, MySQLStatementParserSTARTS, MySQLStatementParserSTATS_AUTO_RECALC, MySQLStatementParserSTATS_PERSISTENT, MySQLStatementParserSTATS_SAMPLE_PAGES, MySQLStatementParserSTATUS, MySQLStatementParserSTOP, MySQLStatementParserSTORAGE, MySQLStatementParserSTREAM, MySQLStatementParserSTRING, MySQLStatementParserSUBCLASS_ORIGIN, MySQLStatementParserSUBJECT, MySQLStatementParserSUBPARTITION, MySQLStatementParserSUBPARTITIONS, MySQLStatementParserSUPER, MySQLStatementParserSUSPEND, MySQLStatementParserSWAPS, MySQLStatementParserSWITCHES, MySQLStatementParserTABLES, MySQLStatementParserTABLESPACE, MySQLStatementParserTABLE_CHECKSUM, MySQLStatementParserTABLE_NAME, MySQLStatementParserTEMPORARY, MySQLStatementParserTEMPTABLE, MySQLStatementParserTEXT, MySQLStatementParserTHAN, MySQLStatementParserTHREAD_PRIORITY, MySQLStatementParserTIES, MySQLStatementParserTIME, MySQLStatementParserTIMESTAMP, MySQLStatementParserTIMESTAMP_ADD, MySQLStatementParserTIMESTAMP_DIFF, MySQLStatementParserTLS, MySQLStatementParserTRANSACTION, MySQLStatementParserTRIGGERS, MySQLStatementParserTRUNCATE, MySQLStatementParserTYPE, MySQLStatementParserTYPES, MySQLStatementParserUNBOUNDED, MySQLStatementParserUNCOMMITTED, MySQLStatementParserUNDEFINED, MySQLStatementParserUNDOFILE, MySQLStatementParserUNDO_BUFFER_SIZE, MySQLStatementParserUNICODE, MySQLStatementParserUNINSTALL, MySQLStatementParserUNKNOWN, MySQLStatementParserUNTIL, MySQLStatementParserUPGRADE, MySQLStatementParserUSER, MySQLStatementParserUSER_RESOURCES, MySQLStatementParserUSE_FRM, MySQLStatementParserVALIDATION, MySQLStatementParserVALUE, MySQLStatementParserVARIABLES, MySQLStatementParserVCPU, MySQLStatementParserVIEW, MySQLStatementParserVISIBLE, MySQLStatementParserWAIT, MySQLStatementParserWARNINGS, MySQLStatementParserWEEK, MySQLStatementParserWEIGHT_STRING, MySQLStatementParserWITHOUT, MySQLStatementParserWORK, MySQLStatementParserWRAPPER, MySQLStatementParserX509, MySQLStatementParserXA, MySQLStatementParserXID, MySQLStatementParserXML, MySQLStatementParserYEAR, MySQLStatementParserIDENTIFIER_, MySQLStatementParserDOUBLE_QUOTED_TEXT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1516)
			p.TableAliasRefList()
		}
		{
			p.SetState(1517)
			p.Match(MySQLStatementParserFROM)
		}
		{
			p.SetState(1518)
			p.TableReferences()
		}

	case MySQLStatementParserFROM:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1520)
			p.Match(MySQLStatementParserFROM)
		}
		{
			p.SetState(1521)
			p.TableAliasRefList()
		}
		{
			p.SetState(1522)
			p.Match(MySQLStatementParserUSING)
		}
		{
			p.SetState(1523)
			p.TableReferences()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISelectContext is an interface to support dynamic dispatch.
type ISelectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectContext differentiates from other interfaces.
	IsSelectContext()
}

type SelectContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectContext() *SelectContext {
	var p = new(SelectContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_select
	return p
}

func (*SelectContext) IsSelectContext() {}

func NewSelectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectContext {
	var p = new(SelectContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_select

	return p
}

func (s *SelectContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectContext) QueryExpression() IQueryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryExpressionContext)
}

func (s *SelectContext) LockClauseList() ILockClauseListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILockClauseListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILockClauseListContext)
}

func (s *SelectContext) QueryExpressionParens() IQueryExpressionParensContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryExpressionParensContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryExpressionParensContext)
}

func (s *SelectContext) SelectWithInto() ISelectWithIntoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectWithIntoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectWithIntoContext)
}

func (s *SelectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSelect(s)
	}
}

func (s *SelectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSelect(s)
	}
}

func (s *SelectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSelect(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Select() (localctx ISelectContext) {
	this := p
	_ = this

	localctx = NewSelectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, MySQLStatementParserRULE_select)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1533)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 59, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1527)
			p.QueryExpression()
		}
		p.SetState(1529)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserFOR || _la == MySQLStatementParserLOCK {
			{
				p.SetState(1528)
				p.LockClauseList()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1531)
			p.QueryExpressionParens()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1532)
			p.SelectWithInto()
		}

	}

	return localctx
}

// ISelectWithIntoContext is an interface to support dynamic dispatch.
type ISelectWithIntoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectWithIntoContext differentiates from other interfaces.
	IsSelectWithIntoContext()
}

type SelectWithIntoContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectWithIntoContext() *SelectWithIntoContext {
	var p = new(SelectWithIntoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_selectWithInto
	return p
}

func (*SelectWithIntoContext) IsSelectWithIntoContext() {}

func NewSelectWithIntoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectWithIntoContext {
	var p = new(SelectWithIntoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_selectWithInto

	return p
}

func (s *SelectWithIntoContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectWithIntoContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *SelectWithIntoContext) SelectWithInto() ISelectWithIntoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectWithIntoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectWithIntoContext)
}

func (s *SelectWithIntoContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *SelectWithIntoContext) QueryExpression() IQueryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryExpressionContext)
}

func (s *SelectWithIntoContext) SelectIntoExpression() ISelectIntoExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectIntoExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectIntoExpressionContext)
}

func (s *SelectWithIntoContext) LockClauseList() ILockClauseListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILockClauseListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILockClauseListContext)
}

func (s *SelectWithIntoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectWithIntoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectWithIntoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSelectWithInto(s)
	}
}

func (s *SelectWithIntoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSelectWithInto(s)
	}
}

func (s *SelectWithIntoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSelectWithInto(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SelectWithInto() (localctx ISelectWithIntoContext) {
	this := p
	_ = this

	localctx = NewSelectWithIntoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, MySQLStatementParserRULE_selectWithInto)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1548)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 61, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1535)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(1536)
			p.SelectWithInto()
		}
		{
			p.SetState(1537)
			p.Match(MySQLStatementParserRP_)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1539)
			p.QueryExpression()
		}
		{
			p.SetState(1540)
			p.SelectIntoExpression()
		}
		p.SetState(1542)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserFOR || _la == MySQLStatementParserLOCK {
			{
				p.SetState(1541)
				p.LockClauseList()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1544)
			p.QueryExpression()
		}
		{
			p.SetState(1545)
			p.LockClauseList()
		}
		{
			p.SetState(1546)
			p.SelectIntoExpression()
		}

	}

	return localctx
}

// IQueryExpressionContext is an interface to support dynamic dispatch.
type IQueryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQueryExpressionContext differentiates from other interfaces.
	IsQueryExpressionContext()
}

type QueryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQueryExpressionContext() *QueryExpressionContext {
	var p = new(QueryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_queryExpression
	return p
}

func (*QueryExpressionContext) IsQueryExpressionContext() {}

func NewQueryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QueryExpressionContext {
	var p = new(QueryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_queryExpression

	return p
}

func (s *QueryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *QueryExpressionContext) QueryExpressionBody() IQueryExpressionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryExpressionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryExpressionBodyContext)
}

func (s *QueryExpressionContext) QueryExpressionParens() IQueryExpressionParensContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryExpressionParensContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryExpressionParensContext)
}

func (s *QueryExpressionContext) WithClause() IWithClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWithClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWithClauseContext)
}

func (s *QueryExpressionContext) OrderByClause() IOrderByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderByClauseContext)
}

func (s *QueryExpressionContext) LimitClause() ILimitClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimitClauseContext)
}

func (s *QueryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QueryExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterQueryExpression(s)
	}
}

func (s *QueryExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitQueryExpression(s)
	}
}

func (s *QueryExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitQueryExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) QueryExpression() (localctx IQueryExpressionContext) {
	this := p
	_ = this

	localctx = NewQueryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, MySQLStatementParserRULE_queryExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1551)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserWITH {
		{
			p.SetState(1550)
			p.WithClause()
		}

	}
	p.SetState(1555)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 63, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1553)
			p.queryExpressionBody(0)
		}

	case 2:
		{
			p.SetState(1554)
			p.QueryExpressionParens()
		}

	}
	p.SetState(1558)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserORDER {
		{
			p.SetState(1557)
			p.OrderByClause()
		}

	}
	p.SetState(1561)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLIMIT {
		{
			p.SetState(1560)
			p.LimitClause()
		}

	}

	return localctx
}

// IQueryExpressionBodyContext is an interface to support dynamic dispatch.
type IQueryExpressionBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQueryExpressionBodyContext differentiates from other interfaces.
	IsQueryExpressionBodyContext()
}

type QueryExpressionBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQueryExpressionBodyContext() *QueryExpressionBodyContext {
	var p = new(QueryExpressionBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_queryExpressionBody
	return p
}

func (*QueryExpressionBodyContext) IsQueryExpressionBodyContext() {}

func NewQueryExpressionBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QueryExpressionBodyContext {
	var p = new(QueryExpressionBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_queryExpressionBody

	return p
}

func (s *QueryExpressionBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *QueryExpressionBodyContext) QueryPrimary() IQueryPrimaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryPrimaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryPrimaryContext)
}

func (s *QueryExpressionBodyContext) QueryExpressionParens() IQueryExpressionParensContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryExpressionParensContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryExpressionParensContext)
}

func (s *QueryExpressionBodyContext) UnionClause() IUnionClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnionClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnionClauseContext)
}

func (s *QueryExpressionBodyContext) QueryExpressionBody() IQueryExpressionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryExpressionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryExpressionBodyContext)
}

func (s *QueryExpressionBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryExpressionBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QueryExpressionBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterQueryExpressionBody(s)
	}
}

func (s *QueryExpressionBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitQueryExpressionBody(s)
	}
}

func (s *QueryExpressionBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitQueryExpressionBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) QueryExpressionBody() (localctx IQueryExpressionBodyContext) {
	return p.queryExpressionBody(0)
}

func (p *MySQLStatementParser) queryExpressionBody(_p int) (localctx IQueryExpressionBodyContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewQueryExpressionBodyContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IQueryExpressionBodyContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 58
	p.EnterRecursionRule(localctx, 58, MySQLStatementParserRULE_queryExpressionBody, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1568)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserSELECT, MySQLStatementParserTABLE, MySQLStatementParserVALUES:
		{
			p.SetState(1564)
			p.QueryPrimary()
		}

	case MySQLStatementParserLP_:
		{
			p.SetState(1565)
			p.QueryExpressionParens()
		}
		{
			p.SetState(1566)
			p.UnionClause()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1574)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 67, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewQueryExpressionBodyContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, MySQLStatementParserRULE_queryExpressionBody)
			p.SetState(1570)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(1571)
				p.UnionClause()
			}

		}
		p.SetState(1576)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 67, p.GetParserRuleContext())
	}

	return localctx
}

// IUnionClauseContext is an interface to support dynamic dispatch.
type IUnionClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnionClauseContext differentiates from other interfaces.
	IsUnionClauseContext()
}

type UnionClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnionClauseContext() *UnionClauseContext {
	var p = new(UnionClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_unionClause
	return p
}

func (*UnionClauseContext) IsUnionClauseContext() {}

func NewUnionClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnionClauseContext {
	var p = new(UnionClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_unionClause

	return p
}

func (s *UnionClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *UnionClauseContext) UNION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNION, 0)
}

func (s *UnionClauseContext) QueryPrimary() IQueryPrimaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryPrimaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryPrimaryContext)
}

func (s *UnionClauseContext) QueryExpressionParens() IQueryExpressionParensContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryExpressionParensContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryExpressionParensContext)
}

func (s *UnionClauseContext) UnionOption() IUnionOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnionOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnionOptionContext)
}

func (s *UnionClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnionClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnionClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterUnionClause(s)
	}
}

func (s *UnionClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitUnionClause(s)
	}
}

func (s *UnionClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitUnionClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) UnionClause() (localctx IUnionClauseContext) {
	this := p
	_ = this

	localctx = NewUnionClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, MySQLStatementParserRULE_unionClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1577)
		p.Match(MySQLStatementParserUNION)
	}
	p.SetState(1579)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserALL || _la == MySQLStatementParserDISTINCT {
		{
			p.SetState(1578)
			p.UnionOption()
		}

	}
	p.SetState(1583)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserSELECT, MySQLStatementParserTABLE, MySQLStatementParserVALUES:
		{
			p.SetState(1581)
			p.QueryPrimary()
		}

	case MySQLStatementParserLP_:
		{
			p.SetState(1582)
			p.QueryExpressionParens()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IQueryExpressionParensContext is an interface to support dynamic dispatch.
type IQueryExpressionParensContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQueryExpressionParensContext differentiates from other interfaces.
	IsQueryExpressionParensContext()
}

type QueryExpressionParensContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQueryExpressionParensContext() *QueryExpressionParensContext {
	var p = new(QueryExpressionParensContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_queryExpressionParens
	return p
}

func (*QueryExpressionParensContext) IsQueryExpressionParensContext() {}

func NewQueryExpressionParensContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QueryExpressionParensContext {
	var p = new(QueryExpressionParensContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_queryExpressionParens

	return p
}

func (s *QueryExpressionParensContext) GetParser() antlr.Parser { return s.parser }

func (s *QueryExpressionParensContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *QueryExpressionParensContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *QueryExpressionParensContext) QueryExpressionParens() IQueryExpressionParensContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryExpressionParensContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryExpressionParensContext)
}

func (s *QueryExpressionParensContext) QueryExpression() IQueryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryExpressionContext)
}

func (s *QueryExpressionParensContext) LockClauseList() ILockClauseListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILockClauseListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILockClauseListContext)
}

func (s *QueryExpressionParensContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryExpressionParensContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QueryExpressionParensContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterQueryExpressionParens(s)
	}
}

func (s *QueryExpressionParensContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitQueryExpressionParens(s)
	}
}

func (s *QueryExpressionParensContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitQueryExpressionParens(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) QueryExpressionParens() (localctx IQueryExpressionParensContext) {
	this := p
	_ = this

	localctx = NewQueryExpressionParensContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, MySQLStatementParserRULE_queryExpressionParens)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1585)
		p.Match(MySQLStatementParserLP_)
	}
	p.SetState(1591)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 71, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1586)
			p.QueryExpressionParens()
		}

	case 2:
		{
			p.SetState(1587)
			p.QueryExpression()
		}
		p.SetState(1589)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserFOR || _la == MySQLStatementParserLOCK {
			{
				p.SetState(1588)
				p.LockClauseList()
			}

		}

	}
	{
		p.SetState(1593)
		p.Match(MySQLStatementParserRP_)
	}

	return localctx
}

// IQueryPrimaryContext is an interface to support dynamic dispatch.
type IQueryPrimaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQueryPrimaryContext differentiates from other interfaces.
	IsQueryPrimaryContext()
}

type QueryPrimaryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQueryPrimaryContext() *QueryPrimaryContext {
	var p = new(QueryPrimaryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_queryPrimary
	return p
}

func (*QueryPrimaryContext) IsQueryPrimaryContext() {}

func NewQueryPrimaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QueryPrimaryContext {
	var p = new(QueryPrimaryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_queryPrimary

	return p
}

func (s *QueryPrimaryContext) GetParser() antlr.Parser { return s.parser }

func (s *QueryPrimaryContext) QuerySpecification() IQuerySpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuerySpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuerySpecificationContext)
}

func (s *QueryPrimaryContext) TableValueConstructor() ITableValueConstructorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableValueConstructorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableValueConstructorContext)
}

func (s *QueryPrimaryContext) ExplicitTable() IExplicitTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExplicitTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExplicitTableContext)
}

func (s *QueryPrimaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryPrimaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QueryPrimaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterQueryPrimary(s)
	}
}

func (s *QueryPrimaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitQueryPrimary(s)
	}
}

func (s *QueryPrimaryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitQueryPrimary(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) QueryPrimary() (localctx IQueryPrimaryContext) {
	this := p
	_ = this

	localctx = NewQueryPrimaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, MySQLStatementParserRULE_queryPrimary)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1598)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserSELECT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1595)
			p.QuerySpecification()
		}

	case MySQLStatementParserVALUES:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1596)
			p.TableValueConstructor()
		}

	case MySQLStatementParserTABLE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1597)
			p.ExplicitTable()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IQuerySpecificationContext is an interface to support dynamic dispatch.
type IQuerySpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQuerySpecificationContext differentiates from other interfaces.
	IsQuerySpecificationContext()
}

type QuerySpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuerySpecificationContext() *QuerySpecificationContext {
	var p = new(QuerySpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_querySpecification
	return p
}

func (*QuerySpecificationContext) IsQuerySpecificationContext() {}

func NewQuerySpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QuerySpecificationContext {
	var p = new(QuerySpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_querySpecification

	return p
}

func (s *QuerySpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *QuerySpecificationContext) SELECT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSELECT, 0)
}

func (s *QuerySpecificationContext) Projections() IProjectionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProjectionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProjectionsContext)
}

func (s *QuerySpecificationContext) AllSelectSpecification() []ISelectSpecificationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelectSpecificationContext)(nil)).Elem())
	var tst = make([]ISelectSpecificationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelectSpecificationContext)
		}
	}

	return tst
}

func (s *QuerySpecificationContext) SelectSpecification(i int) ISelectSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectSpecificationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelectSpecificationContext)
}

func (s *QuerySpecificationContext) SelectIntoExpression() ISelectIntoExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectIntoExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectIntoExpressionContext)
}

func (s *QuerySpecificationContext) FromClause() IFromClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFromClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFromClauseContext)
}

func (s *QuerySpecificationContext) WhereClause() IWhereClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *QuerySpecificationContext) GroupByClause() IGroupByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroupByClauseContext)
}

func (s *QuerySpecificationContext) HavingClause() IHavingClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHavingClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHavingClauseContext)
}

func (s *QuerySpecificationContext) WindowClause() IWindowClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindowClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindowClauseContext)
}

func (s *QuerySpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QuerySpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QuerySpecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterQuerySpecification(s)
	}
}

func (s *QuerySpecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitQuerySpecification(s)
	}
}

func (s *QuerySpecificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitQuerySpecification(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) QuerySpecification() (localctx IQuerySpecificationContext) {
	this := p
	_ = this

	localctx = NewQuerySpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, MySQLStatementParserRULE_querySpecification)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1600)
		p.Match(MySQLStatementParserSELECT)
	}
	p.SetState(1604)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1601)
				p.SelectSpecification()
			}

		}
		p.SetState(1606)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext())
	}
	{
		p.SetState(1607)
		p.Projections()
	}
	p.SetState(1609)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 74, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1608)
			p.SelectIntoExpression()
		}

	}
	p.SetState(1612)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1611)
			p.FromClause()
		}

	}
	p.SetState(1615)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 76, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1614)
			p.WhereClause()
		}

	}
	p.SetState(1618)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 77, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1617)
			p.GroupByClause()
		}

	}
	p.SetState(1621)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 78, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1620)
			p.HavingClause()
		}

	}
	p.SetState(1624)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 79, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1623)
			p.WindowClause()
		}

	}

	return localctx
}

// ICallContext is an interface to support dynamic dispatch.
type ICallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallContext differentiates from other interfaces.
	IsCallContext()
}

type CallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallContext() *CallContext {
	var p = new(CallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_call
	return p
}

func (*CallContext) IsCallContext() {}

func NewCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallContext {
	var p = new(CallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_call

	return p
}

func (s *CallContext) GetParser() antlr.Parser { return s.parser }

func (s *CallContext) CALL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCALL, 0)
}

func (s *CallContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *CallContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *CallContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *CallContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *CallContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *CallContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *CallContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *CallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCall(s)
	}
}

func (s *CallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCall(s)
	}
}

func (s *CallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Call() (localctx ICallContext) {
	this := p
	_ = this

	localctx = NewCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, MySQLStatementParserRULE_call)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1626)
		p.Match(MySQLStatementParserCALL)
	}
	{
		p.SetState(1627)
		p.Identifier()
	}
	p.SetState(1640)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 82, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1628)
			p.Match(MySQLStatementParserLP_)
		}
		p.SetState(1637)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MySQLStatementParserNOT_)|(1<<MySQLStatementParserTILDE_)|(1<<MySQLStatementParserPLUS_)|(1<<MySQLStatementParserMINUS_)|(1<<MySQLStatementParserLP_))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySQLStatementParserLBE_-32))|(1<<(MySQLStatementParserQUESTION_-32))|(1<<(MySQLStatementParserAT_-32))|(1<<(MySQLStatementParserMAX-32))|(1<<(MySQLStatementParserMIN-32))|(1<<(MySQLStatementParserSUM-32))|(1<<(MySQLStatementParserCOUNT-32))|(1<<(MySQLStatementParserGROUP_CONCAT-32))|(1<<(MySQLStatementParserCAST-32))|(1<<(MySQLStatementParserPOSITION-32))|(1<<(MySQLStatementParserSUBSTRING-32))|(1<<(MySQLStatementParserSUBSTR-32))|(1<<(MySQLStatementParserEXTRACT-32))|(1<<(MySQLStatementParserTRIM-32))|(1<<(MySQLStatementParserLAST_DAY-32))|(1<<(MySQLStatementParserTRADITIONAL-32))|(1<<(MySQLStatementParserTREE-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(MySQLStatementParserMYSQL_ADMIN-64))|(1<<(MySQLStatementParserINSTANT-64))|(1<<(MySQLStatementParserINPLACE-64))|(1<<(MySQLStatementParserCOPY-64))|(1<<(MySQLStatementParserUL_BINARY-64))|(1<<(MySQLStatementParserAUTOCOMMIT-64))|(1<<(MySQLStatementParserINNODB-64))|(1<<(MySQLStatementParserREDO_LOG-64))|(1<<(MySQLStatementParserACCOUNT-64))|(1<<(MySQLStatementParserACTION-64))|(1<<(MySQLStatementParserACTIVE-64))|(1<<(MySQLStatementParserADMIN-64))|(1<<(MySQLStatementParserAFTER-64))|(1<<(MySQLStatementParserAGAINST-64))|(1<<(MySQLStatementParserAGGREGATE-64))|(1<<(MySQLStatementParserALGORITHM-64))|(1<<(MySQLStatementParserALWAYS-64))|(1<<(MySQLStatementParserANY-64))|(1<<(MySQLStatementParserARRAY-64))|(1<<(MySQLStatementParserASCII-64))|(1<<(MySQLStatementParserAT-64))|(1<<(MySQLStatementParserATTRIBUTE-64)))) != 0) || (((_la-96)&-(0x1f+1)) == 0 && ((1<<uint((_la-96)))&((1<<(MySQLStatementParserAUTOEXTEND_SIZE-96))|(1<<(MySQLStatementParserAUTO_INCREMENT-96))|(1<<(MySQLStatementParserAVG-96))|(1<<(MySQLStatementParserBIT_XOR-96))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-96))|(1<<(MySQLStatementParserBACKUP-96))|(1<<(MySQLStatementParserBEGIN-96))|(1<<(MySQLStatementParserBINARY-96))|(1<<(MySQLStatementParserBINLOG-96))|(1<<(MySQLStatementParserBIT-96))|(1<<(MySQLStatementParserBLOCK-96))|(1<<(MySQLStatementParserBOOL-96))|(1<<(MySQLStatementParserBOOLEAN-96))|(1<<(MySQLStatementParserBTREE-96))|(1<<(MySQLStatementParserBUCKETS-96))|(1<<(MySQLStatementParserBYTE-96))|(1<<(MySQLStatementParserCACHE-96))|(1<<(MySQLStatementParserCASCADED-96))|(1<<(MySQLStatementParserCASE-96))|(1<<(MySQLStatementParserCATALOG_NAME-96))|(1<<(MySQLStatementParserCHAIN-96))|(1<<(MySQLStatementParserCHANGED-96))|(1<<(MySQLStatementParserCHANNEL-96)))) != 0) || (((_la-128)&-(0x1f+1)) == 0 && ((1<<uint((_la-128)))&((1<<(MySQLStatementParserCHAR-128))|(1<<(MySQLStatementParserCHARSET-128))|(1<<(MySQLStatementParserCHECKSUM-128))|(1<<(MySQLStatementParserCIPHER-128))|(1<<(MySQLStatementParserCLASS_ORIGIN-128))|(1<<(MySQLStatementParserCLIENT-128))|(1<<(MySQLStatementParserCLONE-128))|(1<<(MySQLStatementParserCLOSE-128))|(1<<(MySQLStatementParserCOALESCE-128))|(1<<(MySQLStatementParserCODE-128))|(1<<(MySQLStatementParserCOLLATION-128))|(1<<(MySQLStatementParserCOLUMNS-128))|(1<<(MySQLStatementParserCOLUMN_FORMAT-128))|(1<<(MySQLStatementParserCOLUMN_NAME-128))|(1<<(MySQLStatementParserCOMMENT-128))|(1<<(MySQLStatementParserCOMMIT-128))|(1<<(MySQLStatementParserCOMMITTED-128))|(1<<(MySQLStatementParserCOMPACT-128))|(1<<(MySQLStatementParserCOMPLETION-128))|(1<<(MySQLStatementParserCOMPONENT-128))|(1<<(MySQLStatementParserCOMPRESSED-128))|(1<<(MySQLStatementParserCOMPRESSION-128))|(1<<(MySQLStatementParserCONCURRENT-128))|(1<<(MySQLStatementParserCONNECTION-128))|(1<<(MySQLStatementParserCONSISTENT-128))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-128)))) != 0) || (((_la-160)&-(0x1f+1)) == 0 && ((1<<uint((_la-160)))&((1<<(MySQLStatementParserCONSTRAINT_NAME-160))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-160))|(1<<(MySQLStatementParserCONTAINS-160))|(1<<(MySQLStatementParserCONTEXT-160))|(1<<(MySQLStatementParserCONVERT-160))|(1<<(MySQLStatementParserCPU-160))|(1<<(MySQLStatementParserCUME_DIST-160))|(1<<(MySQLStatementParserCURRENT-160))|(1<<(MySQLStatementParserCURRENT_DATE-160))|(1<<(MySQLStatementParserCURRENT_TIME-160))|(1<<(MySQLStatementParserCURRENT_TIMESTAMP-160))|(1<<(MySQLStatementParserCURRENT_USER-160))|(1<<(MySQLStatementParserCURSOR_NAME-160))|(1<<(MySQLStatementParserDATA-160))|(1<<(MySQLStatementParserDATABASE-160))|(1<<(MySQLStatementParserDATAFILE-160))|(1<<(MySQLStatementParserDATE-160))|(1<<(MySQLStatementParserDATETIME-160))|(1<<(MySQLStatementParserDAY-160))|(1<<(MySQLStatementParserDEALLOCATE-160)))) != 0) || (((_la-194)&-(0x1f+1)) == 0 && ((1<<uint((_la-194)))&((1<<(MySQLStatementParserDEFAULT_AUTH-194))|(1<<(MySQLStatementParserDEFINER-194))|(1<<(MySQLStatementParserDEFINITION-194))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-194))|(1<<(MySQLStatementParserDENSE_RANK-194))|(1<<(MySQLStatementParserDESCRIPTION-194))|(1<<(MySQLStatementParserDIAGNOSTICS-194))|(1<<(MySQLStatementParserDIRECTORY-194))|(1<<(MySQLStatementParserDISABLE-194))|(1<<(MySQLStatementParserDISCARD-194))|(1<<(MySQLStatementParserDISK-194))|(1<<(MySQLStatementParserDO-194))|(1<<(MySQLStatementParserDUMPFILE-194))|(1<<(MySQLStatementParserDUPLICATE-194))|(1<<(MySQLStatementParserDYNAMIC-194))|(1<<(MySQLStatementParserENABLE-194)))) != 0) || (((_la-226)&-(0x1f+1)) == 0 && ((1<<uint((_la-226)))&((1<<(MySQLStatementParserENCRYPTION-226))|(1<<(MySQLStatementParserEND-226))|(1<<(MySQLStatementParserENDS-226))|(1<<(MySQLStatementParserENFORCED-226))|(1<<(MySQLStatementParserENGINE-226))|(1<<(MySQLStatementParserENGINES-226))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-226))|(1<<(MySQLStatementParserENUM-226))|(1<<(MySQLStatementParserERROR-226))|(1<<(MySQLStatementParserERRORS-226))|(1<<(MySQLStatementParserESCAPE-226))|(1<<(MySQLStatementParserEVENT-226))|(1<<(MySQLStatementParserEVENTS-226))|(1<<(MySQLStatementParserEVERY-226))|(1<<(MySQLStatementParserEXCHANGE-226))|(1<<(MySQLStatementParserEXCLUDE-226))|(1<<(MySQLStatementParserEXECUTE-226))|(1<<(MySQLStatementParserEXISTS-226))|(1<<(MySQLStatementParserEXPANSION-226))|(1<<(MySQLStatementParserEXPIRE-226))|(1<<(MySQLStatementParserEXPORT-226))|(1<<(MySQLStatementParserEXTENDED-226))|(1<<(MySQLStatementParserEXTENT_SIZE-226))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-226))|(1<<(MySQLStatementParserFALSE-226))|(1<<(MySQLStatementParserFAST-226))|(1<<(MySQLStatementParserFAULTS-226)))) != 0) || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(MySQLStatementParserFILE-258))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-258))|(1<<(MySQLStatementParserFILTER-258))|(1<<(MySQLStatementParserFIRST-258))|(1<<(MySQLStatementParserFIRST_VALUE-258))|(1<<(MySQLStatementParserFIXED-258))|(1<<(MySQLStatementParserFLUSH-258))|(1<<(MySQLStatementParserFOLLOWING-258))|(1<<(MySQLStatementParserFOLLOWS-258))|(1<<(MySQLStatementParserFORMAT-258))|(1<<(MySQLStatementParserFOUND-258))|(1<<(MySQLStatementParserFULL-258))|(1<<(MySQLStatementParserGENERAL-258))|(1<<(MySQLStatementParserGEOMETRY-258))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-258))|(1<<(MySQLStatementParserGET_FORMAT-258))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-258))|(1<<(MySQLStatementParserGLOBAL-258))|(1<<(MySQLStatementParserGRANTS-258)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(MySQLStatementParserGROUP_REPLICATION-292))|(1<<(MySQLStatementParserHANDLER-292))|(1<<(MySQLStatementParserHASH-292))|(1<<(MySQLStatementParserHELP-292))|(1<<(MySQLStatementParserHISTOGRAM-292))|(1<<(MySQLStatementParserHISTORY-292))|(1<<(MySQLStatementParserHOST-292))|(1<<(MySQLStatementParserHOSTS-292))|(1<<(MySQLStatementParserHOUR-292))|(1<<(MySQLStatementParserIDENTIFIED-292))|(1<<(MySQLStatementParserIF-292))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-292))|(1<<(MySQLStatementParserIMPORT-292))|(1<<(MySQLStatementParserINACTIVE-292))|(1<<(MySQLStatementParserINDEXES-292))|(1<<(MySQLStatementParserINITIAL_SIZE-292))|(1<<(MySQLStatementParserINSERT_METHOD-292))|(1<<(MySQLStatementParserINSTALL-292))|(1<<(MySQLStatementParserINSTANCE-292)))) != 0) || (((_la-331)&-(0x1f+1)) == 0 && ((1<<uint((_la-331)))&((1<<(MySQLStatementParserINTERVAL-331))|(1<<(MySQLStatementParserINVISIBLE-331))|(1<<(MySQLStatementParserINVOKER-331))|(1<<(MySQLStatementParserIO-331))|(1<<(MySQLStatementParserIPC-331))|(1<<(MySQLStatementParserISOLATION-331))|(1<<(MySQLStatementParserISSUER-331))|(1<<(MySQLStatementParserJSON-331))|(1<<(MySQLStatementParserJSON_VALUE-331))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-331))|(1<<(MySQLStatementParserLAG-331))|(1<<(MySQLStatementParserLANGUAGE-331))|(1<<(MySQLStatementParserLAST-331))|(1<<(MySQLStatementParserLAST_VALUE-331))|(1<<(MySQLStatementParserLEAD-331))|(1<<(MySQLStatementParserLEAVES-331))|(1<<(MySQLStatementParserLEFT-331))|(1<<(MySQLStatementParserLESS-331))|(1<<(MySQLStatementParserLEVEL-331)))) != 0) || (((_la-367)&-(0x1f+1)) == 0 && ((1<<uint((_la-367)))&((1<<(MySQLStatementParserLINESTRING-367))|(1<<(MySQLStatementParserLIST-367))|(1<<(MySQLStatementParserLOCAL-367))|(1<<(MySQLStatementParserLOCALTIME-367))|(1<<(MySQLStatementParserLOCALTIMESTAMP-367))|(1<<(MySQLStatementParserLOCKED-367))|(1<<(MySQLStatementParserLOCKS-367))|(1<<(MySQLStatementParserLOGFILE-367))|(1<<(MySQLStatementParserLOGS-367))|(1<<(MySQLStatementParserMASTER-367))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-367))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-367))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-367))|(1<<(MySQLStatementParserMASTER_DELAY-367))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-367))|(1<<(MySQLStatementParserMASTER_HOST-367))|(1<<(MySQLStatementParserMASTER_LOG_FILE-367))|(1<<(MySQLStatementParserMASTER_LOG_POS-367))|(1<<(MySQLStatementParserMASTER_PASSWORD-367))|(1<<(MySQLStatementParserMASTER_PORT-367))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-367))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-367))|(1<<(MySQLStatementParserMASTER_SERVER_ID-367))|(1<<(MySQLStatementParserMASTER_SSL-367)))) != 0) || (((_la-399)&-(0x1f+1)) == 0 && ((1<<uint((_la-399)))&((1<<(MySQLStatementParserMASTER_SSL_CA-399))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-399))|(1<<(MySQLStatementParserMASTER_SSL_CERT-399))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-399))|(1<<(MySQLStatementParserMASTER_SSL_CRL-399))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-399))|(1<<(MySQLStatementParserMASTER_SSL_KEY-399))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-399))|(1<<(MySQLStatementParserMASTER_TLS_VERSION-399))|(1<<(MySQLStatementParserMASTER_USER-399))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-399))|(1<<(MySQLStatementParserMATCH-399))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-399))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-399))|(1<<(MySQLStatementParserMAX_ROWS-399))|(1<<(MySQLStatementParserMAX_SIZE-399))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-399))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-399))|(1<<(MySQLStatementParserMEDIUM-399))|(1<<(MySQLStatementParserMEMBER-399))|(1<<(MySQLStatementParserMEMORY-399))|(1<<(MySQLStatementParserMERGE-399))|(1<<(MySQLStatementParserMESSAGE_TEXT-399))|(1<<(MySQLStatementParserMICROSECOND-399))|(1<<(MySQLStatementParserMIGRATE-399))|(1<<(MySQLStatementParserMINUTE-399)))) != 0) || (((_la-433)&-(0x1f+1)) == 0 && ((1<<uint((_la-433)))&((1<<(MySQLStatementParserMIN_ROWS-433))|(1<<(MySQLStatementParserMOD-433))|(1<<(MySQLStatementParserMODE-433))|(1<<(MySQLStatementParserMODIFY-433))|(1<<(MySQLStatementParserMONTH-433))|(1<<(MySQLStatementParserMULTILINESTRING-433))|(1<<(MySQLStatementParserMULTIPOINT-433))|(1<<(MySQLStatementParserMULTIPOLYGON-433))|(1<<(MySQLStatementParserMUTEX-433))|(1<<(MySQLStatementParserMYSQL_ERRNO-433))|(1<<(MySQLStatementParserNAME-433))|(1<<(MySQLStatementParserNAMES-433))|(1<<(MySQLStatementParserNATIONAL-433))|(1<<(MySQLStatementParserNCHAR-433))|(1<<(MySQLStatementParserNDBCLUSTER-433))|(1<<(MySQLStatementParserNESTED-433))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-433))|(1<<(MySQLStatementParserNEVER-433))|(1<<(MySQLStatementParserNEW-433))|(1<<(MySQLStatementParserNEXT-433))|(1<<(MySQLStatementParserNO-433))|(1<<(MySQLStatementParserNODEGROUP-433))|(1<<(MySQLStatementParserNONE-433))|(1<<(MySQLStatementParserNOT-433))|(1<<(MySQLStatementParserNOWAIT-433))|(1<<(MySQLStatementParserNO_WAIT-433))|(1<<(MySQLStatementParserNTH_VALUE-433))|(1<<(MySQLStatementParserNTILE-433))|(1<<(MySQLStatementParserNULL-433)))) != 0) || (((_la-465)&-(0x1f+1)) == 0 && ((1<<uint((_la-465)))&((1<<(MySQLStatementParserNULLS-465))|(1<<(MySQLStatementParserNUMBER-465))|(1<<(MySQLStatementParserNVARCHAR-465))|(1<<(MySQLStatementParserOFF-465))|(1<<(MySQLStatementParserOFFSET-465))|(1<<(MySQLStatementParserOJ-465))|(1<<(MySQLStatementParserOLD-465))|(1<<(MySQLStatementParserONE-465))|(1<<(MySQLStatementParserONLY-465))|(1<<(MySQLStatementParserOPEN-465))|(1<<(MySQLStatementParserOPTIONAL-465))|(1<<(MySQLStatementParserOPTIONS-465))|(1<<(MySQLStatementParserORDINALITY-465))|(1<<(MySQLStatementParserORGANIZATION-465))|(1<<(MySQLStatementParserOTHERS-465))|(1<<(MySQLStatementParserOWNER-465))|(1<<(MySQLStatementParserPACK_KEYS-465))|(1<<(MySQLStatementParserPAGE-465))|(1<<(MySQLStatementParserPARSER-465)))) != 0) || (((_la-497)&-(0x1f+1)) == 0 && ((1<<uint((_la-497)))&((1<<(MySQLStatementParserPARTIAL-497))|(1<<(MySQLStatementParserPARTITIONING-497))|(1<<(MySQLStatementParserPARTITIONS-497))|(1<<(MySQLStatementParserPASSWORD-497))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-497))|(1<<(MySQLStatementParserPATH-497))|(1<<(MySQLStatementParserPERCENT_RANK-497))|(1<<(MySQLStatementParserPERSIST-497))|(1<<(MySQLStatementParserPERSIST_ONLY-497))|(1<<(MySQLStatementParserPHASE-497))|(1<<(MySQLStatementParserPLUGIN-497))|(1<<(MySQLStatementParserPLUGINS-497))|(1<<(MySQLStatementParserPLUGIN_DIR-497))|(1<<(MySQLStatementParserPOINT-497))|(1<<(MySQLStatementParserPOLYGON-497))|(1<<(MySQLStatementParserPORT-497))|(1<<(MySQLStatementParserPRECEDES-497))|(1<<(MySQLStatementParserPRECEDING-497))|(1<<(MySQLStatementParserPREPARE-497))|(1<<(MySQLStatementParserPRESERVE-497))|(1<<(MySQLStatementParserPREV-497))|(1<<(MySQLStatementParserPRIVILEGES-497))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-497))|(1<<(MySQLStatementParserPROCESS-497))|(1<<(MySQLStatementParserPROCESSLIST-497))|(1<<(MySQLStatementParserPROFILE-497))|(1<<(MySQLStatementParserPROFILES-497))|(1<<(MySQLStatementParserPROXY-497)))) != 0) || (((_la-530)&-(0x1f+1)) == 0 && ((1<<uint((_la-530)))&((1<<(MySQLStatementParserQUARTER-530))|(1<<(MySQLStatementParserQUERY-530))|(1<<(MySQLStatementParserQUICK-530))|(1<<(MySQLStatementParserRANDOM-530))|(1<<(MySQLStatementParserRANK-530))|(1<<(MySQLStatementParserREAD_ONLY-530))|(1<<(MySQLStatementParserREBUILD-530))|(1<<(MySQLStatementParserRECOVER-530))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-530))|(1<<(MySQLStatementParserREDUNDANT-530))|(1<<(MySQLStatementParserREFERENCE-530))|(1<<(MySQLStatementParserRELAY-530))|(1<<(MySQLStatementParserRELAYLOG-530))|(1<<(MySQLStatementParserRELAY_LOG_FILE-530))|(1<<(MySQLStatementParserRELAY_LOG_POS-530))|(1<<(MySQLStatementParserRELAY_THREAD-530))|(1<<(MySQLStatementParserRELOAD-530))|(1<<(MySQLStatementParserREMOVE-530))|(1<<(MySQLStatementParserREORGANIZE-530))|(1<<(MySQLStatementParserREPAIR-530))|(1<<(MySQLStatementParserREPEATABLE-530)))) != 0) || (((_la-562)&-(0x1f+1)) == 0 && ((1<<uint((_la-562)))&((1<<(MySQLStatementParserREPLACE-562))|(1<<(MySQLStatementParserREPLICATE_DO_DB-562))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-562))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-562))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-562))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-562))|(1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-562))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-562))|(1<<(MySQLStatementParserREPLICATION-562))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-562))|(1<<(MySQLStatementParserRESET-562))|(1<<(MySQLStatementParserRESOURCE-562))|(1<<(MySQLStatementParserRESPECT-562))|(1<<(MySQLStatementParserRESTART-562))|(1<<(MySQLStatementParserRESTORE-562))|(1<<(MySQLStatementParserRESUME-562))|(1<<(MySQLStatementParserRETAIN-562))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-562))|(1<<(MySQLStatementParserRETURNING-562))|(1<<(MySQLStatementParserRETURNS-562))|(1<<(MySQLStatementParserREUSE-562))|(1<<(MySQLStatementParserREVERSE-562))|(1<<(MySQLStatementParserRIGHT-562))|(1<<(MySQLStatementParserROLE-562)))) != 0) || (((_la-594)&-(0x1f+1)) == 0 && ((1<<uint((_la-594)))&((1<<(MySQLStatementParserROLLBACK-594))|(1<<(MySQLStatementParserROLLUP-594))|(1<<(MySQLStatementParserROTATE-594))|(1<<(MySQLStatementParserROUTINE-594))|(1<<(MySQLStatementParserROW-594))|(1<<(MySQLStatementParserROW_COUNT-594))|(1<<(MySQLStatementParserROW_FORMAT-594))|(1<<(MySQLStatementParserROW_NUMBER-594))|(1<<(MySQLStatementParserRTREE-594))|(1<<(MySQLStatementParserSAVEPOINT-594))|(1<<(MySQLStatementParserSCHEDULE-594))|(1<<(MySQLStatementParserSCHEMA-594))|(1<<(MySQLStatementParserSCHEMA_NAME-594))|(1<<(MySQLStatementParserSECOND-594))|(1<<(MySQLStatementParserSECONDARY-594))|(1<<(MySQLStatementParserSECONDARY_ENGINE-594))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-594))|(1<<(MySQLStatementParserSECONDARY_LOAD-594))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-594))|(1<<(MySQLStatementParserSECURITY-594))|(1<<(MySQLStatementParserSERIAL-594))|(1<<(MySQLStatementParserSERIALIZABLE-594))|(1<<(MySQLStatementParserSERVER-594))|(1<<(MySQLStatementParserSESSION-594))|(1<<(MySQLStatementParserSHARE-594)))) != 0) || (((_la-627)&-(0x1f+1)) == 0 && ((1<<uint((_la-627)))&((1<<(MySQLStatementParserSHUTDOWN-627))|(1<<(MySQLStatementParserSIGNED-627))|(1<<(MySQLStatementParserSIMPLE-627))|(1<<(MySQLStatementParserSLAVE-627))|(1<<(MySQLStatementParserSLOW-627))|(1<<(MySQLStatementParserSNAPSHOT-627))|(1<<(MySQLStatementParserSOCKET-627))|(1<<(MySQLStatementParserSONAME-627))|(1<<(MySQLStatementParserSOUNDS-627))|(1<<(MySQLStatementParserSOURCE-627))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-627))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-627))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-627))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-627))|(1<<(MySQLStatementParserSQL_NO_CACHE-627))|(1<<(MySQLStatementParserSQL_THREAD-627))|(1<<(MySQLStatementParserSRID-627))|(1<<(MySQLStatementParserSTACKED-627))|(1<<(MySQLStatementParserSTART-627)))) != 0) || (((_la-660)&-(0x1f+1)) == 0 && ((1<<uint((_la-660)))&((1<<(MySQLStatementParserSTARTS-660))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-660))|(1<<(MySQLStatementParserSTATS_PERSISTENT-660))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-660))|(1<<(MySQLStatementParserSTATUS-660))|(1<<(MySQLStatementParserSTOP-660))|(1<<(MySQLStatementParserSTORAGE-660))|(1<<(MySQLStatementParserSTREAM-660))|(1<<(MySQLStatementParserSTRING-660))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-660))|(1<<(MySQLStatementParserSUBJECT-660))|(1<<(MySQLStatementParserSUBPARTITION-660))|(1<<(MySQLStatementParserSUBPARTITIONS-660))|(1<<(MySQLStatementParserSUPER-660))|(1<<(MySQLStatementParserSUSPEND-660))|(1<<(MySQLStatementParserSWAPS-660))|(1<<(MySQLStatementParserSWITCHES-660))|(1<<(MySQLStatementParserTABLES-660))|(1<<(MySQLStatementParserTABLESPACE-660))|(1<<(MySQLStatementParserTABLE_CHECKSUM-660))|(1<<(MySQLStatementParserTABLE_NAME-660))|(1<<(MySQLStatementParserTEMPORARY-660))|(1<<(MySQLStatementParserTEMPTABLE-660))|(1<<(MySQLStatementParserTEXT-660))|(1<<(MySQLStatementParserTHAN-660))|(1<<(MySQLStatementParserTHREAD_PRIORITY-660)))) != 0) || (((_la-692)&-(0x1f+1)) == 0 && ((1<<uint((_la-692)))&((1<<(MySQLStatementParserTIES-692))|(1<<(MySQLStatementParserTIME-692))|(1<<(MySQLStatementParserTIMESTAMP-692))|(1<<(MySQLStatementParserTIMESTAMP_ADD-692))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-692))|(1<<(MySQLStatementParserTLS-692))|(1<<(MySQLStatementParserTRANSACTION-692))|(1<<(MySQLStatementParserTRIGGERS-692))|(1<<(MySQLStatementParserTRUE-692))|(1<<(MySQLStatementParserTRUNCATE-692))|(1<<(MySQLStatementParserTYPE-692))|(1<<(MySQLStatementParserTYPES-692))|(1<<(MySQLStatementParserUNBOUNDED-692))|(1<<(MySQLStatementParserUNCOMMITTED-692))|(1<<(MySQLStatementParserUNDEFINED-692))|(1<<(MySQLStatementParserUNDOFILE-692))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-692))|(1<<(MySQLStatementParserUNICODE-692))|(1<<(MySQLStatementParserUNINSTALL-692))|(1<<(MySQLStatementParserUNKNOWN-692))|(1<<(MySQLStatementParserUNTIL-692)))) != 0) || (((_la-725)&-(0x1f+1)) == 0 && ((1<<uint((_la-725)))&((1<<(MySQLStatementParserUPGRADE-725))|(1<<(MySQLStatementParserUSER-725))|(1<<(MySQLStatementParserUSER_RESOURCES-725))|(1<<(MySQLStatementParserUSE_FRM-725))|(1<<(MySQLStatementParserUTC_TIMESTAMP-725))|(1<<(MySQLStatementParserVALIDATION-725))|(1<<(MySQLStatementParserVALUE-725))|(1<<(MySQLStatementParserVALUES-725))|(1<<(MySQLStatementParserVARIABLES-725))|(1<<(MySQLStatementParserVCPU-725))|(1<<(MySQLStatementParserVIEW-725))|(1<<(MySQLStatementParserVISIBLE-725))|(1<<(MySQLStatementParserWAIT-725))|(1<<(MySQLStatementParserWARNINGS-725))|(1<<(MySQLStatementParserWEEK-725))|(1<<(MySQLStatementParserWEIGHT_STRING-725))|(1<<(MySQLStatementParserWITHOUT-725)))) != 0) || (((_la-757)&-(0x1f+1)) == 0 && ((1<<uint((_la-757)))&((1<<(MySQLStatementParserWORK-757))|(1<<(MySQLStatementParserWRAPPER-757))|(1<<(MySQLStatementParserX509-757))|(1<<(MySQLStatementParserXA-757))|(1<<(MySQLStatementParserXID-757))|(1<<(MySQLStatementParserXML-757))|(1<<(MySQLStatementParserYEAR-757))|(1<<(MySQLStatementParserIDENTIFIER_-757))|(1<<(MySQLStatementParserSINGLE_QUOTED_TEXT-757))|(1<<(MySQLStatementParserDOUBLE_QUOTED_TEXT-757))|(1<<(MySQLStatementParserNCHAR_TEXT-757))|(1<<(MySQLStatementParserUNDERSCORE_CHARSET-757))|(1<<(MySQLStatementParserNUMBER_-757))|(1<<(MySQLStatementParserHEX_DIGIT_-757))|(1<<(MySQLStatementParserBIT_NUM_-757)))) != 0) {
			{
				p.SetState(1629)
				p.expr(0)
			}
			p.SetState(1634)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySQLStatementParserCOMMA_ {
				{
					p.SetState(1630)
					p.Match(MySQLStatementParserCOMMA_)
				}
				{
					p.SetState(1631)
					p.expr(0)
				}

				p.SetState(1636)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(1639)
			p.Match(MySQLStatementParserRP_)
		}

	}

	return localctx
}

// IDoStatementContext is an interface to support dynamic dispatch.
type IDoStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDoStatementContext differentiates from other interfaces.
	IsDoStatementContext()
}

type DoStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDoStatementContext() *DoStatementContext {
	var p = new(DoStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_doStatement
	return p
}

func (*DoStatementContext) IsDoStatementContext() {}

func NewDoStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DoStatementContext {
	var p = new(DoStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_doStatement

	return p
}

func (s *DoStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DoStatementContext) DO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDO, 0)
}

func (s *DoStatementContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *DoStatementContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *DoStatementContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *DoStatementContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *DoStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DoStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DoStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDoStatement(s)
	}
}

func (s *DoStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDoStatement(s)
	}
}

func (s *DoStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDoStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DoStatement() (localctx IDoStatementContext) {
	this := p
	_ = this

	localctx = NewDoStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, MySQLStatementParserRULE_doStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1642)
		p.Match(MySQLStatementParserDO)
	}
	{
		p.SetState(1643)
		p.expr(0)
	}
	p.SetState(1648)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(1644)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(1645)
			p.expr(0)
		}

		p.SetState(1650)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IHandlerStatementContext is an interface to support dynamic dispatch.
type IHandlerStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHandlerStatementContext differentiates from other interfaces.
	IsHandlerStatementContext()
}

type HandlerStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHandlerStatementContext() *HandlerStatementContext {
	var p = new(HandlerStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_handlerStatement
	return p
}

func (*HandlerStatementContext) IsHandlerStatementContext() {}

func NewHandlerStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HandlerStatementContext {
	var p = new(HandlerStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_handlerStatement

	return p
}

func (s *HandlerStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *HandlerStatementContext) HandlerOpenStatement() IHandlerOpenStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandlerOpenStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHandlerOpenStatementContext)
}

func (s *HandlerStatementContext) HandlerReadIndexStatement() IHandlerReadIndexStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandlerReadIndexStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHandlerReadIndexStatementContext)
}

func (s *HandlerStatementContext) HandlerReadStatement() IHandlerReadStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandlerReadStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHandlerReadStatementContext)
}

func (s *HandlerStatementContext) HandlerCloseStatement() IHandlerCloseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandlerCloseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHandlerCloseStatementContext)
}

func (s *HandlerStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HandlerStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterHandlerStatement(s)
	}
}

func (s *HandlerStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitHandlerStatement(s)
	}
}

func (s *HandlerStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitHandlerStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) HandlerStatement() (localctx IHandlerStatementContext) {
	this := p
	_ = this

	localctx = NewHandlerStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, MySQLStatementParserRULE_handlerStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1655)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 84, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1651)
			p.HandlerOpenStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1652)
			p.HandlerReadIndexStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1653)
			p.HandlerReadStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1654)
			p.HandlerCloseStatement()
		}

	}

	return localctx
}

// IHandlerOpenStatementContext is an interface to support dynamic dispatch.
type IHandlerOpenStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHandlerOpenStatementContext differentiates from other interfaces.
	IsHandlerOpenStatementContext()
}

type HandlerOpenStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHandlerOpenStatementContext() *HandlerOpenStatementContext {
	var p = new(HandlerOpenStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_handlerOpenStatement
	return p
}

func (*HandlerOpenStatementContext) IsHandlerOpenStatementContext() {}

func NewHandlerOpenStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HandlerOpenStatementContext {
	var p = new(HandlerOpenStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_handlerOpenStatement

	return p
}

func (s *HandlerOpenStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *HandlerOpenStatementContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHANDLER, 0)
}

func (s *HandlerOpenStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *HandlerOpenStatementContext) OPEN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOPEN, 0)
}

func (s *HandlerOpenStatementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *HandlerOpenStatementContext) AS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAS, 0)
}

func (s *HandlerOpenStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerOpenStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HandlerOpenStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterHandlerOpenStatement(s)
	}
}

func (s *HandlerOpenStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitHandlerOpenStatement(s)
	}
}

func (s *HandlerOpenStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitHandlerOpenStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) HandlerOpenStatement() (localctx IHandlerOpenStatementContext) {
	this := p
	_ = this

	localctx = NewHandlerOpenStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, MySQLStatementParserRULE_handlerOpenStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1657)
		p.Match(MySQLStatementParserHANDLER)
	}
	{
		p.SetState(1658)
		p.TableName()
	}
	{
		p.SetState(1659)
		p.Match(MySQLStatementParserOPEN)
	}
	p.SetState(1664)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49))|(1<<(MySQLStatementParserGROUP_CONCAT-49))|(1<<(MySQLStatementParserCAST-49))|(1<<(MySQLStatementParserPOSITION-49))|(1<<(MySQLStatementParserSUBSTRING-49))|(1<<(MySQLStatementParserSUBSTR-49))|(1<<(MySQLStatementParserEXTRACT-49))|(1<<(MySQLStatementParserTRIM-49))|(1<<(MySQLStatementParserLAST_DAY-49))|(1<<(MySQLStatementParserTRADITIONAL-49))|(1<<(MySQLStatementParserTREE-49))|(1<<(MySQLStatementParserMYSQL_ADMIN-49))|(1<<(MySQLStatementParserINSTANT-49))|(1<<(MySQLStatementParserINPLACE-49))|(1<<(MySQLStatementParserCOPY-49))|(1<<(MySQLStatementParserUL_BINARY-49))|(1<<(MySQLStatementParserAUTOCOMMIT-49))|(1<<(MySQLStatementParserINNODB-49))|(1<<(MySQLStatementParserREDO_LOG-49))|(1<<(MySQLStatementParserACCOUNT-49))|(1<<(MySQLStatementParserACTION-49))|(1<<(MySQLStatementParserACTIVE-49))|(1<<(MySQLStatementParserADMIN-49))|(1<<(MySQLStatementParserAFTER-49))|(1<<(MySQLStatementParserAGAINST-49)))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(MySQLStatementParserAGGREGATE-81))|(1<<(MySQLStatementParserALGORITHM-81))|(1<<(MySQLStatementParserALWAYS-81))|(1<<(MySQLStatementParserANY-81))|(1<<(MySQLStatementParserARRAY-81))|(1<<(MySQLStatementParserAS-81))|(1<<(MySQLStatementParserASCII-81))|(1<<(MySQLStatementParserAT-81))|(1<<(MySQLStatementParserATTRIBUTE-81))|(1<<(MySQLStatementParserAUTOEXTEND_SIZE-81))|(1<<(MySQLStatementParserAUTO_INCREMENT-81))|(1<<(MySQLStatementParserAVG-81))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-81))|(1<<(MySQLStatementParserBACKUP-81))|(1<<(MySQLStatementParserBEGIN-81))|(1<<(MySQLStatementParserBINLOG-81))|(1<<(MySQLStatementParserBIT-81))|(1<<(MySQLStatementParserBLOCK-81))|(1<<(MySQLStatementParserBOOL-81))|(1<<(MySQLStatementParserBOOLEAN-81)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(MySQLStatementParserBTREE-114))|(1<<(MySQLStatementParserBUCKETS-114))|(1<<(MySQLStatementParserBYTE-114))|(1<<(MySQLStatementParserCACHE-114))|(1<<(MySQLStatementParserCASCADED-114))|(1<<(MySQLStatementParserCATALOG_NAME-114))|(1<<(MySQLStatementParserCHAIN-114))|(1<<(MySQLStatementParserCHANGED-114))|(1<<(MySQLStatementParserCHANNEL-114))|(1<<(MySQLStatementParserCHARSET-114))|(1<<(MySQLStatementParserCHECKSUM-114))|(1<<(MySQLStatementParserCIPHER-114))|(1<<(MySQLStatementParserCLASS_ORIGIN-114))|(1<<(MySQLStatementParserCLIENT-114))|(1<<(MySQLStatementParserCLONE-114))|(1<<(MySQLStatementParserCLOSE-114))|(1<<(MySQLStatementParserCOALESCE-114))|(1<<(MySQLStatementParserCODE-114))|(1<<(MySQLStatementParserCOLLATION-114))|(1<<(MySQLStatementParserCOLUMNS-114))|(1<<(MySQLStatementParserCOLUMN_FORMAT-114))|(1<<(MySQLStatementParserCOLUMN_NAME-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(MySQLStatementParserCOMMENT-146))|(1<<(MySQLStatementParserCOMMIT-146))|(1<<(MySQLStatementParserCOMMITTED-146))|(1<<(MySQLStatementParserCOMPACT-146))|(1<<(MySQLStatementParserCOMPLETION-146))|(1<<(MySQLStatementParserCOMPONENT-146))|(1<<(MySQLStatementParserCOMPRESSED-146))|(1<<(MySQLStatementParserCOMPRESSION-146))|(1<<(MySQLStatementParserCONCURRENT-146))|(1<<(MySQLStatementParserCONNECTION-146))|(1<<(MySQLStatementParserCONSISTENT-146))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-146))|(1<<(MySQLStatementParserCONSTRAINT_NAME-146))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-146))|(1<<(MySQLStatementParserCONTAINS-146))|(1<<(MySQLStatementParserCONTEXT-146))|(1<<(MySQLStatementParserCPU-146))|(1<<(MySQLStatementParserCURRENT-146))|(1<<(MySQLStatementParserCURSOR_NAME-146)))) != 0) || (((_la-178)&-(0x1f+1)) == 0 && ((1<<uint((_la-178)))&((1<<(MySQLStatementParserDATA-178))|(1<<(MySQLStatementParserDATAFILE-178))|(1<<(MySQLStatementParserDATE-178))|(1<<(MySQLStatementParserDATETIME-178))|(1<<(MySQLStatementParserDAY-178))|(1<<(MySQLStatementParserDEALLOCATE-178))|(1<<(MySQLStatementParserDEFAULT_AUTH-178))|(1<<(MySQLStatementParserDEFINER-178))|(1<<(MySQLStatementParserDEFINITION-178))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-178))|(1<<(MySQLStatementParserDESCRIPTION-178))|(1<<(MySQLStatementParserDIAGNOSTICS-178))|(1<<(MySQLStatementParserDIRECTORY-178))|(1<<(MySQLStatementParserDISABLE-178))|(1<<(MySQLStatementParserDISCARD-178))|(1<<(MySQLStatementParserDISK-178)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(MySQLStatementParserDO-213))|(1<<(MySQLStatementParserDUMPFILE-213))|(1<<(MySQLStatementParserDUPLICATE-213))|(1<<(MySQLStatementParserDYNAMIC-213))|(1<<(MySQLStatementParserENABLE-213))|(1<<(MySQLStatementParserENCRYPTION-213))|(1<<(MySQLStatementParserEND-213))|(1<<(MySQLStatementParserENDS-213))|(1<<(MySQLStatementParserENFORCED-213))|(1<<(MySQLStatementParserENGINE-213))|(1<<(MySQLStatementParserENGINES-213))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-213))|(1<<(MySQLStatementParserENUM-213))|(1<<(MySQLStatementParserERROR-213))|(1<<(MySQLStatementParserERRORS-213))|(1<<(MySQLStatementParserESCAPE-213))|(1<<(MySQLStatementParserEVENT-213))|(1<<(MySQLStatementParserEVENTS-213))|(1<<(MySQLStatementParserEVERY-213))|(1<<(MySQLStatementParserEXCHANGE-213))|(1<<(MySQLStatementParserEXCLUDE-213))|(1<<(MySQLStatementParserEXECUTE-213)))) != 0) || (((_la-247)&-(0x1f+1)) == 0 && ((1<<uint((_la-247)))&((1<<(MySQLStatementParserEXPANSION-247))|(1<<(MySQLStatementParserEXPIRE-247))|(1<<(MySQLStatementParserEXPORT-247))|(1<<(MySQLStatementParserEXTENDED-247))|(1<<(MySQLStatementParserEXTENT_SIZE-247))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-247))|(1<<(MySQLStatementParserFAST-247))|(1<<(MySQLStatementParserFAULTS-247))|(1<<(MySQLStatementParserFILE-247))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-247))|(1<<(MySQLStatementParserFILTER-247))|(1<<(MySQLStatementParserFIRST-247))|(1<<(MySQLStatementParserFIXED-247))|(1<<(MySQLStatementParserFLUSH-247))|(1<<(MySQLStatementParserFOLLOWING-247))|(1<<(MySQLStatementParserFOLLOWS-247))|(1<<(MySQLStatementParserFORMAT-247))|(1<<(MySQLStatementParserFOUND-247))|(1<<(MySQLStatementParserFULL-247)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(MySQLStatementParserGENERAL-279))|(1<<(MySQLStatementParserGEOMETRY-279))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-279))|(1<<(MySQLStatementParserGET_FORMAT-279))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-279))|(1<<(MySQLStatementParserGLOBAL-279))|(1<<(MySQLStatementParserGRANTS-279))|(1<<(MySQLStatementParserGROUP_REPLICATION-279))|(1<<(MySQLStatementParserHANDLER-279))|(1<<(MySQLStatementParserHASH-279))|(1<<(MySQLStatementParserHELP-279))|(1<<(MySQLStatementParserHISTOGRAM-279))|(1<<(MySQLStatementParserHISTORY-279))|(1<<(MySQLStatementParserHOST-279))|(1<<(MySQLStatementParserHOSTS-279))|(1<<(MySQLStatementParserHOUR-279))|(1<<(MySQLStatementParserIDENTIFIED-279))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-279))|(1<<(MySQLStatementParserIMPORT-279)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySQLStatementParserINACTIVE-312))|(1<<(MySQLStatementParserINDEXES-312))|(1<<(MySQLStatementParserINITIAL_SIZE-312))|(1<<(MySQLStatementParserINSERT_METHOD-312))|(1<<(MySQLStatementParserINSTALL-312))|(1<<(MySQLStatementParserINSTANCE-312))|(1<<(MySQLStatementParserINVISIBLE-312))|(1<<(MySQLStatementParserINVOKER-312))|(1<<(MySQLStatementParserIO-312))|(1<<(MySQLStatementParserIPC-312))|(1<<(MySQLStatementParserISOLATION-312))|(1<<(MySQLStatementParserISSUER-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySQLStatementParserJSON-344))|(1<<(MySQLStatementParserJSON_VALUE-344))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-344))|(1<<(MySQLStatementParserLANGUAGE-344))|(1<<(MySQLStatementParserLAST-344))|(1<<(MySQLStatementParserLAST_VALUE-344))|(1<<(MySQLStatementParserLEAVES-344))|(1<<(MySQLStatementParserLESS-344))|(1<<(MySQLStatementParserLEVEL-344))|(1<<(MySQLStatementParserLINESTRING-344))|(1<<(MySQLStatementParserLIST-344))|(1<<(MySQLStatementParserLOCAL-344))|(1<<(MySQLStatementParserLOCKED-344))|(1<<(MySQLStatementParserLOCKS-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySQLStatementParserLOGFILE-376))|(1<<(MySQLStatementParserLOGS-376))|(1<<(MySQLStatementParserMASTER-376))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-376))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-376))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-376))|(1<<(MySQLStatementParserMASTER_DELAY-376))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-376))|(1<<(MySQLStatementParserMASTER_HOST-376))|(1<<(MySQLStatementParserMASTER_LOG_FILE-376))|(1<<(MySQLStatementParserMASTER_LOG_POS-376))|(1<<(MySQLStatementParserMASTER_PASSWORD-376))|(1<<(MySQLStatementParserMASTER_PORT-376))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-376))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-376))|(1<<(MySQLStatementParserMASTER_SERVER_ID-376))|(1<<(MySQLStatementParserMASTER_SSL-376))|(1<<(MySQLStatementParserMASTER_SSL_CA-376))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_CERT-376))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-376))|(1<<(MySQLStatementParserMASTER_SSL_CRL-376))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_KEY-376))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySQLStatementParserMASTER_TLS_VERSION-408))|(1<<(MySQLStatementParserMASTER_USER-408))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-408))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_ROWS-408))|(1<<(MySQLStatementParserMAX_SIZE-408))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-408))|(1<<(MySQLStatementParserMEDIUM-408))|(1<<(MySQLStatementParserMEMBER-408))|(1<<(MySQLStatementParserMEMORY-408))|(1<<(MySQLStatementParserMERGE-408))|(1<<(MySQLStatementParserMESSAGE_TEXT-408))|(1<<(MySQLStatementParserMICROSECOND-408))|(1<<(MySQLStatementParserMIGRATE-408))|(1<<(MySQLStatementParserMINUTE-408))|(1<<(MySQLStatementParserMIN_ROWS-408))|(1<<(MySQLStatementParserMODE-408))|(1<<(MySQLStatementParserMODIFY-408))|(1<<(MySQLStatementParserMONTH-408))|(1<<(MySQLStatementParserMULTILINESTRING-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySQLStatementParserMULTIPOINT-440))|(1<<(MySQLStatementParserMULTIPOLYGON-440))|(1<<(MySQLStatementParserMUTEX-440))|(1<<(MySQLStatementParserMYSQL_ERRNO-440))|(1<<(MySQLStatementParserNAME-440))|(1<<(MySQLStatementParserNAMES-440))|(1<<(MySQLStatementParserNATIONAL-440))|(1<<(MySQLStatementParserNCHAR-440))|(1<<(MySQLStatementParserNDBCLUSTER-440))|(1<<(MySQLStatementParserNESTED-440))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-440))|(1<<(MySQLStatementParserNEVER-440))|(1<<(MySQLStatementParserNEW-440))|(1<<(MySQLStatementParserNEXT-440))|(1<<(MySQLStatementParserNO-440))|(1<<(MySQLStatementParserNODEGROUP-440))|(1<<(MySQLStatementParserNONE-440))|(1<<(MySQLStatementParserNOWAIT-440))|(1<<(MySQLStatementParserNO_WAIT-440))|(1<<(MySQLStatementParserNULLS-440))|(1<<(MySQLStatementParserNUMBER-440))|(1<<(MySQLStatementParserNVARCHAR-440))|(1<<(MySQLStatementParserOFF-440))|(1<<(MySQLStatementParserOFFSET-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySQLStatementParserOJ-472))|(1<<(MySQLStatementParserOLD-472))|(1<<(MySQLStatementParserONE-472))|(1<<(MySQLStatementParserONLY-472))|(1<<(MySQLStatementParserOPEN-472))|(1<<(MySQLStatementParserOPTIONAL-472))|(1<<(MySQLStatementParserOPTIONS-472))|(1<<(MySQLStatementParserORDINALITY-472))|(1<<(MySQLStatementParserORGANIZATION-472))|(1<<(MySQLStatementParserOTHERS-472))|(1<<(MySQLStatementParserOWNER-472))|(1<<(MySQLStatementParserPACK_KEYS-472))|(1<<(MySQLStatementParserPAGE-472))|(1<<(MySQLStatementParserPARSER-472))|(1<<(MySQLStatementParserPARTIAL-472))|(1<<(MySQLStatementParserPARTITIONING-472))|(1<<(MySQLStatementParserPARTITIONS-472))|(1<<(MySQLStatementParserPASSWORD-472))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-472))|(1<<(MySQLStatementParserPATH-472)))) != 0) || (((_la-505)&-(0x1f+1)) == 0 && ((1<<uint((_la-505)))&((1<<(MySQLStatementParserPERSIST-505))|(1<<(MySQLStatementParserPERSIST_ONLY-505))|(1<<(MySQLStatementParserPHASE-505))|(1<<(MySQLStatementParserPLUGIN-505))|(1<<(MySQLStatementParserPLUGINS-505))|(1<<(MySQLStatementParserPLUGIN_DIR-505))|(1<<(MySQLStatementParserPOINT-505))|(1<<(MySQLStatementParserPOLYGON-505))|(1<<(MySQLStatementParserPORT-505))|(1<<(MySQLStatementParserPRECEDES-505))|(1<<(MySQLStatementParserPRECEDING-505))|(1<<(MySQLStatementParserPREPARE-505))|(1<<(MySQLStatementParserPRESERVE-505))|(1<<(MySQLStatementParserPREV-505))|(1<<(MySQLStatementParserPRIVILEGES-505))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-505))|(1<<(MySQLStatementParserPROCESS-505))|(1<<(MySQLStatementParserPROCESSLIST-505))|(1<<(MySQLStatementParserPROFILE-505))|(1<<(MySQLStatementParserPROFILES-505))|(1<<(MySQLStatementParserPROXY-505))|(1<<(MySQLStatementParserQUARTER-505))|(1<<(MySQLStatementParserQUERY-505))|(1<<(MySQLStatementParserQUICK-505))|(1<<(MySQLStatementParserRANDOM-505)))) != 0) || (((_la-538)&-(0x1f+1)) == 0 && ((1<<uint((_la-538)))&((1<<(MySQLStatementParserREAD_ONLY-538))|(1<<(MySQLStatementParserREBUILD-538))|(1<<(MySQLStatementParserRECOVER-538))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-538))|(1<<(MySQLStatementParserREDUNDANT-538))|(1<<(MySQLStatementParserREFERENCE-538))|(1<<(MySQLStatementParserRELAY-538))|(1<<(MySQLStatementParserRELAYLOG-538))|(1<<(MySQLStatementParserRELAY_LOG_FILE-538))|(1<<(MySQLStatementParserRELAY_LOG_POS-538))|(1<<(MySQLStatementParserRELAY_THREAD-538))|(1<<(MySQLStatementParserRELOAD-538))|(1<<(MySQLStatementParserREMOVE-538))|(1<<(MySQLStatementParserREORGANIZE-538))|(1<<(MySQLStatementParserREPAIR-538))|(1<<(MySQLStatementParserREPEATABLE-538))|(1<<(MySQLStatementParserREPLICATE_DO_DB-538))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-538)))) != 0) || (((_la-570)&-(0x1f+1)) == 0 && ((1<<uint((_la-570)))&((1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-570))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-570))|(1<<(MySQLStatementParserREPLICATION-570))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-570))|(1<<(MySQLStatementParserRESET-570))|(1<<(MySQLStatementParserRESOURCE-570))|(1<<(MySQLStatementParserRESPECT-570))|(1<<(MySQLStatementParserRESTART-570))|(1<<(MySQLStatementParserRESTORE-570))|(1<<(MySQLStatementParserRESUME-570))|(1<<(MySQLStatementParserRETAIN-570))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-570))|(1<<(MySQLStatementParserRETURNING-570))|(1<<(MySQLStatementParserRETURNS-570))|(1<<(MySQLStatementParserREUSE-570))|(1<<(MySQLStatementParserREVERSE-570))|(1<<(MySQLStatementParserROLE-570))|(1<<(MySQLStatementParserROLLBACK-570))|(1<<(MySQLStatementParserROLLUP-570))|(1<<(MySQLStatementParserROTATE-570))|(1<<(MySQLStatementParserROUTINE-570))|(1<<(MySQLStatementParserROW_COUNT-570))|(1<<(MySQLStatementParserROW_FORMAT-570)))) != 0) || (((_la-603)&-(0x1f+1)) == 0 && ((1<<uint((_la-603)))&((1<<(MySQLStatementParserRTREE-603))|(1<<(MySQLStatementParserSAVEPOINT-603))|(1<<(MySQLStatementParserSCHEDULE-603))|(1<<(MySQLStatementParserSCHEMA_NAME-603))|(1<<(MySQLStatementParserSECOND-603))|(1<<(MySQLStatementParserSECONDARY-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-603))|(1<<(MySQLStatementParserSECONDARY_LOAD-603))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-603))|(1<<(MySQLStatementParserSECURITY-603))|(1<<(MySQLStatementParserSERIAL-603))|(1<<(MySQLStatementParserSERIALIZABLE-603))|(1<<(MySQLStatementParserSERVER-603))|(1<<(MySQLStatementParserSESSION-603))|(1<<(MySQLStatementParserSHARE-603))|(1<<(MySQLStatementParserSHUTDOWN-603))|(1<<(MySQLStatementParserSIGNED-603))|(1<<(MySQLStatementParserSIMPLE-603))|(1<<(MySQLStatementParserSLAVE-603))|(1<<(MySQLStatementParserSLOW-603)))) != 0) || (((_la-635)&-(0x1f+1)) == 0 && ((1<<uint((_la-635)))&((1<<(MySQLStatementParserSNAPSHOT-635))|(1<<(MySQLStatementParserSOCKET-635))|(1<<(MySQLStatementParserSONAME-635))|(1<<(MySQLStatementParserSOUNDS-635))|(1<<(MySQLStatementParserSOURCE-635))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-635))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-635))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-635))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-635))|(1<<(MySQLStatementParserSQL_NO_CACHE-635))|(1<<(MySQLStatementParserSQL_THREAD-635))|(1<<(MySQLStatementParserSRID-635))|(1<<(MySQLStatementParserSTACKED-635))|(1<<(MySQLStatementParserSTART-635))|(1<<(MySQLStatementParserSTARTS-635))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-635))|(1<<(MySQLStatementParserSTATS_PERSISTENT-635))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-635))|(1<<(MySQLStatementParserSTATUS-635))|(1<<(MySQLStatementParserSTOP-635))|(1<<(MySQLStatementParserSTORAGE-635)))) != 0) || (((_la-669)&-(0x1f+1)) == 0 && ((1<<uint((_la-669)))&((1<<(MySQLStatementParserSTREAM-669))|(1<<(MySQLStatementParserSTRING-669))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-669))|(1<<(MySQLStatementParserSUBJECT-669))|(1<<(MySQLStatementParserSUBPARTITION-669))|(1<<(MySQLStatementParserSUBPARTITIONS-669))|(1<<(MySQLStatementParserSUPER-669))|(1<<(MySQLStatementParserSUSPEND-669))|(1<<(MySQLStatementParserSWAPS-669))|(1<<(MySQLStatementParserSWITCHES-669))|(1<<(MySQLStatementParserTABLES-669))|(1<<(MySQLStatementParserTABLESPACE-669))|(1<<(MySQLStatementParserTABLE_CHECKSUM-669))|(1<<(MySQLStatementParserTABLE_NAME-669))|(1<<(MySQLStatementParserTEMPORARY-669))|(1<<(MySQLStatementParserTEMPTABLE-669))|(1<<(MySQLStatementParserTEXT-669))|(1<<(MySQLStatementParserTHAN-669))|(1<<(MySQLStatementParserTHREAD_PRIORITY-669))|(1<<(MySQLStatementParserTIES-669))|(1<<(MySQLStatementParserTIME-669))|(1<<(MySQLStatementParserTIMESTAMP-669))|(1<<(MySQLStatementParserTIMESTAMP_ADD-669))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-669))|(1<<(MySQLStatementParserTLS-669)))) != 0) || (((_la-703)&-(0x1f+1)) == 0 && ((1<<uint((_la-703)))&((1<<(MySQLStatementParserTRANSACTION-703))|(1<<(MySQLStatementParserTRIGGERS-703))|(1<<(MySQLStatementParserTRUNCATE-703))|(1<<(MySQLStatementParserTYPE-703))|(1<<(MySQLStatementParserTYPES-703))|(1<<(MySQLStatementParserUNBOUNDED-703))|(1<<(MySQLStatementParserUNCOMMITTED-703))|(1<<(MySQLStatementParserUNDEFINED-703))|(1<<(MySQLStatementParserUNDOFILE-703))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-703))|(1<<(MySQLStatementParserUNICODE-703))|(1<<(MySQLStatementParserUNINSTALL-703))|(1<<(MySQLStatementParserUNKNOWN-703))|(1<<(MySQLStatementParserUNTIL-703))|(1<<(MySQLStatementParserUPGRADE-703))|(1<<(MySQLStatementParserUSER-703))|(1<<(MySQLStatementParserUSER_RESOURCES-703))|(1<<(MySQLStatementParserUSE_FRM-703)))) != 0) || (((_la-735)&-(0x1f+1)) == 0 && ((1<<uint((_la-735)))&((1<<(MySQLStatementParserVALIDATION-735))|(1<<(MySQLStatementParserVALUE-735))|(1<<(MySQLStatementParserVARIABLES-735))|(1<<(MySQLStatementParserVCPU-735))|(1<<(MySQLStatementParserVIEW-735))|(1<<(MySQLStatementParserVISIBLE-735))|(1<<(MySQLStatementParserWAIT-735))|(1<<(MySQLStatementParserWARNINGS-735))|(1<<(MySQLStatementParserWEEK-735))|(1<<(MySQLStatementParserWEIGHT_STRING-735))|(1<<(MySQLStatementParserWITHOUT-735))|(1<<(MySQLStatementParserWORK-735))|(1<<(MySQLStatementParserWRAPPER-735))|(1<<(MySQLStatementParserX509-735))|(1<<(MySQLStatementParserXA-735))|(1<<(MySQLStatementParserXID-735))|(1<<(MySQLStatementParserXML-735))|(1<<(MySQLStatementParserYEAR-735)))) != 0) || _la == MySQLStatementParserIDENTIFIER_ || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
		p.SetState(1661)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserAS {
			{
				p.SetState(1660)
				p.Match(MySQLStatementParserAS)
			}

		}
		{
			p.SetState(1663)
			p.Identifier()
		}

	}

	return localctx
}

// IHandlerReadIndexStatementContext is an interface to support dynamic dispatch.
type IHandlerReadIndexStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHandlerReadIndexStatementContext differentiates from other interfaces.
	IsHandlerReadIndexStatementContext()
}

type HandlerReadIndexStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHandlerReadIndexStatementContext() *HandlerReadIndexStatementContext {
	var p = new(HandlerReadIndexStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_handlerReadIndexStatement
	return p
}

func (*HandlerReadIndexStatementContext) IsHandlerReadIndexStatementContext() {}

func NewHandlerReadIndexStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HandlerReadIndexStatementContext {
	var p = new(HandlerReadIndexStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_handlerReadIndexStatement

	return p
}

func (s *HandlerReadIndexStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *HandlerReadIndexStatementContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHANDLER, 0)
}

func (s *HandlerReadIndexStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *HandlerReadIndexStatementContext) READ() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREAD, 0)
}

func (s *HandlerReadIndexStatementContext) IndexName() IIndexNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexNameContext)
}

func (s *HandlerReadIndexStatementContext) ComparisonOperator() IComparisonOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparisonOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparisonOperatorContext)
}

func (s *HandlerReadIndexStatementContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *HandlerReadIndexStatementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *HandlerReadIndexStatementContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *HandlerReadIndexStatementContext) FIRST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFIRST, 0)
}

func (s *HandlerReadIndexStatementContext) NEXT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNEXT, 0)
}

func (s *HandlerReadIndexStatementContext) PREV() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPREV, 0)
}

func (s *HandlerReadIndexStatementContext) LAST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLAST, 0)
}

func (s *HandlerReadIndexStatementContext) WhereClause() IWhereClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *HandlerReadIndexStatementContext) LimitClause() ILimitClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimitClauseContext)
}

func (s *HandlerReadIndexStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerReadIndexStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HandlerReadIndexStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterHandlerReadIndexStatement(s)
	}
}

func (s *HandlerReadIndexStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitHandlerReadIndexStatement(s)
	}
}

func (s *HandlerReadIndexStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitHandlerReadIndexStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) HandlerReadIndexStatement() (localctx IHandlerReadIndexStatementContext) {
	this := p
	_ = this

	localctx = NewHandlerReadIndexStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, MySQLStatementParserRULE_handlerReadIndexStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1666)
		p.Match(MySQLStatementParserHANDLER)
	}
	{
		p.SetState(1667)
		p.TableName()
	}
	{
		p.SetState(1668)
		p.Match(MySQLStatementParserREAD)
	}
	{
		p.SetState(1669)
		p.IndexName()
	}
	p.SetState(1676)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserEQ_, MySQLStatementParserNEQ_, MySQLStatementParserGT_, MySQLStatementParserGTE_, MySQLStatementParserLT_, MySQLStatementParserLTE_:
		{
			p.SetState(1670)
			p.ComparisonOperator()
		}
		{
			p.SetState(1671)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(1672)
			p.Identifier()
		}
		{
			p.SetState(1673)
			p.Match(MySQLStatementParserRP_)
		}

	case MySQLStatementParserFIRST, MySQLStatementParserLAST, MySQLStatementParserNEXT, MySQLStatementParserPREV:
		{
			p.SetState(1675)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserFIRST || _la == MySQLStatementParserLAST || _la == MySQLStatementParserNEXT || _la == MySQLStatementParserPREV) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(1679)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserWHERE {
		{
			p.SetState(1678)
			p.WhereClause()
		}

	}
	p.SetState(1682)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLIMIT {
		{
			p.SetState(1681)
			p.LimitClause()
		}

	}

	return localctx
}

// IHandlerReadStatementContext is an interface to support dynamic dispatch.
type IHandlerReadStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHandlerReadStatementContext differentiates from other interfaces.
	IsHandlerReadStatementContext()
}

type HandlerReadStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHandlerReadStatementContext() *HandlerReadStatementContext {
	var p = new(HandlerReadStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_handlerReadStatement
	return p
}

func (*HandlerReadStatementContext) IsHandlerReadStatementContext() {}

func NewHandlerReadStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HandlerReadStatementContext {
	var p = new(HandlerReadStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_handlerReadStatement

	return p
}

func (s *HandlerReadStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *HandlerReadStatementContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHANDLER, 0)
}

func (s *HandlerReadStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *HandlerReadStatementContext) READ() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREAD, 0)
}

func (s *HandlerReadStatementContext) FIRST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFIRST, 0)
}

func (s *HandlerReadStatementContext) NEXT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNEXT, 0)
}

func (s *HandlerReadStatementContext) WhereClause() IWhereClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *HandlerReadStatementContext) LimitClause() ILimitClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimitClauseContext)
}

func (s *HandlerReadStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerReadStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HandlerReadStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterHandlerReadStatement(s)
	}
}

func (s *HandlerReadStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitHandlerReadStatement(s)
	}
}

func (s *HandlerReadStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitHandlerReadStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) HandlerReadStatement() (localctx IHandlerReadStatementContext) {
	this := p
	_ = this

	localctx = NewHandlerReadStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, MySQLStatementParserRULE_handlerReadStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1684)
		p.Match(MySQLStatementParserHANDLER)
	}
	{
		p.SetState(1685)
		p.TableName()
	}
	{
		p.SetState(1686)
		p.Match(MySQLStatementParserREAD)
	}
	{
		p.SetState(1687)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserFIRST || _la == MySQLStatementParserNEXT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1689)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserWHERE {
		{
			p.SetState(1688)
			p.WhereClause()
		}

	}
	p.SetState(1692)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLIMIT {
		{
			p.SetState(1691)
			p.LimitClause()
		}

	}

	return localctx
}

// IHandlerCloseStatementContext is an interface to support dynamic dispatch.
type IHandlerCloseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHandlerCloseStatementContext differentiates from other interfaces.
	IsHandlerCloseStatementContext()
}

type HandlerCloseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHandlerCloseStatementContext() *HandlerCloseStatementContext {
	var p = new(HandlerCloseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_handlerCloseStatement
	return p
}

func (*HandlerCloseStatementContext) IsHandlerCloseStatementContext() {}

func NewHandlerCloseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HandlerCloseStatementContext {
	var p = new(HandlerCloseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_handlerCloseStatement

	return p
}

func (s *HandlerCloseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *HandlerCloseStatementContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHANDLER, 0)
}

func (s *HandlerCloseStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *HandlerCloseStatementContext) CLOSE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCLOSE, 0)
}

func (s *HandlerCloseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerCloseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HandlerCloseStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterHandlerCloseStatement(s)
	}
}

func (s *HandlerCloseStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitHandlerCloseStatement(s)
	}
}

func (s *HandlerCloseStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitHandlerCloseStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) HandlerCloseStatement() (localctx IHandlerCloseStatementContext) {
	this := p
	_ = this

	localctx = NewHandlerCloseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, MySQLStatementParserRULE_handlerCloseStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1694)
		p.Match(MySQLStatementParserHANDLER)
	}
	{
		p.SetState(1695)
		p.TableName()
	}
	{
		p.SetState(1696)
		p.Match(MySQLStatementParserCLOSE)
	}

	return localctx
}

// IImportStatementContext is an interface to support dynamic dispatch.
type IImportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportStatementContext differentiates from other interfaces.
	IsImportStatementContext()
}

type ImportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportStatementContext() *ImportStatementContext {
	var p = new(ImportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_importStatement
	return p
}

func (*ImportStatementContext) IsImportStatementContext() {}

func NewImportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportStatementContext {
	var p = new(ImportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_importStatement

	return p
}

func (s *ImportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportStatementContext) IMPORT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIMPORT, 0)
}

func (s *ImportStatementContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLE, 0)
}

func (s *ImportStatementContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFROM, 0)
}

func (s *ImportStatementContext) AllString_() []IString_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IString_Context)(nil)).Elem())
	var tst = make([]IString_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IString_Context)
		}
	}

	return tst
}

func (s *ImportStatementContext) String_(i int) IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *ImportStatementContext) COMMA_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, 0)
}

func (s *ImportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterImportStatement(s)
	}
}

func (s *ImportStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitImportStatement(s)
	}
}

func (s *ImportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitImportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ImportStatement() (localctx IImportStatementContext) {
	this := p
	_ = this

	localctx = NewImportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, MySQLStatementParserRULE_importStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1698)
		p.Match(MySQLStatementParserIMPORT)
	}
	{
		p.SetState(1699)
		p.Match(MySQLStatementParserTABLE)
	}
	{
		p.SetState(1700)
		p.Match(MySQLStatementParserFROM)
	}
	{
		p.SetState(1701)
		p.String_()
	}
	p.SetState(1704)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(1702)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(1703)
			p.String_()
		}

	}

	return localctx
}

// ILoadStatementContext is an interface to support dynamic dispatch.
type ILoadStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoadStatementContext differentiates from other interfaces.
	IsLoadStatementContext()
}

type LoadStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoadStatementContext() *LoadStatementContext {
	var p = new(LoadStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_loadStatement
	return p
}

func (*LoadStatementContext) IsLoadStatementContext() {}

func NewLoadStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoadStatementContext {
	var p = new(LoadStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_loadStatement

	return p
}

func (s *LoadStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoadStatementContext) LoadDataStatement() ILoadDataStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoadDataStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoadDataStatementContext)
}

func (s *LoadStatementContext) LoadXmlStatement() ILoadXmlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoadXmlStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoadXmlStatementContext)
}

func (s *LoadStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoadStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoadStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterLoadStatement(s)
	}
}

func (s *LoadStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitLoadStatement(s)
	}
}

func (s *LoadStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitLoadStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) LoadStatement() (localctx ILoadStatementContext) {
	this := p
	_ = this

	localctx = NewLoadStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, MySQLStatementParserRULE_loadStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1708)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 93, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1706)
			p.LoadDataStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1707)
			p.LoadXmlStatement()
		}

	}

	return localctx
}

// ILoadDataStatementContext is an interface to support dynamic dispatch.
type ILoadDataStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoadDataStatementContext differentiates from other interfaces.
	IsLoadDataStatementContext()
}

type LoadDataStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoadDataStatementContext() *LoadDataStatementContext {
	var p = new(LoadDataStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_loadDataStatement
	return p
}

func (*LoadDataStatementContext) IsLoadDataStatementContext() {}

func NewLoadDataStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoadDataStatementContext {
	var p = new(LoadDataStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_loadDataStatement

	return p
}

func (s *LoadDataStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoadDataStatementContext) LOAD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOAD, 0)
}

func (s *LoadDataStatementContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDATA, 0)
}

func (s *LoadDataStatementContext) INFILE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINFILE, 0)
}

func (s *LoadDataStatementContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *LoadDataStatementContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINTO, 0)
}

func (s *LoadDataStatementContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLE, 0)
}

func (s *LoadDataStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *LoadDataStatementContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCAL, 0)
}

func (s *LoadDataStatementContext) PartitionNames() IPartitionNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionNamesContext)
}

func (s *LoadDataStatementContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHARACTER, 0)
}

func (s *LoadDataStatementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSET, 0)
}

func (s *LoadDataStatementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *LoadDataStatementContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOLUMNS, 0)
}

func (s *LoadDataStatementContext) AllLINES() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserLINES)
}

func (s *LoadDataStatementContext) LINES(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLINES, i)
}

func (s *LoadDataStatementContext) AllIGNORE() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserIGNORE)
}

func (s *LoadDataStatementContext) IGNORE(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIGNORE, i)
}

func (s *LoadDataStatementContext) NumberLiterals() INumberLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumberLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumberLiteralsContext)
}

func (s *LoadDataStatementContext) FieldOrVarSpec() IFieldOrVarSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldOrVarSpecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldOrVarSpecContext)
}

func (s *LoadDataStatementContext) SetAssignmentsClause() ISetAssignmentsClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetAssignmentsClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetAssignmentsClauseContext)
}

func (s *LoadDataStatementContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOW_PRIORITY, 0)
}

func (s *LoadDataStatementContext) CONCURRENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCONCURRENT, 0)
}

func (s *LoadDataStatementContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLACE, 0)
}

func (s *LoadDataStatementContext) ROWS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROWS, 0)
}

func (s *LoadDataStatementContext) AllSelectFieldsInto() []ISelectFieldsIntoContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelectFieldsIntoContext)(nil)).Elem())
	var tst = make([]ISelectFieldsIntoContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelectFieldsIntoContext)
		}
	}

	return tst
}

func (s *LoadDataStatementContext) SelectFieldsInto(i int) ISelectFieldsIntoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectFieldsIntoContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelectFieldsIntoContext)
}

func (s *LoadDataStatementContext) AllSelectLinesInto() []ISelectLinesIntoContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelectLinesIntoContext)(nil)).Elem())
	var tst = make([]ISelectLinesIntoContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelectLinesIntoContext)
		}
	}

	return tst
}

func (s *LoadDataStatementContext) SelectLinesInto(i int) ISelectLinesIntoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectLinesIntoContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelectLinesIntoContext)
}

func (s *LoadDataStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoadDataStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoadDataStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterLoadDataStatement(s)
	}
}

func (s *LoadDataStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitLoadDataStatement(s)
	}
}

func (s *LoadDataStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitLoadDataStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) LoadDataStatement() (localctx ILoadDataStatementContext) {
	this := p
	_ = this

	localctx = NewLoadDataStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, MySQLStatementParserRULE_loadDataStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1710)
		p.Match(MySQLStatementParserLOAD)
	}
	{
		p.SetState(1711)
		p.Match(MySQLStatementParserDATA)
	}
	p.SetState(1713)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserCONCURRENT || _la == MySQLStatementParserLOW_PRIORITY {
		{
			p.SetState(1712)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserCONCURRENT || _la == MySQLStatementParserLOW_PRIORITY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(1716)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLOCAL {
		{
			p.SetState(1715)
			p.Match(MySQLStatementParserLOCAL)
		}

	}
	{
		p.SetState(1718)
		p.Match(MySQLStatementParserINFILE)
	}
	{
		p.SetState(1719)
		p.String_()
	}
	p.SetState(1721)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIGNORE || _la == MySQLStatementParserREPLACE {
		{
			p.SetState(1720)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserIGNORE || _la == MySQLStatementParserREPLACE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(1723)
		p.Match(MySQLStatementParserINTO)
	}
	{
		p.SetState(1724)
		p.Match(MySQLStatementParserTABLE)
	}
	{
		p.SetState(1725)
		p.TableName()
	}
	p.SetState(1727)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserPARTITION {
		{
			p.SetState(1726)
			p.PartitionNames()
		}

	}
	p.SetState(1732)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserCHARACTER {
		{
			p.SetState(1729)
			p.Match(MySQLStatementParserCHARACTER)
		}
		{
			p.SetState(1730)
			p.Match(MySQLStatementParserSET)
		}
		{
			p.SetState(1731)
			p.Identifier()
		}

	}
	p.SetState(1740)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserCOLUMNS {
		{
			p.SetState(1734)
			p.Match(MySQLStatementParserCOLUMNS)
		}
		p.SetState(1736)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == MySQLStatementParserENCLOSED || _la == MySQLStatementParserESCAPED || _la == MySQLStatementParserOPTIONALLY || _la == MySQLStatementParserTERMINATED {
			{
				p.SetState(1735)
				p.SelectFieldsInto()
			}

			p.SetState(1738)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(1748)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLINES {
		{
			p.SetState(1742)
			p.Match(MySQLStatementParserLINES)
		}
		p.SetState(1744)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == MySQLStatementParserSTARTING || _la == MySQLStatementParserTERMINATED {
			{
				p.SetState(1743)
				p.SelectLinesInto()
			}

			p.SetState(1746)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(1754)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIGNORE {
		{
			p.SetState(1750)
			p.Match(MySQLStatementParserIGNORE)
		}
		{
			p.SetState(1751)
			p.NumberLiterals()
		}
		{
			p.SetState(1752)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserLINES || _la == MySQLStatementParserROWS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(1757)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLP_ {
		{
			p.SetState(1756)
			p.FieldOrVarSpec()
		}

	}
	p.SetState(1760)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserAS || _la == MySQLStatementParserSET {
		{
			p.SetState(1759)
			p.SetAssignmentsClause()
		}

	}

	return localctx
}

// ILoadXmlStatementContext is an interface to support dynamic dispatch.
type ILoadXmlStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoadXmlStatementContext differentiates from other interfaces.
	IsLoadXmlStatementContext()
}

type LoadXmlStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoadXmlStatementContext() *LoadXmlStatementContext {
	var p = new(LoadXmlStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_loadXmlStatement
	return p
}

func (*LoadXmlStatementContext) IsLoadXmlStatementContext() {}

func NewLoadXmlStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoadXmlStatementContext {
	var p = new(LoadXmlStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_loadXmlStatement

	return p
}

func (s *LoadXmlStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoadXmlStatementContext) LOAD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOAD, 0)
}

func (s *LoadXmlStatementContext) XML() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserXML, 0)
}

func (s *LoadXmlStatementContext) INFILE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINFILE, 0)
}

func (s *LoadXmlStatementContext) AllString_() []IString_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IString_Context)(nil)).Elem())
	var tst = make([]IString_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IString_Context)
		}
	}

	return tst
}

func (s *LoadXmlStatementContext) String_(i int) IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *LoadXmlStatementContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINTO, 0)
}

func (s *LoadXmlStatementContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLE, 0)
}

func (s *LoadXmlStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *LoadXmlStatementContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCAL, 0)
}

func (s *LoadXmlStatementContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHARACTER, 0)
}

func (s *LoadXmlStatementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSET, 0)
}

func (s *LoadXmlStatementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *LoadXmlStatementContext) AllROWS() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserROWS)
}

func (s *LoadXmlStatementContext) ROWS(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROWS, i)
}

func (s *LoadXmlStatementContext) IDENTIFIED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIDENTIFIED, 0)
}

func (s *LoadXmlStatementContext) BY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBY, 0)
}

func (s *LoadXmlStatementContext) LT_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLT_, 0)
}

func (s *LoadXmlStatementContext) GT_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGT_, 0)
}

func (s *LoadXmlStatementContext) AllIGNORE() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserIGNORE)
}

func (s *LoadXmlStatementContext) IGNORE(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIGNORE, i)
}

func (s *LoadXmlStatementContext) NumberLiterals() INumberLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumberLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumberLiteralsContext)
}

func (s *LoadXmlStatementContext) FieldOrVarSpec() IFieldOrVarSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldOrVarSpecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldOrVarSpecContext)
}

func (s *LoadXmlStatementContext) SetAssignmentsClause() ISetAssignmentsClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetAssignmentsClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetAssignmentsClauseContext)
}

func (s *LoadXmlStatementContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOW_PRIORITY, 0)
}

func (s *LoadXmlStatementContext) CONCURRENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCONCURRENT, 0)
}

func (s *LoadXmlStatementContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLACE, 0)
}

func (s *LoadXmlStatementContext) LINES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLINES, 0)
}

func (s *LoadXmlStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoadXmlStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoadXmlStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterLoadXmlStatement(s)
	}
}

func (s *LoadXmlStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitLoadXmlStatement(s)
	}
}

func (s *LoadXmlStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitLoadXmlStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) LoadXmlStatement() (localctx ILoadXmlStatementContext) {
	this := p
	_ = this

	localctx = NewLoadXmlStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, MySQLStatementParserRULE_loadXmlStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1762)
		p.Match(MySQLStatementParserLOAD)
	}
	{
		p.SetState(1763)
		p.Match(MySQLStatementParserXML)
	}
	p.SetState(1765)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserCONCURRENT || _la == MySQLStatementParserLOW_PRIORITY {
		{
			p.SetState(1764)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserCONCURRENT || _la == MySQLStatementParserLOW_PRIORITY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(1768)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLOCAL {
		{
			p.SetState(1767)
			p.Match(MySQLStatementParserLOCAL)
		}

	}
	{
		p.SetState(1770)
		p.Match(MySQLStatementParserINFILE)
	}
	{
		p.SetState(1771)
		p.String_()
	}
	p.SetState(1773)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIGNORE || _la == MySQLStatementParserREPLACE {
		{
			p.SetState(1772)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserIGNORE || _la == MySQLStatementParserREPLACE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(1775)
		p.Match(MySQLStatementParserINTO)
	}
	{
		p.SetState(1776)
		p.Match(MySQLStatementParserTABLE)
	}
	{
		p.SetState(1777)
		p.TableName()
	}
	p.SetState(1781)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserCHARACTER {
		{
			p.SetState(1778)
			p.Match(MySQLStatementParserCHARACTER)
		}
		{
			p.SetState(1779)
			p.Match(MySQLStatementParserSET)
		}
		{
			p.SetState(1780)
			p.Identifier()
		}

	}
	p.SetState(1790)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserROWS {
		{
			p.SetState(1783)
			p.Match(MySQLStatementParserROWS)
		}
		{
			p.SetState(1784)
			p.Match(MySQLStatementParserIDENTIFIED)
		}
		{
			p.SetState(1785)
			p.Match(MySQLStatementParserBY)
		}
		{
			p.SetState(1786)
			p.Match(MySQLStatementParserLT_)
		}
		{
			p.SetState(1787)
			p.String_()
		}
		{
			p.SetState(1788)
			p.Match(MySQLStatementParserGT_)
		}

	}
	p.SetState(1796)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIGNORE {
		{
			p.SetState(1792)
			p.Match(MySQLStatementParserIGNORE)
		}
		{
			p.SetState(1793)
			p.NumberLiterals()
		}
		{
			p.SetState(1794)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserLINES || _la == MySQLStatementParserROWS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(1799)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLP_ {
		{
			p.SetState(1798)
			p.FieldOrVarSpec()
		}

	}
	p.SetState(1802)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserAS || _la == MySQLStatementParserSET {
		{
			p.SetState(1801)
			p.SetAssignmentsClause()
		}

	}

	return localctx
}

// IExplicitTableContext is an interface to support dynamic dispatch.
type IExplicitTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExplicitTableContext differentiates from other interfaces.
	IsExplicitTableContext()
}

type ExplicitTableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExplicitTableContext() *ExplicitTableContext {
	var p = new(ExplicitTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_explicitTable
	return p
}

func (*ExplicitTableContext) IsExplicitTableContext() {}

func NewExplicitTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExplicitTableContext {
	var p = new(ExplicitTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_explicitTable

	return p
}

func (s *ExplicitTableContext) GetParser() antlr.Parser { return s.parser }

func (s *ExplicitTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLE, 0)
}

func (s *ExplicitTableContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *ExplicitTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplicitTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExplicitTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterExplicitTable(s)
	}
}

func (s *ExplicitTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitExplicitTable(s)
	}
}

func (s *ExplicitTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitExplicitTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ExplicitTable() (localctx IExplicitTableContext) {
	this := p
	_ = this

	localctx = NewExplicitTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, MySQLStatementParserRULE_explicitTable)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1804)
		p.Match(MySQLStatementParserTABLE)
	}
	{
		p.SetState(1805)
		p.TableName()
	}

	return localctx
}

// ITableValueConstructorContext is an interface to support dynamic dispatch.
type ITableValueConstructorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableValueConstructorContext differentiates from other interfaces.
	IsTableValueConstructorContext()
}

type TableValueConstructorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableValueConstructorContext() *TableValueConstructorContext {
	var p = new(TableValueConstructorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_tableValueConstructor
	return p
}

func (*TableValueConstructorContext) IsTableValueConstructorContext() {}

func NewTableValueConstructorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableValueConstructorContext {
	var p = new(TableValueConstructorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_tableValueConstructor

	return p
}

func (s *TableValueConstructorContext) GetParser() antlr.Parser { return s.parser }

func (s *TableValueConstructorContext) VALUES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVALUES, 0)
}

func (s *TableValueConstructorContext) RowConstructorList() IRowConstructorListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRowConstructorListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRowConstructorListContext)
}

func (s *TableValueConstructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableValueConstructorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableValueConstructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTableValueConstructor(s)
	}
}

func (s *TableValueConstructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTableValueConstructor(s)
	}
}

func (s *TableValueConstructorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTableValueConstructor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TableValueConstructor() (localctx ITableValueConstructorContext) {
	this := p
	_ = this

	localctx = NewTableValueConstructorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, MySQLStatementParserRULE_tableValueConstructor)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1807)
		p.Match(MySQLStatementParserVALUES)
	}
	{
		p.SetState(1808)
		p.RowConstructorList()
	}

	return localctx
}

// IRowConstructorListContext is an interface to support dynamic dispatch.
type IRowConstructorListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRowConstructorListContext differentiates from other interfaces.
	IsRowConstructorListContext()
}

type RowConstructorListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRowConstructorListContext() *RowConstructorListContext {
	var p = new(RowConstructorListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_rowConstructorList
	return p
}

func (*RowConstructorListContext) IsRowConstructorListContext() {}

func NewRowConstructorListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RowConstructorListContext {
	var p = new(RowConstructorListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_rowConstructorList

	return p
}

func (s *RowConstructorListContext) GetParser() antlr.Parser { return s.parser }

func (s *RowConstructorListContext) AllROW() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserROW)
}

func (s *RowConstructorListContext) ROW(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROW, i)
}

func (s *RowConstructorListContext) AllAssignmentValues() []IAssignmentValuesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssignmentValuesContext)(nil)).Elem())
	var tst = make([]IAssignmentValuesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssignmentValuesContext)
		}
	}

	return tst
}

func (s *RowConstructorListContext) AssignmentValues(i int) IAssignmentValuesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentValuesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssignmentValuesContext)
}

func (s *RowConstructorListContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *RowConstructorListContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *RowConstructorListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RowConstructorListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RowConstructorListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterRowConstructorList(s)
	}
}

func (s *RowConstructorListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitRowConstructorList(s)
	}
}

func (s *RowConstructorListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitRowConstructorList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) RowConstructorList() (localctx IRowConstructorListContext) {
	this := p
	_ = this

	localctx = NewRowConstructorListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, MySQLStatementParserRULE_rowConstructorList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1810)
		p.Match(MySQLStatementParserROW)
	}
	{
		p.SetState(1811)
		p.AssignmentValues()
	}
	p.SetState(1817)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 114, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1812)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(1813)
				p.Match(MySQLStatementParserROW)
			}
			{
				p.SetState(1814)
				p.AssignmentValues()
			}

		}
		p.SetState(1819)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 114, p.GetParserRuleContext())
	}

	return localctx
}

// IWithClauseContext is an interface to support dynamic dispatch.
type IWithClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWithClauseContext differentiates from other interfaces.
	IsWithClauseContext()
}

type WithClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWithClauseContext() *WithClauseContext {
	var p = new(WithClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_withClause
	return p
}

func (*WithClauseContext) IsWithClauseContext() {}

func NewWithClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WithClauseContext {
	var p = new(WithClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_withClause

	return p
}

func (s *WithClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WithClauseContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWITH, 0)
}

func (s *WithClauseContext) AllCteClause() []ICteClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICteClauseContext)(nil)).Elem())
	var tst = make([]ICteClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICteClauseContext)
		}
	}

	return tst
}

func (s *WithClauseContext) CteClause(i int) ICteClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICteClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICteClauseContext)
}

func (s *WithClauseContext) RECURSIVE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRECURSIVE, 0)
}

func (s *WithClauseContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *WithClauseContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *WithClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WithClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WithClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterWithClause(s)
	}
}

func (s *WithClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitWithClause(s)
	}
}

func (s *WithClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitWithClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) WithClause() (localctx IWithClauseContext) {
	this := p
	_ = this

	localctx = NewWithClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, MySQLStatementParserRULE_withClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1820)
		p.Match(MySQLStatementParserWITH)
	}
	p.SetState(1822)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserRECURSIVE {
		{
			p.SetState(1821)
			p.Match(MySQLStatementParserRECURSIVE)
		}

	}
	{
		p.SetState(1824)
		p.CteClause()
	}
	p.SetState(1829)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(1825)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(1826)
			p.CteClause()
		}

		p.SetState(1831)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICteClauseContext is an interface to support dynamic dispatch.
type ICteClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCteClauseContext differentiates from other interfaces.
	IsCteClauseContext()
}

type CteClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCteClauseContext() *CteClauseContext {
	var p = new(CteClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_cteClause
	return p
}

func (*CteClauseContext) IsCteClauseContext() {}

func NewCteClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CteClauseContext {
	var p = new(CteClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_cteClause

	return p
}

func (s *CteClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *CteClauseContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *CteClauseContext) AS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAS, 0)
}

func (s *CteClauseContext) Subquery() ISubqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubqueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubqueryContext)
}

func (s *CteClauseContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *CteClauseContext) ColumnNames() IColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNamesContext)
}

func (s *CteClauseContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *CteClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CteClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CteClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCteClause(s)
	}
}

func (s *CteClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCteClause(s)
	}
}

func (s *CteClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCteClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CteClause() (localctx ICteClauseContext) {
	this := p
	_ = this

	localctx = NewCteClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, MySQLStatementParserRULE_cteClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1832)
		p.Identifier()
	}
	p.SetState(1837)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLP_ {
		{
			p.SetState(1833)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(1834)
			p.ColumnNames()
		}
		{
			p.SetState(1835)
			p.Match(MySQLStatementParserRP_)
		}

	}
	{
		p.SetState(1839)
		p.Match(MySQLStatementParserAS)
	}
	{
		p.SetState(1840)
		p.Subquery()
	}

	return localctx
}

// ISelectSpecificationContext is an interface to support dynamic dispatch.
type ISelectSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectSpecificationContext differentiates from other interfaces.
	IsSelectSpecificationContext()
}

type SelectSpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectSpecificationContext() *SelectSpecificationContext {
	var p = new(SelectSpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_selectSpecification
	return p
}

func (*SelectSpecificationContext) IsSelectSpecificationContext() {}

func NewSelectSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectSpecificationContext {
	var p = new(SelectSpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_selectSpecification

	return p
}

func (s *SelectSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectSpecificationContext) DuplicateSpecification() IDuplicateSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDuplicateSpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDuplicateSpecificationContext)
}

func (s *SelectSpecificationContext) HIGH_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHIGH_PRIORITY, 0)
}

func (s *SelectSpecificationContext) STRAIGHT_JOIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTRAIGHT_JOIN, 0)
}

func (s *SelectSpecificationContext) SQL_SMALL_RESULT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSQL_SMALL_RESULT, 0)
}

func (s *SelectSpecificationContext) SQL_BIG_RESULT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSQL_BIG_RESULT, 0)
}

func (s *SelectSpecificationContext) SQL_BUFFER_RESULT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSQL_BUFFER_RESULT, 0)
}

func (s *SelectSpecificationContext) SQL_NO_CACHE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSQL_NO_CACHE, 0)
}

func (s *SelectSpecificationContext) SQL_CALC_FOUND_ROWS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSQL_CALC_FOUND_ROWS, 0)
}

func (s *SelectSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectSpecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSelectSpecification(s)
	}
}

func (s *SelectSpecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSelectSpecification(s)
	}
}

func (s *SelectSpecificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSelectSpecification(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SelectSpecification() (localctx ISelectSpecificationContext) {
	this := p
	_ = this

	localctx = NewSelectSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, MySQLStatementParserRULE_selectSpecification)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1850)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserALL, MySQLStatementParserDISTINCT, MySQLStatementParserDISTINCTROW:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1842)
			p.DuplicateSpecification()
		}

	case MySQLStatementParserHIGH_PRIORITY:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1843)
			p.Match(MySQLStatementParserHIGH_PRIORITY)
		}

	case MySQLStatementParserSTRAIGHT_JOIN:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1844)
			p.Match(MySQLStatementParserSTRAIGHT_JOIN)
		}

	case MySQLStatementParserSQL_SMALL_RESULT:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1845)
			p.Match(MySQLStatementParserSQL_SMALL_RESULT)
		}

	case MySQLStatementParserSQL_BIG_RESULT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1846)
			p.Match(MySQLStatementParserSQL_BIG_RESULT)
		}

	case MySQLStatementParserSQL_BUFFER_RESULT:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1847)
			p.Match(MySQLStatementParserSQL_BUFFER_RESULT)
		}

	case MySQLStatementParserSQL_NO_CACHE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1848)
			p.Match(MySQLStatementParserSQL_NO_CACHE)
		}

	case MySQLStatementParserSQL_CALC_FOUND_ROWS:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1849)
			p.Match(MySQLStatementParserSQL_CALC_FOUND_ROWS)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDuplicateSpecificationContext is an interface to support dynamic dispatch.
type IDuplicateSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDuplicateSpecificationContext differentiates from other interfaces.
	IsDuplicateSpecificationContext()
}

type DuplicateSpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDuplicateSpecificationContext() *DuplicateSpecificationContext {
	var p = new(DuplicateSpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_duplicateSpecification
	return p
}

func (*DuplicateSpecificationContext) IsDuplicateSpecificationContext() {}

func NewDuplicateSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DuplicateSpecificationContext {
	var p = new(DuplicateSpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_duplicateSpecification

	return p
}

func (s *DuplicateSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *DuplicateSpecificationContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALL, 0)
}

func (s *DuplicateSpecificationContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDISTINCT, 0)
}

func (s *DuplicateSpecificationContext) DISTINCTROW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDISTINCTROW, 0)
}

func (s *DuplicateSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DuplicateSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DuplicateSpecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDuplicateSpecification(s)
	}
}

func (s *DuplicateSpecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDuplicateSpecification(s)
	}
}

func (s *DuplicateSpecificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDuplicateSpecification(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DuplicateSpecification() (localctx IDuplicateSpecificationContext) {
	this := p
	_ = this

	localctx = NewDuplicateSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, MySQLStatementParserRULE_duplicateSpecification)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1852)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserALL || _la == MySQLStatementParserDISTINCT || _la == MySQLStatementParserDISTINCTROW) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IProjectionsContext is an interface to support dynamic dispatch.
type IProjectionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProjectionsContext differentiates from other interfaces.
	IsProjectionsContext()
}

type ProjectionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProjectionsContext() *ProjectionsContext {
	var p = new(ProjectionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_projections
	return p
}

func (*ProjectionsContext) IsProjectionsContext() {}

func NewProjectionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProjectionsContext {
	var p = new(ProjectionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_projections

	return p
}

func (s *ProjectionsContext) GetParser() antlr.Parser { return s.parser }

func (s *ProjectionsContext) UnqualifiedShorthand() IUnqualifiedShorthandContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnqualifiedShorthandContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnqualifiedShorthandContext)
}

func (s *ProjectionsContext) AllProjection() []IProjectionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProjectionContext)(nil)).Elem())
	var tst = make([]IProjectionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProjectionContext)
		}
	}

	return tst
}

func (s *ProjectionsContext) Projection(i int) IProjectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProjectionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProjectionContext)
}

func (s *ProjectionsContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *ProjectionsContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *ProjectionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProjectionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProjectionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterProjections(s)
	}
}

func (s *ProjectionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitProjections(s)
	}
}

func (s *ProjectionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitProjections(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Projections() (localctx IProjectionsContext) {
	this := p
	_ = this

	localctx = NewProjectionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, MySQLStatementParserRULE_projections)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1856)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserASTERISK_:
		{
			p.SetState(1854)
			p.UnqualifiedShorthand()
		}

	case MySQLStatementParserNOT_, MySQLStatementParserTILDE_, MySQLStatementParserPLUS_, MySQLStatementParserMINUS_, MySQLStatementParserLP_, MySQLStatementParserLBE_, MySQLStatementParserQUESTION_, MySQLStatementParserAT_, MySQLStatementParserMAX, MySQLStatementParserMIN, MySQLStatementParserSUM, MySQLStatementParserCOUNT, MySQLStatementParserGROUP_CONCAT, MySQLStatementParserCAST, MySQLStatementParserPOSITION, MySQLStatementParserSUBSTRING, MySQLStatementParserSUBSTR, MySQLStatementParserEXTRACT, MySQLStatementParserTRIM, MySQLStatementParserLAST_DAY, MySQLStatementParserTRADITIONAL, MySQLStatementParserTREE, MySQLStatementParserMYSQL_ADMIN, MySQLStatementParserINSTANT, MySQLStatementParserINPLACE, MySQLStatementParserCOPY, MySQLStatementParserUL_BINARY, MySQLStatementParserAUTOCOMMIT, MySQLStatementParserINNODB, MySQLStatementParserREDO_LOG, MySQLStatementParserACCOUNT, MySQLStatementParserACTION, MySQLStatementParserACTIVE, MySQLStatementParserADMIN, MySQLStatementParserAFTER, MySQLStatementParserAGAINST, MySQLStatementParserAGGREGATE, MySQLStatementParserALGORITHM, MySQLStatementParserALWAYS, MySQLStatementParserANY, MySQLStatementParserARRAY, MySQLStatementParserASCII, MySQLStatementParserAT, MySQLStatementParserATTRIBUTE, MySQLStatementParserAUTOEXTEND_SIZE, MySQLStatementParserAUTO_INCREMENT, MySQLStatementParserAVG, MySQLStatementParserBIT_XOR, MySQLStatementParserAVG_ROW_LENGTH, MySQLStatementParserBACKUP, MySQLStatementParserBEGIN, MySQLStatementParserBINARY, MySQLStatementParserBINLOG, MySQLStatementParserBIT, MySQLStatementParserBLOCK, MySQLStatementParserBOOL, MySQLStatementParserBOOLEAN, MySQLStatementParserBTREE, MySQLStatementParserBUCKETS, MySQLStatementParserBYTE, MySQLStatementParserCACHE, MySQLStatementParserCASCADED, MySQLStatementParserCASE, MySQLStatementParserCATALOG_NAME, MySQLStatementParserCHAIN, MySQLStatementParserCHANGED, MySQLStatementParserCHANNEL, MySQLStatementParserCHAR, MySQLStatementParserCHARSET, MySQLStatementParserCHECKSUM, MySQLStatementParserCIPHER, MySQLStatementParserCLASS_ORIGIN, MySQLStatementParserCLIENT, MySQLStatementParserCLONE, MySQLStatementParserCLOSE, MySQLStatementParserCOALESCE, MySQLStatementParserCODE, MySQLStatementParserCOLLATION, MySQLStatementParserCOLUMNS, MySQLStatementParserCOLUMN_FORMAT, MySQLStatementParserCOLUMN_NAME, MySQLStatementParserCOMMENT, MySQLStatementParserCOMMIT, MySQLStatementParserCOMMITTED, MySQLStatementParserCOMPACT, MySQLStatementParserCOMPLETION, MySQLStatementParserCOMPONENT, MySQLStatementParserCOMPRESSED, MySQLStatementParserCOMPRESSION, MySQLStatementParserCONCURRENT, MySQLStatementParserCONNECTION, MySQLStatementParserCONSISTENT, MySQLStatementParserCONSTRAINT_CATALOG, MySQLStatementParserCONSTRAINT_NAME, MySQLStatementParserCONSTRAINT_SCHEMA, MySQLStatementParserCONTAINS, MySQLStatementParserCONTEXT, MySQLStatementParserCONVERT, MySQLStatementParserCPU, MySQLStatementParserCUME_DIST, MySQLStatementParserCURRENT, MySQLStatementParserCURRENT_DATE, MySQLStatementParserCURRENT_TIME, MySQLStatementParserCURRENT_TIMESTAMP, MySQLStatementParserCURRENT_USER, MySQLStatementParserCURSOR_NAME, MySQLStatementParserDATA, MySQLStatementParserDATABASE, MySQLStatementParserDATAFILE, MySQLStatementParserDATE, MySQLStatementParserDATETIME, MySQLStatementParserDAY, MySQLStatementParserDEALLOCATE, MySQLStatementParserDEFAULT_AUTH, MySQLStatementParserDEFINER, MySQLStatementParserDEFINITION, MySQLStatementParserDELAY_KEY_WRITE, MySQLStatementParserDENSE_RANK, MySQLStatementParserDESCRIPTION, MySQLStatementParserDIAGNOSTICS, MySQLStatementParserDIRECTORY, MySQLStatementParserDISABLE, MySQLStatementParserDISCARD, MySQLStatementParserDISK, MySQLStatementParserDO, MySQLStatementParserDUMPFILE, MySQLStatementParserDUPLICATE, MySQLStatementParserDYNAMIC, MySQLStatementParserENABLE, MySQLStatementParserENCRYPTION, MySQLStatementParserEND, MySQLStatementParserENDS, MySQLStatementParserENFORCED, MySQLStatementParserENGINE, MySQLStatementParserENGINES, MySQLStatementParserENGINE_ATTRIBUTE, MySQLStatementParserENUM, MySQLStatementParserERROR, MySQLStatementParserERRORS, MySQLStatementParserESCAPE, MySQLStatementParserEVENT, MySQLStatementParserEVENTS, MySQLStatementParserEVERY, MySQLStatementParserEXCHANGE, MySQLStatementParserEXCLUDE, MySQLStatementParserEXECUTE, MySQLStatementParserEXISTS, MySQLStatementParserEXPANSION, MySQLStatementParserEXPIRE, MySQLStatementParserEXPORT, MySQLStatementParserEXTENDED, MySQLStatementParserEXTENT_SIZE, MySQLStatementParserFAILED_LOGIN_ATTEMPTS, MySQLStatementParserFALSE, MySQLStatementParserFAST, MySQLStatementParserFAULTS, MySQLStatementParserFILE, MySQLStatementParserFILE_BLOCK_SIZE, MySQLStatementParserFILTER, MySQLStatementParserFIRST, MySQLStatementParserFIRST_VALUE, MySQLStatementParserFIXED, MySQLStatementParserFLUSH, MySQLStatementParserFOLLOWING, MySQLStatementParserFOLLOWS, MySQLStatementParserFORMAT, MySQLStatementParserFOUND, MySQLStatementParserFULL, MySQLStatementParserGENERAL, MySQLStatementParserGEOMETRY, MySQLStatementParserGEOMETRYCOLLECTION, MySQLStatementParserGET_FORMAT, MySQLStatementParserGET_MASTER_PUBLIC_KEY, MySQLStatementParserGLOBAL, MySQLStatementParserGRANTS, MySQLStatementParserGROUP_REPLICATION, MySQLStatementParserHANDLER, MySQLStatementParserHASH, MySQLStatementParserHELP, MySQLStatementParserHISTOGRAM, MySQLStatementParserHISTORY, MySQLStatementParserHOST, MySQLStatementParserHOSTS, MySQLStatementParserHOUR, MySQLStatementParserIDENTIFIED, MySQLStatementParserIF, MySQLStatementParserIGNORE_SERVER_IDS, MySQLStatementParserIMPORT, MySQLStatementParserINACTIVE, MySQLStatementParserINDEXES, MySQLStatementParserINITIAL_SIZE, MySQLStatementParserINSERT_METHOD, MySQLStatementParserINSTALL, MySQLStatementParserINSTANCE, MySQLStatementParserINTERVAL, MySQLStatementParserINVISIBLE, MySQLStatementParserINVOKER, MySQLStatementParserIO, MySQLStatementParserIPC, MySQLStatementParserISOLATION, MySQLStatementParserISSUER, MySQLStatementParserJSON, MySQLStatementParserJSON_VALUE, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserLAG, MySQLStatementParserLANGUAGE, MySQLStatementParserLAST, MySQLStatementParserLAST_VALUE, MySQLStatementParserLEAD, MySQLStatementParserLEAVES, MySQLStatementParserLEFT, MySQLStatementParserLESS, MySQLStatementParserLEVEL, MySQLStatementParserLINESTRING, MySQLStatementParserLIST, MySQLStatementParserLOCAL, MySQLStatementParserLOCALTIME, MySQLStatementParserLOCALTIMESTAMP, MySQLStatementParserLOCKED, MySQLStatementParserLOCKS, MySQLStatementParserLOGFILE, MySQLStatementParserLOGS, MySQLStatementParserMASTER, MySQLStatementParserMASTER_AUTO_POSITION, MySQLStatementParserMASTER_COMPRESSION_ALGORITHM, MySQLStatementParserMASTER_CONNECT_RETRY, MySQLStatementParserMASTER_DELAY, MySQLStatementParserMASTER_HEARTBEAT_PERIOD, MySQLStatementParserMASTER_HOST, MySQLStatementParserMASTER_LOG_FILE, MySQLStatementParserMASTER_LOG_POS, MySQLStatementParserMASTER_PASSWORD, MySQLStatementParserMASTER_PORT, MySQLStatementParserMASTER_PUBLIC_KEY_PATH, MySQLStatementParserMASTER_RETRY_COUNT, MySQLStatementParserMASTER_SERVER_ID, MySQLStatementParserMASTER_SSL, MySQLStatementParserMASTER_SSL_CA, MySQLStatementParserMASTER_SSL_CAPATH, MySQLStatementParserMASTER_SSL_CERT, MySQLStatementParserMASTER_SSL_CIPHER, MySQLStatementParserMASTER_SSL_CRL, MySQLStatementParserMASTER_SSL_CRLPATH, MySQLStatementParserMASTER_SSL_KEY, MySQLStatementParserMASTER_TLS_CIPHERSUITES, MySQLStatementParserMASTER_TLS_VERSION, MySQLStatementParserMASTER_USER, MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL, MySQLStatementParserMATCH, MySQLStatementParserMAX_CONNECTIONS_PER_HOUR, MySQLStatementParserMAX_QUERIES_PER_HOUR, MySQLStatementParserMAX_ROWS, MySQLStatementParserMAX_SIZE, MySQLStatementParserMAX_UPDATES_PER_HOUR, MySQLStatementParserMAX_USER_CONNECTIONS, MySQLStatementParserMEDIUM, MySQLStatementParserMEMBER, MySQLStatementParserMEMORY, MySQLStatementParserMERGE, MySQLStatementParserMESSAGE_TEXT, MySQLStatementParserMICROSECOND, MySQLStatementParserMIGRATE, MySQLStatementParserMINUTE, MySQLStatementParserMIN_ROWS, MySQLStatementParserMOD, MySQLStatementParserMODE, MySQLStatementParserMODIFY, MySQLStatementParserMONTH, MySQLStatementParserMULTILINESTRING, MySQLStatementParserMULTIPOINT, MySQLStatementParserMULTIPOLYGON, MySQLStatementParserMUTEX, MySQLStatementParserMYSQL_ERRNO, MySQLStatementParserNAME, MySQLStatementParserNAMES, MySQLStatementParserNATIONAL, MySQLStatementParserNCHAR, MySQLStatementParserNDBCLUSTER, MySQLStatementParserNESTED, MySQLStatementParserNETWORK_NAMESPACE, MySQLStatementParserNEVER, MySQLStatementParserNEW, MySQLStatementParserNEXT, MySQLStatementParserNO, MySQLStatementParserNODEGROUP, MySQLStatementParserNONE, MySQLStatementParserNOT, MySQLStatementParserNOWAIT, MySQLStatementParserNO_WAIT, MySQLStatementParserNTH_VALUE, MySQLStatementParserNTILE, MySQLStatementParserNULL, MySQLStatementParserNULLS, MySQLStatementParserNUMBER, MySQLStatementParserNVARCHAR, MySQLStatementParserOFF, MySQLStatementParserOFFSET, MySQLStatementParserOJ, MySQLStatementParserOLD, MySQLStatementParserONE, MySQLStatementParserONLY, MySQLStatementParserOPEN, MySQLStatementParserOPTIONAL, MySQLStatementParserOPTIONS, MySQLStatementParserORDINALITY, MySQLStatementParserORGANIZATION, MySQLStatementParserOTHERS, MySQLStatementParserOWNER, MySQLStatementParserPACK_KEYS, MySQLStatementParserPAGE, MySQLStatementParserPARSER, MySQLStatementParserPARTIAL, MySQLStatementParserPARTITIONING, MySQLStatementParserPARTITIONS, MySQLStatementParserPASSWORD, MySQLStatementParserPASSWORD_LOCK_TIME, MySQLStatementParserPATH, MySQLStatementParserPERCENT_RANK, MySQLStatementParserPERSIST, MySQLStatementParserPERSIST_ONLY, MySQLStatementParserPHASE, MySQLStatementParserPLUGIN, MySQLStatementParserPLUGINS, MySQLStatementParserPLUGIN_DIR, MySQLStatementParserPOINT, MySQLStatementParserPOLYGON, MySQLStatementParserPORT, MySQLStatementParserPRECEDES, MySQLStatementParserPRECEDING, MySQLStatementParserPREPARE, MySQLStatementParserPRESERVE, MySQLStatementParserPREV, MySQLStatementParserPRIVILEGES, MySQLStatementParserPRIVILEGE_CHECKS_USER, MySQLStatementParserPROCESS, MySQLStatementParserPROCESSLIST, MySQLStatementParserPROFILE, MySQLStatementParserPROFILES, MySQLStatementParserPROXY, MySQLStatementParserQUARTER, MySQLStatementParserQUERY, MySQLStatementParserQUICK, MySQLStatementParserRANDOM, MySQLStatementParserRANK, MySQLStatementParserREAD_ONLY, MySQLStatementParserREBUILD, MySQLStatementParserRECOVER, MySQLStatementParserREDO_BUFFER_SIZE, MySQLStatementParserREDUNDANT, MySQLStatementParserREFERENCE, MySQLStatementParserRELAY, MySQLStatementParserRELAYLOG, MySQLStatementParserRELAY_LOG_FILE, MySQLStatementParserRELAY_LOG_POS, MySQLStatementParserRELAY_THREAD, MySQLStatementParserRELOAD, MySQLStatementParserREMOVE, MySQLStatementParserREORGANIZE, MySQLStatementParserREPAIR, MySQLStatementParserREPEATABLE, MySQLStatementParserREPLACE, MySQLStatementParserREPLICATE_DO_DB, MySQLStatementParserREPLICATE_DO_TABLE, MySQLStatementParserREPLICATE_IGNORE_DB, MySQLStatementParserREPLICATE_IGNORE_TABLE, MySQLStatementParserREPLICATE_REWRITE_DB, MySQLStatementParserREPLICATE_WILD_DO_TABLE, MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE, MySQLStatementParserREPLICATION, MySQLStatementParserREQUIRE_ROW_FORMAT, MySQLStatementParserRESET, MySQLStatementParserRESOURCE, MySQLStatementParserRESPECT, MySQLStatementParserRESTART, MySQLStatementParserRESTORE, MySQLStatementParserRESUME, MySQLStatementParserRETAIN, MySQLStatementParserRETURNED_SQLSTATE, MySQLStatementParserRETURNING, MySQLStatementParserRETURNS, MySQLStatementParserREUSE, MySQLStatementParserREVERSE, MySQLStatementParserRIGHT, MySQLStatementParserROLE, MySQLStatementParserROLLBACK, MySQLStatementParserROLLUP, MySQLStatementParserROTATE, MySQLStatementParserROUTINE, MySQLStatementParserROW, MySQLStatementParserROW_COUNT, MySQLStatementParserROW_FORMAT, MySQLStatementParserROW_NUMBER, MySQLStatementParserRTREE, MySQLStatementParserSAVEPOINT, MySQLStatementParserSCHEDULE, MySQLStatementParserSCHEMA, MySQLStatementParserSCHEMA_NAME, MySQLStatementParserSECOND, MySQLStatementParserSECONDARY, MySQLStatementParserSECONDARY_ENGINE, MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, MySQLStatementParserSECONDARY_LOAD, MySQLStatementParserSECONDARY_UNLOAD, MySQLStatementParserSECURITY, MySQLStatementParserSERIAL, MySQLStatementParserSERIALIZABLE, MySQLStatementParserSERVER, MySQLStatementParserSESSION, MySQLStatementParserSHARE, MySQLStatementParserSHUTDOWN, MySQLStatementParserSIGNED, MySQLStatementParserSIMPLE, MySQLStatementParserSLAVE, MySQLStatementParserSLOW, MySQLStatementParserSNAPSHOT, MySQLStatementParserSOCKET, MySQLStatementParserSONAME, MySQLStatementParserSOUNDS, MySQLStatementParserSOURCE, MySQLStatementParserSQL_AFTER_GTIDS, MySQLStatementParserSQL_AFTER_MTS_GAPS, MySQLStatementParserSQL_BEFORE_GTIDS, MySQLStatementParserSQL_BUFFER_RESULT, MySQLStatementParserSQL_NO_CACHE, MySQLStatementParserSQL_THREAD, MySQLStatementParserSRID, MySQLStatementParserSTACKED, MySQLStatementParserSTART, MySQLStatementParserSTARTS, MySQLStatementParserSTATS_AUTO_RECALC, MySQLStatementParserSTATS_PERSISTENT, MySQLStatementParserSTATS_SAMPLE_PAGES, MySQLStatementParserSTATUS, MySQLStatementParserSTOP, MySQLStatementParserSTORAGE, MySQLStatementParserSTREAM, MySQLStatementParserSTRING, MySQLStatementParserSUBCLASS_ORIGIN, MySQLStatementParserSUBJECT, MySQLStatementParserSUBPARTITION, MySQLStatementParserSUBPARTITIONS, MySQLStatementParserSUPER, MySQLStatementParserSUSPEND, MySQLStatementParserSWAPS, MySQLStatementParserSWITCHES, MySQLStatementParserTABLES, MySQLStatementParserTABLESPACE, MySQLStatementParserTABLE_CHECKSUM, MySQLStatementParserTABLE_NAME, MySQLStatementParserTEMPORARY, MySQLStatementParserTEMPTABLE, MySQLStatementParserTEXT, MySQLStatementParserTHAN, MySQLStatementParserTHREAD_PRIORITY, MySQLStatementParserTIES, MySQLStatementParserTIME, MySQLStatementParserTIMESTAMP, MySQLStatementParserTIMESTAMP_ADD, MySQLStatementParserTIMESTAMP_DIFF, MySQLStatementParserTLS, MySQLStatementParserTRANSACTION, MySQLStatementParserTRIGGERS, MySQLStatementParserTRUE, MySQLStatementParserTRUNCATE, MySQLStatementParserTYPE, MySQLStatementParserTYPES, MySQLStatementParserUNBOUNDED, MySQLStatementParserUNCOMMITTED, MySQLStatementParserUNDEFINED, MySQLStatementParserUNDOFILE, MySQLStatementParserUNDO_BUFFER_SIZE, MySQLStatementParserUNICODE, MySQLStatementParserUNINSTALL, MySQLStatementParserUNKNOWN, MySQLStatementParserUNTIL, MySQLStatementParserUPGRADE, MySQLStatementParserUSER, MySQLStatementParserUSER_RESOURCES, MySQLStatementParserUSE_FRM, MySQLStatementParserUTC_TIMESTAMP, MySQLStatementParserVALIDATION, MySQLStatementParserVALUE, MySQLStatementParserVALUES, MySQLStatementParserVARIABLES, MySQLStatementParserVCPU, MySQLStatementParserVIEW, MySQLStatementParserVISIBLE, MySQLStatementParserWAIT, MySQLStatementParserWARNINGS, MySQLStatementParserWEEK, MySQLStatementParserWEIGHT_STRING, MySQLStatementParserWITHOUT, MySQLStatementParserWORK, MySQLStatementParserWRAPPER, MySQLStatementParserX509, MySQLStatementParserXA, MySQLStatementParserXID, MySQLStatementParserXML, MySQLStatementParserYEAR, MySQLStatementParserIDENTIFIER_, MySQLStatementParserSINGLE_QUOTED_TEXT, MySQLStatementParserDOUBLE_QUOTED_TEXT, MySQLStatementParserNCHAR_TEXT, MySQLStatementParserUNDERSCORE_CHARSET, MySQLStatementParserNUMBER_, MySQLStatementParserHEX_DIGIT_, MySQLStatementParserBIT_NUM_:
		{
			p.SetState(1855)
			p.Projection()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(1862)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 120, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1858)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(1859)
				p.Projection()
			}

		}
		p.SetState(1864)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 120, p.GetParserRuleContext())
	}

	return localctx
}

// IProjectionContext is an interface to support dynamic dispatch.
type IProjectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProjectionContext differentiates from other interfaces.
	IsProjectionContext()
}

type ProjectionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProjectionContext() *ProjectionContext {
	var p = new(ProjectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_projection
	return p
}

func (*ProjectionContext) IsProjectionContext() {}

func NewProjectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProjectionContext {
	var p = new(ProjectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_projection

	return p
}

func (s *ProjectionContext) GetParser() antlr.Parser { return s.parser }

func (s *ProjectionContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ProjectionContext) Alias() IAliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAliasContext)
}

func (s *ProjectionContext) AS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAS, 0)
}

func (s *ProjectionContext) QualifiedShorthand() IQualifiedShorthandContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedShorthandContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedShorthandContext)
}

func (s *ProjectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProjectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProjectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterProjection(s)
	}
}

func (s *ProjectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitProjection(s)
	}
}

func (s *ProjectionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitProjection(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Projection() (localctx IProjectionContext) {
	this := p
	_ = this

	localctx = NewProjectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, MySQLStatementParserRULE_projection)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1873)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 123, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1865)
			p.expr(0)
		}
		p.SetState(1870)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 122, p.GetParserRuleContext()) == 1 {
			p.SetState(1867)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySQLStatementParserAS {
				{
					p.SetState(1866)
					p.Match(MySQLStatementParserAS)
				}

			}
			{
				p.SetState(1869)
				p.Alias()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1872)
			p.QualifiedShorthand()
		}

	}

	return localctx
}

// IUnqualifiedShorthandContext is an interface to support dynamic dispatch.
type IUnqualifiedShorthandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnqualifiedShorthandContext differentiates from other interfaces.
	IsUnqualifiedShorthandContext()
}

type UnqualifiedShorthandContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnqualifiedShorthandContext() *UnqualifiedShorthandContext {
	var p = new(UnqualifiedShorthandContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_unqualifiedShorthand
	return p
}

func (*UnqualifiedShorthandContext) IsUnqualifiedShorthandContext() {}

func NewUnqualifiedShorthandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnqualifiedShorthandContext {
	var p = new(UnqualifiedShorthandContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_unqualifiedShorthand

	return p
}

func (s *UnqualifiedShorthandContext) GetParser() antlr.Parser { return s.parser }

func (s *UnqualifiedShorthandContext) ASTERISK_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserASTERISK_, 0)
}

func (s *UnqualifiedShorthandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnqualifiedShorthandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnqualifiedShorthandContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterUnqualifiedShorthand(s)
	}
}

func (s *UnqualifiedShorthandContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitUnqualifiedShorthand(s)
	}
}

func (s *UnqualifiedShorthandContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitUnqualifiedShorthand(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) UnqualifiedShorthand() (localctx IUnqualifiedShorthandContext) {
	this := p
	_ = this

	localctx = NewUnqualifiedShorthandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, MySQLStatementParserRULE_unqualifiedShorthand)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1875)
		p.Match(MySQLStatementParserASTERISK_)
	}

	return localctx
}

// IQualifiedShorthandContext is an interface to support dynamic dispatch.
type IQualifiedShorthandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQualifiedShorthandContext differentiates from other interfaces.
	IsQualifiedShorthandContext()
}

type QualifiedShorthandContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQualifiedShorthandContext() *QualifiedShorthandContext {
	var p = new(QualifiedShorthandContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_qualifiedShorthand
	return p
}

func (*QualifiedShorthandContext) IsQualifiedShorthandContext() {}

func NewQualifiedShorthandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QualifiedShorthandContext {
	var p = new(QualifiedShorthandContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_qualifiedShorthand

	return p
}

func (s *QualifiedShorthandContext) GetParser() antlr.Parser { return s.parser }

func (s *QualifiedShorthandContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *QualifiedShorthandContext) DOT_ASTERISK_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDOT_ASTERISK_, 0)
}

func (s *QualifiedShorthandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QualifiedShorthandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QualifiedShorthandContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterQualifiedShorthand(s)
	}
}

func (s *QualifiedShorthandContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitQualifiedShorthand(s)
	}
}

func (s *QualifiedShorthandContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitQualifiedShorthand(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) QualifiedShorthand() (localctx IQualifiedShorthandContext) {
	this := p
	_ = this

	localctx = NewQualifiedShorthandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, MySQLStatementParserRULE_qualifiedShorthand)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1877)
		p.Identifier()
	}
	{
		p.SetState(1878)
		p.Match(MySQLStatementParserDOT_ASTERISK_)
	}

	return localctx
}

// IFromClauseContext is an interface to support dynamic dispatch.
type IFromClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFromClauseContext differentiates from other interfaces.
	IsFromClauseContext()
}

type FromClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFromClauseContext() *FromClauseContext {
	var p = new(FromClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_fromClause
	return p
}

func (*FromClauseContext) IsFromClauseContext() {}

func NewFromClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FromClauseContext {
	var p = new(FromClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_fromClause

	return p
}

func (s *FromClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *FromClauseContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFROM, 0)
}

func (s *FromClauseContext) DUAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDUAL, 0)
}

func (s *FromClauseContext) TableReferences() ITableReferencesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableReferencesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableReferencesContext)
}

func (s *FromClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FromClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FromClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterFromClause(s)
	}
}

func (s *FromClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitFromClause(s)
	}
}

func (s *FromClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitFromClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) FromClause() (localctx IFromClauseContext) {
	this := p
	_ = this

	localctx = NewFromClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, MySQLStatementParserRULE_fromClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1880)
		p.Match(MySQLStatementParserFROM)
	}
	p.SetState(1883)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserDUAL:
		{
			p.SetState(1881)
			p.Match(MySQLStatementParserDUAL)
		}

	case MySQLStatementParserLP_, MySQLStatementParserLBE_, MySQLStatementParserMAX, MySQLStatementParserMIN, MySQLStatementParserSUM, MySQLStatementParserCOUNT, MySQLStatementParserGROUP_CONCAT, MySQLStatementParserCAST, MySQLStatementParserPOSITION, MySQLStatementParserSUBSTRING, MySQLStatementParserSUBSTR, MySQLStatementParserEXTRACT, MySQLStatementParserTRIM, MySQLStatementParserLAST_DAY, MySQLStatementParserTRADITIONAL, MySQLStatementParserTREE, MySQLStatementParserMYSQL_ADMIN, MySQLStatementParserINSTANT, MySQLStatementParserINPLACE, MySQLStatementParserCOPY, MySQLStatementParserUL_BINARY, MySQLStatementParserAUTOCOMMIT, MySQLStatementParserINNODB, MySQLStatementParserREDO_LOG, MySQLStatementParserACCOUNT, MySQLStatementParserACTION, MySQLStatementParserACTIVE, MySQLStatementParserADMIN, MySQLStatementParserAFTER, MySQLStatementParserAGAINST, MySQLStatementParserAGGREGATE, MySQLStatementParserALGORITHM, MySQLStatementParserALWAYS, MySQLStatementParserANY, MySQLStatementParserARRAY, MySQLStatementParserASCII, MySQLStatementParserAT, MySQLStatementParserATTRIBUTE, MySQLStatementParserAUTOEXTEND_SIZE, MySQLStatementParserAUTO_INCREMENT, MySQLStatementParserAVG, MySQLStatementParserAVG_ROW_LENGTH, MySQLStatementParserBACKUP, MySQLStatementParserBEGIN, MySQLStatementParserBINLOG, MySQLStatementParserBIT, MySQLStatementParserBLOCK, MySQLStatementParserBOOL, MySQLStatementParserBOOLEAN, MySQLStatementParserBTREE, MySQLStatementParserBUCKETS, MySQLStatementParserBYTE, MySQLStatementParserCACHE, MySQLStatementParserCASCADED, MySQLStatementParserCATALOG_NAME, MySQLStatementParserCHAIN, MySQLStatementParserCHANGED, MySQLStatementParserCHANNEL, MySQLStatementParserCHARSET, MySQLStatementParserCHECKSUM, MySQLStatementParserCIPHER, MySQLStatementParserCLASS_ORIGIN, MySQLStatementParserCLIENT, MySQLStatementParserCLONE, MySQLStatementParserCLOSE, MySQLStatementParserCOALESCE, MySQLStatementParserCODE, MySQLStatementParserCOLLATION, MySQLStatementParserCOLUMNS, MySQLStatementParserCOLUMN_FORMAT, MySQLStatementParserCOLUMN_NAME, MySQLStatementParserCOMMENT, MySQLStatementParserCOMMIT, MySQLStatementParserCOMMITTED, MySQLStatementParserCOMPACT, MySQLStatementParserCOMPLETION, MySQLStatementParserCOMPONENT, MySQLStatementParserCOMPRESSED, MySQLStatementParserCOMPRESSION, MySQLStatementParserCONCURRENT, MySQLStatementParserCONNECTION, MySQLStatementParserCONSISTENT, MySQLStatementParserCONSTRAINT_CATALOG, MySQLStatementParserCONSTRAINT_NAME, MySQLStatementParserCONSTRAINT_SCHEMA, MySQLStatementParserCONTAINS, MySQLStatementParserCONTEXT, MySQLStatementParserCPU, MySQLStatementParserCURRENT, MySQLStatementParserCURSOR_NAME, MySQLStatementParserDATA, MySQLStatementParserDATAFILE, MySQLStatementParserDATE, MySQLStatementParserDATETIME, MySQLStatementParserDAY, MySQLStatementParserDEALLOCATE, MySQLStatementParserDEFAULT_AUTH, MySQLStatementParserDEFINER, MySQLStatementParserDEFINITION, MySQLStatementParserDELAY_KEY_WRITE, MySQLStatementParserDESCRIPTION, MySQLStatementParserDIAGNOSTICS, MySQLStatementParserDIRECTORY, MySQLStatementParserDISABLE, MySQLStatementParserDISCARD, MySQLStatementParserDISK, MySQLStatementParserDO, MySQLStatementParserDUMPFILE, MySQLStatementParserDUPLICATE, MySQLStatementParserDYNAMIC, MySQLStatementParserENABLE, MySQLStatementParserENCRYPTION, MySQLStatementParserEND, MySQLStatementParserENDS, MySQLStatementParserENFORCED, MySQLStatementParserENGINE, MySQLStatementParserENGINES, MySQLStatementParserENGINE_ATTRIBUTE, MySQLStatementParserENUM, MySQLStatementParserERROR, MySQLStatementParserERRORS, MySQLStatementParserESCAPE, MySQLStatementParserEVENT, MySQLStatementParserEVENTS, MySQLStatementParserEVERY, MySQLStatementParserEXCHANGE, MySQLStatementParserEXCLUDE, MySQLStatementParserEXECUTE, MySQLStatementParserEXPANSION, MySQLStatementParserEXPIRE, MySQLStatementParserEXPORT, MySQLStatementParserEXTENDED, MySQLStatementParserEXTENT_SIZE, MySQLStatementParserFAILED_LOGIN_ATTEMPTS, MySQLStatementParserFAST, MySQLStatementParserFAULTS, MySQLStatementParserFILE, MySQLStatementParserFILE_BLOCK_SIZE, MySQLStatementParserFILTER, MySQLStatementParserFIRST, MySQLStatementParserFIXED, MySQLStatementParserFLUSH, MySQLStatementParserFOLLOWING, MySQLStatementParserFOLLOWS, MySQLStatementParserFORMAT, MySQLStatementParserFOUND, MySQLStatementParserFULL, MySQLStatementParserGENERAL, MySQLStatementParserGEOMETRY, MySQLStatementParserGEOMETRYCOLLECTION, MySQLStatementParserGET_FORMAT, MySQLStatementParserGET_MASTER_PUBLIC_KEY, MySQLStatementParserGLOBAL, MySQLStatementParserGRANTS, MySQLStatementParserGROUP_REPLICATION, MySQLStatementParserHANDLER, MySQLStatementParserHASH, MySQLStatementParserHELP, MySQLStatementParserHISTOGRAM, MySQLStatementParserHISTORY, MySQLStatementParserHOST, MySQLStatementParserHOSTS, MySQLStatementParserHOUR, MySQLStatementParserIDENTIFIED, MySQLStatementParserIGNORE_SERVER_IDS, MySQLStatementParserIMPORT, MySQLStatementParserINACTIVE, MySQLStatementParserINDEXES, MySQLStatementParserINITIAL_SIZE, MySQLStatementParserINSERT_METHOD, MySQLStatementParserINSTALL, MySQLStatementParserINSTANCE, MySQLStatementParserINVISIBLE, MySQLStatementParserINVOKER, MySQLStatementParserIO, MySQLStatementParserIPC, MySQLStatementParserISOLATION, MySQLStatementParserISSUER, MySQLStatementParserJSON, MySQLStatementParserJSON_VALUE, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserLANGUAGE, MySQLStatementParserLAST, MySQLStatementParserLAST_VALUE, MySQLStatementParserLEAVES, MySQLStatementParserLESS, MySQLStatementParserLEVEL, MySQLStatementParserLINESTRING, MySQLStatementParserLIST, MySQLStatementParserLOCAL, MySQLStatementParserLOCKED, MySQLStatementParserLOCKS, MySQLStatementParserLOGFILE, MySQLStatementParserLOGS, MySQLStatementParserMASTER, MySQLStatementParserMASTER_AUTO_POSITION, MySQLStatementParserMASTER_COMPRESSION_ALGORITHM, MySQLStatementParserMASTER_CONNECT_RETRY, MySQLStatementParserMASTER_DELAY, MySQLStatementParserMASTER_HEARTBEAT_PERIOD, MySQLStatementParserMASTER_HOST, MySQLStatementParserMASTER_LOG_FILE, MySQLStatementParserMASTER_LOG_POS, MySQLStatementParserMASTER_PASSWORD, MySQLStatementParserMASTER_PORT, MySQLStatementParserMASTER_PUBLIC_KEY_PATH, MySQLStatementParserMASTER_RETRY_COUNT, MySQLStatementParserMASTER_SERVER_ID, MySQLStatementParserMASTER_SSL, MySQLStatementParserMASTER_SSL_CA, MySQLStatementParserMASTER_SSL_CAPATH, MySQLStatementParserMASTER_SSL_CERT, MySQLStatementParserMASTER_SSL_CIPHER, MySQLStatementParserMASTER_SSL_CRL, MySQLStatementParserMASTER_SSL_CRLPATH, MySQLStatementParserMASTER_SSL_KEY, MySQLStatementParserMASTER_TLS_CIPHERSUITES, MySQLStatementParserMASTER_TLS_VERSION, MySQLStatementParserMASTER_USER, MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL, MySQLStatementParserMAX_CONNECTIONS_PER_HOUR, MySQLStatementParserMAX_QUERIES_PER_HOUR, MySQLStatementParserMAX_ROWS, MySQLStatementParserMAX_SIZE, MySQLStatementParserMAX_UPDATES_PER_HOUR, MySQLStatementParserMAX_USER_CONNECTIONS, MySQLStatementParserMEDIUM, MySQLStatementParserMEMBER, MySQLStatementParserMEMORY, MySQLStatementParserMERGE, MySQLStatementParserMESSAGE_TEXT, MySQLStatementParserMICROSECOND, MySQLStatementParserMIGRATE, MySQLStatementParserMINUTE, MySQLStatementParserMIN_ROWS, MySQLStatementParserMODE, MySQLStatementParserMODIFY, MySQLStatementParserMONTH, MySQLStatementParserMULTILINESTRING, MySQLStatementParserMULTIPOINT, MySQLStatementParserMULTIPOLYGON, MySQLStatementParserMUTEX, MySQLStatementParserMYSQL_ERRNO, MySQLStatementParserNAME, MySQLStatementParserNAMES, MySQLStatementParserNATIONAL, MySQLStatementParserNCHAR, MySQLStatementParserNDBCLUSTER, MySQLStatementParserNESTED, MySQLStatementParserNETWORK_NAMESPACE, MySQLStatementParserNEVER, MySQLStatementParserNEW, MySQLStatementParserNEXT, MySQLStatementParserNO, MySQLStatementParserNODEGROUP, MySQLStatementParserNONE, MySQLStatementParserNOWAIT, MySQLStatementParserNO_WAIT, MySQLStatementParserNULLS, MySQLStatementParserNUMBER, MySQLStatementParserNVARCHAR, MySQLStatementParserOFF, MySQLStatementParserOFFSET, MySQLStatementParserOJ, MySQLStatementParserOLD, MySQLStatementParserONE, MySQLStatementParserONLY, MySQLStatementParserOPEN, MySQLStatementParserOPTIONAL, MySQLStatementParserOPTIONS, MySQLStatementParserORDINALITY, MySQLStatementParserORGANIZATION, MySQLStatementParserOTHERS, MySQLStatementParserOWNER, MySQLStatementParserPACK_KEYS, MySQLStatementParserPAGE, MySQLStatementParserPARSER, MySQLStatementParserPARTIAL, MySQLStatementParserPARTITIONING, MySQLStatementParserPARTITIONS, MySQLStatementParserPASSWORD, MySQLStatementParserPASSWORD_LOCK_TIME, MySQLStatementParserPATH, MySQLStatementParserPERSIST, MySQLStatementParserPERSIST_ONLY, MySQLStatementParserPHASE, MySQLStatementParserPLUGIN, MySQLStatementParserPLUGINS, MySQLStatementParserPLUGIN_DIR, MySQLStatementParserPOINT, MySQLStatementParserPOLYGON, MySQLStatementParserPORT, MySQLStatementParserPRECEDES, MySQLStatementParserPRECEDING, MySQLStatementParserPREPARE, MySQLStatementParserPRESERVE, MySQLStatementParserPREV, MySQLStatementParserPRIVILEGES, MySQLStatementParserPRIVILEGE_CHECKS_USER, MySQLStatementParserPROCESS, MySQLStatementParserPROCESSLIST, MySQLStatementParserPROFILE, MySQLStatementParserPROFILES, MySQLStatementParserPROXY, MySQLStatementParserQUARTER, MySQLStatementParserQUERY, MySQLStatementParserQUICK, MySQLStatementParserRANDOM, MySQLStatementParserREAD_ONLY, MySQLStatementParserREBUILD, MySQLStatementParserRECOVER, MySQLStatementParserREDO_BUFFER_SIZE, MySQLStatementParserREDUNDANT, MySQLStatementParserREFERENCE, MySQLStatementParserRELAY, MySQLStatementParserRELAYLOG, MySQLStatementParserRELAY_LOG_FILE, MySQLStatementParserRELAY_LOG_POS, MySQLStatementParserRELAY_THREAD, MySQLStatementParserRELOAD, MySQLStatementParserREMOVE, MySQLStatementParserREORGANIZE, MySQLStatementParserREPAIR, MySQLStatementParserREPEATABLE, MySQLStatementParserREPLICATE_DO_DB, MySQLStatementParserREPLICATE_DO_TABLE, MySQLStatementParserREPLICATE_IGNORE_DB, MySQLStatementParserREPLICATE_IGNORE_TABLE, MySQLStatementParserREPLICATE_REWRITE_DB, MySQLStatementParserREPLICATE_WILD_DO_TABLE, MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE, MySQLStatementParserREPLICATION, MySQLStatementParserREQUIRE_ROW_FORMAT, MySQLStatementParserRESET, MySQLStatementParserRESOURCE, MySQLStatementParserRESPECT, MySQLStatementParserRESTART, MySQLStatementParserRESTORE, MySQLStatementParserRESUME, MySQLStatementParserRETAIN, MySQLStatementParserRETURNED_SQLSTATE, MySQLStatementParserRETURNING, MySQLStatementParserRETURNS, MySQLStatementParserREUSE, MySQLStatementParserREVERSE, MySQLStatementParserROLE, MySQLStatementParserROLLBACK, MySQLStatementParserROLLUP, MySQLStatementParserROTATE, MySQLStatementParserROUTINE, MySQLStatementParserROW_COUNT, MySQLStatementParserROW_FORMAT, MySQLStatementParserRTREE, MySQLStatementParserSAVEPOINT, MySQLStatementParserSCHEDULE, MySQLStatementParserSCHEMA_NAME, MySQLStatementParserSECOND, MySQLStatementParserSECONDARY, MySQLStatementParserSECONDARY_ENGINE, MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, MySQLStatementParserSECONDARY_LOAD, MySQLStatementParserSECONDARY_UNLOAD, MySQLStatementParserSECURITY, MySQLStatementParserSERIAL, MySQLStatementParserSERIALIZABLE, MySQLStatementParserSERVER, MySQLStatementParserSESSION, MySQLStatementParserSHARE, MySQLStatementParserSHUTDOWN, MySQLStatementParserSIGNED, MySQLStatementParserSIMPLE, MySQLStatementParserSLAVE, MySQLStatementParserSLOW, MySQLStatementParserSNAPSHOT, MySQLStatementParserSOCKET, MySQLStatementParserSONAME, MySQLStatementParserSOUNDS, MySQLStatementParserSOURCE, MySQLStatementParserSQL_AFTER_GTIDS, MySQLStatementParserSQL_AFTER_MTS_GAPS, MySQLStatementParserSQL_BEFORE_GTIDS, MySQLStatementParserSQL_BUFFER_RESULT, MySQLStatementParserSQL_NO_CACHE, MySQLStatementParserSQL_THREAD, MySQLStatementParserSRID, MySQLStatementParserSTACKED, MySQLStatementParserSTART, MySQLStatementParserSTARTS, MySQLStatementParserSTATS_AUTO_RECALC, MySQLStatementParserSTATS_PERSISTENT, MySQLStatementParserSTATS_SAMPLE_PAGES, MySQLStatementParserSTATUS, MySQLStatementParserSTOP, MySQLStatementParserSTORAGE, MySQLStatementParserSTREAM, MySQLStatementParserSTRING, MySQLStatementParserSUBCLASS_ORIGIN, MySQLStatementParserSUBJECT, MySQLStatementParserSUBPARTITION, MySQLStatementParserSUBPARTITIONS, MySQLStatementParserSUPER, MySQLStatementParserSUSPEND, MySQLStatementParserSWAPS, MySQLStatementParserSWITCHES, MySQLStatementParserTABLES, MySQLStatementParserTABLESPACE, MySQLStatementParserTABLE_CHECKSUM, MySQLStatementParserTABLE_NAME, MySQLStatementParserTEMPORARY, MySQLStatementParserTEMPTABLE, MySQLStatementParserTEXT, MySQLStatementParserTHAN, MySQLStatementParserTHREAD_PRIORITY, MySQLStatementParserTIES, MySQLStatementParserTIME, MySQLStatementParserTIMESTAMP, MySQLStatementParserTIMESTAMP_ADD, MySQLStatementParserTIMESTAMP_DIFF, MySQLStatementParserTLS, MySQLStatementParserTRANSACTION, MySQLStatementParserTRIGGERS, MySQLStatementParserTRUNCATE, MySQLStatementParserTYPE, MySQLStatementParserTYPES, MySQLStatementParserUNBOUNDED, MySQLStatementParserUNCOMMITTED, MySQLStatementParserUNDEFINED, MySQLStatementParserUNDOFILE, MySQLStatementParserUNDO_BUFFER_SIZE, MySQLStatementParserUNICODE, MySQLStatementParserUNINSTALL, MySQLStatementParserUNKNOWN, MySQLStatementParserUNTIL, MySQLStatementParserUPGRADE, MySQLStatementParserUSER, MySQLStatementParserUSER_RESOURCES, MySQLStatementParserUSE_FRM, MySQLStatementParserVALIDATION, MySQLStatementParserVALUE, MySQLStatementParserVARIABLES, MySQLStatementParserVCPU, MySQLStatementParserVIEW, MySQLStatementParserVISIBLE, MySQLStatementParserWAIT, MySQLStatementParserWARNINGS, MySQLStatementParserWEEK, MySQLStatementParserWEIGHT_STRING, MySQLStatementParserWITHOUT, MySQLStatementParserWORK, MySQLStatementParserWRAPPER, MySQLStatementParserX509, MySQLStatementParserXA, MySQLStatementParserXID, MySQLStatementParserXML, MySQLStatementParserYEAR, MySQLStatementParserIDENTIFIER_, MySQLStatementParserDOUBLE_QUOTED_TEXT:
		{
			p.SetState(1882)
			p.TableReferences()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITableReferencesContext is an interface to support dynamic dispatch.
type ITableReferencesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableReferencesContext differentiates from other interfaces.
	IsTableReferencesContext()
}

type TableReferencesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableReferencesContext() *TableReferencesContext {
	var p = new(TableReferencesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_tableReferences
	return p
}

func (*TableReferencesContext) IsTableReferencesContext() {}

func NewTableReferencesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableReferencesContext {
	var p = new(TableReferencesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_tableReferences

	return p
}

func (s *TableReferencesContext) GetParser() antlr.Parser { return s.parser }

func (s *TableReferencesContext) AllTableReference() []ITableReferenceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableReferenceContext)(nil)).Elem())
	var tst = make([]ITableReferenceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableReferenceContext)
		}
	}

	return tst
}

func (s *TableReferencesContext) TableReference(i int) ITableReferenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableReferenceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableReferenceContext)
}

func (s *TableReferencesContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *TableReferencesContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *TableReferencesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableReferencesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableReferencesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTableReferences(s)
	}
}

func (s *TableReferencesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTableReferences(s)
	}
}

func (s *TableReferencesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTableReferences(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TableReferences() (localctx ITableReferencesContext) {
	this := p
	_ = this

	localctx = NewTableReferencesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, MySQLStatementParserRULE_tableReferences)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1885)
		p.TableReference()
	}
	p.SetState(1890)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 125, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1886)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(1887)
				p.TableReference()
			}

		}
		p.SetState(1892)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 125, p.GetParserRuleContext())
	}

	return localctx
}

// IEscapedTableReferenceContext is an interface to support dynamic dispatch.
type IEscapedTableReferenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEscapedTableReferenceContext differentiates from other interfaces.
	IsEscapedTableReferenceContext()
}

type EscapedTableReferenceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEscapedTableReferenceContext() *EscapedTableReferenceContext {
	var p = new(EscapedTableReferenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_escapedTableReference
	return p
}

func (*EscapedTableReferenceContext) IsEscapedTableReferenceContext() {}

func NewEscapedTableReferenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EscapedTableReferenceContext {
	var p = new(EscapedTableReferenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_escapedTableReference

	return p
}

func (s *EscapedTableReferenceContext) GetParser() antlr.Parser { return s.parser }

func (s *EscapedTableReferenceContext) TableFactor() ITableFactorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableFactorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableFactorContext)
}

func (s *EscapedTableReferenceContext) AllJoinedTable() []IJoinedTableContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IJoinedTableContext)(nil)).Elem())
	var tst = make([]IJoinedTableContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IJoinedTableContext)
		}
	}

	return tst
}

func (s *EscapedTableReferenceContext) JoinedTable(i int) IJoinedTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoinedTableContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IJoinedTableContext)
}

func (s *EscapedTableReferenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EscapedTableReferenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EscapedTableReferenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterEscapedTableReference(s)
	}
}

func (s *EscapedTableReferenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitEscapedTableReference(s)
	}
}

func (s *EscapedTableReferenceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitEscapedTableReference(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) EscapedTableReference() (localctx IEscapedTableReferenceContext) {
	this := p
	_ = this

	localctx = NewEscapedTableReferenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, MySQLStatementParserRULE_escapedTableReference)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1893)
		p.TableFactor()
	}
	p.SetState(1897)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCROSS || _la == MySQLStatementParserINNER || _la == MySQLStatementParserJOIN || _la == MySQLStatementParserLEFT || _la == MySQLStatementParserNATURAL || _la == MySQLStatementParserRIGHT || _la == MySQLStatementParserSTRAIGHT_JOIN {
		{
			p.SetState(1894)
			p.JoinedTable()
		}

		p.SetState(1899)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITableReferenceContext is an interface to support dynamic dispatch.
type ITableReferenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableReferenceContext differentiates from other interfaces.
	IsTableReferenceContext()
}

type TableReferenceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableReferenceContext() *TableReferenceContext {
	var p = new(TableReferenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_tableReference
	return p
}

func (*TableReferenceContext) IsTableReferenceContext() {}

func NewTableReferenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableReferenceContext {
	var p = new(TableReferenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_tableReference

	return p
}

func (s *TableReferenceContext) GetParser() antlr.Parser { return s.parser }

func (s *TableReferenceContext) TableFactor() ITableFactorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableFactorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableFactorContext)
}

func (s *TableReferenceContext) LBE_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLBE_, 0)
}

func (s *TableReferenceContext) OJ() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOJ, 0)
}

func (s *TableReferenceContext) EscapedTableReference() IEscapedTableReferenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEscapedTableReferenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEscapedTableReferenceContext)
}

func (s *TableReferenceContext) RBE_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRBE_, 0)
}

func (s *TableReferenceContext) AllJoinedTable() []IJoinedTableContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IJoinedTableContext)(nil)).Elem())
	var tst = make([]IJoinedTableContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IJoinedTableContext)
		}
	}

	return tst
}

func (s *TableReferenceContext) JoinedTable(i int) IJoinedTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoinedTableContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IJoinedTableContext)
}

func (s *TableReferenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableReferenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableReferenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTableReference(s)
	}
}

func (s *TableReferenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTableReference(s)
	}
}

func (s *TableReferenceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTableReference(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TableReference() (localctx ITableReferenceContext) {
	this := p
	_ = this

	localctx = NewTableReferenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, MySQLStatementParserRULE_tableReference)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1906)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserLP_, MySQLStatementParserMAX, MySQLStatementParserMIN, MySQLStatementParserSUM, MySQLStatementParserCOUNT, MySQLStatementParserGROUP_CONCAT, MySQLStatementParserCAST, MySQLStatementParserPOSITION, MySQLStatementParserSUBSTRING, MySQLStatementParserSUBSTR, MySQLStatementParserEXTRACT, MySQLStatementParserTRIM, MySQLStatementParserLAST_DAY, MySQLStatementParserTRADITIONAL, MySQLStatementParserTREE, MySQLStatementParserMYSQL_ADMIN, MySQLStatementParserINSTANT, MySQLStatementParserINPLACE, MySQLStatementParserCOPY, MySQLStatementParserUL_BINARY, MySQLStatementParserAUTOCOMMIT, MySQLStatementParserINNODB, MySQLStatementParserREDO_LOG, MySQLStatementParserACCOUNT, MySQLStatementParserACTION, MySQLStatementParserACTIVE, MySQLStatementParserADMIN, MySQLStatementParserAFTER, MySQLStatementParserAGAINST, MySQLStatementParserAGGREGATE, MySQLStatementParserALGORITHM, MySQLStatementParserALWAYS, MySQLStatementParserANY, MySQLStatementParserARRAY, MySQLStatementParserASCII, MySQLStatementParserAT, MySQLStatementParserATTRIBUTE, MySQLStatementParserAUTOEXTEND_SIZE, MySQLStatementParserAUTO_INCREMENT, MySQLStatementParserAVG, MySQLStatementParserAVG_ROW_LENGTH, MySQLStatementParserBACKUP, MySQLStatementParserBEGIN, MySQLStatementParserBINLOG, MySQLStatementParserBIT, MySQLStatementParserBLOCK, MySQLStatementParserBOOL, MySQLStatementParserBOOLEAN, MySQLStatementParserBTREE, MySQLStatementParserBUCKETS, MySQLStatementParserBYTE, MySQLStatementParserCACHE, MySQLStatementParserCASCADED, MySQLStatementParserCATALOG_NAME, MySQLStatementParserCHAIN, MySQLStatementParserCHANGED, MySQLStatementParserCHANNEL, MySQLStatementParserCHARSET, MySQLStatementParserCHECKSUM, MySQLStatementParserCIPHER, MySQLStatementParserCLASS_ORIGIN, MySQLStatementParserCLIENT, MySQLStatementParserCLONE, MySQLStatementParserCLOSE, MySQLStatementParserCOALESCE, MySQLStatementParserCODE, MySQLStatementParserCOLLATION, MySQLStatementParserCOLUMNS, MySQLStatementParserCOLUMN_FORMAT, MySQLStatementParserCOLUMN_NAME, MySQLStatementParserCOMMENT, MySQLStatementParserCOMMIT, MySQLStatementParserCOMMITTED, MySQLStatementParserCOMPACT, MySQLStatementParserCOMPLETION, MySQLStatementParserCOMPONENT, MySQLStatementParserCOMPRESSED, MySQLStatementParserCOMPRESSION, MySQLStatementParserCONCURRENT, MySQLStatementParserCONNECTION, MySQLStatementParserCONSISTENT, MySQLStatementParserCONSTRAINT_CATALOG, MySQLStatementParserCONSTRAINT_NAME, MySQLStatementParserCONSTRAINT_SCHEMA, MySQLStatementParserCONTAINS, MySQLStatementParserCONTEXT, MySQLStatementParserCPU, MySQLStatementParserCURRENT, MySQLStatementParserCURSOR_NAME, MySQLStatementParserDATA, MySQLStatementParserDATAFILE, MySQLStatementParserDATE, MySQLStatementParserDATETIME, MySQLStatementParserDAY, MySQLStatementParserDEALLOCATE, MySQLStatementParserDEFAULT_AUTH, MySQLStatementParserDEFINER, MySQLStatementParserDEFINITION, MySQLStatementParserDELAY_KEY_WRITE, MySQLStatementParserDESCRIPTION, MySQLStatementParserDIAGNOSTICS, MySQLStatementParserDIRECTORY, MySQLStatementParserDISABLE, MySQLStatementParserDISCARD, MySQLStatementParserDISK, MySQLStatementParserDO, MySQLStatementParserDUMPFILE, MySQLStatementParserDUPLICATE, MySQLStatementParserDYNAMIC, MySQLStatementParserENABLE, MySQLStatementParserENCRYPTION, MySQLStatementParserEND, MySQLStatementParserENDS, MySQLStatementParserENFORCED, MySQLStatementParserENGINE, MySQLStatementParserENGINES, MySQLStatementParserENGINE_ATTRIBUTE, MySQLStatementParserENUM, MySQLStatementParserERROR, MySQLStatementParserERRORS, MySQLStatementParserESCAPE, MySQLStatementParserEVENT, MySQLStatementParserEVENTS, MySQLStatementParserEVERY, MySQLStatementParserEXCHANGE, MySQLStatementParserEXCLUDE, MySQLStatementParserEXECUTE, MySQLStatementParserEXPANSION, MySQLStatementParserEXPIRE, MySQLStatementParserEXPORT, MySQLStatementParserEXTENDED, MySQLStatementParserEXTENT_SIZE, MySQLStatementParserFAILED_LOGIN_ATTEMPTS, MySQLStatementParserFAST, MySQLStatementParserFAULTS, MySQLStatementParserFILE, MySQLStatementParserFILE_BLOCK_SIZE, MySQLStatementParserFILTER, MySQLStatementParserFIRST, MySQLStatementParserFIXED, MySQLStatementParserFLUSH, MySQLStatementParserFOLLOWING, MySQLStatementParserFOLLOWS, MySQLStatementParserFORMAT, MySQLStatementParserFOUND, MySQLStatementParserFULL, MySQLStatementParserGENERAL, MySQLStatementParserGEOMETRY, MySQLStatementParserGEOMETRYCOLLECTION, MySQLStatementParserGET_FORMAT, MySQLStatementParserGET_MASTER_PUBLIC_KEY, MySQLStatementParserGLOBAL, MySQLStatementParserGRANTS, MySQLStatementParserGROUP_REPLICATION, MySQLStatementParserHANDLER, MySQLStatementParserHASH, MySQLStatementParserHELP, MySQLStatementParserHISTOGRAM, MySQLStatementParserHISTORY, MySQLStatementParserHOST, MySQLStatementParserHOSTS, MySQLStatementParserHOUR, MySQLStatementParserIDENTIFIED, MySQLStatementParserIGNORE_SERVER_IDS, MySQLStatementParserIMPORT, MySQLStatementParserINACTIVE, MySQLStatementParserINDEXES, MySQLStatementParserINITIAL_SIZE, MySQLStatementParserINSERT_METHOD, MySQLStatementParserINSTALL, MySQLStatementParserINSTANCE, MySQLStatementParserINVISIBLE, MySQLStatementParserINVOKER, MySQLStatementParserIO, MySQLStatementParserIPC, MySQLStatementParserISOLATION, MySQLStatementParserISSUER, MySQLStatementParserJSON, MySQLStatementParserJSON_VALUE, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserLANGUAGE, MySQLStatementParserLAST, MySQLStatementParserLAST_VALUE, MySQLStatementParserLEAVES, MySQLStatementParserLESS, MySQLStatementParserLEVEL, MySQLStatementParserLINESTRING, MySQLStatementParserLIST, MySQLStatementParserLOCAL, MySQLStatementParserLOCKED, MySQLStatementParserLOCKS, MySQLStatementParserLOGFILE, MySQLStatementParserLOGS, MySQLStatementParserMASTER, MySQLStatementParserMASTER_AUTO_POSITION, MySQLStatementParserMASTER_COMPRESSION_ALGORITHM, MySQLStatementParserMASTER_CONNECT_RETRY, MySQLStatementParserMASTER_DELAY, MySQLStatementParserMASTER_HEARTBEAT_PERIOD, MySQLStatementParserMASTER_HOST, MySQLStatementParserMASTER_LOG_FILE, MySQLStatementParserMASTER_LOG_POS, MySQLStatementParserMASTER_PASSWORD, MySQLStatementParserMASTER_PORT, MySQLStatementParserMASTER_PUBLIC_KEY_PATH, MySQLStatementParserMASTER_RETRY_COUNT, MySQLStatementParserMASTER_SERVER_ID, MySQLStatementParserMASTER_SSL, MySQLStatementParserMASTER_SSL_CA, MySQLStatementParserMASTER_SSL_CAPATH, MySQLStatementParserMASTER_SSL_CERT, MySQLStatementParserMASTER_SSL_CIPHER, MySQLStatementParserMASTER_SSL_CRL, MySQLStatementParserMASTER_SSL_CRLPATH, MySQLStatementParserMASTER_SSL_KEY, MySQLStatementParserMASTER_TLS_CIPHERSUITES, MySQLStatementParserMASTER_TLS_VERSION, MySQLStatementParserMASTER_USER, MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL, MySQLStatementParserMAX_CONNECTIONS_PER_HOUR, MySQLStatementParserMAX_QUERIES_PER_HOUR, MySQLStatementParserMAX_ROWS, MySQLStatementParserMAX_SIZE, MySQLStatementParserMAX_UPDATES_PER_HOUR, MySQLStatementParserMAX_USER_CONNECTIONS, MySQLStatementParserMEDIUM, MySQLStatementParserMEMBER, MySQLStatementParserMEMORY, MySQLStatementParserMERGE, MySQLStatementParserMESSAGE_TEXT, MySQLStatementParserMICROSECOND, MySQLStatementParserMIGRATE, MySQLStatementParserMINUTE, MySQLStatementParserMIN_ROWS, MySQLStatementParserMODE, MySQLStatementParserMODIFY, MySQLStatementParserMONTH, MySQLStatementParserMULTILINESTRING, MySQLStatementParserMULTIPOINT, MySQLStatementParserMULTIPOLYGON, MySQLStatementParserMUTEX, MySQLStatementParserMYSQL_ERRNO, MySQLStatementParserNAME, MySQLStatementParserNAMES, MySQLStatementParserNATIONAL, MySQLStatementParserNCHAR, MySQLStatementParserNDBCLUSTER, MySQLStatementParserNESTED, MySQLStatementParserNETWORK_NAMESPACE, MySQLStatementParserNEVER, MySQLStatementParserNEW, MySQLStatementParserNEXT, MySQLStatementParserNO, MySQLStatementParserNODEGROUP, MySQLStatementParserNONE, MySQLStatementParserNOWAIT, MySQLStatementParserNO_WAIT, MySQLStatementParserNULLS, MySQLStatementParserNUMBER, MySQLStatementParserNVARCHAR, MySQLStatementParserOFF, MySQLStatementParserOFFSET, MySQLStatementParserOJ, MySQLStatementParserOLD, MySQLStatementParserONE, MySQLStatementParserONLY, MySQLStatementParserOPEN, MySQLStatementParserOPTIONAL, MySQLStatementParserOPTIONS, MySQLStatementParserORDINALITY, MySQLStatementParserORGANIZATION, MySQLStatementParserOTHERS, MySQLStatementParserOWNER, MySQLStatementParserPACK_KEYS, MySQLStatementParserPAGE, MySQLStatementParserPARSER, MySQLStatementParserPARTIAL, MySQLStatementParserPARTITIONING, MySQLStatementParserPARTITIONS, MySQLStatementParserPASSWORD, MySQLStatementParserPASSWORD_LOCK_TIME, MySQLStatementParserPATH, MySQLStatementParserPERSIST, MySQLStatementParserPERSIST_ONLY, MySQLStatementParserPHASE, MySQLStatementParserPLUGIN, MySQLStatementParserPLUGINS, MySQLStatementParserPLUGIN_DIR, MySQLStatementParserPOINT, MySQLStatementParserPOLYGON, MySQLStatementParserPORT, MySQLStatementParserPRECEDES, MySQLStatementParserPRECEDING, MySQLStatementParserPREPARE, MySQLStatementParserPRESERVE, MySQLStatementParserPREV, MySQLStatementParserPRIVILEGES, MySQLStatementParserPRIVILEGE_CHECKS_USER, MySQLStatementParserPROCESS, MySQLStatementParserPROCESSLIST, MySQLStatementParserPROFILE, MySQLStatementParserPROFILES, MySQLStatementParserPROXY, MySQLStatementParserQUARTER, MySQLStatementParserQUERY, MySQLStatementParserQUICK, MySQLStatementParserRANDOM, MySQLStatementParserREAD_ONLY, MySQLStatementParserREBUILD, MySQLStatementParserRECOVER, MySQLStatementParserREDO_BUFFER_SIZE, MySQLStatementParserREDUNDANT, MySQLStatementParserREFERENCE, MySQLStatementParserRELAY, MySQLStatementParserRELAYLOG, MySQLStatementParserRELAY_LOG_FILE, MySQLStatementParserRELAY_LOG_POS, MySQLStatementParserRELAY_THREAD, MySQLStatementParserRELOAD, MySQLStatementParserREMOVE, MySQLStatementParserREORGANIZE, MySQLStatementParserREPAIR, MySQLStatementParserREPEATABLE, MySQLStatementParserREPLICATE_DO_DB, MySQLStatementParserREPLICATE_DO_TABLE, MySQLStatementParserREPLICATE_IGNORE_DB, MySQLStatementParserREPLICATE_IGNORE_TABLE, MySQLStatementParserREPLICATE_REWRITE_DB, MySQLStatementParserREPLICATE_WILD_DO_TABLE, MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE, MySQLStatementParserREPLICATION, MySQLStatementParserREQUIRE_ROW_FORMAT, MySQLStatementParserRESET, MySQLStatementParserRESOURCE, MySQLStatementParserRESPECT, MySQLStatementParserRESTART, MySQLStatementParserRESTORE, MySQLStatementParserRESUME, MySQLStatementParserRETAIN, MySQLStatementParserRETURNED_SQLSTATE, MySQLStatementParserRETURNING, MySQLStatementParserRETURNS, MySQLStatementParserREUSE, MySQLStatementParserREVERSE, MySQLStatementParserROLE, MySQLStatementParserROLLBACK, MySQLStatementParserROLLUP, MySQLStatementParserROTATE, MySQLStatementParserROUTINE, MySQLStatementParserROW_COUNT, MySQLStatementParserROW_FORMAT, MySQLStatementParserRTREE, MySQLStatementParserSAVEPOINT, MySQLStatementParserSCHEDULE, MySQLStatementParserSCHEMA_NAME, MySQLStatementParserSECOND, MySQLStatementParserSECONDARY, MySQLStatementParserSECONDARY_ENGINE, MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, MySQLStatementParserSECONDARY_LOAD, MySQLStatementParserSECONDARY_UNLOAD, MySQLStatementParserSECURITY, MySQLStatementParserSERIAL, MySQLStatementParserSERIALIZABLE, MySQLStatementParserSERVER, MySQLStatementParserSESSION, MySQLStatementParserSHARE, MySQLStatementParserSHUTDOWN, MySQLStatementParserSIGNED, MySQLStatementParserSIMPLE, MySQLStatementParserSLAVE, MySQLStatementParserSLOW, MySQLStatementParserSNAPSHOT, MySQLStatementParserSOCKET, MySQLStatementParserSONAME, MySQLStatementParserSOUNDS, MySQLStatementParserSOURCE, MySQLStatementParserSQL_AFTER_GTIDS, MySQLStatementParserSQL_AFTER_MTS_GAPS, MySQLStatementParserSQL_BEFORE_GTIDS, MySQLStatementParserSQL_BUFFER_RESULT, MySQLStatementParserSQL_NO_CACHE, MySQLStatementParserSQL_THREAD, MySQLStatementParserSRID, MySQLStatementParserSTACKED, MySQLStatementParserSTART, MySQLStatementParserSTARTS, MySQLStatementParserSTATS_AUTO_RECALC, MySQLStatementParserSTATS_PERSISTENT, MySQLStatementParserSTATS_SAMPLE_PAGES, MySQLStatementParserSTATUS, MySQLStatementParserSTOP, MySQLStatementParserSTORAGE, MySQLStatementParserSTREAM, MySQLStatementParserSTRING, MySQLStatementParserSUBCLASS_ORIGIN, MySQLStatementParserSUBJECT, MySQLStatementParserSUBPARTITION, MySQLStatementParserSUBPARTITIONS, MySQLStatementParserSUPER, MySQLStatementParserSUSPEND, MySQLStatementParserSWAPS, MySQLStatementParserSWITCHES, MySQLStatementParserTABLES, MySQLStatementParserTABLESPACE, MySQLStatementParserTABLE_CHECKSUM, MySQLStatementParserTABLE_NAME, MySQLStatementParserTEMPORARY, MySQLStatementParserTEMPTABLE, MySQLStatementParserTEXT, MySQLStatementParserTHAN, MySQLStatementParserTHREAD_PRIORITY, MySQLStatementParserTIES, MySQLStatementParserTIME, MySQLStatementParserTIMESTAMP, MySQLStatementParserTIMESTAMP_ADD, MySQLStatementParserTIMESTAMP_DIFF, MySQLStatementParserTLS, MySQLStatementParserTRANSACTION, MySQLStatementParserTRIGGERS, MySQLStatementParserTRUNCATE, MySQLStatementParserTYPE, MySQLStatementParserTYPES, MySQLStatementParserUNBOUNDED, MySQLStatementParserUNCOMMITTED, MySQLStatementParserUNDEFINED, MySQLStatementParserUNDOFILE, MySQLStatementParserUNDO_BUFFER_SIZE, MySQLStatementParserUNICODE, MySQLStatementParserUNINSTALL, MySQLStatementParserUNKNOWN, MySQLStatementParserUNTIL, MySQLStatementParserUPGRADE, MySQLStatementParserUSER, MySQLStatementParserUSER_RESOURCES, MySQLStatementParserUSE_FRM, MySQLStatementParserVALIDATION, MySQLStatementParserVALUE, MySQLStatementParserVARIABLES, MySQLStatementParserVCPU, MySQLStatementParserVIEW, MySQLStatementParserVISIBLE, MySQLStatementParserWAIT, MySQLStatementParserWARNINGS, MySQLStatementParserWEEK, MySQLStatementParserWEIGHT_STRING, MySQLStatementParserWITHOUT, MySQLStatementParserWORK, MySQLStatementParserWRAPPER, MySQLStatementParserX509, MySQLStatementParserXA, MySQLStatementParserXID, MySQLStatementParserXML, MySQLStatementParserYEAR, MySQLStatementParserIDENTIFIER_, MySQLStatementParserDOUBLE_QUOTED_TEXT:
		{
			p.SetState(1900)
			p.TableFactor()
		}

	case MySQLStatementParserLBE_:
		{
			p.SetState(1901)
			p.Match(MySQLStatementParserLBE_)
		}
		{
			p.SetState(1902)
			p.Match(MySQLStatementParserOJ)
		}
		{
			p.SetState(1903)
			p.EscapedTableReference()
		}
		{
			p.SetState(1904)
			p.Match(MySQLStatementParserRBE_)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(1911)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1908)
				p.JoinedTable()
			}

		}
		p.SetState(1913)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext())
	}

	return localctx
}

// ITableFactorContext is an interface to support dynamic dispatch.
type ITableFactorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableFactorContext differentiates from other interfaces.
	IsTableFactorContext()
}

type TableFactorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableFactorContext() *TableFactorContext {
	var p = new(TableFactorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_tableFactor
	return p
}

func (*TableFactorContext) IsTableFactorContext() {}

func NewTableFactorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableFactorContext {
	var p = new(TableFactorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_tableFactor

	return p
}

func (s *TableFactorContext) GetParser() antlr.Parser { return s.parser }

func (s *TableFactorContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *TableFactorContext) PartitionNames() IPartitionNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionNamesContext)
}

func (s *TableFactorContext) Alias() IAliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAliasContext)
}

func (s *TableFactorContext) IndexHintList() IIndexHintListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexHintListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexHintListContext)
}

func (s *TableFactorContext) AS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAS, 0)
}

func (s *TableFactorContext) Subquery() ISubqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubqueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubqueryContext)
}

func (s *TableFactorContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *TableFactorContext) ColumnNames() IColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNamesContext)
}

func (s *TableFactorContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *TableFactorContext) TableReferences() ITableReferencesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableReferencesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableReferencesContext)
}

func (s *TableFactorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableFactorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableFactorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTableFactor(s)
	}
}

func (s *TableFactorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTableFactor(s)
	}
}

func (s *TableFactorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTableFactor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TableFactor() (localctx ITableFactorContext) {
	this := p
	_ = this

	localctx = NewTableFactorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, MySQLStatementParserRULE_tableFactor)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1942)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 135, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1914)
			p.TableName()
		}
		p.SetState(1916)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 129, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1915)
				p.PartitionNames()
			}

		}
		p.SetState(1922)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 131, p.GetParserRuleContext()) == 1 {
			p.SetState(1919)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySQLStatementParserAS {
				{
					p.SetState(1918)
					p.Match(MySQLStatementParserAS)
				}

			}
			{
				p.SetState(1921)
				p.Alias()
			}

		}
		p.SetState(1925)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 132, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1924)
				p.IndexHintList()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1927)
			p.Subquery()
		}
		p.SetState(1929)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserAS {
			{
				p.SetState(1928)
				p.Match(MySQLStatementParserAS)
			}

		}
		{
			p.SetState(1931)
			p.Alias()
		}
		p.SetState(1936)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 134, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1932)
				p.Match(MySQLStatementParserLP_)
			}
			{
				p.SetState(1933)
				p.ColumnNames()
			}
			{
				p.SetState(1934)
				p.Match(MySQLStatementParserRP_)
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1938)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(1939)
			p.TableReferences()
		}
		{
			p.SetState(1940)
			p.Match(MySQLStatementParserRP_)
		}

	}

	return localctx
}

// IPartitionNamesContext is an interface to support dynamic dispatch.
type IPartitionNamesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitionNamesContext differentiates from other interfaces.
	IsPartitionNamesContext()
}

type PartitionNamesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionNamesContext() *PartitionNamesContext {
	var p = new(PartitionNamesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_partitionNames
	return p
}

func (*PartitionNamesContext) IsPartitionNamesContext() {}

func NewPartitionNamesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionNamesContext {
	var p = new(PartitionNamesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_partitionNames

	return p
}

func (s *PartitionNamesContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionNamesContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPARTITION, 0)
}

func (s *PartitionNamesContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *PartitionNamesContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *PartitionNamesContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *PartitionNamesContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *PartitionNamesContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *PartitionNamesContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *PartitionNamesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionNamesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartitionNamesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterPartitionNames(s)
	}
}

func (s *PartitionNamesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitPartitionNames(s)
	}
}

func (s *PartitionNamesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitPartitionNames(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) PartitionNames() (localctx IPartitionNamesContext) {
	this := p
	_ = this

	localctx = NewPartitionNamesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, MySQLStatementParserRULE_partitionNames)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1944)
		p.Match(MySQLStatementParserPARTITION)
	}
	{
		p.SetState(1945)
		p.Match(MySQLStatementParserLP_)
	}
	{
		p.SetState(1946)
		p.Identifier()
	}
	p.SetState(1951)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(1947)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(1948)
			p.Identifier()
		}

		p.SetState(1953)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1954)
		p.Match(MySQLStatementParserRP_)
	}

	return localctx
}

// IIndexHintListContext is an interface to support dynamic dispatch.
type IIndexHintListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexHintListContext differentiates from other interfaces.
	IsIndexHintListContext()
}

type IndexHintListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexHintListContext() *IndexHintListContext {
	var p = new(IndexHintListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_indexHintList
	return p
}

func (*IndexHintListContext) IsIndexHintListContext() {}

func NewIndexHintListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexHintListContext {
	var p = new(IndexHintListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_indexHintList

	return p
}

func (s *IndexHintListContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexHintListContext) AllIndexHint() []IIndexHintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexHintContext)(nil)).Elem())
	var tst = make([]IIndexHintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexHintContext)
		}
	}

	return tst
}

func (s *IndexHintListContext) IndexHint(i int) IIndexHintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexHintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexHintContext)
}

func (s *IndexHintListContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *IndexHintListContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *IndexHintListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexHintListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexHintListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterIndexHintList(s)
	}
}

func (s *IndexHintListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitIndexHintList(s)
	}
}

func (s *IndexHintListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitIndexHintList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) IndexHintList() (localctx IIndexHintListContext) {
	this := p
	_ = this

	localctx = NewIndexHintListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, MySQLStatementParserRULE_indexHintList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1956)
		p.IndexHint()
	}
	p.SetState(1961)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1957)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(1958)
				p.IndexHint()
			}

		}
		p.SetState(1963)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext())
	}

	return localctx
}

// IIndexHintContext is an interface to support dynamic dispatch.
type IIndexHintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexHintContext differentiates from other interfaces.
	IsIndexHintContext()
}

type IndexHintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexHintContext() *IndexHintContext {
	var p = new(IndexHintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_indexHint
	return p
}

func (*IndexHintContext) IsIndexHintContext() {}

func NewIndexHintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexHintContext {
	var p = new(IndexHintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_indexHint

	return p
}

func (s *IndexHintContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexHintContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *IndexHintContext) AllIndexName() []IIndexNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexNameContext)(nil)).Elem())
	var tst = make([]IIndexNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexNameContext)
		}
	}

	return tst
}

func (s *IndexHintContext) IndexName(i int) IIndexNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexNameContext)
}

func (s *IndexHintContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *IndexHintContext) USE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUSE, 0)
}

func (s *IndexHintContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIGNORE, 0)
}

func (s *IndexHintContext) FORCE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFORCE, 0)
}

func (s *IndexHintContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINDEX, 0)
}

func (s *IndexHintContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserKEY, 0)
}

func (s *IndexHintContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOR, 0)
}

func (s *IndexHintContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *IndexHintContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *IndexHintContext) JOIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserJOIN, 0)
}

func (s *IndexHintContext) ORDER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserORDER, 0)
}

func (s *IndexHintContext) BY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBY, 0)
}

func (s *IndexHintContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGROUP, 0)
}

func (s *IndexHintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexHintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexHintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterIndexHint(s)
	}
}

func (s *IndexHintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitIndexHint(s)
	}
}

func (s *IndexHintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitIndexHint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) IndexHint() (localctx IIndexHintContext) {
	this := p
	_ = this

	localctx = NewIndexHintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, MySQLStatementParserRULE_indexHint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1964)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserFORCE || _la == MySQLStatementParserIGNORE || _la == MySQLStatementParserUSE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1965)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserINDEX || _la == MySQLStatementParserKEY) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1974)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserFOR {
		{
			p.SetState(1966)
			p.Match(MySQLStatementParserFOR)
		}
		p.SetState(1972)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySQLStatementParserJOIN:
			{
				p.SetState(1967)
				p.Match(MySQLStatementParserJOIN)
			}

		case MySQLStatementParserORDER:
			{
				p.SetState(1968)
				p.Match(MySQLStatementParserORDER)
			}
			{
				p.SetState(1969)
				p.Match(MySQLStatementParserBY)
			}

		case MySQLStatementParserGROUP:
			{
				p.SetState(1970)
				p.Match(MySQLStatementParserGROUP)
			}
			{
				p.SetState(1971)
				p.Match(MySQLStatementParserBY)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	{
		p.SetState(1976)
		p.Match(MySQLStatementParserLP_)
	}
	{
		p.SetState(1977)
		p.IndexName()
	}
	p.SetState(1982)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(1978)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(1979)
			p.IndexName()
		}

		p.SetState(1984)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1985)
		p.Match(MySQLStatementParserRP_)
	}

	return localctx
}

// IJoinedTableContext is an interface to support dynamic dispatch.
type IJoinedTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJoinedTableContext differentiates from other interfaces.
	IsJoinedTableContext()
}

type JoinedTableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoinedTableContext() *JoinedTableContext {
	var p = new(JoinedTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_joinedTable
	return p
}

func (*JoinedTableContext) IsJoinedTableContext() {}

func NewJoinedTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinedTableContext {
	var p = new(JoinedTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_joinedTable

	return p
}

func (s *JoinedTableContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinedTableContext) InnerJoinType() IInnerJoinTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInnerJoinTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInnerJoinTypeContext)
}

func (s *JoinedTableContext) TableReference() ITableReferenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableReferenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableReferenceContext)
}

func (s *JoinedTableContext) JoinSpecification() IJoinSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoinSpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJoinSpecificationContext)
}

func (s *JoinedTableContext) OuterJoinType() IOuterJoinTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOuterJoinTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOuterJoinTypeContext)
}

func (s *JoinedTableContext) NaturalJoinType() INaturalJoinTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INaturalJoinTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INaturalJoinTypeContext)
}

func (s *JoinedTableContext) TableFactor() ITableFactorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableFactorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableFactorContext)
}

func (s *JoinedTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinedTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JoinedTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterJoinedTable(s)
	}
}

func (s *JoinedTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitJoinedTable(s)
	}
}

func (s *JoinedTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitJoinedTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) JoinedTable() (localctx IJoinedTableContext) {
	this := p
	_ = this

	localctx = NewJoinedTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, MySQLStatementParserRULE_joinedTable)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1999)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserCROSS, MySQLStatementParserINNER, MySQLStatementParserJOIN, MySQLStatementParserSTRAIGHT_JOIN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1987)
			p.InnerJoinType()
		}
		{
			p.SetState(1988)
			p.TableReference()
		}
		p.SetState(1990)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 141, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1989)
				p.JoinSpecification()
			}

		}

	case MySQLStatementParserLEFT, MySQLStatementParserRIGHT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1992)
			p.OuterJoinType()
		}
		{
			p.SetState(1993)
			p.TableReference()
		}
		{
			p.SetState(1994)
			p.JoinSpecification()
		}

	case MySQLStatementParserNATURAL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1996)
			p.NaturalJoinType()
		}
		{
			p.SetState(1997)
			p.TableFactor()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IInnerJoinTypeContext is an interface to support dynamic dispatch.
type IInnerJoinTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInnerJoinTypeContext differentiates from other interfaces.
	IsInnerJoinTypeContext()
}

type InnerJoinTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInnerJoinTypeContext() *InnerJoinTypeContext {
	var p = new(InnerJoinTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_innerJoinType
	return p
}

func (*InnerJoinTypeContext) IsInnerJoinTypeContext() {}

func NewInnerJoinTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InnerJoinTypeContext {
	var p = new(InnerJoinTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_innerJoinType

	return p
}

func (s *InnerJoinTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *InnerJoinTypeContext) JOIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserJOIN, 0)
}

func (s *InnerJoinTypeContext) INNER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINNER, 0)
}

func (s *InnerJoinTypeContext) CROSS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCROSS, 0)
}

func (s *InnerJoinTypeContext) STRAIGHT_JOIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTRAIGHT_JOIN, 0)
}

func (s *InnerJoinTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InnerJoinTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InnerJoinTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterInnerJoinType(s)
	}
}

func (s *InnerJoinTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitInnerJoinType(s)
	}
}

func (s *InnerJoinTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitInnerJoinType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) InnerJoinType() (localctx IInnerJoinTypeContext) {
	this := p
	_ = this

	localctx = NewInnerJoinTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, MySQLStatementParserRULE_innerJoinType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2006)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserCROSS, MySQLStatementParserINNER, MySQLStatementParserJOIN:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(2002)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserCROSS || _la == MySQLStatementParserINNER {
			{
				p.SetState(2001)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySQLStatementParserCROSS || _la == MySQLStatementParserINNER) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(2004)
			p.Match(MySQLStatementParserJOIN)
		}

	case MySQLStatementParserSTRAIGHT_JOIN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2005)
			p.Match(MySQLStatementParserSTRAIGHT_JOIN)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOuterJoinTypeContext is an interface to support dynamic dispatch.
type IOuterJoinTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOuterJoinTypeContext differentiates from other interfaces.
	IsOuterJoinTypeContext()
}

type OuterJoinTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOuterJoinTypeContext() *OuterJoinTypeContext {
	var p = new(OuterJoinTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_outerJoinType
	return p
}

func (*OuterJoinTypeContext) IsOuterJoinTypeContext() {}

func NewOuterJoinTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OuterJoinTypeContext {
	var p = new(OuterJoinTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_outerJoinType

	return p
}

func (s *OuterJoinTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *OuterJoinTypeContext) JOIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserJOIN, 0)
}

func (s *OuterJoinTypeContext) LEFT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLEFT, 0)
}

func (s *OuterJoinTypeContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRIGHT, 0)
}

func (s *OuterJoinTypeContext) OUTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOUTER, 0)
}

func (s *OuterJoinTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OuterJoinTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OuterJoinTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterOuterJoinType(s)
	}
}

func (s *OuterJoinTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitOuterJoinType(s)
	}
}

func (s *OuterJoinTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitOuterJoinType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) OuterJoinType() (localctx IOuterJoinTypeContext) {
	this := p
	_ = this

	localctx = NewOuterJoinTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, MySQLStatementParserRULE_outerJoinType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2008)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserLEFT || _la == MySQLStatementParserRIGHT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(2010)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserOUTER {
		{
			p.SetState(2009)
			p.Match(MySQLStatementParserOUTER)
		}

	}
	{
		p.SetState(2012)
		p.Match(MySQLStatementParserJOIN)
	}

	return localctx
}

// INaturalJoinTypeContext is an interface to support dynamic dispatch.
type INaturalJoinTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNaturalJoinTypeContext differentiates from other interfaces.
	IsNaturalJoinTypeContext()
}

type NaturalJoinTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNaturalJoinTypeContext() *NaturalJoinTypeContext {
	var p = new(NaturalJoinTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_naturalJoinType
	return p
}

func (*NaturalJoinTypeContext) IsNaturalJoinTypeContext() {}

func NewNaturalJoinTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NaturalJoinTypeContext {
	var p = new(NaturalJoinTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_naturalJoinType

	return p
}

func (s *NaturalJoinTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *NaturalJoinTypeContext) NATURAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNATURAL, 0)
}

func (s *NaturalJoinTypeContext) JOIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserJOIN, 0)
}

func (s *NaturalJoinTypeContext) INNER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINNER, 0)
}

func (s *NaturalJoinTypeContext) LEFT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLEFT, 0)
}

func (s *NaturalJoinTypeContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRIGHT, 0)
}

func (s *NaturalJoinTypeContext) OUTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOUTER, 0)
}

func (s *NaturalJoinTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NaturalJoinTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NaturalJoinTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterNaturalJoinType(s)
	}
}

func (s *NaturalJoinTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitNaturalJoinType(s)
	}
}

func (s *NaturalJoinTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitNaturalJoinType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) NaturalJoinType() (localctx INaturalJoinTypeContext) {
	this := p
	_ = this

	localctx = NewNaturalJoinTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, MySQLStatementParserRULE_naturalJoinType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2025)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 148, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2014)
			p.Match(MySQLStatementParserNATURAL)
		}
		p.SetState(2016)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserINNER {
			{
				p.SetState(2015)
				p.Match(MySQLStatementParserINNER)
			}

		}
		{
			p.SetState(2018)
			p.Match(MySQLStatementParserJOIN)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2019)
			p.Match(MySQLStatementParserNATURAL)
		}
		{
			p.SetState(2020)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserLEFT || _la == MySQLStatementParserRIGHT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(2022)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserOUTER {
			{
				p.SetState(2021)
				p.Match(MySQLStatementParserOUTER)
			}

		}
		{
			p.SetState(2024)
			p.Match(MySQLStatementParserJOIN)
		}

	}

	return localctx
}

// IJoinSpecificationContext is an interface to support dynamic dispatch.
type IJoinSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJoinSpecificationContext differentiates from other interfaces.
	IsJoinSpecificationContext()
}

type JoinSpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoinSpecificationContext() *JoinSpecificationContext {
	var p = new(JoinSpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_joinSpecification
	return p
}

func (*JoinSpecificationContext) IsJoinSpecificationContext() {}

func NewJoinSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinSpecificationContext {
	var p = new(JoinSpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_joinSpecification

	return p
}

func (s *JoinSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinSpecificationContext) ON() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserON, 0)
}

func (s *JoinSpecificationContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *JoinSpecificationContext) USING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUSING, 0)
}

func (s *JoinSpecificationContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *JoinSpecificationContext) ColumnNames() IColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNamesContext)
}

func (s *JoinSpecificationContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *JoinSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JoinSpecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterJoinSpecification(s)
	}
}

func (s *JoinSpecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitJoinSpecification(s)
	}
}

func (s *JoinSpecificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitJoinSpecification(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) JoinSpecification() (localctx IJoinSpecificationContext) {
	this := p
	_ = this

	localctx = NewJoinSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, MySQLStatementParserRULE_joinSpecification)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2034)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserON:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2027)
			p.Match(MySQLStatementParserON)
		}
		{
			p.SetState(2028)
			p.expr(0)
		}

	case MySQLStatementParserUSING:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2029)
			p.Match(MySQLStatementParserUSING)
		}
		{
			p.SetState(2030)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(2031)
			p.ColumnNames()
		}
		{
			p.SetState(2032)
			p.Match(MySQLStatementParserRP_)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWhereClauseContext is an interface to support dynamic dispatch.
type IWhereClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhereClauseContext differentiates from other interfaces.
	IsWhereClauseContext()
}

type WhereClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhereClauseContext() *WhereClauseContext {
	var p = new(WhereClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_whereClause
	return p
}

func (*WhereClauseContext) IsWhereClauseContext() {}

func NewWhereClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhereClauseContext {
	var p = new(WhereClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_whereClause

	return p
}

func (s *WhereClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WhereClauseContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWHERE, 0)
}

func (s *WhereClauseContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *WhereClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhereClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhereClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterWhereClause(s)
	}
}

func (s *WhereClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitWhereClause(s)
	}
}

func (s *WhereClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitWhereClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) WhereClause() (localctx IWhereClauseContext) {
	this := p
	_ = this

	localctx = NewWhereClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, MySQLStatementParserRULE_whereClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2036)
		p.Match(MySQLStatementParserWHERE)
	}
	{
		p.SetState(2037)
		p.expr(0)
	}

	return localctx
}

// IGroupByClauseContext is an interface to support dynamic dispatch.
type IGroupByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroupByClauseContext differentiates from other interfaces.
	IsGroupByClauseContext()
}

type GroupByClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupByClauseContext() *GroupByClauseContext {
	var p = new(GroupByClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_groupByClause
	return p
}

func (*GroupByClauseContext) IsGroupByClauseContext() {}

func NewGroupByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupByClauseContext {
	var p = new(GroupByClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_groupByClause

	return p
}

func (s *GroupByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupByClauseContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGROUP, 0)
}

func (s *GroupByClauseContext) BY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBY, 0)
}

func (s *GroupByClauseContext) AllOrderByItem() []IOrderByItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrderByItemContext)(nil)).Elem())
	var tst = make([]IOrderByItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrderByItemContext)
		}
	}

	return tst
}

func (s *GroupByClauseContext) OrderByItem(i int) IOrderByItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrderByItemContext)
}

func (s *GroupByClauseContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *GroupByClauseContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *GroupByClauseContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWITH, 0)
}

func (s *GroupByClauseContext) ROLLUP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROLLUP, 0)
}

func (s *GroupByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupByClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterGroupByClause(s)
	}
}

func (s *GroupByClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitGroupByClause(s)
	}
}

func (s *GroupByClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitGroupByClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) GroupByClause() (localctx IGroupByClauseContext) {
	this := p
	_ = this

	localctx = NewGroupByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, MySQLStatementParserRULE_groupByClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2039)
		p.Match(MySQLStatementParserGROUP)
	}
	{
		p.SetState(2040)
		p.Match(MySQLStatementParserBY)
	}
	{
		p.SetState(2041)
		p.OrderByItem()
	}
	p.SetState(2046)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 150, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2042)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(2043)
				p.OrderByItem()
			}

		}
		p.SetState(2048)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 150, p.GetParserRuleContext())
	}
	p.SetState(2051)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 151, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2049)
			p.Match(MySQLStatementParserWITH)
		}
		{
			p.SetState(2050)
			p.Match(MySQLStatementParserROLLUP)
		}

	}

	return localctx
}

// IHavingClauseContext is an interface to support dynamic dispatch.
type IHavingClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHavingClauseContext differentiates from other interfaces.
	IsHavingClauseContext()
}

type HavingClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHavingClauseContext() *HavingClauseContext {
	var p = new(HavingClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_havingClause
	return p
}

func (*HavingClauseContext) IsHavingClauseContext() {}

func NewHavingClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HavingClauseContext {
	var p = new(HavingClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_havingClause

	return p
}

func (s *HavingClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *HavingClauseContext) HAVING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHAVING, 0)
}

func (s *HavingClauseContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *HavingClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HavingClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HavingClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterHavingClause(s)
	}
}

func (s *HavingClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitHavingClause(s)
	}
}

func (s *HavingClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitHavingClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) HavingClause() (localctx IHavingClauseContext) {
	this := p
	_ = this

	localctx = NewHavingClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, MySQLStatementParserRULE_havingClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2053)
		p.Match(MySQLStatementParserHAVING)
	}
	{
		p.SetState(2054)
		p.expr(0)
	}

	return localctx
}

// ILimitClauseContext is an interface to support dynamic dispatch.
type ILimitClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLimitClauseContext differentiates from other interfaces.
	IsLimitClauseContext()
}

type LimitClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLimitClauseContext() *LimitClauseContext {
	var p = new(LimitClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_limitClause
	return p
}

func (*LimitClauseContext) IsLimitClauseContext() {}

func NewLimitClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LimitClauseContext {
	var p = new(LimitClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_limitClause

	return p
}

func (s *LimitClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *LimitClauseContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLIMIT, 0)
}

func (s *LimitClauseContext) LimitRowCount() ILimitRowCountContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitRowCountContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimitRowCountContext)
}

func (s *LimitClauseContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOFFSET, 0)
}

func (s *LimitClauseContext) LimitOffset() ILimitOffsetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitOffsetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimitOffsetContext)
}

func (s *LimitClauseContext) COMMA_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, 0)
}

func (s *LimitClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LimitClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LimitClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterLimitClause(s)
	}
}

func (s *LimitClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitLimitClause(s)
	}
}

func (s *LimitClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitLimitClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) LimitClause() (localctx ILimitClauseContext) {
	this := p
	_ = this

	localctx = NewLimitClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, MySQLStatementParserRULE_limitClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2056)
		p.Match(MySQLStatementParserLIMIT)
	}
	p.SetState(2067)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 153, p.GetParserRuleContext()) {
	case 1:
		p.SetState(2060)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 152, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2057)
				p.LimitOffset()
			}
			{
				p.SetState(2058)
				p.Match(MySQLStatementParserCOMMA_)
			}

		}
		{
			p.SetState(2062)
			p.LimitRowCount()
		}

	case 2:
		{
			p.SetState(2063)
			p.LimitRowCount()
		}
		{
			p.SetState(2064)
			p.Match(MySQLStatementParserOFFSET)
		}
		{
			p.SetState(2065)
			p.LimitOffset()
		}

	}

	return localctx
}

// ILimitRowCountContext is an interface to support dynamic dispatch.
type ILimitRowCountContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLimitRowCountContext differentiates from other interfaces.
	IsLimitRowCountContext()
}

type LimitRowCountContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLimitRowCountContext() *LimitRowCountContext {
	var p = new(LimitRowCountContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_limitRowCount
	return p
}

func (*LimitRowCountContext) IsLimitRowCountContext() {}

func NewLimitRowCountContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LimitRowCountContext {
	var p = new(LimitRowCountContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_limitRowCount

	return p
}

func (s *LimitRowCountContext) GetParser() antlr.Parser { return s.parser }

func (s *LimitRowCountContext) NumberLiterals() INumberLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumberLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumberLiteralsContext)
}

func (s *LimitRowCountContext) ParameterMarker() IParameterMarkerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterMarkerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterMarkerContext)
}

func (s *LimitRowCountContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LimitRowCountContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LimitRowCountContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterLimitRowCount(s)
	}
}

func (s *LimitRowCountContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitLimitRowCount(s)
	}
}

func (s *LimitRowCountContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitLimitRowCount(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) LimitRowCount() (localctx ILimitRowCountContext) {
	this := p
	_ = this

	localctx = NewLimitRowCountContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, MySQLStatementParserRULE_limitRowCount)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2071)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserNUMBER_:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2069)
			p.NumberLiterals()
		}

	case MySQLStatementParserQUESTION_:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2070)
			p.ParameterMarker()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILimitOffsetContext is an interface to support dynamic dispatch.
type ILimitOffsetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLimitOffsetContext differentiates from other interfaces.
	IsLimitOffsetContext()
}

type LimitOffsetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLimitOffsetContext() *LimitOffsetContext {
	var p = new(LimitOffsetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_limitOffset
	return p
}

func (*LimitOffsetContext) IsLimitOffsetContext() {}

func NewLimitOffsetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LimitOffsetContext {
	var p = new(LimitOffsetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_limitOffset

	return p
}

func (s *LimitOffsetContext) GetParser() antlr.Parser { return s.parser }

func (s *LimitOffsetContext) NumberLiterals() INumberLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumberLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumberLiteralsContext)
}

func (s *LimitOffsetContext) ParameterMarker() IParameterMarkerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterMarkerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterMarkerContext)
}

func (s *LimitOffsetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LimitOffsetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LimitOffsetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterLimitOffset(s)
	}
}

func (s *LimitOffsetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitLimitOffset(s)
	}
}

func (s *LimitOffsetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitLimitOffset(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) LimitOffset() (localctx ILimitOffsetContext) {
	this := p
	_ = this

	localctx = NewLimitOffsetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, MySQLStatementParserRULE_limitOffset)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2075)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserNUMBER_:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2073)
			p.NumberLiterals()
		}

	case MySQLStatementParserQUESTION_:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2074)
			p.ParameterMarker()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWindowClauseContext is an interface to support dynamic dispatch.
type IWindowClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindowClauseContext differentiates from other interfaces.
	IsWindowClauseContext()
}

type WindowClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindowClauseContext() *WindowClauseContext {
	var p = new(WindowClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_windowClause
	return p
}

func (*WindowClauseContext) IsWindowClauseContext() {}

func NewWindowClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WindowClauseContext {
	var p = new(WindowClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_windowClause

	return p
}

func (s *WindowClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WindowClauseContext) WINDOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWINDOW, 0)
}

func (s *WindowClauseContext) AllWindowItem() []IWindowItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWindowItemContext)(nil)).Elem())
	var tst = make([]IWindowItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWindowItemContext)
		}
	}

	return tst
}

func (s *WindowClauseContext) WindowItem(i int) IWindowItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindowItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWindowItemContext)
}

func (s *WindowClauseContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *WindowClauseContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *WindowClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WindowClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WindowClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterWindowClause(s)
	}
}

func (s *WindowClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitWindowClause(s)
	}
}

func (s *WindowClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitWindowClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) WindowClause() (localctx IWindowClauseContext) {
	this := p
	_ = this

	localctx = NewWindowClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, MySQLStatementParserRULE_windowClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2077)
		p.Match(MySQLStatementParserWINDOW)
	}
	{
		p.SetState(2078)
		p.WindowItem()
	}
	p.SetState(2083)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 156, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2079)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(2080)
				p.WindowItem()
			}

		}
		p.SetState(2085)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 156, p.GetParserRuleContext())
	}

	return localctx
}

// IWindowItemContext is an interface to support dynamic dispatch.
type IWindowItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindowItemContext differentiates from other interfaces.
	IsWindowItemContext()
}

type WindowItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindowItemContext() *WindowItemContext {
	var p = new(WindowItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_windowItem
	return p
}

func (*WindowItemContext) IsWindowItemContext() {}

func NewWindowItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WindowItemContext {
	var p = new(WindowItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_windowItem

	return p
}

func (s *WindowItemContext) GetParser() antlr.Parser { return s.parser }

func (s *WindowItemContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *WindowItemContext) AS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAS, 0)
}

func (s *WindowItemContext) WindowSpecification() IWindowSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindowSpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindowSpecificationContext)
}

func (s *WindowItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WindowItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WindowItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterWindowItem(s)
	}
}

func (s *WindowItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitWindowItem(s)
	}
}

func (s *WindowItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitWindowItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) WindowItem() (localctx IWindowItemContext) {
	this := p
	_ = this

	localctx = NewWindowItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, MySQLStatementParserRULE_windowItem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2086)
		p.Identifier()
	}
	{
		p.SetState(2087)
		p.Match(MySQLStatementParserAS)
	}
	{
		p.SetState(2088)
		p.WindowSpecification()
	}

	return localctx
}

// ISubqueryContext is an interface to support dynamic dispatch.
type ISubqueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubqueryContext differentiates from other interfaces.
	IsSubqueryContext()
}

type SubqueryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubqueryContext() *SubqueryContext {
	var p = new(SubqueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_subquery
	return p
}

func (*SubqueryContext) IsSubqueryContext() {}

func NewSubqueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubqueryContext {
	var p = new(SubqueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_subquery

	return p
}

func (s *SubqueryContext) GetParser() antlr.Parser { return s.parser }

func (s *SubqueryContext) QueryExpressionParens() IQueryExpressionParensContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryExpressionParensContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryExpressionParensContext)
}

func (s *SubqueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubqueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubqueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSubquery(s)
	}
}

func (s *SubqueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSubquery(s)
	}
}

func (s *SubqueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSubquery(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Subquery() (localctx ISubqueryContext) {
	this := p
	_ = this

	localctx = NewSubqueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, MySQLStatementParserRULE_subquery)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2090)
		p.QueryExpressionParens()
	}

	return localctx
}

// ISelectLinesIntoContext is an interface to support dynamic dispatch.
type ISelectLinesIntoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectLinesIntoContext differentiates from other interfaces.
	IsSelectLinesIntoContext()
}

type SelectLinesIntoContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectLinesIntoContext() *SelectLinesIntoContext {
	var p = new(SelectLinesIntoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_selectLinesInto
	return p
}

func (*SelectLinesIntoContext) IsSelectLinesIntoContext() {}

func NewSelectLinesIntoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectLinesIntoContext {
	var p = new(SelectLinesIntoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_selectLinesInto

	return p
}

func (s *SelectLinesIntoContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectLinesIntoContext) STARTING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTARTING, 0)
}

func (s *SelectLinesIntoContext) BY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBY, 0)
}

func (s *SelectLinesIntoContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *SelectLinesIntoContext) TERMINATED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTERMINATED, 0)
}

func (s *SelectLinesIntoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectLinesIntoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectLinesIntoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSelectLinesInto(s)
	}
}

func (s *SelectLinesIntoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSelectLinesInto(s)
	}
}

func (s *SelectLinesIntoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSelectLinesInto(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SelectLinesInto() (localctx ISelectLinesIntoContext) {
	this := p
	_ = this

	localctx = NewSelectLinesIntoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, MySQLStatementParserRULE_selectLinesInto)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2098)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserSTARTING:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2092)
			p.Match(MySQLStatementParserSTARTING)
		}
		{
			p.SetState(2093)
			p.Match(MySQLStatementParserBY)
		}
		{
			p.SetState(2094)
			p.String_()
		}

	case MySQLStatementParserTERMINATED:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2095)
			p.Match(MySQLStatementParserTERMINATED)
		}
		{
			p.SetState(2096)
			p.Match(MySQLStatementParserBY)
		}
		{
			p.SetState(2097)
			p.String_()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISelectFieldsIntoContext is an interface to support dynamic dispatch.
type ISelectFieldsIntoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectFieldsIntoContext differentiates from other interfaces.
	IsSelectFieldsIntoContext()
}

type SelectFieldsIntoContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectFieldsIntoContext() *SelectFieldsIntoContext {
	var p = new(SelectFieldsIntoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_selectFieldsInto
	return p
}

func (*SelectFieldsIntoContext) IsSelectFieldsIntoContext() {}

func NewSelectFieldsIntoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectFieldsIntoContext {
	var p = new(SelectFieldsIntoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_selectFieldsInto

	return p
}

func (s *SelectFieldsIntoContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectFieldsIntoContext) TERMINATED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTERMINATED, 0)
}

func (s *SelectFieldsIntoContext) BY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBY, 0)
}

func (s *SelectFieldsIntoContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *SelectFieldsIntoContext) ENCLOSED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENCLOSED, 0)
}

func (s *SelectFieldsIntoContext) OPTIONALLY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOPTIONALLY, 0)
}

func (s *SelectFieldsIntoContext) ESCAPED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserESCAPED, 0)
}

func (s *SelectFieldsIntoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectFieldsIntoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectFieldsIntoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSelectFieldsInto(s)
	}
}

func (s *SelectFieldsIntoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSelectFieldsInto(s)
	}
}

func (s *SelectFieldsIntoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSelectFieldsInto(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SelectFieldsInto() (localctx ISelectFieldsIntoContext) {
	this := p
	_ = this

	localctx = NewSelectFieldsIntoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, MySQLStatementParserRULE_selectFieldsInto)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2112)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserTERMINATED:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2100)
			p.Match(MySQLStatementParserTERMINATED)
		}
		{
			p.SetState(2101)
			p.Match(MySQLStatementParserBY)
		}
		{
			p.SetState(2102)
			p.String_()
		}

	case MySQLStatementParserENCLOSED, MySQLStatementParserOPTIONALLY:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(2104)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserOPTIONALLY {
			{
				p.SetState(2103)
				p.Match(MySQLStatementParserOPTIONALLY)
			}

		}
		{
			p.SetState(2106)
			p.Match(MySQLStatementParserENCLOSED)
		}
		{
			p.SetState(2107)
			p.Match(MySQLStatementParserBY)
		}
		{
			p.SetState(2108)
			p.String_()
		}

	case MySQLStatementParserESCAPED:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2109)
			p.Match(MySQLStatementParserESCAPED)
		}
		{
			p.SetState(2110)
			p.Match(MySQLStatementParserBY)
		}
		{
			p.SetState(2111)
			p.String_()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISelectIntoExpressionContext is an interface to support dynamic dispatch.
type ISelectIntoExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectIntoExpressionContext differentiates from other interfaces.
	IsSelectIntoExpressionContext()
}

type SelectIntoExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectIntoExpressionContext() *SelectIntoExpressionContext {
	var p = new(SelectIntoExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_selectIntoExpression
	return p
}

func (*SelectIntoExpressionContext) IsSelectIntoExpressionContext() {}

func NewSelectIntoExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectIntoExpressionContext {
	var p = new(SelectIntoExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_selectIntoExpression

	return p
}

func (s *SelectIntoExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectIntoExpressionContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINTO, 0)
}

func (s *SelectIntoExpressionContext) AllVariable() []IVariableContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariableContext)(nil)).Elem())
	var tst = make([]IVariableContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariableContext)
		}
	}

	return tst
}

func (s *SelectIntoExpressionContext) Variable(i int) IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *SelectIntoExpressionContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *SelectIntoExpressionContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *SelectIntoExpressionContext) DUMPFILE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDUMPFILE, 0)
}

func (s *SelectIntoExpressionContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *SelectIntoExpressionContext) OUTFILE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOUTFILE, 0)
}

func (s *SelectIntoExpressionContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHARACTER, 0)
}

func (s *SelectIntoExpressionContext) SET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSET, 0)
}

func (s *SelectIntoExpressionContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *SelectIntoExpressionContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOLUMNS, 0)
}

func (s *SelectIntoExpressionContext) LINES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLINES, 0)
}

func (s *SelectIntoExpressionContext) AllSelectFieldsInto() []ISelectFieldsIntoContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelectFieldsIntoContext)(nil)).Elem())
	var tst = make([]ISelectFieldsIntoContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelectFieldsIntoContext)
		}
	}

	return tst
}

func (s *SelectIntoExpressionContext) SelectFieldsInto(i int) ISelectFieldsIntoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectFieldsIntoContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelectFieldsIntoContext)
}

func (s *SelectIntoExpressionContext) AllSelectLinesInto() []ISelectLinesIntoContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelectLinesIntoContext)(nil)).Elem())
	var tst = make([]ISelectLinesIntoContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelectLinesIntoContext)
		}
	}

	return tst
}

func (s *SelectIntoExpressionContext) SelectLinesInto(i int) ISelectLinesIntoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectLinesIntoContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelectLinesIntoContext)
}

func (s *SelectIntoExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectIntoExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectIntoExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSelectIntoExpression(s)
	}
}

func (s *SelectIntoExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSelectIntoExpression(s)
	}
}

func (s *SelectIntoExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSelectIntoExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SelectIntoExpression() (localctx ISelectIntoExpressionContext) {
	this := p
	_ = this

	localctx = NewSelectIntoExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, MySQLStatementParserRULE_selectIntoExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(2150)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 166, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2114)
			p.Match(MySQLStatementParserINTO)
		}
		{
			p.SetState(2115)
			p.Variable()
		}
		p.SetState(2120)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 160, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2116)
					p.Match(MySQLStatementParserCOMMA_)
				}
				{
					p.SetState(2117)
					p.Variable()
				}

			}
			p.SetState(2122)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 160, p.GetParserRuleContext())
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2123)
			p.Match(MySQLStatementParserINTO)
		}
		{
			p.SetState(2124)
			p.Match(MySQLStatementParserDUMPFILE)
		}
		{
			p.SetState(2125)
			p.String_()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2126)
			p.Match(MySQLStatementParserINTO)
		}
		{
			p.SetState(2127)
			p.Match(MySQLStatementParserOUTFILE)
		}
		{
			p.SetState(2128)
			p.String_()
		}
		p.SetState(2132)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 161, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2129)
				p.Match(MySQLStatementParserCHARACTER)
			}
			{
				p.SetState(2130)
				p.Match(MySQLStatementParserSET)
			}
			{
				p.SetState(2131)
				p.CharsetName()
			}

		}
		p.SetState(2140)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 163, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2134)
				p.Match(MySQLStatementParserCOLUMNS)
			}
			p.SetState(2136)
			p.GetErrorHandler().Sync(p)
			_alt = 1
			for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				switch _alt {
				case 1:
					{
						p.SetState(2135)
						p.SelectFieldsInto()
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

				p.SetState(2138)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 162, p.GetParserRuleContext())
			}

		}
		p.SetState(2148)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 165, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2142)
				p.Match(MySQLStatementParserLINES)
			}
			p.SetState(2144)
			p.GetErrorHandler().Sync(p)
			_alt = 1
			for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				switch _alt {
				case 1:
					{
						p.SetState(2143)
						p.SelectLinesInto()
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

				p.SetState(2146)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 164, p.GetParserRuleContext())
			}

		}

	}

	return localctx
}

// ILockClauseContext is an interface to support dynamic dispatch.
type ILockClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLockClauseContext differentiates from other interfaces.
	IsLockClauseContext()
}

type LockClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLockClauseContext() *LockClauseContext {
	var p = new(LockClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_lockClause
	return p
}

func (*LockClauseContext) IsLockClauseContext() {}

func NewLockClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LockClauseContext {
	var p = new(LockClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_lockClause

	return p
}

func (s *LockClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *LockClauseContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOR, 0)
}

func (s *LockClauseContext) LockStrength() ILockStrengthContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILockStrengthContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILockStrengthContext)
}

func (s *LockClauseContext) TableLockingList() ITableLockingListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableLockingListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableLockingListContext)
}

func (s *LockClauseContext) LockedRowAction() ILockedRowActionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILockedRowActionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILockedRowActionContext)
}

func (s *LockClauseContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCK, 0)
}

func (s *LockClauseContext) IN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIN, 0)
}

func (s *LockClauseContext) SHARE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHARE, 0)
}

func (s *LockClauseContext) MODE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMODE, 0)
}

func (s *LockClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LockClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LockClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterLockClause(s)
	}
}

func (s *LockClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitLockClause(s)
	}
}

func (s *LockClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitLockClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) LockClause() (localctx ILockClauseContext) {
	this := p
	_ = this

	localctx = NewLockClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, MySQLStatementParserRULE_lockClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2164)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserFOR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2152)
			p.Match(MySQLStatementParserFOR)
		}
		{
			p.SetState(2153)
			p.LockStrength()
		}
		p.SetState(2155)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserOF {
			{
				p.SetState(2154)
				p.TableLockingList()
			}

		}
		p.SetState(2158)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 168, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2157)
				p.LockedRowAction()
			}

		}

	case MySQLStatementParserLOCK:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2160)
			p.Match(MySQLStatementParserLOCK)
		}
		{
			p.SetState(2161)
			p.Match(MySQLStatementParserIN)
		}
		{
			p.SetState(2162)
			p.Match(MySQLStatementParserSHARE)
		}
		{
			p.SetState(2163)
			p.Match(MySQLStatementParserMODE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILockClauseListContext is an interface to support dynamic dispatch.
type ILockClauseListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLockClauseListContext differentiates from other interfaces.
	IsLockClauseListContext()
}

type LockClauseListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLockClauseListContext() *LockClauseListContext {
	var p = new(LockClauseListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_lockClauseList
	return p
}

func (*LockClauseListContext) IsLockClauseListContext() {}

func NewLockClauseListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LockClauseListContext {
	var p = new(LockClauseListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_lockClauseList

	return p
}

func (s *LockClauseListContext) GetParser() antlr.Parser { return s.parser }

func (s *LockClauseListContext) AllLockClause() []ILockClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILockClauseContext)(nil)).Elem())
	var tst = make([]ILockClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILockClauseContext)
		}
	}

	return tst
}

func (s *LockClauseListContext) LockClause(i int) ILockClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILockClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILockClauseContext)
}

func (s *LockClauseListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LockClauseListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LockClauseListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterLockClauseList(s)
	}
}

func (s *LockClauseListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitLockClauseList(s)
	}
}

func (s *LockClauseListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitLockClauseList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) LockClauseList() (localctx ILockClauseListContext) {
	this := p
	_ = this

	localctx = NewLockClauseListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, MySQLStatementParserRULE_lockClauseList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2167)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == MySQLStatementParserFOR || _la == MySQLStatementParserLOCK {
		{
			p.SetState(2166)
			p.LockClause()
		}

		p.SetState(2169)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ILockStrengthContext is an interface to support dynamic dispatch.
type ILockStrengthContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLockStrengthContext differentiates from other interfaces.
	IsLockStrengthContext()
}

type LockStrengthContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLockStrengthContext() *LockStrengthContext {
	var p = new(LockStrengthContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_lockStrength
	return p
}

func (*LockStrengthContext) IsLockStrengthContext() {}

func NewLockStrengthContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LockStrengthContext {
	var p = new(LockStrengthContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_lockStrength

	return p
}

func (s *LockStrengthContext) GetParser() antlr.Parser { return s.parser }

func (s *LockStrengthContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUPDATE, 0)
}

func (s *LockStrengthContext) SHARE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHARE, 0)
}

func (s *LockStrengthContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LockStrengthContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LockStrengthContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterLockStrength(s)
	}
}

func (s *LockStrengthContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitLockStrength(s)
	}
}

func (s *LockStrengthContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitLockStrength(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) LockStrength() (localctx ILockStrengthContext) {
	this := p
	_ = this

	localctx = NewLockStrengthContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, MySQLStatementParserRULE_lockStrength)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2171)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserSHARE || _la == MySQLStatementParserUPDATE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ILockedRowActionContext is an interface to support dynamic dispatch.
type ILockedRowActionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLockedRowActionContext differentiates from other interfaces.
	IsLockedRowActionContext()
}

type LockedRowActionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLockedRowActionContext() *LockedRowActionContext {
	var p = new(LockedRowActionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_lockedRowAction
	return p
}

func (*LockedRowActionContext) IsLockedRowActionContext() {}

func NewLockedRowActionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LockedRowActionContext {
	var p = new(LockedRowActionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_lockedRowAction

	return p
}

func (s *LockedRowActionContext) GetParser() antlr.Parser { return s.parser }

func (s *LockedRowActionContext) SKIP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSKIP_SYMBOL, 0)
}

func (s *LockedRowActionContext) LOCKED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCKED, 0)
}

func (s *LockedRowActionContext) NOWAIT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNOWAIT, 0)
}

func (s *LockedRowActionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LockedRowActionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LockedRowActionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterLockedRowAction(s)
	}
}

func (s *LockedRowActionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitLockedRowAction(s)
	}
}

func (s *LockedRowActionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitLockedRowAction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) LockedRowAction() (localctx ILockedRowActionContext) {
	this := p
	_ = this

	localctx = NewLockedRowActionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, MySQLStatementParserRULE_lockedRowAction)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2176)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserSKIP_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2173)
			p.Match(MySQLStatementParserSKIP_SYMBOL)
		}
		{
			p.SetState(2174)
			p.Match(MySQLStatementParserLOCKED)
		}

	case MySQLStatementParserNOWAIT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2175)
			p.Match(MySQLStatementParserNOWAIT)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITableLockingListContext is an interface to support dynamic dispatch.
type ITableLockingListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableLockingListContext differentiates from other interfaces.
	IsTableLockingListContext()
}

type TableLockingListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableLockingListContext() *TableLockingListContext {
	var p = new(TableLockingListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_tableLockingList
	return p
}

func (*TableLockingListContext) IsTableLockingListContext() {}

func NewTableLockingListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableLockingListContext {
	var p = new(TableLockingListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_tableLockingList

	return p
}

func (s *TableLockingListContext) GetParser() antlr.Parser { return s.parser }

func (s *TableLockingListContext) OF() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOF, 0)
}

func (s *TableLockingListContext) TableAliasRefList() ITableAliasRefListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableAliasRefListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableAliasRefListContext)
}

func (s *TableLockingListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableLockingListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableLockingListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTableLockingList(s)
	}
}

func (s *TableLockingListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTableLockingList(s)
	}
}

func (s *TableLockingListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTableLockingList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TableLockingList() (localctx ITableLockingListContext) {
	this := p
	_ = this

	localctx = NewTableLockingListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, MySQLStatementParserRULE_tableLockingList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2178)
		p.Match(MySQLStatementParserOF)
	}
	{
		p.SetState(2179)
		p.TableAliasRefList()
	}

	return localctx
}

// ITableIdentOptWildContext is an interface to support dynamic dispatch.
type ITableIdentOptWildContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableIdentOptWildContext differentiates from other interfaces.
	IsTableIdentOptWildContext()
}

type TableIdentOptWildContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableIdentOptWildContext() *TableIdentOptWildContext {
	var p = new(TableIdentOptWildContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_tableIdentOptWild
	return p
}

func (*TableIdentOptWildContext) IsTableIdentOptWildContext() {}

func NewTableIdentOptWildContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableIdentOptWildContext {
	var p = new(TableIdentOptWildContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_tableIdentOptWild

	return p
}

func (s *TableIdentOptWildContext) GetParser() antlr.Parser { return s.parser }

func (s *TableIdentOptWildContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *TableIdentOptWildContext) DOT_ASTERISK_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDOT_ASTERISK_, 0)
}

func (s *TableIdentOptWildContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableIdentOptWildContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableIdentOptWildContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTableIdentOptWild(s)
	}
}

func (s *TableIdentOptWildContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTableIdentOptWild(s)
	}
}

func (s *TableIdentOptWildContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTableIdentOptWild(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TableIdentOptWild() (localctx ITableIdentOptWildContext) {
	this := p
	_ = this

	localctx = NewTableIdentOptWildContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, MySQLStatementParserRULE_tableIdentOptWild)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2181)
		p.TableName()
	}
	p.SetState(2183)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserDOT_ASTERISK_ {
		{
			p.SetState(2182)
			p.Match(MySQLStatementParserDOT_ASTERISK_)
		}

	}

	return localctx
}

// ITableAliasRefListContext is an interface to support dynamic dispatch.
type ITableAliasRefListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableAliasRefListContext differentiates from other interfaces.
	IsTableAliasRefListContext()
}

type TableAliasRefListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableAliasRefListContext() *TableAliasRefListContext {
	var p = new(TableAliasRefListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_tableAliasRefList
	return p
}

func (*TableAliasRefListContext) IsTableAliasRefListContext() {}

func NewTableAliasRefListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableAliasRefListContext {
	var p = new(TableAliasRefListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_tableAliasRefList

	return p
}

func (s *TableAliasRefListContext) GetParser() antlr.Parser { return s.parser }

func (s *TableAliasRefListContext) AllTableIdentOptWild() []ITableIdentOptWildContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableIdentOptWildContext)(nil)).Elem())
	var tst = make([]ITableIdentOptWildContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableIdentOptWildContext)
		}
	}

	return tst
}

func (s *TableAliasRefListContext) TableIdentOptWild(i int) ITableIdentOptWildContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableIdentOptWildContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableIdentOptWildContext)
}

func (s *TableAliasRefListContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *TableAliasRefListContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *TableAliasRefListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableAliasRefListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableAliasRefListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTableAliasRefList(s)
	}
}

func (s *TableAliasRefListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTableAliasRefList(s)
	}
}

func (s *TableAliasRefListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTableAliasRefList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TableAliasRefList() (localctx ITableAliasRefListContext) {
	this := p
	_ = this

	localctx = NewTableAliasRefListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, MySQLStatementParserRULE_tableAliasRefList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2185)
		p.TableIdentOptWild()
	}
	p.SetState(2190)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(2186)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(2187)
			p.TableIdentOptWild()
		}

		p.SetState(2192)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IParameterMarkerContext is an interface to support dynamic dispatch.
type IParameterMarkerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterMarkerContext differentiates from other interfaces.
	IsParameterMarkerContext()
}

type ParameterMarkerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterMarkerContext() *ParameterMarkerContext {
	var p = new(ParameterMarkerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_parameterMarker
	return p
}

func (*ParameterMarkerContext) IsParameterMarkerContext() {}

func NewParameterMarkerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterMarkerContext {
	var p = new(ParameterMarkerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_parameterMarker

	return p
}

func (s *ParameterMarkerContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterMarkerContext) QUESTION_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserQUESTION_, 0)
}

func (s *ParameterMarkerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterMarkerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterMarkerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterParameterMarker(s)
	}
}

func (s *ParameterMarkerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitParameterMarker(s)
	}
}

func (s *ParameterMarkerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitParameterMarker(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ParameterMarker() (localctx IParameterMarkerContext) {
	this := p
	_ = this

	localctx = NewParameterMarkerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, MySQLStatementParserRULE_parameterMarker)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2193)
		p.Match(MySQLStatementParserQUESTION_)
	}

	return localctx
}

// ICustomKeywordContext is an interface to support dynamic dispatch.
type ICustomKeywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCustomKeywordContext differentiates from other interfaces.
	IsCustomKeywordContext()
}

type CustomKeywordContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCustomKeywordContext() *CustomKeywordContext {
	var p = new(CustomKeywordContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_customKeyword
	return p
}

func (*CustomKeywordContext) IsCustomKeywordContext() {}

func NewCustomKeywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CustomKeywordContext {
	var p = new(CustomKeywordContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_customKeyword

	return p
}

func (s *CustomKeywordContext) GetParser() antlr.Parser { return s.parser }

func (s *CustomKeywordContext) MAX() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMAX, 0)
}

func (s *CustomKeywordContext) MIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMIN, 0)
}

func (s *CustomKeywordContext) SUM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSUM, 0)
}

func (s *CustomKeywordContext) COUNT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOUNT, 0)
}

func (s *CustomKeywordContext) GROUP_CONCAT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGROUP_CONCAT, 0)
}

func (s *CustomKeywordContext) CAST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCAST, 0)
}

func (s *CustomKeywordContext) POSITION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPOSITION, 0)
}

func (s *CustomKeywordContext) SUBSTRING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSUBSTRING, 0)
}

func (s *CustomKeywordContext) SUBSTR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSUBSTR, 0)
}

func (s *CustomKeywordContext) EXTRACT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXTRACT, 0)
}

func (s *CustomKeywordContext) TRIM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTRIM, 0)
}

func (s *CustomKeywordContext) LAST_DAY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLAST_DAY, 0)
}

func (s *CustomKeywordContext) TRADITIONAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTRADITIONAL, 0)
}

func (s *CustomKeywordContext) TREE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTREE, 0)
}

func (s *CustomKeywordContext) MYSQL_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMYSQL_ADMIN, 0)
}

func (s *CustomKeywordContext) INSTANT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINSTANT, 0)
}

func (s *CustomKeywordContext) INPLACE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINPLACE, 0)
}

func (s *CustomKeywordContext) COPY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOPY, 0)
}

func (s *CustomKeywordContext) UL_BINARY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUL_BINARY, 0)
}

func (s *CustomKeywordContext) AUTOCOMMIT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAUTOCOMMIT, 0)
}

func (s *CustomKeywordContext) INNODB() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINNODB, 0)
}

func (s *CustomKeywordContext) REDO_LOG() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREDO_LOG, 0)
}

func (s *CustomKeywordContext) LAST_VALUE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLAST_VALUE, 0)
}

func (s *CustomKeywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CustomKeywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CustomKeywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCustomKeyword(s)
	}
}

func (s *CustomKeywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCustomKeyword(s)
	}
}

func (s *CustomKeywordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCustomKeyword(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CustomKeyword() (localctx ICustomKeywordContext) {
	this := p
	_ = this

	localctx = NewCustomKeywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, MySQLStatementParserRULE_customKeyword)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2195)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49))|(1<<(MySQLStatementParserGROUP_CONCAT-49))|(1<<(MySQLStatementParserCAST-49))|(1<<(MySQLStatementParserPOSITION-49))|(1<<(MySQLStatementParserSUBSTRING-49))|(1<<(MySQLStatementParserSUBSTR-49))|(1<<(MySQLStatementParserEXTRACT-49))|(1<<(MySQLStatementParserTRIM-49))|(1<<(MySQLStatementParserLAST_DAY-49))|(1<<(MySQLStatementParserTRADITIONAL-49))|(1<<(MySQLStatementParserTREE-49))|(1<<(MySQLStatementParserMYSQL_ADMIN-49))|(1<<(MySQLStatementParserINSTANT-49))|(1<<(MySQLStatementParserINPLACE-49))|(1<<(MySQLStatementParserCOPY-49))|(1<<(MySQLStatementParserUL_BINARY-49))|(1<<(MySQLStatementParserAUTOCOMMIT-49))|(1<<(MySQLStatementParserINNODB-49))|(1<<(MySQLStatementParserREDO_LOG-49)))) != 0) || _la == MySQLStatementParserLAST_VALUE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ILiteralsContext is an interface to support dynamic dispatch.
type ILiteralsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiteralsContext differentiates from other interfaces.
	IsLiteralsContext()
}

type LiteralsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralsContext() *LiteralsContext {
	var p = new(LiteralsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_literals
	return p
}

func (*LiteralsContext) IsLiteralsContext() {}

func NewLiteralsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralsContext {
	var p = new(LiteralsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_literals

	return p
}

func (s *LiteralsContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralsContext) StringLiterals() IStringLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralsContext)
}

func (s *LiteralsContext) NumberLiterals() INumberLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumberLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumberLiteralsContext)
}

func (s *LiteralsContext) TemporalLiterals() ITemporalLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemporalLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemporalLiteralsContext)
}

func (s *LiteralsContext) HexadecimalLiterals() IHexadecimalLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHexadecimalLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHexadecimalLiteralsContext)
}

func (s *LiteralsContext) BitValueLiterals() IBitValueLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitValueLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitValueLiteralsContext)
}

func (s *LiteralsContext) BooleanLiterals() IBooleanLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBooleanLiteralsContext)
}

func (s *LiteralsContext) NullValueLiterals() INullValueLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INullValueLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INullValueLiteralsContext)
}

func (s *LiteralsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterLiterals(s)
	}
}

func (s *LiteralsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitLiterals(s)
	}
}

func (s *LiteralsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitLiterals(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Literals() (localctx ILiteralsContext) {
	this := p
	_ = this

	localctx = NewLiteralsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, MySQLStatementParserRULE_literals)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2204)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 174, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2197)
			p.StringLiterals()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2198)
			p.NumberLiterals()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2199)
			p.TemporalLiterals()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2200)
			p.HexadecimalLiterals()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2201)
			p.BitValueLiterals()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2202)
			p.BooleanLiterals()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2203)
			p.NullValueLiterals()
		}

	}

	return localctx
}

// IString_Context is an interface to support dynamic dispatch.
type IString_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsString_Context differentiates from other interfaces.
	IsString_Context()
}

type String_Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyString_Context() *String_Context {
	var p = new(String_Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_string_
	return p
}

func (*String_Context) IsString_Context() {}

func NewString_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *String_Context {
	var p = new(String_Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_string_

	return p
}

func (s *String_Context) GetParser() antlr.Parser { return s.parser }

func (s *String_Context) DOUBLE_QUOTED_TEXT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDOUBLE_QUOTED_TEXT, 0)
}

func (s *String_Context) SINGLE_QUOTED_TEXT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSINGLE_QUOTED_TEXT, 0)
}

func (s *String_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *String_Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterString_(s)
	}
}

func (s *String_Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitString_(s)
	}
}

func (s *String_Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitString_(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) String_() (localctx IString_Context) {
	this := p
	_ = this

	localctx = NewString_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, MySQLStatementParserRULE_string_)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2206)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserSINGLE_QUOTED_TEXT || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IStringLiteralsContext is an interface to support dynamic dispatch.
type IStringLiteralsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringLiteralsContext differentiates from other interfaces.
	IsStringLiteralsContext()
}

type StringLiteralsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringLiteralsContext() *StringLiteralsContext {
	var p = new(StringLiteralsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_stringLiterals
	return p
}

func (*StringLiteralsContext) IsStringLiteralsContext() {}

func NewStringLiteralsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringLiteralsContext {
	var p = new(StringLiteralsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_stringLiterals

	return p
}

func (s *StringLiteralsContext) GetParser() antlr.Parser { return s.parser }

func (s *StringLiteralsContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *StringLiteralsContext) UNDERSCORE_CHARSET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNDERSCORE_CHARSET, 0)
}

func (s *StringLiteralsContext) NCHAR_TEXT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNCHAR_TEXT, 0)
}

func (s *StringLiteralsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringLiteralsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringLiteralsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStringLiterals(s)
	}
}

func (s *StringLiteralsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStringLiterals(s)
	}
}

func (s *StringLiteralsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStringLiterals(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) StringLiterals() (localctx IStringLiteralsContext) {
	this := p
	_ = this

	localctx = NewStringLiteralsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, MySQLStatementParserRULE_stringLiterals)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2213)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserSINGLE_QUOTED_TEXT, MySQLStatementParserDOUBLE_QUOTED_TEXT, MySQLStatementParserUNDERSCORE_CHARSET:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(2209)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserUNDERSCORE_CHARSET {
			{
				p.SetState(2208)
				p.Match(MySQLStatementParserUNDERSCORE_CHARSET)
			}

		}
		{
			p.SetState(2211)
			p.String_()
		}

	case MySQLStatementParserNCHAR_TEXT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2212)
			p.Match(MySQLStatementParserNCHAR_TEXT)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INumberLiteralsContext is an interface to support dynamic dispatch.
type INumberLiteralsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNumberLiteralsContext differentiates from other interfaces.
	IsNumberLiteralsContext()
}

type NumberLiteralsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumberLiteralsContext() *NumberLiteralsContext {
	var p = new(NumberLiteralsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_numberLiterals
	return p
}

func (*NumberLiteralsContext) IsNumberLiteralsContext() {}

func NewNumberLiteralsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumberLiteralsContext {
	var p = new(NumberLiteralsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_numberLiterals

	return p
}

func (s *NumberLiteralsContext) GetParser() antlr.Parser { return s.parser }

func (s *NumberLiteralsContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *NumberLiteralsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumberLiteralsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumberLiteralsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterNumberLiterals(s)
	}
}

func (s *NumberLiteralsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitNumberLiterals(s)
	}
}

func (s *NumberLiteralsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitNumberLiterals(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) NumberLiterals() (localctx INumberLiteralsContext) {
	this := p
	_ = this

	localctx = NewNumberLiteralsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, MySQLStatementParserRULE_numberLiterals)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2215)
		p.Match(MySQLStatementParserNUMBER_)
	}

	return localctx
}

// ITemporalLiteralsContext is an interface to support dynamic dispatch.
type ITemporalLiteralsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemporalLiteralsContext differentiates from other interfaces.
	IsTemporalLiteralsContext()
}

type TemporalLiteralsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemporalLiteralsContext() *TemporalLiteralsContext {
	var p = new(TemporalLiteralsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_temporalLiterals
	return p
}

func (*TemporalLiteralsContext) IsTemporalLiteralsContext() {}

func NewTemporalLiteralsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemporalLiteralsContext {
	var p = new(TemporalLiteralsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_temporalLiterals

	return p
}

func (s *TemporalLiteralsContext) GetParser() antlr.Parser { return s.parser }

func (s *TemporalLiteralsContext) SINGLE_QUOTED_TEXT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSINGLE_QUOTED_TEXT, 0)
}

func (s *TemporalLiteralsContext) DATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDATE, 0)
}

func (s *TemporalLiteralsContext) TIME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTIME, 0)
}

func (s *TemporalLiteralsContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTIMESTAMP, 0)
}

func (s *TemporalLiteralsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemporalLiteralsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemporalLiteralsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTemporalLiterals(s)
	}
}

func (s *TemporalLiteralsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTemporalLiterals(s)
	}
}

func (s *TemporalLiteralsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTemporalLiterals(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TemporalLiterals() (localctx ITemporalLiteralsContext) {
	this := p
	_ = this

	localctx = NewTemporalLiteralsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, MySQLStatementParserRULE_temporalLiterals)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2217)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserDATE || _la == MySQLStatementParserTIME || _la == MySQLStatementParserTIMESTAMP) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(2218)
		p.Match(MySQLStatementParserSINGLE_QUOTED_TEXT)
	}

	return localctx
}

// IHexadecimalLiteralsContext is an interface to support dynamic dispatch.
type IHexadecimalLiteralsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHexadecimalLiteralsContext differentiates from other interfaces.
	IsHexadecimalLiteralsContext()
}

type HexadecimalLiteralsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHexadecimalLiteralsContext() *HexadecimalLiteralsContext {
	var p = new(HexadecimalLiteralsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_hexadecimalLiterals
	return p
}

func (*HexadecimalLiteralsContext) IsHexadecimalLiteralsContext() {}

func NewHexadecimalLiteralsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HexadecimalLiteralsContext {
	var p = new(HexadecimalLiteralsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_hexadecimalLiterals

	return p
}

func (s *HexadecimalLiteralsContext) GetParser() antlr.Parser { return s.parser }

func (s *HexadecimalLiteralsContext) HEX_DIGIT_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHEX_DIGIT_, 0)
}

func (s *HexadecimalLiteralsContext) UNDERSCORE_CHARSET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNDERSCORE_CHARSET, 0)
}

func (s *HexadecimalLiteralsContext) CollateClause() ICollateClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollateClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollateClauseContext)
}

func (s *HexadecimalLiteralsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HexadecimalLiteralsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HexadecimalLiteralsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterHexadecimalLiterals(s)
	}
}

func (s *HexadecimalLiteralsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitHexadecimalLiterals(s)
	}
}

func (s *HexadecimalLiteralsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitHexadecimalLiterals(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) HexadecimalLiterals() (localctx IHexadecimalLiteralsContext) {
	this := p
	_ = this

	localctx = NewHexadecimalLiteralsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, MySQLStatementParserRULE_hexadecimalLiterals)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2221)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserUNDERSCORE_CHARSET {
		{
			p.SetState(2220)
			p.Match(MySQLStatementParserUNDERSCORE_CHARSET)
		}

	}
	{
		p.SetState(2223)
		p.Match(MySQLStatementParserHEX_DIGIT_)
	}
	p.SetState(2225)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 178, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2224)
			p.CollateClause()
		}

	}

	return localctx
}

// IBitValueLiteralsContext is an interface to support dynamic dispatch.
type IBitValueLiteralsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitValueLiteralsContext differentiates from other interfaces.
	IsBitValueLiteralsContext()
}

type BitValueLiteralsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitValueLiteralsContext() *BitValueLiteralsContext {
	var p = new(BitValueLiteralsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_bitValueLiterals
	return p
}

func (*BitValueLiteralsContext) IsBitValueLiteralsContext() {}

func NewBitValueLiteralsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitValueLiteralsContext {
	var p = new(BitValueLiteralsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_bitValueLiterals

	return p
}

func (s *BitValueLiteralsContext) GetParser() antlr.Parser { return s.parser }

func (s *BitValueLiteralsContext) BIT_NUM_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBIT_NUM_, 0)
}

func (s *BitValueLiteralsContext) UNDERSCORE_CHARSET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNDERSCORE_CHARSET, 0)
}

func (s *BitValueLiteralsContext) CollateClause() ICollateClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollateClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollateClauseContext)
}

func (s *BitValueLiteralsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitValueLiteralsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitValueLiteralsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterBitValueLiterals(s)
	}
}

func (s *BitValueLiteralsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitBitValueLiterals(s)
	}
}

func (s *BitValueLiteralsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitBitValueLiterals(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) BitValueLiterals() (localctx IBitValueLiteralsContext) {
	this := p
	_ = this

	localctx = NewBitValueLiteralsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, MySQLStatementParserRULE_bitValueLiterals)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2228)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserUNDERSCORE_CHARSET {
		{
			p.SetState(2227)
			p.Match(MySQLStatementParserUNDERSCORE_CHARSET)
		}

	}
	{
		p.SetState(2230)
		p.Match(MySQLStatementParserBIT_NUM_)
	}
	p.SetState(2232)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 180, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2231)
			p.CollateClause()
		}

	}

	return localctx
}

// IBooleanLiteralsContext is an interface to support dynamic dispatch.
type IBooleanLiteralsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBooleanLiteralsContext differentiates from other interfaces.
	IsBooleanLiteralsContext()
}

type BooleanLiteralsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBooleanLiteralsContext() *BooleanLiteralsContext {
	var p = new(BooleanLiteralsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_booleanLiterals
	return p
}

func (*BooleanLiteralsContext) IsBooleanLiteralsContext() {}

func NewBooleanLiteralsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BooleanLiteralsContext {
	var p = new(BooleanLiteralsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_booleanLiterals

	return p
}

func (s *BooleanLiteralsContext) GetParser() antlr.Parser { return s.parser }

func (s *BooleanLiteralsContext) TRUE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTRUE, 0)
}

func (s *BooleanLiteralsContext) FALSE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFALSE, 0)
}

func (s *BooleanLiteralsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BooleanLiteralsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BooleanLiteralsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterBooleanLiterals(s)
	}
}

func (s *BooleanLiteralsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitBooleanLiterals(s)
	}
}

func (s *BooleanLiteralsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitBooleanLiterals(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) BooleanLiterals() (localctx IBooleanLiteralsContext) {
	this := p
	_ = this

	localctx = NewBooleanLiteralsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, MySQLStatementParserRULE_booleanLiterals)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2234)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserFALSE || _la == MySQLStatementParserTRUE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// INullValueLiteralsContext is an interface to support dynamic dispatch.
type INullValueLiteralsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNullValueLiteralsContext differentiates from other interfaces.
	IsNullValueLiteralsContext()
}

type NullValueLiteralsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNullValueLiteralsContext() *NullValueLiteralsContext {
	var p = new(NullValueLiteralsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_nullValueLiterals
	return p
}

func (*NullValueLiteralsContext) IsNullValueLiteralsContext() {}

func NewNullValueLiteralsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NullValueLiteralsContext {
	var p = new(NullValueLiteralsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_nullValueLiterals

	return p
}

func (s *NullValueLiteralsContext) GetParser() antlr.Parser { return s.parser }

func (s *NullValueLiteralsContext) NULL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNULL, 0)
}

func (s *NullValueLiteralsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NullValueLiteralsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NullValueLiteralsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterNullValueLiterals(s)
	}
}

func (s *NullValueLiteralsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitNullValueLiterals(s)
	}
}

func (s *NullValueLiteralsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitNullValueLiterals(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) NullValueLiterals() (localctx INullValueLiteralsContext) {
	this := p
	_ = this

	localctx = NewNullValueLiteralsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, MySQLStatementParserRULE_nullValueLiterals)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2236)
		p.Match(MySQLStatementParserNULL)
	}

	return localctx
}

// ICollationNameContext is an interface to support dynamic dispatch.
type ICollationNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCollationNameContext differentiates from other interfaces.
	IsCollationNameContext()
}

type CollationNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollationNameContext() *CollationNameContext {
	var p = new(CollationNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_collationName
	return p
}

func (*CollationNameContext) IsCollationNameContext() {}

func NewCollationNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CollationNameContext {
	var p = new(CollationNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_collationName

	return p
}

func (s *CollationNameContext) GetParser() antlr.Parser { return s.parser }

func (s *CollationNameContext) TextOrIdentifier() ITextOrIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITextOrIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITextOrIdentifierContext)
}

func (s *CollationNameContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBINARY, 0)
}

func (s *CollationNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CollationNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CollationNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCollationName(s)
	}
}

func (s *CollationNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCollationName(s)
	}
}

func (s *CollationNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCollationName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CollationName() (localctx ICollationNameContext) {
	this := p
	_ = this

	localctx = NewCollationNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, MySQLStatementParserRULE_collationName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2240)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserMAX, MySQLStatementParserMIN, MySQLStatementParserSUM, MySQLStatementParserCOUNT, MySQLStatementParserGROUP_CONCAT, MySQLStatementParserCAST, MySQLStatementParserPOSITION, MySQLStatementParserSUBSTRING, MySQLStatementParserSUBSTR, MySQLStatementParserEXTRACT, MySQLStatementParserTRIM, MySQLStatementParserLAST_DAY, MySQLStatementParserTRADITIONAL, MySQLStatementParserTREE, MySQLStatementParserMYSQL_ADMIN, MySQLStatementParserINSTANT, MySQLStatementParserINPLACE, MySQLStatementParserCOPY, MySQLStatementParserUL_BINARY, MySQLStatementParserAUTOCOMMIT, MySQLStatementParserINNODB, MySQLStatementParserREDO_LOG, MySQLStatementParserACCOUNT, MySQLStatementParserACTION, MySQLStatementParserACTIVE, MySQLStatementParserADMIN, MySQLStatementParserAFTER, MySQLStatementParserAGAINST, MySQLStatementParserAGGREGATE, MySQLStatementParserALGORITHM, MySQLStatementParserALWAYS, MySQLStatementParserANY, MySQLStatementParserARRAY, MySQLStatementParserASCII, MySQLStatementParserAT, MySQLStatementParserATTRIBUTE, MySQLStatementParserAUTOEXTEND_SIZE, MySQLStatementParserAUTO_INCREMENT, MySQLStatementParserAVG, MySQLStatementParserAVG_ROW_LENGTH, MySQLStatementParserBACKUP, MySQLStatementParserBEGIN, MySQLStatementParserBINLOG, MySQLStatementParserBIT, MySQLStatementParserBLOCK, MySQLStatementParserBOOL, MySQLStatementParserBOOLEAN, MySQLStatementParserBTREE, MySQLStatementParserBUCKETS, MySQLStatementParserBYTE, MySQLStatementParserCACHE, MySQLStatementParserCASCADED, MySQLStatementParserCATALOG_NAME, MySQLStatementParserCHAIN, MySQLStatementParserCHANGED, MySQLStatementParserCHANNEL, MySQLStatementParserCHARSET, MySQLStatementParserCHECKSUM, MySQLStatementParserCIPHER, MySQLStatementParserCLASS_ORIGIN, MySQLStatementParserCLIENT, MySQLStatementParserCLONE, MySQLStatementParserCLOSE, MySQLStatementParserCOALESCE, MySQLStatementParserCODE, MySQLStatementParserCOLLATION, MySQLStatementParserCOLUMNS, MySQLStatementParserCOLUMN_FORMAT, MySQLStatementParserCOLUMN_NAME, MySQLStatementParserCOMMENT, MySQLStatementParserCOMMIT, MySQLStatementParserCOMMITTED, MySQLStatementParserCOMPACT, MySQLStatementParserCOMPLETION, MySQLStatementParserCOMPONENT, MySQLStatementParserCOMPRESSED, MySQLStatementParserCOMPRESSION, MySQLStatementParserCONCURRENT, MySQLStatementParserCONNECTION, MySQLStatementParserCONSISTENT, MySQLStatementParserCONSTRAINT_CATALOG, MySQLStatementParserCONSTRAINT_NAME, MySQLStatementParserCONSTRAINT_SCHEMA, MySQLStatementParserCONTAINS, MySQLStatementParserCONTEXT, MySQLStatementParserCPU, MySQLStatementParserCURRENT, MySQLStatementParserCURSOR_NAME, MySQLStatementParserDATA, MySQLStatementParserDATAFILE, MySQLStatementParserDATE, MySQLStatementParserDATETIME, MySQLStatementParserDAY, MySQLStatementParserDEALLOCATE, MySQLStatementParserDEFAULT_AUTH, MySQLStatementParserDEFINER, MySQLStatementParserDEFINITION, MySQLStatementParserDELAY_KEY_WRITE, MySQLStatementParserDESCRIPTION, MySQLStatementParserDIAGNOSTICS, MySQLStatementParserDIRECTORY, MySQLStatementParserDISABLE, MySQLStatementParserDISCARD, MySQLStatementParserDISK, MySQLStatementParserDO, MySQLStatementParserDUMPFILE, MySQLStatementParserDUPLICATE, MySQLStatementParserDYNAMIC, MySQLStatementParserENABLE, MySQLStatementParserENCRYPTION, MySQLStatementParserEND, MySQLStatementParserENDS, MySQLStatementParserENFORCED, MySQLStatementParserENGINE, MySQLStatementParserENGINES, MySQLStatementParserENGINE_ATTRIBUTE, MySQLStatementParserENUM, MySQLStatementParserERROR, MySQLStatementParserERRORS, MySQLStatementParserESCAPE, MySQLStatementParserEVENT, MySQLStatementParserEVENTS, MySQLStatementParserEVERY, MySQLStatementParserEXCHANGE, MySQLStatementParserEXCLUDE, MySQLStatementParserEXECUTE, MySQLStatementParserEXPANSION, MySQLStatementParserEXPIRE, MySQLStatementParserEXPORT, MySQLStatementParserEXTENDED, MySQLStatementParserEXTENT_SIZE, MySQLStatementParserFAILED_LOGIN_ATTEMPTS, MySQLStatementParserFAST, MySQLStatementParserFAULTS, MySQLStatementParserFILE, MySQLStatementParserFILE_BLOCK_SIZE, MySQLStatementParserFILTER, MySQLStatementParserFIRST, MySQLStatementParserFIXED, MySQLStatementParserFLUSH, MySQLStatementParserFOLLOWING, MySQLStatementParserFOLLOWS, MySQLStatementParserFORMAT, MySQLStatementParserFOUND, MySQLStatementParserFULL, MySQLStatementParserGENERAL, MySQLStatementParserGEOMETRY, MySQLStatementParserGEOMETRYCOLLECTION, MySQLStatementParserGET_FORMAT, MySQLStatementParserGET_MASTER_PUBLIC_KEY, MySQLStatementParserGLOBAL, MySQLStatementParserGRANTS, MySQLStatementParserGROUP_REPLICATION, MySQLStatementParserHANDLER, MySQLStatementParserHASH, MySQLStatementParserHELP, MySQLStatementParserHISTOGRAM, MySQLStatementParserHISTORY, MySQLStatementParserHOST, MySQLStatementParserHOSTS, MySQLStatementParserHOUR, MySQLStatementParserIDENTIFIED, MySQLStatementParserIGNORE_SERVER_IDS, MySQLStatementParserIMPORT, MySQLStatementParserINACTIVE, MySQLStatementParserINDEXES, MySQLStatementParserINITIAL_SIZE, MySQLStatementParserINSERT_METHOD, MySQLStatementParserINSTALL, MySQLStatementParserINSTANCE, MySQLStatementParserINVISIBLE, MySQLStatementParserINVOKER, MySQLStatementParserIO, MySQLStatementParserIPC, MySQLStatementParserISOLATION, MySQLStatementParserISSUER, MySQLStatementParserJSON, MySQLStatementParserJSON_VALUE, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserLANGUAGE, MySQLStatementParserLAST, MySQLStatementParserLAST_VALUE, MySQLStatementParserLEAVES, MySQLStatementParserLESS, MySQLStatementParserLEVEL, MySQLStatementParserLINESTRING, MySQLStatementParserLIST, MySQLStatementParserLOCAL, MySQLStatementParserLOCKED, MySQLStatementParserLOCKS, MySQLStatementParserLOGFILE, MySQLStatementParserLOGS, MySQLStatementParserMASTER, MySQLStatementParserMASTER_AUTO_POSITION, MySQLStatementParserMASTER_COMPRESSION_ALGORITHM, MySQLStatementParserMASTER_CONNECT_RETRY, MySQLStatementParserMASTER_DELAY, MySQLStatementParserMASTER_HEARTBEAT_PERIOD, MySQLStatementParserMASTER_HOST, MySQLStatementParserMASTER_LOG_FILE, MySQLStatementParserMASTER_LOG_POS, MySQLStatementParserMASTER_PASSWORD, MySQLStatementParserMASTER_PORT, MySQLStatementParserMASTER_PUBLIC_KEY_PATH, MySQLStatementParserMASTER_RETRY_COUNT, MySQLStatementParserMASTER_SERVER_ID, MySQLStatementParserMASTER_SSL, MySQLStatementParserMASTER_SSL_CA, MySQLStatementParserMASTER_SSL_CAPATH, MySQLStatementParserMASTER_SSL_CERT, MySQLStatementParserMASTER_SSL_CIPHER, MySQLStatementParserMASTER_SSL_CRL, MySQLStatementParserMASTER_SSL_CRLPATH, MySQLStatementParserMASTER_SSL_KEY, MySQLStatementParserMASTER_TLS_CIPHERSUITES, MySQLStatementParserMASTER_TLS_VERSION, MySQLStatementParserMASTER_USER, MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL, MySQLStatementParserMAX_CONNECTIONS_PER_HOUR, MySQLStatementParserMAX_QUERIES_PER_HOUR, MySQLStatementParserMAX_ROWS, MySQLStatementParserMAX_SIZE, MySQLStatementParserMAX_UPDATES_PER_HOUR, MySQLStatementParserMAX_USER_CONNECTIONS, MySQLStatementParserMEDIUM, MySQLStatementParserMEMBER, MySQLStatementParserMEMORY, MySQLStatementParserMERGE, MySQLStatementParserMESSAGE_TEXT, MySQLStatementParserMICROSECOND, MySQLStatementParserMIGRATE, MySQLStatementParserMINUTE, MySQLStatementParserMIN_ROWS, MySQLStatementParserMODE, MySQLStatementParserMODIFY, MySQLStatementParserMONTH, MySQLStatementParserMULTILINESTRING, MySQLStatementParserMULTIPOINT, MySQLStatementParserMULTIPOLYGON, MySQLStatementParserMUTEX, MySQLStatementParserMYSQL_ERRNO, MySQLStatementParserNAME, MySQLStatementParserNAMES, MySQLStatementParserNATIONAL, MySQLStatementParserNCHAR, MySQLStatementParserNDBCLUSTER, MySQLStatementParserNESTED, MySQLStatementParserNETWORK_NAMESPACE, MySQLStatementParserNEVER, MySQLStatementParserNEW, MySQLStatementParserNEXT, MySQLStatementParserNO, MySQLStatementParserNODEGROUP, MySQLStatementParserNONE, MySQLStatementParserNOWAIT, MySQLStatementParserNO_WAIT, MySQLStatementParserNULLS, MySQLStatementParserNUMBER, MySQLStatementParserNVARCHAR, MySQLStatementParserOFF, MySQLStatementParserOFFSET, MySQLStatementParserOJ, MySQLStatementParserOLD, MySQLStatementParserONE, MySQLStatementParserONLY, MySQLStatementParserOPEN, MySQLStatementParserOPTIONAL, MySQLStatementParserOPTIONS, MySQLStatementParserORDINALITY, MySQLStatementParserORGANIZATION, MySQLStatementParserOTHERS, MySQLStatementParserOWNER, MySQLStatementParserPACK_KEYS, MySQLStatementParserPAGE, MySQLStatementParserPARSER, MySQLStatementParserPARTIAL, MySQLStatementParserPARTITIONING, MySQLStatementParserPARTITIONS, MySQLStatementParserPASSWORD, MySQLStatementParserPASSWORD_LOCK_TIME, MySQLStatementParserPATH, MySQLStatementParserPERSIST, MySQLStatementParserPERSIST_ONLY, MySQLStatementParserPHASE, MySQLStatementParserPLUGIN, MySQLStatementParserPLUGINS, MySQLStatementParserPLUGIN_DIR, MySQLStatementParserPOINT, MySQLStatementParserPOLYGON, MySQLStatementParserPORT, MySQLStatementParserPRECEDES, MySQLStatementParserPRECEDING, MySQLStatementParserPREPARE, MySQLStatementParserPRESERVE, MySQLStatementParserPREV, MySQLStatementParserPRIVILEGES, MySQLStatementParserPRIVILEGE_CHECKS_USER, MySQLStatementParserPROCESS, MySQLStatementParserPROCESSLIST, MySQLStatementParserPROFILE, MySQLStatementParserPROFILES, MySQLStatementParserPROXY, MySQLStatementParserQUARTER, MySQLStatementParserQUERY, MySQLStatementParserQUICK, MySQLStatementParserRANDOM, MySQLStatementParserREAD_ONLY, MySQLStatementParserREBUILD, MySQLStatementParserRECOVER, MySQLStatementParserREDO_BUFFER_SIZE, MySQLStatementParserREDUNDANT, MySQLStatementParserREFERENCE, MySQLStatementParserRELAY, MySQLStatementParserRELAYLOG, MySQLStatementParserRELAY_LOG_FILE, MySQLStatementParserRELAY_LOG_POS, MySQLStatementParserRELAY_THREAD, MySQLStatementParserRELOAD, MySQLStatementParserREMOVE, MySQLStatementParserREORGANIZE, MySQLStatementParserREPAIR, MySQLStatementParserREPEATABLE, MySQLStatementParserREPLICATE_DO_DB, MySQLStatementParserREPLICATE_DO_TABLE, MySQLStatementParserREPLICATE_IGNORE_DB, MySQLStatementParserREPLICATE_IGNORE_TABLE, MySQLStatementParserREPLICATE_REWRITE_DB, MySQLStatementParserREPLICATE_WILD_DO_TABLE, MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE, MySQLStatementParserREPLICATION, MySQLStatementParserREQUIRE_ROW_FORMAT, MySQLStatementParserRESET, MySQLStatementParserRESOURCE, MySQLStatementParserRESPECT, MySQLStatementParserRESTART, MySQLStatementParserRESTORE, MySQLStatementParserRESUME, MySQLStatementParserRETAIN, MySQLStatementParserRETURNED_SQLSTATE, MySQLStatementParserRETURNING, MySQLStatementParserRETURNS, MySQLStatementParserREUSE, MySQLStatementParserREVERSE, MySQLStatementParserROLE, MySQLStatementParserROLLBACK, MySQLStatementParserROLLUP, MySQLStatementParserROTATE, MySQLStatementParserROUTINE, MySQLStatementParserROW_COUNT, MySQLStatementParserROW_FORMAT, MySQLStatementParserRTREE, MySQLStatementParserSAVEPOINT, MySQLStatementParserSCHEDULE, MySQLStatementParserSCHEMA_NAME, MySQLStatementParserSECOND, MySQLStatementParserSECONDARY, MySQLStatementParserSECONDARY_ENGINE, MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, MySQLStatementParserSECONDARY_LOAD, MySQLStatementParserSECONDARY_UNLOAD, MySQLStatementParserSECURITY, MySQLStatementParserSERIAL, MySQLStatementParserSERIALIZABLE, MySQLStatementParserSERVER, MySQLStatementParserSESSION, MySQLStatementParserSHARE, MySQLStatementParserSHUTDOWN, MySQLStatementParserSIGNED, MySQLStatementParserSIMPLE, MySQLStatementParserSLAVE, MySQLStatementParserSLOW, MySQLStatementParserSNAPSHOT, MySQLStatementParserSOCKET, MySQLStatementParserSONAME, MySQLStatementParserSOUNDS, MySQLStatementParserSOURCE, MySQLStatementParserSQL_AFTER_GTIDS, MySQLStatementParserSQL_AFTER_MTS_GAPS, MySQLStatementParserSQL_BEFORE_GTIDS, MySQLStatementParserSQL_BUFFER_RESULT, MySQLStatementParserSQL_NO_CACHE, MySQLStatementParserSQL_THREAD, MySQLStatementParserSRID, MySQLStatementParserSTACKED, MySQLStatementParserSTART, MySQLStatementParserSTARTS, MySQLStatementParserSTATS_AUTO_RECALC, MySQLStatementParserSTATS_PERSISTENT, MySQLStatementParserSTATS_SAMPLE_PAGES, MySQLStatementParserSTATUS, MySQLStatementParserSTOP, MySQLStatementParserSTORAGE, MySQLStatementParserSTREAM, MySQLStatementParserSTRING, MySQLStatementParserSUBCLASS_ORIGIN, MySQLStatementParserSUBJECT, MySQLStatementParserSUBPARTITION, MySQLStatementParserSUBPARTITIONS, MySQLStatementParserSUPER, MySQLStatementParserSUSPEND, MySQLStatementParserSWAPS, MySQLStatementParserSWITCHES, MySQLStatementParserTABLES, MySQLStatementParserTABLESPACE, MySQLStatementParserTABLE_CHECKSUM, MySQLStatementParserTABLE_NAME, MySQLStatementParserTEMPORARY, MySQLStatementParserTEMPTABLE, MySQLStatementParserTEXT, MySQLStatementParserTHAN, MySQLStatementParserTHREAD_PRIORITY, MySQLStatementParserTIES, MySQLStatementParserTIME, MySQLStatementParserTIMESTAMP, MySQLStatementParserTIMESTAMP_ADD, MySQLStatementParserTIMESTAMP_DIFF, MySQLStatementParserTLS, MySQLStatementParserTRANSACTION, MySQLStatementParserTRIGGERS, MySQLStatementParserTRUNCATE, MySQLStatementParserTYPE, MySQLStatementParserTYPES, MySQLStatementParserUNBOUNDED, MySQLStatementParserUNCOMMITTED, MySQLStatementParserUNDEFINED, MySQLStatementParserUNDOFILE, MySQLStatementParserUNDO_BUFFER_SIZE, MySQLStatementParserUNICODE, MySQLStatementParserUNINSTALL, MySQLStatementParserUNKNOWN, MySQLStatementParserUNTIL, MySQLStatementParserUPGRADE, MySQLStatementParserUSER, MySQLStatementParserUSER_RESOURCES, MySQLStatementParserUSE_FRM, MySQLStatementParserVALIDATION, MySQLStatementParserVALUE, MySQLStatementParserVARIABLES, MySQLStatementParserVCPU, MySQLStatementParserVIEW, MySQLStatementParserVISIBLE, MySQLStatementParserWAIT, MySQLStatementParserWARNINGS, MySQLStatementParserWEEK, MySQLStatementParserWEIGHT_STRING, MySQLStatementParserWITHOUT, MySQLStatementParserWORK, MySQLStatementParserWRAPPER, MySQLStatementParserX509, MySQLStatementParserXA, MySQLStatementParserXID, MySQLStatementParserXML, MySQLStatementParserYEAR, MySQLStatementParserIDENTIFIER_, MySQLStatementParserSINGLE_QUOTED_TEXT, MySQLStatementParserDOUBLE_QUOTED_TEXT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2238)
			p.TextOrIdentifier()
		}

	case MySQLStatementParserBINARY:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2239)
			p.Match(MySQLStatementParserBINARY)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_identifier
	return p
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) IDENTIFIER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIDENTIFIER_, 0)
}

func (s *IdentifierContext) IdentifierKeywordsUnambiguous() IIdentifierKeywordsUnambiguousContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierKeywordsUnambiguousContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierKeywordsUnambiguousContext)
}

func (s *IdentifierContext) IdentifierKeywordsAmbiguous1RolesAndLabels() IIdentifierKeywordsAmbiguous1RolesAndLabelsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierKeywordsAmbiguous1RolesAndLabelsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierKeywordsAmbiguous1RolesAndLabelsContext)
}

func (s *IdentifierContext) IdentifierKeywordsAmbiguous2Labels() IIdentifierKeywordsAmbiguous2LabelsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierKeywordsAmbiguous2LabelsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierKeywordsAmbiguous2LabelsContext)
}

func (s *IdentifierContext) IdentifierKeywordsAmbiguous3Roles() IIdentifierKeywordsAmbiguous3RolesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierKeywordsAmbiguous3RolesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierKeywordsAmbiguous3RolesContext)
}

func (s *IdentifierContext) IdentifierKeywordsAmbiguous4SystemVariables() IIdentifierKeywordsAmbiguous4SystemVariablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierKeywordsAmbiguous4SystemVariablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierKeywordsAmbiguous4SystemVariablesContext)
}

func (s *IdentifierContext) CustomKeyword() ICustomKeywordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICustomKeywordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICustomKeywordContext)
}

func (s *IdentifierContext) DOUBLE_QUOTED_TEXT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDOUBLE_QUOTED_TEXT, 0)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterIdentifier(s)
	}
}

func (s *IdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitIdentifier(s)
	}
}

func (s *IdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Identifier() (localctx IIdentifierContext) {
	this := p
	_ = this

	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, MySQLStatementParserRULE_identifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2250)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserIDENTIFIER_:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2242)
			p.Match(MySQLStatementParserIDENTIFIER_)
		}

	case MySQLStatementParserACCOUNT, MySQLStatementParserACTION, MySQLStatementParserACTIVE, MySQLStatementParserADMIN, MySQLStatementParserAFTER, MySQLStatementParserAGAINST, MySQLStatementParserAGGREGATE, MySQLStatementParserALGORITHM, MySQLStatementParserALWAYS, MySQLStatementParserANY, MySQLStatementParserARRAY, MySQLStatementParserAT, MySQLStatementParserATTRIBUTE, MySQLStatementParserAUTOEXTEND_SIZE, MySQLStatementParserAUTO_INCREMENT, MySQLStatementParserAVG, MySQLStatementParserAVG_ROW_LENGTH, MySQLStatementParserBACKUP, MySQLStatementParserBINLOG, MySQLStatementParserBIT, MySQLStatementParserBLOCK, MySQLStatementParserBOOL, MySQLStatementParserBOOLEAN, MySQLStatementParserBTREE, MySQLStatementParserBUCKETS, MySQLStatementParserCASCADED, MySQLStatementParserCATALOG_NAME, MySQLStatementParserCHAIN, MySQLStatementParserCHANGED, MySQLStatementParserCHANNEL, MySQLStatementParserCIPHER, MySQLStatementParserCLASS_ORIGIN, MySQLStatementParserCLIENT, MySQLStatementParserCLOSE, MySQLStatementParserCOALESCE, MySQLStatementParserCODE, MySQLStatementParserCOLLATION, MySQLStatementParserCOLUMNS, MySQLStatementParserCOLUMN_FORMAT, MySQLStatementParserCOLUMN_NAME, MySQLStatementParserCOMMITTED, MySQLStatementParserCOMPACT, MySQLStatementParserCOMPLETION, MySQLStatementParserCOMPONENT, MySQLStatementParserCOMPRESSED, MySQLStatementParserCOMPRESSION, MySQLStatementParserCONCURRENT, MySQLStatementParserCONNECTION, MySQLStatementParserCONSISTENT, MySQLStatementParserCONSTRAINT_CATALOG, MySQLStatementParserCONSTRAINT_NAME, MySQLStatementParserCONSTRAINT_SCHEMA, MySQLStatementParserCONTEXT, MySQLStatementParserCPU, MySQLStatementParserCURRENT, MySQLStatementParserCURSOR_NAME, MySQLStatementParserDATA, MySQLStatementParserDATAFILE, MySQLStatementParserDATE, MySQLStatementParserDATETIME, MySQLStatementParserDAY, MySQLStatementParserDEFAULT_AUTH, MySQLStatementParserDEFINER, MySQLStatementParserDEFINITION, MySQLStatementParserDELAY_KEY_WRITE, MySQLStatementParserDESCRIPTION, MySQLStatementParserDIAGNOSTICS, MySQLStatementParserDIRECTORY, MySQLStatementParserDISABLE, MySQLStatementParserDISCARD, MySQLStatementParserDISK, MySQLStatementParserDUMPFILE, MySQLStatementParserDUPLICATE, MySQLStatementParserDYNAMIC, MySQLStatementParserENABLE, MySQLStatementParserENCRYPTION, MySQLStatementParserENDS, MySQLStatementParserENFORCED, MySQLStatementParserENGINE, MySQLStatementParserENGINES, MySQLStatementParserENGINE_ATTRIBUTE, MySQLStatementParserENUM, MySQLStatementParserERROR, MySQLStatementParserERRORS, MySQLStatementParserESCAPE, MySQLStatementParserEVENTS, MySQLStatementParserEVERY, MySQLStatementParserEXCHANGE, MySQLStatementParserEXCLUDE, MySQLStatementParserEXPANSION, MySQLStatementParserEXPIRE, MySQLStatementParserEXPORT, MySQLStatementParserEXTENDED, MySQLStatementParserEXTENT_SIZE, MySQLStatementParserFAILED_LOGIN_ATTEMPTS, MySQLStatementParserFAST, MySQLStatementParserFAULTS, MySQLStatementParserFILE_BLOCK_SIZE, MySQLStatementParserFILTER, MySQLStatementParserFIRST, MySQLStatementParserFIXED, MySQLStatementParserFOLLOWING, MySQLStatementParserFORMAT, MySQLStatementParserFOUND, MySQLStatementParserFULL, MySQLStatementParserGENERAL, MySQLStatementParserGEOMETRY, MySQLStatementParserGEOMETRYCOLLECTION, MySQLStatementParserGET_FORMAT, MySQLStatementParserGET_MASTER_PUBLIC_KEY, MySQLStatementParserGRANTS, MySQLStatementParserGROUP_REPLICATION, MySQLStatementParserHASH, MySQLStatementParserHISTOGRAM, MySQLStatementParserHISTORY, MySQLStatementParserHOST, MySQLStatementParserHOSTS, MySQLStatementParserHOUR, MySQLStatementParserIDENTIFIED, MySQLStatementParserIGNORE_SERVER_IDS, MySQLStatementParserINACTIVE, MySQLStatementParserINDEXES, MySQLStatementParserINITIAL_SIZE, MySQLStatementParserINSERT_METHOD, MySQLStatementParserINSTANCE, MySQLStatementParserINVISIBLE, MySQLStatementParserINVOKER, MySQLStatementParserIO, MySQLStatementParserIPC, MySQLStatementParserISOLATION, MySQLStatementParserISSUER, MySQLStatementParserJSON, MySQLStatementParserJSON_VALUE, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserLAST, MySQLStatementParserLEAVES, MySQLStatementParserLESS, MySQLStatementParserLEVEL, MySQLStatementParserLINESTRING, MySQLStatementParserLIST, MySQLStatementParserLOCKED, MySQLStatementParserLOCKS, MySQLStatementParserLOGFILE, MySQLStatementParserLOGS, MySQLStatementParserMASTER, MySQLStatementParserMASTER_AUTO_POSITION, MySQLStatementParserMASTER_COMPRESSION_ALGORITHM, MySQLStatementParserMASTER_CONNECT_RETRY, MySQLStatementParserMASTER_DELAY, MySQLStatementParserMASTER_HEARTBEAT_PERIOD, MySQLStatementParserMASTER_HOST, MySQLStatementParserMASTER_LOG_FILE, MySQLStatementParserMASTER_LOG_POS, MySQLStatementParserMASTER_PASSWORD, MySQLStatementParserMASTER_PORT, MySQLStatementParserMASTER_PUBLIC_KEY_PATH, MySQLStatementParserMASTER_RETRY_COUNT, MySQLStatementParserMASTER_SERVER_ID, MySQLStatementParserMASTER_SSL, MySQLStatementParserMASTER_SSL_CA, MySQLStatementParserMASTER_SSL_CAPATH, MySQLStatementParserMASTER_SSL_CERT, MySQLStatementParserMASTER_SSL_CIPHER, MySQLStatementParserMASTER_SSL_CRL, MySQLStatementParserMASTER_SSL_CRLPATH, MySQLStatementParserMASTER_SSL_KEY, MySQLStatementParserMASTER_TLS_CIPHERSUITES, MySQLStatementParserMASTER_TLS_VERSION, MySQLStatementParserMASTER_USER, MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL, MySQLStatementParserMAX_CONNECTIONS_PER_HOUR, MySQLStatementParserMAX_QUERIES_PER_HOUR, MySQLStatementParserMAX_ROWS, MySQLStatementParserMAX_SIZE, MySQLStatementParserMAX_UPDATES_PER_HOUR, MySQLStatementParserMAX_USER_CONNECTIONS, MySQLStatementParserMEDIUM, MySQLStatementParserMEMBER, MySQLStatementParserMEMORY, MySQLStatementParserMERGE, MySQLStatementParserMESSAGE_TEXT, MySQLStatementParserMICROSECOND, MySQLStatementParserMIGRATE, MySQLStatementParserMINUTE, MySQLStatementParserMIN_ROWS, MySQLStatementParserMODE, MySQLStatementParserMODIFY, MySQLStatementParserMONTH, MySQLStatementParserMULTILINESTRING, MySQLStatementParserMULTIPOINT, MySQLStatementParserMULTIPOLYGON, MySQLStatementParserMUTEX, MySQLStatementParserMYSQL_ERRNO, MySQLStatementParserNAME, MySQLStatementParserNAMES, MySQLStatementParserNATIONAL, MySQLStatementParserNCHAR, MySQLStatementParserNDBCLUSTER, MySQLStatementParserNESTED, MySQLStatementParserNETWORK_NAMESPACE, MySQLStatementParserNEVER, MySQLStatementParserNEW, MySQLStatementParserNEXT, MySQLStatementParserNODEGROUP, MySQLStatementParserNOWAIT, MySQLStatementParserNO_WAIT, MySQLStatementParserNULLS, MySQLStatementParserNUMBER, MySQLStatementParserNVARCHAR, MySQLStatementParserOFF, MySQLStatementParserOFFSET, MySQLStatementParserOJ, MySQLStatementParserOLD, MySQLStatementParserONE, MySQLStatementParserONLY, MySQLStatementParserOPEN, MySQLStatementParserOPTIONAL, MySQLStatementParserOPTIONS, MySQLStatementParserORDINALITY, MySQLStatementParserORGANIZATION, MySQLStatementParserOTHERS, MySQLStatementParserOWNER, MySQLStatementParserPACK_KEYS, MySQLStatementParserPAGE, MySQLStatementParserPARSER, MySQLStatementParserPARTIAL, MySQLStatementParserPARTITIONING, MySQLStatementParserPARTITIONS, MySQLStatementParserPASSWORD, MySQLStatementParserPASSWORD_LOCK_TIME, MySQLStatementParserPATH, MySQLStatementParserPHASE, MySQLStatementParserPLUGIN, MySQLStatementParserPLUGINS, MySQLStatementParserPLUGIN_DIR, MySQLStatementParserPOINT, MySQLStatementParserPOLYGON, MySQLStatementParserPORT, MySQLStatementParserPRECEDING, MySQLStatementParserPRESERVE, MySQLStatementParserPREV, MySQLStatementParserPRIVILEGES, MySQLStatementParserPRIVILEGE_CHECKS_USER, MySQLStatementParserPROCESSLIST, MySQLStatementParserPROFILE, MySQLStatementParserPROFILES, MySQLStatementParserQUARTER, MySQLStatementParserQUERY, MySQLStatementParserQUICK, MySQLStatementParserRANDOM, MySQLStatementParserREAD_ONLY, MySQLStatementParserREBUILD, MySQLStatementParserRECOVER, MySQLStatementParserREDO_BUFFER_SIZE, MySQLStatementParserREDUNDANT, MySQLStatementParserREFERENCE, MySQLStatementParserRELAY, MySQLStatementParserRELAYLOG, MySQLStatementParserRELAY_LOG_FILE, MySQLStatementParserRELAY_LOG_POS, MySQLStatementParserRELAY_THREAD, MySQLStatementParserREMOVE, MySQLStatementParserREORGANIZE, MySQLStatementParserREPEATABLE, MySQLStatementParserREPLICATE_DO_DB, MySQLStatementParserREPLICATE_DO_TABLE, MySQLStatementParserREPLICATE_IGNORE_DB, MySQLStatementParserREPLICATE_IGNORE_TABLE, MySQLStatementParserREPLICATE_REWRITE_DB, MySQLStatementParserREPLICATE_WILD_DO_TABLE, MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE, MySQLStatementParserREQUIRE_ROW_FORMAT, MySQLStatementParserRESPECT, MySQLStatementParserRESTORE, MySQLStatementParserRESUME, MySQLStatementParserRETAIN, MySQLStatementParserRETURNED_SQLSTATE, MySQLStatementParserRETURNING, MySQLStatementParserRETURNS, MySQLStatementParserREUSE, MySQLStatementParserREVERSE, MySQLStatementParserROLE, MySQLStatementParserROLLUP, MySQLStatementParserROTATE, MySQLStatementParserROUTINE, MySQLStatementParserROW_COUNT, MySQLStatementParserROW_FORMAT, MySQLStatementParserRTREE, MySQLStatementParserSCHEDULE, MySQLStatementParserSCHEMA_NAME, MySQLStatementParserSECOND, MySQLStatementParserSECONDARY, MySQLStatementParserSECONDARY_ENGINE, MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, MySQLStatementParserSECONDARY_LOAD, MySQLStatementParserSECONDARY_UNLOAD, MySQLStatementParserSECURITY, MySQLStatementParserSERIAL, MySQLStatementParserSERIALIZABLE, MySQLStatementParserSERVER, MySQLStatementParserSHARE, MySQLStatementParserSIMPLE, MySQLStatementParserSLOW, MySQLStatementParserSNAPSHOT, MySQLStatementParserSOCKET, MySQLStatementParserSONAME, MySQLStatementParserSOUNDS, MySQLStatementParserSOURCE, MySQLStatementParserSQL_AFTER_GTIDS, MySQLStatementParserSQL_AFTER_MTS_GAPS, MySQLStatementParserSQL_BEFORE_GTIDS, MySQLStatementParserSQL_BUFFER_RESULT, MySQLStatementParserSQL_NO_CACHE, MySQLStatementParserSQL_THREAD, MySQLStatementParserSRID, MySQLStatementParserSTACKED, MySQLStatementParserSTARTS, MySQLStatementParserSTATS_AUTO_RECALC, MySQLStatementParserSTATS_PERSISTENT, MySQLStatementParserSTATS_SAMPLE_PAGES, MySQLStatementParserSTATUS, MySQLStatementParserSTORAGE, MySQLStatementParserSTREAM, MySQLStatementParserSTRING, MySQLStatementParserSUBCLASS_ORIGIN, MySQLStatementParserSUBJECT, MySQLStatementParserSUBPARTITION, MySQLStatementParserSUBPARTITIONS, MySQLStatementParserSUSPEND, MySQLStatementParserSWAPS, MySQLStatementParserSWITCHES, MySQLStatementParserTABLES, MySQLStatementParserTABLESPACE, MySQLStatementParserTABLE_CHECKSUM, MySQLStatementParserTABLE_NAME, MySQLStatementParserTEMPORARY, MySQLStatementParserTEMPTABLE, MySQLStatementParserTEXT, MySQLStatementParserTHAN, MySQLStatementParserTHREAD_PRIORITY, MySQLStatementParserTIES, MySQLStatementParserTIME, MySQLStatementParserTIMESTAMP, MySQLStatementParserTIMESTAMP_ADD, MySQLStatementParserTIMESTAMP_DIFF, MySQLStatementParserTLS, MySQLStatementParserTRANSACTION, MySQLStatementParserTRIGGERS, MySQLStatementParserTYPE, MySQLStatementParserTYPES, MySQLStatementParserUNBOUNDED, MySQLStatementParserUNCOMMITTED, MySQLStatementParserUNDEFINED, MySQLStatementParserUNDOFILE, MySQLStatementParserUNDO_BUFFER_SIZE, MySQLStatementParserUNKNOWN, MySQLStatementParserUNTIL, MySQLStatementParserUPGRADE, MySQLStatementParserUSER, MySQLStatementParserUSER_RESOURCES, MySQLStatementParserUSE_FRM, MySQLStatementParserVALIDATION, MySQLStatementParserVALUE, MySQLStatementParserVARIABLES, MySQLStatementParserVCPU, MySQLStatementParserVIEW, MySQLStatementParserVISIBLE, MySQLStatementParserWAIT, MySQLStatementParserWARNINGS, MySQLStatementParserWEEK, MySQLStatementParserWEIGHT_STRING, MySQLStatementParserWITHOUT, MySQLStatementParserWORK, MySQLStatementParserWRAPPER, MySQLStatementParserX509, MySQLStatementParserXID, MySQLStatementParserXML, MySQLStatementParserYEAR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2243)
			p.IdentifierKeywordsUnambiguous()
		}

	case MySQLStatementParserEXECUTE, MySQLStatementParserRESTART, MySQLStatementParserSHUTDOWN:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2244)
			p.IdentifierKeywordsAmbiguous1RolesAndLabels()
		}

	case MySQLStatementParserASCII, MySQLStatementParserBEGIN, MySQLStatementParserBYTE, MySQLStatementParserCACHE, MySQLStatementParserCHARSET, MySQLStatementParserCHECKSUM, MySQLStatementParserCLONE, MySQLStatementParserCOMMENT, MySQLStatementParserCOMMIT, MySQLStatementParserCONTAINS, MySQLStatementParserDEALLOCATE, MySQLStatementParserDO, MySQLStatementParserEND, MySQLStatementParserFLUSH, MySQLStatementParserFOLLOWS, MySQLStatementParserHANDLER, MySQLStatementParserHELP, MySQLStatementParserIMPORT, MySQLStatementParserINSTALL, MySQLStatementParserLANGUAGE, MySQLStatementParserNO, MySQLStatementParserPRECEDES, MySQLStatementParserPREPARE, MySQLStatementParserREPAIR, MySQLStatementParserRESET, MySQLStatementParserROLLBACK, MySQLStatementParserSAVEPOINT, MySQLStatementParserSIGNED, MySQLStatementParserSLAVE, MySQLStatementParserSTART, MySQLStatementParserSTOP, MySQLStatementParserTRUNCATE, MySQLStatementParserUNICODE, MySQLStatementParserUNINSTALL, MySQLStatementParserXA:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2245)
			p.IdentifierKeywordsAmbiguous2Labels()
		}

	case MySQLStatementParserEVENT, MySQLStatementParserFILE, MySQLStatementParserNONE, MySQLStatementParserPROCESS, MySQLStatementParserPROXY, MySQLStatementParserRELOAD, MySQLStatementParserREPLICATION, MySQLStatementParserRESOURCE, MySQLStatementParserSUPER:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2246)
			p.IdentifierKeywordsAmbiguous3Roles()
		}

	case MySQLStatementParserGLOBAL, MySQLStatementParserLOCAL, MySQLStatementParserPERSIST, MySQLStatementParserPERSIST_ONLY, MySQLStatementParserSESSION:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2247)
			p.IdentifierKeywordsAmbiguous4SystemVariables()
		}

	case MySQLStatementParserMAX, MySQLStatementParserMIN, MySQLStatementParserSUM, MySQLStatementParserCOUNT, MySQLStatementParserGROUP_CONCAT, MySQLStatementParserCAST, MySQLStatementParserPOSITION, MySQLStatementParserSUBSTRING, MySQLStatementParserSUBSTR, MySQLStatementParserEXTRACT, MySQLStatementParserTRIM, MySQLStatementParserLAST_DAY, MySQLStatementParserTRADITIONAL, MySQLStatementParserTREE, MySQLStatementParserMYSQL_ADMIN, MySQLStatementParserINSTANT, MySQLStatementParserINPLACE, MySQLStatementParserCOPY, MySQLStatementParserUL_BINARY, MySQLStatementParserAUTOCOMMIT, MySQLStatementParserINNODB, MySQLStatementParserREDO_LOG, MySQLStatementParserLAST_VALUE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2248)
			p.CustomKeyword()
		}

	case MySQLStatementParserDOUBLE_QUOTED_TEXT:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2249)
			p.Match(MySQLStatementParserDOUBLE_QUOTED_TEXT)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IIdentifierKeywordsUnambiguousContext is an interface to support dynamic dispatch.
type IIdentifierKeywordsUnambiguousContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierKeywordsUnambiguousContext differentiates from other interfaces.
	IsIdentifierKeywordsUnambiguousContext()
}

type IdentifierKeywordsUnambiguousContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierKeywordsUnambiguousContext() *IdentifierKeywordsUnambiguousContext {
	var p = new(IdentifierKeywordsUnambiguousContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_identifierKeywordsUnambiguous
	return p
}

func (*IdentifierKeywordsUnambiguousContext) IsIdentifierKeywordsUnambiguousContext() {}

func NewIdentifierKeywordsUnambiguousContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierKeywordsUnambiguousContext {
	var p = new(IdentifierKeywordsUnambiguousContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_identifierKeywordsUnambiguous

	return p
}

func (s *IdentifierKeywordsUnambiguousContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierKeywordsUnambiguousContext) ACTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserACTION, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserACCOUNT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ACTIVE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserACTIVE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ADMIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserADMIN, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) AFTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAFTER, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) AGAINST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAGAINST, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) AGGREGATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAGGREGATE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALGORITHM, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ALWAYS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALWAYS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ANY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserANY, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ARRAY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserARRAY, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) AT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ATTRIBUTE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserATTRIBUTE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) AUTOEXTEND_SIZE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAUTOEXTEND_SIZE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) AUTO_INCREMENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAUTO_INCREMENT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) AVG_ROW_LENGTH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAVG_ROW_LENGTH, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) AVG() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAVG, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) BACKUP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBACKUP, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) BINLOG() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBINLOG, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) BIT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBIT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) BLOCK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBLOCK, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) BOOLEAN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBOOLEAN, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) BOOL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBOOL, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) BTREE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBTREE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) BUCKETS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBUCKETS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) CASCADED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCASCADED, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) CATALOG_NAME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCATALOG_NAME, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) CHAIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHAIN, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) CHANGED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHANGED, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) CHANNEL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHANNEL, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) CIPHER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCIPHER, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) CLASS_ORIGIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCLASS_ORIGIN, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) CLIENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCLIENT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) CLOSE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCLOSE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) COALESCE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOALESCE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) CODE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCODE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) COLLATION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOLLATION, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOLUMNS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) COLUMN_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOLUMN_FORMAT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) COLUMN_NAME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOLUMN_NAME, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) COMMITTED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMITTED, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) COMPACT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMPACT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) COMPLETION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMPLETION, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) COMPONENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMPONENT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) COMPRESSED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMPRESSED, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) COMPRESSION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMPRESSION, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) CONCURRENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCONCURRENT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) CONNECTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCONNECTION, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) CONSISTENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCONSISTENT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) CONSTRAINT_CATALOG() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCONSTRAINT_CATALOG, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) CONSTRAINT_NAME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCONSTRAINT_NAME, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) CONSTRAINT_SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCONSTRAINT_SCHEMA, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) CONTEXT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCONTEXT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) CPU() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCPU, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCURRENT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) CURSOR_NAME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCURSOR_NAME, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) DATAFILE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDATAFILE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDATA, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) DATETIME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDATETIME, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) DATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDATE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) DAY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDAY, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) DEFAULT_AUTH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFAULT_AUTH, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) DEFINER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFINER, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) DEFINITION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFINITION, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) DELAY_KEY_WRITE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDELAY_KEY_WRITE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) DESCRIPTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDESCRIPTION, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) DIAGNOSTICS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDIAGNOSTICS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) DIRECTORY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDIRECTORY, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDISABLE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) DISCARD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDISCARD, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) DISK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDISK, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) DUMPFILE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDUMPFILE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) DUPLICATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDUPLICATE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) DYNAMIC() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDYNAMIC, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENABLE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENCRYPTION, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ENDS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENDS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ENFORCED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENFORCED, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ENGINES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENGINES, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENGINE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ENGINE_ATTRIBUTE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENGINE_ATTRIBUTE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ENUM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENUM, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ERRORS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserERRORS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ERROR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserERROR, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ESCAPE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserESCAPE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) EVENTS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEVENTS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) EVERY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEVERY, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) EXCHANGE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXCHANGE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) EXCLUDE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXCLUDE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) EXPANSION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXPANSION, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) EXPIRE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXPIRE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) EXPORT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXPORT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) EXTENDED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXTENDED, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) EXTENT_SIZE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXTENT_SIZE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) FAILED_LOGIN_ATTEMPTS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFAILED_LOGIN_ATTEMPTS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) FAST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFAST, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) FAULTS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFAULTS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) FILE_BLOCK_SIZE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFILE_BLOCK_SIZE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) FILTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFILTER, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) FIRST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFIRST, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) FIXED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFIXED, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) FOLLOWING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOLLOWING, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFORMAT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) FOUND() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOUND, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) FULL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFULL, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) GENERAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGENERAL, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) GEOMETRYCOLLECTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGEOMETRYCOLLECTION, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) GEOMETRY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGEOMETRY, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) GET_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGET_FORMAT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) GET_MASTER_PUBLIC_KEY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGET_MASTER_PUBLIC_KEY, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) GRANTS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGRANTS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) GROUP_REPLICATION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGROUP_REPLICATION, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) HASH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHASH, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) HISTOGRAM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHISTOGRAM, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) HISTORY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHISTORY, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) HOSTS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHOSTS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) HOST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHOST, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) HOUR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHOUR, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) IDENTIFIED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIDENTIFIED, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) IGNORE_SERVER_IDS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIGNORE_SERVER_IDS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) INACTIVE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINACTIVE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) INDEXES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINDEXES, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) INITIAL_SIZE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINITIAL_SIZE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) INSERT_METHOD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINSERT_METHOD, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) INSTANCE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINSTANCE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) INVISIBLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINVISIBLE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) INVOKER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINVOKER, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) IO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIO, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) IPC() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIPC, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ISOLATION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserISOLATION, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ISSUER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserISSUER, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) JSON() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserJSON, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) JSON_VALUE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserJSON_VALUE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) KEY_BLOCK_SIZE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserKEY_BLOCK_SIZE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) LAST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLAST, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) LEAVES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLEAVES, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) LESS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLESS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLEVEL, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) LINESTRING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLINESTRING, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) LIST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLIST, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) LOCKED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCKED, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) LOCKS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCKS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) LOGFILE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOGFILE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) LOGS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOGS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MASTER_AUTO_POSITION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_AUTO_POSITION, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MASTER_COMPRESSION_ALGORITHM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MASTER_CONNECT_RETRY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_CONNECT_RETRY, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MASTER_DELAY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_DELAY, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MASTER_HEARTBEAT_PERIOD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_HEARTBEAT_PERIOD, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MASTER_HOST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_HOST, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) NETWORK_NAMESPACE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNETWORK_NAMESPACE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MASTER_LOG_FILE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_LOG_FILE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MASTER_LOG_POS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_LOG_POS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MASTER_PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_PASSWORD, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MASTER_PORT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_PORT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MASTER_PUBLIC_KEY_PATH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_PUBLIC_KEY_PATH, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MASTER_RETRY_COUNT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_RETRY_COUNT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MASTER_SERVER_ID() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_SERVER_ID, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MASTER_SSL_CAPATH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_SSL_CAPATH, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MASTER_SSL_CA() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_SSL_CA, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MASTER_SSL_CERT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_SSL_CERT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MASTER_SSL_CIPHER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_SSL_CIPHER, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MASTER_SSL_CRLPATH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_SSL_CRLPATH, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MASTER_SSL_CRL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_SSL_CRL, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MASTER_SSL_KEY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_SSL_KEY, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MASTER_SSL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_SSL, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MASTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MASTER_TLS_CIPHERSUITES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_TLS_CIPHERSUITES, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MASTER_TLS_VERSION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_TLS_VERSION, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MASTER_USER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_USER, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MASTER_ZSTD_COMPRESSION_LEVEL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MAX_CONNECTIONS_PER_HOUR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MAX_QUERIES_PER_HOUR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMAX_QUERIES_PER_HOUR, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MAX_ROWS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMAX_ROWS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MAX_SIZE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMAX_SIZE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MAX_UPDATES_PER_HOUR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMAX_UPDATES_PER_HOUR, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MAX_USER_CONNECTIONS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMAX_USER_CONNECTIONS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MEDIUM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMEDIUM, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MEMBER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMEMBER, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MEMORY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMEMORY, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MERGE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMERGE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MESSAGE_TEXT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMESSAGE_TEXT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MICROSECOND() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMICROSECOND, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MIGRATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMIGRATE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MINUTE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMINUTE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MIN_ROWS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMIN_ROWS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MODE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMODE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMODIFY, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MONTH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMONTH, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MULTILINESTRING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMULTILINESTRING, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MULTIPOINT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMULTIPOINT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MULTIPOLYGON() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMULTIPOLYGON, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MUTEX() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMUTEX, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) MYSQL_ERRNO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMYSQL_ERRNO, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) NAMES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNAMES, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) NAME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNAME, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) NATIONAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNATIONAL, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) NCHAR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNCHAR, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) NDBCLUSTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNDBCLUSTER, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) NESTED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNESTED, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) NEVER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNEVER, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) NEW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNEW, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) NEXT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNEXT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) NODEGROUP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNODEGROUP, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) NOWAIT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNOWAIT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) NO_WAIT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNO_WAIT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) NULLS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNULLS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) NUMBER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) NVARCHAR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNVARCHAR, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) OFF() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOFF, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOFFSET, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) OJ() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOJ, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) OLD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOLD, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ONE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserONE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ONLY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserONLY, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) OPEN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOPEN, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) OPTIONAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOPTIONAL, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) OPTIONS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOPTIONS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ORDINALITY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserORDINALITY, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ORGANIZATION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserORGANIZATION, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) OTHERS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOTHERS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) OWNER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOWNER, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) PACK_KEYS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPACK_KEYS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) PAGE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPAGE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) PARSER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPARSER, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) PARTIAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPARTIAL, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) PARTITIONING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPARTITIONING, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) PARTITIONS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPARTITIONS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPASSWORD, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) PASSWORD_LOCK_TIME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPASSWORD_LOCK_TIME, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) PATH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPATH, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) PHASE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPHASE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) PLUGINS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPLUGINS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) PLUGIN_DIR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPLUGIN_DIR, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) PLUGIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPLUGIN, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) POINT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPOINT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) POLYGON() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPOLYGON, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) PORT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPORT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) PRECEDING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPRECEDING, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) PRESERVE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPRESERVE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) PREV() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPREV, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPRIVILEGES, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) PRIVILEGE_CHECKS_USER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPRIVILEGE_CHECKS_USER, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) PROCESSLIST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPROCESSLIST, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) PROFILES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPROFILES, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) PROFILE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPROFILE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) QUARTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserQUARTER, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) QUERY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserQUERY, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) QUICK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserQUICK, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) RANDOM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRANDOM, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) READ_ONLY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREAD_ONLY, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) REBUILD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREBUILD, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) RECOVER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRECOVER, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) REDO_BUFFER_SIZE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREDO_BUFFER_SIZE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) REDUNDANT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREDUNDANT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) REFERENCE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREFERENCE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) RELAY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRELAY, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) RELAYLOG() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRELAYLOG, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) RELAY_LOG_FILE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRELAY_LOG_FILE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) RELAY_LOG_POS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRELAY_LOG_POS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) RELAY_THREAD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRELAY_THREAD, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREMOVE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) REORGANIZE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREORGANIZE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) REPEATABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPEATABLE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) REPLICATE_DO_DB() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLICATE_DO_DB, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) REPLICATE_DO_TABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLICATE_DO_TABLE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) REPLICATE_IGNORE_DB() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLICATE_IGNORE_DB, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) REPLICATE_IGNORE_TABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLICATE_IGNORE_TABLE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) REPLICATE_REWRITE_DB() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLICATE_REWRITE_DB, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) REPLICATE_WILD_DO_TABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLICATE_WILD_DO_TABLE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) REPLICATE_WILD_IGNORE_TABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) REQUIRE_ROW_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREQUIRE_ROW_FORMAT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) USER_RESOURCES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUSER_RESOURCES, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) RESPECT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRESPECT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) RESTORE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRESTORE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) RESUME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRESUME, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) RETAIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRETAIN, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) RETURNED_SQLSTATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRETURNED_SQLSTATE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) RETURNING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRETURNING, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) RETURNS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRETURNS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) REUSE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREUSE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) REVERSE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREVERSE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ROLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROLE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ROLLUP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROLLUP, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ROTATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROTATE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ROUTINE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROUTINE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ROW_COUNT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROW_COUNT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) ROW_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROW_FORMAT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) RTREE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRTREE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SCHEDULE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSCHEDULE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SCHEMA_NAME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSCHEMA_NAME, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SECONDARY_ENGINE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSECONDARY_ENGINE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SECONDARY_ENGINE_ATTRIBUTE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SECONDARY_LOAD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSECONDARY_LOAD, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SECONDARY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSECONDARY, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SECONDARY_UNLOAD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSECONDARY_UNLOAD, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SECOND() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSECOND, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSECURITY, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SERIALIZABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSERIALIZABLE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SERIAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSERIAL, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SERVER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSERVER, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SHARE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHARE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SIMPLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSIMPLE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SLOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSLOW, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SNAPSHOT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSNAPSHOT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SOCKET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSOCKET, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SONAME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSONAME, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SOUNDS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSOUNDS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SOURCE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSOURCE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SQL_AFTER_GTIDS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSQL_AFTER_GTIDS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SQL_AFTER_MTS_GAPS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSQL_AFTER_MTS_GAPS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SQL_BEFORE_GTIDS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSQL_BEFORE_GTIDS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SQL_BUFFER_RESULT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSQL_BUFFER_RESULT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SQL_NO_CACHE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSQL_NO_CACHE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SQL_THREAD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSQL_THREAD, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SRID() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSRID, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) STACKED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTACKED, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) STARTS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTARTS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) STATS_AUTO_RECALC() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTATS_AUTO_RECALC, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) STATS_PERSISTENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTATS_PERSISTENT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) STATS_SAMPLE_PAGES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTATS_SAMPLE_PAGES, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTATUS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTORAGE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) STREAM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTREAM, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) STRING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTRING, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SUBCLASS_ORIGIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSUBCLASS_ORIGIN, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SUBJECT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSUBJECT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SUBPARTITIONS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSUBPARTITIONS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SUBPARTITION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSUBPARTITION, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SUSPEND() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSUSPEND, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SWAPS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSWAPS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) SWITCHES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSWITCHES, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLES, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLESPACE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) TABLE_CHECKSUM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLE_CHECKSUM, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) TABLE_NAME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLE_NAME, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTEMPORARY, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) TEMPTABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTEMPTABLE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) TEXT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTEXT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) THAN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTHAN, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) THREAD_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTHREAD_PRIORITY, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) TIES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTIES, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) TIMESTAMP_ADD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTIMESTAMP_ADD, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) TIMESTAMP_DIFF() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTIMESTAMP_DIFF, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTIMESTAMP, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) TIME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTIME, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) TLS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTLS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTRANSACTION, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) TRIGGERS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTRIGGERS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) TYPES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTYPES, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) TYPE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTYPE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) UNBOUNDED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNBOUNDED, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) UNCOMMITTED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNCOMMITTED, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) UNDEFINED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNDEFINED, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) UNDOFILE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNDOFILE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) UNDO_BUFFER_SIZE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNDO_BUFFER_SIZE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) UNKNOWN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNKNOWN, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) UNTIL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNTIL, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) UPGRADE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUPGRADE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) USER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUSER, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) USE_FRM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUSE_FRM, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) VALIDATION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVALIDATION, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) VALUE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVALUE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) VARIABLES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVARIABLES, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) VCPU() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVCPU, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) VIEW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVIEW, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) VISIBLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVISIBLE, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) WAIT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWAIT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) WARNINGS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWARNINGS, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) WEEK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWEEK, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) WEIGHT_STRING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWEIGHT_STRING, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) WITHOUT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWITHOUT, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) WORK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWORK, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) WRAPPER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWRAPPER, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) X509() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserX509, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) XID() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserXID, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) XML() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserXML, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) YEAR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserYEAR, 0)
}

func (s *IdentifierKeywordsUnambiguousContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierKeywordsUnambiguousContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierKeywordsUnambiguousContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterIdentifierKeywordsUnambiguous(s)
	}
}

func (s *IdentifierKeywordsUnambiguousContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitIdentifierKeywordsUnambiguous(s)
	}
}

func (s *IdentifierKeywordsUnambiguousContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitIdentifierKeywordsUnambiguous(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) IdentifierKeywordsUnambiguous() (localctx IIdentifierKeywordsUnambiguousContext) {
	this := p
	_ = this

	localctx = NewIdentifierKeywordsUnambiguousContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, MySQLStatementParserRULE_identifierKeywordsUnambiguous)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2252)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-74)&-(0x1f+1)) == 0 && ((1<<uint((_la-74)))&((1<<(MySQLStatementParserACCOUNT-74))|(1<<(MySQLStatementParserACTION-74))|(1<<(MySQLStatementParserACTIVE-74))|(1<<(MySQLStatementParserADMIN-74))|(1<<(MySQLStatementParserAFTER-74))|(1<<(MySQLStatementParserAGAINST-74))|(1<<(MySQLStatementParserAGGREGATE-74))|(1<<(MySQLStatementParserALGORITHM-74))|(1<<(MySQLStatementParserALWAYS-74))|(1<<(MySQLStatementParserANY-74))|(1<<(MySQLStatementParserARRAY-74))|(1<<(MySQLStatementParserAT-74))|(1<<(MySQLStatementParserATTRIBUTE-74))|(1<<(MySQLStatementParserAUTOEXTEND_SIZE-74))|(1<<(MySQLStatementParserAUTO_INCREMENT-74))|(1<<(MySQLStatementParserAVG-74))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-74))|(1<<(MySQLStatementParserBACKUP-74)))) != 0) || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySQLStatementParserBINLOG-107))|(1<<(MySQLStatementParserBIT-107))|(1<<(MySQLStatementParserBLOCK-107))|(1<<(MySQLStatementParserBOOL-107))|(1<<(MySQLStatementParserBOOLEAN-107))|(1<<(MySQLStatementParserBTREE-107))|(1<<(MySQLStatementParserBUCKETS-107))|(1<<(MySQLStatementParserCASCADED-107))|(1<<(MySQLStatementParserCATALOG_NAME-107))|(1<<(MySQLStatementParserCHAIN-107))|(1<<(MySQLStatementParserCHANGED-107))|(1<<(MySQLStatementParserCHANNEL-107))|(1<<(MySQLStatementParserCIPHER-107))|(1<<(MySQLStatementParserCLASS_ORIGIN-107))|(1<<(MySQLStatementParserCLIENT-107))|(1<<(MySQLStatementParserCLOSE-107))|(1<<(MySQLStatementParserCOALESCE-107)))) != 0) || (((_la-139)&-(0x1f+1)) == 0 && ((1<<uint((_la-139)))&((1<<(MySQLStatementParserCODE-139))|(1<<(MySQLStatementParserCOLLATION-139))|(1<<(MySQLStatementParserCOLUMNS-139))|(1<<(MySQLStatementParserCOLUMN_FORMAT-139))|(1<<(MySQLStatementParserCOLUMN_NAME-139))|(1<<(MySQLStatementParserCOMMITTED-139))|(1<<(MySQLStatementParserCOMPACT-139))|(1<<(MySQLStatementParserCOMPLETION-139))|(1<<(MySQLStatementParserCOMPONENT-139))|(1<<(MySQLStatementParserCOMPRESSED-139))|(1<<(MySQLStatementParserCOMPRESSION-139))|(1<<(MySQLStatementParserCONCURRENT-139))|(1<<(MySQLStatementParserCONNECTION-139))|(1<<(MySQLStatementParserCONSISTENT-139))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-139))|(1<<(MySQLStatementParserCONSTRAINT_NAME-139))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-139))|(1<<(MySQLStatementParserCONTEXT-139))|(1<<(MySQLStatementParserCPU-139)))) != 0) || (((_la-171)&-(0x1f+1)) == 0 && ((1<<uint((_la-171)))&((1<<(MySQLStatementParserCURRENT-171))|(1<<(MySQLStatementParserCURSOR_NAME-171))|(1<<(MySQLStatementParserDATA-171))|(1<<(MySQLStatementParserDATAFILE-171))|(1<<(MySQLStatementParserDATE-171))|(1<<(MySQLStatementParserDATETIME-171))|(1<<(MySQLStatementParserDAY-171))|(1<<(MySQLStatementParserDEFAULT_AUTH-171))|(1<<(MySQLStatementParserDEFINER-171))|(1<<(MySQLStatementParserDEFINITION-171))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-171)))) != 0) || (((_la-203)&-(0x1f+1)) == 0 && ((1<<uint((_la-203)))&((1<<(MySQLStatementParserDESCRIPTION-203))|(1<<(MySQLStatementParserDIAGNOSTICS-203))|(1<<(MySQLStatementParserDIRECTORY-203))|(1<<(MySQLStatementParserDISABLE-203))|(1<<(MySQLStatementParserDISCARD-203))|(1<<(MySQLStatementParserDISK-203))|(1<<(MySQLStatementParserDUMPFILE-203))|(1<<(MySQLStatementParserDUPLICATE-203))|(1<<(MySQLStatementParserDYNAMIC-203))|(1<<(MySQLStatementParserENABLE-203))|(1<<(MySQLStatementParserENCRYPTION-203))|(1<<(MySQLStatementParserENDS-203))|(1<<(MySQLStatementParserENFORCED-203))|(1<<(MySQLStatementParserENGINE-203))|(1<<(MySQLStatementParserENGINES-203))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-203))|(1<<(MySQLStatementParserENUM-203))|(1<<(MySQLStatementParserERROR-203)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySQLStatementParserERRORS-235))|(1<<(MySQLStatementParserESCAPE-235))|(1<<(MySQLStatementParserEVENTS-235))|(1<<(MySQLStatementParserEVERY-235))|(1<<(MySQLStatementParserEXCHANGE-235))|(1<<(MySQLStatementParserEXCLUDE-235))|(1<<(MySQLStatementParserEXPANSION-235))|(1<<(MySQLStatementParserEXPIRE-235))|(1<<(MySQLStatementParserEXPORT-235))|(1<<(MySQLStatementParserEXTENDED-235))|(1<<(MySQLStatementParserEXTENT_SIZE-235))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-235))|(1<<(MySQLStatementParserFAST-235))|(1<<(MySQLStatementParserFAULTS-235))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-235))|(1<<(MySQLStatementParserFILTER-235))|(1<<(MySQLStatementParserFIRST-235))|(1<<(MySQLStatementParserFIXED-235)))) != 0) || (((_la-268)&-(0x1f+1)) == 0 && ((1<<uint((_la-268)))&((1<<(MySQLStatementParserFOLLOWING-268))|(1<<(MySQLStatementParserFORMAT-268))|(1<<(MySQLStatementParserFOUND-268))|(1<<(MySQLStatementParserFULL-268))|(1<<(MySQLStatementParserGENERAL-268))|(1<<(MySQLStatementParserGEOMETRY-268))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-268))|(1<<(MySQLStatementParserGET_FORMAT-268))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-268))|(1<<(MySQLStatementParserGRANTS-268))|(1<<(MySQLStatementParserGROUP_REPLICATION-268))|(1<<(MySQLStatementParserHASH-268))|(1<<(MySQLStatementParserHISTOGRAM-268))|(1<<(MySQLStatementParserHISTORY-268)))) != 0) || (((_la-300)&-(0x1f+1)) == 0 && ((1<<uint((_la-300)))&((1<<(MySQLStatementParserHOST-300))|(1<<(MySQLStatementParserHOSTS-300))|(1<<(MySQLStatementParserHOUR-300))|(1<<(MySQLStatementParserIDENTIFIED-300))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-300))|(1<<(MySQLStatementParserINACTIVE-300))|(1<<(MySQLStatementParserINDEXES-300))|(1<<(MySQLStatementParserINITIAL_SIZE-300))|(1<<(MySQLStatementParserINSERT_METHOD-300))|(1<<(MySQLStatementParserINSTANCE-300)))) != 0) || (((_la-333)&-(0x1f+1)) == 0 && ((1<<uint((_la-333)))&((1<<(MySQLStatementParserINVISIBLE-333))|(1<<(MySQLStatementParserINVOKER-333))|(1<<(MySQLStatementParserIO-333))|(1<<(MySQLStatementParserIPC-333))|(1<<(MySQLStatementParserISOLATION-333))|(1<<(MySQLStatementParserISSUER-333))|(1<<(MySQLStatementParserJSON-333))|(1<<(MySQLStatementParserJSON_VALUE-333))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-333))|(1<<(MySQLStatementParserLAST-333))|(1<<(MySQLStatementParserLEAVES-333))|(1<<(MySQLStatementParserLESS-333))|(1<<(MySQLStatementParserLEVEL-333)))) != 0) || (((_la-367)&-(0x1f+1)) == 0 && ((1<<uint((_la-367)))&((1<<(MySQLStatementParserLINESTRING-367))|(1<<(MySQLStatementParserLIST-367))|(1<<(MySQLStatementParserLOCKED-367))|(1<<(MySQLStatementParserLOCKS-367))|(1<<(MySQLStatementParserLOGFILE-367))|(1<<(MySQLStatementParserLOGS-367))|(1<<(MySQLStatementParserMASTER-367))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-367))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-367))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-367))|(1<<(MySQLStatementParserMASTER_DELAY-367))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-367))|(1<<(MySQLStatementParserMASTER_HOST-367))|(1<<(MySQLStatementParserMASTER_LOG_FILE-367))|(1<<(MySQLStatementParserMASTER_LOG_POS-367))|(1<<(MySQLStatementParserMASTER_PASSWORD-367))|(1<<(MySQLStatementParserMASTER_PORT-367))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-367))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-367))|(1<<(MySQLStatementParserMASTER_SERVER_ID-367))|(1<<(MySQLStatementParserMASTER_SSL-367)))) != 0) || (((_la-399)&-(0x1f+1)) == 0 && ((1<<uint((_la-399)))&((1<<(MySQLStatementParserMASTER_SSL_CA-399))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-399))|(1<<(MySQLStatementParserMASTER_SSL_CERT-399))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-399))|(1<<(MySQLStatementParserMASTER_SSL_CRL-399))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-399))|(1<<(MySQLStatementParserMASTER_SSL_KEY-399))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-399))|(1<<(MySQLStatementParserMASTER_TLS_VERSION-399))|(1<<(MySQLStatementParserMASTER_USER-399))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-399))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-399))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-399))|(1<<(MySQLStatementParserMAX_ROWS-399))|(1<<(MySQLStatementParserMAX_SIZE-399))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-399))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-399))|(1<<(MySQLStatementParserMEDIUM-399))|(1<<(MySQLStatementParserMEMBER-399))|(1<<(MySQLStatementParserMEMORY-399))|(1<<(MySQLStatementParserMERGE-399))|(1<<(MySQLStatementParserMESSAGE_TEXT-399))|(1<<(MySQLStatementParserMICROSECOND-399))|(1<<(MySQLStatementParserMIGRATE-399))|(1<<(MySQLStatementParserMINUTE-399)))) != 0) || (((_la-433)&-(0x1f+1)) == 0 && ((1<<uint((_la-433)))&((1<<(MySQLStatementParserMIN_ROWS-433))|(1<<(MySQLStatementParserMODE-433))|(1<<(MySQLStatementParserMODIFY-433))|(1<<(MySQLStatementParserMONTH-433))|(1<<(MySQLStatementParserMULTILINESTRING-433))|(1<<(MySQLStatementParserMULTIPOINT-433))|(1<<(MySQLStatementParserMULTIPOLYGON-433))|(1<<(MySQLStatementParserMUTEX-433))|(1<<(MySQLStatementParserMYSQL_ERRNO-433))|(1<<(MySQLStatementParserNAME-433))|(1<<(MySQLStatementParserNAMES-433))|(1<<(MySQLStatementParserNATIONAL-433))|(1<<(MySQLStatementParserNCHAR-433))|(1<<(MySQLStatementParserNDBCLUSTER-433))|(1<<(MySQLStatementParserNESTED-433))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-433))|(1<<(MySQLStatementParserNEVER-433))|(1<<(MySQLStatementParserNEW-433))|(1<<(MySQLStatementParserNEXT-433))|(1<<(MySQLStatementParserNODEGROUP-433))|(1<<(MySQLStatementParserNOWAIT-433))|(1<<(MySQLStatementParserNO_WAIT-433)))) != 0) || (((_la-465)&-(0x1f+1)) == 0 && ((1<<uint((_la-465)))&((1<<(MySQLStatementParserNULLS-465))|(1<<(MySQLStatementParserNUMBER-465))|(1<<(MySQLStatementParserNVARCHAR-465))|(1<<(MySQLStatementParserOFF-465))|(1<<(MySQLStatementParserOFFSET-465))|(1<<(MySQLStatementParserOJ-465))|(1<<(MySQLStatementParserOLD-465))|(1<<(MySQLStatementParserONE-465))|(1<<(MySQLStatementParserONLY-465))|(1<<(MySQLStatementParserOPEN-465))|(1<<(MySQLStatementParserOPTIONAL-465))|(1<<(MySQLStatementParserOPTIONS-465))|(1<<(MySQLStatementParserORDINALITY-465))|(1<<(MySQLStatementParserORGANIZATION-465))|(1<<(MySQLStatementParserOTHERS-465))|(1<<(MySQLStatementParserOWNER-465))|(1<<(MySQLStatementParserPACK_KEYS-465))|(1<<(MySQLStatementParserPAGE-465))|(1<<(MySQLStatementParserPARSER-465)))) != 0) || (((_la-497)&-(0x1f+1)) == 0 && ((1<<uint((_la-497)))&((1<<(MySQLStatementParserPARTIAL-497))|(1<<(MySQLStatementParserPARTITIONING-497))|(1<<(MySQLStatementParserPARTITIONS-497))|(1<<(MySQLStatementParserPASSWORD-497))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-497))|(1<<(MySQLStatementParserPATH-497))|(1<<(MySQLStatementParserPHASE-497))|(1<<(MySQLStatementParserPLUGIN-497))|(1<<(MySQLStatementParserPLUGINS-497))|(1<<(MySQLStatementParserPLUGIN_DIR-497))|(1<<(MySQLStatementParserPOINT-497))|(1<<(MySQLStatementParserPOLYGON-497))|(1<<(MySQLStatementParserPORT-497))|(1<<(MySQLStatementParserPRECEDING-497))|(1<<(MySQLStatementParserPRESERVE-497))|(1<<(MySQLStatementParserPREV-497))|(1<<(MySQLStatementParserPRIVILEGES-497))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-497))|(1<<(MySQLStatementParserPROCESSLIST-497))|(1<<(MySQLStatementParserPROFILE-497))|(1<<(MySQLStatementParserPROFILES-497)))) != 0) || (((_la-530)&-(0x1f+1)) == 0 && ((1<<uint((_la-530)))&((1<<(MySQLStatementParserQUARTER-530))|(1<<(MySQLStatementParserQUERY-530))|(1<<(MySQLStatementParserQUICK-530))|(1<<(MySQLStatementParserRANDOM-530))|(1<<(MySQLStatementParserREAD_ONLY-530))|(1<<(MySQLStatementParserREBUILD-530))|(1<<(MySQLStatementParserRECOVER-530))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-530))|(1<<(MySQLStatementParserREDUNDANT-530))|(1<<(MySQLStatementParserREFERENCE-530))|(1<<(MySQLStatementParserRELAY-530))|(1<<(MySQLStatementParserRELAYLOG-530))|(1<<(MySQLStatementParserRELAY_LOG_FILE-530))|(1<<(MySQLStatementParserRELAY_LOG_POS-530))|(1<<(MySQLStatementParserRELAY_THREAD-530))|(1<<(MySQLStatementParserREMOVE-530))|(1<<(MySQLStatementParserREORGANIZE-530))|(1<<(MySQLStatementParserREPEATABLE-530)))) != 0) || (((_la-565)&-(0x1f+1)) == 0 && ((1<<uint((_la-565)))&((1<<(MySQLStatementParserREPLICATE_DO_DB-565))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-565))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-565))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-565))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-565))|(1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-565))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-565))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-565))|(1<<(MySQLStatementParserRESPECT-565))|(1<<(MySQLStatementParserRESTORE-565))|(1<<(MySQLStatementParserRESUME-565))|(1<<(MySQLStatementParserRETAIN-565))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-565))|(1<<(MySQLStatementParserRETURNING-565))|(1<<(MySQLStatementParserRETURNS-565))|(1<<(MySQLStatementParserREUSE-565))|(1<<(MySQLStatementParserREVERSE-565))|(1<<(MySQLStatementParserROLE-565))|(1<<(MySQLStatementParserROLLUP-565))|(1<<(MySQLStatementParserROTATE-565)))) != 0) || (((_la-597)&-(0x1f+1)) == 0 && ((1<<uint((_la-597)))&((1<<(MySQLStatementParserROUTINE-597))|(1<<(MySQLStatementParserROW_COUNT-597))|(1<<(MySQLStatementParserROW_FORMAT-597))|(1<<(MySQLStatementParserRTREE-597))|(1<<(MySQLStatementParserSCHEDULE-597))|(1<<(MySQLStatementParserSCHEMA_NAME-597))|(1<<(MySQLStatementParserSECOND-597))|(1<<(MySQLStatementParserSECONDARY-597))|(1<<(MySQLStatementParserSECONDARY_ENGINE-597))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-597))|(1<<(MySQLStatementParserSECONDARY_LOAD-597))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-597))|(1<<(MySQLStatementParserSECURITY-597))|(1<<(MySQLStatementParserSERIAL-597))|(1<<(MySQLStatementParserSERIALIZABLE-597))|(1<<(MySQLStatementParserSERVER-597))|(1<<(MySQLStatementParserSHARE-597)))) != 0) || (((_la-630)&-(0x1f+1)) == 0 && ((1<<uint((_la-630)))&((1<<(MySQLStatementParserSIMPLE-630))|(1<<(MySQLStatementParserSLOW-630))|(1<<(MySQLStatementParserSNAPSHOT-630))|(1<<(MySQLStatementParserSOCKET-630))|(1<<(MySQLStatementParserSONAME-630))|(1<<(MySQLStatementParserSOUNDS-630))|(1<<(MySQLStatementParserSOURCE-630))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-630))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-630))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-630))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-630))|(1<<(MySQLStatementParserSQL_NO_CACHE-630))|(1<<(MySQLStatementParserSQL_THREAD-630))|(1<<(MySQLStatementParserSRID-630))|(1<<(MySQLStatementParserSTACKED-630))|(1<<(MySQLStatementParserSTARTS-630))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-630)))) != 0) || (((_la-662)&-(0x1f+1)) == 0 && ((1<<uint((_la-662)))&((1<<(MySQLStatementParserSTATS_PERSISTENT-662))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-662))|(1<<(MySQLStatementParserSTATUS-662))|(1<<(MySQLStatementParserSTORAGE-662))|(1<<(MySQLStatementParserSTREAM-662))|(1<<(MySQLStatementParserSTRING-662))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-662))|(1<<(MySQLStatementParserSUBJECT-662))|(1<<(MySQLStatementParserSUBPARTITION-662))|(1<<(MySQLStatementParserSUBPARTITIONS-662))|(1<<(MySQLStatementParserSUSPEND-662))|(1<<(MySQLStatementParserSWAPS-662))|(1<<(MySQLStatementParserSWITCHES-662))|(1<<(MySQLStatementParserTABLES-662))|(1<<(MySQLStatementParserTABLESPACE-662))|(1<<(MySQLStatementParserTABLE_CHECKSUM-662))|(1<<(MySQLStatementParserTABLE_NAME-662))|(1<<(MySQLStatementParserTEMPORARY-662))|(1<<(MySQLStatementParserTEMPTABLE-662))|(1<<(MySQLStatementParserTEXT-662))|(1<<(MySQLStatementParserTHAN-662))|(1<<(MySQLStatementParserTHREAD_PRIORITY-662))|(1<<(MySQLStatementParserTIES-662))|(1<<(MySQLStatementParserTIME-662)))) != 0) || (((_la-694)&-(0x1f+1)) == 0 && ((1<<uint((_la-694)))&((1<<(MySQLStatementParserTIMESTAMP-694))|(1<<(MySQLStatementParserTIMESTAMP_ADD-694))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-694))|(1<<(MySQLStatementParserTLS-694))|(1<<(MySQLStatementParserTRANSACTION-694))|(1<<(MySQLStatementParserTRIGGERS-694))|(1<<(MySQLStatementParserTYPE-694))|(1<<(MySQLStatementParserTYPES-694))|(1<<(MySQLStatementParserUNBOUNDED-694))|(1<<(MySQLStatementParserUNCOMMITTED-694))|(1<<(MySQLStatementParserUNDEFINED-694))|(1<<(MySQLStatementParserUNDOFILE-694))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-694))|(1<<(MySQLStatementParserUNKNOWN-694))|(1<<(MySQLStatementParserUNTIL-694))|(1<<(MySQLStatementParserUPGRADE-694)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySQLStatementParserUSER-728))|(1<<(MySQLStatementParserUSER_RESOURCES-728))|(1<<(MySQLStatementParserUSE_FRM-728))|(1<<(MySQLStatementParserVALIDATION-728))|(1<<(MySQLStatementParserVALUE-728))|(1<<(MySQLStatementParserVARIABLES-728))|(1<<(MySQLStatementParserVCPU-728))|(1<<(MySQLStatementParserVIEW-728))|(1<<(MySQLStatementParserVISIBLE-728))|(1<<(MySQLStatementParserWAIT-728))|(1<<(MySQLStatementParserWARNINGS-728))|(1<<(MySQLStatementParserWEEK-728))|(1<<(MySQLStatementParserWEIGHT_STRING-728))|(1<<(MySQLStatementParserWITHOUT-728))|(1<<(MySQLStatementParserWORK-728))|(1<<(MySQLStatementParserWRAPPER-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySQLStatementParserX509-760))|(1<<(MySQLStatementParserXID-760))|(1<<(MySQLStatementParserXML-760))|(1<<(MySQLStatementParserYEAR-760)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IIdentifierKeywordsAmbiguous1RolesAndLabelsContext is an interface to support dynamic dispatch.
type IIdentifierKeywordsAmbiguous1RolesAndLabelsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierKeywordsAmbiguous1RolesAndLabelsContext differentiates from other interfaces.
	IsIdentifierKeywordsAmbiguous1RolesAndLabelsContext()
}

type IdentifierKeywordsAmbiguous1RolesAndLabelsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierKeywordsAmbiguous1RolesAndLabelsContext() *IdentifierKeywordsAmbiguous1RolesAndLabelsContext {
	var p = new(IdentifierKeywordsAmbiguous1RolesAndLabelsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_identifierKeywordsAmbiguous1RolesAndLabels
	return p
}

func (*IdentifierKeywordsAmbiguous1RolesAndLabelsContext) IsIdentifierKeywordsAmbiguous1RolesAndLabelsContext() {
}

func NewIdentifierKeywordsAmbiguous1RolesAndLabelsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierKeywordsAmbiguous1RolesAndLabelsContext {
	var p = new(IdentifierKeywordsAmbiguous1RolesAndLabelsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_identifierKeywordsAmbiguous1RolesAndLabels

	return p
}

func (s *IdentifierKeywordsAmbiguous1RolesAndLabelsContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierKeywordsAmbiguous1RolesAndLabelsContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXECUTE, 0)
}

func (s *IdentifierKeywordsAmbiguous1RolesAndLabelsContext) RESTART() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRESTART, 0)
}

func (s *IdentifierKeywordsAmbiguous1RolesAndLabelsContext) SHUTDOWN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHUTDOWN, 0)
}

func (s *IdentifierKeywordsAmbiguous1RolesAndLabelsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierKeywordsAmbiguous1RolesAndLabelsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierKeywordsAmbiguous1RolesAndLabelsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterIdentifierKeywordsAmbiguous1RolesAndLabels(s)
	}
}

func (s *IdentifierKeywordsAmbiguous1RolesAndLabelsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitIdentifierKeywordsAmbiguous1RolesAndLabels(s)
	}
}

func (s *IdentifierKeywordsAmbiguous1RolesAndLabelsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitIdentifierKeywordsAmbiguous1RolesAndLabels(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) IdentifierKeywordsAmbiguous1RolesAndLabels() (localctx IIdentifierKeywordsAmbiguous1RolesAndLabelsContext) {
	this := p
	_ = this

	localctx = NewIdentifierKeywordsAmbiguous1RolesAndLabelsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, MySQLStatementParserRULE_identifierKeywordsAmbiguous1RolesAndLabels)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2254)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserEXECUTE || _la == MySQLStatementParserRESTART || _la == MySQLStatementParserSHUTDOWN) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IIdentifierKeywordsAmbiguous2LabelsContext is an interface to support dynamic dispatch.
type IIdentifierKeywordsAmbiguous2LabelsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierKeywordsAmbiguous2LabelsContext differentiates from other interfaces.
	IsIdentifierKeywordsAmbiguous2LabelsContext()
}

type IdentifierKeywordsAmbiguous2LabelsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierKeywordsAmbiguous2LabelsContext() *IdentifierKeywordsAmbiguous2LabelsContext {
	var p = new(IdentifierKeywordsAmbiguous2LabelsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_identifierKeywordsAmbiguous2Labels
	return p
}

func (*IdentifierKeywordsAmbiguous2LabelsContext) IsIdentifierKeywordsAmbiguous2LabelsContext() {}

func NewIdentifierKeywordsAmbiguous2LabelsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierKeywordsAmbiguous2LabelsContext {
	var p = new(IdentifierKeywordsAmbiguous2LabelsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_identifierKeywordsAmbiguous2Labels

	return p
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierKeywordsAmbiguous2LabelsContext) ASCII() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserASCII, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBEGIN, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) BYTE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBYTE, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) CACHE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCACHE, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) CHARSET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHARSET, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) CHECKSUM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHECKSUM, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) CLONE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCLONE, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMENT, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) COMMIT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMIT, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) CONTAINS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCONTAINS, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) DEALLOCATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEALLOCATE, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) DO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDO, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) END() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEND, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) FLUSH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFLUSH, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) FOLLOWS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOLLOWS, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHANDLER, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) HELP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHELP, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) IMPORT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIMPORT, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) INSTALL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINSTALL, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) LANGUAGE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLANGUAGE, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) NO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNO, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) PRECEDES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPRECEDES, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) PREPARE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPREPARE, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) REPAIR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPAIR, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) RESET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRESET, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROLLBACK, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSAVEPOINT, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) SIGNED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSIGNED, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSLAVE, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) START() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTART, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) STOP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTOP, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) TRUNCATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTRUNCATE, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) UNICODE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNICODE, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) UNINSTALL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNINSTALL, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) XA() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserXA, 0)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterIdentifierKeywordsAmbiguous2Labels(s)
	}
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitIdentifierKeywordsAmbiguous2Labels(s)
	}
}

func (s *IdentifierKeywordsAmbiguous2LabelsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitIdentifierKeywordsAmbiguous2Labels(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) IdentifierKeywordsAmbiguous2Labels() (localctx IIdentifierKeywordsAmbiguous2LabelsContext) {
	this := p
	_ = this

	localctx = NewIdentifierKeywordsAmbiguous2LabelsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, MySQLStatementParserRULE_identifierKeywordsAmbiguous2Labels)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2256)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-92)&-(0x1f+1)) == 0 && ((1<<uint((_la-92)))&((1<<(MySQLStatementParserASCII-92))|(1<<(MySQLStatementParserBEGIN-92))|(1<<(MySQLStatementParserBYTE-92))|(1<<(MySQLStatementParserCACHE-92)))) != 0) || (((_la-130)&-(0x1f+1)) == 0 && ((1<<uint((_la-130)))&((1<<(MySQLStatementParserCHARSET-130))|(1<<(MySQLStatementParserCHECKSUM-130))|(1<<(MySQLStatementParserCLONE-130))|(1<<(MySQLStatementParserCOMMENT-130))|(1<<(MySQLStatementParserCOMMIT-130)))) != 0) || _la == MySQLStatementParserCONTAINS || _la == MySQLStatementParserDEALLOCATE || _la == MySQLStatementParserDO || _la == MySQLStatementParserEND || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySQLStatementParserFLUSH-267))|(1<<(MySQLStatementParserFOLLOWS-267))|(1<<(MySQLStatementParserHANDLER-267))|(1<<(MySQLStatementParserHELP-267)))) != 0) || _la == MySQLStatementParserIMPORT || _la == MySQLStatementParserINSTALL || _la == MySQLStatementParserLANGUAGE || _la == MySQLStatementParserNO || _la == MySQLStatementParserPRECEDES || _la == MySQLStatementParserPREPARE || _la == MySQLStatementParserREPAIR || _la == MySQLStatementParserRESET || _la == MySQLStatementParserROLLBACK || _la == MySQLStatementParserSAVEPOINT || (((_la-629)&-(0x1f+1)) == 0 && ((1<<uint((_la-629)))&((1<<(MySQLStatementParserSIGNED-629))|(1<<(MySQLStatementParserSLAVE-629))|(1<<(MySQLStatementParserSTART-629)))) != 0) || _la == MySQLStatementParserSTOP || (((_la-707)&-(0x1f+1)) == 0 && ((1<<uint((_la-707)))&((1<<(MySQLStatementParserTRUNCATE-707))|(1<<(MySQLStatementParserUNICODE-707))|(1<<(MySQLStatementParserUNINSTALL-707)))) != 0) || _la == MySQLStatementParserXA) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IIdentifierKeywordsAmbiguous3RolesContext is an interface to support dynamic dispatch.
type IIdentifierKeywordsAmbiguous3RolesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierKeywordsAmbiguous3RolesContext differentiates from other interfaces.
	IsIdentifierKeywordsAmbiguous3RolesContext()
}

type IdentifierKeywordsAmbiguous3RolesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierKeywordsAmbiguous3RolesContext() *IdentifierKeywordsAmbiguous3RolesContext {
	var p = new(IdentifierKeywordsAmbiguous3RolesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_identifierKeywordsAmbiguous3Roles
	return p
}

func (*IdentifierKeywordsAmbiguous3RolesContext) IsIdentifierKeywordsAmbiguous3RolesContext() {}

func NewIdentifierKeywordsAmbiguous3RolesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierKeywordsAmbiguous3RolesContext {
	var p = new(IdentifierKeywordsAmbiguous3RolesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_identifierKeywordsAmbiguous3Roles

	return p
}

func (s *IdentifierKeywordsAmbiguous3RolesContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierKeywordsAmbiguous3RolesContext) EVENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEVENT, 0)
}

func (s *IdentifierKeywordsAmbiguous3RolesContext) FILE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFILE, 0)
}

func (s *IdentifierKeywordsAmbiguous3RolesContext) NONE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNONE, 0)
}

func (s *IdentifierKeywordsAmbiguous3RolesContext) PROCESS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPROCESS, 0)
}

func (s *IdentifierKeywordsAmbiguous3RolesContext) PROXY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPROXY, 0)
}

func (s *IdentifierKeywordsAmbiguous3RolesContext) RELOAD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRELOAD, 0)
}

func (s *IdentifierKeywordsAmbiguous3RolesContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLICATION, 0)
}

func (s *IdentifierKeywordsAmbiguous3RolesContext) RESOURCE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRESOURCE, 0)
}

func (s *IdentifierKeywordsAmbiguous3RolesContext) SUPER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSUPER, 0)
}

func (s *IdentifierKeywordsAmbiguous3RolesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierKeywordsAmbiguous3RolesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierKeywordsAmbiguous3RolesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterIdentifierKeywordsAmbiguous3Roles(s)
	}
}

func (s *IdentifierKeywordsAmbiguous3RolesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitIdentifierKeywordsAmbiguous3Roles(s)
	}
}

func (s *IdentifierKeywordsAmbiguous3RolesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitIdentifierKeywordsAmbiguous3Roles(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) IdentifierKeywordsAmbiguous3Roles() (localctx IIdentifierKeywordsAmbiguous3RolesContext) {
	this := p
	_ = this

	localctx = NewIdentifierKeywordsAmbiguous3RolesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, MySQLStatementParserRULE_identifierKeywordsAmbiguous3Roles)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2258)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserEVENT || _la == MySQLStatementParserFILE || _la == MySQLStatementParserNONE || (((_la-524)&-(0x1f+1)) == 0 && ((1<<uint((_la-524)))&((1<<(MySQLStatementParserPROCESS-524))|(1<<(MySQLStatementParserPROXY-524))|(1<<(MySQLStatementParserRELOAD-524)))) != 0) || _la == MySQLStatementParserREPLICATION || _la == MySQLStatementParserRESOURCE || _la == MySQLStatementParserSUPER) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IIdentifierKeywordsAmbiguous4SystemVariablesContext is an interface to support dynamic dispatch.
type IIdentifierKeywordsAmbiguous4SystemVariablesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierKeywordsAmbiguous4SystemVariablesContext differentiates from other interfaces.
	IsIdentifierKeywordsAmbiguous4SystemVariablesContext()
}

type IdentifierKeywordsAmbiguous4SystemVariablesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierKeywordsAmbiguous4SystemVariablesContext() *IdentifierKeywordsAmbiguous4SystemVariablesContext {
	var p = new(IdentifierKeywordsAmbiguous4SystemVariablesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_identifierKeywordsAmbiguous4SystemVariables
	return p
}

func (*IdentifierKeywordsAmbiguous4SystemVariablesContext) IsIdentifierKeywordsAmbiguous4SystemVariablesContext() {
}

func NewIdentifierKeywordsAmbiguous4SystemVariablesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierKeywordsAmbiguous4SystemVariablesContext {
	var p = new(IdentifierKeywordsAmbiguous4SystemVariablesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_identifierKeywordsAmbiguous4SystemVariables

	return p
}

func (s *IdentifierKeywordsAmbiguous4SystemVariablesContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *IdentifierKeywordsAmbiguous4SystemVariablesContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGLOBAL, 0)
}

func (s *IdentifierKeywordsAmbiguous4SystemVariablesContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCAL, 0)
}

func (s *IdentifierKeywordsAmbiguous4SystemVariablesContext) PERSIST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPERSIST, 0)
}

func (s *IdentifierKeywordsAmbiguous4SystemVariablesContext) PERSIST_ONLY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPERSIST_ONLY, 0)
}

func (s *IdentifierKeywordsAmbiguous4SystemVariablesContext) SESSION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSESSION, 0)
}

func (s *IdentifierKeywordsAmbiguous4SystemVariablesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierKeywordsAmbiguous4SystemVariablesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierKeywordsAmbiguous4SystemVariablesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterIdentifierKeywordsAmbiguous4SystemVariables(s)
	}
}

func (s *IdentifierKeywordsAmbiguous4SystemVariablesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitIdentifierKeywordsAmbiguous4SystemVariables(s)
	}
}

func (s *IdentifierKeywordsAmbiguous4SystemVariablesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitIdentifierKeywordsAmbiguous4SystemVariables(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) IdentifierKeywordsAmbiguous4SystemVariables() (localctx IIdentifierKeywordsAmbiguous4SystemVariablesContext) {
	this := p
	_ = this

	localctx = NewIdentifierKeywordsAmbiguous4SystemVariablesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, MySQLStatementParserRULE_identifierKeywordsAmbiguous4SystemVariables)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2260)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserGLOBAL || _la == MySQLStatementParserLOCAL || _la == MySQLStatementParserPERSIST || _la == MySQLStatementParserPERSIST_ONLY || _la == MySQLStatementParserSESSION) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ITextOrIdentifierContext is an interface to support dynamic dispatch.
type ITextOrIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTextOrIdentifierContext differentiates from other interfaces.
	IsTextOrIdentifierContext()
}

type TextOrIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTextOrIdentifierContext() *TextOrIdentifierContext {
	var p = new(TextOrIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_textOrIdentifier
	return p
}

func (*TextOrIdentifierContext) IsTextOrIdentifierContext() {}

func NewTextOrIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TextOrIdentifierContext {
	var p = new(TextOrIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_textOrIdentifier

	return p
}

func (s *TextOrIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *TextOrIdentifierContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *TextOrIdentifierContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *TextOrIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TextOrIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TextOrIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTextOrIdentifier(s)
	}
}

func (s *TextOrIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTextOrIdentifier(s)
	}
}

func (s *TextOrIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTextOrIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TextOrIdentifier() (localctx ITextOrIdentifierContext) {
	this := p
	_ = this

	localctx = NewTextOrIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, MySQLStatementParserRULE_textOrIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2264)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 183, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2262)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2263)
			p.String_()
		}

	}

	return localctx
}

// IVariableContext is an interface to support dynamic dispatch.
type IVariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableContext differentiates from other interfaces.
	IsVariableContext()
}

type VariableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableContext() *VariableContext {
	var p = new(VariableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_variable
	return p
}

func (*VariableContext) IsVariableContext() {}

func NewVariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableContext {
	var p = new(VariableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_variable

	return p
}

func (s *VariableContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableContext) UserVariable() IUserVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserVariableContext)
}

func (s *VariableContext) SystemVariable() ISystemVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISystemVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISystemVariableContext)
}

func (s *VariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterVariable(s)
	}
}

func (s *VariableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitVariable(s)
	}
}

func (s *VariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Variable() (localctx IVariableContext) {
	this := p
	_ = this

	localctx = NewVariableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, MySQLStatementParserRULE_variable)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2268)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 184, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2266)
			p.UserVariable()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2267)
			p.SystemVariable()
		}

	}

	return localctx
}

// IUserVariableContext is an interface to support dynamic dispatch.
type IUserVariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUserVariableContext differentiates from other interfaces.
	IsUserVariableContext()
}

type UserVariableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserVariableContext() *UserVariableContext {
	var p = new(UserVariableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_userVariable
	return p
}

func (*UserVariableContext) IsUserVariableContext() {}

func NewUserVariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserVariableContext {
	var p = new(UserVariableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_userVariable

	return p
}

func (s *UserVariableContext) GetParser() antlr.Parser { return s.parser }

func (s *UserVariableContext) AT_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAT_, 0)
}

func (s *UserVariableContext) TextOrIdentifier() ITextOrIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITextOrIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITextOrIdentifierContext)
}

func (s *UserVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserVariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserVariableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterUserVariable(s)
	}
}

func (s *UserVariableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitUserVariable(s)
	}
}

func (s *UserVariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitUserVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) UserVariable() (localctx IUserVariableContext) {
	this := p
	_ = this

	localctx = NewUserVariableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, MySQLStatementParserRULE_userVariable)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2270)
		p.Match(MySQLStatementParserAT_)
	}
	{
		p.SetState(2271)
		p.TextOrIdentifier()
	}

	return localctx
}

// ISystemVariableContext is an interface to support dynamic dispatch.
type ISystemVariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSystemVariableScope returns the systemVariableScope token.
	GetSystemVariableScope() antlr.Token

	// SetSystemVariableScope sets the systemVariableScope token.
	SetSystemVariableScope(antlr.Token)

	// IsSystemVariableContext differentiates from other interfaces.
	IsSystemVariableContext()
}

type SystemVariableContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	systemVariableScope antlr.Token
}

func NewEmptySystemVariableContext() *SystemVariableContext {
	var p = new(SystemVariableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_systemVariable
	return p
}

func (*SystemVariableContext) IsSystemVariableContext() {}

func NewSystemVariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SystemVariableContext {
	var p = new(SystemVariableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_systemVariable

	return p
}

func (s *SystemVariableContext) GetParser() antlr.Parser { return s.parser }

func (s *SystemVariableContext) GetSystemVariableScope() antlr.Token { return s.systemVariableScope }

func (s *SystemVariableContext) SetSystemVariableScope(v antlr.Token) { s.systemVariableScope = v }

func (s *SystemVariableContext) AllAT_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserAT_)
}

func (s *SystemVariableContext) AT_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAT_, i)
}

func (s *SystemVariableContext) TextOrIdentifier() ITextOrIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITextOrIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITextOrIdentifierContext)
}

func (s *SystemVariableContext) DOT_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDOT_, 0)
}

func (s *SystemVariableContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *SystemVariableContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGLOBAL, 0)
}

func (s *SystemVariableContext) SESSION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSESSION, 0)
}

func (s *SystemVariableContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCAL, 0)
}

func (s *SystemVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SystemVariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SystemVariableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSystemVariable(s)
	}
}

func (s *SystemVariableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSystemVariable(s)
	}
}

func (s *SystemVariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSystemVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SystemVariable() (localctx ISystemVariableContext) {
	this := p
	_ = this

	localctx = NewSystemVariableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, MySQLStatementParserRULE_systemVariable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2273)
		p.Match(MySQLStatementParserAT_)
	}
	{
		p.SetState(2274)
		p.Match(MySQLStatementParserAT_)
	}
	p.SetState(2276)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 185, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2275)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*SystemVariableContext).systemVariableScope = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserGLOBAL || _la == MySQLStatementParserLOCAL || _la == MySQLStatementParserSESSION) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*SystemVariableContext).systemVariableScope = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(2278)
		p.TextOrIdentifier()
	}
	p.SetState(2281)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 186, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2279)
			p.Match(MySQLStatementParserDOT_)
		}
		{
			p.SetState(2280)
			p.Identifier()
		}

	}

	return localctx
}

// ISetSystemVariableContext is an interface to support dynamic dispatch.
type ISetSystemVariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetSystemVariableContext differentiates from other interfaces.
	IsSetSystemVariableContext()
}

type SetSystemVariableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetSystemVariableContext() *SetSystemVariableContext {
	var p = new(SetSystemVariableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_setSystemVariable
	return p
}

func (*SetSystemVariableContext) IsSetSystemVariableContext() {}

func NewSetSystemVariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetSystemVariableContext {
	var p = new(SetSystemVariableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_setSystemVariable

	return p
}

func (s *SetSystemVariableContext) GetParser() antlr.Parser { return s.parser }

func (s *SetSystemVariableContext) AllAT_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserAT_)
}

func (s *SetSystemVariableContext) AT_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAT_, i)
}

func (s *SetSystemVariableContext) InternalVariableName() IInternalVariableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInternalVariableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInternalVariableNameContext)
}

func (s *SetSystemVariableContext) OptionType() IOptionTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptionTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOptionTypeContext)
}

func (s *SetSystemVariableContext) DOT_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDOT_, 0)
}

func (s *SetSystemVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetSystemVariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetSystemVariableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSetSystemVariable(s)
	}
}

func (s *SetSystemVariableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSetSystemVariable(s)
	}
}

func (s *SetSystemVariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSetSystemVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SetSystemVariable() (localctx ISetSystemVariableContext) {
	this := p
	_ = this

	localctx = NewSetSystemVariableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, MySQLStatementParserRULE_setSystemVariable)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2283)
		p.Match(MySQLStatementParserAT_)
	}
	{
		p.SetState(2284)
		p.Match(MySQLStatementParserAT_)
	}
	p.SetState(2288)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 187, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2285)
			p.OptionType()
		}
		{
			p.SetState(2286)
			p.Match(MySQLStatementParserDOT_)
		}

	}
	{
		p.SetState(2290)
		p.InternalVariableName()
	}

	return localctx
}

// IOptionTypeContext is an interface to support dynamic dispatch.
type IOptionTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOptionTypeContext differentiates from other interfaces.
	IsOptionTypeContext()
}

type OptionTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptionTypeContext() *OptionTypeContext {
	var p = new(OptionTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_optionType
	return p
}

func (*OptionTypeContext) IsOptionTypeContext() {}

func NewOptionTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OptionTypeContext {
	var p = new(OptionTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_optionType

	return p
}

func (s *OptionTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *OptionTypeContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGLOBAL, 0)
}

func (s *OptionTypeContext) PERSIST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPERSIST, 0)
}

func (s *OptionTypeContext) PERSIST_ONLY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPERSIST_ONLY, 0)
}

func (s *OptionTypeContext) SESSION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSESSION, 0)
}

func (s *OptionTypeContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCAL, 0)
}

func (s *OptionTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OptionTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OptionTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterOptionType(s)
	}
}

func (s *OptionTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitOptionType(s)
	}
}

func (s *OptionTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitOptionType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) OptionType() (localctx IOptionTypeContext) {
	this := p
	_ = this

	localctx = NewOptionTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, MySQLStatementParserRULE_optionType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2292)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserGLOBAL || _la == MySQLStatementParserLOCAL || _la == MySQLStatementParserPERSIST || _la == MySQLStatementParserPERSIST_ONLY || _la == MySQLStatementParserSESSION) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IInternalVariableNameContext is an interface to support dynamic dispatch.
type IInternalVariableNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInternalVariableNameContext differentiates from other interfaces.
	IsInternalVariableNameContext()
}

type InternalVariableNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInternalVariableNameContext() *InternalVariableNameContext {
	var p = new(InternalVariableNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_internalVariableName
	return p
}

func (*InternalVariableNameContext) IsInternalVariableNameContext() {}

func NewInternalVariableNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InternalVariableNameContext {
	var p = new(InternalVariableNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_internalVariableName

	return p
}

func (s *InternalVariableNameContext) GetParser() antlr.Parser { return s.parser }

func (s *InternalVariableNameContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *InternalVariableNameContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *InternalVariableNameContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFAULT, 0)
}

func (s *InternalVariableNameContext) DOT_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDOT_, 0)
}

func (s *InternalVariableNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InternalVariableNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InternalVariableNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterInternalVariableName(s)
	}
}

func (s *InternalVariableNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitInternalVariableName(s)
	}
}

func (s *InternalVariableNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitInternalVariableName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) InternalVariableName() (localctx IInternalVariableNameContext) {
	this := p
	_ = this

	localctx = NewInternalVariableNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, MySQLStatementParserRULE_internalVariableName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2302)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 188, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2294)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2295)
			p.Match(MySQLStatementParserDEFAULT)
		}
		{
			p.SetState(2296)
			p.Match(MySQLStatementParserDOT_)
		}
		{
			p.SetState(2297)
			p.Identifier()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2298)
			p.Identifier()
		}
		{
			p.SetState(2299)
			p.Match(MySQLStatementParserDOT_)
		}
		{
			p.SetState(2300)
			p.Identifier()
		}

	}

	return localctx
}

// ISetExprOrDefaultContext is an interface to support dynamic dispatch.
type ISetExprOrDefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetExprOrDefaultContext differentiates from other interfaces.
	IsSetExprOrDefaultContext()
}

type SetExprOrDefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetExprOrDefaultContext() *SetExprOrDefaultContext {
	var p = new(SetExprOrDefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_setExprOrDefault
	return p
}

func (*SetExprOrDefaultContext) IsSetExprOrDefaultContext() {}

func NewSetExprOrDefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetExprOrDefaultContext {
	var p = new(SetExprOrDefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_setExprOrDefault

	return p
}

func (s *SetExprOrDefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *SetExprOrDefaultContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *SetExprOrDefaultContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFAULT, 0)
}

func (s *SetExprOrDefaultContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALL, 0)
}

func (s *SetExprOrDefaultContext) ON() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserON, 0)
}

func (s *SetExprOrDefaultContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBINARY, 0)
}

func (s *SetExprOrDefaultContext) ROW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROW, 0)
}

func (s *SetExprOrDefaultContext) SYSTEM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSYSTEM, 0)
}

func (s *SetExprOrDefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetExprOrDefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetExprOrDefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSetExprOrDefault(s)
	}
}

func (s *SetExprOrDefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSetExprOrDefault(s)
	}
}

func (s *SetExprOrDefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSetExprOrDefault(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SetExprOrDefault() (localctx ISetExprOrDefaultContext) {
	this := p
	_ = this

	localctx = NewSetExprOrDefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, MySQLStatementParserRULE_setExprOrDefault)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2311)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 189, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2304)
			p.expr(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2305)
			p.Match(MySQLStatementParserDEFAULT)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2306)
			p.Match(MySQLStatementParserALL)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2307)
			p.Match(MySQLStatementParserON)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2308)
			p.Match(MySQLStatementParserBINARY)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2309)
			p.Match(MySQLStatementParserROW)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2310)
			p.Match(MySQLStatementParserSYSTEM)
		}

	}

	return localctx
}

// ITransactionCharacteristicsContext is an interface to support dynamic dispatch.
type ITransactionCharacteristicsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransactionCharacteristicsContext differentiates from other interfaces.
	IsTransactionCharacteristicsContext()
}

type TransactionCharacteristicsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransactionCharacteristicsContext() *TransactionCharacteristicsContext {
	var p = new(TransactionCharacteristicsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_transactionCharacteristics
	return p
}

func (*TransactionCharacteristicsContext) IsTransactionCharacteristicsContext() {}

func NewTransactionCharacteristicsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TransactionCharacteristicsContext {
	var p = new(TransactionCharacteristicsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_transactionCharacteristics

	return p
}

func (s *TransactionCharacteristicsContext) GetParser() antlr.Parser { return s.parser }

func (s *TransactionCharacteristicsContext) TransactionAccessMode() ITransactionAccessModeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransactionAccessModeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITransactionAccessModeContext)
}

func (s *TransactionCharacteristicsContext) COMMA_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, 0)
}

func (s *TransactionCharacteristicsContext) IsolationLevel() IIsolationLevelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIsolationLevelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIsolationLevelContext)
}

func (s *TransactionCharacteristicsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TransactionCharacteristicsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TransactionCharacteristicsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTransactionCharacteristics(s)
	}
}

func (s *TransactionCharacteristicsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTransactionCharacteristics(s)
	}
}

func (s *TransactionCharacteristicsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTransactionCharacteristics(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TransactionCharacteristics() (localctx ITransactionCharacteristicsContext) {
	this := p
	_ = this

	localctx = NewTransactionCharacteristicsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, MySQLStatementParserRULE_transactionCharacteristics)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2323)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserREAD:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2313)
			p.TransactionAccessMode()
		}
		p.SetState(2316)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(2314)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(2315)
				p.IsolationLevel()
			}

		}

	case MySQLStatementParserISOLATION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2318)
			p.IsolationLevel()
		}
		p.SetState(2321)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(2319)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(2320)
				p.TransactionAccessMode()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IIsolationLevelContext is an interface to support dynamic dispatch.
type IIsolationLevelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIsolationLevelContext differentiates from other interfaces.
	IsIsolationLevelContext()
}

type IsolationLevelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIsolationLevelContext() *IsolationLevelContext {
	var p = new(IsolationLevelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_isolationLevel
	return p
}

func (*IsolationLevelContext) IsIsolationLevelContext() {}

func NewIsolationLevelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IsolationLevelContext {
	var p = new(IsolationLevelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_isolationLevel

	return p
}

func (s *IsolationLevelContext) GetParser() antlr.Parser { return s.parser }

func (s *IsolationLevelContext) ISOLATION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserISOLATION, 0)
}

func (s *IsolationLevelContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLEVEL, 0)
}

func (s *IsolationLevelContext) IsolationTypes() IIsolationTypesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIsolationTypesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIsolationTypesContext)
}

func (s *IsolationLevelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IsolationLevelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IsolationLevelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterIsolationLevel(s)
	}
}

func (s *IsolationLevelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitIsolationLevel(s)
	}
}

func (s *IsolationLevelContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitIsolationLevel(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) IsolationLevel() (localctx IIsolationLevelContext) {
	this := p
	_ = this

	localctx = NewIsolationLevelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, MySQLStatementParserRULE_isolationLevel)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2325)
		p.Match(MySQLStatementParserISOLATION)
	}
	{
		p.SetState(2326)
		p.Match(MySQLStatementParserLEVEL)
	}
	{
		p.SetState(2327)
		p.IsolationTypes()
	}

	return localctx
}

// IIsolationTypesContext is an interface to support dynamic dispatch.
type IIsolationTypesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIsolationTypesContext differentiates from other interfaces.
	IsIsolationTypesContext()
}

type IsolationTypesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIsolationTypesContext() *IsolationTypesContext {
	var p = new(IsolationTypesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_isolationTypes
	return p
}

func (*IsolationTypesContext) IsIsolationTypesContext() {}

func NewIsolationTypesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IsolationTypesContext {
	var p = new(IsolationTypesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_isolationTypes

	return p
}

func (s *IsolationTypesContext) GetParser() antlr.Parser { return s.parser }

func (s *IsolationTypesContext) REPEATABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPEATABLE, 0)
}

func (s *IsolationTypesContext) READ() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREAD, 0)
}

func (s *IsolationTypesContext) COMMITTED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMITTED, 0)
}

func (s *IsolationTypesContext) UNCOMMITTED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNCOMMITTED, 0)
}

func (s *IsolationTypesContext) SERIALIZABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSERIALIZABLE, 0)
}

func (s *IsolationTypesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IsolationTypesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IsolationTypesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterIsolationTypes(s)
	}
}

func (s *IsolationTypesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitIsolationTypes(s)
	}
}

func (s *IsolationTypesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitIsolationTypes(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) IsolationTypes() (localctx IIsolationTypesContext) {
	this := p
	_ = this

	localctx = NewIsolationTypesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, MySQLStatementParserRULE_isolationTypes)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2336)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 193, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2329)
			p.Match(MySQLStatementParserREPEATABLE)
		}
		{
			p.SetState(2330)
			p.Match(MySQLStatementParserREAD)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2331)
			p.Match(MySQLStatementParserREAD)
		}
		{
			p.SetState(2332)
			p.Match(MySQLStatementParserCOMMITTED)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2333)
			p.Match(MySQLStatementParserREAD)
		}
		{
			p.SetState(2334)
			p.Match(MySQLStatementParserUNCOMMITTED)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2335)
			p.Match(MySQLStatementParserSERIALIZABLE)
		}

	}

	return localctx
}

// ITransactionAccessModeContext is an interface to support dynamic dispatch.
type ITransactionAccessModeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransactionAccessModeContext differentiates from other interfaces.
	IsTransactionAccessModeContext()
}

type TransactionAccessModeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransactionAccessModeContext() *TransactionAccessModeContext {
	var p = new(TransactionAccessModeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_transactionAccessMode
	return p
}

func (*TransactionAccessModeContext) IsTransactionAccessModeContext() {}

func NewTransactionAccessModeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TransactionAccessModeContext {
	var p = new(TransactionAccessModeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_transactionAccessMode

	return p
}

func (s *TransactionAccessModeContext) GetParser() antlr.Parser { return s.parser }

func (s *TransactionAccessModeContext) READ() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREAD, 0)
}

func (s *TransactionAccessModeContext) WRITE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWRITE, 0)
}

func (s *TransactionAccessModeContext) ONLY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserONLY, 0)
}

func (s *TransactionAccessModeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TransactionAccessModeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TransactionAccessModeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTransactionAccessMode(s)
	}
}

func (s *TransactionAccessModeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTransactionAccessMode(s)
	}
}

func (s *TransactionAccessModeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTransactionAccessMode(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TransactionAccessMode() (localctx ITransactionAccessModeContext) {
	this := p
	_ = this

	localctx = NewTransactionAccessModeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, MySQLStatementParserRULE_transactionAccessMode)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2338)
		p.Match(MySQLStatementParserREAD)
	}
	{
		p.SetState(2339)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserONLY || _la == MySQLStatementParserWRITE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ISchemaNameContext is an interface to support dynamic dispatch.
type ISchemaNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSchemaNameContext differentiates from other interfaces.
	IsSchemaNameContext()
}

type SchemaNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySchemaNameContext() *SchemaNameContext {
	var p = new(SchemaNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_schemaName
	return p
}

func (*SchemaNameContext) IsSchemaNameContext() {}

func NewSchemaNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SchemaNameContext {
	var p = new(SchemaNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_schemaName

	return p
}

func (s *SchemaNameContext) GetParser() antlr.Parser { return s.parser }

func (s *SchemaNameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *SchemaNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SchemaNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSchemaName(s)
	}
}

func (s *SchemaNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSchemaName(s)
	}
}

func (s *SchemaNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSchemaName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SchemaName() (localctx ISchemaNameContext) {
	this := p
	_ = this

	localctx = NewSchemaNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, MySQLStatementParserRULE_schemaName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2341)
		p.Identifier()
	}

	return localctx
}

// ISchemaNamesContext is an interface to support dynamic dispatch.
type ISchemaNamesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSchemaNamesContext differentiates from other interfaces.
	IsSchemaNamesContext()
}

type SchemaNamesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySchemaNamesContext() *SchemaNamesContext {
	var p = new(SchemaNamesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_schemaNames
	return p
}

func (*SchemaNamesContext) IsSchemaNamesContext() {}

func NewSchemaNamesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SchemaNamesContext {
	var p = new(SchemaNamesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_schemaNames

	return p
}

func (s *SchemaNamesContext) GetParser() antlr.Parser { return s.parser }

func (s *SchemaNamesContext) AllSchemaName() []ISchemaNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISchemaNameContext)(nil)).Elem())
	var tst = make([]ISchemaNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISchemaNameContext)
		}
	}

	return tst
}

func (s *SchemaNamesContext) SchemaName(i int) ISchemaNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISchemaNameContext)
}

func (s *SchemaNamesContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *SchemaNamesContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *SchemaNamesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaNamesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SchemaNamesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSchemaNames(s)
	}
}

func (s *SchemaNamesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSchemaNames(s)
	}
}

func (s *SchemaNamesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSchemaNames(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SchemaNames() (localctx ISchemaNamesContext) {
	this := p
	_ = this

	localctx = NewSchemaNamesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, MySQLStatementParserRULE_schemaNames)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2343)
		p.SchemaName()
	}
	p.SetState(2348)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(2344)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(2345)
			p.SchemaName()
		}

		p.SetState(2350)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICharsetNameContext is an interface to support dynamic dispatch.
type ICharsetNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCharsetNameContext differentiates from other interfaces.
	IsCharsetNameContext()
}

type CharsetNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCharsetNameContext() *CharsetNameContext {
	var p = new(CharsetNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_charsetName
	return p
}

func (*CharsetNameContext) IsCharsetNameContext() {}

func NewCharsetNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CharsetNameContext {
	var p = new(CharsetNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_charsetName

	return p
}

func (s *CharsetNameContext) GetParser() antlr.Parser { return s.parser }

func (s *CharsetNameContext) TextOrIdentifier() ITextOrIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITextOrIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITextOrIdentifierContext)
}

func (s *CharsetNameContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBINARY, 0)
}

func (s *CharsetNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CharsetNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CharsetNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCharsetName(s)
	}
}

func (s *CharsetNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCharsetName(s)
	}
}

func (s *CharsetNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCharsetName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CharsetName() (localctx ICharsetNameContext) {
	this := p
	_ = this

	localctx = NewCharsetNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, MySQLStatementParserRULE_charsetName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2353)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserMAX, MySQLStatementParserMIN, MySQLStatementParserSUM, MySQLStatementParserCOUNT, MySQLStatementParserGROUP_CONCAT, MySQLStatementParserCAST, MySQLStatementParserPOSITION, MySQLStatementParserSUBSTRING, MySQLStatementParserSUBSTR, MySQLStatementParserEXTRACT, MySQLStatementParserTRIM, MySQLStatementParserLAST_DAY, MySQLStatementParserTRADITIONAL, MySQLStatementParserTREE, MySQLStatementParserMYSQL_ADMIN, MySQLStatementParserINSTANT, MySQLStatementParserINPLACE, MySQLStatementParserCOPY, MySQLStatementParserUL_BINARY, MySQLStatementParserAUTOCOMMIT, MySQLStatementParserINNODB, MySQLStatementParserREDO_LOG, MySQLStatementParserACCOUNT, MySQLStatementParserACTION, MySQLStatementParserACTIVE, MySQLStatementParserADMIN, MySQLStatementParserAFTER, MySQLStatementParserAGAINST, MySQLStatementParserAGGREGATE, MySQLStatementParserALGORITHM, MySQLStatementParserALWAYS, MySQLStatementParserANY, MySQLStatementParserARRAY, MySQLStatementParserASCII, MySQLStatementParserAT, MySQLStatementParserATTRIBUTE, MySQLStatementParserAUTOEXTEND_SIZE, MySQLStatementParserAUTO_INCREMENT, MySQLStatementParserAVG, MySQLStatementParserAVG_ROW_LENGTH, MySQLStatementParserBACKUP, MySQLStatementParserBEGIN, MySQLStatementParserBINLOG, MySQLStatementParserBIT, MySQLStatementParserBLOCK, MySQLStatementParserBOOL, MySQLStatementParserBOOLEAN, MySQLStatementParserBTREE, MySQLStatementParserBUCKETS, MySQLStatementParserBYTE, MySQLStatementParserCACHE, MySQLStatementParserCASCADED, MySQLStatementParserCATALOG_NAME, MySQLStatementParserCHAIN, MySQLStatementParserCHANGED, MySQLStatementParserCHANNEL, MySQLStatementParserCHARSET, MySQLStatementParserCHECKSUM, MySQLStatementParserCIPHER, MySQLStatementParserCLASS_ORIGIN, MySQLStatementParserCLIENT, MySQLStatementParserCLONE, MySQLStatementParserCLOSE, MySQLStatementParserCOALESCE, MySQLStatementParserCODE, MySQLStatementParserCOLLATION, MySQLStatementParserCOLUMNS, MySQLStatementParserCOLUMN_FORMAT, MySQLStatementParserCOLUMN_NAME, MySQLStatementParserCOMMENT, MySQLStatementParserCOMMIT, MySQLStatementParserCOMMITTED, MySQLStatementParserCOMPACT, MySQLStatementParserCOMPLETION, MySQLStatementParserCOMPONENT, MySQLStatementParserCOMPRESSED, MySQLStatementParserCOMPRESSION, MySQLStatementParserCONCURRENT, MySQLStatementParserCONNECTION, MySQLStatementParserCONSISTENT, MySQLStatementParserCONSTRAINT_CATALOG, MySQLStatementParserCONSTRAINT_NAME, MySQLStatementParserCONSTRAINT_SCHEMA, MySQLStatementParserCONTAINS, MySQLStatementParserCONTEXT, MySQLStatementParserCPU, MySQLStatementParserCURRENT, MySQLStatementParserCURSOR_NAME, MySQLStatementParserDATA, MySQLStatementParserDATAFILE, MySQLStatementParserDATE, MySQLStatementParserDATETIME, MySQLStatementParserDAY, MySQLStatementParserDEALLOCATE, MySQLStatementParserDEFAULT_AUTH, MySQLStatementParserDEFINER, MySQLStatementParserDEFINITION, MySQLStatementParserDELAY_KEY_WRITE, MySQLStatementParserDESCRIPTION, MySQLStatementParserDIAGNOSTICS, MySQLStatementParserDIRECTORY, MySQLStatementParserDISABLE, MySQLStatementParserDISCARD, MySQLStatementParserDISK, MySQLStatementParserDO, MySQLStatementParserDUMPFILE, MySQLStatementParserDUPLICATE, MySQLStatementParserDYNAMIC, MySQLStatementParserENABLE, MySQLStatementParserENCRYPTION, MySQLStatementParserEND, MySQLStatementParserENDS, MySQLStatementParserENFORCED, MySQLStatementParserENGINE, MySQLStatementParserENGINES, MySQLStatementParserENGINE_ATTRIBUTE, MySQLStatementParserENUM, MySQLStatementParserERROR, MySQLStatementParserERRORS, MySQLStatementParserESCAPE, MySQLStatementParserEVENT, MySQLStatementParserEVENTS, MySQLStatementParserEVERY, MySQLStatementParserEXCHANGE, MySQLStatementParserEXCLUDE, MySQLStatementParserEXECUTE, MySQLStatementParserEXPANSION, MySQLStatementParserEXPIRE, MySQLStatementParserEXPORT, MySQLStatementParserEXTENDED, MySQLStatementParserEXTENT_SIZE, MySQLStatementParserFAILED_LOGIN_ATTEMPTS, MySQLStatementParserFAST, MySQLStatementParserFAULTS, MySQLStatementParserFILE, MySQLStatementParserFILE_BLOCK_SIZE, MySQLStatementParserFILTER, MySQLStatementParserFIRST, MySQLStatementParserFIXED, MySQLStatementParserFLUSH, MySQLStatementParserFOLLOWING, MySQLStatementParserFOLLOWS, MySQLStatementParserFORMAT, MySQLStatementParserFOUND, MySQLStatementParserFULL, MySQLStatementParserGENERAL, MySQLStatementParserGEOMETRY, MySQLStatementParserGEOMETRYCOLLECTION, MySQLStatementParserGET_FORMAT, MySQLStatementParserGET_MASTER_PUBLIC_KEY, MySQLStatementParserGLOBAL, MySQLStatementParserGRANTS, MySQLStatementParserGROUP_REPLICATION, MySQLStatementParserHANDLER, MySQLStatementParserHASH, MySQLStatementParserHELP, MySQLStatementParserHISTOGRAM, MySQLStatementParserHISTORY, MySQLStatementParserHOST, MySQLStatementParserHOSTS, MySQLStatementParserHOUR, MySQLStatementParserIDENTIFIED, MySQLStatementParserIGNORE_SERVER_IDS, MySQLStatementParserIMPORT, MySQLStatementParserINACTIVE, MySQLStatementParserINDEXES, MySQLStatementParserINITIAL_SIZE, MySQLStatementParserINSERT_METHOD, MySQLStatementParserINSTALL, MySQLStatementParserINSTANCE, MySQLStatementParserINVISIBLE, MySQLStatementParserINVOKER, MySQLStatementParserIO, MySQLStatementParserIPC, MySQLStatementParserISOLATION, MySQLStatementParserISSUER, MySQLStatementParserJSON, MySQLStatementParserJSON_VALUE, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserLANGUAGE, MySQLStatementParserLAST, MySQLStatementParserLAST_VALUE, MySQLStatementParserLEAVES, MySQLStatementParserLESS, MySQLStatementParserLEVEL, MySQLStatementParserLINESTRING, MySQLStatementParserLIST, MySQLStatementParserLOCAL, MySQLStatementParserLOCKED, MySQLStatementParserLOCKS, MySQLStatementParserLOGFILE, MySQLStatementParserLOGS, MySQLStatementParserMASTER, MySQLStatementParserMASTER_AUTO_POSITION, MySQLStatementParserMASTER_COMPRESSION_ALGORITHM, MySQLStatementParserMASTER_CONNECT_RETRY, MySQLStatementParserMASTER_DELAY, MySQLStatementParserMASTER_HEARTBEAT_PERIOD, MySQLStatementParserMASTER_HOST, MySQLStatementParserMASTER_LOG_FILE, MySQLStatementParserMASTER_LOG_POS, MySQLStatementParserMASTER_PASSWORD, MySQLStatementParserMASTER_PORT, MySQLStatementParserMASTER_PUBLIC_KEY_PATH, MySQLStatementParserMASTER_RETRY_COUNT, MySQLStatementParserMASTER_SERVER_ID, MySQLStatementParserMASTER_SSL, MySQLStatementParserMASTER_SSL_CA, MySQLStatementParserMASTER_SSL_CAPATH, MySQLStatementParserMASTER_SSL_CERT, MySQLStatementParserMASTER_SSL_CIPHER, MySQLStatementParserMASTER_SSL_CRL, MySQLStatementParserMASTER_SSL_CRLPATH, MySQLStatementParserMASTER_SSL_KEY, MySQLStatementParserMASTER_TLS_CIPHERSUITES, MySQLStatementParserMASTER_TLS_VERSION, MySQLStatementParserMASTER_USER, MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL, MySQLStatementParserMAX_CONNECTIONS_PER_HOUR, MySQLStatementParserMAX_QUERIES_PER_HOUR, MySQLStatementParserMAX_ROWS, MySQLStatementParserMAX_SIZE, MySQLStatementParserMAX_UPDATES_PER_HOUR, MySQLStatementParserMAX_USER_CONNECTIONS, MySQLStatementParserMEDIUM, MySQLStatementParserMEMBER, MySQLStatementParserMEMORY, MySQLStatementParserMERGE, MySQLStatementParserMESSAGE_TEXT, MySQLStatementParserMICROSECOND, MySQLStatementParserMIGRATE, MySQLStatementParserMINUTE, MySQLStatementParserMIN_ROWS, MySQLStatementParserMODE, MySQLStatementParserMODIFY, MySQLStatementParserMONTH, MySQLStatementParserMULTILINESTRING, MySQLStatementParserMULTIPOINT, MySQLStatementParserMULTIPOLYGON, MySQLStatementParserMUTEX, MySQLStatementParserMYSQL_ERRNO, MySQLStatementParserNAME, MySQLStatementParserNAMES, MySQLStatementParserNATIONAL, MySQLStatementParserNCHAR, MySQLStatementParserNDBCLUSTER, MySQLStatementParserNESTED, MySQLStatementParserNETWORK_NAMESPACE, MySQLStatementParserNEVER, MySQLStatementParserNEW, MySQLStatementParserNEXT, MySQLStatementParserNO, MySQLStatementParserNODEGROUP, MySQLStatementParserNONE, MySQLStatementParserNOWAIT, MySQLStatementParserNO_WAIT, MySQLStatementParserNULLS, MySQLStatementParserNUMBER, MySQLStatementParserNVARCHAR, MySQLStatementParserOFF, MySQLStatementParserOFFSET, MySQLStatementParserOJ, MySQLStatementParserOLD, MySQLStatementParserONE, MySQLStatementParserONLY, MySQLStatementParserOPEN, MySQLStatementParserOPTIONAL, MySQLStatementParserOPTIONS, MySQLStatementParserORDINALITY, MySQLStatementParserORGANIZATION, MySQLStatementParserOTHERS, MySQLStatementParserOWNER, MySQLStatementParserPACK_KEYS, MySQLStatementParserPAGE, MySQLStatementParserPARSER, MySQLStatementParserPARTIAL, MySQLStatementParserPARTITIONING, MySQLStatementParserPARTITIONS, MySQLStatementParserPASSWORD, MySQLStatementParserPASSWORD_LOCK_TIME, MySQLStatementParserPATH, MySQLStatementParserPERSIST, MySQLStatementParserPERSIST_ONLY, MySQLStatementParserPHASE, MySQLStatementParserPLUGIN, MySQLStatementParserPLUGINS, MySQLStatementParserPLUGIN_DIR, MySQLStatementParserPOINT, MySQLStatementParserPOLYGON, MySQLStatementParserPORT, MySQLStatementParserPRECEDES, MySQLStatementParserPRECEDING, MySQLStatementParserPREPARE, MySQLStatementParserPRESERVE, MySQLStatementParserPREV, MySQLStatementParserPRIVILEGES, MySQLStatementParserPRIVILEGE_CHECKS_USER, MySQLStatementParserPROCESS, MySQLStatementParserPROCESSLIST, MySQLStatementParserPROFILE, MySQLStatementParserPROFILES, MySQLStatementParserPROXY, MySQLStatementParserQUARTER, MySQLStatementParserQUERY, MySQLStatementParserQUICK, MySQLStatementParserRANDOM, MySQLStatementParserREAD_ONLY, MySQLStatementParserREBUILD, MySQLStatementParserRECOVER, MySQLStatementParserREDO_BUFFER_SIZE, MySQLStatementParserREDUNDANT, MySQLStatementParserREFERENCE, MySQLStatementParserRELAY, MySQLStatementParserRELAYLOG, MySQLStatementParserRELAY_LOG_FILE, MySQLStatementParserRELAY_LOG_POS, MySQLStatementParserRELAY_THREAD, MySQLStatementParserRELOAD, MySQLStatementParserREMOVE, MySQLStatementParserREORGANIZE, MySQLStatementParserREPAIR, MySQLStatementParserREPEATABLE, MySQLStatementParserREPLICATE_DO_DB, MySQLStatementParserREPLICATE_DO_TABLE, MySQLStatementParserREPLICATE_IGNORE_DB, MySQLStatementParserREPLICATE_IGNORE_TABLE, MySQLStatementParserREPLICATE_REWRITE_DB, MySQLStatementParserREPLICATE_WILD_DO_TABLE, MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE, MySQLStatementParserREPLICATION, MySQLStatementParserREQUIRE_ROW_FORMAT, MySQLStatementParserRESET, MySQLStatementParserRESOURCE, MySQLStatementParserRESPECT, MySQLStatementParserRESTART, MySQLStatementParserRESTORE, MySQLStatementParserRESUME, MySQLStatementParserRETAIN, MySQLStatementParserRETURNED_SQLSTATE, MySQLStatementParserRETURNING, MySQLStatementParserRETURNS, MySQLStatementParserREUSE, MySQLStatementParserREVERSE, MySQLStatementParserROLE, MySQLStatementParserROLLBACK, MySQLStatementParserROLLUP, MySQLStatementParserROTATE, MySQLStatementParserROUTINE, MySQLStatementParserROW_COUNT, MySQLStatementParserROW_FORMAT, MySQLStatementParserRTREE, MySQLStatementParserSAVEPOINT, MySQLStatementParserSCHEDULE, MySQLStatementParserSCHEMA_NAME, MySQLStatementParserSECOND, MySQLStatementParserSECONDARY, MySQLStatementParserSECONDARY_ENGINE, MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, MySQLStatementParserSECONDARY_LOAD, MySQLStatementParserSECONDARY_UNLOAD, MySQLStatementParserSECURITY, MySQLStatementParserSERIAL, MySQLStatementParserSERIALIZABLE, MySQLStatementParserSERVER, MySQLStatementParserSESSION, MySQLStatementParserSHARE, MySQLStatementParserSHUTDOWN, MySQLStatementParserSIGNED, MySQLStatementParserSIMPLE, MySQLStatementParserSLAVE, MySQLStatementParserSLOW, MySQLStatementParserSNAPSHOT, MySQLStatementParserSOCKET, MySQLStatementParserSONAME, MySQLStatementParserSOUNDS, MySQLStatementParserSOURCE, MySQLStatementParserSQL_AFTER_GTIDS, MySQLStatementParserSQL_AFTER_MTS_GAPS, MySQLStatementParserSQL_BEFORE_GTIDS, MySQLStatementParserSQL_BUFFER_RESULT, MySQLStatementParserSQL_NO_CACHE, MySQLStatementParserSQL_THREAD, MySQLStatementParserSRID, MySQLStatementParserSTACKED, MySQLStatementParserSTART, MySQLStatementParserSTARTS, MySQLStatementParserSTATS_AUTO_RECALC, MySQLStatementParserSTATS_PERSISTENT, MySQLStatementParserSTATS_SAMPLE_PAGES, MySQLStatementParserSTATUS, MySQLStatementParserSTOP, MySQLStatementParserSTORAGE, MySQLStatementParserSTREAM, MySQLStatementParserSTRING, MySQLStatementParserSUBCLASS_ORIGIN, MySQLStatementParserSUBJECT, MySQLStatementParserSUBPARTITION, MySQLStatementParserSUBPARTITIONS, MySQLStatementParserSUPER, MySQLStatementParserSUSPEND, MySQLStatementParserSWAPS, MySQLStatementParserSWITCHES, MySQLStatementParserTABLES, MySQLStatementParserTABLESPACE, MySQLStatementParserTABLE_CHECKSUM, MySQLStatementParserTABLE_NAME, MySQLStatementParserTEMPORARY, MySQLStatementParserTEMPTABLE, MySQLStatementParserTEXT, MySQLStatementParserTHAN, MySQLStatementParserTHREAD_PRIORITY, MySQLStatementParserTIES, MySQLStatementParserTIME, MySQLStatementParserTIMESTAMP, MySQLStatementParserTIMESTAMP_ADD, MySQLStatementParserTIMESTAMP_DIFF, MySQLStatementParserTLS, MySQLStatementParserTRANSACTION, MySQLStatementParserTRIGGERS, MySQLStatementParserTRUNCATE, MySQLStatementParserTYPE, MySQLStatementParserTYPES, MySQLStatementParserUNBOUNDED, MySQLStatementParserUNCOMMITTED, MySQLStatementParserUNDEFINED, MySQLStatementParserUNDOFILE, MySQLStatementParserUNDO_BUFFER_SIZE, MySQLStatementParserUNICODE, MySQLStatementParserUNINSTALL, MySQLStatementParserUNKNOWN, MySQLStatementParserUNTIL, MySQLStatementParserUPGRADE, MySQLStatementParserUSER, MySQLStatementParserUSER_RESOURCES, MySQLStatementParserUSE_FRM, MySQLStatementParserVALIDATION, MySQLStatementParserVALUE, MySQLStatementParserVARIABLES, MySQLStatementParserVCPU, MySQLStatementParserVIEW, MySQLStatementParserVISIBLE, MySQLStatementParserWAIT, MySQLStatementParserWARNINGS, MySQLStatementParserWEEK, MySQLStatementParserWEIGHT_STRING, MySQLStatementParserWITHOUT, MySQLStatementParserWORK, MySQLStatementParserWRAPPER, MySQLStatementParserX509, MySQLStatementParserXA, MySQLStatementParserXID, MySQLStatementParserXML, MySQLStatementParserYEAR, MySQLStatementParserIDENTIFIER_, MySQLStatementParserSINGLE_QUOTED_TEXT, MySQLStatementParserDOUBLE_QUOTED_TEXT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2351)
			p.TextOrIdentifier()
		}

	case MySQLStatementParserBINARY:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2352)
			p.Match(MySQLStatementParserBINARY)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISchemaPairsContext is an interface to support dynamic dispatch.
type ISchemaPairsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSchemaPairsContext differentiates from other interfaces.
	IsSchemaPairsContext()
}

type SchemaPairsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySchemaPairsContext() *SchemaPairsContext {
	var p = new(SchemaPairsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_schemaPairs
	return p
}

func (*SchemaPairsContext) IsSchemaPairsContext() {}

func NewSchemaPairsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SchemaPairsContext {
	var p = new(SchemaPairsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_schemaPairs

	return p
}

func (s *SchemaPairsContext) GetParser() antlr.Parser { return s.parser }

func (s *SchemaPairsContext) AllSchemaPair() []ISchemaPairContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISchemaPairContext)(nil)).Elem())
	var tst = make([]ISchemaPairContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISchemaPairContext)
		}
	}

	return tst
}

func (s *SchemaPairsContext) SchemaPair(i int) ISchemaPairContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaPairContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISchemaPairContext)
}

func (s *SchemaPairsContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *SchemaPairsContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *SchemaPairsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaPairsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SchemaPairsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSchemaPairs(s)
	}
}

func (s *SchemaPairsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSchemaPairs(s)
	}
}

func (s *SchemaPairsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSchemaPairs(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SchemaPairs() (localctx ISchemaPairsContext) {
	this := p
	_ = this

	localctx = NewSchemaPairsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, MySQLStatementParserRULE_schemaPairs)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2355)
		p.SchemaPair()
	}
	p.SetState(2360)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(2356)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(2357)
			p.SchemaPair()
		}

		p.SetState(2362)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISchemaPairContext is an interface to support dynamic dispatch.
type ISchemaPairContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSchemaPairContext differentiates from other interfaces.
	IsSchemaPairContext()
}

type SchemaPairContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySchemaPairContext() *SchemaPairContext {
	var p = new(SchemaPairContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_schemaPair
	return p
}

func (*SchemaPairContext) IsSchemaPairContext() {}

func NewSchemaPairContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SchemaPairContext {
	var p = new(SchemaPairContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_schemaPair

	return p
}

func (s *SchemaPairContext) GetParser() antlr.Parser { return s.parser }

func (s *SchemaPairContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *SchemaPairContext) AllSchemaName() []ISchemaNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISchemaNameContext)(nil)).Elem())
	var tst = make([]ISchemaNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISchemaNameContext)
		}
	}

	return tst
}

func (s *SchemaPairContext) SchemaName(i int) ISchemaNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISchemaNameContext)
}

func (s *SchemaPairContext) COMMA_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, 0)
}

func (s *SchemaPairContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *SchemaPairContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaPairContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SchemaPairContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSchemaPair(s)
	}
}

func (s *SchemaPairContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSchemaPair(s)
	}
}

func (s *SchemaPairContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSchemaPair(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SchemaPair() (localctx ISchemaPairContext) {
	this := p
	_ = this

	localctx = NewSchemaPairContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, MySQLStatementParserRULE_schemaPair)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2363)
		p.Match(MySQLStatementParserLP_)
	}
	{
		p.SetState(2364)
		p.SchemaName()
	}
	{
		p.SetState(2365)
		p.Match(MySQLStatementParserCOMMA_)
	}
	{
		p.SetState(2366)
		p.SchemaName()
	}
	{
		p.SetState(2367)
		p.Match(MySQLStatementParserRP_)
	}

	return localctx
}

// ITableNameContext is an interface to support dynamic dispatch.
type ITableNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableNameContext differentiates from other interfaces.
	IsTableNameContext()
}

type TableNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableNameContext() *TableNameContext {
	var p = new(TableNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_tableName
	return p
}

func (*TableNameContext) IsTableNameContext() {}

func NewTableNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableNameContext {
	var p = new(TableNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_tableName

	return p
}

func (s *TableNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TableNameContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *TableNameContext) Owner() IOwnerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwnerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwnerContext)
}

func (s *TableNameContext) DOT_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDOT_, 0)
}

func (s *TableNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTableName(s)
	}
}

func (s *TableNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTableName(s)
	}
}

func (s *TableNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTableName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TableName() (localctx ITableNameContext) {
	this := p
	_ = this

	localctx = NewTableNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, MySQLStatementParserRULE_tableName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2372)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 197, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2369)
			p.Owner()
		}
		{
			p.SetState(2370)
			p.Match(MySQLStatementParserDOT_)
		}

	}
	{
		p.SetState(2374)
		p.Name()
	}

	return localctx
}

// IColumnNameContext is an interface to support dynamic dispatch.
type IColumnNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnNameContext differentiates from other interfaces.
	IsColumnNameContext()
}

type ColumnNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnNameContext() *ColumnNameContext {
	var p = new(ColumnNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_columnName
	return p
}

func (*ColumnNameContext) IsColumnNameContext() {}

func NewColumnNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnNameContext {
	var p = new(ColumnNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_columnName

	return p
}

func (s *ColumnNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnNameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterColumnName(s)
	}
}

func (s *ColumnNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitColumnName(s)
	}
}

func (s *ColumnNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitColumnName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ColumnName() (localctx IColumnNameContext) {
	this := p
	_ = this

	localctx = NewColumnNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, MySQLStatementParserRULE_columnName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2376)
		p.Identifier()
	}

	return localctx
}

// IIndexNameContext is an interface to support dynamic dispatch.
type IIndexNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexNameContext differentiates from other interfaces.
	IsIndexNameContext()
}

type IndexNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexNameContext() *IndexNameContext {
	var p = new(IndexNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_indexName
	return p
}

func (*IndexNameContext) IsIndexNameContext() {}

func NewIndexNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexNameContext {
	var p = new(IndexNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_indexName

	return p
}

func (s *IndexNameContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexNameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *IndexNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterIndexName(s)
	}
}

func (s *IndexNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitIndexName(s)
	}
}

func (s *IndexNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitIndexName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) IndexName() (localctx IIndexNameContext) {
	this := p
	_ = this

	localctx = NewIndexNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, MySQLStatementParserRULE_indexName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2378)
		p.Identifier()
	}

	return localctx
}

// IConstraintNameContext is an interface to support dynamic dispatch.
type IConstraintNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstraintNameContext differentiates from other interfaces.
	IsConstraintNameContext()
}

type ConstraintNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstraintNameContext() *ConstraintNameContext {
	var p = new(ConstraintNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_constraintName
	return p
}

func (*ConstraintNameContext) IsConstraintNameContext() {}

func NewConstraintNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstraintNameContext {
	var p = new(ConstraintNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_constraintName

	return p
}

func (s *ConstraintNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstraintNameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ConstraintNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstraintNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstraintNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterConstraintName(s)
	}
}

func (s *ConstraintNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitConstraintName(s)
	}
}

func (s *ConstraintNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitConstraintName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ConstraintName() (localctx IConstraintNameContext) {
	this := p
	_ = this

	localctx = NewConstraintNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, MySQLStatementParserRULE_constraintName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2380)
		p.Identifier()
	}

	return localctx
}

// IUserIdentifierOrTextContext is an interface to support dynamic dispatch.
type IUserIdentifierOrTextContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUserIdentifierOrTextContext differentiates from other interfaces.
	IsUserIdentifierOrTextContext()
}

type UserIdentifierOrTextContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserIdentifierOrTextContext() *UserIdentifierOrTextContext {
	var p = new(UserIdentifierOrTextContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_userIdentifierOrText
	return p
}

func (*UserIdentifierOrTextContext) IsUserIdentifierOrTextContext() {}

func NewUserIdentifierOrTextContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserIdentifierOrTextContext {
	var p = new(UserIdentifierOrTextContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_userIdentifierOrText

	return p
}

func (s *UserIdentifierOrTextContext) GetParser() antlr.Parser { return s.parser }

func (s *UserIdentifierOrTextContext) AllTextOrIdentifier() []ITextOrIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITextOrIdentifierContext)(nil)).Elem())
	var tst = make([]ITextOrIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITextOrIdentifierContext)
		}
	}

	return tst
}

func (s *UserIdentifierOrTextContext) TextOrIdentifier(i int) ITextOrIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITextOrIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITextOrIdentifierContext)
}

func (s *UserIdentifierOrTextContext) AT_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAT_, 0)
}

func (s *UserIdentifierOrTextContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserIdentifierOrTextContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserIdentifierOrTextContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterUserIdentifierOrText(s)
	}
}

func (s *UserIdentifierOrTextContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitUserIdentifierOrText(s)
	}
}

func (s *UserIdentifierOrTextContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitUserIdentifierOrText(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) UserIdentifierOrText() (localctx IUserIdentifierOrTextContext) {
	this := p
	_ = this

	localctx = NewUserIdentifierOrTextContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, MySQLStatementParserRULE_userIdentifierOrText)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2382)
		p.TextOrIdentifier()
	}
	p.SetState(2385)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 198, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2383)
			p.Match(MySQLStatementParserAT_)
		}
		{
			p.SetState(2384)
			p.TextOrIdentifier()
		}

	}

	return localctx
}

// IUserNameContext is an interface to support dynamic dispatch.
type IUserNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUserNameContext differentiates from other interfaces.
	IsUserNameContext()
}

type UserNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserNameContext() *UserNameContext {
	var p = new(UserNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_userName
	return p
}

func (*UserNameContext) IsUserNameContext() {}

func NewUserNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserNameContext {
	var p = new(UserNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_userName

	return p
}

func (s *UserNameContext) GetParser() antlr.Parser { return s.parser }

func (s *UserNameContext) UserIdentifierOrText() IUserIdentifierOrTextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserIdentifierOrTextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserIdentifierOrTextContext)
}

func (s *UserNameContext) CURRENT_USER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCURRENT_USER, 0)
}

func (s *UserNameContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *UserNameContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *UserNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterUserName(s)
	}
}

func (s *UserNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitUserName(s)
	}
}

func (s *UserNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitUserName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) UserName() (localctx IUserNameContext) {
	this := p
	_ = this

	localctx = NewUserNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, MySQLStatementParserRULE_userName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2393)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserMAX, MySQLStatementParserMIN, MySQLStatementParserSUM, MySQLStatementParserCOUNT, MySQLStatementParserGROUP_CONCAT, MySQLStatementParserCAST, MySQLStatementParserPOSITION, MySQLStatementParserSUBSTRING, MySQLStatementParserSUBSTR, MySQLStatementParserEXTRACT, MySQLStatementParserTRIM, MySQLStatementParserLAST_DAY, MySQLStatementParserTRADITIONAL, MySQLStatementParserTREE, MySQLStatementParserMYSQL_ADMIN, MySQLStatementParserINSTANT, MySQLStatementParserINPLACE, MySQLStatementParserCOPY, MySQLStatementParserUL_BINARY, MySQLStatementParserAUTOCOMMIT, MySQLStatementParserINNODB, MySQLStatementParserREDO_LOG, MySQLStatementParserACCOUNT, MySQLStatementParserACTION, MySQLStatementParserACTIVE, MySQLStatementParserADMIN, MySQLStatementParserAFTER, MySQLStatementParserAGAINST, MySQLStatementParserAGGREGATE, MySQLStatementParserALGORITHM, MySQLStatementParserALWAYS, MySQLStatementParserANY, MySQLStatementParserARRAY, MySQLStatementParserASCII, MySQLStatementParserAT, MySQLStatementParserATTRIBUTE, MySQLStatementParserAUTOEXTEND_SIZE, MySQLStatementParserAUTO_INCREMENT, MySQLStatementParserAVG, MySQLStatementParserAVG_ROW_LENGTH, MySQLStatementParserBACKUP, MySQLStatementParserBEGIN, MySQLStatementParserBINLOG, MySQLStatementParserBIT, MySQLStatementParserBLOCK, MySQLStatementParserBOOL, MySQLStatementParserBOOLEAN, MySQLStatementParserBTREE, MySQLStatementParserBUCKETS, MySQLStatementParserBYTE, MySQLStatementParserCACHE, MySQLStatementParserCASCADED, MySQLStatementParserCATALOG_NAME, MySQLStatementParserCHAIN, MySQLStatementParserCHANGED, MySQLStatementParserCHANNEL, MySQLStatementParserCHARSET, MySQLStatementParserCHECKSUM, MySQLStatementParserCIPHER, MySQLStatementParserCLASS_ORIGIN, MySQLStatementParserCLIENT, MySQLStatementParserCLONE, MySQLStatementParserCLOSE, MySQLStatementParserCOALESCE, MySQLStatementParserCODE, MySQLStatementParserCOLLATION, MySQLStatementParserCOLUMNS, MySQLStatementParserCOLUMN_FORMAT, MySQLStatementParserCOLUMN_NAME, MySQLStatementParserCOMMENT, MySQLStatementParserCOMMIT, MySQLStatementParserCOMMITTED, MySQLStatementParserCOMPACT, MySQLStatementParserCOMPLETION, MySQLStatementParserCOMPONENT, MySQLStatementParserCOMPRESSED, MySQLStatementParserCOMPRESSION, MySQLStatementParserCONCURRENT, MySQLStatementParserCONNECTION, MySQLStatementParserCONSISTENT, MySQLStatementParserCONSTRAINT_CATALOG, MySQLStatementParserCONSTRAINT_NAME, MySQLStatementParserCONSTRAINT_SCHEMA, MySQLStatementParserCONTAINS, MySQLStatementParserCONTEXT, MySQLStatementParserCPU, MySQLStatementParserCURRENT, MySQLStatementParserCURSOR_NAME, MySQLStatementParserDATA, MySQLStatementParserDATAFILE, MySQLStatementParserDATE, MySQLStatementParserDATETIME, MySQLStatementParserDAY, MySQLStatementParserDEALLOCATE, MySQLStatementParserDEFAULT_AUTH, MySQLStatementParserDEFINER, MySQLStatementParserDEFINITION, MySQLStatementParserDELAY_KEY_WRITE, MySQLStatementParserDESCRIPTION, MySQLStatementParserDIAGNOSTICS, MySQLStatementParserDIRECTORY, MySQLStatementParserDISABLE, MySQLStatementParserDISCARD, MySQLStatementParserDISK, MySQLStatementParserDO, MySQLStatementParserDUMPFILE, MySQLStatementParserDUPLICATE, MySQLStatementParserDYNAMIC, MySQLStatementParserENABLE, MySQLStatementParserENCRYPTION, MySQLStatementParserEND, MySQLStatementParserENDS, MySQLStatementParserENFORCED, MySQLStatementParserENGINE, MySQLStatementParserENGINES, MySQLStatementParserENGINE_ATTRIBUTE, MySQLStatementParserENUM, MySQLStatementParserERROR, MySQLStatementParserERRORS, MySQLStatementParserESCAPE, MySQLStatementParserEVENT, MySQLStatementParserEVENTS, MySQLStatementParserEVERY, MySQLStatementParserEXCHANGE, MySQLStatementParserEXCLUDE, MySQLStatementParserEXECUTE, MySQLStatementParserEXPANSION, MySQLStatementParserEXPIRE, MySQLStatementParserEXPORT, MySQLStatementParserEXTENDED, MySQLStatementParserEXTENT_SIZE, MySQLStatementParserFAILED_LOGIN_ATTEMPTS, MySQLStatementParserFAST, MySQLStatementParserFAULTS, MySQLStatementParserFILE, MySQLStatementParserFILE_BLOCK_SIZE, MySQLStatementParserFILTER, MySQLStatementParserFIRST, MySQLStatementParserFIXED, MySQLStatementParserFLUSH, MySQLStatementParserFOLLOWING, MySQLStatementParserFOLLOWS, MySQLStatementParserFORMAT, MySQLStatementParserFOUND, MySQLStatementParserFULL, MySQLStatementParserGENERAL, MySQLStatementParserGEOMETRY, MySQLStatementParserGEOMETRYCOLLECTION, MySQLStatementParserGET_FORMAT, MySQLStatementParserGET_MASTER_PUBLIC_KEY, MySQLStatementParserGLOBAL, MySQLStatementParserGRANTS, MySQLStatementParserGROUP_REPLICATION, MySQLStatementParserHANDLER, MySQLStatementParserHASH, MySQLStatementParserHELP, MySQLStatementParserHISTOGRAM, MySQLStatementParserHISTORY, MySQLStatementParserHOST, MySQLStatementParserHOSTS, MySQLStatementParserHOUR, MySQLStatementParserIDENTIFIED, MySQLStatementParserIGNORE_SERVER_IDS, MySQLStatementParserIMPORT, MySQLStatementParserINACTIVE, MySQLStatementParserINDEXES, MySQLStatementParserINITIAL_SIZE, MySQLStatementParserINSERT_METHOD, MySQLStatementParserINSTALL, MySQLStatementParserINSTANCE, MySQLStatementParserINVISIBLE, MySQLStatementParserINVOKER, MySQLStatementParserIO, MySQLStatementParserIPC, MySQLStatementParserISOLATION, MySQLStatementParserISSUER, MySQLStatementParserJSON, MySQLStatementParserJSON_VALUE, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserLANGUAGE, MySQLStatementParserLAST, MySQLStatementParserLAST_VALUE, MySQLStatementParserLEAVES, MySQLStatementParserLESS, MySQLStatementParserLEVEL, MySQLStatementParserLINESTRING, MySQLStatementParserLIST, MySQLStatementParserLOCAL, MySQLStatementParserLOCKED, MySQLStatementParserLOCKS, MySQLStatementParserLOGFILE, MySQLStatementParserLOGS, MySQLStatementParserMASTER, MySQLStatementParserMASTER_AUTO_POSITION, MySQLStatementParserMASTER_COMPRESSION_ALGORITHM, MySQLStatementParserMASTER_CONNECT_RETRY, MySQLStatementParserMASTER_DELAY, MySQLStatementParserMASTER_HEARTBEAT_PERIOD, MySQLStatementParserMASTER_HOST, MySQLStatementParserMASTER_LOG_FILE, MySQLStatementParserMASTER_LOG_POS, MySQLStatementParserMASTER_PASSWORD, MySQLStatementParserMASTER_PORT, MySQLStatementParserMASTER_PUBLIC_KEY_PATH, MySQLStatementParserMASTER_RETRY_COUNT, MySQLStatementParserMASTER_SERVER_ID, MySQLStatementParserMASTER_SSL, MySQLStatementParserMASTER_SSL_CA, MySQLStatementParserMASTER_SSL_CAPATH, MySQLStatementParserMASTER_SSL_CERT, MySQLStatementParserMASTER_SSL_CIPHER, MySQLStatementParserMASTER_SSL_CRL, MySQLStatementParserMASTER_SSL_CRLPATH, MySQLStatementParserMASTER_SSL_KEY, MySQLStatementParserMASTER_TLS_CIPHERSUITES, MySQLStatementParserMASTER_TLS_VERSION, MySQLStatementParserMASTER_USER, MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL, MySQLStatementParserMAX_CONNECTIONS_PER_HOUR, MySQLStatementParserMAX_QUERIES_PER_HOUR, MySQLStatementParserMAX_ROWS, MySQLStatementParserMAX_SIZE, MySQLStatementParserMAX_UPDATES_PER_HOUR, MySQLStatementParserMAX_USER_CONNECTIONS, MySQLStatementParserMEDIUM, MySQLStatementParserMEMBER, MySQLStatementParserMEMORY, MySQLStatementParserMERGE, MySQLStatementParserMESSAGE_TEXT, MySQLStatementParserMICROSECOND, MySQLStatementParserMIGRATE, MySQLStatementParserMINUTE, MySQLStatementParserMIN_ROWS, MySQLStatementParserMODE, MySQLStatementParserMODIFY, MySQLStatementParserMONTH, MySQLStatementParserMULTILINESTRING, MySQLStatementParserMULTIPOINT, MySQLStatementParserMULTIPOLYGON, MySQLStatementParserMUTEX, MySQLStatementParserMYSQL_ERRNO, MySQLStatementParserNAME, MySQLStatementParserNAMES, MySQLStatementParserNATIONAL, MySQLStatementParserNCHAR, MySQLStatementParserNDBCLUSTER, MySQLStatementParserNESTED, MySQLStatementParserNETWORK_NAMESPACE, MySQLStatementParserNEVER, MySQLStatementParserNEW, MySQLStatementParserNEXT, MySQLStatementParserNO, MySQLStatementParserNODEGROUP, MySQLStatementParserNONE, MySQLStatementParserNOWAIT, MySQLStatementParserNO_WAIT, MySQLStatementParserNULLS, MySQLStatementParserNUMBER, MySQLStatementParserNVARCHAR, MySQLStatementParserOFF, MySQLStatementParserOFFSET, MySQLStatementParserOJ, MySQLStatementParserOLD, MySQLStatementParserONE, MySQLStatementParserONLY, MySQLStatementParserOPEN, MySQLStatementParserOPTIONAL, MySQLStatementParserOPTIONS, MySQLStatementParserORDINALITY, MySQLStatementParserORGANIZATION, MySQLStatementParserOTHERS, MySQLStatementParserOWNER, MySQLStatementParserPACK_KEYS, MySQLStatementParserPAGE, MySQLStatementParserPARSER, MySQLStatementParserPARTIAL, MySQLStatementParserPARTITIONING, MySQLStatementParserPARTITIONS, MySQLStatementParserPASSWORD, MySQLStatementParserPASSWORD_LOCK_TIME, MySQLStatementParserPATH, MySQLStatementParserPERSIST, MySQLStatementParserPERSIST_ONLY, MySQLStatementParserPHASE, MySQLStatementParserPLUGIN, MySQLStatementParserPLUGINS, MySQLStatementParserPLUGIN_DIR, MySQLStatementParserPOINT, MySQLStatementParserPOLYGON, MySQLStatementParserPORT, MySQLStatementParserPRECEDES, MySQLStatementParserPRECEDING, MySQLStatementParserPREPARE, MySQLStatementParserPRESERVE, MySQLStatementParserPREV, MySQLStatementParserPRIVILEGES, MySQLStatementParserPRIVILEGE_CHECKS_USER, MySQLStatementParserPROCESS, MySQLStatementParserPROCESSLIST, MySQLStatementParserPROFILE, MySQLStatementParserPROFILES, MySQLStatementParserPROXY, MySQLStatementParserQUARTER, MySQLStatementParserQUERY, MySQLStatementParserQUICK, MySQLStatementParserRANDOM, MySQLStatementParserREAD_ONLY, MySQLStatementParserREBUILD, MySQLStatementParserRECOVER, MySQLStatementParserREDO_BUFFER_SIZE, MySQLStatementParserREDUNDANT, MySQLStatementParserREFERENCE, MySQLStatementParserRELAY, MySQLStatementParserRELAYLOG, MySQLStatementParserRELAY_LOG_FILE, MySQLStatementParserRELAY_LOG_POS, MySQLStatementParserRELAY_THREAD, MySQLStatementParserRELOAD, MySQLStatementParserREMOVE, MySQLStatementParserREORGANIZE, MySQLStatementParserREPAIR, MySQLStatementParserREPEATABLE, MySQLStatementParserREPLICATE_DO_DB, MySQLStatementParserREPLICATE_DO_TABLE, MySQLStatementParserREPLICATE_IGNORE_DB, MySQLStatementParserREPLICATE_IGNORE_TABLE, MySQLStatementParserREPLICATE_REWRITE_DB, MySQLStatementParserREPLICATE_WILD_DO_TABLE, MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE, MySQLStatementParserREPLICATION, MySQLStatementParserREQUIRE_ROW_FORMAT, MySQLStatementParserRESET, MySQLStatementParserRESOURCE, MySQLStatementParserRESPECT, MySQLStatementParserRESTART, MySQLStatementParserRESTORE, MySQLStatementParserRESUME, MySQLStatementParserRETAIN, MySQLStatementParserRETURNED_SQLSTATE, MySQLStatementParserRETURNING, MySQLStatementParserRETURNS, MySQLStatementParserREUSE, MySQLStatementParserREVERSE, MySQLStatementParserROLE, MySQLStatementParserROLLBACK, MySQLStatementParserROLLUP, MySQLStatementParserROTATE, MySQLStatementParserROUTINE, MySQLStatementParserROW_COUNT, MySQLStatementParserROW_FORMAT, MySQLStatementParserRTREE, MySQLStatementParserSAVEPOINT, MySQLStatementParserSCHEDULE, MySQLStatementParserSCHEMA_NAME, MySQLStatementParserSECOND, MySQLStatementParserSECONDARY, MySQLStatementParserSECONDARY_ENGINE, MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, MySQLStatementParserSECONDARY_LOAD, MySQLStatementParserSECONDARY_UNLOAD, MySQLStatementParserSECURITY, MySQLStatementParserSERIAL, MySQLStatementParserSERIALIZABLE, MySQLStatementParserSERVER, MySQLStatementParserSESSION, MySQLStatementParserSHARE, MySQLStatementParserSHUTDOWN, MySQLStatementParserSIGNED, MySQLStatementParserSIMPLE, MySQLStatementParserSLAVE, MySQLStatementParserSLOW, MySQLStatementParserSNAPSHOT, MySQLStatementParserSOCKET, MySQLStatementParserSONAME, MySQLStatementParserSOUNDS, MySQLStatementParserSOURCE, MySQLStatementParserSQL_AFTER_GTIDS, MySQLStatementParserSQL_AFTER_MTS_GAPS, MySQLStatementParserSQL_BEFORE_GTIDS, MySQLStatementParserSQL_BUFFER_RESULT, MySQLStatementParserSQL_NO_CACHE, MySQLStatementParserSQL_THREAD, MySQLStatementParserSRID, MySQLStatementParserSTACKED, MySQLStatementParserSTART, MySQLStatementParserSTARTS, MySQLStatementParserSTATS_AUTO_RECALC, MySQLStatementParserSTATS_PERSISTENT, MySQLStatementParserSTATS_SAMPLE_PAGES, MySQLStatementParserSTATUS, MySQLStatementParserSTOP, MySQLStatementParserSTORAGE, MySQLStatementParserSTREAM, MySQLStatementParserSTRING, MySQLStatementParserSUBCLASS_ORIGIN, MySQLStatementParserSUBJECT, MySQLStatementParserSUBPARTITION, MySQLStatementParserSUBPARTITIONS, MySQLStatementParserSUPER, MySQLStatementParserSUSPEND, MySQLStatementParserSWAPS, MySQLStatementParserSWITCHES, MySQLStatementParserTABLES, MySQLStatementParserTABLESPACE, MySQLStatementParserTABLE_CHECKSUM, MySQLStatementParserTABLE_NAME, MySQLStatementParserTEMPORARY, MySQLStatementParserTEMPTABLE, MySQLStatementParserTEXT, MySQLStatementParserTHAN, MySQLStatementParserTHREAD_PRIORITY, MySQLStatementParserTIES, MySQLStatementParserTIME, MySQLStatementParserTIMESTAMP, MySQLStatementParserTIMESTAMP_ADD, MySQLStatementParserTIMESTAMP_DIFF, MySQLStatementParserTLS, MySQLStatementParserTRANSACTION, MySQLStatementParserTRIGGERS, MySQLStatementParserTRUNCATE, MySQLStatementParserTYPE, MySQLStatementParserTYPES, MySQLStatementParserUNBOUNDED, MySQLStatementParserUNCOMMITTED, MySQLStatementParserUNDEFINED, MySQLStatementParserUNDOFILE, MySQLStatementParserUNDO_BUFFER_SIZE, MySQLStatementParserUNICODE, MySQLStatementParserUNINSTALL, MySQLStatementParserUNKNOWN, MySQLStatementParserUNTIL, MySQLStatementParserUPGRADE, MySQLStatementParserUSER, MySQLStatementParserUSER_RESOURCES, MySQLStatementParserUSE_FRM, MySQLStatementParserVALIDATION, MySQLStatementParserVALUE, MySQLStatementParserVARIABLES, MySQLStatementParserVCPU, MySQLStatementParserVIEW, MySQLStatementParserVISIBLE, MySQLStatementParserWAIT, MySQLStatementParserWARNINGS, MySQLStatementParserWEEK, MySQLStatementParserWEIGHT_STRING, MySQLStatementParserWITHOUT, MySQLStatementParserWORK, MySQLStatementParserWRAPPER, MySQLStatementParserX509, MySQLStatementParserXA, MySQLStatementParserXID, MySQLStatementParserXML, MySQLStatementParserYEAR, MySQLStatementParserIDENTIFIER_, MySQLStatementParserSINGLE_QUOTED_TEXT, MySQLStatementParserDOUBLE_QUOTED_TEXT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2387)
			p.UserIdentifierOrText()
		}

	case MySQLStatementParserCURRENT_USER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2388)
			p.Match(MySQLStatementParserCURRENT_USER)
		}
		p.SetState(2391)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserLP_ {
			{
				p.SetState(2389)
				p.Match(MySQLStatementParserLP_)
			}
			{
				p.SetState(2390)
				p.Match(MySQLStatementParserRP_)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IEventNameContext is an interface to support dynamic dispatch.
type IEventNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEventNameContext differentiates from other interfaces.
	IsEventNameContext()
}

type EventNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEventNameContext() *EventNameContext {
	var p = new(EventNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_eventName
	return p
}

func (*EventNameContext) IsEventNameContext() {}

func NewEventNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EventNameContext {
	var p = new(EventNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_eventName

	return p
}

func (s *EventNameContext) GetParser() antlr.Parser { return s.parser }

func (s *EventNameContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *EventNameContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *EventNameContext) DOT_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDOT_, 0)
}

func (s *EventNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EventNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EventNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterEventName(s)
	}
}

func (s *EventNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitEventName(s)
	}
}

func (s *EventNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitEventName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) EventName() (localctx IEventNameContext) {
	this := p
	_ = this

	localctx = NewEventNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, MySQLStatementParserRULE_eventName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2395)
		p.Identifier()
	}
	p.SetState(2398)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserDOT_ {
		{
			p.SetState(2396)
			p.Match(MySQLStatementParserDOT_)
		}
		{
			p.SetState(2397)
			p.Identifier()
		}

	}

	return localctx
}

// IServerNameContext is an interface to support dynamic dispatch.
type IServerNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsServerNameContext differentiates from other interfaces.
	IsServerNameContext()
}

type ServerNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyServerNameContext() *ServerNameContext {
	var p = new(ServerNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_serverName
	return p
}

func (*ServerNameContext) IsServerNameContext() {}

func NewServerNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ServerNameContext {
	var p = new(ServerNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_serverName

	return p
}

func (s *ServerNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ServerNameContext) TextOrIdentifier() ITextOrIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITextOrIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITextOrIdentifierContext)
}

func (s *ServerNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ServerNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ServerNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterServerName(s)
	}
}

func (s *ServerNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitServerName(s)
	}
}

func (s *ServerNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitServerName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ServerName() (localctx IServerNameContext) {
	this := p
	_ = this

	localctx = NewServerNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, MySQLStatementParserRULE_serverName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2400)
		p.TextOrIdentifier()
	}

	return localctx
}

// IWrapperNameContext is an interface to support dynamic dispatch.
type IWrapperNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWrapperNameContext differentiates from other interfaces.
	IsWrapperNameContext()
}

type WrapperNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWrapperNameContext() *WrapperNameContext {
	var p = new(WrapperNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_wrapperName
	return p
}

func (*WrapperNameContext) IsWrapperNameContext() {}

func NewWrapperNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WrapperNameContext {
	var p = new(WrapperNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_wrapperName

	return p
}

func (s *WrapperNameContext) GetParser() antlr.Parser { return s.parser }

func (s *WrapperNameContext) TextOrIdentifier() ITextOrIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITextOrIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITextOrIdentifierContext)
}

func (s *WrapperNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WrapperNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WrapperNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterWrapperName(s)
	}
}

func (s *WrapperNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitWrapperName(s)
	}
}

func (s *WrapperNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitWrapperName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) WrapperName() (localctx IWrapperNameContext) {
	this := p
	_ = this

	localctx = NewWrapperNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, MySQLStatementParserRULE_wrapperName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2402)
		p.TextOrIdentifier()
	}

	return localctx
}

// IFunctionNameContext is an interface to support dynamic dispatch.
type IFunctionNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionNameContext differentiates from other interfaces.
	IsFunctionNameContext()
}

type FunctionNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionNameContext() *FunctionNameContext {
	var p = new(FunctionNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_functionName
	return p
}

func (*FunctionNameContext) IsFunctionNameContext() {}

func NewFunctionNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionNameContext {
	var p = new(FunctionNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_functionName

	return p
}

func (s *FunctionNameContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionNameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *FunctionNameContext) Owner() IOwnerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwnerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwnerContext)
}

func (s *FunctionNameContext) DOT_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDOT_, 0)
}

func (s *FunctionNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterFunctionName(s)
	}
}

func (s *FunctionNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitFunctionName(s)
	}
}

func (s *FunctionNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitFunctionName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) FunctionName() (localctx IFunctionNameContext) {
	this := p
	_ = this

	localctx = NewFunctionNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, MySQLStatementParserRULE_functionName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2411)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 203, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2404)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(2408)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 202, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2405)
				p.Owner()
			}
			{
				p.SetState(2406)
				p.Match(MySQLStatementParserDOT_)
			}

		}
		{
			p.SetState(2410)
			p.Identifier()
		}

	}

	return localctx
}

// IViewNameContext is an interface to support dynamic dispatch.
type IViewNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsViewNameContext differentiates from other interfaces.
	IsViewNameContext()
}

type ViewNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyViewNameContext() *ViewNameContext {
	var p = new(ViewNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_viewName
	return p
}

func (*ViewNameContext) IsViewNameContext() {}

func NewViewNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ViewNameContext {
	var p = new(ViewNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_viewName

	return p
}

func (s *ViewNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ViewNameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ViewNameContext) Owner() IOwnerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwnerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwnerContext)
}

func (s *ViewNameContext) DOT_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDOT_, 0)
}

func (s *ViewNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ViewNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ViewNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterViewName(s)
	}
}

func (s *ViewNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitViewName(s)
	}
}

func (s *ViewNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitViewName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ViewName() (localctx IViewNameContext) {
	this := p
	_ = this

	localctx = NewViewNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, MySQLStatementParserRULE_viewName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2420)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 205, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2413)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(2417)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 204, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2414)
				p.Owner()
			}
			{
				p.SetState(2415)
				p.Match(MySQLStatementParserDOT_)
			}

		}
		{
			p.SetState(2419)
			p.Identifier()
		}

	}

	return localctx
}

// IOwnerContext is an interface to support dynamic dispatch.
type IOwnerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOwnerContext differentiates from other interfaces.
	IsOwnerContext()
}

type OwnerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOwnerContext() *OwnerContext {
	var p = new(OwnerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_owner
	return p
}

func (*OwnerContext) IsOwnerContext() {}

func NewOwnerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OwnerContext {
	var p = new(OwnerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_owner

	return p
}

func (s *OwnerContext) GetParser() antlr.Parser { return s.parser }

func (s *OwnerContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *OwnerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OwnerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OwnerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterOwner(s)
	}
}

func (s *OwnerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitOwner(s)
	}
}

func (s *OwnerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitOwner(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Owner() (localctx IOwnerContext) {
	this := p
	_ = this

	localctx = NewOwnerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, MySQLStatementParserRULE_owner)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2422)
		p.Identifier()
	}

	return localctx
}

// IAliasContext is an interface to support dynamic dispatch.
type IAliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAliasContext differentiates from other interfaces.
	IsAliasContext()
}

type AliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAliasContext() *AliasContext {
	var p = new(AliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alias
	return p
}

func (*AliasContext) IsAliasContext() {}

func NewAliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AliasContext {
	var p = new(AliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alias

	return p
}

func (s *AliasContext) GetParser() antlr.Parser { return s.parser }

func (s *AliasContext) TextOrIdentifier() ITextOrIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITextOrIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITextOrIdentifierContext)
}

func (s *AliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlias(s)
	}
}

func (s *AliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlias(s)
	}
}

func (s *AliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Alias() (localctx IAliasContext) {
	this := p
	_ = this

	localctx = NewAliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, MySQLStatementParserRULE_alias)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2424)
		p.TextOrIdentifier()
	}

	return localctx
}

// INameContext is an interface to support dynamic dispatch.
type INameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNameContext differentiates from other interfaces.
	IsNameContext()
}

type NameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameContext() *NameContext {
	var p = new(NameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_name
	return p
}

func (*NameContext) IsNameContext() {}

func NewNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameContext {
	var p = new(NameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_name

	return p
}

func (s *NameContext) GetParser() antlr.Parser { return s.parser }

func (s *NameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *NameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterName(s)
	}
}

func (s *NameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitName(s)
	}
}

func (s *NameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Name() (localctx INameContext) {
	this := p
	_ = this

	localctx = NewNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, MySQLStatementParserRULE_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2426)
		p.Identifier()
	}

	return localctx
}

// ITableListContext is an interface to support dynamic dispatch.
type ITableListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableListContext differentiates from other interfaces.
	IsTableListContext()
}

type TableListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableListContext() *TableListContext {
	var p = new(TableListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_tableList
	return p
}

func (*TableListContext) IsTableListContext() {}

func NewTableListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableListContext {
	var p = new(TableListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_tableList

	return p
}

func (s *TableListContext) GetParser() antlr.Parser { return s.parser }

func (s *TableListContext) AllTableName() []ITableNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableNameContext)(nil)).Elem())
	var tst = make([]ITableNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableNameContext)
		}
	}

	return tst
}

func (s *TableListContext) TableName(i int) ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *TableListContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *TableListContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *TableListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTableList(s)
	}
}

func (s *TableListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTableList(s)
	}
}

func (s *TableListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTableList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TableList() (localctx ITableListContext) {
	this := p
	_ = this

	localctx = NewTableListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, MySQLStatementParserRULE_tableList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2428)
		p.TableName()
	}
	p.SetState(2433)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(2429)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(2430)
			p.TableName()
		}

		p.SetState(2435)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IViewNamesContext is an interface to support dynamic dispatch.
type IViewNamesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsViewNamesContext differentiates from other interfaces.
	IsViewNamesContext()
}

type ViewNamesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyViewNamesContext() *ViewNamesContext {
	var p = new(ViewNamesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_viewNames
	return p
}

func (*ViewNamesContext) IsViewNamesContext() {}

func NewViewNamesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ViewNamesContext {
	var p = new(ViewNamesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_viewNames

	return p
}

func (s *ViewNamesContext) GetParser() antlr.Parser { return s.parser }

func (s *ViewNamesContext) AllViewName() []IViewNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IViewNameContext)(nil)).Elem())
	var tst = make([]IViewNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IViewNameContext)
		}
	}

	return tst
}

func (s *ViewNamesContext) ViewName(i int) IViewNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IViewNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IViewNameContext)
}

func (s *ViewNamesContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *ViewNamesContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *ViewNamesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ViewNamesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ViewNamesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterViewNames(s)
	}
}

func (s *ViewNamesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitViewNames(s)
	}
}

func (s *ViewNamesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitViewNames(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ViewNames() (localctx IViewNamesContext) {
	this := p
	_ = this

	localctx = NewViewNamesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, MySQLStatementParserRULE_viewNames)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2436)
		p.ViewName()
	}
	p.SetState(2441)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(2437)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(2438)
			p.ViewName()
		}

		p.SetState(2443)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IColumnNamesContext is an interface to support dynamic dispatch.
type IColumnNamesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnNamesContext differentiates from other interfaces.
	IsColumnNamesContext()
}

type ColumnNamesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnNamesContext() *ColumnNamesContext {
	var p = new(ColumnNamesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_columnNames
	return p
}

func (*ColumnNamesContext) IsColumnNamesContext() {}

func NewColumnNamesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnNamesContext {
	var p = new(ColumnNamesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_columnNames

	return p
}

func (s *ColumnNamesContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnNamesContext) AllColumnName() []IColumnNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumnNameContext)(nil)).Elem())
	var tst = make([]IColumnNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumnNameContext)
		}
	}

	return tst
}

func (s *ColumnNamesContext) ColumnName(i int) IColumnNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumnNameContext)
}

func (s *ColumnNamesContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *ColumnNamesContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *ColumnNamesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnNamesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnNamesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterColumnNames(s)
	}
}

func (s *ColumnNamesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitColumnNames(s)
	}
}

func (s *ColumnNamesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitColumnNames(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ColumnNames() (localctx IColumnNamesContext) {
	this := p
	_ = this

	localctx = NewColumnNamesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, MySQLStatementParserRULE_columnNames)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2444)
		p.ColumnName()
	}
	p.SetState(2449)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(2445)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(2446)
			p.ColumnName()
		}

		p.SetState(2451)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IGroupNameContext is an interface to support dynamic dispatch.
type IGroupNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroupNameContext differentiates from other interfaces.
	IsGroupNameContext()
}

type GroupNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupNameContext() *GroupNameContext {
	var p = new(GroupNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_groupName
	return p
}

func (*GroupNameContext) IsGroupNameContext() {}

func NewGroupNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupNameContext {
	var p = new(GroupNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_groupName

	return p
}

func (s *GroupNameContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupNameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *GroupNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterGroupName(s)
	}
}

func (s *GroupNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitGroupName(s)
	}
}

func (s *GroupNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitGroupName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) GroupName() (localctx IGroupNameContext) {
	this := p
	_ = this

	localctx = NewGroupNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, MySQLStatementParserRULE_groupName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2452)
		p.Identifier()
	}

	return localctx
}

// IRoutineNameContext is an interface to support dynamic dispatch.
type IRoutineNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRoutineNameContext differentiates from other interfaces.
	IsRoutineNameContext()
}

type RoutineNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRoutineNameContext() *RoutineNameContext {
	var p = new(RoutineNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_routineName
	return p
}

func (*RoutineNameContext) IsRoutineNameContext() {}

func NewRoutineNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RoutineNameContext {
	var p = new(RoutineNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_routineName

	return p
}

func (s *RoutineNameContext) GetParser() antlr.Parser { return s.parser }

func (s *RoutineNameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *RoutineNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RoutineNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RoutineNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterRoutineName(s)
	}
}

func (s *RoutineNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitRoutineName(s)
	}
}

func (s *RoutineNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitRoutineName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) RoutineName() (localctx IRoutineNameContext) {
	this := p
	_ = this

	localctx = NewRoutineNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, MySQLStatementParserRULE_routineName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2454)
		p.Identifier()
	}

	return localctx
}

// IShardLibraryNameContext is an interface to support dynamic dispatch.
type IShardLibraryNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShardLibraryNameContext differentiates from other interfaces.
	IsShardLibraryNameContext()
}

type ShardLibraryNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShardLibraryNameContext() *ShardLibraryNameContext {
	var p = new(ShardLibraryNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_shardLibraryName
	return p
}

func (*ShardLibraryNameContext) IsShardLibraryNameContext() {}

func NewShardLibraryNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShardLibraryNameContext {
	var p = new(ShardLibraryNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_shardLibraryName

	return p
}

func (s *ShardLibraryNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ShardLibraryNameContext) StringLiterals() IStringLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralsContext)
}

func (s *ShardLibraryNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShardLibraryNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShardLibraryNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShardLibraryName(s)
	}
}

func (s *ShardLibraryNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShardLibraryName(s)
	}
}

func (s *ShardLibraryNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShardLibraryName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShardLibraryName() (localctx IShardLibraryNameContext) {
	this := p
	_ = this

	localctx = NewShardLibraryNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, MySQLStatementParserRULE_shardLibraryName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2456)
		p.StringLiterals()
	}

	return localctx
}

// IComponentNameContext is an interface to support dynamic dispatch.
type IComponentNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComponentNameContext differentiates from other interfaces.
	IsComponentNameContext()
}

type ComponentNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComponentNameContext() *ComponentNameContext {
	var p = new(ComponentNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_componentName
	return p
}

func (*ComponentNameContext) IsComponentNameContext() {}

func NewComponentNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ComponentNameContext {
	var p = new(ComponentNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_componentName

	return p
}

func (s *ComponentNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ComponentNameContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *ComponentNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComponentNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ComponentNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterComponentName(s)
	}
}

func (s *ComponentNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitComponentName(s)
	}
}

func (s *ComponentNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitComponentName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ComponentName() (localctx IComponentNameContext) {
	this := p
	_ = this

	localctx = NewComponentNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, MySQLStatementParserRULE_componentName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2458)
		p.String_()
	}

	return localctx
}

// IPluginNameContext is an interface to support dynamic dispatch.
type IPluginNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPluginNameContext differentiates from other interfaces.
	IsPluginNameContext()
}

type PluginNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPluginNameContext() *PluginNameContext {
	var p = new(PluginNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_pluginName
	return p
}

func (*PluginNameContext) IsPluginNameContext() {}

func NewPluginNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PluginNameContext {
	var p = new(PluginNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_pluginName

	return p
}

func (s *PluginNameContext) GetParser() antlr.Parser { return s.parser }

func (s *PluginNameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *PluginNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PluginNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PluginNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterPluginName(s)
	}
}

func (s *PluginNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitPluginName(s)
	}
}

func (s *PluginNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitPluginName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) PluginName() (localctx IPluginNameContext) {
	this := p
	_ = this

	localctx = NewPluginNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, MySQLStatementParserRULE_pluginName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2460)
		p.Identifier()
	}

	return localctx
}

// IHostNameContext is an interface to support dynamic dispatch.
type IHostNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHostNameContext differentiates from other interfaces.
	IsHostNameContext()
}

type HostNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHostNameContext() *HostNameContext {
	var p = new(HostNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_hostName
	return p
}

func (*HostNameContext) IsHostNameContext() {}

func NewHostNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HostNameContext {
	var p = new(HostNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_hostName

	return p
}

func (s *HostNameContext) GetParser() antlr.Parser { return s.parser }

func (s *HostNameContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *HostNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HostNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HostNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterHostName(s)
	}
}

func (s *HostNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitHostName(s)
	}
}

func (s *HostNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitHostName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) HostName() (localctx IHostNameContext) {
	this := p
	_ = this

	localctx = NewHostNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, MySQLStatementParserRULE_hostName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2462)
		p.String_()
	}

	return localctx
}

// IPortContext is an interface to support dynamic dispatch.
type IPortContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPortContext differentiates from other interfaces.
	IsPortContext()
}

type PortContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPortContext() *PortContext {
	var p = new(PortContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_port
	return p
}

func (*PortContext) IsPortContext() {}

func NewPortContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PortContext {
	var p = new(PortContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_port

	return p
}

func (s *PortContext) GetParser() antlr.Parser { return s.parser }

func (s *PortContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *PortContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PortContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PortContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterPort(s)
	}
}

func (s *PortContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitPort(s)
	}
}

func (s *PortContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitPort(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Port() (localctx IPortContext) {
	this := p
	_ = this

	localctx = NewPortContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, MySQLStatementParserRULE_port)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2464)
		p.Match(MySQLStatementParserNUMBER_)
	}

	return localctx
}

// ICloneInstanceContext is an interface to support dynamic dispatch.
type ICloneInstanceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCloneInstanceContext differentiates from other interfaces.
	IsCloneInstanceContext()
}

type CloneInstanceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCloneInstanceContext() *CloneInstanceContext {
	var p = new(CloneInstanceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_cloneInstance
	return p
}

func (*CloneInstanceContext) IsCloneInstanceContext() {}

func NewCloneInstanceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CloneInstanceContext {
	var p = new(CloneInstanceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_cloneInstance

	return p
}

func (s *CloneInstanceContext) GetParser() antlr.Parser { return s.parser }

func (s *CloneInstanceContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *CloneInstanceContext) AT_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAT_, 0)
}

func (s *CloneInstanceContext) HostName() IHostNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHostNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHostNameContext)
}

func (s *CloneInstanceContext) COLON_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOLON_, 0)
}

func (s *CloneInstanceContext) Port() IPortContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPortContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPortContext)
}

func (s *CloneInstanceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CloneInstanceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CloneInstanceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCloneInstance(s)
	}
}

func (s *CloneInstanceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCloneInstance(s)
	}
}

func (s *CloneInstanceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCloneInstance(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CloneInstance() (localctx ICloneInstanceContext) {
	this := p
	_ = this

	localctx = NewCloneInstanceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, MySQLStatementParserRULE_cloneInstance)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2466)
		p.UserName()
	}
	{
		p.SetState(2467)
		p.Match(MySQLStatementParserAT_)
	}
	{
		p.SetState(2468)
		p.HostName()
	}
	{
		p.SetState(2469)
		p.Match(MySQLStatementParserCOLON_)
	}
	{
		p.SetState(2470)
		p.Port()
	}

	return localctx
}

// ICloneDirContext is an interface to support dynamic dispatch.
type ICloneDirContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCloneDirContext differentiates from other interfaces.
	IsCloneDirContext()
}

type CloneDirContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCloneDirContext() *CloneDirContext {
	var p = new(CloneDirContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_cloneDir
	return p
}

func (*CloneDirContext) IsCloneDirContext() {}

func NewCloneDirContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CloneDirContext {
	var p = new(CloneDirContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_cloneDir

	return p
}

func (s *CloneDirContext) GetParser() antlr.Parser { return s.parser }

func (s *CloneDirContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *CloneDirContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CloneDirContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CloneDirContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCloneDir(s)
	}
}

func (s *CloneDirContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCloneDir(s)
	}
}

func (s *CloneDirContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCloneDir(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CloneDir() (localctx ICloneDirContext) {
	this := p
	_ = this

	localctx = NewCloneDirContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, MySQLStatementParserRULE_cloneDir)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2472)
		p.String_()
	}

	return localctx
}

// IChannelNameContext is an interface to support dynamic dispatch.
type IChannelNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChannelNameContext differentiates from other interfaces.
	IsChannelNameContext()
}

type ChannelNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChannelNameContext() *ChannelNameContext {
	var p = new(ChannelNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_channelName
	return p
}

func (*ChannelNameContext) IsChannelNameContext() {}

func NewChannelNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChannelNameContext {
	var p = new(ChannelNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_channelName

	return p
}

func (s *ChannelNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ChannelNameContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *ChannelNameContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ChannelNameContext) DOT_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDOT_, 0)
}

func (s *ChannelNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChannelNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChannelNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterChannelName(s)
	}
}

func (s *ChannelNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitChannelName(s)
	}
}

func (s *ChannelNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitChannelName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ChannelName() (localctx IChannelNameContext) {
	this := p
	_ = this

	localctx = NewChannelNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, MySQLStatementParserRULE_channelName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2474)
		p.Identifier()
	}
	p.SetState(2477)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserDOT_ {
		{
			p.SetState(2475)
			p.Match(MySQLStatementParserDOT_)
		}
		{
			p.SetState(2476)
			p.Identifier()
		}

	}

	return localctx
}

// ILogNameContext is an interface to support dynamic dispatch.
type ILogNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogNameContext differentiates from other interfaces.
	IsLogNameContext()
}

type LogNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogNameContext() *LogNameContext {
	var p = new(LogNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_logName
	return p
}

func (*LogNameContext) IsLogNameContext() {}

func NewLogNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogNameContext {
	var p = new(LogNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_logName

	return p
}

func (s *LogNameContext) GetParser() antlr.Parser { return s.parser }

func (s *LogNameContext) StringLiterals() IStringLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralsContext)
}

func (s *LogNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterLogName(s)
	}
}

func (s *LogNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitLogName(s)
	}
}

func (s *LogNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitLogName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) LogName() (localctx ILogNameContext) {
	this := p
	_ = this

	localctx = NewLogNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 300, MySQLStatementParserRULE_logName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2479)
		p.StringLiterals()
	}

	return localctx
}

// IRoleNameContext is an interface to support dynamic dispatch.
type IRoleNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRoleNameContext differentiates from other interfaces.
	IsRoleNameContext()
}

type RoleNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRoleNameContext() *RoleNameContext {
	var p = new(RoleNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_roleName
	return p
}

func (*RoleNameContext) IsRoleNameContext() {}

func NewRoleNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RoleNameContext {
	var p = new(RoleNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_roleName

	return p
}

func (s *RoleNameContext) GetParser() antlr.Parser { return s.parser }

func (s *RoleNameContext) RoleIdentifierOrText() IRoleIdentifierOrTextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoleIdentifierOrTextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoleIdentifierOrTextContext)
}

func (s *RoleNameContext) AT_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAT_, 0)
}

func (s *RoleNameContext) TextOrIdentifier() ITextOrIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITextOrIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITextOrIdentifierContext)
}

func (s *RoleNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RoleNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RoleNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterRoleName(s)
	}
}

func (s *RoleNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitRoleName(s)
	}
}

func (s *RoleNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitRoleName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) RoleName() (localctx IRoleNameContext) {
	this := p
	_ = this

	localctx = NewRoleNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 302, MySQLStatementParserRULE_roleName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2481)
		p.RoleIdentifierOrText()
	}
	p.SetState(2484)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserAT_ {
		{
			p.SetState(2482)
			p.Match(MySQLStatementParserAT_)
		}
		{
			p.SetState(2483)
			p.TextOrIdentifier()
		}

	}

	return localctx
}

// IRoleIdentifierOrTextContext is an interface to support dynamic dispatch.
type IRoleIdentifierOrTextContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRoleIdentifierOrTextContext differentiates from other interfaces.
	IsRoleIdentifierOrTextContext()
}

type RoleIdentifierOrTextContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRoleIdentifierOrTextContext() *RoleIdentifierOrTextContext {
	var p = new(RoleIdentifierOrTextContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_roleIdentifierOrText
	return p
}

func (*RoleIdentifierOrTextContext) IsRoleIdentifierOrTextContext() {}

func NewRoleIdentifierOrTextContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RoleIdentifierOrTextContext {
	var p = new(RoleIdentifierOrTextContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_roleIdentifierOrText

	return p
}

func (s *RoleIdentifierOrTextContext) GetParser() antlr.Parser { return s.parser }

func (s *RoleIdentifierOrTextContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *RoleIdentifierOrTextContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *RoleIdentifierOrTextContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RoleIdentifierOrTextContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RoleIdentifierOrTextContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterRoleIdentifierOrText(s)
	}
}

func (s *RoleIdentifierOrTextContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitRoleIdentifierOrText(s)
	}
}

func (s *RoleIdentifierOrTextContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitRoleIdentifierOrText(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) RoleIdentifierOrText() (localctx IRoleIdentifierOrTextContext) {
	this := p
	_ = this

	localctx = NewRoleIdentifierOrTextContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 304, MySQLStatementParserRULE_roleIdentifierOrText)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2488)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 211, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2486)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2487)
			p.String_()
		}

	}

	return localctx
}

// IEngineRefContext is an interface to support dynamic dispatch.
type IEngineRefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEngineRefContext differentiates from other interfaces.
	IsEngineRefContext()
}

type EngineRefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEngineRefContext() *EngineRefContext {
	var p = new(EngineRefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_engineRef
	return p
}

func (*EngineRefContext) IsEngineRefContext() {}

func NewEngineRefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EngineRefContext {
	var p = new(EngineRefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_engineRef

	return p
}

func (s *EngineRefContext) GetParser() antlr.Parser { return s.parser }

func (s *EngineRefContext) TextOrIdentifier() ITextOrIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITextOrIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITextOrIdentifierContext)
}

func (s *EngineRefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EngineRefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EngineRefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterEngineRef(s)
	}
}

func (s *EngineRefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitEngineRef(s)
	}
}

func (s *EngineRefContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitEngineRef(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) EngineRef() (localctx IEngineRefContext) {
	this := p
	_ = this

	localctx = NewEngineRefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 306, MySQLStatementParserRULE_engineRef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2490)
		p.TextOrIdentifier()
	}

	return localctx
}

// ITriggerNameContext is an interface to support dynamic dispatch.
type ITriggerNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTriggerNameContext differentiates from other interfaces.
	IsTriggerNameContext()
}

type TriggerNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTriggerNameContext() *TriggerNameContext {
	var p = new(TriggerNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_triggerName
	return p
}

func (*TriggerNameContext) IsTriggerNameContext() {}

func NewTriggerNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TriggerNameContext {
	var p = new(TriggerNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_triggerName

	return p
}

func (s *TriggerNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TriggerNameContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *TriggerNameContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *TriggerNameContext) DOT_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDOT_, 0)
}

func (s *TriggerNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TriggerNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TriggerNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTriggerName(s)
	}
}

func (s *TriggerNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTriggerName(s)
	}
}

func (s *TriggerNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTriggerName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TriggerName() (localctx ITriggerNameContext) {
	this := p
	_ = this

	localctx = NewTriggerNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 308, MySQLStatementParserRULE_triggerName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2492)
		p.Identifier()
	}
	p.SetState(2495)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserDOT_ {
		{
			p.SetState(2493)
			p.Match(MySQLStatementParserDOT_)
		}
		{
			p.SetState(2494)
			p.Identifier()
		}

	}

	return localctx
}

// ITriggerTimeContext is an interface to support dynamic dispatch.
type ITriggerTimeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTriggerTimeContext differentiates from other interfaces.
	IsTriggerTimeContext()
}

type TriggerTimeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTriggerTimeContext() *TriggerTimeContext {
	var p = new(TriggerTimeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_triggerTime
	return p
}

func (*TriggerTimeContext) IsTriggerTimeContext() {}

func NewTriggerTimeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TriggerTimeContext {
	var p = new(TriggerTimeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_triggerTime

	return p
}

func (s *TriggerTimeContext) GetParser() antlr.Parser { return s.parser }

func (s *TriggerTimeContext) BEFORE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBEFORE, 0)
}

func (s *TriggerTimeContext) AFTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAFTER, 0)
}

func (s *TriggerTimeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TriggerTimeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TriggerTimeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTriggerTime(s)
	}
}

func (s *TriggerTimeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTriggerTime(s)
	}
}

func (s *TriggerTimeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTriggerTime(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TriggerTime() (localctx ITriggerTimeContext) {
	this := p
	_ = this

	localctx = NewTriggerTimeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 310, MySQLStatementParserRULE_triggerTime)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2497)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserAFTER || _la == MySQLStatementParserBEFORE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ITableOrTablesContext is an interface to support dynamic dispatch.
type ITableOrTablesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableOrTablesContext differentiates from other interfaces.
	IsTableOrTablesContext()
}

type TableOrTablesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableOrTablesContext() *TableOrTablesContext {
	var p = new(TableOrTablesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_tableOrTables
	return p
}

func (*TableOrTablesContext) IsTableOrTablesContext() {}

func NewTableOrTablesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableOrTablesContext {
	var p = new(TableOrTablesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_tableOrTables

	return p
}

func (s *TableOrTablesContext) GetParser() antlr.Parser { return s.parser }

func (s *TableOrTablesContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLE, 0)
}

func (s *TableOrTablesContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLES, 0)
}

func (s *TableOrTablesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOrTablesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableOrTablesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTableOrTables(s)
	}
}

func (s *TableOrTablesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTableOrTables(s)
	}
}

func (s *TableOrTablesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTableOrTables(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TableOrTables() (localctx ITableOrTablesContext) {
	this := p
	_ = this

	localctx = NewTableOrTablesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 312, MySQLStatementParserRULE_tableOrTables)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2499)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserTABLE || _la == MySQLStatementParserTABLES) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IUserOrRoleContext is an interface to support dynamic dispatch.
type IUserOrRoleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUserOrRoleContext differentiates from other interfaces.
	IsUserOrRoleContext()
}

type UserOrRoleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserOrRoleContext() *UserOrRoleContext {
	var p = new(UserOrRoleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_userOrRole
	return p
}

func (*UserOrRoleContext) IsUserOrRoleContext() {}

func NewUserOrRoleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserOrRoleContext {
	var p = new(UserOrRoleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_userOrRole

	return p
}

func (s *UserOrRoleContext) GetParser() antlr.Parser { return s.parser }

func (s *UserOrRoleContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *UserOrRoleContext) RoleName() IRoleNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoleNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoleNameContext)
}

func (s *UserOrRoleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserOrRoleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserOrRoleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterUserOrRole(s)
	}
}

func (s *UserOrRoleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitUserOrRole(s)
	}
}

func (s *UserOrRoleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitUserOrRole(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) UserOrRole() (localctx IUserOrRoleContext) {
	this := p
	_ = this

	localctx = NewUserOrRoleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 314, MySQLStatementParserRULE_userOrRole)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2503)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 213, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2501)
			p.UserName()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2502)
			p.RoleName()
		}

	}

	return localctx
}

// IPartitionNameContext is an interface to support dynamic dispatch.
type IPartitionNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitionNameContext differentiates from other interfaces.
	IsPartitionNameContext()
}

type PartitionNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionNameContext() *PartitionNameContext {
	var p = new(PartitionNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_partitionName
	return p
}

func (*PartitionNameContext) IsPartitionNameContext() {}

func NewPartitionNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionNameContext {
	var p = new(PartitionNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_partitionName

	return p
}

func (s *PartitionNameContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionNameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *PartitionNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartitionNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterPartitionName(s)
	}
}

func (s *PartitionNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitPartitionName(s)
	}
}

func (s *PartitionNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitPartitionName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) PartitionName() (localctx IPartitionNameContext) {
	this := p
	_ = this

	localctx = NewPartitionNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 316, MySQLStatementParserRULE_partitionName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2505)
		p.Identifier()
	}

	return localctx
}

// IIdentifierListContext is an interface to support dynamic dispatch.
type IIdentifierListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierListContext differentiates from other interfaces.
	IsIdentifierListContext()
}

type IdentifierListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierListContext() *IdentifierListContext {
	var p = new(IdentifierListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_identifierList
	return p
}

func (*IdentifierListContext) IsIdentifierListContext() {}

func NewIdentifierListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierListContext {
	var p = new(IdentifierListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_identifierList

	return p
}

func (s *IdentifierListContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierListContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *IdentifierListContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *IdentifierListContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *IdentifierListContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *IdentifierListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterIdentifierList(s)
	}
}

func (s *IdentifierListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitIdentifierList(s)
	}
}

func (s *IdentifierListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitIdentifierList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) IdentifierList() (localctx IIdentifierListContext) {
	this := p
	_ = this

	localctx = NewIdentifierListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 318, MySQLStatementParserRULE_identifierList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2507)
		p.Identifier()
	}
	p.SetState(2512)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(2508)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(2509)
			p.Identifier()
		}

		p.SetState(2514)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAllOrPartitionNameListContext is an interface to support dynamic dispatch.
type IAllOrPartitionNameListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAllOrPartitionNameListContext differentiates from other interfaces.
	IsAllOrPartitionNameListContext()
}

type AllOrPartitionNameListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAllOrPartitionNameListContext() *AllOrPartitionNameListContext {
	var p = new(AllOrPartitionNameListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_allOrPartitionNameList
	return p
}

func (*AllOrPartitionNameListContext) IsAllOrPartitionNameListContext() {}

func NewAllOrPartitionNameListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AllOrPartitionNameListContext {
	var p = new(AllOrPartitionNameListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_allOrPartitionNameList

	return p
}

func (s *AllOrPartitionNameListContext) GetParser() antlr.Parser { return s.parser }

func (s *AllOrPartitionNameListContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALL, 0)
}

func (s *AllOrPartitionNameListContext) IdentifierList() IIdentifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierListContext)
}

func (s *AllOrPartitionNameListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AllOrPartitionNameListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AllOrPartitionNameListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAllOrPartitionNameList(s)
	}
}

func (s *AllOrPartitionNameListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAllOrPartitionNameList(s)
	}
}

func (s *AllOrPartitionNameListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAllOrPartitionNameList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AllOrPartitionNameList() (localctx IAllOrPartitionNameListContext) {
	this := p
	_ = this

	localctx = NewAllOrPartitionNameListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 320, MySQLStatementParserRULE_allOrPartitionNameList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2517)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserALL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2515)
			p.Match(MySQLStatementParserALL)
		}

	case MySQLStatementParserMAX, MySQLStatementParserMIN, MySQLStatementParserSUM, MySQLStatementParserCOUNT, MySQLStatementParserGROUP_CONCAT, MySQLStatementParserCAST, MySQLStatementParserPOSITION, MySQLStatementParserSUBSTRING, MySQLStatementParserSUBSTR, MySQLStatementParserEXTRACT, MySQLStatementParserTRIM, MySQLStatementParserLAST_DAY, MySQLStatementParserTRADITIONAL, MySQLStatementParserTREE, MySQLStatementParserMYSQL_ADMIN, MySQLStatementParserINSTANT, MySQLStatementParserINPLACE, MySQLStatementParserCOPY, MySQLStatementParserUL_BINARY, MySQLStatementParserAUTOCOMMIT, MySQLStatementParserINNODB, MySQLStatementParserREDO_LOG, MySQLStatementParserACCOUNT, MySQLStatementParserACTION, MySQLStatementParserACTIVE, MySQLStatementParserADMIN, MySQLStatementParserAFTER, MySQLStatementParserAGAINST, MySQLStatementParserAGGREGATE, MySQLStatementParserALGORITHM, MySQLStatementParserALWAYS, MySQLStatementParserANY, MySQLStatementParserARRAY, MySQLStatementParserASCII, MySQLStatementParserAT, MySQLStatementParserATTRIBUTE, MySQLStatementParserAUTOEXTEND_SIZE, MySQLStatementParserAUTO_INCREMENT, MySQLStatementParserAVG, MySQLStatementParserAVG_ROW_LENGTH, MySQLStatementParserBACKUP, MySQLStatementParserBEGIN, MySQLStatementParserBINLOG, MySQLStatementParserBIT, MySQLStatementParserBLOCK, MySQLStatementParserBOOL, MySQLStatementParserBOOLEAN, MySQLStatementParserBTREE, MySQLStatementParserBUCKETS, MySQLStatementParserBYTE, MySQLStatementParserCACHE, MySQLStatementParserCASCADED, MySQLStatementParserCATALOG_NAME, MySQLStatementParserCHAIN, MySQLStatementParserCHANGED, MySQLStatementParserCHANNEL, MySQLStatementParserCHARSET, MySQLStatementParserCHECKSUM, MySQLStatementParserCIPHER, MySQLStatementParserCLASS_ORIGIN, MySQLStatementParserCLIENT, MySQLStatementParserCLONE, MySQLStatementParserCLOSE, MySQLStatementParserCOALESCE, MySQLStatementParserCODE, MySQLStatementParserCOLLATION, MySQLStatementParserCOLUMNS, MySQLStatementParserCOLUMN_FORMAT, MySQLStatementParserCOLUMN_NAME, MySQLStatementParserCOMMENT, MySQLStatementParserCOMMIT, MySQLStatementParserCOMMITTED, MySQLStatementParserCOMPACT, MySQLStatementParserCOMPLETION, MySQLStatementParserCOMPONENT, MySQLStatementParserCOMPRESSED, MySQLStatementParserCOMPRESSION, MySQLStatementParserCONCURRENT, MySQLStatementParserCONNECTION, MySQLStatementParserCONSISTENT, MySQLStatementParserCONSTRAINT_CATALOG, MySQLStatementParserCONSTRAINT_NAME, MySQLStatementParserCONSTRAINT_SCHEMA, MySQLStatementParserCONTAINS, MySQLStatementParserCONTEXT, MySQLStatementParserCPU, MySQLStatementParserCURRENT, MySQLStatementParserCURSOR_NAME, MySQLStatementParserDATA, MySQLStatementParserDATAFILE, MySQLStatementParserDATE, MySQLStatementParserDATETIME, MySQLStatementParserDAY, MySQLStatementParserDEALLOCATE, MySQLStatementParserDEFAULT_AUTH, MySQLStatementParserDEFINER, MySQLStatementParserDEFINITION, MySQLStatementParserDELAY_KEY_WRITE, MySQLStatementParserDESCRIPTION, MySQLStatementParserDIAGNOSTICS, MySQLStatementParserDIRECTORY, MySQLStatementParserDISABLE, MySQLStatementParserDISCARD, MySQLStatementParserDISK, MySQLStatementParserDO, MySQLStatementParserDUMPFILE, MySQLStatementParserDUPLICATE, MySQLStatementParserDYNAMIC, MySQLStatementParserENABLE, MySQLStatementParserENCRYPTION, MySQLStatementParserEND, MySQLStatementParserENDS, MySQLStatementParserENFORCED, MySQLStatementParserENGINE, MySQLStatementParserENGINES, MySQLStatementParserENGINE_ATTRIBUTE, MySQLStatementParserENUM, MySQLStatementParserERROR, MySQLStatementParserERRORS, MySQLStatementParserESCAPE, MySQLStatementParserEVENT, MySQLStatementParserEVENTS, MySQLStatementParserEVERY, MySQLStatementParserEXCHANGE, MySQLStatementParserEXCLUDE, MySQLStatementParserEXECUTE, MySQLStatementParserEXPANSION, MySQLStatementParserEXPIRE, MySQLStatementParserEXPORT, MySQLStatementParserEXTENDED, MySQLStatementParserEXTENT_SIZE, MySQLStatementParserFAILED_LOGIN_ATTEMPTS, MySQLStatementParserFAST, MySQLStatementParserFAULTS, MySQLStatementParserFILE, MySQLStatementParserFILE_BLOCK_SIZE, MySQLStatementParserFILTER, MySQLStatementParserFIRST, MySQLStatementParserFIXED, MySQLStatementParserFLUSH, MySQLStatementParserFOLLOWING, MySQLStatementParserFOLLOWS, MySQLStatementParserFORMAT, MySQLStatementParserFOUND, MySQLStatementParserFULL, MySQLStatementParserGENERAL, MySQLStatementParserGEOMETRY, MySQLStatementParserGEOMETRYCOLLECTION, MySQLStatementParserGET_FORMAT, MySQLStatementParserGET_MASTER_PUBLIC_KEY, MySQLStatementParserGLOBAL, MySQLStatementParserGRANTS, MySQLStatementParserGROUP_REPLICATION, MySQLStatementParserHANDLER, MySQLStatementParserHASH, MySQLStatementParserHELP, MySQLStatementParserHISTOGRAM, MySQLStatementParserHISTORY, MySQLStatementParserHOST, MySQLStatementParserHOSTS, MySQLStatementParserHOUR, MySQLStatementParserIDENTIFIED, MySQLStatementParserIGNORE_SERVER_IDS, MySQLStatementParserIMPORT, MySQLStatementParserINACTIVE, MySQLStatementParserINDEXES, MySQLStatementParserINITIAL_SIZE, MySQLStatementParserINSERT_METHOD, MySQLStatementParserINSTALL, MySQLStatementParserINSTANCE, MySQLStatementParserINVISIBLE, MySQLStatementParserINVOKER, MySQLStatementParserIO, MySQLStatementParserIPC, MySQLStatementParserISOLATION, MySQLStatementParserISSUER, MySQLStatementParserJSON, MySQLStatementParserJSON_VALUE, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserLANGUAGE, MySQLStatementParserLAST, MySQLStatementParserLAST_VALUE, MySQLStatementParserLEAVES, MySQLStatementParserLESS, MySQLStatementParserLEVEL, MySQLStatementParserLINESTRING, MySQLStatementParserLIST, MySQLStatementParserLOCAL, MySQLStatementParserLOCKED, MySQLStatementParserLOCKS, MySQLStatementParserLOGFILE, MySQLStatementParserLOGS, MySQLStatementParserMASTER, MySQLStatementParserMASTER_AUTO_POSITION, MySQLStatementParserMASTER_COMPRESSION_ALGORITHM, MySQLStatementParserMASTER_CONNECT_RETRY, MySQLStatementParserMASTER_DELAY, MySQLStatementParserMASTER_HEARTBEAT_PERIOD, MySQLStatementParserMASTER_HOST, MySQLStatementParserMASTER_LOG_FILE, MySQLStatementParserMASTER_LOG_POS, MySQLStatementParserMASTER_PASSWORD, MySQLStatementParserMASTER_PORT, MySQLStatementParserMASTER_PUBLIC_KEY_PATH, MySQLStatementParserMASTER_RETRY_COUNT, MySQLStatementParserMASTER_SERVER_ID, MySQLStatementParserMASTER_SSL, MySQLStatementParserMASTER_SSL_CA, MySQLStatementParserMASTER_SSL_CAPATH, MySQLStatementParserMASTER_SSL_CERT, MySQLStatementParserMASTER_SSL_CIPHER, MySQLStatementParserMASTER_SSL_CRL, MySQLStatementParserMASTER_SSL_CRLPATH, MySQLStatementParserMASTER_SSL_KEY, MySQLStatementParserMASTER_TLS_CIPHERSUITES, MySQLStatementParserMASTER_TLS_VERSION, MySQLStatementParserMASTER_USER, MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL, MySQLStatementParserMAX_CONNECTIONS_PER_HOUR, MySQLStatementParserMAX_QUERIES_PER_HOUR, MySQLStatementParserMAX_ROWS, MySQLStatementParserMAX_SIZE, MySQLStatementParserMAX_UPDATES_PER_HOUR, MySQLStatementParserMAX_USER_CONNECTIONS, MySQLStatementParserMEDIUM, MySQLStatementParserMEMBER, MySQLStatementParserMEMORY, MySQLStatementParserMERGE, MySQLStatementParserMESSAGE_TEXT, MySQLStatementParserMICROSECOND, MySQLStatementParserMIGRATE, MySQLStatementParserMINUTE, MySQLStatementParserMIN_ROWS, MySQLStatementParserMODE, MySQLStatementParserMODIFY, MySQLStatementParserMONTH, MySQLStatementParserMULTILINESTRING, MySQLStatementParserMULTIPOINT, MySQLStatementParserMULTIPOLYGON, MySQLStatementParserMUTEX, MySQLStatementParserMYSQL_ERRNO, MySQLStatementParserNAME, MySQLStatementParserNAMES, MySQLStatementParserNATIONAL, MySQLStatementParserNCHAR, MySQLStatementParserNDBCLUSTER, MySQLStatementParserNESTED, MySQLStatementParserNETWORK_NAMESPACE, MySQLStatementParserNEVER, MySQLStatementParserNEW, MySQLStatementParserNEXT, MySQLStatementParserNO, MySQLStatementParserNODEGROUP, MySQLStatementParserNONE, MySQLStatementParserNOWAIT, MySQLStatementParserNO_WAIT, MySQLStatementParserNULLS, MySQLStatementParserNUMBER, MySQLStatementParserNVARCHAR, MySQLStatementParserOFF, MySQLStatementParserOFFSET, MySQLStatementParserOJ, MySQLStatementParserOLD, MySQLStatementParserONE, MySQLStatementParserONLY, MySQLStatementParserOPEN, MySQLStatementParserOPTIONAL, MySQLStatementParserOPTIONS, MySQLStatementParserORDINALITY, MySQLStatementParserORGANIZATION, MySQLStatementParserOTHERS, MySQLStatementParserOWNER, MySQLStatementParserPACK_KEYS, MySQLStatementParserPAGE, MySQLStatementParserPARSER, MySQLStatementParserPARTIAL, MySQLStatementParserPARTITIONING, MySQLStatementParserPARTITIONS, MySQLStatementParserPASSWORD, MySQLStatementParserPASSWORD_LOCK_TIME, MySQLStatementParserPATH, MySQLStatementParserPERSIST, MySQLStatementParserPERSIST_ONLY, MySQLStatementParserPHASE, MySQLStatementParserPLUGIN, MySQLStatementParserPLUGINS, MySQLStatementParserPLUGIN_DIR, MySQLStatementParserPOINT, MySQLStatementParserPOLYGON, MySQLStatementParserPORT, MySQLStatementParserPRECEDES, MySQLStatementParserPRECEDING, MySQLStatementParserPREPARE, MySQLStatementParserPRESERVE, MySQLStatementParserPREV, MySQLStatementParserPRIVILEGES, MySQLStatementParserPRIVILEGE_CHECKS_USER, MySQLStatementParserPROCESS, MySQLStatementParserPROCESSLIST, MySQLStatementParserPROFILE, MySQLStatementParserPROFILES, MySQLStatementParserPROXY, MySQLStatementParserQUARTER, MySQLStatementParserQUERY, MySQLStatementParserQUICK, MySQLStatementParserRANDOM, MySQLStatementParserREAD_ONLY, MySQLStatementParserREBUILD, MySQLStatementParserRECOVER, MySQLStatementParserREDO_BUFFER_SIZE, MySQLStatementParserREDUNDANT, MySQLStatementParserREFERENCE, MySQLStatementParserRELAY, MySQLStatementParserRELAYLOG, MySQLStatementParserRELAY_LOG_FILE, MySQLStatementParserRELAY_LOG_POS, MySQLStatementParserRELAY_THREAD, MySQLStatementParserRELOAD, MySQLStatementParserREMOVE, MySQLStatementParserREORGANIZE, MySQLStatementParserREPAIR, MySQLStatementParserREPEATABLE, MySQLStatementParserREPLICATE_DO_DB, MySQLStatementParserREPLICATE_DO_TABLE, MySQLStatementParserREPLICATE_IGNORE_DB, MySQLStatementParserREPLICATE_IGNORE_TABLE, MySQLStatementParserREPLICATE_REWRITE_DB, MySQLStatementParserREPLICATE_WILD_DO_TABLE, MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE, MySQLStatementParserREPLICATION, MySQLStatementParserREQUIRE_ROW_FORMAT, MySQLStatementParserRESET, MySQLStatementParserRESOURCE, MySQLStatementParserRESPECT, MySQLStatementParserRESTART, MySQLStatementParserRESTORE, MySQLStatementParserRESUME, MySQLStatementParserRETAIN, MySQLStatementParserRETURNED_SQLSTATE, MySQLStatementParserRETURNING, MySQLStatementParserRETURNS, MySQLStatementParserREUSE, MySQLStatementParserREVERSE, MySQLStatementParserROLE, MySQLStatementParserROLLBACK, MySQLStatementParserROLLUP, MySQLStatementParserROTATE, MySQLStatementParserROUTINE, MySQLStatementParserROW_COUNT, MySQLStatementParserROW_FORMAT, MySQLStatementParserRTREE, MySQLStatementParserSAVEPOINT, MySQLStatementParserSCHEDULE, MySQLStatementParserSCHEMA_NAME, MySQLStatementParserSECOND, MySQLStatementParserSECONDARY, MySQLStatementParserSECONDARY_ENGINE, MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, MySQLStatementParserSECONDARY_LOAD, MySQLStatementParserSECONDARY_UNLOAD, MySQLStatementParserSECURITY, MySQLStatementParserSERIAL, MySQLStatementParserSERIALIZABLE, MySQLStatementParserSERVER, MySQLStatementParserSESSION, MySQLStatementParserSHARE, MySQLStatementParserSHUTDOWN, MySQLStatementParserSIGNED, MySQLStatementParserSIMPLE, MySQLStatementParserSLAVE, MySQLStatementParserSLOW, MySQLStatementParserSNAPSHOT, MySQLStatementParserSOCKET, MySQLStatementParserSONAME, MySQLStatementParserSOUNDS, MySQLStatementParserSOURCE, MySQLStatementParserSQL_AFTER_GTIDS, MySQLStatementParserSQL_AFTER_MTS_GAPS, MySQLStatementParserSQL_BEFORE_GTIDS, MySQLStatementParserSQL_BUFFER_RESULT, MySQLStatementParserSQL_NO_CACHE, MySQLStatementParserSQL_THREAD, MySQLStatementParserSRID, MySQLStatementParserSTACKED, MySQLStatementParserSTART, MySQLStatementParserSTARTS, MySQLStatementParserSTATS_AUTO_RECALC, MySQLStatementParserSTATS_PERSISTENT, MySQLStatementParserSTATS_SAMPLE_PAGES, MySQLStatementParserSTATUS, MySQLStatementParserSTOP, MySQLStatementParserSTORAGE, MySQLStatementParserSTREAM, MySQLStatementParserSTRING, MySQLStatementParserSUBCLASS_ORIGIN, MySQLStatementParserSUBJECT, MySQLStatementParserSUBPARTITION, MySQLStatementParserSUBPARTITIONS, MySQLStatementParserSUPER, MySQLStatementParserSUSPEND, MySQLStatementParserSWAPS, MySQLStatementParserSWITCHES, MySQLStatementParserTABLES, MySQLStatementParserTABLESPACE, MySQLStatementParserTABLE_CHECKSUM, MySQLStatementParserTABLE_NAME, MySQLStatementParserTEMPORARY, MySQLStatementParserTEMPTABLE, MySQLStatementParserTEXT, MySQLStatementParserTHAN, MySQLStatementParserTHREAD_PRIORITY, MySQLStatementParserTIES, MySQLStatementParserTIME, MySQLStatementParserTIMESTAMP, MySQLStatementParserTIMESTAMP_ADD, MySQLStatementParserTIMESTAMP_DIFF, MySQLStatementParserTLS, MySQLStatementParserTRANSACTION, MySQLStatementParserTRIGGERS, MySQLStatementParserTRUNCATE, MySQLStatementParserTYPE, MySQLStatementParserTYPES, MySQLStatementParserUNBOUNDED, MySQLStatementParserUNCOMMITTED, MySQLStatementParserUNDEFINED, MySQLStatementParserUNDOFILE, MySQLStatementParserUNDO_BUFFER_SIZE, MySQLStatementParserUNICODE, MySQLStatementParserUNINSTALL, MySQLStatementParserUNKNOWN, MySQLStatementParserUNTIL, MySQLStatementParserUPGRADE, MySQLStatementParserUSER, MySQLStatementParserUSER_RESOURCES, MySQLStatementParserUSE_FRM, MySQLStatementParserVALIDATION, MySQLStatementParserVALUE, MySQLStatementParserVARIABLES, MySQLStatementParserVCPU, MySQLStatementParserVIEW, MySQLStatementParserVISIBLE, MySQLStatementParserWAIT, MySQLStatementParserWARNINGS, MySQLStatementParserWEEK, MySQLStatementParserWEIGHT_STRING, MySQLStatementParserWITHOUT, MySQLStatementParserWORK, MySQLStatementParserWRAPPER, MySQLStatementParserX509, MySQLStatementParserXA, MySQLStatementParserXID, MySQLStatementParserXML, MySQLStatementParserYEAR, MySQLStatementParserIDENTIFIER_, MySQLStatementParserDOUBLE_QUOTED_TEXT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2516)
			p.IdentifierList()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITriggerEventContext is an interface to support dynamic dispatch.
type ITriggerEventContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTriggerEventContext differentiates from other interfaces.
	IsTriggerEventContext()
}

type TriggerEventContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTriggerEventContext() *TriggerEventContext {
	var p = new(TriggerEventContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_triggerEvent
	return p
}

func (*TriggerEventContext) IsTriggerEventContext() {}

func NewTriggerEventContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TriggerEventContext {
	var p = new(TriggerEventContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_triggerEvent

	return p
}

func (s *TriggerEventContext) GetParser() antlr.Parser { return s.parser }

func (s *TriggerEventContext) INSERT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINSERT, 0)
}

func (s *TriggerEventContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUPDATE, 0)
}

func (s *TriggerEventContext) DELETE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDELETE, 0)
}

func (s *TriggerEventContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TriggerEventContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TriggerEventContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTriggerEvent(s)
	}
}

func (s *TriggerEventContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTriggerEvent(s)
	}
}

func (s *TriggerEventContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTriggerEvent(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TriggerEvent() (localctx ITriggerEventContext) {
	this := p
	_ = this

	localctx = NewTriggerEventContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 322, MySQLStatementParserRULE_triggerEvent)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2519)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserDELETE || _la == MySQLStatementParserINSERT || _la == MySQLStatementParserUPDATE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ITriggerOrderContext is an interface to support dynamic dispatch.
type ITriggerOrderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTriggerOrderContext differentiates from other interfaces.
	IsTriggerOrderContext()
}

type TriggerOrderContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTriggerOrderContext() *TriggerOrderContext {
	var p = new(TriggerOrderContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_triggerOrder
	return p
}

func (*TriggerOrderContext) IsTriggerOrderContext() {}

func NewTriggerOrderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TriggerOrderContext {
	var p = new(TriggerOrderContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_triggerOrder

	return p
}

func (s *TriggerOrderContext) GetParser() antlr.Parser { return s.parser }

func (s *TriggerOrderContext) TriggerName() ITriggerNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITriggerNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITriggerNameContext)
}

func (s *TriggerOrderContext) FOLLOWS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOLLOWS, 0)
}

func (s *TriggerOrderContext) PRECEDES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPRECEDES, 0)
}

func (s *TriggerOrderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TriggerOrderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TriggerOrderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTriggerOrder(s)
	}
}

func (s *TriggerOrderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTriggerOrder(s)
	}
}

func (s *TriggerOrderContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTriggerOrder(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TriggerOrder() (localctx ITriggerOrderContext) {
	this := p
	_ = this

	localctx = NewTriggerOrderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 324, MySQLStatementParserRULE_triggerOrder)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2521)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserFOLLOWS || _la == MySQLStatementParserPRECEDES) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(2522)
		p.TriggerName()
	}

	return localctx
}

// IExprContext is an interface to support dynamic dispatch.
type IExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExprContext differentiates from other interfaces.
	IsExprContext()
}

type ExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprContext() *ExprContext {
	var p = new(ExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_expr
	return p
}

func (*ExprContext) IsExprContext() {}

func NewExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprContext {
	var p = new(ExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_expr

	return p
}

func (s *ExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprContext) BooleanPrimary() IBooleanPrimaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanPrimaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBooleanPrimaryContext)
}

func (s *ExprContext) NotOperator() INotOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INotOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INotOperatorContext)
}

func (s *ExprContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *ExprContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprContext) AndOperator() IAndOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAndOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAndOperatorContext)
}

func (s *ExprContext) OrOperator() IOrOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrOperatorContext)
}

func (s *ExprContext) XOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserXOR, 0)
}

func (s *ExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterExpr(s)
	}
}

func (s *ExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitExpr(s)
	}
}

func (s *ExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Expr() (localctx IExprContext) {
	return p.expr(0)
}

func (p *MySQLStatementParser) expr(_p int) (localctx IExprContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 326
	p.EnterRecursionRule(localctx, 326, MySQLStatementParserRULE_expr, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2529)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 216, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2525)
			p.booleanPrimary(0)
		}

	case 2:
		{
			p.SetState(2526)
			p.NotOperator()
		}
		{
			p.SetState(2527)
			p.expr(1)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2544)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 218, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2542)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 217, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MySQLStatementParserRULE_expr)
				p.SetState(2531)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(2532)
					p.AndOperator()
				}
				{
					p.SetState(2533)
					p.expr(5)
				}

			case 2:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MySQLStatementParserRULE_expr)
				p.SetState(2535)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(2536)
					p.OrOperator()
				}
				{
					p.SetState(2537)
					p.expr(4)
				}

			case 3:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MySQLStatementParserRULE_expr)
				p.SetState(2539)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(2540)
					p.Match(MySQLStatementParserXOR)
				}
				{
					p.SetState(2541)
					p.expr(3)
				}

			}

		}
		p.SetState(2546)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 218, p.GetParserRuleContext())
	}

	return localctx
}

// IAndOperatorContext is an interface to support dynamic dispatch.
type IAndOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAndOperatorContext differentiates from other interfaces.
	IsAndOperatorContext()
}

type AndOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAndOperatorContext() *AndOperatorContext {
	var p = new(AndOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_andOperator
	return p
}

func (*AndOperatorContext) IsAndOperatorContext() {}

func NewAndOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AndOperatorContext {
	var p = new(AndOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_andOperator

	return p
}

func (s *AndOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *AndOperatorContext) AND() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAND, 0)
}

func (s *AndOperatorContext) AND_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAND_, 0)
}

func (s *AndOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AndOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AndOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAndOperator(s)
	}
}

func (s *AndOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAndOperator(s)
	}
}

func (s *AndOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAndOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AndOperator() (localctx IAndOperatorContext) {
	this := p
	_ = this

	localctx = NewAndOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 328, MySQLStatementParserRULE_andOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2547)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserAND_ || _la == MySQLStatementParserAND) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IOrOperatorContext is an interface to support dynamic dispatch.
type IOrOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrOperatorContext differentiates from other interfaces.
	IsOrOperatorContext()
}

type OrOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrOperatorContext() *OrOperatorContext {
	var p = new(OrOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_orOperator
	return p
}

func (*OrOperatorContext) IsOrOperatorContext() {}

func NewOrOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrOperatorContext {
	var p = new(OrOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_orOperator

	return p
}

func (s *OrOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *OrOperatorContext) OR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOR, 0)
}

func (s *OrOperatorContext) OR_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOR_, 0)
}

func (s *OrOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterOrOperator(s)
	}
}

func (s *OrOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitOrOperator(s)
	}
}

func (s *OrOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitOrOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) OrOperator() (localctx IOrOperatorContext) {
	this := p
	_ = this

	localctx = NewOrOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 330, MySQLStatementParserRULE_orOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2549)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserOR_ || _la == MySQLStatementParserOR) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// INotOperatorContext is an interface to support dynamic dispatch.
type INotOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNotOperatorContext differentiates from other interfaces.
	IsNotOperatorContext()
}

type NotOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNotOperatorContext() *NotOperatorContext {
	var p = new(NotOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_notOperator
	return p
}

func (*NotOperatorContext) IsNotOperatorContext() {}

func NewNotOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NotOperatorContext {
	var p = new(NotOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_notOperator

	return p
}

func (s *NotOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *NotOperatorContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNOT, 0)
}

func (s *NotOperatorContext) NOT_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNOT_, 0)
}

func (s *NotOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NotOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NotOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterNotOperator(s)
	}
}

func (s *NotOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitNotOperator(s)
	}
}

func (s *NotOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitNotOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) NotOperator() (localctx INotOperatorContext) {
	this := p
	_ = this

	localctx = NewNotOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 332, MySQLStatementParserRULE_notOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2551)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserNOT_ || _la == MySQLStatementParserNOT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IBooleanPrimaryContext is an interface to support dynamic dispatch.
type IBooleanPrimaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBooleanPrimaryContext differentiates from other interfaces.
	IsBooleanPrimaryContext()
}

type BooleanPrimaryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBooleanPrimaryContext() *BooleanPrimaryContext {
	var p = new(BooleanPrimaryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_booleanPrimary
	return p
}

func (*BooleanPrimaryContext) IsBooleanPrimaryContext() {}

func NewBooleanPrimaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BooleanPrimaryContext {
	var p = new(BooleanPrimaryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_booleanPrimary

	return p
}

func (s *BooleanPrimaryContext) GetParser() antlr.Parser { return s.parser }

func (s *BooleanPrimaryContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *BooleanPrimaryContext) BooleanPrimary() IBooleanPrimaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanPrimaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBooleanPrimaryContext)
}

func (s *BooleanPrimaryContext) IS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIS, 0)
}

func (s *BooleanPrimaryContext) TRUE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTRUE, 0)
}

func (s *BooleanPrimaryContext) FALSE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFALSE, 0)
}

func (s *BooleanPrimaryContext) UNKNOWN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNKNOWN, 0)
}

func (s *BooleanPrimaryContext) NULL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNULL, 0)
}

func (s *BooleanPrimaryContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNOT, 0)
}

func (s *BooleanPrimaryContext) SAFE_EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSAFE_EQ_, 0)
}

func (s *BooleanPrimaryContext) ComparisonOperator() IComparisonOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparisonOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparisonOperatorContext)
}

func (s *BooleanPrimaryContext) Subquery() ISubqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubqueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubqueryContext)
}

func (s *BooleanPrimaryContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALL, 0)
}

func (s *BooleanPrimaryContext) ANY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserANY, 0)
}

func (s *BooleanPrimaryContext) AssignmentOperator() IAssignmentOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentOperatorContext)
}

func (s *BooleanPrimaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BooleanPrimaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BooleanPrimaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterBooleanPrimary(s)
	}
}

func (s *BooleanPrimaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitBooleanPrimary(s)
	}
}

func (s *BooleanPrimaryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitBooleanPrimary(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) BooleanPrimary() (localctx IBooleanPrimaryContext) {
	return p.booleanPrimary(0)
}

func (p *MySQLStatementParser) booleanPrimary(_p int) (localctx IBooleanPrimaryContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBooleanPrimaryContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBooleanPrimaryContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 334
	p.EnterRecursionRule(localctx, 334, MySQLStatementParserRULE_booleanPrimary, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2554)
		p.Predicate()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2580)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 221, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2578)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 220, p.GetParserRuleContext()) {
			case 1:
				localctx = NewBooleanPrimaryContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MySQLStatementParserRULE_booleanPrimary)
				p.SetState(2556)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(2557)
					p.Match(MySQLStatementParserIS)
				}
				p.SetState(2559)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySQLStatementParserNOT {
					{
						p.SetState(2558)
						p.Match(MySQLStatementParserNOT)
					}

				}
				{
					p.SetState(2561)
					_la = p.GetTokenStream().LA(1)

					if !(_la == MySQLStatementParserFALSE || _la == MySQLStatementParserNULL || _la == MySQLStatementParserTRUE || _la == MySQLStatementParserUNKNOWN) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			case 2:
				localctx = NewBooleanPrimaryContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MySQLStatementParserRULE_booleanPrimary)
				p.SetState(2562)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(2563)
					p.Match(MySQLStatementParserSAFE_EQ_)
				}
				{
					p.SetState(2564)
					p.Predicate()
				}

			case 3:
				localctx = NewBooleanPrimaryContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MySQLStatementParserRULE_booleanPrimary)
				p.SetState(2565)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(2566)
					p.ComparisonOperator()
				}
				{
					p.SetState(2567)
					p.Predicate()
				}

			case 4:
				localctx = NewBooleanPrimaryContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MySQLStatementParserRULE_booleanPrimary)
				p.SetState(2569)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(2570)
					p.ComparisonOperator()
				}
				{
					p.SetState(2571)
					_la = p.GetTokenStream().LA(1)

					if !(_la == MySQLStatementParserALL || _la == MySQLStatementParserANY) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(2572)
					p.Subquery()
				}

			case 5:
				localctx = NewBooleanPrimaryContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MySQLStatementParserRULE_booleanPrimary)
				p.SetState(2574)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(2575)
					p.AssignmentOperator()
				}
				{
					p.SetState(2576)
					p.Predicate()
				}

			}

		}
		p.SetState(2582)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 221, p.GetParserRuleContext())
	}

	return localctx
}

// IAssignmentOperatorContext is an interface to support dynamic dispatch.
type IAssignmentOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentOperatorContext differentiates from other interfaces.
	IsAssignmentOperatorContext()
}

type AssignmentOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentOperatorContext() *AssignmentOperatorContext {
	var p = new(AssignmentOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_assignmentOperator
	return p
}

func (*AssignmentOperatorContext) IsAssignmentOperatorContext() {}

func NewAssignmentOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentOperatorContext {
	var p = new(AssignmentOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_assignmentOperator

	return p
}

func (s *AssignmentOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentOperatorContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *AssignmentOperatorContext) ASSIGNMENT_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserASSIGNMENT_, 0)
}

func (s *AssignmentOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAssignmentOperator(s)
	}
}

func (s *AssignmentOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAssignmentOperator(s)
	}
}

func (s *AssignmentOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAssignmentOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AssignmentOperator() (localctx IAssignmentOperatorContext) {
	this := p
	_ = this

	localctx = NewAssignmentOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 336, MySQLStatementParserRULE_assignmentOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2583)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserEQ_ || _la == MySQLStatementParserASSIGNMENT_) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IComparisonOperatorContext is an interface to support dynamic dispatch.
type IComparisonOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComparisonOperatorContext differentiates from other interfaces.
	IsComparisonOperatorContext()
}

type ComparisonOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComparisonOperatorContext() *ComparisonOperatorContext {
	var p = new(ComparisonOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_comparisonOperator
	return p
}

func (*ComparisonOperatorContext) IsComparisonOperatorContext() {}

func NewComparisonOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ComparisonOperatorContext {
	var p = new(ComparisonOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_comparisonOperator

	return p
}

func (s *ComparisonOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *ComparisonOperatorContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *ComparisonOperatorContext) GTE_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGTE_, 0)
}

func (s *ComparisonOperatorContext) GT_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGT_, 0)
}

func (s *ComparisonOperatorContext) LTE_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLTE_, 0)
}

func (s *ComparisonOperatorContext) LT_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLT_, 0)
}

func (s *ComparisonOperatorContext) NEQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNEQ_, 0)
}

func (s *ComparisonOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComparisonOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ComparisonOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterComparisonOperator(s)
	}
}

func (s *ComparisonOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitComparisonOperator(s)
	}
}

func (s *ComparisonOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitComparisonOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ComparisonOperator() (localctx IComparisonOperatorContext) {
	this := p
	_ = this

	localctx = NewComparisonOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 338, MySQLStatementParserRULE_comparisonOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2585)
		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MySQLStatementParserEQ_)|(1<<MySQLStatementParserNEQ_)|(1<<MySQLStatementParserGT_)|(1<<MySQLStatementParserGTE_)|(1<<MySQLStatementParserLT_)|(1<<MySQLStatementParserLTE_))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IPredicateContext is an interface to support dynamic dispatch.
type IPredicateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPredicateContext differentiates from other interfaces.
	IsPredicateContext()
}

type PredicateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPredicateContext() *PredicateContext {
	var p = new(PredicateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_predicate
	return p
}

func (*PredicateContext) IsPredicateContext() {}

func NewPredicateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PredicateContext {
	var p = new(PredicateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_predicate

	return p
}

func (s *PredicateContext) GetParser() antlr.Parser { return s.parser }

func (s *PredicateContext) AllBitExpr() []IBitExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBitExprContext)(nil)).Elem())
	var tst = make([]IBitExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBitExprContext)
		}
	}

	return tst
}

func (s *PredicateContext) BitExpr(i int) IBitExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBitExprContext)
}

func (s *PredicateContext) IN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIN, 0)
}

func (s *PredicateContext) Subquery() ISubqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubqueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubqueryContext)
}

func (s *PredicateContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNOT, 0)
}

func (s *PredicateContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *PredicateContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *PredicateContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *PredicateContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *PredicateContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *PredicateContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *PredicateContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBETWEEN, 0)
}

func (s *PredicateContext) AND() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAND, 0)
}

func (s *PredicateContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *PredicateContext) SOUNDS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSOUNDS, 0)
}

func (s *PredicateContext) LIKE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLIKE, 0)
}

func (s *PredicateContext) AllSimpleExpr() []ISimpleExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISimpleExprContext)(nil)).Elem())
	var tst = make([]ISimpleExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISimpleExprContext)
		}
	}

	return tst
}

func (s *PredicateContext) SimpleExpr(i int) ISimpleExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISimpleExprContext)
}

func (s *PredicateContext) ESCAPE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserESCAPE, 0)
}

func (s *PredicateContext) REGEXP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREGEXP, 0)
}

func (s *PredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PredicateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterPredicate(s)
	}
}

func (s *PredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitPredicate(s)
	}
}

func (s *PredicateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitPredicate(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Predicate() (localctx IPredicateContext) {
	this := p
	_ = this

	localctx = NewPredicateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 340, MySQLStatementParserRULE_predicate)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2642)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 229, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2587)
			p.bitExpr(0)
		}
		p.SetState(2589)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserNOT {
			{
				p.SetState(2588)
				p.Match(MySQLStatementParserNOT)
			}

		}
		{
			p.SetState(2591)
			p.Match(MySQLStatementParserIN)
		}
		{
			p.SetState(2592)
			p.Subquery()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2594)
			p.bitExpr(0)
		}
		p.SetState(2596)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserNOT {
			{
				p.SetState(2595)
				p.Match(MySQLStatementParserNOT)
			}

		}
		{
			p.SetState(2598)
			p.Match(MySQLStatementParserIN)
		}
		{
			p.SetState(2599)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(2600)
			p.expr(0)
		}
		p.SetState(2605)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(2601)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(2602)
				p.expr(0)
			}

			p.SetState(2607)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2608)
			p.Match(MySQLStatementParserRP_)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2610)
			p.bitExpr(0)
		}
		p.SetState(2612)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserNOT {
			{
				p.SetState(2611)
				p.Match(MySQLStatementParserNOT)
			}

		}
		{
			p.SetState(2614)
			p.Match(MySQLStatementParserBETWEEN)
		}
		{
			p.SetState(2615)
			p.bitExpr(0)
		}
		{
			p.SetState(2616)
			p.Match(MySQLStatementParserAND)
		}
		{
			p.SetState(2617)
			p.Predicate()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2619)
			p.bitExpr(0)
		}
		{
			p.SetState(2620)
			p.Match(MySQLStatementParserSOUNDS)
		}
		{
			p.SetState(2621)
			p.Match(MySQLStatementParserLIKE)
		}
		{
			p.SetState(2622)
			p.bitExpr(0)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2624)
			p.bitExpr(0)
		}
		p.SetState(2626)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserNOT {
			{
				p.SetState(2625)
				p.Match(MySQLStatementParserNOT)
			}

		}
		{
			p.SetState(2628)
			p.Match(MySQLStatementParserLIKE)
		}
		{
			p.SetState(2629)
			p.simpleExpr(0)
		}
		p.SetState(2632)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 227, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2630)
				p.Match(MySQLStatementParserESCAPE)
			}
			{
				p.SetState(2631)
				p.simpleExpr(0)
			}

		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2634)
			p.bitExpr(0)
		}
		p.SetState(2636)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserNOT {
			{
				p.SetState(2635)
				p.Match(MySQLStatementParserNOT)
			}

		}
		{
			p.SetState(2638)
			p.Match(MySQLStatementParserREGEXP)
		}
		{
			p.SetState(2639)
			p.bitExpr(0)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2641)
			p.bitExpr(0)
		}

	}

	return localctx
}

// IBitExprContext is an interface to support dynamic dispatch.
type IBitExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitExprContext differentiates from other interfaces.
	IsBitExprContext()
}

type BitExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitExprContext() *BitExprContext {
	var p = new(BitExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_bitExpr
	return p
}

func (*BitExprContext) IsBitExprContext() {}

func NewBitExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitExprContext {
	var p = new(BitExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_bitExpr

	return p
}

func (s *BitExprContext) GetParser() antlr.Parser { return s.parser }

func (s *BitExprContext) SimpleExpr() ISimpleExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleExprContext)
}

func (s *BitExprContext) AllBitExpr() []IBitExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBitExprContext)(nil)).Elem())
	var tst = make([]IBitExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBitExprContext)
		}
	}

	return tst
}

func (s *BitExprContext) BitExpr(i int) IBitExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBitExprContext)
}

func (s *BitExprContext) VERTICAL_BAR_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVERTICAL_BAR_, 0)
}

func (s *BitExprContext) AMPERSAND_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAMPERSAND_, 0)
}

func (s *BitExprContext) SIGNED_LEFT_SHIFT_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSIGNED_LEFT_SHIFT_, 0)
}

func (s *BitExprContext) SIGNED_RIGHT_SHIFT_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSIGNED_RIGHT_SHIFT_, 0)
}

func (s *BitExprContext) PLUS_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPLUS_, 0)
}

func (s *BitExprContext) MINUS_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMINUS_, 0)
}

func (s *BitExprContext) ASTERISK_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserASTERISK_, 0)
}

func (s *BitExprContext) SLASH_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSLASH_, 0)
}

func (s *BitExprContext) DIV() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDIV, 0)
}

func (s *BitExprContext) MOD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMOD, 0)
}

func (s *BitExprContext) MOD_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMOD_, 0)
}

func (s *BitExprContext) CARET_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCARET_, 0)
}

func (s *BitExprContext) IntervalExpression() IIntervalExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntervalExpressionContext)
}

func (s *BitExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterBitExpr(s)
	}
}

func (s *BitExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitBitExpr(s)
	}
}

func (s *BitExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitBitExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) BitExpr() (localctx IBitExprContext) {
	return p.bitExpr(0)
}

func (p *MySQLStatementParser) bitExpr(_p int) (localctx IBitExprContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBitExprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBitExprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 342
	p.EnterRecursionRule(localctx, 342, MySQLStatementParserRULE_bitExpr, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2645)
		p.simpleExpr(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2691)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 231, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2689)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 230, p.GetParserRuleContext()) {
			case 1:
				localctx = NewBitExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MySQLStatementParserRULE_bitExpr)
				p.SetState(2647)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
				}
				{
					p.SetState(2648)
					p.Match(MySQLStatementParserVERTICAL_BAR_)
				}
				{
					p.SetState(2649)
					p.bitExpr(16)
				}

			case 2:
				localctx = NewBitExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MySQLStatementParserRULE_bitExpr)
				p.SetState(2650)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
				}
				{
					p.SetState(2651)
					p.Match(MySQLStatementParserAMPERSAND_)
				}
				{
					p.SetState(2652)
					p.bitExpr(15)
				}

			case 3:
				localctx = NewBitExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MySQLStatementParserRULE_bitExpr)
				p.SetState(2653)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
				}
				{
					p.SetState(2654)
					p.Match(MySQLStatementParserSIGNED_LEFT_SHIFT_)
				}
				{
					p.SetState(2655)
					p.bitExpr(14)
				}

			case 4:
				localctx = NewBitExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MySQLStatementParserRULE_bitExpr)
				p.SetState(2656)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(2657)
					p.Match(MySQLStatementParserSIGNED_RIGHT_SHIFT_)
				}
				{
					p.SetState(2658)
					p.bitExpr(13)
				}

			case 5:
				localctx = NewBitExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MySQLStatementParserRULE_bitExpr)
				p.SetState(2659)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
				}
				{
					p.SetState(2660)
					p.Match(MySQLStatementParserPLUS_)
				}
				{
					p.SetState(2661)
					p.bitExpr(12)
				}

			case 6:
				localctx = NewBitExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MySQLStatementParserRULE_bitExpr)
				p.SetState(2662)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				{
					p.SetState(2663)
					p.Match(MySQLStatementParserMINUS_)
				}
				{
					p.SetState(2664)
					p.bitExpr(11)
				}

			case 7:
				localctx = NewBitExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MySQLStatementParserRULE_bitExpr)
				p.SetState(2665)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(2666)
					p.Match(MySQLStatementParserASTERISK_)
				}
				{
					p.SetState(2667)
					p.bitExpr(10)
				}

			case 8:
				localctx = NewBitExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MySQLStatementParserRULE_bitExpr)
				p.SetState(2668)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(2669)
					p.Match(MySQLStatementParserSLASH_)
				}
				{
					p.SetState(2670)
					p.bitExpr(9)
				}

			case 9:
				localctx = NewBitExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MySQLStatementParserRULE_bitExpr)
				p.SetState(2671)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(2672)
					p.Match(MySQLStatementParserDIV)
				}
				{
					p.SetState(2673)
					p.bitExpr(8)
				}

			case 10:
				localctx = NewBitExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MySQLStatementParserRULE_bitExpr)
				p.SetState(2674)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(2675)
					p.Match(MySQLStatementParserMOD)
				}
				{
					p.SetState(2676)
					p.bitExpr(7)
				}

			case 11:
				localctx = NewBitExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MySQLStatementParserRULE_bitExpr)
				p.SetState(2677)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(2678)
					p.Match(MySQLStatementParserMOD_)
				}
				{
					p.SetState(2679)
					p.bitExpr(6)
				}

			case 12:
				localctx = NewBitExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MySQLStatementParserRULE_bitExpr)
				p.SetState(2680)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(2681)
					p.Match(MySQLStatementParserCARET_)
				}
				{
					p.SetState(2682)
					p.bitExpr(5)
				}

			case 13:
				localctx = NewBitExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MySQLStatementParserRULE_bitExpr)
				p.SetState(2683)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(2684)
					p.Match(MySQLStatementParserPLUS_)
				}
				{
					p.SetState(2685)
					p.IntervalExpression()
				}

			case 14:
				localctx = NewBitExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MySQLStatementParserRULE_bitExpr)
				p.SetState(2686)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(2687)
					p.Match(MySQLStatementParserMINUS_)
				}
				{
					p.SetState(2688)
					p.IntervalExpression()
				}

			}

		}
		p.SetState(2693)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 231, p.GetParserRuleContext())
	}

	return localctx
}

// ISimpleExprContext is an interface to support dynamic dispatch.
type ISimpleExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimpleExprContext differentiates from other interfaces.
	IsSimpleExprContext()
}

type SimpleExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleExprContext() *SimpleExprContext {
	var p = new(SimpleExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_simpleExpr
	return p
}

func (*SimpleExprContext) IsSimpleExprContext() {}

func NewSimpleExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleExprContext {
	var p = new(SimpleExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_simpleExpr

	return p
}

func (s *SimpleExprContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleExprContext) FunctionCall() IFunctionCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionCallContext)
}

func (s *SimpleExprContext) ParameterMarker() IParameterMarkerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterMarkerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterMarkerContext)
}

func (s *SimpleExprContext) Literals() ILiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteralsContext)
}

func (s *SimpleExprContext) ColumnRef() IColumnRefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnRefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnRefContext)
}

func (s *SimpleExprContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *SimpleExprContext) AllSimpleExpr() []ISimpleExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISimpleExprContext)(nil)).Elem())
	var tst = make([]ISimpleExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISimpleExprContext)
		}
	}

	return tst
}

func (s *SimpleExprContext) SimpleExpr(i int) ISimpleExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISimpleExprContext)
}

func (s *SimpleExprContext) PLUS_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPLUS_, 0)
}

func (s *SimpleExprContext) MINUS_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMINUS_, 0)
}

func (s *SimpleExprContext) TILDE_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTILDE_, 0)
}

func (s *SimpleExprContext) NotOperator() INotOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INotOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INotOperatorContext)
}

func (s *SimpleExprContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBINARY, 0)
}

func (s *SimpleExprContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *SimpleExprContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *SimpleExprContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *SimpleExprContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *SimpleExprContext) ROW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROW, 0)
}

func (s *SimpleExprContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *SimpleExprContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *SimpleExprContext) Subquery() ISubqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubqueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubqueryContext)
}

func (s *SimpleExprContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXISTS, 0)
}

func (s *SimpleExprContext) LBE_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLBE_, 0)
}

func (s *SimpleExprContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *SimpleExprContext) RBE_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRBE_, 0)
}

func (s *SimpleExprContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *SimpleExprContext) JSON_SEPARATOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserJSON_SEPARATOR, 0)
}

func (s *SimpleExprContext) JSON_UNQUOTED_SEPARATOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserJSON_UNQUOTED_SEPARATOR, 0)
}

func (s *SimpleExprContext) MatchExpression() IMatchExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMatchExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMatchExpressionContext)
}

func (s *SimpleExprContext) CaseExpression() ICaseExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICaseExpressionContext)
}

func (s *SimpleExprContext) IntervalExpression() IIntervalExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntervalExpressionContext)
}

func (s *SimpleExprContext) OR_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOR_, 0)
}

func (s *SimpleExprContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOLLATE, 0)
}

func (s *SimpleExprContext) TextOrIdentifier() ITextOrIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITextOrIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITextOrIdentifierContext)
}

func (s *SimpleExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSimpleExpr(s)
	}
}

func (s *SimpleExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSimpleExpr(s)
	}
}

func (s *SimpleExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSimpleExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SimpleExpr() (localctx ISimpleExprContext) {
	return p.simpleExpr(0)
}

func (p *MySQLStatementParser) simpleExpr(_p int) (localctx ISimpleExprContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewSimpleExprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ISimpleExprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 344
	p.EnterRecursionRule(localctx, 344, MySQLStatementParserRULE_simpleExpr, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2738)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 236, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2695)
			p.FunctionCall()
		}

	case 2:
		{
			p.SetState(2696)
			p.ParameterMarker()
		}

	case 3:
		{
			p.SetState(2697)
			p.Literals()
		}

	case 4:
		{
			p.SetState(2698)
			p.ColumnRef()
		}

	case 5:
		{
			p.SetState(2699)
			p.Variable()
		}

	case 6:
		p.SetState(2705)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySQLStatementParserPLUS_:
			{
				p.SetState(2700)
				p.Match(MySQLStatementParserPLUS_)
			}

		case MySQLStatementParserMINUS_:
			{
				p.SetState(2701)
				p.Match(MySQLStatementParserMINUS_)
			}

		case MySQLStatementParserTILDE_:
			{
				p.SetState(2702)
				p.Match(MySQLStatementParserTILDE_)
			}

		case MySQLStatementParserNOT_, MySQLStatementParserNOT:
			{
				p.SetState(2703)
				p.NotOperator()
			}

		case MySQLStatementParserBINARY:
			{
				p.SetState(2704)
				p.Match(MySQLStatementParserBINARY)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(2707)
			p.simpleExpr(8)
		}

	case 7:
		p.SetState(2709)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserROW {
			{
				p.SetState(2708)
				p.Match(MySQLStatementParserROW)
			}

		}
		{
			p.SetState(2711)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(2712)
			p.expr(0)
		}
		p.SetState(2717)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(2713)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(2714)
				p.expr(0)
			}

			p.SetState(2719)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2720)
			p.Match(MySQLStatementParserRP_)
		}

	case 8:
		p.SetState(2723)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEXISTS {
			{
				p.SetState(2722)
				p.Match(MySQLStatementParserEXISTS)
			}

		}
		{
			p.SetState(2725)
			p.Subquery()
		}

	case 9:
		{
			p.SetState(2726)
			p.Match(MySQLStatementParserLBE_)
		}
		{
			p.SetState(2727)
			p.Identifier()
		}
		{
			p.SetState(2728)
			p.expr(0)
		}
		{
			p.SetState(2729)
			p.Match(MySQLStatementParserRBE_)
		}

	case 10:
		{
			p.SetState(2731)
			p.Identifier()
		}
		{
			p.SetState(2732)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserJSON_SEPARATOR || _la == MySQLStatementParserJSON_UNQUOTED_SEPARATOR) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2733)
			p.String_()
		}

	case 11:
		{
			p.SetState(2735)
			p.MatchExpression()
		}

	case 12:
		{
			p.SetState(2736)
			p.CaseExpression()
		}

	case 13:
		{
			p.SetState(2737)
			p.IntervalExpression()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2748)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 238, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2746)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 237, p.GetParserRuleContext()) {
			case 1:
				localctx = NewSimpleExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MySQLStatementParserRULE_simpleExpr)
				p.SetState(2740)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(2741)
					p.Match(MySQLStatementParserOR_)
				}
				{
					p.SetState(2742)
					p.simpleExpr(10)
				}

			case 2:
				localctx = NewSimpleExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MySQLStatementParserRULE_simpleExpr)
				p.SetState(2743)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
				}
				{
					p.SetState(2744)
					p.Match(MySQLStatementParserCOLLATE)
				}
				{
					p.SetState(2745)
					p.TextOrIdentifier()
				}

			}

		}
		p.SetState(2750)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 238, p.GetParserRuleContext())
	}

	return localctx
}

// IColumnRefContext is an interface to support dynamic dispatch.
type IColumnRefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnRefContext differentiates from other interfaces.
	IsColumnRefContext()
}

type ColumnRefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnRefContext() *ColumnRefContext {
	var p = new(ColumnRefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_columnRef
	return p
}

func (*ColumnRefContext) IsColumnRefContext() {}

func NewColumnRefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnRefContext {
	var p = new(ColumnRefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_columnRef

	return p
}

func (s *ColumnRefContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnRefContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *ColumnRefContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnRefContext) AllDOT_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserDOT_)
}

func (s *ColumnRefContext) DOT_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDOT_, i)
}

func (s *ColumnRefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnRefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnRefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterColumnRef(s)
	}
}

func (s *ColumnRefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitColumnRef(s)
	}
}

func (s *ColumnRefContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitColumnRef(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ColumnRef() (localctx IColumnRefContext) {
	this := p
	_ = this

	localctx = NewColumnRefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 346, MySQLStatementParserRULE_columnRef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2751)
		p.Identifier()
	}
	p.SetState(2754)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 239, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2752)
			p.Match(MySQLStatementParserDOT_)
		}
		{
			p.SetState(2753)
			p.Identifier()
		}

	}
	p.SetState(2758)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 240, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2756)
			p.Match(MySQLStatementParserDOT_)
		}
		{
			p.SetState(2757)
			p.Identifier()
		}

	}

	return localctx
}

// IColumnRefListContext is an interface to support dynamic dispatch.
type IColumnRefListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnRefListContext differentiates from other interfaces.
	IsColumnRefListContext()
}

type ColumnRefListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnRefListContext() *ColumnRefListContext {
	var p = new(ColumnRefListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_columnRefList
	return p
}

func (*ColumnRefListContext) IsColumnRefListContext() {}

func NewColumnRefListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnRefListContext {
	var p = new(ColumnRefListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_columnRefList

	return p
}

func (s *ColumnRefListContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnRefListContext) AllColumnRef() []IColumnRefContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumnRefContext)(nil)).Elem())
	var tst = make([]IColumnRefContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumnRefContext)
		}
	}

	return tst
}

func (s *ColumnRefListContext) ColumnRef(i int) IColumnRefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnRefContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumnRefContext)
}

func (s *ColumnRefListContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *ColumnRefListContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *ColumnRefListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnRefListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnRefListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterColumnRefList(s)
	}
}

func (s *ColumnRefListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitColumnRefList(s)
	}
}

func (s *ColumnRefListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitColumnRefList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ColumnRefList() (localctx IColumnRefListContext) {
	this := p
	_ = this

	localctx = NewColumnRefListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 348, MySQLStatementParserRULE_columnRefList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2760)
		p.ColumnRef()
	}
	p.SetState(2765)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(2761)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(2762)
			p.ColumnRef()
		}

		p.SetState(2767)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IFunctionCallContext is an interface to support dynamic dispatch.
type IFunctionCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionCallContext differentiates from other interfaces.
	IsFunctionCallContext()
}

type FunctionCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionCallContext() *FunctionCallContext {
	var p = new(FunctionCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_functionCall
	return p
}

func (*FunctionCallContext) IsFunctionCallContext() {}

func NewFunctionCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionCallContext {
	var p = new(FunctionCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_functionCall

	return p
}

func (s *FunctionCallContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionCallContext) AggregationFunction() IAggregationFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAggregationFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAggregationFunctionContext)
}

func (s *FunctionCallContext) SpecialFunction() ISpecialFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpecialFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISpecialFunctionContext)
}

func (s *FunctionCallContext) RegularFunction() IRegularFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRegularFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRegularFunctionContext)
}

func (s *FunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterFunctionCall(s)
	}
}

func (s *FunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitFunctionCall(s)
	}
}

func (s *FunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) FunctionCall() (localctx IFunctionCallContext) {
	this := p
	_ = this

	localctx = NewFunctionCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 350, MySQLStatementParserRULE_functionCall)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2771)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 242, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2768)
			p.AggregationFunction()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2769)
			p.SpecialFunction()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2770)
			p.RegularFunction()
		}

	}

	return localctx
}

// IAggregationFunctionContext is an interface to support dynamic dispatch.
type IAggregationFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAggregationFunctionContext differentiates from other interfaces.
	IsAggregationFunctionContext()
}

type AggregationFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAggregationFunctionContext() *AggregationFunctionContext {
	var p = new(AggregationFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_aggregationFunction
	return p
}

func (*AggregationFunctionContext) IsAggregationFunctionContext() {}

func NewAggregationFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AggregationFunctionContext {
	var p = new(AggregationFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_aggregationFunction

	return p
}

func (s *AggregationFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *AggregationFunctionContext) AggregationFunctionName() IAggregationFunctionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAggregationFunctionNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAggregationFunctionNameContext)
}

func (s *AggregationFunctionContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *AggregationFunctionContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *AggregationFunctionContext) Distinct() IDistinctContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDistinctContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDistinctContext)
}

func (s *AggregationFunctionContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *AggregationFunctionContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *AggregationFunctionContext) ASTERISK_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserASTERISK_, 0)
}

func (s *AggregationFunctionContext) OverClause() IOverClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOverClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOverClauseContext)
}

func (s *AggregationFunctionContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *AggregationFunctionContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *AggregationFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AggregationFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AggregationFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAggregationFunction(s)
	}
}

func (s *AggregationFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAggregationFunction(s)
	}
}

func (s *AggregationFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAggregationFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AggregationFunction() (localctx IAggregationFunctionContext) {
	this := p
	_ = this

	localctx = NewAggregationFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 352, MySQLStatementParserRULE_aggregationFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2773)
		p.AggregationFunctionName()
	}
	{
		p.SetState(2774)
		p.Match(MySQLStatementParserLP_)
	}
	p.SetState(2776)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserDISTINCT {
		{
			p.SetState(2775)
			p.Distinct()
		}

	}
	p.SetState(2787)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserNOT_, MySQLStatementParserTILDE_, MySQLStatementParserPLUS_, MySQLStatementParserMINUS_, MySQLStatementParserLP_, MySQLStatementParserLBE_, MySQLStatementParserQUESTION_, MySQLStatementParserAT_, MySQLStatementParserMAX, MySQLStatementParserMIN, MySQLStatementParserSUM, MySQLStatementParserCOUNT, MySQLStatementParserGROUP_CONCAT, MySQLStatementParserCAST, MySQLStatementParserPOSITION, MySQLStatementParserSUBSTRING, MySQLStatementParserSUBSTR, MySQLStatementParserEXTRACT, MySQLStatementParserTRIM, MySQLStatementParserLAST_DAY, MySQLStatementParserTRADITIONAL, MySQLStatementParserTREE, MySQLStatementParserMYSQL_ADMIN, MySQLStatementParserINSTANT, MySQLStatementParserINPLACE, MySQLStatementParserCOPY, MySQLStatementParserUL_BINARY, MySQLStatementParserAUTOCOMMIT, MySQLStatementParserINNODB, MySQLStatementParserREDO_LOG, MySQLStatementParserACCOUNT, MySQLStatementParserACTION, MySQLStatementParserACTIVE, MySQLStatementParserADMIN, MySQLStatementParserAFTER, MySQLStatementParserAGAINST, MySQLStatementParserAGGREGATE, MySQLStatementParserALGORITHM, MySQLStatementParserALWAYS, MySQLStatementParserANY, MySQLStatementParserARRAY, MySQLStatementParserASCII, MySQLStatementParserAT, MySQLStatementParserATTRIBUTE, MySQLStatementParserAUTOEXTEND_SIZE, MySQLStatementParserAUTO_INCREMENT, MySQLStatementParserAVG, MySQLStatementParserBIT_XOR, MySQLStatementParserAVG_ROW_LENGTH, MySQLStatementParserBACKUP, MySQLStatementParserBEGIN, MySQLStatementParserBINARY, MySQLStatementParserBINLOG, MySQLStatementParserBIT, MySQLStatementParserBLOCK, MySQLStatementParserBOOL, MySQLStatementParserBOOLEAN, MySQLStatementParserBTREE, MySQLStatementParserBUCKETS, MySQLStatementParserBYTE, MySQLStatementParserCACHE, MySQLStatementParserCASCADED, MySQLStatementParserCASE, MySQLStatementParserCATALOG_NAME, MySQLStatementParserCHAIN, MySQLStatementParserCHANGED, MySQLStatementParserCHANNEL, MySQLStatementParserCHAR, MySQLStatementParserCHARSET, MySQLStatementParserCHECKSUM, MySQLStatementParserCIPHER, MySQLStatementParserCLASS_ORIGIN, MySQLStatementParserCLIENT, MySQLStatementParserCLONE, MySQLStatementParserCLOSE, MySQLStatementParserCOALESCE, MySQLStatementParserCODE, MySQLStatementParserCOLLATION, MySQLStatementParserCOLUMNS, MySQLStatementParserCOLUMN_FORMAT, MySQLStatementParserCOLUMN_NAME, MySQLStatementParserCOMMENT, MySQLStatementParserCOMMIT, MySQLStatementParserCOMMITTED, MySQLStatementParserCOMPACT, MySQLStatementParserCOMPLETION, MySQLStatementParserCOMPONENT, MySQLStatementParserCOMPRESSED, MySQLStatementParserCOMPRESSION, MySQLStatementParserCONCURRENT, MySQLStatementParserCONNECTION, MySQLStatementParserCONSISTENT, MySQLStatementParserCONSTRAINT_CATALOG, MySQLStatementParserCONSTRAINT_NAME, MySQLStatementParserCONSTRAINT_SCHEMA, MySQLStatementParserCONTAINS, MySQLStatementParserCONTEXT, MySQLStatementParserCONVERT, MySQLStatementParserCPU, MySQLStatementParserCUME_DIST, MySQLStatementParserCURRENT, MySQLStatementParserCURRENT_DATE, MySQLStatementParserCURRENT_TIME, MySQLStatementParserCURRENT_TIMESTAMP, MySQLStatementParserCURRENT_USER, MySQLStatementParserCURSOR_NAME, MySQLStatementParserDATA, MySQLStatementParserDATABASE, MySQLStatementParserDATAFILE, MySQLStatementParserDATE, MySQLStatementParserDATETIME, MySQLStatementParserDAY, MySQLStatementParserDEALLOCATE, MySQLStatementParserDEFAULT_AUTH, MySQLStatementParserDEFINER, MySQLStatementParserDEFINITION, MySQLStatementParserDELAY_KEY_WRITE, MySQLStatementParserDENSE_RANK, MySQLStatementParserDESCRIPTION, MySQLStatementParserDIAGNOSTICS, MySQLStatementParserDIRECTORY, MySQLStatementParserDISABLE, MySQLStatementParserDISCARD, MySQLStatementParserDISK, MySQLStatementParserDO, MySQLStatementParserDUMPFILE, MySQLStatementParserDUPLICATE, MySQLStatementParserDYNAMIC, MySQLStatementParserENABLE, MySQLStatementParserENCRYPTION, MySQLStatementParserEND, MySQLStatementParserENDS, MySQLStatementParserENFORCED, MySQLStatementParserENGINE, MySQLStatementParserENGINES, MySQLStatementParserENGINE_ATTRIBUTE, MySQLStatementParserENUM, MySQLStatementParserERROR, MySQLStatementParserERRORS, MySQLStatementParserESCAPE, MySQLStatementParserEVENT, MySQLStatementParserEVENTS, MySQLStatementParserEVERY, MySQLStatementParserEXCHANGE, MySQLStatementParserEXCLUDE, MySQLStatementParserEXECUTE, MySQLStatementParserEXISTS, MySQLStatementParserEXPANSION, MySQLStatementParserEXPIRE, MySQLStatementParserEXPORT, MySQLStatementParserEXTENDED, MySQLStatementParserEXTENT_SIZE, MySQLStatementParserFAILED_LOGIN_ATTEMPTS, MySQLStatementParserFALSE, MySQLStatementParserFAST, MySQLStatementParserFAULTS, MySQLStatementParserFILE, MySQLStatementParserFILE_BLOCK_SIZE, MySQLStatementParserFILTER, MySQLStatementParserFIRST, MySQLStatementParserFIRST_VALUE, MySQLStatementParserFIXED, MySQLStatementParserFLUSH, MySQLStatementParserFOLLOWING, MySQLStatementParserFOLLOWS, MySQLStatementParserFORMAT, MySQLStatementParserFOUND, MySQLStatementParserFULL, MySQLStatementParserGENERAL, MySQLStatementParserGEOMETRY, MySQLStatementParserGEOMETRYCOLLECTION, MySQLStatementParserGET_FORMAT, MySQLStatementParserGET_MASTER_PUBLIC_KEY, MySQLStatementParserGLOBAL, MySQLStatementParserGRANTS, MySQLStatementParserGROUP_REPLICATION, MySQLStatementParserHANDLER, MySQLStatementParserHASH, MySQLStatementParserHELP, MySQLStatementParserHISTOGRAM, MySQLStatementParserHISTORY, MySQLStatementParserHOST, MySQLStatementParserHOSTS, MySQLStatementParserHOUR, MySQLStatementParserIDENTIFIED, MySQLStatementParserIF, MySQLStatementParserIGNORE_SERVER_IDS, MySQLStatementParserIMPORT, MySQLStatementParserINACTIVE, MySQLStatementParserINDEXES, MySQLStatementParserINITIAL_SIZE, MySQLStatementParserINSERT_METHOD, MySQLStatementParserINSTALL, MySQLStatementParserINSTANCE, MySQLStatementParserINTERVAL, MySQLStatementParserINVISIBLE, MySQLStatementParserINVOKER, MySQLStatementParserIO, MySQLStatementParserIPC, MySQLStatementParserISOLATION, MySQLStatementParserISSUER, MySQLStatementParserJSON, MySQLStatementParserJSON_VALUE, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserLAG, MySQLStatementParserLANGUAGE, MySQLStatementParserLAST, MySQLStatementParserLAST_VALUE, MySQLStatementParserLEAD, MySQLStatementParserLEAVES, MySQLStatementParserLEFT, MySQLStatementParserLESS, MySQLStatementParserLEVEL, MySQLStatementParserLINESTRING, MySQLStatementParserLIST, MySQLStatementParserLOCAL, MySQLStatementParserLOCALTIME, MySQLStatementParserLOCALTIMESTAMP, MySQLStatementParserLOCKED, MySQLStatementParserLOCKS, MySQLStatementParserLOGFILE, MySQLStatementParserLOGS, MySQLStatementParserMASTER, MySQLStatementParserMASTER_AUTO_POSITION, MySQLStatementParserMASTER_COMPRESSION_ALGORITHM, MySQLStatementParserMASTER_CONNECT_RETRY, MySQLStatementParserMASTER_DELAY, MySQLStatementParserMASTER_HEARTBEAT_PERIOD, MySQLStatementParserMASTER_HOST, MySQLStatementParserMASTER_LOG_FILE, MySQLStatementParserMASTER_LOG_POS, MySQLStatementParserMASTER_PASSWORD, MySQLStatementParserMASTER_PORT, MySQLStatementParserMASTER_PUBLIC_KEY_PATH, MySQLStatementParserMASTER_RETRY_COUNT, MySQLStatementParserMASTER_SERVER_ID, MySQLStatementParserMASTER_SSL, MySQLStatementParserMASTER_SSL_CA, MySQLStatementParserMASTER_SSL_CAPATH, MySQLStatementParserMASTER_SSL_CERT, MySQLStatementParserMASTER_SSL_CIPHER, MySQLStatementParserMASTER_SSL_CRL, MySQLStatementParserMASTER_SSL_CRLPATH, MySQLStatementParserMASTER_SSL_KEY, MySQLStatementParserMASTER_TLS_CIPHERSUITES, MySQLStatementParserMASTER_TLS_VERSION, MySQLStatementParserMASTER_USER, MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL, MySQLStatementParserMATCH, MySQLStatementParserMAX_CONNECTIONS_PER_HOUR, MySQLStatementParserMAX_QUERIES_PER_HOUR, MySQLStatementParserMAX_ROWS, MySQLStatementParserMAX_SIZE, MySQLStatementParserMAX_UPDATES_PER_HOUR, MySQLStatementParserMAX_USER_CONNECTIONS, MySQLStatementParserMEDIUM, MySQLStatementParserMEMBER, MySQLStatementParserMEMORY, MySQLStatementParserMERGE, MySQLStatementParserMESSAGE_TEXT, MySQLStatementParserMICROSECOND, MySQLStatementParserMIGRATE, MySQLStatementParserMINUTE, MySQLStatementParserMIN_ROWS, MySQLStatementParserMOD, MySQLStatementParserMODE, MySQLStatementParserMODIFY, MySQLStatementParserMONTH, MySQLStatementParserMULTILINESTRING, MySQLStatementParserMULTIPOINT, MySQLStatementParserMULTIPOLYGON, MySQLStatementParserMUTEX, MySQLStatementParserMYSQL_ERRNO, MySQLStatementParserNAME, MySQLStatementParserNAMES, MySQLStatementParserNATIONAL, MySQLStatementParserNCHAR, MySQLStatementParserNDBCLUSTER, MySQLStatementParserNESTED, MySQLStatementParserNETWORK_NAMESPACE, MySQLStatementParserNEVER, MySQLStatementParserNEW, MySQLStatementParserNEXT, MySQLStatementParserNO, MySQLStatementParserNODEGROUP, MySQLStatementParserNONE, MySQLStatementParserNOT, MySQLStatementParserNOWAIT, MySQLStatementParserNO_WAIT, MySQLStatementParserNTH_VALUE, MySQLStatementParserNTILE, MySQLStatementParserNULL, MySQLStatementParserNULLS, MySQLStatementParserNUMBER, MySQLStatementParserNVARCHAR, MySQLStatementParserOFF, MySQLStatementParserOFFSET, MySQLStatementParserOJ, MySQLStatementParserOLD, MySQLStatementParserONE, MySQLStatementParserONLY, MySQLStatementParserOPEN, MySQLStatementParserOPTIONAL, MySQLStatementParserOPTIONS, MySQLStatementParserORDINALITY, MySQLStatementParserORGANIZATION, MySQLStatementParserOTHERS, MySQLStatementParserOWNER, MySQLStatementParserPACK_KEYS, MySQLStatementParserPAGE, MySQLStatementParserPARSER, MySQLStatementParserPARTIAL, MySQLStatementParserPARTITIONING, MySQLStatementParserPARTITIONS, MySQLStatementParserPASSWORD, MySQLStatementParserPASSWORD_LOCK_TIME, MySQLStatementParserPATH, MySQLStatementParserPERCENT_RANK, MySQLStatementParserPERSIST, MySQLStatementParserPERSIST_ONLY, MySQLStatementParserPHASE, MySQLStatementParserPLUGIN, MySQLStatementParserPLUGINS, MySQLStatementParserPLUGIN_DIR, MySQLStatementParserPOINT, MySQLStatementParserPOLYGON, MySQLStatementParserPORT, MySQLStatementParserPRECEDES, MySQLStatementParserPRECEDING, MySQLStatementParserPREPARE, MySQLStatementParserPRESERVE, MySQLStatementParserPREV, MySQLStatementParserPRIVILEGES, MySQLStatementParserPRIVILEGE_CHECKS_USER, MySQLStatementParserPROCESS, MySQLStatementParserPROCESSLIST, MySQLStatementParserPROFILE, MySQLStatementParserPROFILES, MySQLStatementParserPROXY, MySQLStatementParserQUARTER, MySQLStatementParserQUERY, MySQLStatementParserQUICK, MySQLStatementParserRANDOM, MySQLStatementParserRANK, MySQLStatementParserREAD_ONLY, MySQLStatementParserREBUILD, MySQLStatementParserRECOVER, MySQLStatementParserREDO_BUFFER_SIZE, MySQLStatementParserREDUNDANT, MySQLStatementParserREFERENCE, MySQLStatementParserRELAY, MySQLStatementParserRELAYLOG, MySQLStatementParserRELAY_LOG_FILE, MySQLStatementParserRELAY_LOG_POS, MySQLStatementParserRELAY_THREAD, MySQLStatementParserRELOAD, MySQLStatementParserREMOVE, MySQLStatementParserREORGANIZE, MySQLStatementParserREPAIR, MySQLStatementParserREPEATABLE, MySQLStatementParserREPLACE, MySQLStatementParserREPLICATE_DO_DB, MySQLStatementParserREPLICATE_DO_TABLE, MySQLStatementParserREPLICATE_IGNORE_DB, MySQLStatementParserREPLICATE_IGNORE_TABLE, MySQLStatementParserREPLICATE_REWRITE_DB, MySQLStatementParserREPLICATE_WILD_DO_TABLE, MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE, MySQLStatementParserREPLICATION, MySQLStatementParserREQUIRE_ROW_FORMAT, MySQLStatementParserRESET, MySQLStatementParserRESOURCE, MySQLStatementParserRESPECT, MySQLStatementParserRESTART, MySQLStatementParserRESTORE, MySQLStatementParserRESUME, MySQLStatementParserRETAIN, MySQLStatementParserRETURNED_SQLSTATE, MySQLStatementParserRETURNING, MySQLStatementParserRETURNS, MySQLStatementParserREUSE, MySQLStatementParserREVERSE, MySQLStatementParserRIGHT, MySQLStatementParserROLE, MySQLStatementParserROLLBACK, MySQLStatementParserROLLUP, MySQLStatementParserROTATE, MySQLStatementParserROUTINE, MySQLStatementParserROW, MySQLStatementParserROW_COUNT, MySQLStatementParserROW_FORMAT, MySQLStatementParserROW_NUMBER, MySQLStatementParserRTREE, MySQLStatementParserSAVEPOINT, MySQLStatementParserSCHEDULE, MySQLStatementParserSCHEMA, MySQLStatementParserSCHEMA_NAME, MySQLStatementParserSECOND, MySQLStatementParserSECONDARY, MySQLStatementParserSECONDARY_ENGINE, MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, MySQLStatementParserSECONDARY_LOAD, MySQLStatementParserSECONDARY_UNLOAD, MySQLStatementParserSECURITY, MySQLStatementParserSERIAL, MySQLStatementParserSERIALIZABLE, MySQLStatementParserSERVER, MySQLStatementParserSESSION, MySQLStatementParserSHARE, MySQLStatementParserSHUTDOWN, MySQLStatementParserSIGNED, MySQLStatementParserSIMPLE, MySQLStatementParserSLAVE, MySQLStatementParserSLOW, MySQLStatementParserSNAPSHOT, MySQLStatementParserSOCKET, MySQLStatementParserSONAME, MySQLStatementParserSOUNDS, MySQLStatementParserSOURCE, MySQLStatementParserSQL_AFTER_GTIDS, MySQLStatementParserSQL_AFTER_MTS_GAPS, MySQLStatementParserSQL_BEFORE_GTIDS, MySQLStatementParserSQL_BUFFER_RESULT, MySQLStatementParserSQL_NO_CACHE, MySQLStatementParserSQL_THREAD, MySQLStatementParserSRID, MySQLStatementParserSTACKED, MySQLStatementParserSTART, MySQLStatementParserSTARTS, MySQLStatementParserSTATS_AUTO_RECALC, MySQLStatementParserSTATS_PERSISTENT, MySQLStatementParserSTATS_SAMPLE_PAGES, MySQLStatementParserSTATUS, MySQLStatementParserSTOP, MySQLStatementParserSTORAGE, MySQLStatementParserSTREAM, MySQLStatementParserSTRING, MySQLStatementParserSUBCLASS_ORIGIN, MySQLStatementParserSUBJECT, MySQLStatementParserSUBPARTITION, MySQLStatementParserSUBPARTITIONS, MySQLStatementParserSUPER, MySQLStatementParserSUSPEND, MySQLStatementParserSWAPS, MySQLStatementParserSWITCHES, MySQLStatementParserTABLES, MySQLStatementParserTABLESPACE, MySQLStatementParserTABLE_CHECKSUM, MySQLStatementParserTABLE_NAME, MySQLStatementParserTEMPORARY, MySQLStatementParserTEMPTABLE, MySQLStatementParserTEXT, MySQLStatementParserTHAN, MySQLStatementParserTHREAD_PRIORITY, MySQLStatementParserTIES, MySQLStatementParserTIME, MySQLStatementParserTIMESTAMP, MySQLStatementParserTIMESTAMP_ADD, MySQLStatementParserTIMESTAMP_DIFF, MySQLStatementParserTLS, MySQLStatementParserTRANSACTION, MySQLStatementParserTRIGGERS, MySQLStatementParserTRUE, MySQLStatementParserTRUNCATE, MySQLStatementParserTYPE, MySQLStatementParserTYPES, MySQLStatementParserUNBOUNDED, MySQLStatementParserUNCOMMITTED, MySQLStatementParserUNDEFINED, MySQLStatementParserUNDOFILE, MySQLStatementParserUNDO_BUFFER_SIZE, MySQLStatementParserUNICODE, MySQLStatementParserUNINSTALL, MySQLStatementParserUNKNOWN, MySQLStatementParserUNTIL, MySQLStatementParserUPGRADE, MySQLStatementParserUSER, MySQLStatementParserUSER_RESOURCES, MySQLStatementParserUSE_FRM, MySQLStatementParserUTC_TIMESTAMP, MySQLStatementParserVALIDATION, MySQLStatementParserVALUE, MySQLStatementParserVALUES, MySQLStatementParserVARIABLES, MySQLStatementParserVCPU, MySQLStatementParserVIEW, MySQLStatementParserVISIBLE, MySQLStatementParserWAIT, MySQLStatementParserWARNINGS, MySQLStatementParserWEEK, MySQLStatementParserWEIGHT_STRING, MySQLStatementParserWITHOUT, MySQLStatementParserWORK, MySQLStatementParserWRAPPER, MySQLStatementParserX509, MySQLStatementParserXA, MySQLStatementParserXID, MySQLStatementParserXML, MySQLStatementParserYEAR, MySQLStatementParserIDENTIFIER_, MySQLStatementParserSINGLE_QUOTED_TEXT, MySQLStatementParserDOUBLE_QUOTED_TEXT, MySQLStatementParserNCHAR_TEXT, MySQLStatementParserUNDERSCORE_CHARSET, MySQLStatementParserNUMBER_, MySQLStatementParserHEX_DIGIT_, MySQLStatementParserBIT_NUM_:
		{
			p.SetState(2778)
			p.expr(0)
		}
		p.SetState(2783)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(2779)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(2780)
				p.expr(0)
			}

			p.SetState(2785)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case MySQLStatementParserASTERISK_:
		{
			p.SetState(2786)
			p.Match(MySQLStatementParserASTERISK_)
		}

	case MySQLStatementParserRP_:

	default:
	}
	{
		p.SetState(2789)
		p.Match(MySQLStatementParserRP_)
	}
	p.SetState(2791)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 246, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2790)
			p.OverClause()
		}

	}

	return localctx
}

// IAggregationFunctionNameContext is an interface to support dynamic dispatch.
type IAggregationFunctionNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAggregationFunctionNameContext differentiates from other interfaces.
	IsAggregationFunctionNameContext()
}

type AggregationFunctionNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAggregationFunctionNameContext() *AggregationFunctionNameContext {
	var p = new(AggregationFunctionNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_aggregationFunctionName
	return p
}

func (*AggregationFunctionNameContext) IsAggregationFunctionNameContext() {}

func NewAggregationFunctionNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AggregationFunctionNameContext {
	var p = new(AggregationFunctionNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_aggregationFunctionName

	return p
}

func (s *AggregationFunctionNameContext) GetParser() antlr.Parser { return s.parser }

func (s *AggregationFunctionNameContext) MAX() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMAX, 0)
}

func (s *AggregationFunctionNameContext) MIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMIN, 0)
}

func (s *AggregationFunctionNameContext) SUM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSUM, 0)
}

func (s *AggregationFunctionNameContext) COUNT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOUNT, 0)
}

func (s *AggregationFunctionNameContext) AVG() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAVG, 0)
}

func (s *AggregationFunctionNameContext) BIT_XOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBIT_XOR, 0)
}

func (s *AggregationFunctionNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AggregationFunctionNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AggregationFunctionNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAggregationFunctionName(s)
	}
}

func (s *AggregationFunctionNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAggregationFunctionName(s)
	}
}

func (s *AggregationFunctionNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAggregationFunctionName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AggregationFunctionName() (localctx IAggregationFunctionNameContext) {
	this := p
	_ = this

	localctx = NewAggregationFunctionNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 354, MySQLStatementParserRULE_aggregationFunctionName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2793)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49)))) != 0) || _la == MySQLStatementParserAVG || _la == MySQLStatementParserBIT_XOR) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IDistinctContext is an interface to support dynamic dispatch.
type IDistinctContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDistinctContext differentiates from other interfaces.
	IsDistinctContext()
}

type DistinctContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDistinctContext() *DistinctContext {
	var p = new(DistinctContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_distinct
	return p
}

func (*DistinctContext) IsDistinctContext() {}

func NewDistinctContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DistinctContext {
	var p = new(DistinctContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_distinct

	return p
}

func (s *DistinctContext) GetParser() antlr.Parser { return s.parser }

func (s *DistinctContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDISTINCT, 0)
}

func (s *DistinctContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DistinctContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DistinctContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDistinct(s)
	}
}

func (s *DistinctContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDistinct(s)
	}
}

func (s *DistinctContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDistinct(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Distinct() (localctx IDistinctContext) {
	this := p
	_ = this

	localctx = NewDistinctContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 356, MySQLStatementParserRULE_distinct)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2795)
		p.Match(MySQLStatementParserDISTINCT)
	}

	return localctx
}

// IOverClauseContext is an interface to support dynamic dispatch.
type IOverClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOverClauseContext differentiates from other interfaces.
	IsOverClauseContext()
}

type OverClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOverClauseContext() *OverClauseContext {
	var p = new(OverClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_overClause
	return p
}

func (*OverClauseContext) IsOverClauseContext() {}

func NewOverClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OverClauseContext {
	var p = new(OverClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_overClause

	return p
}

func (s *OverClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *OverClauseContext) OVER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOVER, 0)
}

func (s *OverClauseContext) WindowSpecification() IWindowSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindowSpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindowSpecificationContext)
}

func (s *OverClauseContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *OverClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OverClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OverClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterOverClause(s)
	}
}

func (s *OverClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitOverClause(s)
	}
}

func (s *OverClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitOverClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) OverClause() (localctx IOverClauseContext) {
	this := p
	_ = this

	localctx = NewOverClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 358, MySQLStatementParserRULE_overClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2797)
		p.Match(MySQLStatementParserOVER)
	}
	p.SetState(2800)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserLP_:
		{
			p.SetState(2798)
			p.WindowSpecification()
		}

	case MySQLStatementParserMAX, MySQLStatementParserMIN, MySQLStatementParserSUM, MySQLStatementParserCOUNT, MySQLStatementParserGROUP_CONCAT, MySQLStatementParserCAST, MySQLStatementParserPOSITION, MySQLStatementParserSUBSTRING, MySQLStatementParserSUBSTR, MySQLStatementParserEXTRACT, MySQLStatementParserTRIM, MySQLStatementParserLAST_DAY, MySQLStatementParserTRADITIONAL, MySQLStatementParserTREE, MySQLStatementParserMYSQL_ADMIN, MySQLStatementParserINSTANT, MySQLStatementParserINPLACE, MySQLStatementParserCOPY, MySQLStatementParserUL_BINARY, MySQLStatementParserAUTOCOMMIT, MySQLStatementParserINNODB, MySQLStatementParserREDO_LOG, MySQLStatementParserACCOUNT, MySQLStatementParserACTION, MySQLStatementParserACTIVE, MySQLStatementParserADMIN, MySQLStatementParserAFTER, MySQLStatementParserAGAINST, MySQLStatementParserAGGREGATE, MySQLStatementParserALGORITHM, MySQLStatementParserALWAYS, MySQLStatementParserANY, MySQLStatementParserARRAY, MySQLStatementParserASCII, MySQLStatementParserAT, MySQLStatementParserATTRIBUTE, MySQLStatementParserAUTOEXTEND_SIZE, MySQLStatementParserAUTO_INCREMENT, MySQLStatementParserAVG, MySQLStatementParserAVG_ROW_LENGTH, MySQLStatementParserBACKUP, MySQLStatementParserBEGIN, MySQLStatementParserBINLOG, MySQLStatementParserBIT, MySQLStatementParserBLOCK, MySQLStatementParserBOOL, MySQLStatementParserBOOLEAN, MySQLStatementParserBTREE, MySQLStatementParserBUCKETS, MySQLStatementParserBYTE, MySQLStatementParserCACHE, MySQLStatementParserCASCADED, MySQLStatementParserCATALOG_NAME, MySQLStatementParserCHAIN, MySQLStatementParserCHANGED, MySQLStatementParserCHANNEL, MySQLStatementParserCHARSET, MySQLStatementParserCHECKSUM, MySQLStatementParserCIPHER, MySQLStatementParserCLASS_ORIGIN, MySQLStatementParserCLIENT, MySQLStatementParserCLONE, MySQLStatementParserCLOSE, MySQLStatementParserCOALESCE, MySQLStatementParserCODE, MySQLStatementParserCOLLATION, MySQLStatementParserCOLUMNS, MySQLStatementParserCOLUMN_FORMAT, MySQLStatementParserCOLUMN_NAME, MySQLStatementParserCOMMENT, MySQLStatementParserCOMMIT, MySQLStatementParserCOMMITTED, MySQLStatementParserCOMPACT, MySQLStatementParserCOMPLETION, MySQLStatementParserCOMPONENT, MySQLStatementParserCOMPRESSED, MySQLStatementParserCOMPRESSION, MySQLStatementParserCONCURRENT, MySQLStatementParserCONNECTION, MySQLStatementParserCONSISTENT, MySQLStatementParserCONSTRAINT_CATALOG, MySQLStatementParserCONSTRAINT_NAME, MySQLStatementParserCONSTRAINT_SCHEMA, MySQLStatementParserCONTAINS, MySQLStatementParserCONTEXT, MySQLStatementParserCPU, MySQLStatementParserCURRENT, MySQLStatementParserCURSOR_NAME, MySQLStatementParserDATA, MySQLStatementParserDATAFILE, MySQLStatementParserDATE, MySQLStatementParserDATETIME, MySQLStatementParserDAY, MySQLStatementParserDEALLOCATE, MySQLStatementParserDEFAULT_AUTH, MySQLStatementParserDEFINER, MySQLStatementParserDEFINITION, MySQLStatementParserDELAY_KEY_WRITE, MySQLStatementParserDESCRIPTION, MySQLStatementParserDIAGNOSTICS, MySQLStatementParserDIRECTORY, MySQLStatementParserDISABLE, MySQLStatementParserDISCARD, MySQLStatementParserDISK, MySQLStatementParserDO, MySQLStatementParserDUMPFILE, MySQLStatementParserDUPLICATE, MySQLStatementParserDYNAMIC, MySQLStatementParserENABLE, MySQLStatementParserENCRYPTION, MySQLStatementParserEND, MySQLStatementParserENDS, MySQLStatementParserENFORCED, MySQLStatementParserENGINE, MySQLStatementParserENGINES, MySQLStatementParserENGINE_ATTRIBUTE, MySQLStatementParserENUM, MySQLStatementParserERROR, MySQLStatementParserERRORS, MySQLStatementParserESCAPE, MySQLStatementParserEVENT, MySQLStatementParserEVENTS, MySQLStatementParserEVERY, MySQLStatementParserEXCHANGE, MySQLStatementParserEXCLUDE, MySQLStatementParserEXECUTE, MySQLStatementParserEXPANSION, MySQLStatementParserEXPIRE, MySQLStatementParserEXPORT, MySQLStatementParserEXTENDED, MySQLStatementParserEXTENT_SIZE, MySQLStatementParserFAILED_LOGIN_ATTEMPTS, MySQLStatementParserFAST, MySQLStatementParserFAULTS, MySQLStatementParserFILE, MySQLStatementParserFILE_BLOCK_SIZE, MySQLStatementParserFILTER, MySQLStatementParserFIRST, MySQLStatementParserFIXED, MySQLStatementParserFLUSH, MySQLStatementParserFOLLOWING, MySQLStatementParserFOLLOWS, MySQLStatementParserFORMAT, MySQLStatementParserFOUND, MySQLStatementParserFULL, MySQLStatementParserGENERAL, MySQLStatementParserGEOMETRY, MySQLStatementParserGEOMETRYCOLLECTION, MySQLStatementParserGET_FORMAT, MySQLStatementParserGET_MASTER_PUBLIC_KEY, MySQLStatementParserGLOBAL, MySQLStatementParserGRANTS, MySQLStatementParserGROUP_REPLICATION, MySQLStatementParserHANDLER, MySQLStatementParserHASH, MySQLStatementParserHELP, MySQLStatementParserHISTOGRAM, MySQLStatementParserHISTORY, MySQLStatementParserHOST, MySQLStatementParserHOSTS, MySQLStatementParserHOUR, MySQLStatementParserIDENTIFIED, MySQLStatementParserIGNORE_SERVER_IDS, MySQLStatementParserIMPORT, MySQLStatementParserINACTIVE, MySQLStatementParserINDEXES, MySQLStatementParserINITIAL_SIZE, MySQLStatementParserINSERT_METHOD, MySQLStatementParserINSTALL, MySQLStatementParserINSTANCE, MySQLStatementParserINVISIBLE, MySQLStatementParserINVOKER, MySQLStatementParserIO, MySQLStatementParserIPC, MySQLStatementParserISOLATION, MySQLStatementParserISSUER, MySQLStatementParserJSON, MySQLStatementParserJSON_VALUE, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserLANGUAGE, MySQLStatementParserLAST, MySQLStatementParserLAST_VALUE, MySQLStatementParserLEAVES, MySQLStatementParserLESS, MySQLStatementParserLEVEL, MySQLStatementParserLINESTRING, MySQLStatementParserLIST, MySQLStatementParserLOCAL, MySQLStatementParserLOCKED, MySQLStatementParserLOCKS, MySQLStatementParserLOGFILE, MySQLStatementParserLOGS, MySQLStatementParserMASTER, MySQLStatementParserMASTER_AUTO_POSITION, MySQLStatementParserMASTER_COMPRESSION_ALGORITHM, MySQLStatementParserMASTER_CONNECT_RETRY, MySQLStatementParserMASTER_DELAY, MySQLStatementParserMASTER_HEARTBEAT_PERIOD, MySQLStatementParserMASTER_HOST, MySQLStatementParserMASTER_LOG_FILE, MySQLStatementParserMASTER_LOG_POS, MySQLStatementParserMASTER_PASSWORD, MySQLStatementParserMASTER_PORT, MySQLStatementParserMASTER_PUBLIC_KEY_PATH, MySQLStatementParserMASTER_RETRY_COUNT, MySQLStatementParserMASTER_SERVER_ID, MySQLStatementParserMASTER_SSL, MySQLStatementParserMASTER_SSL_CA, MySQLStatementParserMASTER_SSL_CAPATH, MySQLStatementParserMASTER_SSL_CERT, MySQLStatementParserMASTER_SSL_CIPHER, MySQLStatementParserMASTER_SSL_CRL, MySQLStatementParserMASTER_SSL_CRLPATH, MySQLStatementParserMASTER_SSL_KEY, MySQLStatementParserMASTER_TLS_CIPHERSUITES, MySQLStatementParserMASTER_TLS_VERSION, MySQLStatementParserMASTER_USER, MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL, MySQLStatementParserMAX_CONNECTIONS_PER_HOUR, MySQLStatementParserMAX_QUERIES_PER_HOUR, MySQLStatementParserMAX_ROWS, MySQLStatementParserMAX_SIZE, MySQLStatementParserMAX_UPDATES_PER_HOUR, MySQLStatementParserMAX_USER_CONNECTIONS, MySQLStatementParserMEDIUM, MySQLStatementParserMEMBER, MySQLStatementParserMEMORY, MySQLStatementParserMERGE, MySQLStatementParserMESSAGE_TEXT, MySQLStatementParserMICROSECOND, MySQLStatementParserMIGRATE, MySQLStatementParserMINUTE, MySQLStatementParserMIN_ROWS, MySQLStatementParserMODE, MySQLStatementParserMODIFY, MySQLStatementParserMONTH, MySQLStatementParserMULTILINESTRING, MySQLStatementParserMULTIPOINT, MySQLStatementParserMULTIPOLYGON, MySQLStatementParserMUTEX, MySQLStatementParserMYSQL_ERRNO, MySQLStatementParserNAME, MySQLStatementParserNAMES, MySQLStatementParserNATIONAL, MySQLStatementParserNCHAR, MySQLStatementParserNDBCLUSTER, MySQLStatementParserNESTED, MySQLStatementParserNETWORK_NAMESPACE, MySQLStatementParserNEVER, MySQLStatementParserNEW, MySQLStatementParserNEXT, MySQLStatementParserNO, MySQLStatementParserNODEGROUP, MySQLStatementParserNONE, MySQLStatementParserNOWAIT, MySQLStatementParserNO_WAIT, MySQLStatementParserNULLS, MySQLStatementParserNUMBER, MySQLStatementParserNVARCHAR, MySQLStatementParserOFF, MySQLStatementParserOFFSET, MySQLStatementParserOJ, MySQLStatementParserOLD, MySQLStatementParserONE, MySQLStatementParserONLY, MySQLStatementParserOPEN, MySQLStatementParserOPTIONAL, MySQLStatementParserOPTIONS, MySQLStatementParserORDINALITY, MySQLStatementParserORGANIZATION, MySQLStatementParserOTHERS, MySQLStatementParserOWNER, MySQLStatementParserPACK_KEYS, MySQLStatementParserPAGE, MySQLStatementParserPARSER, MySQLStatementParserPARTIAL, MySQLStatementParserPARTITIONING, MySQLStatementParserPARTITIONS, MySQLStatementParserPASSWORD, MySQLStatementParserPASSWORD_LOCK_TIME, MySQLStatementParserPATH, MySQLStatementParserPERSIST, MySQLStatementParserPERSIST_ONLY, MySQLStatementParserPHASE, MySQLStatementParserPLUGIN, MySQLStatementParserPLUGINS, MySQLStatementParserPLUGIN_DIR, MySQLStatementParserPOINT, MySQLStatementParserPOLYGON, MySQLStatementParserPORT, MySQLStatementParserPRECEDES, MySQLStatementParserPRECEDING, MySQLStatementParserPREPARE, MySQLStatementParserPRESERVE, MySQLStatementParserPREV, MySQLStatementParserPRIVILEGES, MySQLStatementParserPRIVILEGE_CHECKS_USER, MySQLStatementParserPROCESS, MySQLStatementParserPROCESSLIST, MySQLStatementParserPROFILE, MySQLStatementParserPROFILES, MySQLStatementParserPROXY, MySQLStatementParserQUARTER, MySQLStatementParserQUERY, MySQLStatementParserQUICK, MySQLStatementParserRANDOM, MySQLStatementParserREAD_ONLY, MySQLStatementParserREBUILD, MySQLStatementParserRECOVER, MySQLStatementParserREDO_BUFFER_SIZE, MySQLStatementParserREDUNDANT, MySQLStatementParserREFERENCE, MySQLStatementParserRELAY, MySQLStatementParserRELAYLOG, MySQLStatementParserRELAY_LOG_FILE, MySQLStatementParserRELAY_LOG_POS, MySQLStatementParserRELAY_THREAD, MySQLStatementParserRELOAD, MySQLStatementParserREMOVE, MySQLStatementParserREORGANIZE, MySQLStatementParserREPAIR, MySQLStatementParserREPEATABLE, MySQLStatementParserREPLICATE_DO_DB, MySQLStatementParserREPLICATE_DO_TABLE, MySQLStatementParserREPLICATE_IGNORE_DB, MySQLStatementParserREPLICATE_IGNORE_TABLE, MySQLStatementParserREPLICATE_REWRITE_DB, MySQLStatementParserREPLICATE_WILD_DO_TABLE, MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE, MySQLStatementParserREPLICATION, MySQLStatementParserREQUIRE_ROW_FORMAT, MySQLStatementParserRESET, MySQLStatementParserRESOURCE, MySQLStatementParserRESPECT, MySQLStatementParserRESTART, MySQLStatementParserRESTORE, MySQLStatementParserRESUME, MySQLStatementParserRETAIN, MySQLStatementParserRETURNED_SQLSTATE, MySQLStatementParserRETURNING, MySQLStatementParserRETURNS, MySQLStatementParserREUSE, MySQLStatementParserREVERSE, MySQLStatementParserROLE, MySQLStatementParserROLLBACK, MySQLStatementParserROLLUP, MySQLStatementParserROTATE, MySQLStatementParserROUTINE, MySQLStatementParserROW_COUNT, MySQLStatementParserROW_FORMAT, MySQLStatementParserRTREE, MySQLStatementParserSAVEPOINT, MySQLStatementParserSCHEDULE, MySQLStatementParserSCHEMA_NAME, MySQLStatementParserSECOND, MySQLStatementParserSECONDARY, MySQLStatementParserSECONDARY_ENGINE, MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, MySQLStatementParserSECONDARY_LOAD, MySQLStatementParserSECONDARY_UNLOAD, MySQLStatementParserSECURITY, MySQLStatementParserSERIAL, MySQLStatementParserSERIALIZABLE, MySQLStatementParserSERVER, MySQLStatementParserSESSION, MySQLStatementParserSHARE, MySQLStatementParserSHUTDOWN, MySQLStatementParserSIGNED, MySQLStatementParserSIMPLE, MySQLStatementParserSLAVE, MySQLStatementParserSLOW, MySQLStatementParserSNAPSHOT, MySQLStatementParserSOCKET, MySQLStatementParserSONAME, MySQLStatementParserSOUNDS, MySQLStatementParserSOURCE, MySQLStatementParserSQL_AFTER_GTIDS, MySQLStatementParserSQL_AFTER_MTS_GAPS, MySQLStatementParserSQL_BEFORE_GTIDS, MySQLStatementParserSQL_BUFFER_RESULT, MySQLStatementParserSQL_NO_CACHE, MySQLStatementParserSQL_THREAD, MySQLStatementParserSRID, MySQLStatementParserSTACKED, MySQLStatementParserSTART, MySQLStatementParserSTARTS, MySQLStatementParserSTATS_AUTO_RECALC, MySQLStatementParserSTATS_PERSISTENT, MySQLStatementParserSTATS_SAMPLE_PAGES, MySQLStatementParserSTATUS, MySQLStatementParserSTOP, MySQLStatementParserSTORAGE, MySQLStatementParserSTREAM, MySQLStatementParserSTRING, MySQLStatementParserSUBCLASS_ORIGIN, MySQLStatementParserSUBJECT, MySQLStatementParserSUBPARTITION, MySQLStatementParserSUBPARTITIONS, MySQLStatementParserSUPER, MySQLStatementParserSUSPEND, MySQLStatementParserSWAPS, MySQLStatementParserSWITCHES, MySQLStatementParserTABLES, MySQLStatementParserTABLESPACE, MySQLStatementParserTABLE_CHECKSUM, MySQLStatementParserTABLE_NAME, MySQLStatementParserTEMPORARY, MySQLStatementParserTEMPTABLE, MySQLStatementParserTEXT, MySQLStatementParserTHAN, MySQLStatementParserTHREAD_PRIORITY, MySQLStatementParserTIES, MySQLStatementParserTIME, MySQLStatementParserTIMESTAMP, MySQLStatementParserTIMESTAMP_ADD, MySQLStatementParserTIMESTAMP_DIFF, MySQLStatementParserTLS, MySQLStatementParserTRANSACTION, MySQLStatementParserTRIGGERS, MySQLStatementParserTRUNCATE, MySQLStatementParserTYPE, MySQLStatementParserTYPES, MySQLStatementParserUNBOUNDED, MySQLStatementParserUNCOMMITTED, MySQLStatementParserUNDEFINED, MySQLStatementParserUNDOFILE, MySQLStatementParserUNDO_BUFFER_SIZE, MySQLStatementParserUNICODE, MySQLStatementParserUNINSTALL, MySQLStatementParserUNKNOWN, MySQLStatementParserUNTIL, MySQLStatementParserUPGRADE, MySQLStatementParserUSER, MySQLStatementParserUSER_RESOURCES, MySQLStatementParserUSE_FRM, MySQLStatementParserVALIDATION, MySQLStatementParserVALUE, MySQLStatementParserVARIABLES, MySQLStatementParserVCPU, MySQLStatementParserVIEW, MySQLStatementParserVISIBLE, MySQLStatementParserWAIT, MySQLStatementParserWARNINGS, MySQLStatementParserWEEK, MySQLStatementParserWEIGHT_STRING, MySQLStatementParserWITHOUT, MySQLStatementParserWORK, MySQLStatementParserWRAPPER, MySQLStatementParserX509, MySQLStatementParserXA, MySQLStatementParserXID, MySQLStatementParserXML, MySQLStatementParserYEAR, MySQLStatementParserIDENTIFIER_, MySQLStatementParserDOUBLE_QUOTED_TEXT:
		{
			p.SetState(2799)
			p.Identifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWindowSpecificationContext is an interface to support dynamic dispatch.
type IWindowSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindowSpecificationContext differentiates from other interfaces.
	IsWindowSpecificationContext()
}

type WindowSpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindowSpecificationContext() *WindowSpecificationContext {
	var p = new(WindowSpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_windowSpecification
	return p
}

func (*WindowSpecificationContext) IsWindowSpecificationContext() {}

func NewWindowSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WindowSpecificationContext {
	var p = new(WindowSpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_windowSpecification

	return p
}

func (s *WindowSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *WindowSpecificationContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *WindowSpecificationContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *WindowSpecificationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *WindowSpecificationContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPARTITION, 0)
}

func (s *WindowSpecificationContext) BY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBY, 0)
}

func (s *WindowSpecificationContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *WindowSpecificationContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *WindowSpecificationContext) OrderByClause() IOrderByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderByClauseContext)
}

func (s *WindowSpecificationContext) FrameClause() IFrameClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrameClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFrameClauseContext)
}

func (s *WindowSpecificationContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *WindowSpecificationContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *WindowSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WindowSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WindowSpecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterWindowSpecification(s)
	}
}

func (s *WindowSpecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitWindowSpecification(s)
	}
}

func (s *WindowSpecificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitWindowSpecification(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) WindowSpecification() (localctx IWindowSpecificationContext) {
	this := p
	_ = this

	localctx = NewWindowSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 360, MySQLStatementParserRULE_windowSpecification)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2802)
		p.Match(MySQLStatementParserLP_)
	}
	p.SetState(2804)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49))|(1<<(MySQLStatementParserGROUP_CONCAT-49))|(1<<(MySQLStatementParserCAST-49))|(1<<(MySQLStatementParserPOSITION-49))|(1<<(MySQLStatementParserSUBSTRING-49))|(1<<(MySQLStatementParserSUBSTR-49))|(1<<(MySQLStatementParserEXTRACT-49))|(1<<(MySQLStatementParserTRIM-49))|(1<<(MySQLStatementParserLAST_DAY-49))|(1<<(MySQLStatementParserTRADITIONAL-49))|(1<<(MySQLStatementParserTREE-49))|(1<<(MySQLStatementParserMYSQL_ADMIN-49))|(1<<(MySQLStatementParserINSTANT-49))|(1<<(MySQLStatementParserINPLACE-49))|(1<<(MySQLStatementParserCOPY-49))|(1<<(MySQLStatementParserUL_BINARY-49))|(1<<(MySQLStatementParserAUTOCOMMIT-49))|(1<<(MySQLStatementParserINNODB-49))|(1<<(MySQLStatementParserREDO_LOG-49))|(1<<(MySQLStatementParserACCOUNT-49))|(1<<(MySQLStatementParserACTION-49))|(1<<(MySQLStatementParserACTIVE-49))|(1<<(MySQLStatementParserADMIN-49))|(1<<(MySQLStatementParserAFTER-49))|(1<<(MySQLStatementParserAGAINST-49)))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(MySQLStatementParserAGGREGATE-81))|(1<<(MySQLStatementParserALGORITHM-81))|(1<<(MySQLStatementParserALWAYS-81))|(1<<(MySQLStatementParserANY-81))|(1<<(MySQLStatementParserARRAY-81))|(1<<(MySQLStatementParserASCII-81))|(1<<(MySQLStatementParserAT-81))|(1<<(MySQLStatementParserATTRIBUTE-81))|(1<<(MySQLStatementParserAUTOEXTEND_SIZE-81))|(1<<(MySQLStatementParserAUTO_INCREMENT-81))|(1<<(MySQLStatementParserAVG-81))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-81))|(1<<(MySQLStatementParserBACKUP-81))|(1<<(MySQLStatementParserBEGIN-81))|(1<<(MySQLStatementParserBINLOG-81))|(1<<(MySQLStatementParserBIT-81))|(1<<(MySQLStatementParserBLOCK-81))|(1<<(MySQLStatementParserBOOL-81))|(1<<(MySQLStatementParserBOOLEAN-81)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(MySQLStatementParserBTREE-114))|(1<<(MySQLStatementParserBUCKETS-114))|(1<<(MySQLStatementParserBYTE-114))|(1<<(MySQLStatementParserCACHE-114))|(1<<(MySQLStatementParserCASCADED-114))|(1<<(MySQLStatementParserCATALOG_NAME-114))|(1<<(MySQLStatementParserCHAIN-114))|(1<<(MySQLStatementParserCHANGED-114))|(1<<(MySQLStatementParserCHANNEL-114))|(1<<(MySQLStatementParserCHARSET-114))|(1<<(MySQLStatementParserCHECKSUM-114))|(1<<(MySQLStatementParserCIPHER-114))|(1<<(MySQLStatementParserCLASS_ORIGIN-114))|(1<<(MySQLStatementParserCLIENT-114))|(1<<(MySQLStatementParserCLONE-114))|(1<<(MySQLStatementParserCLOSE-114))|(1<<(MySQLStatementParserCOALESCE-114))|(1<<(MySQLStatementParserCODE-114))|(1<<(MySQLStatementParserCOLLATION-114))|(1<<(MySQLStatementParserCOLUMNS-114))|(1<<(MySQLStatementParserCOLUMN_FORMAT-114))|(1<<(MySQLStatementParserCOLUMN_NAME-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(MySQLStatementParserCOMMENT-146))|(1<<(MySQLStatementParserCOMMIT-146))|(1<<(MySQLStatementParserCOMMITTED-146))|(1<<(MySQLStatementParserCOMPACT-146))|(1<<(MySQLStatementParserCOMPLETION-146))|(1<<(MySQLStatementParserCOMPONENT-146))|(1<<(MySQLStatementParserCOMPRESSED-146))|(1<<(MySQLStatementParserCOMPRESSION-146))|(1<<(MySQLStatementParserCONCURRENT-146))|(1<<(MySQLStatementParserCONNECTION-146))|(1<<(MySQLStatementParserCONSISTENT-146))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-146))|(1<<(MySQLStatementParserCONSTRAINT_NAME-146))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-146))|(1<<(MySQLStatementParserCONTAINS-146))|(1<<(MySQLStatementParserCONTEXT-146))|(1<<(MySQLStatementParserCPU-146))|(1<<(MySQLStatementParserCURRENT-146))|(1<<(MySQLStatementParserCURSOR_NAME-146)))) != 0) || (((_la-178)&-(0x1f+1)) == 0 && ((1<<uint((_la-178)))&((1<<(MySQLStatementParserDATA-178))|(1<<(MySQLStatementParserDATAFILE-178))|(1<<(MySQLStatementParserDATE-178))|(1<<(MySQLStatementParserDATETIME-178))|(1<<(MySQLStatementParserDAY-178))|(1<<(MySQLStatementParserDEALLOCATE-178))|(1<<(MySQLStatementParserDEFAULT_AUTH-178))|(1<<(MySQLStatementParserDEFINER-178))|(1<<(MySQLStatementParserDEFINITION-178))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-178))|(1<<(MySQLStatementParserDESCRIPTION-178))|(1<<(MySQLStatementParserDIAGNOSTICS-178))|(1<<(MySQLStatementParserDIRECTORY-178))|(1<<(MySQLStatementParserDISABLE-178))|(1<<(MySQLStatementParserDISCARD-178))|(1<<(MySQLStatementParserDISK-178)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(MySQLStatementParserDO-213))|(1<<(MySQLStatementParserDUMPFILE-213))|(1<<(MySQLStatementParserDUPLICATE-213))|(1<<(MySQLStatementParserDYNAMIC-213))|(1<<(MySQLStatementParserENABLE-213))|(1<<(MySQLStatementParserENCRYPTION-213))|(1<<(MySQLStatementParserEND-213))|(1<<(MySQLStatementParserENDS-213))|(1<<(MySQLStatementParserENFORCED-213))|(1<<(MySQLStatementParserENGINE-213))|(1<<(MySQLStatementParserENGINES-213))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-213))|(1<<(MySQLStatementParserENUM-213))|(1<<(MySQLStatementParserERROR-213))|(1<<(MySQLStatementParserERRORS-213))|(1<<(MySQLStatementParserESCAPE-213))|(1<<(MySQLStatementParserEVENT-213))|(1<<(MySQLStatementParserEVENTS-213))|(1<<(MySQLStatementParserEVERY-213))|(1<<(MySQLStatementParserEXCHANGE-213))|(1<<(MySQLStatementParserEXCLUDE-213))|(1<<(MySQLStatementParserEXECUTE-213)))) != 0) || (((_la-247)&-(0x1f+1)) == 0 && ((1<<uint((_la-247)))&((1<<(MySQLStatementParserEXPANSION-247))|(1<<(MySQLStatementParserEXPIRE-247))|(1<<(MySQLStatementParserEXPORT-247))|(1<<(MySQLStatementParserEXTENDED-247))|(1<<(MySQLStatementParserEXTENT_SIZE-247))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-247))|(1<<(MySQLStatementParserFAST-247))|(1<<(MySQLStatementParserFAULTS-247))|(1<<(MySQLStatementParserFILE-247))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-247))|(1<<(MySQLStatementParserFILTER-247))|(1<<(MySQLStatementParserFIRST-247))|(1<<(MySQLStatementParserFIXED-247))|(1<<(MySQLStatementParserFLUSH-247))|(1<<(MySQLStatementParserFOLLOWING-247))|(1<<(MySQLStatementParserFOLLOWS-247))|(1<<(MySQLStatementParserFORMAT-247))|(1<<(MySQLStatementParserFOUND-247))|(1<<(MySQLStatementParserFULL-247)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(MySQLStatementParserGENERAL-279))|(1<<(MySQLStatementParserGEOMETRY-279))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-279))|(1<<(MySQLStatementParserGET_FORMAT-279))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-279))|(1<<(MySQLStatementParserGLOBAL-279))|(1<<(MySQLStatementParserGRANTS-279))|(1<<(MySQLStatementParserGROUP_REPLICATION-279))|(1<<(MySQLStatementParserHANDLER-279))|(1<<(MySQLStatementParserHASH-279))|(1<<(MySQLStatementParserHELP-279))|(1<<(MySQLStatementParserHISTOGRAM-279))|(1<<(MySQLStatementParserHISTORY-279))|(1<<(MySQLStatementParserHOST-279))|(1<<(MySQLStatementParserHOSTS-279))|(1<<(MySQLStatementParserHOUR-279))|(1<<(MySQLStatementParserIDENTIFIED-279))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-279))|(1<<(MySQLStatementParserIMPORT-279)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySQLStatementParserINACTIVE-312))|(1<<(MySQLStatementParserINDEXES-312))|(1<<(MySQLStatementParserINITIAL_SIZE-312))|(1<<(MySQLStatementParserINSERT_METHOD-312))|(1<<(MySQLStatementParserINSTALL-312))|(1<<(MySQLStatementParserINSTANCE-312))|(1<<(MySQLStatementParserINVISIBLE-312))|(1<<(MySQLStatementParserINVOKER-312))|(1<<(MySQLStatementParserIO-312))|(1<<(MySQLStatementParserIPC-312))|(1<<(MySQLStatementParserISOLATION-312))|(1<<(MySQLStatementParserISSUER-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySQLStatementParserJSON-344))|(1<<(MySQLStatementParserJSON_VALUE-344))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-344))|(1<<(MySQLStatementParserLANGUAGE-344))|(1<<(MySQLStatementParserLAST-344))|(1<<(MySQLStatementParserLAST_VALUE-344))|(1<<(MySQLStatementParserLEAVES-344))|(1<<(MySQLStatementParserLESS-344))|(1<<(MySQLStatementParserLEVEL-344))|(1<<(MySQLStatementParserLINESTRING-344))|(1<<(MySQLStatementParserLIST-344))|(1<<(MySQLStatementParserLOCAL-344))|(1<<(MySQLStatementParserLOCKED-344))|(1<<(MySQLStatementParserLOCKS-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySQLStatementParserLOGFILE-376))|(1<<(MySQLStatementParserLOGS-376))|(1<<(MySQLStatementParserMASTER-376))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-376))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-376))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-376))|(1<<(MySQLStatementParserMASTER_DELAY-376))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-376))|(1<<(MySQLStatementParserMASTER_HOST-376))|(1<<(MySQLStatementParserMASTER_LOG_FILE-376))|(1<<(MySQLStatementParserMASTER_LOG_POS-376))|(1<<(MySQLStatementParserMASTER_PASSWORD-376))|(1<<(MySQLStatementParserMASTER_PORT-376))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-376))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-376))|(1<<(MySQLStatementParserMASTER_SERVER_ID-376))|(1<<(MySQLStatementParserMASTER_SSL-376))|(1<<(MySQLStatementParserMASTER_SSL_CA-376))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_CERT-376))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-376))|(1<<(MySQLStatementParserMASTER_SSL_CRL-376))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_KEY-376))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySQLStatementParserMASTER_TLS_VERSION-408))|(1<<(MySQLStatementParserMASTER_USER-408))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-408))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_ROWS-408))|(1<<(MySQLStatementParserMAX_SIZE-408))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-408))|(1<<(MySQLStatementParserMEDIUM-408))|(1<<(MySQLStatementParserMEMBER-408))|(1<<(MySQLStatementParserMEMORY-408))|(1<<(MySQLStatementParserMERGE-408))|(1<<(MySQLStatementParserMESSAGE_TEXT-408))|(1<<(MySQLStatementParserMICROSECOND-408))|(1<<(MySQLStatementParserMIGRATE-408))|(1<<(MySQLStatementParserMINUTE-408))|(1<<(MySQLStatementParserMIN_ROWS-408))|(1<<(MySQLStatementParserMODE-408))|(1<<(MySQLStatementParserMODIFY-408))|(1<<(MySQLStatementParserMONTH-408))|(1<<(MySQLStatementParserMULTILINESTRING-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySQLStatementParserMULTIPOINT-440))|(1<<(MySQLStatementParserMULTIPOLYGON-440))|(1<<(MySQLStatementParserMUTEX-440))|(1<<(MySQLStatementParserMYSQL_ERRNO-440))|(1<<(MySQLStatementParserNAME-440))|(1<<(MySQLStatementParserNAMES-440))|(1<<(MySQLStatementParserNATIONAL-440))|(1<<(MySQLStatementParserNCHAR-440))|(1<<(MySQLStatementParserNDBCLUSTER-440))|(1<<(MySQLStatementParserNESTED-440))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-440))|(1<<(MySQLStatementParserNEVER-440))|(1<<(MySQLStatementParserNEW-440))|(1<<(MySQLStatementParserNEXT-440))|(1<<(MySQLStatementParserNO-440))|(1<<(MySQLStatementParserNODEGROUP-440))|(1<<(MySQLStatementParserNONE-440))|(1<<(MySQLStatementParserNOWAIT-440))|(1<<(MySQLStatementParserNO_WAIT-440))|(1<<(MySQLStatementParserNULLS-440))|(1<<(MySQLStatementParserNUMBER-440))|(1<<(MySQLStatementParserNVARCHAR-440))|(1<<(MySQLStatementParserOFF-440))|(1<<(MySQLStatementParserOFFSET-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySQLStatementParserOJ-472))|(1<<(MySQLStatementParserOLD-472))|(1<<(MySQLStatementParserONE-472))|(1<<(MySQLStatementParserONLY-472))|(1<<(MySQLStatementParserOPEN-472))|(1<<(MySQLStatementParserOPTIONAL-472))|(1<<(MySQLStatementParserOPTIONS-472))|(1<<(MySQLStatementParserORDINALITY-472))|(1<<(MySQLStatementParserORGANIZATION-472))|(1<<(MySQLStatementParserOTHERS-472))|(1<<(MySQLStatementParserOWNER-472))|(1<<(MySQLStatementParserPACK_KEYS-472))|(1<<(MySQLStatementParserPAGE-472))|(1<<(MySQLStatementParserPARSER-472))|(1<<(MySQLStatementParserPARTIAL-472))|(1<<(MySQLStatementParserPARTITIONING-472))|(1<<(MySQLStatementParserPARTITIONS-472))|(1<<(MySQLStatementParserPASSWORD-472))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-472))|(1<<(MySQLStatementParserPATH-472)))) != 0) || (((_la-505)&-(0x1f+1)) == 0 && ((1<<uint((_la-505)))&((1<<(MySQLStatementParserPERSIST-505))|(1<<(MySQLStatementParserPERSIST_ONLY-505))|(1<<(MySQLStatementParserPHASE-505))|(1<<(MySQLStatementParserPLUGIN-505))|(1<<(MySQLStatementParserPLUGINS-505))|(1<<(MySQLStatementParserPLUGIN_DIR-505))|(1<<(MySQLStatementParserPOINT-505))|(1<<(MySQLStatementParserPOLYGON-505))|(1<<(MySQLStatementParserPORT-505))|(1<<(MySQLStatementParserPRECEDES-505))|(1<<(MySQLStatementParserPRECEDING-505))|(1<<(MySQLStatementParserPREPARE-505))|(1<<(MySQLStatementParserPRESERVE-505))|(1<<(MySQLStatementParserPREV-505))|(1<<(MySQLStatementParserPRIVILEGES-505))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-505))|(1<<(MySQLStatementParserPROCESS-505))|(1<<(MySQLStatementParserPROCESSLIST-505))|(1<<(MySQLStatementParserPROFILE-505))|(1<<(MySQLStatementParserPROFILES-505))|(1<<(MySQLStatementParserPROXY-505))|(1<<(MySQLStatementParserQUARTER-505))|(1<<(MySQLStatementParserQUERY-505))|(1<<(MySQLStatementParserQUICK-505))|(1<<(MySQLStatementParserRANDOM-505)))) != 0) || (((_la-538)&-(0x1f+1)) == 0 && ((1<<uint((_la-538)))&((1<<(MySQLStatementParserREAD_ONLY-538))|(1<<(MySQLStatementParserREBUILD-538))|(1<<(MySQLStatementParserRECOVER-538))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-538))|(1<<(MySQLStatementParserREDUNDANT-538))|(1<<(MySQLStatementParserREFERENCE-538))|(1<<(MySQLStatementParserRELAY-538))|(1<<(MySQLStatementParserRELAYLOG-538))|(1<<(MySQLStatementParserRELAY_LOG_FILE-538))|(1<<(MySQLStatementParserRELAY_LOG_POS-538))|(1<<(MySQLStatementParserRELAY_THREAD-538))|(1<<(MySQLStatementParserRELOAD-538))|(1<<(MySQLStatementParserREMOVE-538))|(1<<(MySQLStatementParserREORGANIZE-538))|(1<<(MySQLStatementParserREPAIR-538))|(1<<(MySQLStatementParserREPEATABLE-538))|(1<<(MySQLStatementParserREPLICATE_DO_DB-538))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-538)))) != 0) || (((_la-570)&-(0x1f+1)) == 0 && ((1<<uint((_la-570)))&((1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-570))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-570))|(1<<(MySQLStatementParserREPLICATION-570))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-570))|(1<<(MySQLStatementParserRESET-570))|(1<<(MySQLStatementParserRESOURCE-570))|(1<<(MySQLStatementParserRESPECT-570))|(1<<(MySQLStatementParserRESTART-570))|(1<<(MySQLStatementParserRESTORE-570))|(1<<(MySQLStatementParserRESUME-570))|(1<<(MySQLStatementParserRETAIN-570))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-570))|(1<<(MySQLStatementParserRETURNING-570))|(1<<(MySQLStatementParserRETURNS-570))|(1<<(MySQLStatementParserREUSE-570))|(1<<(MySQLStatementParserREVERSE-570))|(1<<(MySQLStatementParserROLE-570))|(1<<(MySQLStatementParserROLLBACK-570))|(1<<(MySQLStatementParserROLLUP-570))|(1<<(MySQLStatementParserROTATE-570))|(1<<(MySQLStatementParserROUTINE-570))|(1<<(MySQLStatementParserROW_COUNT-570))|(1<<(MySQLStatementParserROW_FORMAT-570)))) != 0) || (((_la-603)&-(0x1f+1)) == 0 && ((1<<uint((_la-603)))&((1<<(MySQLStatementParserRTREE-603))|(1<<(MySQLStatementParserSAVEPOINT-603))|(1<<(MySQLStatementParserSCHEDULE-603))|(1<<(MySQLStatementParserSCHEMA_NAME-603))|(1<<(MySQLStatementParserSECOND-603))|(1<<(MySQLStatementParserSECONDARY-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-603))|(1<<(MySQLStatementParserSECONDARY_LOAD-603))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-603))|(1<<(MySQLStatementParserSECURITY-603))|(1<<(MySQLStatementParserSERIAL-603))|(1<<(MySQLStatementParserSERIALIZABLE-603))|(1<<(MySQLStatementParserSERVER-603))|(1<<(MySQLStatementParserSESSION-603))|(1<<(MySQLStatementParserSHARE-603))|(1<<(MySQLStatementParserSHUTDOWN-603))|(1<<(MySQLStatementParserSIGNED-603))|(1<<(MySQLStatementParserSIMPLE-603))|(1<<(MySQLStatementParserSLAVE-603))|(1<<(MySQLStatementParserSLOW-603)))) != 0) || (((_la-635)&-(0x1f+1)) == 0 && ((1<<uint((_la-635)))&((1<<(MySQLStatementParserSNAPSHOT-635))|(1<<(MySQLStatementParserSOCKET-635))|(1<<(MySQLStatementParserSONAME-635))|(1<<(MySQLStatementParserSOUNDS-635))|(1<<(MySQLStatementParserSOURCE-635))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-635))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-635))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-635))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-635))|(1<<(MySQLStatementParserSQL_NO_CACHE-635))|(1<<(MySQLStatementParserSQL_THREAD-635))|(1<<(MySQLStatementParserSRID-635))|(1<<(MySQLStatementParserSTACKED-635))|(1<<(MySQLStatementParserSTART-635))|(1<<(MySQLStatementParserSTARTS-635))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-635))|(1<<(MySQLStatementParserSTATS_PERSISTENT-635))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-635))|(1<<(MySQLStatementParserSTATUS-635))|(1<<(MySQLStatementParserSTOP-635))|(1<<(MySQLStatementParserSTORAGE-635)))) != 0) || (((_la-669)&-(0x1f+1)) == 0 && ((1<<uint((_la-669)))&((1<<(MySQLStatementParserSTREAM-669))|(1<<(MySQLStatementParserSTRING-669))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-669))|(1<<(MySQLStatementParserSUBJECT-669))|(1<<(MySQLStatementParserSUBPARTITION-669))|(1<<(MySQLStatementParserSUBPARTITIONS-669))|(1<<(MySQLStatementParserSUPER-669))|(1<<(MySQLStatementParserSUSPEND-669))|(1<<(MySQLStatementParserSWAPS-669))|(1<<(MySQLStatementParserSWITCHES-669))|(1<<(MySQLStatementParserTABLES-669))|(1<<(MySQLStatementParserTABLESPACE-669))|(1<<(MySQLStatementParserTABLE_CHECKSUM-669))|(1<<(MySQLStatementParserTABLE_NAME-669))|(1<<(MySQLStatementParserTEMPORARY-669))|(1<<(MySQLStatementParserTEMPTABLE-669))|(1<<(MySQLStatementParserTEXT-669))|(1<<(MySQLStatementParserTHAN-669))|(1<<(MySQLStatementParserTHREAD_PRIORITY-669))|(1<<(MySQLStatementParserTIES-669))|(1<<(MySQLStatementParserTIME-669))|(1<<(MySQLStatementParserTIMESTAMP-669))|(1<<(MySQLStatementParserTIMESTAMP_ADD-669))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-669))|(1<<(MySQLStatementParserTLS-669)))) != 0) || (((_la-703)&-(0x1f+1)) == 0 && ((1<<uint((_la-703)))&((1<<(MySQLStatementParserTRANSACTION-703))|(1<<(MySQLStatementParserTRIGGERS-703))|(1<<(MySQLStatementParserTRUNCATE-703))|(1<<(MySQLStatementParserTYPE-703))|(1<<(MySQLStatementParserTYPES-703))|(1<<(MySQLStatementParserUNBOUNDED-703))|(1<<(MySQLStatementParserUNCOMMITTED-703))|(1<<(MySQLStatementParserUNDEFINED-703))|(1<<(MySQLStatementParserUNDOFILE-703))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-703))|(1<<(MySQLStatementParserUNICODE-703))|(1<<(MySQLStatementParserUNINSTALL-703))|(1<<(MySQLStatementParserUNKNOWN-703))|(1<<(MySQLStatementParserUNTIL-703))|(1<<(MySQLStatementParserUPGRADE-703))|(1<<(MySQLStatementParserUSER-703))|(1<<(MySQLStatementParserUSER_RESOURCES-703))|(1<<(MySQLStatementParserUSE_FRM-703)))) != 0) || (((_la-735)&-(0x1f+1)) == 0 && ((1<<uint((_la-735)))&((1<<(MySQLStatementParserVALIDATION-735))|(1<<(MySQLStatementParserVALUE-735))|(1<<(MySQLStatementParserVARIABLES-735))|(1<<(MySQLStatementParserVCPU-735))|(1<<(MySQLStatementParserVIEW-735))|(1<<(MySQLStatementParserVISIBLE-735))|(1<<(MySQLStatementParserWAIT-735))|(1<<(MySQLStatementParserWARNINGS-735))|(1<<(MySQLStatementParserWEEK-735))|(1<<(MySQLStatementParserWEIGHT_STRING-735))|(1<<(MySQLStatementParserWITHOUT-735))|(1<<(MySQLStatementParserWORK-735))|(1<<(MySQLStatementParserWRAPPER-735))|(1<<(MySQLStatementParserX509-735))|(1<<(MySQLStatementParserXA-735))|(1<<(MySQLStatementParserXID-735))|(1<<(MySQLStatementParserXML-735))|(1<<(MySQLStatementParserYEAR-735)))) != 0) || _la == MySQLStatementParserIDENTIFIER_ || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
		{
			p.SetState(2803)
			p.Identifier()
		}

	}
	p.SetState(2816)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserPARTITION {
		{
			p.SetState(2806)
			p.Match(MySQLStatementParserPARTITION)
		}
		{
			p.SetState(2807)
			p.Match(MySQLStatementParserBY)
		}
		{
			p.SetState(2808)
			p.expr(0)
		}
		p.SetState(2813)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(2809)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(2810)
				p.expr(0)
			}

			p.SetState(2815)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(2819)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserORDER {
		{
			p.SetState(2818)
			p.OrderByClause()
		}

	}
	p.SetState(2822)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserRANGE || _la == MySQLStatementParserROWS {
		{
			p.SetState(2821)
			p.FrameClause()
		}

	}
	{
		p.SetState(2824)
		p.Match(MySQLStatementParserRP_)
	}

	return localctx
}

// IFrameClauseContext is an interface to support dynamic dispatch.
type IFrameClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFrameClauseContext differentiates from other interfaces.
	IsFrameClauseContext()
}

type FrameClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrameClauseContext() *FrameClauseContext {
	var p = new(FrameClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_frameClause
	return p
}

func (*FrameClauseContext) IsFrameClauseContext() {}

func NewFrameClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FrameClauseContext {
	var p = new(FrameClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_frameClause

	return p
}

func (s *FrameClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *FrameClauseContext) ROWS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROWS, 0)
}

func (s *FrameClauseContext) RANGE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRANGE, 0)
}

func (s *FrameClauseContext) FrameStart() IFrameStartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrameStartContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFrameStartContext)
}

func (s *FrameClauseContext) FrameBetween() IFrameBetweenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrameBetweenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFrameBetweenContext)
}

func (s *FrameClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FrameClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FrameClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterFrameClause(s)
	}
}

func (s *FrameClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitFrameClause(s)
	}
}

func (s *FrameClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitFrameClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) FrameClause() (localctx IFrameClauseContext) {
	this := p
	_ = this

	localctx = NewFrameClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 362, MySQLStatementParserRULE_frameClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2826)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserRANGE || _la == MySQLStatementParserROWS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(2829)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserNOT_, MySQLStatementParserTILDE_, MySQLStatementParserPLUS_, MySQLStatementParserMINUS_, MySQLStatementParserLP_, MySQLStatementParserLBE_, MySQLStatementParserQUESTION_, MySQLStatementParserAT_, MySQLStatementParserMAX, MySQLStatementParserMIN, MySQLStatementParserSUM, MySQLStatementParserCOUNT, MySQLStatementParserGROUP_CONCAT, MySQLStatementParserCAST, MySQLStatementParserPOSITION, MySQLStatementParserSUBSTRING, MySQLStatementParserSUBSTR, MySQLStatementParserEXTRACT, MySQLStatementParserTRIM, MySQLStatementParserLAST_DAY, MySQLStatementParserTRADITIONAL, MySQLStatementParserTREE, MySQLStatementParserMYSQL_ADMIN, MySQLStatementParserINSTANT, MySQLStatementParserINPLACE, MySQLStatementParserCOPY, MySQLStatementParserUL_BINARY, MySQLStatementParserAUTOCOMMIT, MySQLStatementParserINNODB, MySQLStatementParserREDO_LOG, MySQLStatementParserACCOUNT, MySQLStatementParserACTION, MySQLStatementParserACTIVE, MySQLStatementParserADMIN, MySQLStatementParserAFTER, MySQLStatementParserAGAINST, MySQLStatementParserAGGREGATE, MySQLStatementParserALGORITHM, MySQLStatementParserALWAYS, MySQLStatementParserANY, MySQLStatementParserARRAY, MySQLStatementParserASCII, MySQLStatementParserAT, MySQLStatementParserATTRIBUTE, MySQLStatementParserAUTOEXTEND_SIZE, MySQLStatementParserAUTO_INCREMENT, MySQLStatementParserAVG, MySQLStatementParserBIT_XOR, MySQLStatementParserAVG_ROW_LENGTH, MySQLStatementParserBACKUP, MySQLStatementParserBEGIN, MySQLStatementParserBINARY, MySQLStatementParserBINLOG, MySQLStatementParserBIT, MySQLStatementParserBLOCK, MySQLStatementParserBOOL, MySQLStatementParserBOOLEAN, MySQLStatementParserBTREE, MySQLStatementParserBUCKETS, MySQLStatementParserBYTE, MySQLStatementParserCACHE, MySQLStatementParserCASCADED, MySQLStatementParserCASE, MySQLStatementParserCATALOG_NAME, MySQLStatementParserCHAIN, MySQLStatementParserCHANGED, MySQLStatementParserCHANNEL, MySQLStatementParserCHAR, MySQLStatementParserCHARSET, MySQLStatementParserCHECKSUM, MySQLStatementParserCIPHER, MySQLStatementParserCLASS_ORIGIN, MySQLStatementParserCLIENT, MySQLStatementParserCLONE, MySQLStatementParserCLOSE, MySQLStatementParserCOALESCE, MySQLStatementParserCODE, MySQLStatementParserCOLLATION, MySQLStatementParserCOLUMNS, MySQLStatementParserCOLUMN_FORMAT, MySQLStatementParserCOLUMN_NAME, MySQLStatementParserCOMMENT, MySQLStatementParserCOMMIT, MySQLStatementParserCOMMITTED, MySQLStatementParserCOMPACT, MySQLStatementParserCOMPLETION, MySQLStatementParserCOMPONENT, MySQLStatementParserCOMPRESSED, MySQLStatementParserCOMPRESSION, MySQLStatementParserCONCURRENT, MySQLStatementParserCONNECTION, MySQLStatementParserCONSISTENT, MySQLStatementParserCONSTRAINT_CATALOG, MySQLStatementParserCONSTRAINT_NAME, MySQLStatementParserCONSTRAINT_SCHEMA, MySQLStatementParserCONTAINS, MySQLStatementParserCONTEXT, MySQLStatementParserCONVERT, MySQLStatementParserCPU, MySQLStatementParserCUME_DIST, MySQLStatementParserCURRENT, MySQLStatementParserCURRENT_DATE, MySQLStatementParserCURRENT_TIME, MySQLStatementParserCURRENT_TIMESTAMP, MySQLStatementParserCURRENT_USER, MySQLStatementParserCURSOR_NAME, MySQLStatementParserDATA, MySQLStatementParserDATABASE, MySQLStatementParserDATAFILE, MySQLStatementParserDATE, MySQLStatementParserDATETIME, MySQLStatementParserDAY, MySQLStatementParserDEALLOCATE, MySQLStatementParserDEFAULT_AUTH, MySQLStatementParserDEFINER, MySQLStatementParserDEFINITION, MySQLStatementParserDELAY_KEY_WRITE, MySQLStatementParserDENSE_RANK, MySQLStatementParserDESCRIPTION, MySQLStatementParserDIAGNOSTICS, MySQLStatementParserDIRECTORY, MySQLStatementParserDISABLE, MySQLStatementParserDISCARD, MySQLStatementParserDISK, MySQLStatementParserDO, MySQLStatementParserDUMPFILE, MySQLStatementParserDUPLICATE, MySQLStatementParserDYNAMIC, MySQLStatementParserENABLE, MySQLStatementParserENCRYPTION, MySQLStatementParserEND, MySQLStatementParserENDS, MySQLStatementParserENFORCED, MySQLStatementParserENGINE, MySQLStatementParserENGINES, MySQLStatementParserENGINE_ATTRIBUTE, MySQLStatementParserENUM, MySQLStatementParserERROR, MySQLStatementParserERRORS, MySQLStatementParserESCAPE, MySQLStatementParserEVENT, MySQLStatementParserEVENTS, MySQLStatementParserEVERY, MySQLStatementParserEXCHANGE, MySQLStatementParserEXCLUDE, MySQLStatementParserEXECUTE, MySQLStatementParserEXISTS, MySQLStatementParserEXPANSION, MySQLStatementParserEXPIRE, MySQLStatementParserEXPORT, MySQLStatementParserEXTENDED, MySQLStatementParserEXTENT_SIZE, MySQLStatementParserFAILED_LOGIN_ATTEMPTS, MySQLStatementParserFALSE, MySQLStatementParserFAST, MySQLStatementParserFAULTS, MySQLStatementParserFILE, MySQLStatementParserFILE_BLOCK_SIZE, MySQLStatementParserFILTER, MySQLStatementParserFIRST, MySQLStatementParserFIRST_VALUE, MySQLStatementParserFIXED, MySQLStatementParserFLUSH, MySQLStatementParserFOLLOWING, MySQLStatementParserFOLLOWS, MySQLStatementParserFORMAT, MySQLStatementParserFOUND, MySQLStatementParserFULL, MySQLStatementParserGENERAL, MySQLStatementParserGEOMETRY, MySQLStatementParserGEOMETRYCOLLECTION, MySQLStatementParserGET_FORMAT, MySQLStatementParserGET_MASTER_PUBLIC_KEY, MySQLStatementParserGLOBAL, MySQLStatementParserGRANTS, MySQLStatementParserGROUP_REPLICATION, MySQLStatementParserHANDLER, MySQLStatementParserHASH, MySQLStatementParserHELP, MySQLStatementParserHISTOGRAM, MySQLStatementParserHISTORY, MySQLStatementParserHOST, MySQLStatementParserHOSTS, MySQLStatementParserHOUR, MySQLStatementParserIDENTIFIED, MySQLStatementParserIF, MySQLStatementParserIGNORE_SERVER_IDS, MySQLStatementParserIMPORT, MySQLStatementParserINACTIVE, MySQLStatementParserINDEXES, MySQLStatementParserINITIAL_SIZE, MySQLStatementParserINSERT_METHOD, MySQLStatementParserINSTALL, MySQLStatementParserINSTANCE, MySQLStatementParserINTERVAL, MySQLStatementParserINVISIBLE, MySQLStatementParserINVOKER, MySQLStatementParserIO, MySQLStatementParserIPC, MySQLStatementParserISOLATION, MySQLStatementParserISSUER, MySQLStatementParserJSON, MySQLStatementParserJSON_VALUE, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserLAG, MySQLStatementParserLANGUAGE, MySQLStatementParserLAST, MySQLStatementParserLAST_VALUE, MySQLStatementParserLEAD, MySQLStatementParserLEAVES, MySQLStatementParserLEFT, MySQLStatementParserLESS, MySQLStatementParserLEVEL, MySQLStatementParserLINESTRING, MySQLStatementParserLIST, MySQLStatementParserLOCAL, MySQLStatementParserLOCALTIME, MySQLStatementParserLOCALTIMESTAMP, MySQLStatementParserLOCKED, MySQLStatementParserLOCKS, MySQLStatementParserLOGFILE, MySQLStatementParserLOGS, MySQLStatementParserMASTER, MySQLStatementParserMASTER_AUTO_POSITION, MySQLStatementParserMASTER_COMPRESSION_ALGORITHM, MySQLStatementParserMASTER_CONNECT_RETRY, MySQLStatementParserMASTER_DELAY, MySQLStatementParserMASTER_HEARTBEAT_PERIOD, MySQLStatementParserMASTER_HOST, MySQLStatementParserMASTER_LOG_FILE, MySQLStatementParserMASTER_LOG_POS, MySQLStatementParserMASTER_PASSWORD, MySQLStatementParserMASTER_PORT, MySQLStatementParserMASTER_PUBLIC_KEY_PATH, MySQLStatementParserMASTER_RETRY_COUNT, MySQLStatementParserMASTER_SERVER_ID, MySQLStatementParserMASTER_SSL, MySQLStatementParserMASTER_SSL_CA, MySQLStatementParserMASTER_SSL_CAPATH, MySQLStatementParserMASTER_SSL_CERT, MySQLStatementParserMASTER_SSL_CIPHER, MySQLStatementParserMASTER_SSL_CRL, MySQLStatementParserMASTER_SSL_CRLPATH, MySQLStatementParserMASTER_SSL_KEY, MySQLStatementParserMASTER_TLS_CIPHERSUITES, MySQLStatementParserMASTER_TLS_VERSION, MySQLStatementParserMASTER_USER, MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL, MySQLStatementParserMATCH, MySQLStatementParserMAX_CONNECTIONS_PER_HOUR, MySQLStatementParserMAX_QUERIES_PER_HOUR, MySQLStatementParserMAX_ROWS, MySQLStatementParserMAX_SIZE, MySQLStatementParserMAX_UPDATES_PER_HOUR, MySQLStatementParserMAX_USER_CONNECTIONS, MySQLStatementParserMEDIUM, MySQLStatementParserMEMBER, MySQLStatementParserMEMORY, MySQLStatementParserMERGE, MySQLStatementParserMESSAGE_TEXT, MySQLStatementParserMICROSECOND, MySQLStatementParserMIGRATE, MySQLStatementParserMINUTE, MySQLStatementParserMIN_ROWS, MySQLStatementParserMOD, MySQLStatementParserMODE, MySQLStatementParserMODIFY, MySQLStatementParserMONTH, MySQLStatementParserMULTILINESTRING, MySQLStatementParserMULTIPOINT, MySQLStatementParserMULTIPOLYGON, MySQLStatementParserMUTEX, MySQLStatementParserMYSQL_ERRNO, MySQLStatementParserNAME, MySQLStatementParserNAMES, MySQLStatementParserNATIONAL, MySQLStatementParserNCHAR, MySQLStatementParserNDBCLUSTER, MySQLStatementParserNESTED, MySQLStatementParserNETWORK_NAMESPACE, MySQLStatementParserNEVER, MySQLStatementParserNEW, MySQLStatementParserNEXT, MySQLStatementParserNO, MySQLStatementParserNODEGROUP, MySQLStatementParserNONE, MySQLStatementParserNOT, MySQLStatementParserNOWAIT, MySQLStatementParserNO_WAIT, MySQLStatementParserNTH_VALUE, MySQLStatementParserNTILE, MySQLStatementParserNULL, MySQLStatementParserNULLS, MySQLStatementParserNUMBER, MySQLStatementParserNVARCHAR, MySQLStatementParserOFF, MySQLStatementParserOFFSET, MySQLStatementParserOJ, MySQLStatementParserOLD, MySQLStatementParserONE, MySQLStatementParserONLY, MySQLStatementParserOPEN, MySQLStatementParserOPTIONAL, MySQLStatementParserOPTIONS, MySQLStatementParserORDINALITY, MySQLStatementParserORGANIZATION, MySQLStatementParserOTHERS, MySQLStatementParserOWNER, MySQLStatementParserPACK_KEYS, MySQLStatementParserPAGE, MySQLStatementParserPARSER, MySQLStatementParserPARTIAL, MySQLStatementParserPARTITIONING, MySQLStatementParserPARTITIONS, MySQLStatementParserPASSWORD, MySQLStatementParserPASSWORD_LOCK_TIME, MySQLStatementParserPATH, MySQLStatementParserPERCENT_RANK, MySQLStatementParserPERSIST, MySQLStatementParserPERSIST_ONLY, MySQLStatementParserPHASE, MySQLStatementParserPLUGIN, MySQLStatementParserPLUGINS, MySQLStatementParserPLUGIN_DIR, MySQLStatementParserPOINT, MySQLStatementParserPOLYGON, MySQLStatementParserPORT, MySQLStatementParserPRECEDES, MySQLStatementParserPRECEDING, MySQLStatementParserPREPARE, MySQLStatementParserPRESERVE, MySQLStatementParserPREV, MySQLStatementParserPRIVILEGES, MySQLStatementParserPRIVILEGE_CHECKS_USER, MySQLStatementParserPROCESS, MySQLStatementParserPROCESSLIST, MySQLStatementParserPROFILE, MySQLStatementParserPROFILES, MySQLStatementParserPROXY, MySQLStatementParserQUARTER, MySQLStatementParserQUERY, MySQLStatementParserQUICK, MySQLStatementParserRANDOM, MySQLStatementParserRANK, MySQLStatementParserREAD_ONLY, MySQLStatementParserREBUILD, MySQLStatementParserRECOVER, MySQLStatementParserREDO_BUFFER_SIZE, MySQLStatementParserREDUNDANT, MySQLStatementParserREFERENCE, MySQLStatementParserRELAY, MySQLStatementParserRELAYLOG, MySQLStatementParserRELAY_LOG_FILE, MySQLStatementParserRELAY_LOG_POS, MySQLStatementParserRELAY_THREAD, MySQLStatementParserRELOAD, MySQLStatementParserREMOVE, MySQLStatementParserREORGANIZE, MySQLStatementParserREPAIR, MySQLStatementParserREPEATABLE, MySQLStatementParserREPLACE, MySQLStatementParserREPLICATE_DO_DB, MySQLStatementParserREPLICATE_DO_TABLE, MySQLStatementParserREPLICATE_IGNORE_DB, MySQLStatementParserREPLICATE_IGNORE_TABLE, MySQLStatementParserREPLICATE_REWRITE_DB, MySQLStatementParserREPLICATE_WILD_DO_TABLE, MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE, MySQLStatementParserREPLICATION, MySQLStatementParserREQUIRE_ROW_FORMAT, MySQLStatementParserRESET, MySQLStatementParserRESOURCE, MySQLStatementParserRESPECT, MySQLStatementParserRESTART, MySQLStatementParserRESTORE, MySQLStatementParserRESUME, MySQLStatementParserRETAIN, MySQLStatementParserRETURNED_SQLSTATE, MySQLStatementParserRETURNING, MySQLStatementParserRETURNS, MySQLStatementParserREUSE, MySQLStatementParserREVERSE, MySQLStatementParserRIGHT, MySQLStatementParserROLE, MySQLStatementParserROLLBACK, MySQLStatementParserROLLUP, MySQLStatementParserROTATE, MySQLStatementParserROUTINE, MySQLStatementParserROW, MySQLStatementParserROW_COUNT, MySQLStatementParserROW_FORMAT, MySQLStatementParserROW_NUMBER, MySQLStatementParserRTREE, MySQLStatementParserSAVEPOINT, MySQLStatementParserSCHEDULE, MySQLStatementParserSCHEMA, MySQLStatementParserSCHEMA_NAME, MySQLStatementParserSECOND, MySQLStatementParserSECONDARY, MySQLStatementParserSECONDARY_ENGINE, MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, MySQLStatementParserSECONDARY_LOAD, MySQLStatementParserSECONDARY_UNLOAD, MySQLStatementParserSECURITY, MySQLStatementParserSERIAL, MySQLStatementParserSERIALIZABLE, MySQLStatementParserSERVER, MySQLStatementParserSESSION, MySQLStatementParserSHARE, MySQLStatementParserSHUTDOWN, MySQLStatementParserSIGNED, MySQLStatementParserSIMPLE, MySQLStatementParserSLAVE, MySQLStatementParserSLOW, MySQLStatementParserSNAPSHOT, MySQLStatementParserSOCKET, MySQLStatementParserSONAME, MySQLStatementParserSOUNDS, MySQLStatementParserSOURCE, MySQLStatementParserSQL_AFTER_GTIDS, MySQLStatementParserSQL_AFTER_MTS_GAPS, MySQLStatementParserSQL_BEFORE_GTIDS, MySQLStatementParserSQL_BUFFER_RESULT, MySQLStatementParserSQL_NO_CACHE, MySQLStatementParserSQL_THREAD, MySQLStatementParserSRID, MySQLStatementParserSTACKED, MySQLStatementParserSTART, MySQLStatementParserSTARTS, MySQLStatementParserSTATS_AUTO_RECALC, MySQLStatementParserSTATS_PERSISTENT, MySQLStatementParserSTATS_SAMPLE_PAGES, MySQLStatementParserSTATUS, MySQLStatementParserSTOP, MySQLStatementParserSTORAGE, MySQLStatementParserSTREAM, MySQLStatementParserSTRING, MySQLStatementParserSUBCLASS_ORIGIN, MySQLStatementParserSUBJECT, MySQLStatementParserSUBPARTITION, MySQLStatementParserSUBPARTITIONS, MySQLStatementParserSUPER, MySQLStatementParserSUSPEND, MySQLStatementParserSWAPS, MySQLStatementParserSWITCHES, MySQLStatementParserTABLES, MySQLStatementParserTABLESPACE, MySQLStatementParserTABLE_CHECKSUM, MySQLStatementParserTABLE_NAME, MySQLStatementParserTEMPORARY, MySQLStatementParserTEMPTABLE, MySQLStatementParserTEXT, MySQLStatementParserTHAN, MySQLStatementParserTHREAD_PRIORITY, MySQLStatementParserTIES, MySQLStatementParserTIME, MySQLStatementParserTIMESTAMP, MySQLStatementParserTIMESTAMP_ADD, MySQLStatementParserTIMESTAMP_DIFF, MySQLStatementParserTLS, MySQLStatementParserTRANSACTION, MySQLStatementParserTRIGGERS, MySQLStatementParserTRUE, MySQLStatementParserTRUNCATE, MySQLStatementParserTYPE, MySQLStatementParserTYPES, MySQLStatementParserUNBOUNDED, MySQLStatementParserUNCOMMITTED, MySQLStatementParserUNDEFINED, MySQLStatementParserUNDOFILE, MySQLStatementParserUNDO_BUFFER_SIZE, MySQLStatementParserUNICODE, MySQLStatementParserUNINSTALL, MySQLStatementParserUNKNOWN, MySQLStatementParserUNTIL, MySQLStatementParserUPGRADE, MySQLStatementParserUSER, MySQLStatementParserUSER_RESOURCES, MySQLStatementParserUSE_FRM, MySQLStatementParserUTC_TIMESTAMP, MySQLStatementParserVALIDATION, MySQLStatementParserVALUE, MySQLStatementParserVALUES, MySQLStatementParserVARIABLES, MySQLStatementParserVCPU, MySQLStatementParserVIEW, MySQLStatementParserVISIBLE, MySQLStatementParserWAIT, MySQLStatementParserWARNINGS, MySQLStatementParserWEEK, MySQLStatementParserWEIGHT_STRING, MySQLStatementParserWITHOUT, MySQLStatementParserWORK, MySQLStatementParserWRAPPER, MySQLStatementParserX509, MySQLStatementParserXA, MySQLStatementParserXID, MySQLStatementParserXML, MySQLStatementParserYEAR, MySQLStatementParserIDENTIFIER_, MySQLStatementParserSINGLE_QUOTED_TEXT, MySQLStatementParserDOUBLE_QUOTED_TEXT, MySQLStatementParserNCHAR_TEXT, MySQLStatementParserUNDERSCORE_CHARSET, MySQLStatementParserNUMBER_, MySQLStatementParserHEX_DIGIT_, MySQLStatementParserBIT_NUM_:
		{
			p.SetState(2827)
			p.FrameStart()
		}

	case MySQLStatementParserBETWEEN:
		{
			p.SetState(2828)
			p.FrameBetween()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFrameStartContext is an interface to support dynamic dispatch.
type IFrameStartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFrameStartContext differentiates from other interfaces.
	IsFrameStartContext()
}

type FrameStartContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrameStartContext() *FrameStartContext {
	var p = new(FrameStartContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_frameStart
	return p
}

func (*FrameStartContext) IsFrameStartContext() {}

func NewFrameStartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FrameStartContext {
	var p = new(FrameStartContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_frameStart

	return p
}

func (s *FrameStartContext) GetParser() antlr.Parser { return s.parser }

func (s *FrameStartContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCURRENT, 0)
}

func (s *FrameStartContext) ROW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROW, 0)
}

func (s *FrameStartContext) UNBOUNDED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNBOUNDED, 0)
}

func (s *FrameStartContext) PRECEDING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPRECEDING, 0)
}

func (s *FrameStartContext) FOLLOWING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOLLOWING, 0)
}

func (s *FrameStartContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *FrameStartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FrameStartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FrameStartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterFrameStart(s)
	}
}

func (s *FrameStartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitFrameStart(s)
	}
}

func (s *FrameStartContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitFrameStart(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) FrameStart() (localctx IFrameStartContext) {
	this := p
	_ = this

	localctx = NewFrameStartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 364, MySQLStatementParserRULE_frameStart)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2843)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 254, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2831)
			p.Match(MySQLStatementParserCURRENT)
		}
		{
			p.SetState(2832)
			p.Match(MySQLStatementParserROW)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2833)
			p.Match(MySQLStatementParserUNBOUNDED)
		}
		{
			p.SetState(2834)
			p.Match(MySQLStatementParserPRECEDING)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2835)
			p.Match(MySQLStatementParserUNBOUNDED)
		}
		{
			p.SetState(2836)
			p.Match(MySQLStatementParserFOLLOWING)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2837)
			p.expr(0)
		}
		{
			p.SetState(2838)
			p.Match(MySQLStatementParserPRECEDING)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2840)
			p.expr(0)
		}
		{
			p.SetState(2841)
			p.Match(MySQLStatementParserFOLLOWING)
		}

	}

	return localctx
}

// IFrameEndContext is an interface to support dynamic dispatch.
type IFrameEndContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFrameEndContext differentiates from other interfaces.
	IsFrameEndContext()
}

type FrameEndContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrameEndContext() *FrameEndContext {
	var p = new(FrameEndContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_frameEnd
	return p
}

func (*FrameEndContext) IsFrameEndContext() {}

func NewFrameEndContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FrameEndContext {
	var p = new(FrameEndContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_frameEnd

	return p
}

func (s *FrameEndContext) GetParser() antlr.Parser { return s.parser }

func (s *FrameEndContext) FrameStart() IFrameStartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrameStartContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFrameStartContext)
}

func (s *FrameEndContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FrameEndContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FrameEndContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterFrameEnd(s)
	}
}

func (s *FrameEndContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitFrameEnd(s)
	}
}

func (s *FrameEndContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitFrameEnd(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) FrameEnd() (localctx IFrameEndContext) {
	this := p
	_ = this

	localctx = NewFrameEndContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 366, MySQLStatementParserRULE_frameEnd)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2845)
		p.FrameStart()
	}

	return localctx
}

// IFrameBetweenContext is an interface to support dynamic dispatch.
type IFrameBetweenContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFrameBetweenContext differentiates from other interfaces.
	IsFrameBetweenContext()
}

type FrameBetweenContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrameBetweenContext() *FrameBetweenContext {
	var p = new(FrameBetweenContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_frameBetween
	return p
}

func (*FrameBetweenContext) IsFrameBetweenContext() {}

func NewFrameBetweenContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FrameBetweenContext {
	var p = new(FrameBetweenContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_frameBetween

	return p
}

func (s *FrameBetweenContext) GetParser() antlr.Parser { return s.parser }

func (s *FrameBetweenContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBETWEEN, 0)
}

func (s *FrameBetweenContext) FrameStart() IFrameStartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrameStartContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFrameStartContext)
}

func (s *FrameBetweenContext) AND() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAND, 0)
}

func (s *FrameBetweenContext) FrameEnd() IFrameEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrameEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFrameEndContext)
}

func (s *FrameBetweenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FrameBetweenContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FrameBetweenContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterFrameBetween(s)
	}
}

func (s *FrameBetweenContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitFrameBetween(s)
	}
}

func (s *FrameBetweenContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitFrameBetween(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) FrameBetween() (localctx IFrameBetweenContext) {
	this := p
	_ = this

	localctx = NewFrameBetweenContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 368, MySQLStatementParserRULE_frameBetween)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2847)
		p.Match(MySQLStatementParserBETWEEN)
	}
	{
		p.SetState(2848)
		p.FrameStart()
	}
	{
		p.SetState(2849)
		p.Match(MySQLStatementParserAND)
	}
	{
		p.SetState(2850)
		p.FrameEnd()
	}

	return localctx
}

// ISpecialFunctionContext is an interface to support dynamic dispatch.
type ISpecialFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSpecialFunctionContext differentiates from other interfaces.
	IsSpecialFunctionContext()
}

type SpecialFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySpecialFunctionContext() *SpecialFunctionContext {
	var p = new(SpecialFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_specialFunction
	return p
}

func (*SpecialFunctionContext) IsSpecialFunctionContext() {}

func NewSpecialFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SpecialFunctionContext {
	var p = new(SpecialFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_specialFunction

	return p
}

func (s *SpecialFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *SpecialFunctionContext) GroupConcatFunction() IGroupConcatFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupConcatFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroupConcatFunctionContext)
}

func (s *SpecialFunctionContext) WindowFunction() IWindowFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindowFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindowFunctionContext)
}

func (s *SpecialFunctionContext) CastFunction() ICastFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICastFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICastFunctionContext)
}

func (s *SpecialFunctionContext) ConvertFunction() IConvertFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConvertFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConvertFunctionContext)
}

func (s *SpecialFunctionContext) PositionFunction() IPositionFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPositionFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPositionFunctionContext)
}

func (s *SpecialFunctionContext) SubstringFunction() ISubstringFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubstringFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubstringFunctionContext)
}

func (s *SpecialFunctionContext) ExtractFunction() IExtractFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExtractFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExtractFunctionContext)
}

func (s *SpecialFunctionContext) CharFunction() ICharFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharFunctionContext)
}

func (s *SpecialFunctionContext) TrimFunction() ITrimFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITrimFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITrimFunctionContext)
}

func (s *SpecialFunctionContext) WeightStringFunction() IWeightStringFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWeightStringFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWeightStringFunctionContext)
}

func (s *SpecialFunctionContext) ValuesFunction() IValuesFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValuesFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValuesFunctionContext)
}

func (s *SpecialFunctionContext) CurrentUserFunction() ICurrentUserFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICurrentUserFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICurrentUserFunctionContext)
}

func (s *SpecialFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SpecialFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SpecialFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSpecialFunction(s)
	}
}

func (s *SpecialFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSpecialFunction(s)
	}
}

func (s *SpecialFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSpecialFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SpecialFunction() (localctx ISpecialFunctionContext) {
	this := p
	_ = this

	localctx = NewSpecialFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 370, MySQLStatementParserRULE_specialFunction)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2864)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserGROUP_CONCAT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2852)
			p.GroupConcatFunction()
		}

	case MySQLStatementParserCUME_DIST, MySQLStatementParserDENSE_RANK, MySQLStatementParserFIRST_VALUE, MySQLStatementParserLAG, MySQLStatementParserLAST_VALUE, MySQLStatementParserLEAD, MySQLStatementParserNTH_VALUE, MySQLStatementParserNTILE, MySQLStatementParserPERCENT_RANK, MySQLStatementParserRANK, MySQLStatementParserROW_NUMBER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2853)
			p.WindowFunction()
		}

	case MySQLStatementParserCAST:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2854)
			p.CastFunction()
		}

	case MySQLStatementParserCONVERT:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2855)
			p.ConvertFunction()
		}

	case MySQLStatementParserPOSITION:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2856)
			p.PositionFunction()
		}

	case MySQLStatementParserSUBSTRING, MySQLStatementParserSUBSTR:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2857)
			p.SubstringFunction()
		}

	case MySQLStatementParserEXTRACT:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2858)
			p.ExtractFunction()
		}

	case MySQLStatementParserCHAR:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2859)
			p.CharFunction()
		}

	case MySQLStatementParserTRIM:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2860)
			p.TrimFunction()
		}

	case MySQLStatementParserWEIGHT_STRING:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2861)
			p.WeightStringFunction()
		}

	case MySQLStatementParserVALUES:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2862)
			p.ValuesFunction()
		}

	case MySQLStatementParserCURRENT_USER:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(2863)
			p.CurrentUserFunction()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICurrentUserFunctionContext is an interface to support dynamic dispatch.
type ICurrentUserFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCurrentUserFunctionContext differentiates from other interfaces.
	IsCurrentUserFunctionContext()
}

type CurrentUserFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCurrentUserFunctionContext() *CurrentUserFunctionContext {
	var p = new(CurrentUserFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_currentUserFunction
	return p
}

func (*CurrentUserFunctionContext) IsCurrentUserFunctionContext() {}

func NewCurrentUserFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CurrentUserFunctionContext {
	var p = new(CurrentUserFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_currentUserFunction

	return p
}

func (s *CurrentUserFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *CurrentUserFunctionContext) CURRENT_USER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCURRENT_USER, 0)
}

func (s *CurrentUserFunctionContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *CurrentUserFunctionContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *CurrentUserFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CurrentUserFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CurrentUserFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCurrentUserFunction(s)
	}
}

func (s *CurrentUserFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCurrentUserFunction(s)
	}
}

func (s *CurrentUserFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCurrentUserFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CurrentUserFunction() (localctx ICurrentUserFunctionContext) {
	this := p
	_ = this

	localctx = NewCurrentUserFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 372, MySQLStatementParserRULE_currentUserFunction)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2866)
		p.Match(MySQLStatementParserCURRENT_USER)
	}
	p.SetState(2869)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 256, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2867)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(2868)
			p.Match(MySQLStatementParserRP_)
		}

	}

	return localctx
}

// IGroupConcatFunctionContext is an interface to support dynamic dispatch.
type IGroupConcatFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroupConcatFunctionContext differentiates from other interfaces.
	IsGroupConcatFunctionContext()
}

type GroupConcatFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupConcatFunctionContext() *GroupConcatFunctionContext {
	var p = new(GroupConcatFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_groupConcatFunction
	return p
}

func (*GroupConcatFunctionContext) IsGroupConcatFunctionContext() {}

func NewGroupConcatFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupConcatFunctionContext {
	var p = new(GroupConcatFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_groupConcatFunction

	return p
}

func (s *GroupConcatFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupConcatFunctionContext) GROUP_CONCAT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGROUP_CONCAT, 0)
}

func (s *GroupConcatFunctionContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *GroupConcatFunctionContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *GroupConcatFunctionContext) Distinct() IDistinctContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDistinctContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDistinctContext)
}

func (s *GroupConcatFunctionContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *GroupConcatFunctionContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *GroupConcatFunctionContext) ASTERISK_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserASTERISK_, 0)
}

func (s *GroupConcatFunctionContext) OrderByClause() IOrderByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderByClauseContext)
}

func (s *GroupConcatFunctionContext) SEPARATOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSEPARATOR, 0)
}

func (s *GroupConcatFunctionContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *GroupConcatFunctionContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *GroupConcatFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupConcatFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupConcatFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterGroupConcatFunction(s)
	}
}

func (s *GroupConcatFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitGroupConcatFunction(s)
	}
}

func (s *GroupConcatFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitGroupConcatFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) GroupConcatFunction() (localctx IGroupConcatFunctionContext) {
	this := p
	_ = this

	localctx = NewGroupConcatFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 374, MySQLStatementParserRULE_groupConcatFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2871)
		p.Match(MySQLStatementParserGROUP_CONCAT)
	}
	{
		p.SetState(2872)
		p.Match(MySQLStatementParserLP_)
	}
	p.SetState(2874)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserDISTINCT {
		{
			p.SetState(2873)
			p.Distinct()
		}

	}
	p.SetState(2885)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserNOT_, MySQLStatementParserTILDE_, MySQLStatementParserPLUS_, MySQLStatementParserMINUS_, MySQLStatementParserLP_, MySQLStatementParserLBE_, MySQLStatementParserQUESTION_, MySQLStatementParserAT_, MySQLStatementParserMAX, MySQLStatementParserMIN, MySQLStatementParserSUM, MySQLStatementParserCOUNT, MySQLStatementParserGROUP_CONCAT, MySQLStatementParserCAST, MySQLStatementParserPOSITION, MySQLStatementParserSUBSTRING, MySQLStatementParserSUBSTR, MySQLStatementParserEXTRACT, MySQLStatementParserTRIM, MySQLStatementParserLAST_DAY, MySQLStatementParserTRADITIONAL, MySQLStatementParserTREE, MySQLStatementParserMYSQL_ADMIN, MySQLStatementParserINSTANT, MySQLStatementParserINPLACE, MySQLStatementParserCOPY, MySQLStatementParserUL_BINARY, MySQLStatementParserAUTOCOMMIT, MySQLStatementParserINNODB, MySQLStatementParserREDO_LOG, MySQLStatementParserACCOUNT, MySQLStatementParserACTION, MySQLStatementParserACTIVE, MySQLStatementParserADMIN, MySQLStatementParserAFTER, MySQLStatementParserAGAINST, MySQLStatementParserAGGREGATE, MySQLStatementParserALGORITHM, MySQLStatementParserALWAYS, MySQLStatementParserANY, MySQLStatementParserARRAY, MySQLStatementParserASCII, MySQLStatementParserAT, MySQLStatementParserATTRIBUTE, MySQLStatementParserAUTOEXTEND_SIZE, MySQLStatementParserAUTO_INCREMENT, MySQLStatementParserAVG, MySQLStatementParserBIT_XOR, MySQLStatementParserAVG_ROW_LENGTH, MySQLStatementParserBACKUP, MySQLStatementParserBEGIN, MySQLStatementParserBINARY, MySQLStatementParserBINLOG, MySQLStatementParserBIT, MySQLStatementParserBLOCK, MySQLStatementParserBOOL, MySQLStatementParserBOOLEAN, MySQLStatementParserBTREE, MySQLStatementParserBUCKETS, MySQLStatementParserBYTE, MySQLStatementParserCACHE, MySQLStatementParserCASCADED, MySQLStatementParserCASE, MySQLStatementParserCATALOG_NAME, MySQLStatementParserCHAIN, MySQLStatementParserCHANGED, MySQLStatementParserCHANNEL, MySQLStatementParserCHAR, MySQLStatementParserCHARSET, MySQLStatementParserCHECKSUM, MySQLStatementParserCIPHER, MySQLStatementParserCLASS_ORIGIN, MySQLStatementParserCLIENT, MySQLStatementParserCLONE, MySQLStatementParserCLOSE, MySQLStatementParserCOALESCE, MySQLStatementParserCODE, MySQLStatementParserCOLLATION, MySQLStatementParserCOLUMNS, MySQLStatementParserCOLUMN_FORMAT, MySQLStatementParserCOLUMN_NAME, MySQLStatementParserCOMMENT, MySQLStatementParserCOMMIT, MySQLStatementParserCOMMITTED, MySQLStatementParserCOMPACT, MySQLStatementParserCOMPLETION, MySQLStatementParserCOMPONENT, MySQLStatementParserCOMPRESSED, MySQLStatementParserCOMPRESSION, MySQLStatementParserCONCURRENT, MySQLStatementParserCONNECTION, MySQLStatementParserCONSISTENT, MySQLStatementParserCONSTRAINT_CATALOG, MySQLStatementParserCONSTRAINT_NAME, MySQLStatementParserCONSTRAINT_SCHEMA, MySQLStatementParserCONTAINS, MySQLStatementParserCONTEXT, MySQLStatementParserCONVERT, MySQLStatementParserCPU, MySQLStatementParserCUME_DIST, MySQLStatementParserCURRENT, MySQLStatementParserCURRENT_DATE, MySQLStatementParserCURRENT_TIME, MySQLStatementParserCURRENT_TIMESTAMP, MySQLStatementParserCURRENT_USER, MySQLStatementParserCURSOR_NAME, MySQLStatementParserDATA, MySQLStatementParserDATABASE, MySQLStatementParserDATAFILE, MySQLStatementParserDATE, MySQLStatementParserDATETIME, MySQLStatementParserDAY, MySQLStatementParserDEALLOCATE, MySQLStatementParserDEFAULT_AUTH, MySQLStatementParserDEFINER, MySQLStatementParserDEFINITION, MySQLStatementParserDELAY_KEY_WRITE, MySQLStatementParserDENSE_RANK, MySQLStatementParserDESCRIPTION, MySQLStatementParserDIAGNOSTICS, MySQLStatementParserDIRECTORY, MySQLStatementParserDISABLE, MySQLStatementParserDISCARD, MySQLStatementParserDISK, MySQLStatementParserDO, MySQLStatementParserDUMPFILE, MySQLStatementParserDUPLICATE, MySQLStatementParserDYNAMIC, MySQLStatementParserENABLE, MySQLStatementParserENCRYPTION, MySQLStatementParserEND, MySQLStatementParserENDS, MySQLStatementParserENFORCED, MySQLStatementParserENGINE, MySQLStatementParserENGINES, MySQLStatementParserENGINE_ATTRIBUTE, MySQLStatementParserENUM, MySQLStatementParserERROR, MySQLStatementParserERRORS, MySQLStatementParserESCAPE, MySQLStatementParserEVENT, MySQLStatementParserEVENTS, MySQLStatementParserEVERY, MySQLStatementParserEXCHANGE, MySQLStatementParserEXCLUDE, MySQLStatementParserEXECUTE, MySQLStatementParserEXISTS, MySQLStatementParserEXPANSION, MySQLStatementParserEXPIRE, MySQLStatementParserEXPORT, MySQLStatementParserEXTENDED, MySQLStatementParserEXTENT_SIZE, MySQLStatementParserFAILED_LOGIN_ATTEMPTS, MySQLStatementParserFALSE, MySQLStatementParserFAST, MySQLStatementParserFAULTS, MySQLStatementParserFILE, MySQLStatementParserFILE_BLOCK_SIZE, MySQLStatementParserFILTER, MySQLStatementParserFIRST, MySQLStatementParserFIRST_VALUE, MySQLStatementParserFIXED, MySQLStatementParserFLUSH, MySQLStatementParserFOLLOWING, MySQLStatementParserFOLLOWS, MySQLStatementParserFORMAT, MySQLStatementParserFOUND, MySQLStatementParserFULL, MySQLStatementParserGENERAL, MySQLStatementParserGEOMETRY, MySQLStatementParserGEOMETRYCOLLECTION, MySQLStatementParserGET_FORMAT, MySQLStatementParserGET_MASTER_PUBLIC_KEY, MySQLStatementParserGLOBAL, MySQLStatementParserGRANTS, MySQLStatementParserGROUP_REPLICATION, MySQLStatementParserHANDLER, MySQLStatementParserHASH, MySQLStatementParserHELP, MySQLStatementParserHISTOGRAM, MySQLStatementParserHISTORY, MySQLStatementParserHOST, MySQLStatementParserHOSTS, MySQLStatementParserHOUR, MySQLStatementParserIDENTIFIED, MySQLStatementParserIF, MySQLStatementParserIGNORE_SERVER_IDS, MySQLStatementParserIMPORT, MySQLStatementParserINACTIVE, MySQLStatementParserINDEXES, MySQLStatementParserINITIAL_SIZE, MySQLStatementParserINSERT_METHOD, MySQLStatementParserINSTALL, MySQLStatementParserINSTANCE, MySQLStatementParserINTERVAL, MySQLStatementParserINVISIBLE, MySQLStatementParserINVOKER, MySQLStatementParserIO, MySQLStatementParserIPC, MySQLStatementParserISOLATION, MySQLStatementParserISSUER, MySQLStatementParserJSON, MySQLStatementParserJSON_VALUE, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserLAG, MySQLStatementParserLANGUAGE, MySQLStatementParserLAST, MySQLStatementParserLAST_VALUE, MySQLStatementParserLEAD, MySQLStatementParserLEAVES, MySQLStatementParserLEFT, MySQLStatementParserLESS, MySQLStatementParserLEVEL, MySQLStatementParserLINESTRING, MySQLStatementParserLIST, MySQLStatementParserLOCAL, MySQLStatementParserLOCALTIME, MySQLStatementParserLOCALTIMESTAMP, MySQLStatementParserLOCKED, MySQLStatementParserLOCKS, MySQLStatementParserLOGFILE, MySQLStatementParserLOGS, MySQLStatementParserMASTER, MySQLStatementParserMASTER_AUTO_POSITION, MySQLStatementParserMASTER_COMPRESSION_ALGORITHM, MySQLStatementParserMASTER_CONNECT_RETRY, MySQLStatementParserMASTER_DELAY, MySQLStatementParserMASTER_HEARTBEAT_PERIOD, MySQLStatementParserMASTER_HOST, MySQLStatementParserMASTER_LOG_FILE, MySQLStatementParserMASTER_LOG_POS, MySQLStatementParserMASTER_PASSWORD, MySQLStatementParserMASTER_PORT, MySQLStatementParserMASTER_PUBLIC_KEY_PATH, MySQLStatementParserMASTER_RETRY_COUNT, MySQLStatementParserMASTER_SERVER_ID, MySQLStatementParserMASTER_SSL, MySQLStatementParserMASTER_SSL_CA, MySQLStatementParserMASTER_SSL_CAPATH, MySQLStatementParserMASTER_SSL_CERT, MySQLStatementParserMASTER_SSL_CIPHER, MySQLStatementParserMASTER_SSL_CRL, MySQLStatementParserMASTER_SSL_CRLPATH, MySQLStatementParserMASTER_SSL_KEY, MySQLStatementParserMASTER_TLS_CIPHERSUITES, MySQLStatementParserMASTER_TLS_VERSION, MySQLStatementParserMASTER_USER, MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL, MySQLStatementParserMATCH, MySQLStatementParserMAX_CONNECTIONS_PER_HOUR, MySQLStatementParserMAX_QUERIES_PER_HOUR, MySQLStatementParserMAX_ROWS, MySQLStatementParserMAX_SIZE, MySQLStatementParserMAX_UPDATES_PER_HOUR, MySQLStatementParserMAX_USER_CONNECTIONS, MySQLStatementParserMEDIUM, MySQLStatementParserMEMBER, MySQLStatementParserMEMORY, MySQLStatementParserMERGE, MySQLStatementParserMESSAGE_TEXT, MySQLStatementParserMICROSECOND, MySQLStatementParserMIGRATE, MySQLStatementParserMINUTE, MySQLStatementParserMIN_ROWS, MySQLStatementParserMOD, MySQLStatementParserMODE, MySQLStatementParserMODIFY, MySQLStatementParserMONTH, MySQLStatementParserMULTILINESTRING, MySQLStatementParserMULTIPOINT, MySQLStatementParserMULTIPOLYGON, MySQLStatementParserMUTEX, MySQLStatementParserMYSQL_ERRNO, MySQLStatementParserNAME, MySQLStatementParserNAMES, MySQLStatementParserNATIONAL, MySQLStatementParserNCHAR, MySQLStatementParserNDBCLUSTER, MySQLStatementParserNESTED, MySQLStatementParserNETWORK_NAMESPACE, MySQLStatementParserNEVER, MySQLStatementParserNEW, MySQLStatementParserNEXT, MySQLStatementParserNO, MySQLStatementParserNODEGROUP, MySQLStatementParserNONE, MySQLStatementParserNOT, MySQLStatementParserNOWAIT, MySQLStatementParserNO_WAIT, MySQLStatementParserNTH_VALUE, MySQLStatementParserNTILE, MySQLStatementParserNULL, MySQLStatementParserNULLS, MySQLStatementParserNUMBER, MySQLStatementParserNVARCHAR, MySQLStatementParserOFF, MySQLStatementParserOFFSET, MySQLStatementParserOJ, MySQLStatementParserOLD, MySQLStatementParserONE, MySQLStatementParserONLY, MySQLStatementParserOPEN, MySQLStatementParserOPTIONAL, MySQLStatementParserOPTIONS, MySQLStatementParserORDINALITY, MySQLStatementParserORGANIZATION, MySQLStatementParserOTHERS, MySQLStatementParserOWNER, MySQLStatementParserPACK_KEYS, MySQLStatementParserPAGE, MySQLStatementParserPARSER, MySQLStatementParserPARTIAL, MySQLStatementParserPARTITIONING, MySQLStatementParserPARTITIONS, MySQLStatementParserPASSWORD, MySQLStatementParserPASSWORD_LOCK_TIME, MySQLStatementParserPATH, MySQLStatementParserPERCENT_RANK, MySQLStatementParserPERSIST, MySQLStatementParserPERSIST_ONLY, MySQLStatementParserPHASE, MySQLStatementParserPLUGIN, MySQLStatementParserPLUGINS, MySQLStatementParserPLUGIN_DIR, MySQLStatementParserPOINT, MySQLStatementParserPOLYGON, MySQLStatementParserPORT, MySQLStatementParserPRECEDES, MySQLStatementParserPRECEDING, MySQLStatementParserPREPARE, MySQLStatementParserPRESERVE, MySQLStatementParserPREV, MySQLStatementParserPRIVILEGES, MySQLStatementParserPRIVILEGE_CHECKS_USER, MySQLStatementParserPROCESS, MySQLStatementParserPROCESSLIST, MySQLStatementParserPROFILE, MySQLStatementParserPROFILES, MySQLStatementParserPROXY, MySQLStatementParserQUARTER, MySQLStatementParserQUERY, MySQLStatementParserQUICK, MySQLStatementParserRANDOM, MySQLStatementParserRANK, MySQLStatementParserREAD_ONLY, MySQLStatementParserREBUILD, MySQLStatementParserRECOVER, MySQLStatementParserREDO_BUFFER_SIZE, MySQLStatementParserREDUNDANT, MySQLStatementParserREFERENCE, MySQLStatementParserRELAY, MySQLStatementParserRELAYLOG, MySQLStatementParserRELAY_LOG_FILE, MySQLStatementParserRELAY_LOG_POS, MySQLStatementParserRELAY_THREAD, MySQLStatementParserRELOAD, MySQLStatementParserREMOVE, MySQLStatementParserREORGANIZE, MySQLStatementParserREPAIR, MySQLStatementParserREPEATABLE, MySQLStatementParserREPLACE, MySQLStatementParserREPLICATE_DO_DB, MySQLStatementParserREPLICATE_DO_TABLE, MySQLStatementParserREPLICATE_IGNORE_DB, MySQLStatementParserREPLICATE_IGNORE_TABLE, MySQLStatementParserREPLICATE_REWRITE_DB, MySQLStatementParserREPLICATE_WILD_DO_TABLE, MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE, MySQLStatementParserREPLICATION, MySQLStatementParserREQUIRE_ROW_FORMAT, MySQLStatementParserRESET, MySQLStatementParserRESOURCE, MySQLStatementParserRESPECT, MySQLStatementParserRESTART, MySQLStatementParserRESTORE, MySQLStatementParserRESUME, MySQLStatementParserRETAIN, MySQLStatementParserRETURNED_SQLSTATE, MySQLStatementParserRETURNING, MySQLStatementParserRETURNS, MySQLStatementParserREUSE, MySQLStatementParserREVERSE, MySQLStatementParserRIGHT, MySQLStatementParserROLE, MySQLStatementParserROLLBACK, MySQLStatementParserROLLUP, MySQLStatementParserROTATE, MySQLStatementParserROUTINE, MySQLStatementParserROW, MySQLStatementParserROW_COUNT, MySQLStatementParserROW_FORMAT, MySQLStatementParserROW_NUMBER, MySQLStatementParserRTREE, MySQLStatementParserSAVEPOINT, MySQLStatementParserSCHEDULE, MySQLStatementParserSCHEMA, MySQLStatementParserSCHEMA_NAME, MySQLStatementParserSECOND, MySQLStatementParserSECONDARY, MySQLStatementParserSECONDARY_ENGINE, MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, MySQLStatementParserSECONDARY_LOAD, MySQLStatementParserSECONDARY_UNLOAD, MySQLStatementParserSECURITY, MySQLStatementParserSERIAL, MySQLStatementParserSERIALIZABLE, MySQLStatementParserSERVER, MySQLStatementParserSESSION, MySQLStatementParserSHARE, MySQLStatementParserSHUTDOWN, MySQLStatementParserSIGNED, MySQLStatementParserSIMPLE, MySQLStatementParserSLAVE, MySQLStatementParserSLOW, MySQLStatementParserSNAPSHOT, MySQLStatementParserSOCKET, MySQLStatementParserSONAME, MySQLStatementParserSOUNDS, MySQLStatementParserSOURCE, MySQLStatementParserSQL_AFTER_GTIDS, MySQLStatementParserSQL_AFTER_MTS_GAPS, MySQLStatementParserSQL_BEFORE_GTIDS, MySQLStatementParserSQL_BUFFER_RESULT, MySQLStatementParserSQL_NO_CACHE, MySQLStatementParserSQL_THREAD, MySQLStatementParserSRID, MySQLStatementParserSTACKED, MySQLStatementParserSTART, MySQLStatementParserSTARTS, MySQLStatementParserSTATS_AUTO_RECALC, MySQLStatementParserSTATS_PERSISTENT, MySQLStatementParserSTATS_SAMPLE_PAGES, MySQLStatementParserSTATUS, MySQLStatementParserSTOP, MySQLStatementParserSTORAGE, MySQLStatementParserSTREAM, MySQLStatementParserSTRING, MySQLStatementParserSUBCLASS_ORIGIN, MySQLStatementParserSUBJECT, MySQLStatementParserSUBPARTITION, MySQLStatementParserSUBPARTITIONS, MySQLStatementParserSUPER, MySQLStatementParserSUSPEND, MySQLStatementParserSWAPS, MySQLStatementParserSWITCHES, MySQLStatementParserTABLES, MySQLStatementParserTABLESPACE, MySQLStatementParserTABLE_CHECKSUM, MySQLStatementParserTABLE_NAME, MySQLStatementParserTEMPORARY, MySQLStatementParserTEMPTABLE, MySQLStatementParserTEXT, MySQLStatementParserTHAN, MySQLStatementParserTHREAD_PRIORITY, MySQLStatementParserTIES, MySQLStatementParserTIME, MySQLStatementParserTIMESTAMP, MySQLStatementParserTIMESTAMP_ADD, MySQLStatementParserTIMESTAMP_DIFF, MySQLStatementParserTLS, MySQLStatementParserTRANSACTION, MySQLStatementParserTRIGGERS, MySQLStatementParserTRUE, MySQLStatementParserTRUNCATE, MySQLStatementParserTYPE, MySQLStatementParserTYPES, MySQLStatementParserUNBOUNDED, MySQLStatementParserUNCOMMITTED, MySQLStatementParserUNDEFINED, MySQLStatementParserUNDOFILE, MySQLStatementParserUNDO_BUFFER_SIZE, MySQLStatementParserUNICODE, MySQLStatementParserUNINSTALL, MySQLStatementParserUNKNOWN, MySQLStatementParserUNTIL, MySQLStatementParserUPGRADE, MySQLStatementParserUSER, MySQLStatementParserUSER_RESOURCES, MySQLStatementParserUSE_FRM, MySQLStatementParserUTC_TIMESTAMP, MySQLStatementParserVALIDATION, MySQLStatementParserVALUE, MySQLStatementParserVALUES, MySQLStatementParserVARIABLES, MySQLStatementParserVCPU, MySQLStatementParserVIEW, MySQLStatementParserVISIBLE, MySQLStatementParserWAIT, MySQLStatementParserWARNINGS, MySQLStatementParserWEEK, MySQLStatementParserWEIGHT_STRING, MySQLStatementParserWITHOUT, MySQLStatementParserWORK, MySQLStatementParserWRAPPER, MySQLStatementParserX509, MySQLStatementParserXA, MySQLStatementParserXID, MySQLStatementParserXML, MySQLStatementParserYEAR, MySQLStatementParserIDENTIFIER_, MySQLStatementParserSINGLE_QUOTED_TEXT, MySQLStatementParserDOUBLE_QUOTED_TEXT, MySQLStatementParserNCHAR_TEXT, MySQLStatementParserUNDERSCORE_CHARSET, MySQLStatementParserNUMBER_, MySQLStatementParserHEX_DIGIT_, MySQLStatementParserBIT_NUM_:
		{
			p.SetState(2876)
			p.expr(0)
		}
		p.SetState(2881)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(2877)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(2878)
				p.expr(0)
			}

			p.SetState(2883)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case MySQLStatementParserASTERISK_:
		{
			p.SetState(2884)
			p.Match(MySQLStatementParserASTERISK_)
		}

	case MySQLStatementParserRP_, MySQLStatementParserORDER, MySQLStatementParserSEPARATOR:

	default:
	}
	p.SetState(2888)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserORDER {
		{
			p.SetState(2887)
			p.OrderByClause()
		}

	}
	p.SetState(2892)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserSEPARATOR {
		{
			p.SetState(2890)
			p.Match(MySQLStatementParserSEPARATOR)
		}
		{
			p.SetState(2891)
			p.expr(0)
		}

	}
	{
		p.SetState(2894)
		p.Match(MySQLStatementParserRP_)
	}

	return localctx
}

// IWindowFunctionContext is an interface to support dynamic dispatch.
type IWindowFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFuncName returns the funcName token.
	GetFuncName() antlr.Token

	// SetFuncName sets the funcName token.
	SetFuncName(antlr.Token)

	// IsWindowFunctionContext differentiates from other interfaces.
	IsWindowFunctionContext()
}

type WindowFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	funcName antlr.Token
}

func NewEmptyWindowFunctionContext() *WindowFunctionContext {
	var p = new(WindowFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_windowFunction
	return p
}

func (*WindowFunctionContext) IsWindowFunctionContext() {}

func NewWindowFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WindowFunctionContext {
	var p = new(WindowFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_windowFunction

	return p
}

func (s *WindowFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *WindowFunctionContext) GetFuncName() antlr.Token { return s.funcName }

func (s *WindowFunctionContext) SetFuncName(v antlr.Token) { s.funcName = v }

func (s *WindowFunctionContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *WindowFunctionContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *WindowFunctionContext) WindowingClause() IWindowingClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindowingClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindowingClauseContext)
}

func (s *WindowFunctionContext) ROW_NUMBER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROW_NUMBER, 0)
}

func (s *WindowFunctionContext) RANK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRANK, 0)
}

func (s *WindowFunctionContext) DENSE_RANK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDENSE_RANK, 0)
}

func (s *WindowFunctionContext) CUME_DIST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCUME_DIST, 0)
}

func (s *WindowFunctionContext) PERCENT_RANK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPERCENT_RANK, 0)
}

func (s *WindowFunctionContext) NTILE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNTILE, 0)
}

func (s *WindowFunctionContext) SimpleExpr() ISimpleExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleExprContext)
}

func (s *WindowFunctionContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *WindowFunctionContext) LEAD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLEAD, 0)
}

func (s *WindowFunctionContext) LAG() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLAG, 0)
}

func (s *WindowFunctionContext) LeadLagInfo() ILeadLagInfoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeadLagInfoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeadLagInfoContext)
}

func (s *WindowFunctionContext) NullTreatment() INullTreatmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INullTreatmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INullTreatmentContext)
}

func (s *WindowFunctionContext) FIRST_VALUE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFIRST_VALUE, 0)
}

func (s *WindowFunctionContext) LAST_VALUE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLAST_VALUE, 0)
}

func (s *WindowFunctionContext) COMMA_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, 0)
}

func (s *WindowFunctionContext) NTH_VALUE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNTH_VALUE, 0)
}

func (s *WindowFunctionContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFROM, 0)
}

func (s *WindowFunctionContext) FIRST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFIRST, 0)
}

func (s *WindowFunctionContext) LAST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLAST, 0)
}

func (s *WindowFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WindowFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WindowFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterWindowFunction(s)
	}
}

func (s *WindowFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitWindowFunction(s)
	}
}

func (s *WindowFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitWindowFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) WindowFunction() (localctx IWindowFunctionContext) {
	this := p
	_ = this

	localctx = NewWindowFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 376, MySQLStatementParserRULE_windowFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2940)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserCUME_DIST, MySQLStatementParserDENSE_RANK, MySQLStatementParserPERCENT_RANK, MySQLStatementParserRANK, MySQLStatementParserROW_NUMBER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2896)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*WindowFunctionContext).funcName = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserCUME_DIST || _la == MySQLStatementParserDENSE_RANK || _la == MySQLStatementParserPERCENT_RANK || _la == MySQLStatementParserRANK || _la == MySQLStatementParserROW_NUMBER) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*WindowFunctionContext).funcName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2897)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(2898)
			p.Match(MySQLStatementParserRP_)
		}
		{
			p.SetState(2899)
			p.WindowingClause()
		}

	case MySQLStatementParserNTILE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2900)

			var _m = p.Match(MySQLStatementParserNTILE)

			localctx.(*WindowFunctionContext).funcName = _m
		}

		{
			p.SetState(2901)
			p.simpleExpr(0)
		}

		{
			p.SetState(2902)
			p.WindowingClause()
		}

	case MySQLStatementParserLAG, MySQLStatementParserLEAD:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2904)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*WindowFunctionContext).funcName = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserLAG || _la == MySQLStatementParserLEAD) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*WindowFunctionContext).funcName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2905)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(2906)
			p.expr(0)
		}
		p.SetState(2908)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(2907)
				p.LeadLagInfo()
			}

		}
		{
			p.SetState(2910)
			p.Match(MySQLStatementParserRP_)
		}
		p.SetState(2912)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserIGNORE || _la == MySQLStatementParserRESPECT {
			{
				p.SetState(2911)
				p.NullTreatment()
			}

		}
		{
			p.SetState(2914)
			p.WindowingClause()
		}

	case MySQLStatementParserFIRST_VALUE, MySQLStatementParserLAST_VALUE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2916)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*WindowFunctionContext).funcName = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserFIRST_VALUE || _la == MySQLStatementParserLAST_VALUE) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*WindowFunctionContext).funcName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2917)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(2918)
			p.expr(0)
		}
		{
			p.SetState(2919)
			p.Match(MySQLStatementParserRP_)
		}
		p.SetState(2921)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserIGNORE || _la == MySQLStatementParserRESPECT {
			{
				p.SetState(2920)
				p.NullTreatment()
			}

		}
		{
			p.SetState(2923)
			p.WindowingClause()
		}

	case MySQLStatementParserNTH_VALUE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2925)

			var _m = p.Match(MySQLStatementParserNTH_VALUE)

			localctx.(*WindowFunctionContext).funcName = _m
		}
		{
			p.SetState(2926)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(2927)
			p.expr(0)
		}
		{
			p.SetState(2928)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(2929)
			p.simpleExpr(0)
		}
		{
			p.SetState(2930)
			p.Match(MySQLStatementParserRP_)
		}
		p.SetState(2933)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserFROM {
			{
				p.SetState(2931)
				p.Match(MySQLStatementParserFROM)
			}
			{
				p.SetState(2932)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySQLStatementParserFIRST || _la == MySQLStatementParserLAST) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(2936)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserIGNORE || _la == MySQLStatementParserRESPECT {
			{
				p.SetState(2935)
				p.NullTreatment()
			}

		}
		{
			p.SetState(2938)
			p.WindowingClause()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWindowingClauseContext is an interface to support dynamic dispatch.
type IWindowingClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetWindowName returns the windowName rule contexts.
	GetWindowName() IIdentifierContext

	// SetWindowName sets the windowName rule contexts.
	SetWindowName(IIdentifierContext)

	// IsWindowingClauseContext differentiates from other interfaces.
	IsWindowingClauseContext()
}

type WindowingClauseContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	windowName IIdentifierContext
}

func NewEmptyWindowingClauseContext() *WindowingClauseContext {
	var p = new(WindowingClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_windowingClause
	return p
}

func (*WindowingClauseContext) IsWindowingClauseContext() {}

func NewWindowingClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WindowingClauseContext {
	var p = new(WindowingClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_windowingClause

	return p
}

func (s *WindowingClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WindowingClauseContext) GetWindowName() IIdentifierContext { return s.windowName }

func (s *WindowingClauseContext) SetWindowName(v IIdentifierContext) { s.windowName = v }

func (s *WindowingClauseContext) OVER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOVER, 0)
}

func (s *WindowingClauseContext) WindowSpecification() IWindowSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindowSpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindowSpecificationContext)
}

func (s *WindowingClauseContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *WindowingClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WindowingClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WindowingClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterWindowingClause(s)
	}
}

func (s *WindowingClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitWindowingClause(s)
	}
}

func (s *WindowingClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitWindowingClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) WindowingClause() (localctx IWindowingClauseContext) {
	this := p
	_ = this

	localctx = NewWindowingClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 378, MySQLStatementParserRULE_windowingClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2942)
		p.Match(MySQLStatementParserOVER)
	}
	p.SetState(2945)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserMAX, MySQLStatementParserMIN, MySQLStatementParserSUM, MySQLStatementParserCOUNT, MySQLStatementParserGROUP_CONCAT, MySQLStatementParserCAST, MySQLStatementParserPOSITION, MySQLStatementParserSUBSTRING, MySQLStatementParserSUBSTR, MySQLStatementParserEXTRACT, MySQLStatementParserTRIM, MySQLStatementParserLAST_DAY, MySQLStatementParserTRADITIONAL, MySQLStatementParserTREE, MySQLStatementParserMYSQL_ADMIN, MySQLStatementParserINSTANT, MySQLStatementParserINPLACE, MySQLStatementParserCOPY, MySQLStatementParserUL_BINARY, MySQLStatementParserAUTOCOMMIT, MySQLStatementParserINNODB, MySQLStatementParserREDO_LOG, MySQLStatementParserACCOUNT, MySQLStatementParserACTION, MySQLStatementParserACTIVE, MySQLStatementParserADMIN, MySQLStatementParserAFTER, MySQLStatementParserAGAINST, MySQLStatementParserAGGREGATE, MySQLStatementParserALGORITHM, MySQLStatementParserALWAYS, MySQLStatementParserANY, MySQLStatementParserARRAY, MySQLStatementParserASCII, MySQLStatementParserAT, MySQLStatementParserATTRIBUTE, MySQLStatementParserAUTOEXTEND_SIZE, MySQLStatementParserAUTO_INCREMENT, MySQLStatementParserAVG, MySQLStatementParserAVG_ROW_LENGTH, MySQLStatementParserBACKUP, MySQLStatementParserBEGIN, MySQLStatementParserBINLOG, MySQLStatementParserBIT, MySQLStatementParserBLOCK, MySQLStatementParserBOOL, MySQLStatementParserBOOLEAN, MySQLStatementParserBTREE, MySQLStatementParserBUCKETS, MySQLStatementParserBYTE, MySQLStatementParserCACHE, MySQLStatementParserCASCADED, MySQLStatementParserCATALOG_NAME, MySQLStatementParserCHAIN, MySQLStatementParserCHANGED, MySQLStatementParserCHANNEL, MySQLStatementParserCHARSET, MySQLStatementParserCHECKSUM, MySQLStatementParserCIPHER, MySQLStatementParserCLASS_ORIGIN, MySQLStatementParserCLIENT, MySQLStatementParserCLONE, MySQLStatementParserCLOSE, MySQLStatementParserCOALESCE, MySQLStatementParserCODE, MySQLStatementParserCOLLATION, MySQLStatementParserCOLUMNS, MySQLStatementParserCOLUMN_FORMAT, MySQLStatementParserCOLUMN_NAME, MySQLStatementParserCOMMENT, MySQLStatementParserCOMMIT, MySQLStatementParserCOMMITTED, MySQLStatementParserCOMPACT, MySQLStatementParserCOMPLETION, MySQLStatementParserCOMPONENT, MySQLStatementParserCOMPRESSED, MySQLStatementParserCOMPRESSION, MySQLStatementParserCONCURRENT, MySQLStatementParserCONNECTION, MySQLStatementParserCONSISTENT, MySQLStatementParserCONSTRAINT_CATALOG, MySQLStatementParserCONSTRAINT_NAME, MySQLStatementParserCONSTRAINT_SCHEMA, MySQLStatementParserCONTAINS, MySQLStatementParserCONTEXT, MySQLStatementParserCPU, MySQLStatementParserCURRENT, MySQLStatementParserCURSOR_NAME, MySQLStatementParserDATA, MySQLStatementParserDATAFILE, MySQLStatementParserDATE, MySQLStatementParserDATETIME, MySQLStatementParserDAY, MySQLStatementParserDEALLOCATE, MySQLStatementParserDEFAULT_AUTH, MySQLStatementParserDEFINER, MySQLStatementParserDEFINITION, MySQLStatementParserDELAY_KEY_WRITE, MySQLStatementParserDESCRIPTION, MySQLStatementParserDIAGNOSTICS, MySQLStatementParserDIRECTORY, MySQLStatementParserDISABLE, MySQLStatementParserDISCARD, MySQLStatementParserDISK, MySQLStatementParserDO, MySQLStatementParserDUMPFILE, MySQLStatementParserDUPLICATE, MySQLStatementParserDYNAMIC, MySQLStatementParserENABLE, MySQLStatementParserENCRYPTION, MySQLStatementParserEND, MySQLStatementParserENDS, MySQLStatementParserENFORCED, MySQLStatementParserENGINE, MySQLStatementParserENGINES, MySQLStatementParserENGINE_ATTRIBUTE, MySQLStatementParserENUM, MySQLStatementParserERROR, MySQLStatementParserERRORS, MySQLStatementParserESCAPE, MySQLStatementParserEVENT, MySQLStatementParserEVENTS, MySQLStatementParserEVERY, MySQLStatementParserEXCHANGE, MySQLStatementParserEXCLUDE, MySQLStatementParserEXECUTE, MySQLStatementParserEXPANSION, MySQLStatementParserEXPIRE, MySQLStatementParserEXPORT, MySQLStatementParserEXTENDED, MySQLStatementParserEXTENT_SIZE, MySQLStatementParserFAILED_LOGIN_ATTEMPTS, MySQLStatementParserFAST, MySQLStatementParserFAULTS, MySQLStatementParserFILE, MySQLStatementParserFILE_BLOCK_SIZE, MySQLStatementParserFILTER, MySQLStatementParserFIRST, MySQLStatementParserFIXED, MySQLStatementParserFLUSH, MySQLStatementParserFOLLOWING, MySQLStatementParserFOLLOWS, MySQLStatementParserFORMAT, MySQLStatementParserFOUND, MySQLStatementParserFULL, MySQLStatementParserGENERAL, MySQLStatementParserGEOMETRY, MySQLStatementParserGEOMETRYCOLLECTION, MySQLStatementParserGET_FORMAT, MySQLStatementParserGET_MASTER_PUBLIC_KEY, MySQLStatementParserGLOBAL, MySQLStatementParserGRANTS, MySQLStatementParserGROUP_REPLICATION, MySQLStatementParserHANDLER, MySQLStatementParserHASH, MySQLStatementParserHELP, MySQLStatementParserHISTOGRAM, MySQLStatementParserHISTORY, MySQLStatementParserHOST, MySQLStatementParserHOSTS, MySQLStatementParserHOUR, MySQLStatementParserIDENTIFIED, MySQLStatementParserIGNORE_SERVER_IDS, MySQLStatementParserIMPORT, MySQLStatementParserINACTIVE, MySQLStatementParserINDEXES, MySQLStatementParserINITIAL_SIZE, MySQLStatementParserINSERT_METHOD, MySQLStatementParserINSTALL, MySQLStatementParserINSTANCE, MySQLStatementParserINVISIBLE, MySQLStatementParserINVOKER, MySQLStatementParserIO, MySQLStatementParserIPC, MySQLStatementParserISOLATION, MySQLStatementParserISSUER, MySQLStatementParserJSON, MySQLStatementParserJSON_VALUE, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserLANGUAGE, MySQLStatementParserLAST, MySQLStatementParserLAST_VALUE, MySQLStatementParserLEAVES, MySQLStatementParserLESS, MySQLStatementParserLEVEL, MySQLStatementParserLINESTRING, MySQLStatementParserLIST, MySQLStatementParserLOCAL, MySQLStatementParserLOCKED, MySQLStatementParserLOCKS, MySQLStatementParserLOGFILE, MySQLStatementParserLOGS, MySQLStatementParserMASTER, MySQLStatementParserMASTER_AUTO_POSITION, MySQLStatementParserMASTER_COMPRESSION_ALGORITHM, MySQLStatementParserMASTER_CONNECT_RETRY, MySQLStatementParserMASTER_DELAY, MySQLStatementParserMASTER_HEARTBEAT_PERIOD, MySQLStatementParserMASTER_HOST, MySQLStatementParserMASTER_LOG_FILE, MySQLStatementParserMASTER_LOG_POS, MySQLStatementParserMASTER_PASSWORD, MySQLStatementParserMASTER_PORT, MySQLStatementParserMASTER_PUBLIC_KEY_PATH, MySQLStatementParserMASTER_RETRY_COUNT, MySQLStatementParserMASTER_SERVER_ID, MySQLStatementParserMASTER_SSL, MySQLStatementParserMASTER_SSL_CA, MySQLStatementParserMASTER_SSL_CAPATH, MySQLStatementParserMASTER_SSL_CERT, MySQLStatementParserMASTER_SSL_CIPHER, MySQLStatementParserMASTER_SSL_CRL, MySQLStatementParserMASTER_SSL_CRLPATH, MySQLStatementParserMASTER_SSL_KEY, MySQLStatementParserMASTER_TLS_CIPHERSUITES, MySQLStatementParserMASTER_TLS_VERSION, MySQLStatementParserMASTER_USER, MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL, MySQLStatementParserMAX_CONNECTIONS_PER_HOUR, MySQLStatementParserMAX_QUERIES_PER_HOUR, MySQLStatementParserMAX_ROWS, MySQLStatementParserMAX_SIZE, MySQLStatementParserMAX_UPDATES_PER_HOUR, MySQLStatementParserMAX_USER_CONNECTIONS, MySQLStatementParserMEDIUM, MySQLStatementParserMEMBER, MySQLStatementParserMEMORY, MySQLStatementParserMERGE, MySQLStatementParserMESSAGE_TEXT, MySQLStatementParserMICROSECOND, MySQLStatementParserMIGRATE, MySQLStatementParserMINUTE, MySQLStatementParserMIN_ROWS, MySQLStatementParserMODE, MySQLStatementParserMODIFY, MySQLStatementParserMONTH, MySQLStatementParserMULTILINESTRING, MySQLStatementParserMULTIPOINT, MySQLStatementParserMULTIPOLYGON, MySQLStatementParserMUTEX, MySQLStatementParserMYSQL_ERRNO, MySQLStatementParserNAME, MySQLStatementParserNAMES, MySQLStatementParserNATIONAL, MySQLStatementParserNCHAR, MySQLStatementParserNDBCLUSTER, MySQLStatementParserNESTED, MySQLStatementParserNETWORK_NAMESPACE, MySQLStatementParserNEVER, MySQLStatementParserNEW, MySQLStatementParserNEXT, MySQLStatementParserNO, MySQLStatementParserNODEGROUP, MySQLStatementParserNONE, MySQLStatementParserNOWAIT, MySQLStatementParserNO_WAIT, MySQLStatementParserNULLS, MySQLStatementParserNUMBER, MySQLStatementParserNVARCHAR, MySQLStatementParserOFF, MySQLStatementParserOFFSET, MySQLStatementParserOJ, MySQLStatementParserOLD, MySQLStatementParserONE, MySQLStatementParserONLY, MySQLStatementParserOPEN, MySQLStatementParserOPTIONAL, MySQLStatementParserOPTIONS, MySQLStatementParserORDINALITY, MySQLStatementParserORGANIZATION, MySQLStatementParserOTHERS, MySQLStatementParserOWNER, MySQLStatementParserPACK_KEYS, MySQLStatementParserPAGE, MySQLStatementParserPARSER, MySQLStatementParserPARTIAL, MySQLStatementParserPARTITIONING, MySQLStatementParserPARTITIONS, MySQLStatementParserPASSWORD, MySQLStatementParserPASSWORD_LOCK_TIME, MySQLStatementParserPATH, MySQLStatementParserPERSIST, MySQLStatementParserPERSIST_ONLY, MySQLStatementParserPHASE, MySQLStatementParserPLUGIN, MySQLStatementParserPLUGINS, MySQLStatementParserPLUGIN_DIR, MySQLStatementParserPOINT, MySQLStatementParserPOLYGON, MySQLStatementParserPORT, MySQLStatementParserPRECEDES, MySQLStatementParserPRECEDING, MySQLStatementParserPREPARE, MySQLStatementParserPRESERVE, MySQLStatementParserPREV, MySQLStatementParserPRIVILEGES, MySQLStatementParserPRIVILEGE_CHECKS_USER, MySQLStatementParserPROCESS, MySQLStatementParserPROCESSLIST, MySQLStatementParserPROFILE, MySQLStatementParserPROFILES, MySQLStatementParserPROXY, MySQLStatementParserQUARTER, MySQLStatementParserQUERY, MySQLStatementParserQUICK, MySQLStatementParserRANDOM, MySQLStatementParserREAD_ONLY, MySQLStatementParserREBUILD, MySQLStatementParserRECOVER, MySQLStatementParserREDO_BUFFER_SIZE, MySQLStatementParserREDUNDANT, MySQLStatementParserREFERENCE, MySQLStatementParserRELAY, MySQLStatementParserRELAYLOG, MySQLStatementParserRELAY_LOG_FILE, MySQLStatementParserRELAY_LOG_POS, MySQLStatementParserRELAY_THREAD, MySQLStatementParserRELOAD, MySQLStatementParserREMOVE, MySQLStatementParserREORGANIZE, MySQLStatementParserREPAIR, MySQLStatementParserREPEATABLE, MySQLStatementParserREPLICATE_DO_DB, MySQLStatementParserREPLICATE_DO_TABLE, MySQLStatementParserREPLICATE_IGNORE_DB, MySQLStatementParserREPLICATE_IGNORE_TABLE, MySQLStatementParserREPLICATE_REWRITE_DB, MySQLStatementParserREPLICATE_WILD_DO_TABLE, MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE, MySQLStatementParserREPLICATION, MySQLStatementParserREQUIRE_ROW_FORMAT, MySQLStatementParserRESET, MySQLStatementParserRESOURCE, MySQLStatementParserRESPECT, MySQLStatementParserRESTART, MySQLStatementParserRESTORE, MySQLStatementParserRESUME, MySQLStatementParserRETAIN, MySQLStatementParserRETURNED_SQLSTATE, MySQLStatementParserRETURNING, MySQLStatementParserRETURNS, MySQLStatementParserREUSE, MySQLStatementParserREVERSE, MySQLStatementParserROLE, MySQLStatementParserROLLBACK, MySQLStatementParserROLLUP, MySQLStatementParserROTATE, MySQLStatementParserROUTINE, MySQLStatementParserROW_COUNT, MySQLStatementParserROW_FORMAT, MySQLStatementParserRTREE, MySQLStatementParserSAVEPOINT, MySQLStatementParserSCHEDULE, MySQLStatementParserSCHEMA_NAME, MySQLStatementParserSECOND, MySQLStatementParserSECONDARY, MySQLStatementParserSECONDARY_ENGINE, MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, MySQLStatementParserSECONDARY_LOAD, MySQLStatementParserSECONDARY_UNLOAD, MySQLStatementParserSECURITY, MySQLStatementParserSERIAL, MySQLStatementParserSERIALIZABLE, MySQLStatementParserSERVER, MySQLStatementParserSESSION, MySQLStatementParserSHARE, MySQLStatementParserSHUTDOWN, MySQLStatementParserSIGNED, MySQLStatementParserSIMPLE, MySQLStatementParserSLAVE, MySQLStatementParserSLOW, MySQLStatementParserSNAPSHOT, MySQLStatementParserSOCKET, MySQLStatementParserSONAME, MySQLStatementParserSOUNDS, MySQLStatementParserSOURCE, MySQLStatementParserSQL_AFTER_GTIDS, MySQLStatementParserSQL_AFTER_MTS_GAPS, MySQLStatementParserSQL_BEFORE_GTIDS, MySQLStatementParserSQL_BUFFER_RESULT, MySQLStatementParserSQL_NO_CACHE, MySQLStatementParserSQL_THREAD, MySQLStatementParserSRID, MySQLStatementParserSTACKED, MySQLStatementParserSTART, MySQLStatementParserSTARTS, MySQLStatementParserSTATS_AUTO_RECALC, MySQLStatementParserSTATS_PERSISTENT, MySQLStatementParserSTATS_SAMPLE_PAGES, MySQLStatementParserSTATUS, MySQLStatementParserSTOP, MySQLStatementParserSTORAGE, MySQLStatementParserSTREAM, MySQLStatementParserSTRING, MySQLStatementParserSUBCLASS_ORIGIN, MySQLStatementParserSUBJECT, MySQLStatementParserSUBPARTITION, MySQLStatementParserSUBPARTITIONS, MySQLStatementParserSUPER, MySQLStatementParserSUSPEND, MySQLStatementParserSWAPS, MySQLStatementParserSWITCHES, MySQLStatementParserTABLES, MySQLStatementParserTABLESPACE, MySQLStatementParserTABLE_CHECKSUM, MySQLStatementParserTABLE_NAME, MySQLStatementParserTEMPORARY, MySQLStatementParserTEMPTABLE, MySQLStatementParserTEXT, MySQLStatementParserTHAN, MySQLStatementParserTHREAD_PRIORITY, MySQLStatementParserTIES, MySQLStatementParserTIME, MySQLStatementParserTIMESTAMP, MySQLStatementParserTIMESTAMP_ADD, MySQLStatementParserTIMESTAMP_DIFF, MySQLStatementParserTLS, MySQLStatementParserTRANSACTION, MySQLStatementParserTRIGGERS, MySQLStatementParserTRUNCATE, MySQLStatementParserTYPE, MySQLStatementParserTYPES, MySQLStatementParserUNBOUNDED, MySQLStatementParserUNCOMMITTED, MySQLStatementParserUNDEFINED, MySQLStatementParserUNDOFILE, MySQLStatementParserUNDO_BUFFER_SIZE, MySQLStatementParserUNICODE, MySQLStatementParserUNINSTALL, MySQLStatementParserUNKNOWN, MySQLStatementParserUNTIL, MySQLStatementParserUPGRADE, MySQLStatementParserUSER, MySQLStatementParserUSER_RESOURCES, MySQLStatementParserUSE_FRM, MySQLStatementParserVALIDATION, MySQLStatementParserVALUE, MySQLStatementParserVARIABLES, MySQLStatementParserVCPU, MySQLStatementParserVIEW, MySQLStatementParserVISIBLE, MySQLStatementParserWAIT, MySQLStatementParserWARNINGS, MySQLStatementParserWEEK, MySQLStatementParserWEIGHT_STRING, MySQLStatementParserWITHOUT, MySQLStatementParserWORK, MySQLStatementParserWRAPPER, MySQLStatementParserX509, MySQLStatementParserXA, MySQLStatementParserXID, MySQLStatementParserXML, MySQLStatementParserYEAR, MySQLStatementParserIDENTIFIER_, MySQLStatementParserDOUBLE_QUOTED_TEXT:
		{
			p.SetState(2943)

			var _x = p.Identifier()

			localctx.(*WindowingClauseContext).windowName = _x
		}

	case MySQLStatementParserLP_:
		{
			p.SetState(2944)
			p.WindowSpecification()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILeadLagInfoContext is an interface to support dynamic dispatch.
type ILeadLagInfoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeadLagInfoContext differentiates from other interfaces.
	IsLeadLagInfoContext()
}

type LeadLagInfoContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeadLagInfoContext() *LeadLagInfoContext {
	var p = new(LeadLagInfoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_leadLagInfo
	return p
}

func (*LeadLagInfoContext) IsLeadLagInfoContext() {}

func NewLeadLagInfoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LeadLagInfoContext {
	var p = new(LeadLagInfoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_leadLagInfo

	return p
}

func (s *LeadLagInfoContext) GetParser() antlr.Parser { return s.parser }

func (s *LeadLagInfoContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *LeadLagInfoContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *LeadLagInfoContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *LeadLagInfoContext) QUESTION_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserQUESTION_, 0)
}

func (s *LeadLagInfoContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *LeadLagInfoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LeadLagInfoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LeadLagInfoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterLeadLagInfo(s)
	}
}

func (s *LeadLagInfoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitLeadLagInfo(s)
	}
}

func (s *LeadLagInfoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitLeadLagInfo(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) LeadLagInfo() (localctx ILeadLagInfoContext) {
	this := p
	_ = this

	localctx = NewLeadLagInfoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 380, MySQLStatementParserRULE_leadLagInfo)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2947)
		p.Match(MySQLStatementParserCOMMA_)
	}
	{
		p.SetState(2948)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserQUESTION_ || _la == MySQLStatementParserNUMBER_) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(2951)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(2949)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(2950)
			p.expr(0)
		}

	}

	return localctx
}

// INullTreatmentContext is an interface to support dynamic dispatch.
type INullTreatmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNullTreatmentContext differentiates from other interfaces.
	IsNullTreatmentContext()
}

type NullTreatmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNullTreatmentContext() *NullTreatmentContext {
	var p = new(NullTreatmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_nullTreatment
	return p
}

func (*NullTreatmentContext) IsNullTreatmentContext() {}

func NewNullTreatmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NullTreatmentContext {
	var p = new(NullTreatmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_nullTreatment

	return p
}

func (s *NullTreatmentContext) GetParser() antlr.Parser { return s.parser }

func (s *NullTreatmentContext) NULLS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNULLS, 0)
}

func (s *NullTreatmentContext) RESPECT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRESPECT, 0)
}

func (s *NullTreatmentContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIGNORE, 0)
}

func (s *NullTreatmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NullTreatmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NullTreatmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterNullTreatment(s)
	}
}

func (s *NullTreatmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitNullTreatment(s)
	}
}

func (s *NullTreatmentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitNullTreatment(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) NullTreatment() (localctx INullTreatmentContext) {
	this := p
	_ = this

	localctx = NewNullTreatmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 382, MySQLStatementParserRULE_nullTreatment)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2953)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserIGNORE || _la == MySQLStatementParserRESPECT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(2954)
		p.Match(MySQLStatementParserNULLS)
	}

	return localctx
}

// ICheckTypeContext is an interface to support dynamic dispatch.
type ICheckTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheckTypeContext differentiates from other interfaces.
	IsCheckTypeContext()
}

type CheckTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheckTypeContext() *CheckTypeContext {
	var p = new(CheckTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_checkType
	return p
}

func (*CheckTypeContext) IsCheckTypeContext() {}

func NewCheckTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CheckTypeContext {
	var p = new(CheckTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_checkType

	return p
}

func (s *CheckTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *CheckTypeContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOR, 0)
}

func (s *CheckTypeContext) UPGRADE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUPGRADE, 0)
}

func (s *CheckTypeContext) QUICK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserQUICK, 0)
}

func (s *CheckTypeContext) FAST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFAST, 0)
}

func (s *CheckTypeContext) MEDIUM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMEDIUM, 0)
}

func (s *CheckTypeContext) EXTENDED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXTENDED, 0)
}

func (s *CheckTypeContext) CHANGED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHANGED, 0)
}

func (s *CheckTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CheckTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCheckType(s)
	}
}

func (s *CheckTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCheckType(s)
	}
}

func (s *CheckTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCheckType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CheckType() (localctx ICheckTypeContext) {
	this := p
	_ = this

	localctx = NewCheckTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 384, MySQLStatementParserRULE_checkType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2963)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserFOR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2956)
			p.Match(MySQLStatementParserFOR)
		}
		{
			p.SetState(2957)
			p.Match(MySQLStatementParserUPGRADE)
		}

	case MySQLStatementParserQUICK:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2958)
			p.Match(MySQLStatementParserQUICK)
		}

	case MySQLStatementParserFAST:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2959)
			p.Match(MySQLStatementParserFAST)
		}

	case MySQLStatementParserMEDIUM:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2960)
			p.Match(MySQLStatementParserMEDIUM)
		}

	case MySQLStatementParserEXTENDED:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2961)
			p.Match(MySQLStatementParserEXTENDED)
		}

	case MySQLStatementParserCHANGED:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2962)
			p.Match(MySQLStatementParserCHANGED)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IRepairTypeContext is an interface to support dynamic dispatch.
type IRepairTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRepairTypeContext differentiates from other interfaces.
	IsRepairTypeContext()
}

type RepairTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRepairTypeContext() *RepairTypeContext {
	var p = new(RepairTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_repairType
	return p
}

func (*RepairTypeContext) IsRepairTypeContext() {}

func NewRepairTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RepairTypeContext {
	var p = new(RepairTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_repairType

	return p
}

func (s *RepairTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *RepairTypeContext) QUICK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserQUICK, 0)
}

func (s *RepairTypeContext) EXTENDED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXTENDED, 0)
}

func (s *RepairTypeContext) USE_FRM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUSE_FRM, 0)
}

func (s *RepairTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RepairTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RepairTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterRepairType(s)
	}
}

func (s *RepairTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitRepairType(s)
	}
}

func (s *RepairTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitRepairType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) RepairType() (localctx IRepairTypeContext) {
	this := p
	_ = this

	localctx = NewRepairTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 386, MySQLStatementParserRULE_repairType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2965)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserEXTENDED || _la == MySQLStatementParserQUICK || _la == MySQLStatementParserUSE_FRM) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ICastFunctionContext is an interface to support dynamic dispatch.
type ICastFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCastFunctionContext differentiates from other interfaces.
	IsCastFunctionContext()
}

type CastFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCastFunctionContext() *CastFunctionContext {
	var p = new(CastFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_castFunction
	return p
}

func (*CastFunctionContext) IsCastFunctionContext() {}

func NewCastFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CastFunctionContext {
	var p = new(CastFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_castFunction

	return p
}

func (s *CastFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *CastFunctionContext) CAST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCAST, 0)
}

func (s *CastFunctionContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *CastFunctionContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *CastFunctionContext) AS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAS, 0)
}

func (s *CastFunctionContext) DataType() IDataTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDataTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *CastFunctionContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *CastFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CastFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CastFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCastFunction(s)
	}
}

func (s *CastFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCastFunction(s)
	}
}

func (s *CastFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCastFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CastFunction() (localctx ICastFunctionContext) {
	this := p
	_ = this

	localctx = NewCastFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 388, MySQLStatementParserRULE_castFunction)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2967)
		p.Match(MySQLStatementParserCAST)
	}
	{
		p.SetState(2968)
		p.Match(MySQLStatementParserLP_)
	}
	{
		p.SetState(2969)
		p.expr(0)
	}
	{
		p.SetState(2970)
		p.Match(MySQLStatementParserAS)
	}
	{
		p.SetState(2971)
		p.DataType()
	}
	{
		p.SetState(2972)
		p.Match(MySQLStatementParserRP_)
	}

	return localctx
}

// IConvertFunctionContext is an interface to support dynamic dispatch.
type IConvertFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConvertFunctionContext differentiates from other interfaces.
	IsConvertFunctionContext()
}

type ConvertFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConvertFunctionContext() *ConvertFunctionContext {
	var p = new(ConvertFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_convertFunction
	return p
}

func (*ConvertFunctionContext) IsConvertFunctionContext() {}

func NewConvertFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConvertFunctionContext {
	var p = new(ConvertFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_convertFunction

	return p
}

func (s *ConvertFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConvertFunctionContext) CONVERT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCONVERT, 0)
}

func (s *ConvertFunctionContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *ConvertFunctionContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ConvertFunctionContext) COMMA_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, 0)
}

func (s *ConvertFunctionContext) CastType() ICastTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICastTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICastTypeContext)
}

func (s *ConvertFunctionContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *ConvertFunctionContext) USING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUSING, 0)
}

func (s *ConvertFunctionContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *ConvertFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConvertFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConvertFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterConvertFunction(s)
	}
}

func (s *ConvertFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitConvertFunction(s)
	}
}

func (s *ConvertFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitConvertFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ConvertFunction() (localctx IConvertFunctionContext) {
	this := p
	_ = this

	localctx = NewConvertFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 390, MySQLStatementParserRULE_convertFunction)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2988)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 271, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2974)
			p.Match(MySQLStatementParserCONVERT)
		}
		{
			p.SetState(2975)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(2976)
			p.expr(0)
		}
		{
			p.SetState(2977)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(2978)
			p.CastType()
		}
		{
			p.SetState(2979)
			p.Match(MySQLStatementParserRP_)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2981)
			p.Match(MySQLStatementParserCONVERT)
		}
		{
			p.SetState(2982)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(2983)
			p.expr(0)
		}
		{
			p.SetState(2984)
			p.Match(MySQLStatementParserUSING)
		}
		{
			p.SetState(2985)
			p.CharsetName()
		}
		{
			p.SetState(2986)
			p.Match(MySQLStatementParserRP_)
		}

	}

	return localctx
}

// ICastTypeContext is an interface to support dynamic dispatch.
type ICastTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCastTypeContext differentiates from other interfaces.
	IsCastTypeContext()
}

type CastTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCastTypeContext() *CastTypeContext {
	var p = new(CastTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_castType
	return p
}

func (*CastTypeContext) IsCastTypeContext() {}

func NewCastTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CastTypeContext {
	var p = new(CastTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_castType

	return p
}

func (s *CastTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *CastTypeContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBINARY, 0)
}

func (s *CastTypeContext) FieldLength() IFieldLengthContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldLengthContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldLengthContext)
}

func (s *CastTypeContext) CHAR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHAR, 0)
}

func (s *CastTypeContext) CharsetWithOptBinary() ICharsetWithOptBinaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetWithOptBinaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetWithOptBinaryContext)
}

func (s *CastTypeContext) Nchar() INcharContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INcharContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INcharContext)
}

func (s *CastTypeContext) SIGNED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSIGNED, 0)
}

func (s *CastTypeContext) INT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINT, 0)
}

func (s *CastTypeContext) UNSIGNED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNSIGNED, 0)
}

func (s *CastTypeContext) DATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDATE, 0)
}

func (s *CastTypeContext) TIME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTIME, 0)
}

func (s *CastTypeContext) TypeDatetimePrecision() ITypeDatetimePrecisionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeDatetimePrecisionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeDatetimePrecisionContext)
}

func (s *CastTypeContext) DATETIME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDATETIME, 0)
}

func (s *CastTypeContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDECIMAL, 0)
}

func (s *CastTypeContext) Precision() IPrecisionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrecisionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrecisionContext)
}

func (s *CastTypeContext) JSON() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserJSON, 0)
}

func (s *CastTypeContext) REAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREAL, 0)
}

func (s *CastTypeContext) DOUBLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDOUBLE, 0)
}

func (s *CastTypeContext) PRECISION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPRECISION, 0)
}

func (s *CastTypeContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFLOAT, 0)
}

func (s *CastTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CastTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CastTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCastType(s)
	}
}

func (s *CastTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCastType(s)
	}
}

func (s *CastTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCastType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CastType() (localctx ICastTypeContext) {
	this := p
	_ = this

	localctx = NewCastTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 392, MySQLStatementParserRULE_castType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3035)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserBINARY:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2990)
			p.Match(MySQLStatementParserBINARY)
		}
		p.SetState(2992)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserLP_ {
			{
				p.SetState(2991)
				p.FieldLength()
			}

		}

	case MySQLStatementParserCHAR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2994)
			p.Match(MySQLStatementParserCHAR)
		}
		p.SetState(2996)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserLP_ {
			{
				p.SetState(2995)
				p.FieldLength()
			}

		}
		p.SetState(2999)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-92)&-(0x1f+1)) == 0 && ((1<<uint((_la-92)))&((1<<(MySQLStatementParserASCII-92))|(1<<(MySQLStatementParserBINARY-92))|(1<<(MySQLStatementParserBYTE-92)))) != 0) || (((_la-128)&-(0x1f+1)) == 0 && ((1<<uint((_la-128)))&((1<<(MySQLStatementParserCHAR-128))|(1<<(MySQLStatementParserCHARACTER-128))|(1<<(MySQLStatementParserCHARSET-128)))) != 0) || _la == MySQLStatementParserUNICODE {
			{
				p.SetState(2998)
				p.CharsetWithOptBinary()
			}

		}

	case MySQLStatementParserNATIONAL, MySQLStatementParserNCHAR:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3001)
			p.Nchar()
		}
		p.SetState(3003)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserLP_ {
			{
				p.SetState(3002)
				p.FieldLength()
			}

		}

	case MySQLStatementParserSIGNED:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3005)
			p.Match(MySQLStatementParserSIGNED)
		}
		p.SetState(3007)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserINT {
			{
				p.SetState(3006)
				p.Match(MySQLStatementParserINT)
			}

		}

	case MySQLStatementParserUNSIGNED:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3009)
			p.Match(MySQLStatementParserUNSIGNED)
		}
		p.SetState(3011)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserINT {
			{
				p.SetState(3010)
				p.Match(MySQLStatementParserINT)
			}

		}

	case MySQLStatementParserDATE:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3013)
			p.Match(MySQLStatementParserDATE)
		}

	case MySQLStatementParserTIME:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(3014)
			p.Match(MySQLStatementParserTIME)
		}
		p.SetState(3016)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserLP_ {
			{
				p.SetState(3015)
				p.TypeDatetimePrecision()
			}

		}

	case MySQLStatementParserDATETIME:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(3018)
			p.Match(MySQLStatementParserDATETIME)
		}
		p.SetState(3020)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserLP_ {
			{
				p.SetState(3019)
				p.TypeDatetimePrecision()
			}

		}

	case MySQLStatementParserDECIMAL:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(3022)
			p.Match(MySQLStatementParserDECIMAL)
		}
		p.SetState(3025)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 280, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3023)
				p.FieldLength()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 280, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(3024)
				p.Precision()
			}

		}

	case MySQLStatementParserJSON:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(3027)
			p.Match(MySQLStatementParserJSON)
		}

	case MySQLStatementParserREAL:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(3028)
			p.Match(MySQLStatementParserREAL)
		}

	case MySQLStatementParserDOUBLE:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(3029)
			p.Match(MySQLStatementParserDOUBLE)
		}
		{
			p.SetState(3030)
			p.Match(MySQLStatementParserPRECISION)
		}

	case MySQLStatementParserFLOAT:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(3031)
			p.Match(MySQLStatementParserFLOAT)
		}
		p.SetState(3033)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserLP_ {
			{
				p.SetState(3032)
				p.Precision()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INcharContext is an interface to support dynamic dispatch.
type INcharContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNcharContext differentiates from other interfaces.
	IsNcharContext()
}

type NcharContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNcharContext() *NcharContext {
	var p = new(NcharContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_nchar
	return p
}

func (*NcharContext) IsNcharContext() {}

func NewNcharContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NcharContext {
	var p = new(NcharContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_nchar

	return p
}

func (s *NcharContext) GetParser() antlr.Parser { return s.parser }

func (s *NcharContext) NCHAR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNCHAR, 0)
}

func (s *NcharContext) NATIONAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNATIONAL, 0)
}

func (s *NcharContext) CHAR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHAR, 0)
}

func (s *NcharContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NcharContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NcharContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterNchar(s)
	}
}

func (s *NcharContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitNchar(s)
	}
}

func (s *NcharContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitNchar(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Nchar() (localctx INcharContext) {
	this := p
	_ = this

	localctx = NewNcharContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 394, MySQLStatementParserRULE_nchar)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3040)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserNCHAR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3037)
			p.Match(MySQLStatementParserNCHAR)
		}

	case MySQLStatementParserNATIONAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3038)
			p.Match(MySQLStatementParserNATIONAL)
		}
		{
			p.SetState(3039)
			p.Match(MySQLStatementParserCHAR)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPositionFunctionContext is an interface to support dynamic dispatch.
type IPositionFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPositionFunctionContext differentiates from other interfaces.
	IsPositionFunctionContext()
}

type PositionFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPositionFunctionContext() *PositionFunctionContext {
	var p = new(PositionFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_positionFunction
	return p
}

func (*PositionFunctionContext) IsPositionFunctionContext() {}

func NewPositionFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PositionFunctionContext {
	var p = new(PositionFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_positionFunction

	return p
}

func (s *PositionFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *PositionFunctionContext) POSITION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPOSITION, 0)
}

func (s *PositionFunctionContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *PositionFunctionContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *PositionFunctionContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *PositionFunctionContext) IN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIN, 0)
}

func (s *PositionFunctionContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *PositionFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PositionFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PositionFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterPositionFunction(s)
	}
}

func (s *PositionFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitPositionFunction(s)
	}
}

func (s *PositionFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitPositionFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) PositionFunction() (localctx IPositionFunctionContext) {
	this := p
	_ = this

	localctx = NewPositionFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 396, MySQLStatementParserRULE_positionFunction)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3042)
		p.Match(MySQLStatementParserPOSITION)
	}
	{
		p.SetState(3043)
		p.Match(MySQLStatementParserLP_)
	}
	{
		p.SetState(3044)
		p.expr(0)
	}
	{
		p.SetState(3045)
		p.Match(MySQLStatementParserIN)
	}
	{
		p.SetState(3046)
		p.expr(0)
	}
	{
		p.SetState(3047)
		p.Match(MySQLStatementParserRP_)
	}

	return localctx
}

// ISubstringFunctionContext is an interface to support dynamic dispatch.
type ISubstringFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubstringFunctionContext differentiates from other interfaces.
	IsSubstringFunctionContext()
}

type SubstringFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubstringFunctionContext() *SubstringFunctionContext {
	var p = new(SubstringFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_substringFunction
	return p
}

func (*SubstringFunctionContext) IsSubstringFunctionContext() {}

func NewSubstringFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubstringFunctionContext {
	var p = new(SubstringFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_substringFunction

	return p
}

func (s *SubstringFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *SubstringFunctionContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *SubstringFunctionContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *SubstringFunctionContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFROM, 0)
}

func (s *SubstringFunctionContext) AllNUMBER_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserNUMBER_)
}

func (s *SubstringFunctionContext) NUMBER_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, i)
}

func (s *SubstringFunctionContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *SubstringFunctionContext) SUBSTRING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSUBSTRING, 0)
}

func (s *SubstringFunctionContext) SUBSTR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSUBSTR, 0)
}

func (s *SubstringFunctionContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOR, 0)
}

func (s *SubstringFunctionContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *SubstringFunctionContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *SubstringFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubstringFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubstringFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSubstringFunction(s)
	}
}

func (s *SubstringFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSubstringFunction(s)
	}
}

func (s *SubstringFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSubstringFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SubstringFunction() (localctx ISubstringFunctionContext) {
	this := p
	_ = this

	localctx = NewSubstringFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 398, MySQLStatementParserRULE_substringFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3071)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 286, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3049)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserSUBSTRING || _la == MySQLStatementParserSUBSTR) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(3050)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(3051)
			p.expr(0)
		}
		{
			p.SetState(3052)
			p.Match(MySQLStatementParserFROM)
		}
		{
			p.SetState(3053)
			p.Match(MySQLStatementParserNUMBER_)
		}
		p.SetState(3056)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserFOR {
			{
				p.SetState(3054)
				p.Match(MySQLStatementParserFOR)
			}
			{
				p.SetState(3055)
				p.Match(MySQLStatementParserNUMBER_)
			}

		}
		{
			p.SetState(3058)
			p.Match(MySQLStatementParserRP_)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3060)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserSUBSTRING || _la == MySQLStatementParserSUBSTR) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(3061)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(3062)
			p.expr(0)
		}
		{
			p.SetState(3063)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(3064)
			p.Match(MySQLStatementParserNUMBER_)
		}
		p.SetState(3067)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(3065)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(3066)
				p.Match(MySQLStatementParserNUMBER_)
			}

		}
		{
			p.SetState(3069)
			p.Match(MySQLStatementParserRP_)
		}

	}

	return localctx
}

// IExtractFunctionContext is an interface to support dynamic dispatch.
type IExtractFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExtractFunctionContext differentiates from other interfaces.
	IsExtractFunctionContext()
}

type ExtractFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExtractFunctionContext() *ExtractFunctionContext {
	var p = new(ExtractFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_extractFunction
	return p
}

func (*ExtractFunctionContext) IsExtractFunctionContext() {}

func NewExtractFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExtractFunctionContext {
	var p = new(ExtractFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_extractFunction

	return p
}

func (s *ExtractFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExtractFunctionContext) EXTRACT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXTRACT, 0)
}

func (s *ExtractFunctionContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *ExtractFunctionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ExtractFunctionContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFROM, 0)
}

func (s *ExtractFunctionContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExtractFunctionContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *ExtractFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExtractFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExtractFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterExtractFunction(s)
	}
}

func (s *ExtractFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitExtractFunction(s)
	}
}

func (s *ExtractFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitExtractFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ExtractFunction() (localctx IExtractFunctionContext) {
	this := p
	_ = this

	localctx = NewExtractFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 400, MySQLStatementParserRULE_extractFunction)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3073)
		p.Match(MySQLStatementParserEXTRACT)
	}
	{
		p.SetState(3074)
		p.Match(MySQLStatementParserLP_)
	}
	{
		p.SetState(3075)
		p.Identifier()
	}
	{
		p.SetState(3076)
		p.Match(MySQLStatementParserFROM)
	}
	{
		p.SetState(3077)
		p.expr(0)
	}
	{
		p.SetState(3078)
		p.Match(MySQLStatementParserRP_)
	}

	return localctx
}

// ICharFunctionContext is an interface to support dynamic dispatch.
type ICharFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCharFunctionContext differentiates from other interfaces.
	IsCharFunctionContext()
}

type CharFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCharFunctionContext() *CharFunctionContext {
	var p = new(CharFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_charFunction
	return p
}

func (*CharFunctionContext) IsCharFunctionContext() {}

func NewCharFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CharFunctionContext {
	var p = new(CharFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_charFunction

	return p
}

func (s *CharFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *CharFunctionContext) CHAR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHAR, 0)
}

func (s *CharFunctionContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *CharFunctionContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *CharFunctionContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *CharFunctionContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *CharFunctionContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *CharFunctionContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *CharFunctionContext) USING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUSING, 0)
}

func (s *CharFunctionContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *CharFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CharFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CharFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCharFunction(s)
	}
}

func (s *CharFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCharFunction(s)
	}
}

func (s *CharFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCharFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CharFunction() (localctx ICharFunctionContext) {
	this := p
	_ = this

	localctx = NewCharFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 402, MySQLStatementParserRULE_charFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3080)
		p.Match(MySQLStatementParserCHAR)
	}
	{
		p.SetState(3081)
		p.Match(MySQLStatementParserLP_)
	}
	{
		p.SetState(3082)
		p.expr(0)
	}
	p.SetState(3087)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(3083)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(3084)
			p.expr(0)
		}

		p.SetState(3089)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(3092)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserUSING {
		{
			p.SetState(3090)
			p.Match(MySQLStatementParserUSING)
		}
		{
			p.SetState(3091)
			p.CharsetName()
		}

	}
	{
		p.SetState(3094)
		p.Match(MySQLStatementParserRP_)
	}

	return localctx
}

// ITrimFunctionContext is an interface to support dynamic dispatch.
type ITrimFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTrimFunctionContext differentiates from other interfaces.
	IsTrimFunctionContext()
}

type TrimFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTrimFunctionContext() *TrimFunctionContext {
	var p = new(TrimFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_trimFunction
	return p
}

func (*TrimFunctionContext) IsTrimFunctionContext() {}

func NewTrimFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TrimFunctionContext {
	var p = new(TrimFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_trimFunction

	return p
}

func (s *TrimFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *TrimFunctionContext) TRIM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTRIM, 0)
}

func (s *TrimFunctionContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *TrimFunctionContext) AllString_() []IString_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IString_Context)(nil)).Elem())
	var tst = make([]IString_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IString_Context)
		}
	}

	return tst
}

func (s *TrimFunctionContext) String_(i int) IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *TrimFunctionContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *TrimFunctionContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFROM, 0)
}

func (s *TrimFunctionContext) LEADING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLEADING, 0)
}

func (s *TrimFunctionContext) BOTH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBOTH, 0)
}

func (s *TrimFunctionContext) TRAILING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTRAILING, 0)
}

func (s *TrimFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TrimFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TrimFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTrimFunction(s)
	}
}

func (s *TrimFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTrimFunction(s)
	}
}

func (s *TrimFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTrimFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TrimFunction() (localctx ITrimFunctionContext) {
	this := p
	_ = this

	localctx = NewTrimFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 404, MySQLStatementParserRULE_trimFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3118)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 292, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3096)
			p.Match(MySQLStatementParserTRIM)
		}
		{
			p.SetState(3097)
			p.Match(MySQLStatementParserLP_)
		}
		p.SetState(3103)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserBOTH || _la == MySQLStatementParserLEADING || _la == MySQLStatementParserTRAILING {
			{
				p.SetState(3098)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySQLStatementParserBOTH || _la == MySQLStatementParserLEADING || _la == MySQLStatementParserTRAILING) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			p.SetState(3100)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySQLStatementParserSINGLE_QUOTED_TEXT || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
				{
					p.SetState(3099)
					p.String_()
				}

			}
			{
				p.SetState(3102)
				p.Match(MySQLStatementParserFROM)
			}

		}
		{
			p.SetState(3105)
			p.String_()
		}
		{
			p.SetState(3106)
			p.Match(MySQLStatementParserRP_)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3108)
			p.Match(MySQLStatementParserTRIM)
		}
		{
			p.SetState(3109)
			p.Match(MySQLStatementParserLP_)
		}
		p.SetState(3113)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 291, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3110)
				p.String_()
			}
			{
				p.SetState(3111)
				p.Match(MySQLStatementParserFROM)
			}

		}
		{
			p.SetState(3115)
			p.String_()
		}
		{
			p.SetState(3116)
			p.Match(MySQLStatementParserRP_)
		}

	}

	return localctx
}

// IValuesFunctionContext is an interface to support dynamic dispatch.
type IValuesFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsValuesFunctionContext differentiates from other interfaces.
	IsValuesFunctionContext()
}

type ValuesFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValuesFunctionContext() *ValuesFunctionContext {
	var p = new(ValuesFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_valuesFunction
	return p
}

func (*ValuesFunctionContext) IsValuesFunctionContext() {}

func NewValuesFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ValuesFunctionContext {
	var p = new(ValuesFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_valuesFunction

	return p
}

func (s *ValuesFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *ValuesFunctionContext) VALUES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVALUES, 0)
}

func (s *ValuesFunctionContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *ValuesFunctionContext) ColumnRefList() IColumnRefListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnRefListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnRefListContext)
}

func (s *ValuesFunctionContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *ValuesFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValuesFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ValuesFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterValuesFunction(s)
	}
}

func (s *ValuesFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitValuesFunction(s)
	}
}

func (s *ValuesFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitValuesFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ValuesFunction() (localctx IValuesFunctionContext) {
	this := p
	_ = this

	localctx = NewValuesFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 406, MySQLStatementParserRULE_valuesFunction)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3120)
		p.Match(MySQLStatementParserVALUES)
	}
	{
		p.SetState(3121)
		p.Match(MySQLStatementParserLP_)
	}
	{
		p.SetState(3122)
		p.ColumnRefList()
	}
	{
		p.SetState(3123)
		p.Match(MySQLStatementParserRP_)
	}

	return localctx
}

// IWeightStringFunctionContext is an interface to support dynamic dispatch.
type IWeightStringFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWeightStringFunctionContext differentiates from other interfaces.
	IsWeightStringFunctionContext()
}

type WeightStringFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWeightStringFunctionContext() *WeightStringFunctionContext {
	var p = new(WeightStringFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_weightStringFunction
	return p
}

func (*WeightStringFunctionContext) IsWeightStringFunctionContext() {}

func NewWeightStringFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WeightStringFunctionContext {
	var p = new(WeightStringFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_weightStringFunction

	return p
}

func (s *WeightStringFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *WeightStringFunctionContext) WEIGHT_STRING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWEIGHT_STRING, 0)
}

func (s *WeightStringFunctionContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *WeightStringFunctionContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *WeightStringFunctionContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *WeightStringFunctionContext) AS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAS, 0)
}

func (s *WeightStringFunctionContext) DataType() IDataTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDataTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *WeightStringFunctionContext) LevelClause() ILevelClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILevelClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILevelClauseContext)
}

func (s *WeightStringFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WeightStringFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WeightStringFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterWeightStringFunction(s)
	}
}

func (s *WeightStringFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitWeightStringFunction(s)
	}
}

func (s *WeightStringFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitWeightStringFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) WeightStringFunction() (localctx IWeightStringFunctionContext) {
	this := p
	_ = this

	localctx = NewWeightStringFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 408, MySQLStatementParserRULE_weightStringFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3125)
		p.Match(MySQLStatementParserWEIGHT_STRING)
	}
	{
		p.SetState(3126)
		p.Match(MySQLStatementParserLP_)
	}
	{
		p.SetState(3127)
		p.expr(0)
	}
	p.SetState(3130)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserAS {
		{
			p.SetState(3128)
			p.Match(MySQLStatementParserAS)
		}
		{
			p.SetState(3129)
			p.DataType()
		}

	}
	p.SetState(3133)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLEVEL {
		{
			p.SetState(3132)
			p.LevelClause()
		}

	}
	{
		p.SetState(3135)
		p.Match(MySQLStatementParserRP_)
	}

	return localctx
}

// ILevelClauseContext is an interface to support dynamic dispatch.
type ILevelClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLevelClauseContext differentiates from other interfaces.
	IsLevelClauseContext()
}

type LevelClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLevelClauseContext() *LevelClauseContext {
	var p = new(LevelClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_levelClause
	return p
}

func (*LevelClauseContext) IsLevelClauseContext() {}

func NewLevelClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LevelClauseContext {
	var p = new(LevelClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_levelClause

	return p
}

func (s *LevelClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *LevelClauseContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLEVEL, 0)
}

func (s *LevelClauseContext) AllLevelInWeightListElement() []ILevelInWeightListElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILevelInWeightListElementContext)(nil)).Elem())
	var tst = make([]ILevelInWeightListElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILevelInWeightListElementContext)
		}
	}

	return tst
}

func (s *LevelClauseContext) LevelInWeightListElement(i int) ILevelInWeightListElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILevelInWeightListElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILevelInWeightListElementContext)
}

func (s *LevelClauseContext) AllNUMBER_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserNUMBER_)
}

func (s *LevelClauseContext) NUMBER_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, i)
}

func (s *LevelClauseContext) MINUS_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMINUS_, 0)
}

func (s *LevelClauseContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *LevelClauseContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *LevelClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LevelClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LevelClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterLevelClause(s)
	}
}

func (s *LevelClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitLevelClause(s)
	}
}

func (s *LevelClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitLevelClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) LevelClause() (localctx ILevelClauseContext) {
	this := p
	_ = this

	localctx = NewLevelClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 410, MySQLStatementParserRULE_levelClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3137)
		p.Match(MySQLStatementParserLEVEL)
	}
	p.SetState(3149)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 296, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3138)
			p.LevelInWeightListElement()
		}
		p.SetState(3143)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(3139)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(3140)
				p.LevelInWeightListElement()
			}

			p.SetState(3145)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		{
			p.SetState(3146)
			p.Match(MySQLStatementParserNUMBER_)
		}
		{
			p.SetState(3147)
			p.Match(MySQLStatementParserMINUS_)
		}
		{
			p.SetState(3148)
			p.Match(MySQLStatementParserNUMBER_)
		}

	}

	return localctx
}

// ILevelInWeightListElementContext is an interface to support dynamic dispatch.
type ILevelInWeightListElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLevelInWeightListElementContext differentiates from other interfaces.
	IsLevelInWeightListElementContext()
}

type LevelInWeightListElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLevelInWeightListElementContext() *LevelInWeightListElementContext {
	var p = new(LevelInWeightListElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_levelInWeightListElement
	return p
}

func (*LevelInWeightListElementContext) IsLevelInWeightListElementContext() {}

func NewLevelInWeightListElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LevelInWeightListElementContext {
	var p = new(LevelInWeightListElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_levelInWeightListElement

	return p
}

func (s *LevelInWeightListElementContext) GetParser() antlr.Parser { return s.parser }

func (s *LevelInWeightListElementContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *LevelInWeightListElementContext) Direction() IDirectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectionContext)
}

func (s *LevelInWeightListElementContext) REVERSE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREVERSE, 0)
}

func (s *LevelInWeightListElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LevelInWeightListElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LevelInWeightListElementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterLevelInWeightListElement(s)
	}
}

func (s *LevelInWeightListElementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitLevelInWeightListElement(s)
	}
}

func (s *LevelInWeightListElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitLevelInWeightListElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) LevelInWeightListElement() (localctx ILevelInWeightListElementContext) {
	this := p
	_ = this

	localctx = NewLevelInWeightListElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 412, MySQLStatementParserRULE_levelInWeightListElement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3151)
		p.Match(MySQLStatementParserNUMBER_)
	}
	p.SetState(3153)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserASC || _la == MySQLStatementParserDESC {
		{
			p.SetState(3152)
			p.Direction()
		}

	}
	p.SetState(3156)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserREVERSE {
		{
			p.SetState(3155)
			p.Match(MySQLStatementParserREVERSE)
		}

	}

	return localctx
}

// IRegularFunctionContext is an interface to support dynamic dispatch.
type IRegularFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRegularFunctionContext differentiates from other interfaces.
	IsRegularFunctionContext()
}

type RegularFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRegularFunctionContext() *RegularFunctionContext {
	var p = new(RegularFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_regularFunction
	return p
}

func (*RegularFunctionContext) IsRegularFunctionContext() {}

func NewRegularFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RegularFunctionContext {
	var p = new(RegularFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_regularFunction

	return p
}

func (s *RegularFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *RegularFunctionContext) CompleteRegularFunction() ICompleteRegularFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompleteRegularFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICompleteRegularFunctionContext)
}

func (s *RegularFunctionContext) ShorthandRegularFunction() IShorthandRegularFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShorthandRegularFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShorthandRegularFunctionContext)
}

func (s *RegularFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RegularFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RegularFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterRegularFunction(s)
	}
}

func (s *RegularFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitRegularFunction(s)
	}
}

func (s *RegularFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitRegularFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) RegularFunction() (localctx IRegularFunctionContext) {
	this := p
	_ = this

	localctx = NewRegularFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 414, MySQLStatementParserRULE_regularFunction)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3160)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 299, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3158)
			p.CompleteRegularFunction()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3159)
			p.ShorthandRegularFunction()
		}

	}

	return localctx
}

// IShorthandRegularFunctionContext is an interface to support dynamic dispatch.
type IShorthandRegularFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShorthandRegularFunctionContext differentiates from other interfaces.
	IsShorthandRegularFunctionContext()
}

type ShorthandRegularFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShorthandRegularFunctionContext() *ShorthandRegularFunctionContext {
	var p = new(ShorthandRegularFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_shorthandRegularFunction
	return p
}

func (*ShorthandRegularFunctionContext) IsShorthandRegularFunctionContext() {}

func NewShorthandRegularFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShorthandRegularFunctionContext {
	var p = new(ShorthandRegularFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_shorthandRegularFunction

	return p
}

func (s *ShorthandRegularFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *ShorthandRegularFunctionContext) CURRENT_DATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCURRENT_DATE, 0)
}

func (s *ShorthandRegularFunctionContext) CURRENT_TIME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCURRENT_TIME, 0)
}

func (s *ShorthandRegularFunctionContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *ShorthandRegularFunctionContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *ShorthandRegularFunctionContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *ShorthandRegularFunctionContext) CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCURRENT_TIMESTAMP, 0)
}

func (s *ShorthandRegularFunctionContext) LAST_DAY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLAST_DAY, 0)
}

func (s *ShorthandRegularFunctionContext) LOCALTIME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCALTIME, 0)
}

func (s *ShorthandRegularFunctionContext) LOCALTIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCALTIMESTAMP, 0)
}

func (s *ShorthandRegularFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShorthandRegularFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShorthandRegularFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShorthandRegularFunction(s)
	}
}

func (s *ShorthandRegularFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShorthandRegularFunction(s)
	}
}

func (s *ShorthandRegularFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShorthandRegularFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShorthandRegularFunction() (localctx IShorthandRegularFunctionContext) {
	this := p
	_ = this

	localctx = NewShorthandRegularFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 416, MySQLStatementParserRULE_shorthandRegularFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3175)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserCURRENT_DATE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3162)
			p.Match(MySQLStatementParserCURRENT_DATE)
		}

	case MySQLStatementParserCURRENT_TIME:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3163)
			p.Match(MySQLStatementParserCURRENT_TIME)
		}
		p.SetState(3169)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 301, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3164)
				p.Match(MySQLStatementParserLP_)
			}
			p.SetState(3166)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySQLStatementParserNUMBER_ {
				{
					p.SetState(3165)
					p.Match(MySQLStatementParserNUMBER_)
				}

			}
			{
				p.SetState(3168)
				p.Match(MySQLStatementParserRP_)
			}

		}

	case MySQLStatementParserCURRENT_TIMESTAMP:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3171)
			p.Match(MySQLStatementParserCURRENT_TIMESTAMP)
		}

	case MySQLStatementParserLAST_DAY:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3172)
			p.Match(MySQLStatementParserLAST_DAY)
		}

	case MySQLStatementParserLOCALTIME:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3173)
			p.Match(MySQLStatementParserLOCALTIME)
		}

	case MySQLStatementParserLOCALTIMESTAMP:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3174)
			p.Match(MySQLStatementParserLOCALTIMESTAMP)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICompleteRegularFunctionContext is an interface to support dynamic dispatch.
type ICompleteRegularFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCompleteRegularFunctionContext differentiates from other interfaces.
	IsCompleteRegularFunctionContext()
}

type CompleteRegularFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompleteRegularFunctionContext() *CompleteRegularFunctionContext {
	var p = new(CompleteRegularFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_completeRegularFunction
	return p
}

func (*CompleteRegularFunctionContext) IsCompleteRegularFunctionContext() {}

func NewCompleteRegularFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CompleteRegularFunctionContext {
	var p = new(CompleteRegularFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_completeRegularFunction

	return p
}

func (s *CompleteRegularFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *CompleteRegularFunctionContext) RegularFunctionName() IRegularFunctionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRegularFunctionNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRegularFunctionNameContext)
}

func (s *CompleteRegularFunctionContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *CompleteRegularFunctionContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *CompleteRegularFunctionContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *CompleteRegularFunctionContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *CompleteRegularFunctionContext) ASTERISK_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserASTERISK_, 0)
}

func (s *CompleteRegularFunctionContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *CompleteRegularFunctionContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *CompleteRegularFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CompleteRegularFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CompleteRegularFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCompleteRegularFunction(s)
	}
}

func (s *CompleteRegularFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCompleteRegularFunction(s)
	}
}

func (s *CompleteRegularFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCompleteRegularFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CompleteRegularFunction() (localctx ICompleteRegularFunctionContext) {
	this := p
	_ = this

	localctx = NewCompleteRegularFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 418, MySQLStatementParserRULE_completeRegularFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3177)
		p.RegularFunctionName()
	}

	{
		p.SetState(3178)
		p.Match(MySQLStatementParserLP_)
	}
	p.SetState(3188)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserNOT_, MySQLStatementParserTILDE_, MySQLStatementParserPLUS_, MySQLStatementParserMINUS_, MySQLStatementParserLP_, MySQLStatementParserLBE_, MySQLStatementParserQUESTION_, MySQLStatementParserAT_, MySQLStatementParserMAX, MySQLStatementParserMIN, MySQLStatementParserSUM, MySQLStatementParserCOUNT, MySQLStatementParserGROUP_CONCAT, MySQLStatementParserCAST, MySQLStatementParserPOSITION, MySQLStatementParserSUBSTRING, MySQLStatementParserSUBSTR, MySQLStatementParserEXTRACT, MySQLStatementParserTRIM, MySQLStatementParserLAST_DAY, MySQLStatementParserTRADITIONAL, MySQLStatementParserTREE, MySQLStatementParserMYSQL_ADMIN, MySQLStatementParserINSTANT, MySQLStatementParserINPLACE, MySQLStatementParserCOPY, MySQLStatementParserUL_BINARY, MySQLStatementParserAUTOCOMMIT, MySQLStatementParserINNODB, MySQLStatementParserREDO_LOG, MySQLStatementParserACCOUNT, MySQLStatementParserACTION, MySQLStatementParserACTIVE, MySQLStatementParserADMIN, MySQLStatementParserAFTER, MySQLStatementParserAGAINST, MySQLStatementParserAGGREGATE, MySQLStatementParserALGORITHM, MySQLStatementParserALWAYS, MySQLStatementParserANY, MySQLStatementParserARRAY, MySQLStatementParserASCII, MySQLStatementParserAT, MySQLStatementParserATTRIBUTE, MySQLStatementParserAUTOEXTEND_SIZE, MySQLStatementParserAUTO_INCREMENT, MySQLStatementParserAVG, MySQLStatementParserBIT_XOR, MySQLStatementParserAVG_ROW_LENGTH, MySQLStatementParserBACKUP, MySQLStatementParserBEGIN, MySQLStatementParserBINARY, MySQLStatementParserBINLOG, MySQLStatementParserBIT, MySQLStatementParserBLOCK, MySQLStatementParserBOOL, MySQLStatementParserBOOLEAN, MySQLStatementParserBTREE, MySQLStatementParserBUCKETS, MySQLStatementParserBYTE, MySQLStatementParserCACHE, MySQLStatementParserCASCADED, MySQLStatementParserCASE, MySQLStatementParserCATALOG_NAME, MySQLStatementParserCHAIN, MySQLStatementParserCHANGED, MySQLStatementParserCHANNEL, MySQLStatementParserCHAR, MySQLStatementParserCHARSET, MySQLStatementParserCHECKSUM, MySQLStatementParserCIPHER, MySQLStatementParserCLASS_ORIGIN, MySQLStatementParserCLIENT, MySQLStatementParserCLONE, MySQLStatementParserCLOSE, MySQLStatementParserCOALESCE, MySQLStatementParserCODE, MySQLStatementParserCOLLATION, MySQLStatementParserCOLUMNS, MySQLStatementParserCOLUMN_FORMAT, MySQLStatementParserCOLUMN_NAME, MySQLStatementParserCOMMENT, MySQLStatementParserCOMMIT, MySQLStatementParserCOMMITTED, MySQLStatementParserCOMPACT, MySQLStatementParserCOMPLETION, MySQLStatementParserCOMPONENT, MySQLStatementParserCOMPRESSED, MySQLStatementParserCOMPRESSION, MySQLStatementParserCONCURRENT, MySQLStatementParserCONNECTION, MySQLStatementParserCONSISTENT, MySQLStatementParserCONSTRAINT_CATALOG, MySQLStatementParserCONSTRAINT_NAME, MySQLStatementParserCONSTRAINT_SCHEMA, MySQLStatementParserCONTAINS, MySQLStatementParserCONTEXT, MySQLStatementParserCONVERT, MySQLStatementParserCPU, MySQLStatementParserCUME_DIST, MySQLStatementParserCURRENT, MySQLStatementParserCURRENT_DATE, MySQLStatementParserCURRENT_TIME, MySQLStatementParserCURRENT_TIMESTAMP, MySQLStatementParserCURRENT_USER, MySQLStatementParserCURSOR_NAME, MySQLStatementParserDATA, MySQLStatementParserDATABASE, MySQLStatementParserDATAFILE, MySQLStatementParserDATE, MySQLStatementParserDATETIME, MySQLStatementParserDAY, MySQLStatementParserDEALLOCATE, MySQLStatementParserDEFAULT_AUTH, MySQLStatementParserDEFINER, MySQLStatementParserDEFINITION, MySQLStatementParserDELAY_KEY_WRITE, MySQLStatementParserDENSE_RANK, MySQLStatementParserDESCRIPTION, MySQLStatementParserDIAGNOSTICS, MySQLStatementParserDIRECTORY, MySQLStatementParserDISABLE, MySQLStatementParserDISCARD, MySQLStatementParserDISK, MySQLStatementParserDO, MySQLStatementParserDUMPFILE, MySQLStatementParserDUPLICATE, MySQLStatementParserDYNAMIC, MySQLStatementParserENABLE, MySQLStatementParserENCRYPTION, MySQLStatementParserEND, MySQLStatementParserENDS, MySQLStatementParserENFORCED, MySQLStatementParserENGINE, MySQLStatementParserENGINES, MySQLStatementParserENGINE_ATTRIBUTE, MySQLStatementParserENUM, MySQLStatementParserERROR, MySQLStatementParserERRORS, MySQLStatementParserESCAPE, MySQLStatementParserEVENT, MySQLStatementParserEVENTS, MySQLStatementParserEVERY, MySQLStatementParserEXCHANGE, MySQLStatementParserEXCLUDE, MySQLStatementParserEXECUTE, MySQLStatementParserEXISTS, MySQLStatementParserEXPANSION, MySQLStatementParserEXPIRE, MySQLStatementParserEXPORT, MySQLStatementParserEXTENDED, MySQLStatementParserEXTENT_SIZE, MySQLStatementParserFAILED_LOGIN_ATTEMPTS, MySQLStatementParserFALSE, MySQLStatementParserFAST, MySQLStatementParserFAULTS, MySQLStatementParserFILE, MySQLStatementParserFILE_BLOCK_SIZE, MySQLStatementParserFILTER, MySQLStatementParserFIRST, MySQLStatementParserFIRST_VALUE, MySQLStatementParserFIXED, MySQLStatementParserFLUSH, MySQLStatementParserFOLLOWING, MySQLStatementParserFOLLOWS, MySQLStatementParserFORMAT, MySQLStatementParserFOUND, MySQLStatementParserFULL, MySQLStatementParserGENERAL, MySQLStatementParserGEOMETRY, MySQLStatementParserGEOMETRYCOLLECTION, MySQLStatementParserGET_FORMAT, MySQLStatementParserGET_MASTER_PUBLIC_KEY, MySQLStatementParserGLOBAL, MySQLStatementParserGRANTS, MySQLStatementParserGROUP_REPLICATION, MySQLStatementParserHANDLER, MySQLStatementParserHASH, MySQLStatementParserHELP, MySQLStatementParserHISTOGRAM, MySQLStatementParserHISTORY, MySQLStatementParserHOST, MySQLStatementParserHOSTS, MySQLStatementParserHOUR, MySQLStatementParserIDENTIFIED, MySQLStatementParserIF, MySQLStatementParserIGNORE_SERVER_IDS, MySQLStatementParserIMPORT, MySQLStatementParserINACTIVE, MySQLStatementParserINDEXES, MySQLStatementParserINITIAL_SIZE, MySQLStatementParserINSERT_METHOD, MySQLStatementParserINSTALL, MySQLStatementParserINSTANCE, MySQLStatementParserINTERVAL, MySQLStatementParserINVISIBLE, MySQLStatementParserINVOKER, MySQLStatementParserIO, MySQLStatementParserIPC, MySQLStatementParserISOLATION, MySQLStatementParserISSUER, MySQLStatementParserJSON, MySQLStatementParserJSON_VALUE, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserLAG, MySQLStatementParserLANGUAGE, MySQLStatementParserLAST, MySQLStatementParserLAST_VALUE, MySQLStatementParserLEAD, MySQLStatementParserLEAVES, MySQLStatementParserLEFT, MySQLStatementParserLESS, MySQLStatementParserLEVEL, MySQLStatementParserLINESTRING, MySQLStatementParserLIST, MySQLStatementParserLOCAL, MySQLStatementParserLOCALTIME, MySQLStatementParserLOCALTIMESTAMP, MySQLStatementParserLOCKED, MySQLStatementParserLOCKS, MySQLStatementParserLOGFILE, MySQLStatementParserLOGS, MySQLStatementParserMASTER, MySQLStatementParserMASTER_AUTO_POSITION, MySQLStatementParserMASTER_COMPRESSION_ALGORITHM, MySQLStatementParserMASTER_CONNECT_RETRY, MySQLStatementParserMASTER_DELAY, MySQLStatementParserMASTER_HEARTBEAT_PERIOD, MySQLStatementParserMASTER_HOST, MySQLStatementParserMASTER_LOG_FILE, MySQLStatementParserMASTER_LOG_POS, MySQLStatementParserMASTER_PASSWORD, MySQLStatementParserMASTER_PORT, MySQLStatementParserMASTER_PUBLIC_KEY_PATH, MySQLStatementParserMASTER_RETRY_COUNT, MySQLStatementParserMASTER_SERVER_ID, MySQLStatementParserMASTER_SSL, MySQLStatementParserMASTER_SSL_CA, MySQLStatementParserMASTER_SSL_CAPATH, MySQLStatementParserMASTER_SSL_CERT, MySQLStatementParserMASTER_SSL_CIPHER, MySQLStatementParserMASTER_SSL_CRL, MySQLStatementParserMASTER_SSL_CRLPATH, MySQLStatementParserMASTER_SSL_KEY, MySQLStatementParserMASTER_TLS_CIPHERSUITES, MySQLStatementParserMASTER_TLS_VERSION, MySQLStatementParserMASTER_USER, MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL, MySQLStatementParserMATCH, MySQLStatementParserMAX_CONNECTIONS_PER_HOUR, MySQLStatementParserMAX_QUERIES_PER_HOUR, MySQLStatementParserMAX_ROWS, MySQLStatementParserMAX_SIZE, MySQLStatementParserMAX_UPDATES_PER_HOUR, MySQLStatementParserMAX_USER_CONNECTIONS, MySQLStatementParserMEDIUM, MySQLStatementParserMEMBER, MySQLStatementParserMEMORY, MySQLStatementParserMERGE, MySQLStatementParserMESSAGE_TEXT, MySQLStatementParserMICROSECOND, MySQLStatementParserMIGRATE, MySQLStatementParserMINUTE, MySQLStatementParserMIN_ROWS, MySQLStatementParserMOD, MySQLStatementParserMODE, MySQLStatementParserMODIFY, MySQLStatementParserMONTH, MySQLStatementParserMULTILINESTRING, MySQLStatementParserMULTIPOINT, MySQLStatementParserMULTIPOLYGON, MySQLStatementParserMUTEX, MySQLStatementParserMYSQL_ERRNO, MySQLStatementParserNAME, MySQLStatementParserNAMES, MySQLStatementParserNATIONAL, MySQLStatementParserNCHAR, MySQLStatementParserNDBCLUSTER, MySQLStatementParserNESTED, MySQLStatementParserNETWORK_NAMESPACE, MySQLStatementParserNEVER, MySQLStatementParserNEW, MySQLStatementParserNEXT, MySQLStatementParserNO, MySQLStatementParserNODEGROUP, MySQLStatementParserNONE, MySQLStatementParserNOT, MySQLStatementParserNOWAIT, MySQLStatementParserNO_WAIT, MySQLStatementParserNTH_VALUE, MySQLStatementParserNTILE, MySQLStatementParserNULL, MySQLStatementParserNULLS, MySQLStatementParserNUMBER, MySQLStatementParserNVARCHAR, MySQLStatementParserOFF, MySQLStatementParserOFFSET, MySQLStatementParserOJ, MySQLStatementParserOLD, MySQLStatementParserONE, MySQLStatementParserONLY, MySQLStatementParserOPEN, MySQLStatementParserOPTIONAL, MySQLStatementParserOPTIONS, MySQLStatementParserORDINALITY, MySQLStatementParserORGANIZATION, MySQLStatementParserOTHERS, MySQLStatementParserOWNER, MySQLStatementParserPACK_KEYS, MySQLStatementParserPAGE, MySQLStatementParserPARSER, MySQLStatementParserPARTIAL, MySQLStatementParserPARTITIONING, MySQLStatementParserPARTITIONS, MySQLStatementParserPASSWORD, MySQLStatementParserPASSWORD_LOCK_TIME, MySQLStatementParserPATH, MySQLStatementParserPERCENT_RANK, MySQLStatementParserPERSIST, MySQLStatementParserPERSIST_ONLY, MySQLStatementParserPHASE, MySQLStatementParserPLUGIN, MySQLStatementParserPLUGINS, MySQLStatementParserPLUGIN_DIR, MySQLStatementParserPOINT, MySQLStatementParserPOLYGON, MySQLStatementParserPORT, MySQLStatementParserPRECEDES, MySQLStatementParserPRECEDING, MySQLStatementParserPREPARE, MySQLStatementParserPRESERVE, MySQLStatementParserPREV, MySQLStatementParserPRIVILEGES, MySQLStatementParserPRIVILEGE_CHECKS_USER, MySQLStatementParserPROCESS, MySQLStatementParserPROCESSLIST, MySQLStatementParserPROFILE, MySQLStatementParserPROFILES, MySQLStatementParserPROXY, MySQLStatementParserQUARTER, MySQLStatementParserQUERY, MySQLStatementParserQUICK, MySQLStatementParserRANDOM, MySQLStatementParserRANK, MySQLStatementParserREAD_ONLY, MySQLStatementParserREBUILD, MySQLStatementParserRECOVER, MySQLStatementParserREDO_BUFFER_SIZE, MySQLStatementParserREDUNDANT, MySQLStatementParserREFERENCE, MySQLStatementParserRELAY, MySQLStatementParserRELAYLOG, MySQLStatementParserRELAY_LOG_FILE, MySQLStatementParserRELAY_LOG_POS, MySQLStatementParserRELAY_THREAD, MySQLStatementParserRELOAD, MySQLStatementParserREMOVE, MySQLStatementParserREORGANIZE, MySQLStatementParserREPAIR, MySQLStatementParserREPEATABLE, MySQLStatementParserREPLACE, MySQLStatementParserREPLICATE_DO_DB, MySQLStatementParserREPLICATE_DO_TABLE, MySQLStatementParserREPLICATE_IGNORE_DB, MySQLStatementParserREPLICATE_IGNORE_TABLE, MySQLStatementParserREPLICATE_REWRITE_DB, MySQLStatementParserREPLICATE_WILD_DO_TABLE, MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE, MySQLStatementParserREPLICATION, MySQLStatementParserREQUIRE_ROW_FORMAT, MySQLStatementParserRESET, MySQLStatementParserRESOURCE, MySQLStatementParserRESPECT, MySQLStatementParserRESTART, MySQLStatementParserRESTORE, MySQLStatementParserRESUME, MySQLStatementParserRETAIN, MySQLStatementParserRETURNED_SQLSTATE, MySQLStatementParserRETURNING, MySQLStatementParserRETURNS, MySQLStatementParserREUSE, MySQLStatementParserREVERSE, MySQLStatementParserRIGHT, MySQLStatementParserROLE, MySQLStatementParserROLLBACK, MySQLStatementParserROLLUP, MySQLStatementParserROTATE, MySQLStatementParserROUTINE, MySQLStatementParserROW, MySQLStatementParserROW_COUNT, MySQLStatementParserROW_FORMAT, MySQLStatementParserROW_NUMBER, MySQLStatementParserRTREE, MySQLStatementParserSAVEPOINT, MySQLStatementParserSCHEDULE, MySQLStatementParserSCHEMA, MySQLStatementParserSCHEMA_NAME, MySQLStatementParserSECOND, MySQLStatementParserSECONDARY, MySQLStatementParserSECONDARY_ENGINE, MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, MySQLStatementParserSECONDARY_LOAD, MySQLStatementParserSECONDARY_UNLOAD, MySQLStatementParserSECURITY, MySQLStatementParserSERIAL, MySQLStatementParserSERIALIZABLE, MySQLStatementParserSERVER, MySQLStatementParserSESSION, MySQLStatementParserSHARE, MySQLStatementParserSHUTDOWN, MySQLStatementParserSIGNED, MySQLStatementParserSIMPLE, MySQLStatementParserSLAVE, MySQLStatementParserSLOW, MySQLStatementParserSNAPSHOT, MySQLStatementParserSOCKET, MySQLStatementParserSONAME, MySQLStatementParserSOUNDS, MySQLStatementParserSOURCE, MySQLStatementParserSQL_AFTER_GTIDS, MySQLStatementParserSQL_AFTER_MTS_GAPS, MySQLStatementParserSQL_BEFORE_GTIDS, MySQLStatementParserSQL_BUFFER_RESULT, MySQLStatementParserSQL_NO_CACHE, MySQLStatementParserSQL_THREAD, MySQLStatementParserSRID, MySQLStatementParserSTACKED, MySQLStatementParserSTART, MySQLStatementParserSTARTS, MySQLStatementParserSTATS_AUTO_RECALC, MySQLStatementParserSTATS_PERSISTENT, MySQLStatementParserSTATS_SAMPLE_PAGES, MySQLStatementParserSTATUS, MySQLStatementParserSTOP, MySQLStatementParserSTORAGE, MySQLStatementParserSTREAM, MySQLStatementParserSTRING, MySQLStatementParserSUBCLASS_ORIGIN, MySQLStatementParserSUBJECT, MySQLStatementParserSUBPARTITION, MySQLStatementParserSUBPARTITIONS, MySQLStatementParserSUPER, MySQLStatementParserSUSPEND, MySQLStatementParserSWAPS, MySQLStatementParserSWITCHES, MySQLStatementParserTABLES, MySQLStatementParserTABLESPACE, MySQLStatementParserTABLE_CHECKSUM, MySQLStatementParserTABLE_NAME, MySQLStatementParserTEMPORARY, MySQLStatementParserTEMPTABLE, MySQLStatementParserTEXT, MySQLStatementParserTHAN, MySQLStatementParserTHREAD_PRIORITY, MySQLStatementParserTIES, MySQLStatementParserTIME, MySQLStatementParserTIMESTAMP, MySQLStatementParserTIMESTAMP_ADD, MySQLStatementParserTIMESTAMP_DIFF, MySQLStatementParserTLS, MySQLStatementParserTRANSACTION, MySQLStatementParserTRIGGERS, MySQLStatementParserTRUE, MySQLStatementParserTRUNCATE, MySQLStatementParserTYPE, MySQLStatementParserTYPES, MySQLStatementParserUNBOUNDED, MySQLStatementParserUNCOMMITTED, MySQLStatementParserUNDEFINED, MySQLStatementParserUNDOFILE, MySQLStatementParserUNDO_BUFFER_SIZE, MySQLStatementParserUNICODE, MySQLStatementParserUNINSTALL, MySQLStatementParserUNKNOWN, MySQLStatementParserUNTIL, MySQLStatementParserUPGRADE, MySQLStatementParserUSER, MySQLStatementParserUSER_RESOURCES, MySQLStatementParserUSE_FRM, MySQLStatementParserUTC_TIMESTAMP, MySQLStatementParserVALIDATION, MySQLStatementParserVALUE, MySQLStatementParserVALUES, MySQLStatementParserVARIABLES, MySQLStatementParserVCPU, MySQLStatementParserVIEW, MySQLStatementParserVISIBLE, MySQLStatementParserWAIT, MySQLStatementParserWARNINGS, MySQLStatementParserWEEK, MySQLStatementParserWEIGHT_STRING, MySQLStatementParserWITHOUT, MySQLStatementParserWORK, MySQLStatementParserWRAPPER, MySQLStatementParserX509, MySQLStatementParserXA, MySQLStatementParserXID, MySQLStatementParserXML, MySQLStatementParserYEAR, MySQLStatementParserIDENTIFIER_, MySQLStatementParserSINGLE_QUOTED_TEXT, MySQLStatementParserDOUBLE_QUOTED_TEXT, MySQLStatementParserNCHAR_TEXT, MySQLStatementParserUNDERSCORE_CHARSET, MySQLStatementParserNUMBER_, MySQLStatementParserHEX_DIGIT_, MySQLStatementParserBIT_NUM_:
		{
			p.SetState(3179)
			p.expr(0)
		}
		p.SetState(3184)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(3180)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(3181)
				p.expr(0)
			}

			p.SetState(3186)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case MySQLStatementParserASTERISK_:
		{
			p.SetState(3187)
			p.Match(MySQLStatementParserASTERISK_)
		}

	case MySQLStatementParserRP_:

	default:
	}
	{
		p.SetState(3190)
		p.Match(MySQLStatementParserRP_)
	}

	return localctx
}

// IRegularFunctionNameContext is an interface to support dynamic dispatch.
type IRegularFunctionNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRegularFunctionNameContext differentiates from other interfaces.
	IsRegularFunctionNameContext()
}

type RegularFunctionNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRegularFunctionNameContext() *RegularFunctionNameContext {
	var p = new(RegularFunctionNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_regularFunctionName
	return p
}

func (*RegularFunctionNameContext) IsRegularFunctionNameContext() {}

func NewRegularFunctionNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RegularFunctionNameContext {
	var p = new(RegularFunctionNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_regularFunctionName

	return p
}

func (s *RegularFunctionNameContext) GetParser() antlr.Parser { return s.parser }

func (s *RegularFunctionNameContext) IF() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIF, 0)
}

func (s *RegularFunctionNameContext) LOCALTIME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCALTIME, 0)
}

func (s *RegularFunctionNameContext) LOCALTIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCALTIMESTAMP, 0)
}

func (s *RegularFunctionNameContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLACE, 0)
}

func (s *RegularFunctionNameContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINTERVAL, 0)
}

func (s *RegularFunctionNameContext) MOD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMOD, 0)
}

func (s *RegularFunctionNameContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDATABASE, 0)
}

func (s *RegularFunctionNameContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSCHEMA, 0)
}

func (s *RegularFunctionNameContext) LEFT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLEFT, 0)
}

func (s *RegularFunctionNameContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRIGHT, 0)
}

func (s *RegularFunctionNameContext) DATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDATE, 0)
}

func (s *RegularFunctionNameContext) DAY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDAY, 0)
}

func (s *RegularFunctionNameContext) GEOMETRYCOLLECTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGEOMETRYCOLLECTION, 0)
}

func (s *RegularFunctionNameContext) LINESTRING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLINESTRING, 0)
}

func (s *RegularFunctionNameContext) MULTILINESTRING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMULTILINESTRING, 0)
}

func (s *RegularFunctionNameContext) MULTIPOINT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMULTIPOINT, 0)
}

func (s *RegularFunctionNameContext) MULTIPOLYGON() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMULTIPOLYGON, 0)
}

func (s *RegularFunctionNameContext) POINT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPOINT, 0)
}

func (s *RegularFunctionNameContext) POLYGON() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPOLYGON, 0)
}

func (s *RegularFunctionNameContext) TIME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTIME, 0)
}

func (s *RegularFunctionNameContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTIMESTAMP, 0)
}

func (s *RegularFunctionNameContext) TIMESTAMP_ADD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTIMESTAMP_ADD, 0)
}

func (s *RegularFunctionNameContext) TIMESTAMP_DIFF() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTIMESTAMP_DIFF, 0)
}

func (s *RegularFunctionNameContext) CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCURRENT_TIMESTAMP, 0)
}

func (s *RegularFunctionNameContext) CURRENT_DATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCURRENT_DATE, 0)
}

func (s *RegularFunctionNameContext) CURRENT_TIME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCURRENT_TIME, 0)
}

func (s *RegularFunctionNameContext) UTC_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUTC_TIMESTAMP, 0)
}

func (s *RegularFunctionNameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *RegularFunctionNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RegularFunctionNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RegularFunctionNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterRegularFunctionName(s)
	}
}

func (s *RegularFunctionNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitRegularFunctionName(s)
	}
}

func (s *RegularFunctionNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitRegularFunctionName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) RegularFunctionName() (localctx IRegularFunctionNameContext) {
	this := p
	_ = this

	localctx = NewRegularFunctionNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 420, MySQLStatementParserRULE_regularFunctionName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3221)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 305, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3192)
			p.Match(MySQLStatementParserIF)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3193)
			p.Match(MySQLStatementParserLOCALTIME)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3194)
			p.Match(MySQLStatementParserLOCALTIMESTAMP)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3195)
			p.Match(MySQLStatementParserREPLACE)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3196)
			p.Match(MySQLStatementParserINTERVAL)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3197)
			p.Match(MySQLStatementParserMOD)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(3198)
			p.Match(MySQLStatementParserDATABASE)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(3199)
			p.Match(MySQLStatementParserSCHEMA)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(3200)
			p.Match(MySQLStatementParserLEFT)
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(3201)
			p.Match(MySQLStatementParserRIGHT)
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(3202)
			p.Match(MySQLStatementParserDATE)
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(3203)
			p.Match(MySQLStatementParserDAY)
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(3204)
			p.Match(MySQLStatementParserGEOMETRYCOLLECTION)
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(3205)
			p.Match(MySQLStatementParserLINESTRING)
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(3206)
			p.Match(MySQLStatementParserMULTILINESTRING)
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(3207)
			p.Match(MySQLStatementParserMULTIPOINT)
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(3208)
			p.Match(MySQLStatementParserMULTIPOLYGON)
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(3209)
			p.Match(MySQLStatementParserPOINT)
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(3210)
			p.Match(MySQLStatementParserPOLYGON)
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(3211)
			p.Match(MySQLStatementParserTIME)
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(3212)
			p.Match(MySQLStatementParserTIMESTAMP)
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(3213)
			p.Match(MySQLStatementParserTIMESTAMP_ADD)
		}

	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(3214)
			p.Match(MySQLStatementParserTIMESTAMP_DIFF)
		}

	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(3215)
			p.Match(MySQLStatementParserDATE)
		}

	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(3216)
			p.Match(MySQLStatementParserCURRENT_TIMESTAMP)
		}

	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(3217)
			p.Match(MySQLStatementParserCURRENT_DATE)
		}

	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(3218)
			p.Match(MySQLStatementParserCURRENT_TIME)
		}

	case 28:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(3219)
			p.Match(MySQLStatementParserUTC_TIMESTAMP)
		}

	case 29:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(3220)
			p.Identifier()
		}

	}

	return localctx
}

// IMatchExpressionContext is an interface to support dynamic dispatch.
type IMatchExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMatchExpressionContext differentiates from other interfaces.
	IsMatchExpressionContext()
}

type MatchExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchExpressionContext() *MatchExpressionContext {
	var p = new(MatchExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_matchExpression
	return p
}

func (*MatchExpressionContext) IsMatchExpressionContext() {}

func NewMatchExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchExpressionContext {
	var p = new(MatchExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_matchExpression

	return p
}

func (s *MatchExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchExpressionContext) MATCH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMATCH, 0)
}

func (s *MatchExpressionContext) AGAINST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAGAINST, 0)
}

func (s *MatchExpressionContext) AllLP_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserLP_)
}

func (s *MatchExpressionContext) LP_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, i)
}

func (s *MatchExpressionContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *MatchExpressionContext) AllRP_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserRP_)
}

func (s *MatchExpressionContext) RP_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, i)
}

func (s *MatchExpressionContext) ColumnRefList() IColumnRefListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnRefListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnRefListContext)
}

func (s *MatchExpressionContext) MatchSearchModifier() IMatchSearchModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMatchSearchModifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMatchSearchModifierContext)
}

func (s *MatchExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterMatchExpression(s)
	}
}

func (s *MatchExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitMatchExpression(s)
	}
}

func (s *MatchExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitMatchExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) MatchExpression() (localctx IMatchExpressionContext) {
	this := p
	_ = this

	localctx = NewMatchExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 422, MySQLStatementParserRULE_matchExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3223)
		p.Match(MySQLStatementParserMATCH)
	}
	p.SetState(3229)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserMAX, MySQLStatementParserMIN, MySQLStatementParserSUM, MySQLStatementParserCOUNT, MySQLStatementParserGROUP_CONCAT, MySQLStatementParserCAST, MySQLStatementParserPOSITION, MySQLStatementParserSUBSTRING, MySQLStatementParserSUBSTR, MySQLStatementParserEXTRACT, MySQLStatementParserTRIM, MySQLStatementParserLAST_DAY, MySQLStatementParserTRADITIONAL, MySQLStatementParserTREE, MySQLStatementParserMYSQL_ADMIN, MySQLStatementParserINSTANT, MySQLStatementParserINPLACE, MySQLStatementParserCOPY, MySQLStatementParserUL_BINARY, MySQLStatementParserAUTOCOMMIT, MySQLStatementParserINNODB, MySQLStatementParserREDO_LOG, MySQLStatementParserACCOUNT, MySQLStatementParserACTION, MySQLStatementParserACTIVE, MySQLStatementParserADMIN, MySQLStatementParserAFTER, MySQLStatementParserAGAINST, MySQLStatementParserAGGREGATE, MySQLStatementParserALGORITHM, MySQLStatementParserALWAYS, MySQLStatementParserANY, MySQLStatementParserARRAY, MySQLStatementParserASCII, MySQLStatementParserAT, MySQLStatementParserATTRIBUTE, MySQLStatementParserAUTOEXTEND_SIZE, MySQLStatementParserAUTO_INCREMENT, MySQLStatementParserAVG, MySQLStatementParserAVG_ROW_LENGTH, MySQLStatementParserBACKUP, MySQLStatementParserBEGIN, MySQLStatementParserBINLOG, MySQLStatementParserBIT, MySQLStatementParserBLOCK, MySQLStatementParserBOOL, MySQLStatementParserBOOLEAN, MySQLStatementParserBTREE, MySQLStatementParserBUCKETS, MySQLStatementParserBYTE, MySQLStatementParserCACHE, MySQLStatementParserCASCADED, MySQLStatementParserCATALOG_NAME, MySQLStatementParserCHAIN, MySQLStatementParserCHANGED, MySQLStatementParserCHANNEL, MySQLStatementParserCHARSET, MySQLStatementParserCHECKSUM, MySQLStatementParserCIPHER, MySQLStatementParserCLASS_ORIGIN, MySQLStatementParserCLIENT, MySQLStatementParserCLONE, MySQLStatementParserCLOSE, MySQLStatementParserCOALESCE, MySQLStatementParserCODE, MySQLStatementParserCOLLATION, MySQLStatementParserCOLUMNS, MySQLStatementParserCOLUMN_FORMAT, MySQLStatementParserCOLUMN_NAME, MySQLStatementParserCOMMENT, MySQLStatementParserCOMMIT, MySQLStatementParserCOMMITTED, MySQLStatementParserCOMPACT, MySQLStatementParserCOMPLETION, MySQLStatementParserCOMPONENT, MySQLStatementParserCOMPRESSED, MySQLStatementParserCOMPRESSION, MySQLStatementParserCONCURRENT, MySQLStatementParserCONNECTION, MySQLStatementParserCONSISTENT, MySQLStatementParserCONSTRAINT_CATALOG, MySQLStatementParserCONSTRAINT_NAME, MySQLStatementParserCONSTRAINT_SCHEMA, MySQLStatementParserCONTAINS, MySQLStatementParserCONTEXT, MySQLStatementParserCPU, MySQLStatementParserCURRENT, MySQLStatementParserCURSOR_NAME, MySQLStatementParserDATA, MySQLStatementParserDATAFILE, MySQLStatementParserDATE, MySQLStatementParserDATETIME, MySQLStatementParserDAY, MySQLStatementParserDEALLOCATE, MySQLStatementParserDEFAULT_AUTH, MySQLStatementParserDEFINER, MySQLStatementParserDEFINITION, MySQLStatementParserDELAY_KEY_WRITE, MySQLStatementParserDESCRIPTION, MySQLStatementParserDIAGNOSTICS, MySQLStatementParserDIRECTORY, MySQLStatementParserDISABLE, MySQLStatementParserDISCARD, MySQLStatementParserDISK, MySQLStatementParserDO, MySQLStatementParserDUMPFILE, MySQLStatementParserDUPLICATE, MySQLStatementParserDYNAMIC, MySQLStatementParserENABLE, MySQLStatementParserENCRYPTION, MySQLStatementParserEND, MySQLStatementParserENDS, MySQLStatementParserENFORCED, MySQLStatementParserENGINE, MySQLStatementParserENGINES, MySQLStatementParserENGINE_ATTRIBUTE, MySQLStatementParserENUM, MySQLStatementParserERROR, MySQLStatementParserERRORS, MySQLStatementParserESCAPE, MySQLStatementParserEVENT, MySQLStatementParserEVENTS, MySQLStatementParserEVERY, MySQLStatementParserEXCHANGE, MySQLStatementParserEXCLUDE, MySQLStatementParserEXECUTE, MySQLStatementParserEXPANSION, MySQLStatementParserEXPIRE, MySQLStatementParserEXPORT, MySQLStatementParserEXTENDED, MySQLStatementParserEXTENT_SIZE, MySQLStatementParserFAILED_LOGIN_ATTEMPTS, MySQLStatementParserFAST, MySQLStatementParserFAULTS, MySQLStatementParserFILE, MySQLStatementParserFILE_BLOCK_SIZE, MySQLStatementParserFILTER, MySQLStatementParserFIRST, MySQLStatementParserFIXED, MySQLStatementParserFLUSH, MySQLStatementParserFOLLOWING, MySQLStatementParserFOLLOWS, MySQLStatementParserFORMAT, MySQLStatementParserFOUND, MySQLStatementParserFULL, MySQLStatementParserGENERAL, MySQLStatementParserGEOMETRY, MySQLStatementParserGEOMETRYCOLLECTION, MySQLStatementParserGET_FORMAT, MySQLStatementParserGET_MASTER_PUBLIC_KEY, MySQLStatementParserGLOBAL, MySQLStatementParserGRANTS, MySQLStatementParserGROUP_REPLICATION, MySQLStatementParserHANDLER, MySQLStatementParserHASH, MySQLStatementParserHELP, MySQLStatementParserHISTOGRAM, MySQLStatementParserHISTORY, MySQLStatementParserHOST, MySQLStatementParserHOSTS, MySQLStatementParserHOUR, MySQLStatementParserIDENTIFIED, MySQLStatementParserIGNORE_SERVER_IDS, MySQLStatementParserIMPORT, MySQLStatementParserINACTIVE, MySQLStatementParserINDEXES, MySQLStatementParserINITIAL_SIZE, MySQLStatementParserINSERT_METHOD, MySQLStatementParserINSTALL, MySQLStatementParserINSTANCE, MySQLStatementParserINVISIBLE, MySQLStatementParserINVOKER, MySQLStatementParserIO, MySQLStatementParserIPC, MySQLStatementParserISOLATION, MySQLStatementParserISSUER, MySQLStatementParserJSON, MySQLStatementParserJSON_VALUE, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserLANGUAGE, MySQLStatementParserLAST, MySQLStatementParserLAST_VALUE, MySQLStatementParserLEAVES, MySQLStatementParserLESS, MySQLStatementParserLEVEL, MySQLStatementParserLINESTRING, MySQLStatementParserLIST, MySQLStatementParserLOCAL, MySQLStatementParserLOCKED, MySQLStatementParserLOCKS, MySQLStatementParserLOGFILE, MySQLStatementParserLOGS, MySQLStatementParserMASTER, MySQLStatementParserMASTER_AUTO_POSITION, MySQLStatementParserMASTER_COMPRESSION_ALGORITHM, MySQLStatementParserMASTER_CONNECT_RETRY, MySQLStatementParserMASTER_DELAY, MySQLStatementParserMASTER_HEARTBEAT_PERIOD, MySQLStatementParserMASTER_HOST, MySQLStatementParserMASTER_LOG_FILE, MySQLStatementParserMASTER_LOG_POS, MySQLStatementParserMASTER_PASSWORD, MySQLStatementParserMASTER_PORT, MySQLStatementParserMASTER_PUBLIC_KEY_PATH, MySQLStatementParserMASTER_RETRY_COUNT, MySQLStatementParserMASTER_SERVER_ID, MySQLStatementParserMASTER_SSL, MySQLStatementParserMASTER_SSL_CA, MySQLStatementParserMASTER_SSL_CAPATH, MySQLStatementParserMASTER_SSL_CERT, MySQLStatementParserMASTER_SSL_CIPHER, MySQLStatementParserMASTER_SSL_CRL, MySQLStatementParserMASTER_SSL_CRLPATH, MySQLStatementParserMASTER_SSL_KEY, MySQLStatementParserMASTER_TLS_CIPHERSUITES, MySQLStatementParserMASTER_TLS_VERSION, MySQLStatementParserMASTER_USER, MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL, MySQLStatementParserMAX_CONNECTIONS_PER_HOUR, MySQLStatementParserMAX_QUERIES_PER_HOUR, MySQLStatementParserMAX_ROWS, MySQLStatementParserMAX_SIZE, MySQLStatementParserMAX_UPDATES_PER_HOUR, MySQLStatementParserMAX_USER_CONNECTIONS, MySQLStatementParserMEDIUM, MySQLStatementParserMEMBER, MySQLStatementParserMEMORY, MySQLStatementParserMERGE, MySQLStatementParserMESSAGE_TEXT, MySQLStatementParserMICROSECOND, MySQLStatementParserMIGRATE, MySQLStatementParserMINUTE, MySQLStatementParserMIN_ROWS, MySQLStatementParserMODE, MySQLStatementParserMODIFY, MySQLStatementParserMONTH, MySQLStatementParserMULTILINESTRING, MySQLStatementParserMULTIPOINT, MySQLStatementParserMULTIPOLYGON, MySQLStatementParserMUTEX, MySQLStatementParserMYSQL_ERRNO, MySQLStatementParserNAME, MySQLStatementParserNAMES, MySQLStatementParserNATIONAL, MySQLStatementParserNCHAR, MySQLStatementParserNDBCLUSTER, MySQLStatementParserNESTED, MySQLStatementParserNETWORK_NAMESPACE, MySQLStatementParserNEVER, MySQLStatementParserNEW, MySQLStatementParserNEXT, MySQLStatementParserNO, MySQLStatementParserNODEGROUP, MySQLStatementParserNONE, MySQLStatementParserNOWAIT, MySQLStatementParserNO_WAIT, MySQLStatementParserNULLS, MySQLStatementParserNUMBER, MySQLStatementParserNVARCHAR, MySQLStatementParserOFF, MySQLStatementParserOFFSET, MySQLStatementParserOJ, MySQLStatementParserOLD, MySQLStatementParserONE, MySQLStatementParserONLY, MySQLStatementParserOPEN, MySQLStatementParserOPTIONAL, MySQLStatementParserOPTIONS, MySQLStatementParserORDINALITY, MySQLStatementParserORGANIZATION, MySQLStatementParserOTHERS, MySQLStatementParserOWNER, MySQLStatementParserPACK_KEYS, MySQLStatementParserPAGE, MySQLStatementParserPARSER, MySQLStatementParserPARTIAL, MySQLStatementParserPARTITIONING, MySQLStatementParserPARTITIONS, MySQLStatementParserPASSWORD, MySQLStatementParserPASSWORD_LOCK_TIME, MySQLStatementParserPATH, MySQLStatementParserPERSIST, MySQLStatementParserPERSIST_ONLY, MySQLStatementParserPHASE, MySQLStatementParserPLUGIN, MySQLStatementParserPLUGINS, MySQLStatementParserPLUGIN_DIR, MySQLStatementParserPOINT, MySQLStatementParserPOLYGON, MySQLStatementParserPORT, MySQLStatementParserPRECEDES, MySQLStatementParserPRECEDING, MySQLStatementParserPREPARE, MySQLStatementParserPRESERVE, MySQLStatementParserPREV, MySQLStatementParserPRIVILEGES, MySQLStatementParserPRIVILEGE_CHECKS_USER, MySQLStatementParserPROCESS, MySQLStatementParserPROCESSLIST, MySQLStatementParserPROFILE, MySQLStatementParserPROFILES, MySQLStatementParserPROXY, MySQLStatementParserQUARTER, MySQLStatementParserQUERY, MySQLStatementParserQUICK, MySQLStatementParserRANDOM, MySQLStatementParserREAD_ONLY, MySQLStatementParserREBUILD, MySQLStatementParserRECOVER, MySQLStatementParserREDO_BUFFER_SIZE, MySQLStatementParserREDUNDANT, MySQLStatementParserREFERENCE, MySQLStatementParserRELAY, MySQLStatementParserRELAYLOG, MySQLStatementParserRELAY_LOG_FILE, MySQLStatementParserRELAY_LOG_POS, MySQLStatementParserRELAY_THREAD, MySQLStatementParserRELOAD, MySQLStatementParserREMOVE, MySQLStatementParserREORGANIZE, MySQLStatementParserREPAIR, MySQLStatementParserREPEATABLE, MySQLStatementParserREPLICATE_DO_DB, MySQLStatementParserREPLICATE_DO_TABLE, MySQLStatementParserREPLICATE_IGNORE_DB, MySQLStatementParserREPLICATE_IGNORE_TABLE, MySQLStatementParserREPLICATE_REWRITE_DB, MySQLStatementParserREPLICATE_WILD_DO_TABLE, MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE, MySQLStatementParserREPLICATION, MySQLStatementParserREQUIRE_ROW_FORMAT, MySQLStatementParserRESET, MySQLStatementParserRESOURCE, MySQLStatementParserRESPECT, MySQLStatementParserRESTART, MySQLStatementParserRESTORE, MySQLStatementParserRESUME, MySQLStatementParserRETAIN, MySQLStatementParserRETURNED_SQLSTATE, MySQLStatementParserRETURNING, MySQLStatementParserRETURNS, MySQLStatementParserREUSE, MySQLStatementParserREVERSE, MySQLStatementParserROLE, MySQLStatementParserROLLBACK, MySQLStatementParserROLLUP, MySQLStatementParserROTATE, MySQLStatementParserROUTINE, MySQLStatementParserROW_COUNT, MySQLStatementParserROW_FORMAT, MySQLStatementParserRTREE, MySQLStatementParserSAVEPOINT, MySQLStatementParserSCHEDULE, MySQLStatementParserSCHEMA_NAME, MySQLStatementParserSECOND, MySQLStatementParserSECONDARY, MySQLStatementParserSECONDARY_ENGINE, MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, MySQLStatementParserSECONDARY_LOAD, MySQLStatementParserSECONDARY_UNLOAD, MySQLStatementParserSECURITY, MySQLStatementParserSERIAL, MySQLStatementParserSERIALIZABLE, MySQLStatementParserSERVER, MySQLStatementParserSESSION, MySQLStatementParserSHARE, MySQLStatementParserSHUTDOWN, MySQLStatementParserSIGNED, MySQLStatementParserSIMPLE, MySQLStatementParserSLAVE, MySQLStatementParserSLOW, MySQLStatementParserSNAPSHOT, MySQLStatementParserSOCKET, MySQLStatementParserSONAME, MySQLStatementParserSOUNDS, MySQLStatementParserSOURCE, MySQLStatementParserSQL_AFTER_GTIDS, MySQLStatementParserSQL_AFTER_MTS_GAPS, MySQLStatementParserSQL_BEFORE_GTIDS, MySQLStatementParserSQL_BUFFER_RESULT, MySQLStatementParserSQL_NO_CACHE, MySQLStatementParserSQL_THREAD, MySQLStatementParserSRID, MySQLStatementParserSTACKED, MySQLStatementParserSTART, MySQLStatementParserSTARTS, MySQLStatementParserSTATS_AUTO_RECALC, MySQLStatementParserSTATS_PERSISTENT, MySQLStatementParserSTATS_SAMPLE_PAGES, MySQLStatementParserSTATUS, MySQLStatementParserSTOP, MySQLStatementParserSTORAGE, MySQLStatementParserSTREAM, MySQLStatementParserSTRING, MySQLStatementParserSUBCLASS_ORIGIN, MySQLStatementParserSUBJECT, MySQLStatementParserSUBPARTITION, MySQLStatementParserSUBPARTITIONS, MySQLStatementParserSUPER, MySQLStatementParserSUSPEND, MySQLStatementParserSWAPS, MySQLStatementParserSWITCHES, MySQLStatementParserTABLES, MySQLStatementParserTABLESPACE, MySQLStatementParserTABLE_CHECKSUM, MySQLStatementParserTABLE_NAME, MySQLStatementParserTEMPORARY, MySQLStatementParserTEMPTABLE, MySQLStatementParserTEXT, MySQLStatementParserTHAN, MySQLStatementParserTHREAD_PRIORITY, MySQLStatementParserTIES, MySQLStatementParserTIME, MySQLStatementParserTIMESTAMP, MySQLStatementParserTIMESTAMP_ADD, MySQLStatementParserTIMESTAMP_DIFF, MySQLStatementParserTLS, MySQLStatementParserTRANSACTION, MySQLStatementParserTRIGGERS, MySQLStatementParserTRUNCATE, MySQLStatementParserTYPE, MySQLStatementParserTYPES, MySQLStatementParserUNBOUNDED, MySQLStatementParserUNCOMMITTED, MySQLStatementParserUNDEFINED, MySQLStatementParserUNDOFILE, MySQLStatementParserUNDO_BUFFER_SIZE, MySQLStatementParserUNICODE, MySQLStatementParserUNINSTALL, MySQLStatementParserUNKNOWN, MySQLStatementParserUNTIL, MySQLStatementParserUPGRADE, MySQLStatementParserUSER, MySQLStatementParserUSER_RESOURCES, MySQLStatementParserUSE_FRM, MySQLStatementParserVALIDATION, MySQLStatementParserVALUE, MySQLStatementParserVARIABLES, MySQLStatementParserVCPU, MySQLStatementParserVIEW, MySQLStatementParserVISIBLE, MySQLStatementParserWAIT, MySQLStatementParserWARNINGS, MySQLStatementParserWEEK, MySQLStatementParserWEIGHT_STRING, MySQLStatementParserWITHOUT, MySQLStatementParserWORK, MySQLStatementParserWRAPPER, MySQLStatementParserX509, MySQLStatementParserXA, MySQLStatementParserXID, MySQLStatementParserXML, MySQLStatementParserYEAR, MySQLStatementParserIDENTIFIER_, MySQLStatementParserDOUBLE_QUOTED_TEXT:
		{
			p.SetState(3224)
			p.ColumnRefList()
		}

	case MySQLStatementParserLP_:
		{
			p.SetState(3225)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(3226)
			p.ColumnRefList()
		}
		{
			p.SetState(3227)
			p.Match(MySQLStatementParserRP_)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(3231)
		p.Match(MySQLStatementParserAGAINST)
	}
	{
		p.SetState(3232)
		p.Match(MySQLStatementParserLP_)
	}
	{
		p.SetState(3233)
		p.expr(0)
	}
	p.SetState(3235)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIN || _la == MySQLStatementParserWITH {
		{
			p.SetState(3234)
			p.MatchSearchModifier()
		}

	}
	{
		p.SetState(3237)
		p.Match(MySQLStatementParserRP_)
	}

	return localctx
}

// IMatchSearchModifierContext is an interface to support dynamic dispatch.
type IMatchSearchModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMatchSearchModifierContext differentiates from other interfaces.
	IsMatchSearchModifierContext()
}

type MatchSearchModifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchSearchModifierContext() *MatchSearchModifierContext {
	var p = new(MatchSearchModifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_matchSearchModifier
	return p
}

func (*MatchSearchModifierContext) IsMatchSearchModifierContext() {}

func NewMatchSearchModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchSearchModifierContext {
	var p = new(MatchSearchModifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_matchSearchModifier

	return p
}

func (s *MatchSearchModifierContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchSearchModifierContext) IN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIN, 0)
}

func (s *MatchSearchModifierContext) NATURAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNATURAL, 0)
}

func (s *MatchSearchModifierContext) LANGUAGE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLANGUAGE, 0)
}

func (s *MatchSearchModifierContext) MODE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMODE, 0)
}

func (s *MatchSearchModifierContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWITH, 0)
}

func (s *MatchSearchModifierContext) QUERY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserQUERY, 0)
}

func (s *MatchSearchModifierContext) EXPANSION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXPANSION, 0)
}

func (s *MatchSearchModifierContext) BOOLEAN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBOOLEAN, 0)
}

func (s *MatchSearchModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchSearchModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchSearchModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterMatchSearchModifier(s)
	}
}

func (s *MatchSearchModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitMatchSearchModifier(s)
	}
}

func (s *MatchSearchModifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitMatchSearchModifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) MatchSearchModifier() (localctx IMatchSearchModifierContext) {
	this := p
	_ = this

	localctx = NewMatchSearchModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 424, MySQLStatementParserRULE_matchSearchModifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3256)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 308, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3239)
			p.Match(MySQLStatementParserIN)
		}
		{
			p.SetState(3240)
			p.Match(MySQLStatementParserNATURAL)
		}
		{
			p.SetState(3241)
			p.Match(MySQLStatementParserLANGUAGE)
		}
		{
			p.SetState(3242)
			p.Match(MySQLStatementParserMODE)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3243)
			p.Match(MySQLStatementParserIN)
		}
		{
			p.SetState(3244)
			p.Match(MySQLStatementParserNATURAL)
		}
		{
			p.SetState(3245)
			p.Match(MySQLStatementParserLANGUAGE)
		}
		{
			p.SetState(3246)
			p.Match(MySQLStatementParserMODE)
		}
		{
			p.SetState(3247)
			p.Match(MySQLStatementParserWITH)
		}
		{
			p.SetState(3248)
			p.Match(MySQLStatementParserQUERY)
		}
		{
			p.SetState(3249)
			p.Match(MySQLStatementParserEXPANSION)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3250)
			p.Match(MySQLStatementParserIN)
		}
		{
			p.SetState(3251)
			p.Match(MySQLStatementParserBOOLEAN)
		}
		{
			p.SetState(3252)
			p.Match(MySQLStatementParserMODE)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3253)
			p.Match(MySQLStatementParserWITH)
		}
		{
			p.SetState(3254)
			p.Match(MySQLStatementParserQUERY)
		}
		{
			p.SetState(3255)
			p.Match(MySQLStatementParserEXPANSION)
		}

	}

	return localctx
}

// ICaseExpressionContext is an interface to support dynamic dispatch.
type ICaseExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseExpressionContext differentiates from other interfaces.
	IsCaseExpressionContext()
}

type CaseExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseExpressionContext() *CaseExpressionContext {
	var p = new(CaseExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_caseExpression
	return p
}

func (*CaseExpressionContext) IsCaseExpressionContext() {}

func NewCaseExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseExpressionContext {
	var p = new(CaseExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_caseExpression

	return p
}

func (s *CaseExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseExpressionContext) CASE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCASE, 0)
}

func (s *CaseExpressionContext) END() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEND, 0)
}

func (s *CaseExpressionContext) SimpleExpr() ISimpleExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleExprContext)
}

func (s *CaseExpressionContext) AllCaseWhen() []ICaseWhenContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaseWhenContext)(nil)).Elem())
	var tst = make([]ICaseWhenContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaseWhenContext)
		}
	}

	return tst
}

func (s *CaseExpressionContext) CaseWhen(i int) ICaseWhenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseWhenContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaseWhenContext)
}

func (s *CaseExpressionContext) CaseElse() ICaseElseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseElseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICaseElseContext)
}

func (s *CaseExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCaseExpression(s)
	}
}

func (s *CaseExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCaseExpression(s)
	}
}

func (s *CaseExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCaseExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CaseExpression() (localctx ICaseExpressionContext) {
	this := p
	_ = this

	localctx = NewCaseExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 426, MySQLStatementParserRULE_caseExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3258)
		p.Match(MySQLStatementParserCASE)
	}
	p.SetState(3260)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MySQLStatementParserNOT_)|(1<<MySQLStatementParserTILDE_)|(1<<MySQLStatementParserPLUS_)|(1<<MySQLStatementParserMINUS_)|(1<<MySQLStatementParserLP_))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySQLStatementParserLBE_-32))|(1<<(MySQLStatementParserQUESTION_-32))|(1<<(MySQLStatementParserAT_-32))|(1<<(MySQLStatementParserMAX-32))|(1<<(MySQLStatementParserMIN-32))|(1<<(MySQLStatementParserSUM-32))|(1<<(MySQLStatementParserCOUNT-32))|(1<<(MySQLStatementParserGROUP_CONCAT-32))|(1<<(MySQLStatementParserCAST-32))|(1<<(MySQLStatementParserPOSITION-32))|(1<<(MySQLStatementParserSUBSTRING-32))|(1<<(MySQLStatementParserSUBSTR-32))|(1<<(MySQLStatementParserEXTRACT-32))|(1<<(MySQLStatementParserTRIM-32))|(1<<(MySQLStatementParserLAST_DAY-32))|(1<<(MySQLStatementParserTRADITIONAL-32))|(1<<(MySQLStatementParserTREE-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(MySQLStatementParserMYSQL_ADMIN-64))|(1<<(MySQLStatementParserINSTANT-64))|(1<<(MySQLStatementParserINPLACE-64))|(1<<(MySQLStatementParserCOPY-64))|(1<<(MySQLStatementParserUL_BINARY-64))|(1<<(MySQLStatementParserAUTOCOMMIT-64))|(1<<(MySQLStatementParserINNODB-64))|(1<<(MySQLStatementParserREDO_LOG-64))|(1<<(MySQLStatementParserACCOUNT-64))|(1<<(MySQLStatementParserACTION-64))|(1<<(MySQLStatementParserACTIVE-64))|(1<<(MySQLStatementParserADMIN-64))|(1<<(MySQLStatementParserAFTER-64))|(1<<(MySQLStatementParserAGAINST-64))|(1<<(MySQLStatementParserAGGREGATE-64))|(1<<(MySQLStatementParserALGORITHM-64))|(1<<(MySQLStatementParserALWAYS-64))|(1<<(MySQLStatementParserANY-64))|(1<<(MySQLStatementParserARRAY-64))|(1<<(MySQLStatementParserASCII-64))|(1<<(MySQLStatementParserAT-64))|(1<<(MySQLStatementParserATTRIBUTE-64)))) != 0) || (((_la-96)&-(0x1f+1)) == 0 && ((1<<uint((_la-96)))&((1<<(MySQLStatementParserAUTOEXTEND_SIZE-96))|(1<<(MySQLStatementParserAUTO_INCREMENT-96))|(1<<(MySQLStatementParserAVG-96))|(1<<(MySQLStatementParserBIT_XOR-96))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-96))|(1<<(MySQLStatementParserBACKUP-96))|(1<<(MySQLStatementParserBEGIN-96))|(1<<(MySQLStatementParserBINARY-96))|(1<<(MySQLStatementParserBINLOG-96))|(1<<(MySQLStatementParserBIT-96))|(1<<(MySQLStatementParserBLOCK-96))|(1<<(MySQLStatementParserBOOL-96))|(1<<(MySQLStatementParserBOOLEAN-96))|(1<<(MySQLStatementParserBTREE-96))|(1<<(MySQLStatementParserBUCKETS-96))|(1<<(MySQLStatementParserBYTE-96))|(1<<(MySQLStatementParserCACHE-96))|(1<<(MySQLStatementParserCASCADED-96))|(1<<(MySQLStatementParserCASE-96))|(1<<(MySQLStatementParserCATALOG_NAME-96))|(1<<(MySQLStatementParserCHAIN-96))|(1<<(MySQLStatementParserCHANGED-96))|(1<<(MySQLStatementParserCHANNEL-96)))) != 0) || (((_la-128)&-(0x1f+1)) == 0 && ((1<<uint((_la-128)))&((1<<(MySQLStatementParserCHAR-128))|(1<<(MySQLStatementParserCHARSET-128))|(1<<(MySQLStatementParserCHECKSUM-128))|(1<<(MySQLStatementParserCIPHER-128))|(1<<(MySQLStatementParserCLASS_ORIGIN-128))|(1<<(MySQLStatementParserCLIENT-128))|(1<<(MySQLStatementParserCLONE-128))|(1<<(MySQLStatementParserCLOSE-128))|(1<<(MySQLStatementParserCOALESCE-128))|(1<<(MySQLStatementParserCODE-128))|(1<<(MySQLStatementParserCOLLATION-128))|(1<<(MySQLStatementParserCOLUMNS-128))|(1<<(MySQLStatementParserCOLUMN_FORMAT-128))|(1<<(MySQLStatementParserCOLUMN_NAME-128))|(1<<(MySQLStatementParserCOMMENT-128))|(1<<(MySQLStatementParserCOMMIT-128))|(1<<(MySQLStatementParserCOMMITTED-128))|(1<<(MySQLStatementParserCOMPACT-128))|(1<<(MySQLStatementParserCOMPLETION-128))|(1<<(MySQLStatementParserCOMPONENT-128))|(1<<(MySQLStatementParserCOMPRESSED-128))|(1<<(MySQLStatementParserCOMPRESSION-128))|(1<<(MySQLStatementParserCONCURRENT-128))|(1<<(MySQLStatementParserCONNECTION-128))|(1<<(MySQLStatementParserCONSISTENT-128))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-128)))) != 0) || (((_la-160)&-(0x1f+1)) == 0 && ((1<<uint((_la-160)))&((1<<(MySQLStatementParserCONSTRAINT_NAME-160))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-160))|(1<<(MySQLStatementParserCONTAINS-160))|(1<<(MySQLStatementParserCONTEXT-160))|(1<<(MySQLStatementParserCONVERT-160))|(1<<(MySQLStatementParserCPU-160))|(1<<(MySQLStatementParserCUME_DIST-160))|(1<<(MySQLStatementParserCURRENT-160))|(1<<(MySQLStatementParserCURRENT_DATE-160))|(1<<(MySQLStatementParserCURRENT_TIME-160))|(1<<(MySQLStatementParserCURRENT_TIMESTAMP-160))|(1<<(MySQLStatementParserCURRENT_USER-160))|(1<<(MySQLStatementParserCURSOR_NAME-160))|(1<<(MySQLStatementParserDATA-160))|(1<<(MySQLStatementParserDATABASE-160))|(1<<(MySQLStatementParserDATAFILE-160))|(1<<(MySQLStatementParserDATE-160))|(1<<(MySQLStatementParserDATETIME-160))|(1<<(MySQLStatementParserDAY-160))|(1<<(MySQLStatementParserDEALLOCATE-160)))) != 0) || (((_la-194)&-(0x1f+1)) == 0 && ((1<<uint((_la-194)))&((1<<(MySQLStatementParserDEFAULT_AUTH-194))|(1<<(MySQLStatementParserDEFINER-194))|(1<<(MySQLStatementParserDEFINITION-194))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-194))|(1<<(MySQLStatementParserDENSE_RANK-194))|(1<<(MySQLStatementParserDESCRIPTION-194))|(1<<(MySQLStatementParserDIAGNOSTICS-194))|(1<<(MySQLStatementParserDIRECTORY-194))|(1<<(MySQLStatementParserDISABLE-194))|(1<<(MySQLStatementParserDISCARD-194))|(1<<(MySQLStatementParserDISK-194))|(1<<(MySQLStatementParserDO-194))|(1<<(MySQLStatementParserDUMPFILE-194))|(1<<(MySQLStatementParserDUPLICATE-194))|(1<<(MySQLStatementParserDYNAMIC-194))|(1<<(MySQLStatementParserENABLE-194)))) != 0) || (((_la-226)&-(0x1f+1)) == 0 && ((1<<uint((_la-226)))&((1<<(MySQLStatementParserENCRYPTION-226))|(1<<(MySQLStatementParserEND-226))|(1<<(MySQLStatementParserENDS-226))|(1<<(MySQLStatementParserENFORCED-226))|(1<<(MySQLStatementParserENGINE-226))|(1<<(MySQLStatementParserENGINES-226))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-226))|(1<<(MySQLStatementParserENUM-226))|(1<<(MySQLStatementParserERROR-226))|(1<<(MySQLStatementParserERRORS-226))|(1<<(MySQLStatementParserESCAPE-226))|(1<<(MySQLStatementParserEVENT-226))|(1<<(MySQLStatementParserEVENTS-226))|(1<<(MySQLStatementParserEVERY-226))|(1<<(MySQLStatementParserEXCHANGE-226))|(1<<(MySQLStatementParserEXCLUDE-226))|(1<<(MySQLStatementParserEXECUTE-226))|(1<<(MySQLStatementParserEXISTS-226))|(1<<(MySQLStatementParserEXPANSION-226))|(1<<(MySQLStatementParserEXPIRE-226))|(1<<(MySQLStatementParserEXPORT-226))|(1<<(MySQLStatementParserEXTENDED-226))|(1<<(MySQLStatementParserEXTENT_SIZE-226))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-226))|(1<<(MySQLStatementParserFALSE-226))|(1<<(MySQLStatementParserFAST-226))|(1<<(MySQLStatementParserFAULTS-226)))) != 0) || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(MySQLStatementParserFILE-258))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-258))|(1<<(MySQLStatementParserFILTER-258))|(1<<(MySQLStatementParserFIRST-258))|(1<<(MySQLStatementParserFIRST_VALUE-258))|(1<<(MySQLStatementParserFIXED-258))|(1<<(MySQLStatementParserFLUSH-258))|(1<<(MySQLStatementParserFOLLOWING-258))|(1<<(MySQLStatementParserFOLLOWS-258))|(1<<(MySQLStatementParserFORMAT-258))|(1<<(MySQLStatementParserFOUND-258))|(1<<(MySQLStatementParserFULL-258))|(1<<(MySQLStatementParserGENERAL-258))|(1<<(MySQLStatementParserGEOMETRY-258))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-258))|(1<<(MySQLStatementParserGET_FORMAT-258))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-258))|(1<<(MySQLStatementParserGLOBAL-258))|(1<<(MySQLStatementParserGRANTS-258)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(MySQLStatementParserGROUP_REPLICATION-292))|(1<<(MySQLStatementParserHANDLER-292))|(1<<(MySQLStatementParserHASH-292))|(1<<(MySQLStatementParserHELP-292))|(1<<(MySQLStatementParserHISTOGRAM-292))|(1<<(MySQLStatementParserHISTORY-292))|(1<<(MySQLStatementParserHOST-292))|(1<<(MySQLStatementParserHOSTS-292))|(1<<(MySQLStatementParserHOUR-292))|(1<<(MySQLStatementParserIDENTIFIED-292))|(1<<(MySQLStatementParserIF-292))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-292))|(1<<(MySQLStatementParserIMPORT-292))|(1<<(MySQLStatementParserINACTIVE-292))|(1<<(MySQLStatementParserINDEXES-292))|(1<<(MySQLStatementParserINITIAL_SIZE-292))|(1<<(MySQLStatementParserINSERT_METHOD-292))|(1<<(MySQLStatementParserINSTALL-292))|(1<<(MySQLStatementParserINSTANCE-292)))) != 0) || (((_la-331)&-(0x1f+1)) == 0 && ((1<<uint((_la-331)))&((1<<(MySQLStatementParserINTERVAL-331))|(1<<(MySQLStatementParserINVISIBLE-331))|(1<<(MySQLStatementParserINVOKER-331))|(1<<(MySQLStatementParserIO-331))|(1<<(MySQLStatementParserIPC-331))|(1<<(MySQLStatementParserISOLATION-331))|(1<<(MySQLStatementParserISSUER-331))|(1<<(MySQLStatementParserJSON-331))|(1<<(MySQLStatementParserJSON_VALUE-331))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-331))|(1<<(MySQLStatementParserLAG-331))|(1<<(MySQLStatementParserLANGUAGE-331))|(1<<(MySQLStatementParserLAST-331))|(1<<(MySQLStatementParserLAST_VALUE-331))|(1<<(MySQLStatementParserLEAD-331))|(1<<(MySQLStatementParserLEAVES-331))|(1<<(MySQLStatementParserLEFT-331))|(1<<(MySQLStatementParserLESS-331))|(1<<(MySQLStatementParserLEVEL-331)))) != 0) || (((_la-367)&-(0x1f+1)) == 0 && ((1<<uint((_la-367)))&((1<<(MySQLStatementParserLINESTRING-367))|(1<<(MySQLStatementParserLIST-367))|(1<<(MySQLStatementParserLOCAL-367))|(1<<(MySQLStatementParserLOCALTIME-367))|(1<<(MySQLStatementParserLOCALTIMESTAMP-367))|(1<<(MySQLStatementParserLOCKED-367))|(1<<(MySQLStatementParserLOCKS-367))|(1<<(MySQLStatementParserLOGFILE-367))|(1<<(MySQLStatementParserLOGS-367))|(1<<(MySQLStatementParserMASTER-367))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-367))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-367))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-367))|(1<<(MySQLStatementParserMASTER_DELAY-367))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-367))|(1<<(MySQLStatementParserMASTER_HOST-367))|(1<<(MySQLStatementParserMASTER_LOG_FILE-367))|(1<<(MySQLStatementParserMASTER_LOG_POS-367))|(1<<(MySQLStatementParserMASTER_PASSWORD-367))|(1<<(MySQLStatementParserMASTER_PORT-367))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-367))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-367))|(1<<(MySQLStatementParserMASTER_SERVER_ID-367))|(1<<(MySQLStatementParserMASTER_SSL-367)))) != 0) || (((_la-399)&-(0x1f+1)) == 0 && ((1<<uint((_la-399)))&((1<<(MySQLStatementParserMASTER_SSL_CA-399))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-399))|(1<<(MySQLStatementParserMASTER_SSL_CERT-399))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-399))|(1<<(MySQLStatementParserMASTER_SSL_CRL-399))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-399))|(1<<(MySQLStatementParserMASTER_SSL_KEY-399))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-399))|(1<<(MySQLStatementParserMASTER_TLS_VERSION-399))|(1<<(MySQLStatementParserMASTER_USER-399))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-399))|(1<<(MySQLStatementParserMATCH-399))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-399))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-399))|(1<<(MySQLStatementParserMAX_ROWS-399))|(1<<(MySQLStatementParserMAX_SIZE-399))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-399))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-399))|(1<<(MySQLStatementParserMEDIUM-399))|(1<<(MySQLStatementParserMEMBER-399))|(1<<(MySQLStatementParserMEMORY-399))|(1<<(MySQLStatementParserMERGE-399))|(1<<(MySQLStatementParserMESSAGE_TEXT-399))|(1<<(MySQLStatementParserMICROSECOND-399))|(1<<(MySQLStatementParserMIGRATE-399))|(1<<(MySQLStatementParserMINUTE-399)))) != 0) || (((_la-433)&-(0x1f+1)) == 0 && ((1<<uint((_la-433)))&((1<<(MySQLStatementParserMIN_ROWS-433))|(1<<(MySQLStatementParserMOD-433))|(1<<(MySQLStatementParserMODE-433))|(1<<(MySQLStatementParserMODIFY-433))|(1<<(MySQLStatementParserMONTH-433))|(1<<(MySQLStatementParserMULTILINESTRING-433))|(1<<(MySQLStatementParserMULTIPOINT-433))|(1<<(MySQLStatementParserMULTIPOLYGON-433))|(1<<(MySQLStatementParserMUTEX-433))|(1<<(MySQLStatementParserMYSQL_ERRNO-433))|(1<<(MySQLStatementParserNAME-433))|(1<<(MySQLStatementParserNAMES-433))|(1<<(MySQLStatementParserNATIONAL-433))|(1<<(MySQLStatementParserNCHAR-433))|(1<<(MySQLStatementParserNDBCLUSTER-433))|(1<<(MySQLStatementParserNESTED-433))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-433))|(1<<(MySQLStatementParserNEVER-433))|(1<<(MySQLStatementParserNEW-433))|(1<<(MySQLStatementParserNEXT-433))|(1<<(MySQLStatementParserNO-433))|(1<<(MySQLStatementParserNODEGROUP-433))|(1<<(MySQLStatementParserNONE-433))|(1<<(MySQLStatementParserNOT-433))|(1<<(MySQLStatementParserNOWAIT-433))|(1<<(MySQLStatementParserNO_WAIT-433))|(1<<(MySQLStatementParserNTH_VALUE-433))|(1<<(MySQLStatementParserNTILE-433))|(1<<(MySQLStatementParserNULL-433)))) != 0) || (((_la-465)&-(0x1f+1)) == 0 && ((1<<uint((_la-465)))&((1<<(MySQLStatementParserNULLS-465))|(1<<(MySQLStatementParserNUMBER-465))|(1<<(MySQLStatementParserNVARCHAR-465))|(1<<(MySQLStatementParserOFF-465))|(1<<(MySQLStatementParserOFFSET-465))|(1<<(MySQLStatementParserOJ-465))|(1<<(MySQLStatementParserOLD-465))|(1<<(MySQLStatementParserONE-465))|(1<<(MySQLStatementParserONLY-465))|(1<<(MySQLStatementParserOPEN-465))|(1<<(MySQLStatementParserOPTIONAL-465))|(1<<(MySQLStatementParserOPTIONS-465))|(1<<(MySQLStatementParserORDINALITY-465))|(1<<(MySQLStatementParserORGANIZATION-465))|(1<<(MySQLStatementParserOTHERS-465))|(1<<(MySQLStatementParserOWNER-465))|(1<<(MySQLStatementParserPACK_KEYS-465))|(1<<(MySQLStatementParserPAGE-465))|(1<<(MySQLStatementParserPARSER-465)))) != 0) || (((_la-497)&-(0x1f+1)) == 0 && ((1<<uint((_la-497)))&((1<<(MySQLStatementParserPARTIAL-497))|(1<<(MySQLStatementParserPARTITIONING-497))|(1<<(MySQLStatementParserPARTITIONS-497))|(1<<(MySQLStatementParserPASSWORD-497))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-497))|(1<<(MySQLStatementParserPATH-497))|(1<<(MySQLStatementParserPERCENT_RANK-497))|(1<<(MySQLStatementParserPERSIST-497))|(1<<(MySQLStatementParserPERSIST_ONLY-497))|(1<<(MySQLStatementParserPHASE-497))|(1<<(MySQLStatementParserPLUGIN-497))|(1<<(MySQLStatementParserPLUGINS-497))|(1<<(MySQLStatementParserPLUGIN_DIR-497))|(1<<(MySQLStatementParserPOINT-497))|(1<<(MySQLStatementParserPOLYGON-497))|(1<<(MySQLStatementParserPORT-497))|(1<<(MySQLStatementParserPRECEDES-497))|(1<<(MySQLStatementParserPRECEDING-497))|(1<<(MySQLStatementParserPREPARE-497))|(1<<(MySQLStatementParserPRESERVE-497))|(1<<(MySQLStatementParserPREV-497))|(1<<(MySQLStatementParserPRIVILEGES-497))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-497))|(1<<(MySQLStatementParserPROCESS-497))|(1<<(MySQLStatementParserPROCESSLIST-497))|(1<<(MySQLStatementParserPROFILE-497))|(1<<(MySQLStatementParserPROFILES-497))|(1<<(MySQLStatementParserPROXY-497)))) != 0) || (((_la-530)&-(0x1f+1)) == 0 && ((1<<uint((_la-530)))&((1<<(MySQLStatementParserQUARTER-530))|(1<<(MySQLStatementParserQUERY-530))|(1<<(MySQLStatementParserQUICK-530))|(1<<(MySQLStatementParserRANDOM-530))|(1<<(MySQLStatementParserRANK-530))|(1<<(MySQLStatementParserREAD_ONLY-530))|(1<<(MySQLStatementParserREBUILD-530))|(1<<(MySQLStatementParserRECOVER-530))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-530))|(1<<(MySQLStatementParserREDUNDANT-530))|(1<<(MySQLStatementParserREFERENCE-530))|(1<<(MySQLStatementParserRELAY-530))|(1<<(MySQLStatementParserRELAYLOG-530))|(1<<(MySQLStatementParserRELAY_LOG_FILE-530))|(1<<(MySQLStatementParserRELAY_LOG_POS-530))|(1<<(MySQLStatementParserRELAY_THREAD-530))|(1<<(MySQLStatementParserRELOAD-530))|(1<<(MySQLStatementParserREMOVE-530))|(1<<(MySQLStatementParserREORGANIZE-530))|(1<<(MySQLStatementParserREPAIR-530))|(1<<(MySQLStatementParserREPEATABLE-530)))) != 0) || (((_la-562)&-(0x1f+1)) == 0 && ((1<<uint((_la-562)))&((1<<(MySQLStatementParserREPLACE-562))|(1<<(MySQLStatementParserREPLICATE_DO_DB-562))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-562))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-562))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-562))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-562))|(1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-562))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-562))|(1<<(MySQLStatementParserREPLICATION-562))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-562))|(1<<(MySQLStatementParserRESET-562))|(1<<(MySQLStatementParserRESOURCE-562))|(1<<(MySQLStatementParserRESPECT-562))|(1<<(MySQLStatementParserRESTART-562))|(1<<(MySQLStatementParserRESTORE-562))|(1<<(MySQLStatementParserRESUME-562))|(1<<(MySQLStatementParserRETAIN-562))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-562))|(1<<(MySQLStatementParserRETURNING-562))|(1<<(MySQLStatementParserRETURNS-562))|(1<<(MySQLStatementParserREUSE-562))|(1<<(MySQLStatementParserREVERSE-562))|(1<<(MySQLStatementParserRIGHT-562))|(1<<(MySQLStatementParserROLE-562)))) != 0) || (((_la-594)&-(0x1f+1)) == 0 && ((1<<uint((_la-594)))&((1<<(MySQLStatementParserROLLBACK-594))|(1<<(MySQLStatementParserROLLUP-594))|(1<<(MySQLStatementParserROTATE-594))|(1<<(MySQLStatementParserROUTINE-594))|(1<<(MySQLStatementParserROW-594))|(1<<(MySQLStatementParserROW_COUNT-594))|(1<<(MySQLStatementParserROW_FORMAT-594))|(1<<(MySQLStatementParserROW_NUMBER-594))|(1<<(MySQLStatementParserRTREE-594))|(1<<(MySQLStatementParserSAVEPOINT-594))|(1<<(MySQLStatementParserSCHEDULE-594))|(1<<(MySQLStatementParserSCHEMA-594))|(1<<(MySQLStatementParserSCHEMA_NAME-594))|(1<<(MySQLStatementParserSECOND-594))|(1<<(MySQLStatementParserSECONDARY-594))|(1<<(MySQLStatementParserSECONDARY_ENGINE-594))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-594))|(1<<(MySQLStatementParserSECONDARY_LOAD-594))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-594))|(1<<(MySQLStatementParserSECURITY-594))|(1<<(MySQLStatementParserSERIAL-594))|(1<<(MySQLStatementParserSERIALIZABLE-594))|(1<<(MySQLStatementParserSERVER-594))|(1<<(MySQLStatementParserSESSION-594))|(1<<(MySQLStatementParserSHARE-594)))) != 0) || (((_la-627)&-(0x1f+1)) == 0 && ((1<<uint((_la-627)))&((1<<(MySQLStatementParserSHUTDOWN-627))|(1<<(MySQLStatementParserSIGNED-627))|(1<<(MySQLStatementParserSIMPLE-627))|(1<<(MySQLStatementParserSLAVE-627))|(1<<(MySQLStatementParserSLOW-627))|(1<<(MySQLStatementParserSNAPSHOT-627))|(1<<(MySQLStatementParserSOCKET-627))|(1<<(MySQLStatementParserSONAME-627))|(1<<(MySQLStatementParserSOUNDS-627))|(1<<(MySQLStatementParserSOURCE-627))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-627))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-627))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-627))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-627))|(1<<(MySQLStatementParserSQL_NO_CACHE-627))|(1<<(MySQLStatementParserSQL_THREAD-627))|(1<<(MySQLStatementParserSRID-627))|(1<<(MySQLStatementParserSTACKED-627))|(1<<(MySQLStatementParserSTART-627)))) != 0) || (((_la-660)&-(0x1f+1)) == 0 && ((1<<uint((_la-660)))&((1<<(MySQLStatementParserSTARTS-660))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-660))|(1<<(MySQLStatementParserSTATS_PERSISTENT-660))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-660))|(1<<(MySQLStatementParserSTATUS-660))|(1<<(MySQLStatementParserSTOP-660))|(1<<(MySQLStatementParserSTORAGE-660))|(1<<(MySQLStatementParserSTREAM-660))|(1<<(MySQLStatementParserSTRING-660))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-660))|(1<<(MySQLStatementParserSUBJECT-660))|(1<<(MySQLStatementParserSUBPARTITION-660))|(1<<(MySQLStatementParserSUBPARTITIONS-660))|(1<<(MySQLStatementParserSUPER-660))|(1<<(MySQLStatementParserSUSPEND-660))|(1<<(MySQLStatementParserSWAPS-660))|(1<<(MySQLStatementParserSWITCHES-660))|(1<<(MySQLStatementParserTABLES-660))|(1<<(MySQLStatementParserTABLESPACE-660))|(1<<(MySQLStatementParserTABLE_CHECKSUM-660))|(1<<(MySQLStatementParserTABLE_NAME-660))|(1<<(MySQLStatementParserTEMPORARY-660))|(1<<(MySQLStatementParserTEMPTABLE-660))|(1<<(MySQLStatementParserTEXT-660))|(1<<(MySQLStatementParserTHAN-660))|(1<<(MySQLStatementParserTHREAD_PRIORITY-660)))) != 0) || (((_la-692)&-(0x1f+1)) == 0 && ((1<<uint((_la-692)))&((1<<(MySQLStatementParserTIES-692))|(1<<(MySQLStatementParserTIME-692))|(1<<(MySQLStatementParserTIMESTAMP-692))|(1<<(MySQLStatementParserTIMESTAMP_ADD-692))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-692))|(1<<(MySQLStatementParserTLS-692))|(1<<(MySQLStatementParserTRANSACTION-692))|(1<<(MySQLStatementParserTRIGGERS-692))|(1<<(MySQLStatementParserTRUE-692))|(1<<(MySQLStatementParserTRUNCATE-692))|(1<<(MySQLStatementParserTYPE-692))|(1<<(MySQLStatementParserTYPES-692))|(1<<(MySQLStatementParserUNBOUNDED-692))|(1<<(MySQLStatementParserUNCOMMITTED-692))|(1<<(MySQLStatementParserUNDEFINED-692))|(1<<(MySQLStatementParserUNDOFILE-692))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-692))|(1<<(MySQLStatementParserUNICODE-692))|(1<<(MySQLStatementParserUNINSTALL-692))|(1<<(MySQLStatementParserUNKNOWN-692))|(1<<(MySQLStatementParserUNTIL-692)))) != 0) || (((_la-725)&-(0x1f+1)) == 0 && ((1<<uint((_la-725)))&((1<<(MySQLStatementParserUPGRADE-725))|(1<<(MySQLStatementParserUSER-725))|(1<<(MySQLStatementParserUSER_RESOURCES-725))|(1<<(MySQLStatementParserUSE_FRM-725))|(1<<(MySQLStatementParserUTC_TIMESTAMP-725))|(1<<(MySQLStatementParserVALIDATION-725))|(1<<(MySQLStatementParserVALUE-725))|(1<<(MySQLStatementParserVALUES-725))|(1<<(MySQLStatementParserVARIABLES-725))|(1<<(MySQLStatementParserVCPU-725))|(1<<(MySQLStatementParserVIEW-725))|(1<<(MySQLStatementParserVISIBLE-725))|(1<<(MySQLStatementParserWAIT-725))|(1<<(MySQLStatementParserWARNINGS-725))|(1<<(MySQLStatementParserWEEK-725))|(1<<(MySQLStatementParserWEIGHT_STRING-725))|(1<<(MySQLStatementParserWITHOUT-725)))) != 0) || (((_la-757)&-(0x1f+1)) == 0 && ((1<<uint((_la-757)))&((1<<(MySQLStatementParserWORK-757))|(1<<(MySQLStatementParserWRAPPER-757))|(1<<(MySQLStatementParserX509-757))|(1<<(MySQLStatementParserXA-757))|(1<<(MySQLStatementParserXID-757))|(1<<(MySQLStatementParserXML-757))|(1<<(MySQLStatementParserYEAR-757))|(1<<(MySQLStatementParserIDENTIFIER_-757))|(1<<(MySQLStatementParserSINGLE_QUOTED_TEXT-757))|(1<<(MySQLStatementParserDOUBLE_QUOTED_TEXT-757))|(1<<(MySQLStatementParserNCHAR_TEXT-757))|(1<<(MySQLStatementParserUNDERSCORE_CHARSET-757))|(1<<(MySQLStatementParserNUMBER_-757))|(1<<(MySQLStatementParserHEX_DIGIT_-757))|(1<<(MySQLStatementParserBIT_NUM_-757)))) != 0) {
		{
			p.SetState(3259)
			p.simpleExpr(0)
		}

	}
	p.SetState(3263)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == MySQLStatementParserWHEN {
		{
			p.SetState(3262)
			p.CaseWhen()
		}

		p.SetState(3265)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(3268)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserELSE {
		{
			p.SetState(3267)
			p.CaseElse()
		}

	}
	{
		p.SetState(3270)
		p.Match(MySQLStatementParserEND)
	}

	return localctx
}

// IDatetimeExprContext is an interface to support dynamic dispatch.
type IDatetimeExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDatetimeExprContext differentiates from other interfaces.
	IsDatetimeExprContext()
}

type DatetimeExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDatetimeExprContext() *DatetimeExprContext {
	var p = new(DatetimeExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_datetimeExpr
	return p
}

func (*DatetimeExprContext) IsDatetimeExprContext() {}

func NewDatetimeExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DatetimeExprContext {
	var p = new(DatetimeExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_datetimeExpr

	return p
}

func (s *DatetimeExprContext) GetParser() antlr.Parser { return s.parser }

func (s *DatetimeExprContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *DatetimeExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DatetimeExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DatetimeExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDatetimeExpr(s)
	}
}

func (s *DatetimeExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDatetimeExpr(s)
	}
}

func (s *DatetimeExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDatetimeExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DatetimeExpr() (localctx IDatetimeExprContext) {
	this := p
	_ = this

	localctx = NewDatetimeExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 428, MySQLStatementParserRULE_datetimeExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3272)
		p.expr(0)
	}

	return localctx
}

// IBinaryLogFileIndexNumberContext is an interface to support dynamic dispatch.
type IBinaryLogFileIndexNumberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBinaryLogFileIndexNumberContext differentiates from other interfaces.
	IsBinaryLogFileIndexNumberContext()
}

type BinaryLogFileIndexNumberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBinaryLogFileIndexNumberContext() *BinaryLogFileIndexNumberContext {
	var p = new(BinaryLogFileIndexNumberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_binaryLogFileIndexNumber
	return p
}

func (*BinaryLogFileIndexNumberContext) IsBinaryLogFileIndexNumberContext() {}

func NewBinaryLogFileIndexNumberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BinaryLogFileIndexNumberContext {
	var p = new(BinaryLogFileIndexNumberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_binaryLogFileIndexNumber

	return p
}

func (s *BinaryLogFileIndexNumberContext) GetParser() antlr.Parser { return s.parser }

func (s *BinaryLogFileIndexNumberContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *BinaryLogFileIndexNumberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryLogFileIndexNumberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BinaryLogFileIndexNumberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterBinaryLogFileIndexNumber(s)
	}
}

func (s *BinaryLogFileIndexNumberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitBinaryLogFileIndexNumber(s)
	}
}

func (s *BinaryLogFileIndexNumberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitBinaryLogFileIndexNumber(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) BinaryLogFileIndexNumber() (localctx IBinaryLogFileIndexNumberContext) {
	this := p
	_ = this

	localctx = NewBinaryLogFileIndexNumberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 430, MySQLStatementParserRULE_binaryLogFileIndexNumber)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3274)
		p.Match(MySQLStatementParserNUMBER_)
	}

	return localctx
}

// ICaseWhenContext is an interface to support dynamic dispatch.
type ICaseWhenContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseWhenContext differentiates from other interfaces.
	IsCaseWhenContext()
}

type CaseWhenContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseWhenContext() *CaseWhenContext {
	var p = new(CaseWhenContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_caseWhen
	return p
}

func (*CaseWhenContext) IsCaseWhenContext() {}

func NewCaseWhenContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseWhenContext {
	var p = new(CaseWhenContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_caseWhen

	return p
}

func (s *CaseWhenContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseWhenContext) WHEN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWHEN, 0)
}

func (s *CaseWhenContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *CaseWhenContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *CaseWhenContext) THEN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTHEN, 0)
}

func (s *CaseWhenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseWhenContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseWhenContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCaseWhen(s)
	}
}

func (s *CaseWhenContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCaseWhen(s)
	}
}

func (s *CaseWhenContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCaseWhen(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CaseWhen() (localctx ICaseWhenContext) {
	this := p
	_ = this

	localctx = NewCaseWhenContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 432, MySQLStatementParserRULE_caseWhen)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3276)
		p.Match(MySQLStatementParserWHEN)
	}
	{
		p.SetState(3277)
		p.expr(0)
	}
	{
		p.SetState(3278)
		p.Match(MySQLStatementParserTHEN)
	}
	{
		p.SetState(3279)
		p.expr(0)
	}

	return localctx
}

// ICaseElseContext is an interface to support dynamic dispatch.
type ICaseElseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseElseContext differentiates from other interfaces.
	IsCaseElseContext()
}

type CaseElseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseElseContext() *CaseElseContext {
	var p = new(CaseElseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_caseElse
	return p
}

func (*CaseElseContext) IsCaseElseContext() {}

func NewCaseElseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseElseContext {
	var p = new(CaseElseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_caseElse

	return p
}

func (s *CaseElseContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseElseContext) ELSE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserELSE, 0)
}

func (s *CaseElseContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *CaseElseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseElseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseElseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCaseElse(s)
	}
}

func (s *CaseElseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCaseElse(s)
	}
}

func (s *CaseElseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCaseElse(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CaseElse() (localctx ICaseElseContext) {
	this := p
	_ = this

	localctx = NewCaseElseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 434, MySQLStatementParserRULE_caseElse)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3281)
		p.Match(MySQLStatementParserELSE)
	}
	{
		p.SetState(3282)
		p.expr(0)
	}

	return localctx
}

// IIntervalExpressionContext is an interface to support dynamic dispatch.
type IIntervalExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntervalExpressionContext differentiates from other interfaces.
	IsIntervalExpressionContext()
}

type IntervalExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntervalExpressionContext() *IntervalExpressionContext {
	var p = new(IntervalExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_intervalExpression
	return p
}

func (*IntervalExpressionContext) IsIntervalExpressionContext() {}

func NewIntervalExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntervalExpressionContext {
	var p = new(IntervalExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_intervalExpression

	return p
}

func (s *IntervalExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *IntervalExpressionContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINTERVAL, 0)
}

func (s *IntervalExpressionContext) IntervalValue() IIntervalValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntervalValueContext)
}

func (s *IntervalExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntervalExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntervalExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterIntervalExpression(s)
	}
}

func (s *IntervalExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitIntervalExpression(s)
	}
}

func (s *IntervalExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitIntervalExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) IntervalExpression() (localctx IIntervalExpressionContext) {
	this := p
	_ = this

	localctx = NewIntervalExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 436, MySQLStatementParserRULE_intervalExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3284)
		p.Match(MySQLStatementParserINTERVAL)
	}
	{
		p.SetState(3285)
		p.IntervalValue()
	}

	return localctx
}

// IIntervalValueContext is an interface to support dynamic dispatch.
type IIntervalValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntervalValueContext differentiates from other interfaces.
	IsIntervalValueContext()
}

type IntervalValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntervalValueContext() *IntervalValueContext {
	var p = new(IntervalValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_intervalValue
	return p
}

func (*IntervalValueContext) IsIntervalValueContext() {}

func NewIntervalValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntervalValueContext {
	var p = new(IntervalValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_intervalValue

	return p
}

func (s *IntervalValueContext) GetParser() antlr.Parser { return s.parser }

func (s *IntervalValueContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IntervalValueContext) IntervalUnit() IIntervalUnitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalUnitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntervalUnitContext)
}

func (s *IntervalValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntervalValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntervalValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterIntervalValue(s)
	}
}

func (s *IntervalValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitIntervalValue(s)
	}
}

func (s *IntervalValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitIntervalValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) IntervalValue() (localctx IIntervalValueContext) {
	this := p
	_ = this

	localctx = NewIntervalValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 438, MySQLStatementParserRULE_intervalValue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3287)
		p.expr(0)
	}
	{
		p.SetState(3288)
		p.IntervalUnit()
	}

	return localctx
}

// IIntervalUnitContext is an interface to support dynamic dispatch.
type IIntervalUnitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntervalUnitContext differentiates from other interfaces.
	IsIntervalUnitContext()
}

type IntervalUnitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntervalUnitContext() *IntervalUnitContext {
	var p = new(IntervalUnitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_intervalUnit
	return p
}

func (*IntervalUnitContext) IsIntervalUnitContext() {}

func NewIntervalUnitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntervalUnitContext {
	var p = new(IntervalUnitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_intervalUnit

	return p
}

func (s *IntervalUnitContext) GetParser() antlr.Parser { return s.parser }

func (s *IntervalUnitContext) MICROSECOND() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMICROSECOND, 0)
}

func (s *IntervalUnitContext) SECOND() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSECOND, 0)
}

func (s *IntervalUnitContext) MINUTE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMINUTE, 0)
}

func (s *IntervalUnitContext) HOUR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHOUR, 0)
}

func (s *IntervalUnitContext) DAY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDAY, 0)
}

func (s *IntervalUnitContext) WEEK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWEEK, 0)
}

func (s *IntervalUnitContext) MONTH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMONTH, 0)
}

func (s *IntervalUnitContext) QUARTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserQUARTER, 0)
}

func (s *IntervalUnitContext) YEAR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserYEAR, 0)
}

func (s *IntervalUnitContext) SECOND_MICROSECOND() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSECOND_MICROSECOND, 0)
}

func (s *IntervalUnitContext) MINUTE_MICROSECOND() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMINUTE_MICROSECOND, 0)
}

func (s *IntervalUnitContext) MINUTE_SECOND() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMINUTE_SECOND, 0)
}

func (s *IntervalUnitContext) HOUR_MICROSECOND() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHOUR_MICROSECOND, 0)
}

func (s *IntervalUnitContext) HOUR_SECOND() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHOUR_SECOND, 0)
}

func (s *IntervalUnitContext) HOUR_MINUTE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHOUR_MINUTE, 0)
}

func (s *IntervalUnitContext) DAY_MICROSECOND() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDAY_MICROSECOND, 0)
}

func (s *IntervalUnitContext) DAY_SECOND() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDAY_SECOND, 0)
}

func (s *IntervalUnitContext) DAY_MINUTE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDAY_MINUTE, 0)
}

func (s *IntervalUnitContext) DAY_HOUR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDAY_HOUR, 0)
}

func (s *IntervalUnitContext) YEAR_MONTH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserYEAR_MONTH, 0)
}

func (s *IntervalUnitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntervalUnitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntervalUnitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterIntervalUnit(s)
	}
}

func (s *IntervalUnitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitIntervalUnit(s)
	}
}

func (s *IntervalUnitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitIntervalUnit(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) IntervalUnit() (localctx IIntervalUnitContext) {
	this := p
	_ = this

	localctx = NewIntervalUnitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 440, MySQLStatementParserRULE_intervalUnit)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3290)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-184)&-(0x1f+1)) == 0 && ((1<<uint((_la-184)))&((1<<(MySQLStatementParserDAY-184))|(1<<(MySQLStatementParserDAY_HOUR-184))|(1<<(MySQLStatementParserDAY_MICROSECOND-184))|(1<<(MySQLStatementParserDAY_MINUTE-184))|(1<<(MySQLStatementParserDAY_SECOND-184)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySQLStatementParserHOUR-302))|(1<<(MySQLStatementParserHOUR_MICROSECOND-302))|(1<<(MySQLStatementParserHOUR_MINUTE-302))|(1<<(MySQLStatementParserHOUR_SECOND-302)))) != 0) || (((_la-427)&-(0x1f+1)) == 0 && ((1<<uint((_la-427)))&((1<<(MySQLStatementParserMICROSECOND-427))|(1<<(MySQLStatementParserMINUTE-427))|(1<<(MySQLStatementParserMINUTE_MICROSECOND-427))|(1<<(MySQLStatementParserMINUTE_SECOND-427))|(1<<(MySQLStatementParserMONTH-427)))) != 0) || _la == MySQLStatementParserQUARTER || _la == MySQLStatementParserSECOND || _la == MySQLStatementParserSECOND_MICROSECOND || (((_la-749)&-(0x1f+1)) == 0 && ((1<<uint((_la-749)))&((1<<(MySQLStatementParserWEEK-749))|(1<<(MySQLStatementParserYEAR-749))|(1<<(MySQLStatementParserYEAR_MONTH-749)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IOrderByClauseContext is an interface to support dynamic dispatch.
type IOrderByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrderByClauseContext differentiates from other interfaces.
	IsOrderByClauseContext()
}

type OrderByClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrderByClauseContext() *OrderByClauseContext {
	var p = new(OrderByClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_orderByClause
	return p
}

func (*OrderByClauseContext) IsOrderByClauseContext() {}

func NewOrderByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrderByClauseContext {
	var p = new(OrderByClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_orderByClause

	return p
}

func (s *OrderByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *OrderByClauseContext) ORDER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserORDER, 0)
}

func (s *OrderByClauseContext) BY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBY, 0)
}

func (s *OrderByClauseContext) AllOrderByItem() []IOrderByItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrderByItemContext)(nil)).Elem())
	var tst = make([]IOrderByItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrderByItemContext)
		}
	}

	return tst
}

func (s *OrderByClauseContext) OrderByItem(i int) IOrderByItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrderByItemContext)
}

func (s *OrderByClauseContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *OrderByClauseContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *OrderByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrderByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrderByClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterOrderByClause(s)
	}
}

func (s *OrderByClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitOrderByClause(s)
	}
}

func (s *OrderByClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitOrderByClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) OrderByClause() (localctx IOrderByClauseContext) {
	this := p
	_ = this

	localctx = NewOrderByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 442, MySQLStatementParserRULE_orderByClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3292)
		p.Match(MySQLStatementParserORDER)
	}
	{
		p.SetState(3293)
		p.Match(MySQLStatementParserBY)
	}
	{
		p.SetState(3294)
		p.OrderByItem()
	}
	p.SetState(3299)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(3295)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(3296)
			p.OrderByItem()
		}

		p.SetState(3301)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IOrderByItemContext is an interface to support dynamic dispatch.
type IOrderByItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrderByItemContext differentiates from other interfaces.
	IsOrderByItemContext()
}

type OrderByItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrderByItemContext() *OrderByItemContext {
	var p = new(OrderByItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_orderByItem
	return p
}

func (*OrderByItemContext) IsOrderByItemContext() {}

func NewOrderByItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrderByItemContext {
	var p = new(OrderByItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_orderByItem

	return p
}

func (s *OrderByItemContext) GetParser() antlr.Parser { return s.parser }

func (s *OrderByItemContext) NumberLiterals() INumberLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumberLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumberLiteralsContext)
}

func (s *OrderByItemContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *OrderByItemContext) Direction() IDirectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectionContext)
}

func (s *OrderByItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrderByItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrderByItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterOrderByItem(s)
	}
}

func (s *OrderByItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitOrderByItem(s)
	}
}

func (s *OrderByItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitOrderByItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) OrderByItem() (localctx IOrderByItemContext) {
	this := p
	_ = this

	localctx = NewOrderByItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 444, MySQLStatementParserRULE_orderByItem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3304)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 313, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3302)
			p.NumberLiterals()
		}

	case 2:
		{
			p.SetState(3303)
			p.expr(0)
		}

	}
	p.SetState(3307)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 314, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3306)
			p.Direction()
		}

	}

	return localctx
}

// IDataTypeContext is an interface to support dynamic dispatch.
type IDataTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDataTypeName returns the dataTypeName token.
	GetDataTypeName() antlr.Token

	// SetDataTypeName sets the dataTypeName token.
	SetDataTypeName(antlr.Token)

	// IsDataTypeContext differentiates from other interfaces.
	IsDataTypeContext()
}

type DataTypeContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	dataTypeName antlr.Token
}

func NewEmptyDataTypeContext() *DataTypeContext {
	var p = new(DataTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_dataType
	return p
}

func (*DataTypeContext) IsDataTypeContext() {}

func NewDataTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DataTypeContext {
	var p = new(DataTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_dataType

	return p
}

func (s *DataTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *DataTypeContext) GetDataTypeName() antlr.Token { return s.dataTypeName }

func (s *DataTypeContext) SetDataTypeName(v antlr.Token) { s.dataTypeName = v }

func (s *DataTypeContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINTEGER, 0)
}

func (s *DataTypeContext) INT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINT, 0)
}

func (s *DataTypeContext) TINYINT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTINYINT, 0)
}

func (s *DataTypeContext) SMALLINT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSMALLINT, 0)
}

func (s *DataTypeContext) MIDDLEINT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMIDDLEINT, 0)
}

func (s *DataTypeContext) MEDIUMINT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMEDIUMINT, 0)
}

func (s *DataTypeContext) BIGINT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBIGINT, 0)
}

func (s *DataTypeContext) FieldLength() IFieldLengthContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldLengthContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldLengthContext)
}

func (s *DataTypeContext) FieldOptions() IFieldOptionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldOptionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldOptionsContext)
}

func (s *DataTypeContext) REAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREAL, 0)
}

func (s *DataTypeContext) DOUBLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDOUBLE, 0)
}

func (s *DataTypeContext) Precision() IPrecisionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrecisionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrecisionContext)
}

func (s *DataTypeContext) PRECISION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPRECISION, 0)
}

func (s *DataTypeContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFLOAT, 0)
}

func (s *DataTypeContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDECIMAL, 0)
}

func (s *DataTypeContext) NUMERIC() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMERIC, 0)
}

func (s *DataTypeContext) FIXED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFIXED, 0)
}

func (s *DataTypeContext) BIT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBIT, 0)
}

func (s *DataTypeContext) BOOL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBOOL, 0)
}

func (s *DataTypeContext) BOOLEAN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBOOLEAN, 0)
}

func (s *DataTypeContext) CHAR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHAR, 0)
}

func (s *DataTypeContext) CharsetWithOptBinary() ICharsetWithOptBinaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetWithOptBinaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetWithOptBinaryContext)
}

func (s *DataTypeContext) NCHAR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNCHAR, 0)
}

func (s *DataTypeContext) NATIONAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNATIONAL, 0)
}

func (s *DataTypeContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBINARY, 0)
}

func (s *DataTypeContext) SIGNED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSIGNED, 0)
}

func (s *DataTypeContext) VARYING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVARYING, 0)
}

func (s *DataTypeContext) VARCHAR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVARCHAR, 0)
}

func (s *DataTypeContext) NVARCHAR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNVARCHAR, 0)
}

func (s *DataTypeContext) VARBINARY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVARBINARY, 0)
}

func (s *DataTypeContext) YEAR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserYEAR, 0)
}

func (s *DataTypeContext) DATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDATE, 0)
}

func (s *DataTypeContext) TIME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTIME, 0)
}

func (s *DataTypeContext) TypeDatetimePrecision() ITypeDatetimePrecisionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeDatetimePrecisionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeDatetimePrecisionContext)
}

func (s *DataTypeContext) UNSIGNED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNSIGNED, 0)
}

func (s *DataTypeContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTIMESTAMP, 0)
}

func (s *DataTypeContext) DATETIME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDATETIME, 0)
}

func (s *DataTypeContext) TINYBLOB() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTINYBLOB, 0)
}

func (s *DataTypeContext) BLOB() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBLOB, 0)
}

func (s *DataTypeContext) MEDIUMBLOB() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMEDIUMBLOB, 0)
}

func (s *DataTypeContext) LONGBLOB() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLONGBLOB, 0)
}

func (s *DataTypeContext) LONG() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLONG, 0)
}

func (s *DataTypeContext) TINYTEXT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTINYTEXT, 0)
}

func (s *DataTypeContext) TEXT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTEXT, 0)
}

func (s *DataTypeContext) MEDIUMTEXT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMEDIUMTEXT, 0)
}

func (s *DataTypeContext) LONGTEXT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLONGTEXT, 0)
}

func (s *DataTypeContext) StringList() IStringListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringListContext)
}

func (s *DataTypeContext) ENUM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENUM, 0)
}

func (s *DataTypeContext) SET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSET, 0)
}

func (s *DataTypeContext) SERIAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSERIAL, 0)
}

func (s *DataTypeContext) JSON() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserJSON, 0)
}

func (s *DataTypeContext) GEOMETRY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGEOMETRY, 0)
}

func (s *DataTypeContext) GEOMETRYCOLLECTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGEOMETRYCOLLECTION, 0)
}

func (s *DataTypeContext) POINT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPOINT, 0)
}

func (s *DataTypeContext) MULTIPOINT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMULTIPOINT, 0)
}

func (s *DataTypeContext) LINESTRING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLINESTRING, 0)
}

func (s *DataTypeContext) MULTILINESTRING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMULTILINESTRING, 0)
}

func (s *DataTypeContext) POLYGON() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPOLYGON, 0)
}

func (s *DataTypeContext) MULTIPOLYGON() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMULTIPOLYGON, 0)
}

func (s *DataTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DataTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DataTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDataType(s)
	}
}

func (s *DataTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDataType(s)
	}
}

func (s *DataTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDataType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DataType() (localctx IDataTypeContext) {
	this := p
	_ = this

	localctx = NewDataTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 446, MySQLStatementParserRULE_dataType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3462)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 350, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3309)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*DataTypeContext).dataTypeName = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserBIGINT || _la == MySQLStatementParserINT || _la == MySQLStatementParserINTEGER || _la == MySQLStatementParserMEDIUMINT || _la == MySQLStatementParserMIDDLEINT || _la == MySQLStatementParserSMALLINT || _la == MySQLStatementParserTINYINT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*DataTypeContext).dataTypeName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(3311)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 315, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3310)
				p.FieldLength()
			}

		}
		p.SetState(3314)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 316, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3313)
				p.FieldOptions()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(3321)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySQLStatementParserREAL:
			{
				p.SetState(3316)

				var _m = p.Match(MySQLStatementParserREAL)

				localctx.(*DataTypeContext).dataTypeName = _m
			}

		case MySQLStatementParserDOUBLE:
			{
				p.SetState(3317)

				var _m = p.Match(MySQLStatementParserDOUBLE)

				localctx.(*DataTypeContext).dataTypeName = _m
			}
			p.SetState(3319)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySQLStatementParserPRECISION {
				{
					p.SetState(3318)
					p.Match(MySQLStatementParserPRECISION)
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(3324)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 319, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3323)
				p.Precision()
			}

		}
		p.SetState(3327)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 320, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3326)
				p.FieldOptions()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3329)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*DataTypeContext).dataTypeName = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserDECIMAL || _la == MySQLStatementParserFIXED || _la == MySQLStatementParserFLOAT || _la == MySQLStatementParserNUMERIC) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*DataTypeContext).dataTypeName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(3332)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 321, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3330)
				p.FieldLength()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 321, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(3331)
				p.Precision()
			}

		}
		p.SetState(3335)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 322, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3334)
				p.FieldOptions()
			}

		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3337)

			var _m = p.Match(MySQLStatementParserBIT)

			localctx.(*DataTypeContext).dataTypeName = _m
		}
		p.SetState(3339)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 323, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3338)
				p.FieldLength()
			}

		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3341)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*DataTypeContext).dataTypeName = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserBOOL || _la == MySQLStatementParserBOOLEAN) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*DataTypeContext).dataTypeName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3342)

			var _m = p.Match(MySQLStatementParserCHAR)

			localctx.(*DataTypeContext).dataTypeName = _m
		}
		p.SetState(3344)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 324, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3343)
				p.FieldLength()
			}

		}
		p.SetState(3347)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 325, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3346)
				p.CharsetWithOptBinary()
			}

		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		p.SetState(3352)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySQLStatementParserNCHAR:
			{
				p.SetState(3349)

				var _m = p.Match(MySQLStatementParserNCHAR)

				localctx.(*DataTypeContext).dataTypeName = _m
			}

		case MySQLStatementParserNATIONAL:
			{
				p.SetState(3350)

				var _m = p.Match(MySQLStatementParserNATIONAL)

				localctx.(*DataTypeContext).dataTypeName = _m
			}
			{
				p.SetState(3351)
				p.Match(MySQLStatementParserCHAR)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(3355)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 327, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3354)
				p.FieldLength()
			}

		}
		p.SetState(3358)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserBINARY {
			{
				p.SetState(3357)
				p.Match(MySQLStatementParserBINARY)
			}

		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(3360)

			var _m = p.Match(MySQLStatementParserSIGNED)

			localctx.(*DataTypeContext).dataTypeName = _m
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(3361)

			var _m = p.Match(MySQLStatementParserBINARY)

			localctx.(*DataTypeContext).dataTypeName = _m
		}
		p.SetState(3363)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 329, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3362)
				p.FieldLength()
			}

		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		p.SetState(3368)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySQLStatementParserCHAR:
			{
				p.SetState(3365)

				var _m = p.Match(MySQLStatementParserCHAR)

				localctx.(*DataTypeContext).dataTypeName = _m
			}
			{
				p.SetState(3366)
				p.Match(MySQLStatementParserVARYING)
			}

		case MySQLStatementParserVARCHAR:
			{
				p.SetState(3367)

				var _m = p.Match(MySQLStatementParserVARCHAR)

				localctx.(*DataTypeContext).dataTypeName = _m
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(3370)
			p.FieldLength()
		}
		p.SetState(3372)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 331, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3371)
				p.CharsetWithOptBinary()
			}

		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		p.SetState(3384)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 332, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(3374)

				var _m = p.Match(MySQLStatementParserNATIONAL)

				localctx.(*DataTypeContext).dataTypeName = _m
			}
			{
				p.SetState(3375)
				p.Match(MySQLStatementParserVARCHAR)
			}

		case 2:
			{
				p.SetState(3376)

				var _m = p.Match(MySQLStatementParserNVARCHAR)

				localctx.(*DataTypeContext).dataTypeName = _m
			}

		case 3:
			{
				p.SetState(3377)

				var _m = p.Match(MySQLStatementParserNCHAR)

				localctx.(*DataTypeContext).dataTypeName = _m
			}
			{
				p.SetState(3378)
				p.Match(MySQLStatementParserVARCHAR)
			}

		case 4:
			{
				p.SetState(3379)

				var _m = p.Match(MySQLStatementParserNATIONAL)

				localctx.(*DataTypeContext).dataTypeName = _m
			}
			{
				p.SetState(3380)
				p.Match(MySQLStatementParserCHAR)
			}
			{
				p.SetState(3381)
				p.Match(MySQLStatementParserVARYING)
			}

		case 5:
			{
				p.SetState(3382)

				var _m = p.Match(MySQLStatementParserNCHAR)

				localctx.(*DataTypeContext).dataTypeName = _m
			}
			{
				p.SetState(3383)
				p.Match(MySQLStatementParserVARYING)
			}

		}
		{
			p.SetState(3386)
			p.FieldLength()
		}
		p.SetState(3388)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserBINARY {
			{
				p.SetState(3387)
				p.Match(MySQLStatementParserBINARY)
			}

		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(3390)

			var _m = p.Match(MySQLStatementParserVARBINARY)

			localctx.(*DataTypeContext).dataTypeName = _m
		}
		p.SetState(3392)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 334, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3391)
				p.FieldLength()
			}

		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(3394)

			var _m = p.Match(MySQLStatementParserYEAR)

			localctx.(*DataTypeContext).dataTypeName = _m
		}
		p.SetState(3396)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 335, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3395)
				p.FieldLength()
			}

		}
		p.SetState(3399)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 336, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3398)
				p.FieldOptions()
			}

		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(3401)

			var _m = p.Match(MySQLStatementParserDATE)

			localctx.(*DataTypeContext).dataTypeName = _m
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(3402)

			var _m = p.Match(MySQLStatementParserTIME)

			localctx.(*DataTypeContext).dataTypeName = _m
		}
		p.SetState(3404)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 337, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3403)
				p.TypeDatetimePrecision()
			}

		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(3406)

			var _m = p.Match(MySQLStatementParserUNSIGNED)

			localctx.(*DataTypeContext).dataTypeName = _m
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(3407)

			var _m = p.Match(MySQLStatementParserTIMESTAMP)

			localctx.(*DataTypeContext).dataTypeName = _m
		}
		p.SetState(3409)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 338, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3408)
				p.TypeDatetimePrecision()
			}

		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(3411)

			var _m = p.Match(MySQLStatementParserDATETIME)

			localctx.(*DataTypeContext).dataTypeName = _m
		}
		p.SetState(3413)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 339, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3412)
				p.TypeDatetimePrecision()
			}

		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(3415)

			var _m = p.Match(MySQLStatementParserTINYBLOB)

			localctx.(*DataTypeContext).dataTypeName = _m
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(3416)

			var _m = p.Match(MySQLStatementParserBLOB)

			localctx.(*DataTypeContext).dataTypeName = _m
		}
		p.SetState(3418)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 340, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3417)
				p.FieldLength()
			}

		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(3420)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*DataTypeContext).dataTypeName = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserLONGBLOB || _la == MySQLStatementParserMEDIUMBLOB) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*DataTypeContext).dataTypeName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(3421)

			var _m = p.Match(MySQLStatementParserLONG)

			localctx.(*DataTypeContext).dataTypeName = _m
		}
		{
			p.SetState(3422)
			p.Match(MySQLStatementParserVARBINARY)
		}

	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(3423)

			var _m = p.Match(MySQLStatementParserLONG)

			localctx.(*DataTypeContext).dataTypeName = _m
		}
		p.SetState(3427)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 341, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3424)
				p.Match(MySQLStatementParserCHAR)
			}
			{
				p.SetState(3425)
				p.Match(MySQLStatementParserVARYING)
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 341, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(3426)
				p.Match(MySQLStatementParserVARCHAR)
			}

		}
		p.SetState(3430)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 342, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3429)
				p.CharsetWithOptBinary()
			}

		}

	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(3432)

			var _m = p.Match(MySQLStatementParserTINYTEXT)

			localctx.(*DataTypeContext).dataTypeName = _m
		}
		p.SetState(3434)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 343, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3433)
				p.CharsetWithOptBinary()
			}

		}

	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(3436)

			var _m = p.Match(MySQLStatementParserTEXT)

			localctx.(*DataTypeContext).dataTypeName = _m
		}
		p.SetState(3438)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 344, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3437)
				p.FieldLength()
			}

		}
		p.SetState(3441)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 345, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3440)
				p.CharsetWithOptBinary()
			}

		}

	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(3443)

			var _m = p.Match(MySQLStatementParserMEDIUMTEXT)

			localctx.(*DataTypeContext).dataTypeName = _m
		}
		p.SetState(3445)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 346, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3444)
				p.CharsetWithOptBinary()
			}

		}

	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(3447)

			var _m = p.Match(MySQLStatementParserLONGTEXT)

			localctx.(*DataTypeContext).dataTypeName = _m
		}
		p.SetState(3449)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 347, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3448)
				p.CharsetWithOptBinary()
			}

		}

	case 28:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(3451)

			var _m = p.Match(MySQLStatementParserENUM)

			localctx.(*DataTypeContext).dataTypeName = _m
		}
		{
			p.SetState(3452)
			p.StringList()
		}
		p.SetState(3454)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 348, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3453)
				p.CharsetWithOptBinary()
			}

		}

	case 29:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(3456)

			var _m = p.Match(MySQLStatementParserSET)

			localctx.(*DataTypeContext).dataTypeName = _m
		}
		{
			p.SetState(3457)
			p.StringList()
		}
		p.SetState(3459)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 349, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3458)
				p.CharsetWithOptBinary()
			}

		}

	case 30:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(3461)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*DataTypeContext).dataTypeName = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserGEOMETRY || _la == MySQLStatementParserGEOMETRYCOLLECTION || _la == MySQLStatementParserJSON || _la == MySQLStatementParserLINESTRING || (((_la-439)&-(0x1f+1)) == 0 && ((1<<uint((_la-439)))&((1<<(MySQLStatementParserMULTILINESTRING-439))|(1<<(MySQLStatementParserMULTIPOINT-439))|(1<<(MySQLStatementParserMULTIPOLYGON-439)))) != 0) || _la == MySQLStatementParserPOINT || _la == MySQLStatementParserPOLYGON || _la == MySQLStatementParserSERIAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*DataTypeContext).dataTypeName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IStringListContext is an interface to support dynamic dispatch.
type IStringListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringListContext differentiates from other interfaces.
	IsStringListContext()
}

type StringListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringListContext() *StringListContext {
	var p = new(StringListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_stringList
	return p
}

func (*StringListContext) IsStringListContext() {}

func NewStringListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringListContext {
	var p = new(StringListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_stringList

	return p
}

func (s *StringListContext) GetParser() antlr.Parser { return s.parser }

func (s *StringListContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *StringListContext) AllTextString() []ITextStringContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITextStringContext)(nil)).Elem())
	var tst = make([]ITextStringContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITextStringContext)
		}
	}

	return tst
}

func (s *StringListContext) TextString(i int) ITextStringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITextStringContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITextStringContext)
}

func (s *StringListContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *StringListContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *StringListContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *StringListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStringList(s)
	}
}

func (s *StringListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStringList(s)
	}
}

func (s *StringListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStringList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) StringList() (localctx IStringListContext) {
	this := p
	_ = this

	localctx = NewStringListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 448, MySQLStatementParserRULE_stringList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3464)
		p.Match(MySQLStatementParserLP_)
	}
	{
		p.SetState(3465)
		p.TextString()
	}
	p.SetState(3470)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(3466)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(3467)
			p.TextString()
		}

		p.SetState(3472)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(3473)
		p.Match(MySQLStatementParserRP_)
	}

	return localctx
}

// ITextStringContext is an interface to support dynamic dispatch.
type ITextStringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTextStringContext differentiates from other interfaces.
	IsTextStringContext()
}

type TextStringContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTextStringContext() *TextStringContext {
	var p = new(TextStringContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_textString
	return p
}

func (*TextStringContext) IsTextStringContext() {}

func NewTextStringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TextStringContext {
	var p = new(TextStringContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_textString

	return p
}

func (s *TextStringContext) GetParser() antlr.Parser { return s.parser }

func (s *TextStringContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *TextStringContext) HEX_DIGIT_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHEX_DIGIT_, 0)
}

func (s *TextStringContext) BIT_NUM_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBIT_NUM_, 0)
}

func (s *TextStringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TextStringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TextStringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTextString(s)
	}
}

func (s *TextStringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTextString(s)
	}
}

func (s *TextStringContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTextString(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TextString() (localctx ITextStringContext) {
	this := p
	_ = this

	localctx = NewTextStringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 450, MySQLStatementParserRULE_textString)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3478)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserSINGLE_QUOTED_TEXT, MySQLStatementParserDOUBLE_QUOTED_TEXT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3475)
			p.String_()
		}

	case MySQLStatementParserHEX_DIGIT_:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3476)
			p.Match(MySQLStatementParserHEX_DIGIT_)
		}

	case MySQLStatementParserBIT_NUM_:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3477)
			p.Match(MySQLStatementParserBIT_NUM_)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITextStringHashContext is an interface to support dynamic dispatch.
type ITextStringHashContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTextStringHashContext differentiates from other interfaces.
	IsTextStringHashContext()
}

type TextStringHashContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTextStringHashContext() *TextStringHashContext {
	var p = new(TextStringHashContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_textStringHash
	return p
}

func (*TextStringHashContext) IsTextStringHashContext() {}

func NewTextStringHashContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TextStringHashContext {
	var p = new(TextStringHashContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_textStringHash

	return p
}

func (s *TextStringHashContext) GetParser() antlr.Parser { return s.parser }

func (s *TextStringHashContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *TextStringHashContext) HEX_DIGIT_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHEX_DIGIT_, 0)
}

func (s *TextStringHashContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TextStringHashContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TextStringHashContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTextStringHash(s)
	}
}

func (s *TextStringHashContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTextStringHash(s)
	}
}

func (s *TextStringHashContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTextStringHash(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TextStringHash() (localctx ITextStringHashContext) {
	this := p
	_ = this

	localctx = NewTextStringHashContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 452, MySQLStatementParserRULE_textStringHash)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3482)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserSINGLE_QUOTED_TEXT, MySQLStatementParserDOUBLE_QUOTED_TEXT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3480)
			p.String_()
		}

	case MySQLStatementParserHEX_DIGIT_:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3481)
			p.Match(MySQLStatementParserHEX_DIGIT_)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFieldOptionsContext is an interface to support dynamic dispatch.
type IFieldOptionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFieldOptionsContext differentiates from other interfaces.
	IsFieldOptionsContext()
}

type FieldOptionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldOptionsContext() *FieldOptionsContext {
	var p = new(FieldOptionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_fieldOptions
	return p
}

func (*FieldOptionsContext) IsFieldOptionsContext() {}

func NewFieldOptionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldOptionsContext {
	var p = new(FieldOptionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_fieldOptions

	return p
}

func (s *FieldOptionsContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldOptionsContext) AllUNSIGNED() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserUNSIGNED)
}

func (s *FieldOptionsContext) UNSIGNED(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNSIGNED, i)
}

func (s *FieldOptionsContext) AllSIGNED() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserSIGNED)
}

func (s *FieldOptionsContext) SIGNED(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSIGNED, i)
}

func (s *FieldOptionsContext) AllZEROFILL() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserZEROFILL)
}

func (s *FieldOptionsContext) ZEROFILL(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserZEROFILL, i)
}

func (s *FieldOptionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldOptionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldOptionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterFieldOptions(s)
	}
}

func (s *FieldOptionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitFieldOptions(s)
	}
}

func (s *FieldOptionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitFieldOptions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) FieldOptions() (localctx IFieldOptionsContext) {
	this := p
	_ = this

	localctx = NewFieldOptionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 454, MySQLStatementParserRULE_fieldOptions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3485)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(3484)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySQLStatementParserSIGNED || _la == MySQLStatementParserUNSIGNED || _la == MySQLStatementParserZEROFILL) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(3487)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 354, p.GetParserRuleContext())
	}

	return localctx
}

// IPrecisionContext is an interface to support dynamic dispatch.
type IPrecisionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrecisionContext differentiates from other interfaces.
	IsPrecisionContext()
}

type PrecisionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrecisionContext() *PrecisionContext {
	var p = new(PrecisionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_precision
	return p
}

func (*PrecisionContext) IsPrecisionContext() {}

func NewPrecisionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrecisionContext {
	var p = new(PrecisionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_precision

	return p
}

func (s *PrecisionContext) GetParser() antlr.Parser { return s.parser }

func (s *PrecisionContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *PrecisionContext) AllNUMBER_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserNUMBER_)
}

func (s *PrecisionContext) NUMBER_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, i)
}

func (s *PrecisionContext) COMMA_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, 0)
}

func (s *PrecisionContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *PrecisionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrecisionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrecisionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterPrecision(s)
	}
}

func (s *PrecisionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitPrecision(s)
	}
}

func (s *PrecisionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitPrecision(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Precision() (localctx IPrecisionContext) {
	this := p
	_ = this

	localctx = NewPrecisionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 456, MySQLStatementParserRULE_precision)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3489)
		p.Match(MySQLStatementParserLP_)
	}
	{
		p.SetState(3490)
		p.Match(MySQLStatementParserNUMBER_)
	}
	{
		p.SetState(3491)
		p.Match(MySQLStatementParserCOMMA_)
	}
	{
		p.SetState(3492)
		p.Match(MySQLStatementParserNUMBER_)
	}
	{
		p.SetState(3493)
		p.Match(MySQLStatementParserRP_)
	}

	return localctx
}

// ITypeDatetimePrecisionContext is an interface to support dynamic dispatch.
type ITypeDatetimePrecisionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeDatetimePrecisionContext differentiates from other interfaces.
	IsTypeDatetimePrecisionContext()
}

type TypeDatetimePrecisionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeDatetimePrecisionContext() *TypeDatetimePrecisionContext {
	var p = new(TypeDatetimePrecisionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_typeDatetimePrecision
	return p
}

func (*TypeDatetimePrecisionContext) IsTypeDatetimePrecisionContext() {}

func NewTypeDatetimePrecisionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeDatetimePrecisionContext {
	var p = new(TypeDatetimePrecisionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_typeDatetimePrecision

	return p
}

func (s *TypeDatetimePrecisionContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeDatetimePrecisionContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *TypeDatetimePrecisionContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *TypeDatetimePrecisionContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *TypeDatetimePrecisionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDatetimePrecisionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeDatetimePrecisionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTypeDatetimePrecision(s)
	}
}

func (s *TypeDatetimePrecisionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTypeDatetimePrecision(s)
	}
}

func (s *TypeDatetimePrecisionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTypeDatetimePrecision(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TypeDatetimePrecision() (localctx ITypeDatetimePrecisionContext) {
	this := p
	_ = this

	localctx = NewTypeDatetimePrecisionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 458, MySQLStatementParserRULE_typeDatetimePrecision)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3495)
		p.Match(MySQLStatementParserLP_)
	}
	{
		p.SetState(3496)
		p.Match(MySQLStatementParserNUMBER_)
	}
	{
		p.SetState(3497)
		p.Match(MySQLStatementParserRP_)
	}

	return localctx
}

// ICharsetWithOptBinaryContext is an interface to support dynamic dispatch.
type ICharsetWithOptBinaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCharsetWithOptBinaryContext differentiates from other interfaces.
	IsCharsetWithOptBinaryContext()
}

type CharsetWithOptBinaryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCharsetWithOptBinaryContext() *CharsetWithOptBinaryContext {
	var p = new(CharsetWithOptBinaryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_charsetWithOptBinary
	return p
}

func (*CharsetWithOptBinaryContext) IsCharsetWithOptBinaryContext() {}

func NewCharsetWithOptBinaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CharsetWithOptBinaryContext {
	var p = new(CharsetWithOptBinaryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_charsetWithOptBinary

	return p
}

func (s *CharsetWithOptBinaryContext) GetParser() antlr.Parser { return s.parser }

func (s *CharsetWithOptBinaryContext) Ascii() IAsciiContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsciiContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsciiContext)
}

func (s *CharsetWithOptBinaryContext) Unicode() IUnicodeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnicodeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnicodeContext)
}

func (s *CharsetWithOptBinaryContext) BYTE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBYTE, 0)
}

func (s *CharsetWithOptBinaryContext) Charset() ICharsetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetContext)
}

func (s *CharsetWithOptBinaryContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *CharsetWithOptBinaryContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBINARY, 0)
}

func (s *CharsetWithOptBinaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CharsetWithOptBinaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CharsetWithOptBinaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCharsetWithOptBinary(s)
	}
}

func (s *CharsetWithOptBinaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCharsetWithOptBinary(s)
	}
}

func (s *CharsetWithOptBinaryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCharsetWithOptBinary(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CharsetWithOptBinary() (localctx ICharsetWithOptBinaryContext) {
	this := p
	_ = this

	localctx = NewCharsetWithOptBinaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 460, MySQLStatementParserRULE_charsetWithOptBinary)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3513)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 357, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3499)
			p.Ascii()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3500)
			p.Unicode()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3501)
			p.Match(MySQLStatementParserBYTE)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3502)
			p.Charset()
		}
		{
			p.SetState(3503)
			p.CharsetName()
		}
		p.SetState(3505)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserBINARY {
			{
				p.SetState(3504)
				p.Match(MySQLStatementParserBINARY)
			}

		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3507)
			p.Match(MySQLStatementParserBINARY)
		}
		p.SetState(3511)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 356, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3508)
				p.Charset()
			}
			{
				p.SetState(3509)
				p.CharsetName()
			}

		}

	}

	return localctx
}

// IAsciiContext is an interface to support dynamic dispatch.
type IAsciiContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsciiContext differentiates from other interfaces.
	IsAsciiContext()
}

type AsciiContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsciiContext() *AsciiContext {
	var p = new(AsciiContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_ascii
	return p
}

func (*AsciiContext) IsAsciiContext() {}

func NewAsciiContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsciiContext {
	var p = new(AsciiContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_ascii

	return p
}

func (s *AsciiContext) GetParser() antlr.Parser { return s.parser }

func (s *AsciiContext) ASCII() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserASCII, 0)
}

func (s *AsciiContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBINARY, 0)
}

func (s *AsciiContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsciiContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsciiContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAscii(s)
	}
}

func (s *AsciiContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAscii(s)
	}
}

func (s *AsciiContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAscii(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Ascii() (localctx IAsciiContext) {
	this := p
	_ = this

	localctx = NewAsciiContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 462, MySQLStatementParserRULE_ascii)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3521)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserASCII:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3515)
			p.Match(MySQLStatementParserASCII)
		}
		p.SetState(3517)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserBINARY {
			{
				p.SetState(3516)
				p.Match(MySQLStatementParserBINARY)
			}

		}

	case MySQLStatementParserBINARY:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3519)
			p.Match(MySQLStatementParserBINARY)
		}
		{
			p.SetState(3520)
			p.Match(MySQLStatementParserASCII)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUnicodeContext is an interface to support dynamic dispatch.
type IUnicodeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnicodeContext differentiates from other interfaces.
	IsUnicodeContext()
}

type UnicodeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnicodeContext() *UnicodeContext {
	var p = new(UnicodeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_unicode
	return p
}

func (*UnicodeContext) IsUnicodeContext() {}

func NewUnicodeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnicodeContext {
	var p = new(UnicodeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_unicode

	return p
}

func (s *UnicodeContext) GetParser() antlr.Parser { return s.parser }

func (s *UnicodeContext) UNICODE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNICODE, 0)
}

func (s *UnicodeContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBINARY, 0)
}

func (s *UnicodeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnicodeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnicodeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterUnicode(s)
	}
}

func (s *UnicodeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitUnicode(s)
	}
}

func (s *UnicodeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitUnicode(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Unicode() (localctx IUnicodeContext) {
	this := p
	_ = this

	localctx = NewUnicodeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 464, MySQLStatementParserRULE_unicode)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3529)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserUNICODE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3523)
			p.Match(MySQLStatementParserUNICODE)
		}
		p.SetState(3525)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserBINARY {
			{
				p.SetState(3524)
				p.Match(MySQLStatementParserBINARY)
			}

		}

	case MySQLStatementParserBINARY:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3527)
			p.Match(MySQLStatementParserBINARY)
		}
		{
			p.SetState(3528)
			p.Match(MySQLStatementParserUNICODE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICharsetContext is an interface to support dynamic dispatch.
type ICharsetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCharsetContext differentiates from other interfaces.
	IsCharsetContext()
}

type CharsetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCharsetContext() *CharsetContext {
	var p = new(CharsetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_charset
	return p
}

func (*CharsetContext) IsCharsetContext() {}

func NewCharsetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CharsetContext {
	var p = new(CharsetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_charset

	return p
}

func (s *CharsetContext) GetParser() antlr.Parser { return s.parser }

func (s *CharsetContext) SET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSET, 0)
}

func (s *CharsetContext) CHAR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHAR, 0)
}

func (s *CharsetContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHARACTER, 0)
}

func (s *CharsetContext) CHARSET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHARSET, 0)
}

func (s *CharsetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CharsetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CharsetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCharset(s)
	}
}

func (s *CharsetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCharset(s)
	}
}

func (s *CharsetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCharset(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Charset() (localctx ICharsetContext) {
	this := p
	_ = this

	localctx = NewCharsetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 466, MySQLStatementParserRULE_charset)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3534)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserCHAR, MySQLStatementParserCHARACTER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3531)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserCHAR || _la == MySQLStatementParserCHARACTER) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(3532)
			p.Match(MySQLStatementParserSET)
		}

	case MySQLStatementParserCHARSET:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3533)
			p.Match(MySQLStatementParserCHARSET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDefaultCollationContext is an interface to support dynamic dispatch.
type IDefaultCollationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefaultCollationContext differentiates from other interfaces.
	IsDefaultCollationContext()
}

type DefaultCollationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefaultCollationContext() *DefaultCollationContext {
	var p = new(DefaultCollationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_defaultCollation
	return p
}

func (*DefaultCollationContext) IsDefaultCollationContext() {}

func NewDefaultCollationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefaultCollationContext {
	var p = new(DefaultCollationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_defaultCollation

	return p
}

func (s *DefaultCollationContext) GetParser() antlr.Parser { return s.parser }

func (s *DefaultCollationContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOLLATE, 0)
}

func (s *DefaultCollationContext) CollationName() ICollationNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollationNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollationNameContext)
}

func (s *DefaultCollationContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFAULT, 0)
}

func (s *DefaultCollationContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *DefaultCollationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefaultCollationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefaultCollationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDefaultCollation(s)
	}
}

func (s *DefaultCollationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDefaultCollation(s)
	}
}

func (s *DefaultCollationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDefaultCollation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DefaultCollation() (localctx IDefaultCollationContext) {
	this := p
	_ = this

	localctx = NewDefaultCollationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 468, MySQLStatementParserRULE_defaultCollation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3537)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserDEFAULT {
		{
			p.SetState(3536)
			p.Match(MySQLStatementParserDEFAULT)
		}

	}
	{
		p.SetState(3539)
		p.Match(MySQLStatementParserCOLLATE)
	}
	p.SetState(3541)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserEQ_ {
		{
			p.SetState(3540)
			p.Match(MySQLStatementParserEQ_)
		}

	}
	{
		p.SetState(3543)
		p.CollationName()
	}

	return localctx
}

// IDefaultEncryptionContext is an interface to support dynamic dispatch.
type IDefaultEncryptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefaultEncryptionContext differentiates from other interfaces.
	IsDefaultEncryptionContext()
}

type DefaultEncryptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefaultEncryptionContext() *DefaultEncryptionContext {
	var p = new(DefaultEncryptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_defaultEncryption
	return p
}

func (*DefaultEncryptionContext) IsDefaultEncryptionContext() {}

func NewDefaultEncryptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefaultEncryptionContext {
	var p = new(DefaultEncryptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_defaultEncryption

	return p
}

func (s *DefaultEncryptionContext) GetParser() antlr.Parser { return s.parser }

func (s *DefaultEncryptionContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENCRYPTION, 0)
}

func (s *DefaultEncryptionContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *DefaultEncryptionContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFAULT, 0)
}

func (s *DefaultEncryptionContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *DefaultEncryptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefaultEncryptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefaultEncryptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDefaultEncryption(s)
	}
}

func (s *DefaultEncryptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDefaultEncryption(s)
	}
}

func (s *DefaultEncryptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDefaultEncryption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DefaultEncryption() (localctx IDefaultEncryptionContext) {
	this := p
	_ = this

	localctx = NewDefaultEncryptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 470, MySQLStatementParserRULE_defaultEncryption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3546)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserDEFAULT {
		{
			p.SetState(3545)
			p.Match(MySQLStatementParserDEFAULT)
		}

	}
	{
		p.SetState(3548)
		p.Match(MySQLStatementParserENCRYPTION)
	}
	p.SetState(3550)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserEQ_ {
		{
			p.SetState(3549)
			p.Match(MySQLStatementParserEQ_)
		}

	}
	{
		p.SetState(3552)
		p.String_()
	}

	return localctx
}

// IDefaultCharsetContext is an interface to support dynamic dispatch.
type IDefaultCharsetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefaultCharsetContext differentiates from other interfaces.
	IsDefaultCharsetContext()
}

type DefaultCharsetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefaultCharsetContext() *DefaultCharsetContext {
	var p = new(DefaultCharsetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_defaultCharset
	return p
}

func (*DefaultCharsetContext) IsDefaultCharsetContext() {}

func NewDefaultCharsetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefaultCharsetContext {
	var p = new(DefaultCharsetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_defaultCharset

	return p
}

func (s *DefaultCharsetContext) GetParser() antlr.Parser { return s.parser }

func (s *DefaultCharsetContext) Charset() ICharsetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetContext)
}

func (s *DefaultCharsetContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *DefaultCharsetContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFAULT, 0)
}

func (s *DefaultCharsetContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *DefaultCharsetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefaultCharsetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefaultCharsetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDefaultCharset(s)
	}
}

func (s *DefaultCharsetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDefaultCharset(s)
	}
}

func (s *DefaultCharsetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDefaultCharset(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DefaultCharset() (localctx IDefaultCharsetContext) {
	this := p
	_ = this

	localctx = NewDefaultCharsetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 472, MySQLStatementParserRULE_defaultCharset)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3555)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserDEFAULT {
		{
			p.SetState(3554)
			p.Match(MySQLStatementParserDEFAULT)
		}

	}
	{
		p.SetState(3557)
		p.Charset()
	}
	p.SetState(3559)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserEQ_ {
		{
			p.SetState(3558)
			p.Match(MySQLStatementParserEQ_)
		}

	}
	{
		p.SetState(3561)
		p.CharsetName()
	}

	return localctx
}

// ISignedLiteralContext is an interface to support dynamic dispatch.
type ISignedLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSignedLiteralContext differentiates from other interfaces.
	IsSignedLiteralContext()
}

type SignedLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySignedLiteralContext() *SignedLiteralContext {
	var p = new(SignedLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_signedLiteral
	return p
}

func (*SignedLiteralContext) IsSignedLiteralContext() {}

func NewSignedLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SignedLiteralContext {
	var p = new(SignedLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_signedLiteral

	return p
}

func (s *SignedLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *SignedLiteralContext) Literals() ILiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteralsContext)
}

func (s *SignedLiteralContext) NumberLiterals() INumberLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumberLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumberLiteralsContext)
}

func (s *SignedLiteralContext) PLUS_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPLUS_, 0)
}

func (s *SignedLiteralContext) MINUS_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMINUS_, 0)
}

func (s *SignedLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SignedLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SignedLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSignedLiteral(s)
	}
}

func (s *SignedLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSignedLiteral(s)
	}
}

func (s *SignedLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSignedLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SignedLiteral() (localctx ISignedLiteralContext) {
	this := p
	_ = this

	localctx = NewSignedLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 474, MySQLStatementParserRULE_signedLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3566)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserDATE, MySQLStatementParserFALSE, MySQLStatementParserNULL, MySQLStatementParserTIME, MySQLStatementParserTIMESTAMP, MySQLStatementParserTRUE, MySQLStatementParserSINGLE_QUOTED_TEXT, MySQLStatementParserDOUBLE_QUOTED_TEXT, MySQLStatementParserNCHAR_TEXT, MySQLStatementParserUNDERSCORE_CHARSET, MySQLStatementParserNUMBER_, MySQLStatementParserHEX_DIGIT_, MySQLStatementParserBIT_NUM_:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3563)
			p.Literals()
		}

	case MySQLStatementParserPLUS_, MySQLStatementParserMINUS_:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3564)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserPLUS_ || _la == MySQLStatementParserMINUS_) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(3565)
			p.NumberLiterals()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INowContext is an interface to support dynamic dispatch.
type INowContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNowContext differentiates from other interfaces.
	IsNowContext()
}

type NowContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNowContext() *NowContext {
	var p = new(NowContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_now
	return p
}

func (*NowContext) IsNowContext() {}

func NewNowContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NowContext {
	var p = new(NowContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_now

	return p
}

func (s *NowContext) GetParser() antlr.Parser { return s.parser }

func (s *NowContext) CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCURRENT_TIMESTAMP, 0)
}

func (s *NowContext) LOCALTIME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCALTIME, 0)
}

func (s *NowContext) LOCALTIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCALTIMESTAMP, 0)
}

func (s *NowContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *NowContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *NowContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *NowContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NowContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NowContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterNow(s)
	}
}

func (s *NowContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitNow(s)
	}
}

func (s *NowContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitNow(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Now() (localctx INowContext) {
	this := p
	_ = this

	localctx = NewNowContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 476, MySQLStatementParserRULE_now)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3568)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserCURRENT_TIMESTAMP || _la == MySQLStatementParserLOCALTIME || _la == MySQLStatementParserLOCALTIMESTAMP) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(3574)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 371, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3569)
			p.Match(MySQLStatementParserLP_)
		}
		p.SetState(3571)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserNUMBER_ {
			{
				p.SetState(3570)
				p.Match(MySQLStatementParserNUMBER_)
			}

		}
		{
			p.SetState(3573)
			p.Match(MySQLStatementParserRP_)
		}

	}

	return localctx
}

// IColumnFormatContext is an interface to support dynamic dispatch.
type IColumnFormatContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnFormatContext differentiates from other interfaces.
	IsColumnFormatContext()
}

type ColumnFormatContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnFormatContext() *ColumnFormatContext {
	var p = new(ColumnFormatContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_columnFormat
	return p
}

func (*ColumnFormatContext) IsColumnFormatContext() {}

func NewColumnFormatContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnFormatContext {
	var p = new(ColumnFormatContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_columnFormat

	return p
}

func (s *ColumnFormatContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnFormatContext) FIXED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFIXED, 0)
}

func (s *ColumnFormatContext) DYNAMIC() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDYNAMIC, 0)
}

func (s *ColumnFormatContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFAULT, 0)
}

func (s *ColumnFormatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnFormatContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnFormatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterColumnFormat(s)
	}
}

func (s *ColumnFormatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitColumnFormat(s)
	}
}

func (s *ColumnFormatContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitColumnFormat(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ColumnFormat() (localctx IColumnFormatContext) {
	this := p
	_ = this

	localctx = NewColumnFormatContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 478, MySQLStatementParserRULE_columnFormat)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3576)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserDEFAULT || _la == MySQLStatementParserDYNAMIC || _la == MySQLStatementParserFIXED) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IStorageMediaContext is an interface to support dynamic dispatch.
type IStorageMediaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStorageMediaContext differentiates from other interfaces.
	IsStorageMediaContext()
}

type StorageMediaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStorageMediaContext() *StorageMediaContext {
	var p = new(StorageMediaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_storageMedia
	return p
}

func (*StorageMediaContext) IsStorageMediaContext() {}

func NewStorageMediaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StorageMediaContext {
	var p = new(StorageMediaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_storageMedia

	return p
}

func (s *StorageMediaContext) GetParser() antlr.Parser { return s.parser }

func (s *StorageMediaContext) DISK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDISK, 0)
}

func (s *StorageMediaContext) MEMORY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMEMORY, 0)
}

func (s *StorageMediaContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFAULT, 0)
}

func (s *StorageMediaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StorageMediaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StorageMediaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStorageMedia(s)
	}
}

func (s *StorageMediaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStorageMedia(s)
	}
}

func (s *StorageMediaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStorageMedia(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) StorageMedia() (localctx IStorageMediaContext) {
	this := p
	_ = this

	localctx = NewStorageMediaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 480, MySQLStatementParserRULE_storageMedia)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3578)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserDEFAULT || _la == MySQLStatementParserDISK || _la == MySQLStatementParserMEMORY) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IDirectionContext is an interface to support dynamic dispatch.
type IDirectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDirectionContext differentiates from other interfaces.
	IsDirectionContext()
}

type DirectionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDirectionContext() *DirectionContext {
	var p = new(DirectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_direction
	return p
}

func (*DirectionContext) IsDirectionContext() {}

func NewDirectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DirectionContext {
	var p = new(DirectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_direction

	return p
}

func (s *DirectionContext) GetParser() antlr.Parser { return s.parser }

func (s *DirectionContext) ASC() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserASC, 0)
}

func (s *DirectionContext) DESC() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDESC, 0)
}

func (s *DirectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DirectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DirectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDirection(s)
	}
}

func (s *DirectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDirection(s)
	}
}

func (s *DirectionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDirection(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Direction() (localctx IDirectionContext) {
	this := p
	_ = this

	localctx = NewDirectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 482, MySQLStatementParserRULE_direction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3580)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserASC || _la == MySQLStatementParserDESC) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IKeyOrIndexContext is an interface to support dynamic dispatch.
type IKeyOrIndexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeyOrIndexContext differentiates from other interfaces.
	IsKeyOrIndexContext()
}

type KeyOrIndexContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeyOrIndexContext() *KeyOrIndexContext {
	var p = new(KeyOrIndexContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_keyOrIndex
	return p
}

func (*KeyOrIndexContext) IsKeyOrIndexContext() {}

func NewKeyOrIndexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeyOrIndexContext {
	var p = new(KeyOrIndexContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_keyOrIndex

	return p
}

func (s *KeyOrIndexContext) GetParser() antlr.Parser { return s.parser }

func (s *KeyOrIndexContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserKEY, 0)
}

func (s *KeyOrIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINDEX, 0)
}

func (s *KeyOrIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeyOrIndexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeyOrIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterKeyOrIndex(s)
	}
}

func (s *KeyOrIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitKeyOrIndex(s)
	}
}

func (s *KeyOrIndexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitKeyOrIndex(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) KeyOrIndex() (localctx IKeyOrIndexContext) {
	this := p
	_ = this

	localctx = NewKeyOrIndexContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 484, MySQLStatementParserRULE_keyOrIndex)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3582)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserINDEX || _la == MySQLStatementParserKEY) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IFieldLengthContext is an interface to support dynamic dispatch.
type IFieldLengthContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLength returns the length token.
	GetLength() antlr.Token

	// SetLength sets the length token.
	SetLength(antlr.Token)

	// IsFieldLengthContext differentiates from other interfaces.
	IsFieldLengthContext()
}

type FieldLengthContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	length antlr.Token
}

func NewEmptyFieldLengthContext() *FieldLengthContext {
	var p = new(FieldLengthContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_fieldLength
	return p
}

func (*FieldLengthContext) IsFieldLengthContext() {}

func NewFieldLengthContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldLengthContext {
	var p = new(FieldLengthContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_fieldLength

	return p
}

func (s *FieldLengthContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldLengthContext) GetLength() antlr.Token { return s.length }

func (s *FieldLengthContext) SetLength(v antlr.Token) { s.length = v }

func (s *FieldLengthContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *FieldLengthContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *FieldLengthContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *FieldLengthContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldLengthContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldLengthContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterFieldLength(s)
	}
}

func (s *FieldLengthContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitFieldLength(s)
	}
}

func (s *FieldLengthContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitFieldLength(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) FieldLength() (localctx IFieldLengthContext) {
	this := p
	_ = this

	localctx = NewFieldLengthContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 486, MySQLStatementParserRULE_fieldLength)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3584)
		p.Match(MySQLStatementParserLP_)
	}
	{
		p.SetState(3585)

		var _m = p.Match(MySQLStatementParserNUMBER_)

		localctx.(*FieldLengthContext).length = _m
	}
	{
		p.SetState(3586)
		p.Match(MySQLStatementParserRP_)
	}

	return localctx
}

// ICharacterSetContext is an interface to support dynamic dispatch.
type ICharacterSetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCharacterSetContext differentiates from other interfaces.
	IsCharacterSetContext()
}

type CharacterSetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCharacterSetContext() *CharacterSetContext {
	var p = new(CharacterSetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_characterSet
	return p
}

func (*CharacterSetContext) IsCharacterSetContext() {}

func NewCharacterSetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CharacterSetContext {
	var p = new(CharacterSetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_characterSet

	return p
}

func (s *CharacterSetContext) GetParser() antlr.Parser { return s.parser }

func (s *CharacterSetContext) Charset() ICharsetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetContext)
}

func (s *CharacterSetContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *CharacterSetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CharacterSetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CharacterSetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCharacterSet(s)
	}
}

func (s *CharacterSetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCharacterSet(s)
	}
}

func (s *CharacterSetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCharacterSet(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CharacterSet() (localctx ICharacterSetContext) {
	this := p
	_ = this

	localctx = NewCharacterSetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 488, MySQLStatementParserRULE_characterSet)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3588)
		p.Charset()
	}
	{
		p.SetState(3589)
		p.CharsetName()
	}

	return localctx
}

// ICollateClauseContext is an interface to support dynamic dispatch.
type ICollateClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCollateClauseContext differentiates from other interfaces.
	IsCollateClauseContext()
}

type CollateClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollateClauseContext() *CollateClauseContext {
	var p = new(CollateClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_collateClause
	return p
}

func (*CollateClauseContext) IsCollateClauseContext() {}

func NewCollateClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CollateClauseContext {
	var p = new(CollateClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_collateClause

	return p
}

func (s *CollateClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *CollateClauseContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOLLATE, 0)
}

func (s *CollateClauseContext) CollationName() ICollationNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollationNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollationNameContext)
}

func (s *CollateClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CollateClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CollateClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCollateClause(s)
	}
}

func (s *CollateClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCollateClause(s)
	}
}

func (s *CollateClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCollateClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CollateClause() (localctx ICollateClauseContext) {
	this := p
	_ = this

	localctx = NewCollateClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 490, MySQLStatementParserRULE_collateClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3591)
		p.Match(MySQLStatementParserCOLLATE)
	}
	{
		p.SetState(3592)
		p.CollationName()
	}

	return localctx
}

// IFieldOrVarSpecContext is an interface to support dynamic dispatch.
type IFieldOrVarSpecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFieldOrVarSpecContext differentiates from other interfaces.
	IsFieldOrVarSpecContext()
}

type FieldOrVarSpecContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldOrVarSpecContext() *FieldOrVarSpecContext {
	var p = new(FieldOrVarSpecContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_fieldOrVarSpec
	return p
}

func (*FieldOrVarSpecContext) IsFieldOrVarSpecContext() {}

func NewFieldOrVarSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldOrVarSpecContext {
	var p = new(FieldOrVarSpecContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_fieldOrVarSpec

	return p
}

func (s *FieldOrVarSpecContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldOrVarSpecContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *FieldOrVarSpecContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *FieldOrVarSpecContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *FieldOrVarSpecContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *FieldOrVarSpecContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *FieldOrVarSpecContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *FieldOrVarSpecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldOrVarSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldOrVarSpecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterFieldOrVarSpec(s)
	}
}

func (s *FieldOrVarSpecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitFieldOrVarSpec(s)
	}
}

func (s *FieldOrVarSpecContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitFieldOrVarSpec(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) FieldOrVarSpec() (localctx IFieldOrVarSpecContext) {
	this := p
	_ = this

	localctx = NewFieldOrVarSpecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 492, MySQLStatementParserRULE_fieldOrVarSpec)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3594)
		p.Match(MySQLStatementParserLP_)
	}
	p.SetState(3603)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49))|(1<<(MySQLStatementParserGROUP_CONCAT-49))|(1<<(MySQLStatementParserCAST-49))|(1<<(MySQLStatementParserPOSITION-49))|(1<<(MySQLStatementParserSUBSTRING-49))|(1<<(MySQLStatementParserSUBSTR-49))|(1<<(MySQLStatementParserEXTRACT-49))|(1<<(MySQLStatementParserTRIM-49))|(1<<(MySQLStatementParserLAST_DAY-49))|(1<<(MySQLStatementParserTRADITIONAL-49))|(1<<(MySQLStatementParserTREE-49))|(1<<(MySQLStatementParserMYSQL_ADMIN-49))|(1<<(MySQLStatementParserINSTANT-49))|(1<<(MySQLStatementParserINPLACE-49))|(1<<(MySQLStatementParserCOPY-49))|(1<<(MySQLStatementParserUL_BINARY-49))|(1<<(MySQLStatementParserAUTOCOMMIT-49))|(1<<(MySQLStatementParserINNODB-49))|(1<<(MySQLStatementParserREDO_LOG-49))|(1<<(MySQLStatementParserACCOUNT-49))|(1<<(MySQLStatementParserACTION-49))|(1<<(MySQLStatementParserACTIVE-49))|(1<<(MySQLStatementParserADMIN-49))|(1<<(MySQLStatementParserAFTER-49))|(1<<(MySQLStatementParserAGAINST-49)))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(MySQLStatementParserAGGREGATE-81))|(1<<(MySQLStatementParserALGORITHM-81))|(1<<(MySQLStatementParserALWAYS-81))|(1<<(MySQLStatementParserANY-81))|(1<<(MySQLStatementParserARRAY-81))|(1<<(MySQLStatementParserASCII-81))|(1<<(MySQLStatementParserAT-81))|(1<<(MySQLStatementParserATTRIBUTE-81))|(1<<(MySQLStatementParserAUTOEXTEND_SIZE-81))|(1<<(MySQLStatementParserAUTO_INCREMENT-81))|(1<<(MySQLStatementParserAVG-81))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-81))|(1<<(MySQLStatementParserBACKUP-81))|(1<<(MySQLStatementParserBEGIN-81))|(1<<(MySQLStatementParserBINLOG-81))|(1<<(MySQLStatementParserBIT-81))|(1<<(MySQLStatementParserBLOCK-81))|(1<<(MySQLStatementParserBOOL-81))|(1<<(MySQLStatementParserBOOLEAN-81)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(MySQLStatementParserBTREE-114))|(1<<(MySQLStatementParserBUCKETS-114))|(1<<(MySQLStatementParserBYTE-114))|(1<<(MySQLStatementParserCACHE-114))|(1<<(MySQLStatementParserCASCADED-114))|(1<<(MySQLStatementParserCATALOG_NAME-114))|(1<<(MySQLStatementParserCHAIN-114))|(1<<(MySQLStatementParserCHANGED-114))|(1<<(MySQLStatementParserCHANNEL-114))|(1<<(MySQLStatementParserCHARSET-114))|(1<<(MySQLStatementParserCHECKSUM-114))|(1<<(MySQLStatementParserCIPHER-114))|(1<<(MySQLStatementParserCLASS_ORIGIN-114))|(1<<(MySQLStatementParserCLIENT-114))|(1<<(MySQLStatementParserCLONE-114))|(1<<(MySQLStatementParserCLOSE-114))|(1<<(MySQLStatementParserCOALESCE-114))|(1<<(MySQLStatementParserCODE-114))|(1<<(MySQLStatementParserCOLLATION-114))|(1<<(MySQLStatementParserCOLUMNS-114))|(1<<(MySQLStatementParserCOLUMN_FORMAT-114))|(1<<(MySQLStatementParserCOLUMN_NAME-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(MySQLStatementParserCOMMENT-146))|(1<<(MySQLStatementParserCOMMIT-146))|(1<<(MySQLStatementParserCOMMITTED-146))|(1<<(MySQLStatementParserCOMPACT-146))|(1<<(MySQLStatementParserCOMPLETION-146))|(1<<(MySQLStatementParserCOMPONENT-146))|(1<<(MySQLStatementParserCOMPRESSED-146))|(1<<(MySQLStatementParserCOMPRESSION-146))|(1<<(MySQLStatementParserCONCURRENT-146))|(1<<(MySQLStatementParserCONNECTION-146))|(1<<(MySQLStatementParserCONSISTENT-146))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-146))|(1<<(MySQLStatementParserCONSTRAINT_NAME-146))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-146))|(1<<(MySQLStatementParserCONTAINS-146))|(1<<(MySQLStatementParserCONTEXT-146))|(1<<(MySQLStatementParserCPU-146))|(1<<(MySQLStatementParserCURRENT-146))|(1<<(MySQLStatementParserCURSOR_NAME-146)))) != 0) || (((_la-178)&-(0x1f+1)) == 0 && ((1<<uint((_la-178)))&((1<<(MySQLStatementParserDATA-178))|(1<<(MySQLStatementParserDATAFILE-178))|(1<<(MySQLStatementParserDATE-178))|(1<<(MySQLStatementParserDATETIME-178))|(1<<(MySQLStatementParserDAY-178))|(1<<(MySQLStatementParserDEALLOCATE-178))|(1<<(MySQLStatementParserDEFAULT_AUTH-178))|(1<<(MySQLStatementParserDEFINER-178))|(1<<(MySQLStatementParserDEFINITION-178))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-178))|(1<<(MySQLStatementParserDESCRIPTION-178))|(1<<(MySQLStatementParserDIAGNOSTICS-178))|(1<<(MySQLStatementParserDIRECTORY-178))|(1<<(MySQLStatementParserDISABLE-178))|(1<<(MySQLStatementParserDISCARD-178))|(1<<(MySQLStatementParserDISK-178)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(MySQLStatementParserDO-213))|(1<<(MySQLStatementParserDUMPFILE-213))|(1<<(MySQLStatementParserDUPLICATE-213))|(1<<(MySQLStatementParserDYNAMIC-213))|(1<<(MySQLStatementParserENABLE-213))|(1<<(MySQLStatementParserENCRYPTION-213))|(1<<(MySQLStatementParserEND-213))|(1<<(MySQLStatementParserENDS-213))|(1<<(MySQLStatementParserENFORCED-213))|(1<<(MySQLStatementParserENGINE-213))|(1<<(MySQLStatementParserENGINES-213))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-213))|(1<<(MySQLStatementParserENUM-213))|(1<<(MySQLStatementParserERROR-213))|(1<<(MySQLStatementParserERRORS-213))|(1<<(MySQLStatementParserESCAPE-213))|(1<<(MySQLStatementParserEVENT-213))|(1<<(MySQLStatementParserEVENTS-213))|(1<<(MySQLStatementParserEVERY-213))|(1<<(MySQLStatementParserEXCHANGE-213))|(1<<(MySQLStatementParserEXCLUDE-213))|(1<<(MySQLStatementParserEXECUTE-213)))) != 0) || (((_la-247)&-(0x1f+1)) == 0 && ((1<<uint((_la-247)))&((1<<(MySQLStatementParserEXPANSION-247))|(1<<(MySQLStatementParserEXPIRE-247))|(1<<(MySQLStatementParserEXPORT-247))|(1<<(MySQLStatementParserEXTENDED-247))|(1<<(MySQLStatementParserEXTENT_SIZE-247))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-247))|(1<<(MySQLStatementParserFAST-247))|(1<<(MySQLStatementParserFAULTS-247))|(1<<(MySQLStatementParserFILE-247))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-247))|(1<<(MySQLStatementParserFILTER-247))|(1<<(MySQLStatementParserFIRST-247))|(1<<(MySQLStatementParserFIXED-247))|(1<<(MySQLStatementParserFLUSH-247))|(1<<(MySQLStatementParserFOLLOWING-247))|(1<<(MySQLStatementParserFOLLOWS-247))|(1<<(MySQLStatementParserFORMAT-247))|(1<<(MySQLStatementParserFOUND-247))|(1<<(MySQLStatementParserFULL-247)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(MySQLStatementParserGENERAL-279))|(1<<(MySQLStatementParserGEOMETRY-279))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-279))|(1<<(MySQLStatementParserGET_FORMAT-279))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-279))|(1<<(MySQLStatementParserGLOBAL-279))|(1<<(MySQLStatementParserGRANTS-279))|(1<<(MySQLStatementParserGROUP_REPLICATION-279))|(1<<(MySQLStatementParserHANDLER-279))|(1<<(MySQLStatementParserHASH-279))|(1<<(MySQLStatementParserHELP-279))|(1<<(MySQLStatementParserHISTOGRAM-279))|(1<<(MySQLStatementParserHISTORY-279))|(1<<(MySQLStatementParserHOST-279))|(1<<(MySQLStatementParserHOSTS-279))|(1<<(MySQLStatementParserHOUR-279))|(1<<(MySQLStatementParserIDENTIFIED-279))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-279))|(1<<(MySQLStatementParserIMPORT-279)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySQLStatementParserINACTIVE-312))|(1<<(MySQLStatementParserINDEXES-312))|(1<<(MySQLStatementParserINITIAL_SIZE-312))|(1<<(MySQLStatementParserINSERT_METHOD-312))|(1<<(MySQLStatementParserINSTALL-312))|(1<<(MySQLStatementParserINSTANCE-312))|(1<<(MySQLStatementParserINVISIBLE-312))|(1<<(MySQLStatementParserINVOKER-312))|(1<<(MySQLStatementParserIO-312))|(1<<(MySQLStatementParserIPC-312))|(1<<(MySQLStatementParserISOLATION-312))|(1<<(MySQLStatementParserISSUER-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySQLStatementParserJSON-344))|(1<<(MySQLStatementParserJSON_VALUE-344))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-344))|(1<<(MySQLStatementParserLANGUAGE-344))|(1<<(MySQLStatementParserLAST-344))|(1<<(MySQLStatementParserLAST_VALUE-344))|(1<<(MySQLStatementParserLEAVES-344))|(1<<(MySQLStatementParserLESS-344))|(1<<(MySQLStatementParserLEVEL-344))|(1<<(MySQLStatementParserLINESTRING-344))|(1<<(MySQLStatementParserLIST-344))|(1<<(MySQLStatementParserLOCAL-344))|(1<<(MySQLStatementParserLOCKED-344))|(1<<(MySQLStatementParserLOCKS-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySQLStatementParserLOGFILE-376))|(1<<(MySQLStatementParserLOGS-376))|(1<<(MySQLStatementParserMASTER-376))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-376))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-376))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-376))|(1<<(MySQLStatementParserMASTER_DELAY-376))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-376))|(1<<(MySQLStatementParserMASTER_HOST-376))|(1<<(MySQLStatementParserMASTER_LOG_FILE-376))|(1<<(MySQLStatementParserMASTER_LOG_POS-376))|(1<<(MySQLStatementParserMASTER_PASSWORD-376))|(1<<(MySQLStatementParserMASTER_PORT-376))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-376))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-376))|(1<<(MySQLStatementParserMASTER_SERVER_ID-376))|(1<<(MySQLStatementParserMASTER_SSL-376))|(1<<(MySQLStatementParserMASTER_SSL_CA-376))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_CERT-376))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-376))|(1<<(MySQLStatementParserMASTER_SSL_CRL-376))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_KEY-376))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySQLStatementParserMASTER_TLS_VERSION-408))|(1<<(MySQLStatementParserMASTER_USER-408))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-408))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_ROWS-408))|(1<<(MySQLStatementParserMAX_SIZE-408))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-408))|(1<<(MySQLStatementParserMEDIUM-408))|(1<<(MySQLStatementParserMEMBER-408))|(1<<(MySQLStatementParserMEMORY-408))|(1<<(MySQLStatementParserMERGE-408))|(1<<(MySQLStatementParserMESSAGE_TEXT-408))|(1<<(MySQLStatementParserMICROSECOND-408))|(1<<(MySQLStatementParserMIGRATE-408))|(1<<(MySQLStatementParserMINUTE-408))|(1<<(MySQLStatementParserMIN_ROWS-408))|(1<<(MySQLStatementParserMODE-408))|(1<<(MySQLStatementParserMODIFY-408))|(1<<(MySQLStatementParserMONTH-408))|(1<<(MySQLStatementParserMULTILINESTRING-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySQLStatementParserMULTIPOINT-440))|(1<<(MySQLStatementParserMULTIPOLYGON-440))|(1<<(MySQLStatementParserMUTEX-440))|(1<<(MySQLStatementParserMYSQL_ERRNO-440))|(1<<(MySQLStatementParserNAME-440))|(1<<(MySQLStatementParserNAMES-440))|(1<<(MySQLStatementParserNATIONAL-440))|(1<<(MySQLStatementParserNCHAR-440))|(1<<(MySQLStatementParserNDBCLUSTER-440))|(1<<(MySQLStatementParserNESTED-440))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-440))|(1<<(MySQLStatementParserNEVER-440))|(1<<(MySQLStatementParserNEW-440))|(1<<(MySQLStatementParserNEXT-440))|(1<<(MySQLStatementParserNO-440))|(1<<(MySQLStatementParserNODEGROUP-440))|(1<<(MySQLStatementParserNONE-440))|(1<<(MySQLStatementParserNOWAIT-440))|(1<<(MySQLStatementParserNO_WAIT-440))|(1<<(MySQLStatementParserNULLS-440))|(1<<(MySQLStatementParserNUMBER-440))|(1<<(MySQLStatementParserNVARCHAR-440))|(1<<(MySQLStatementParserOFF-440))|(1<<(MySQLStatementParserOFFSET-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySQLStatementParserOJ-472))|(1<<(MySQLStatementParserOLD-472))|(1<<(MySQLStatementParserONE-472))|(1<<(MySQLStatementParserONLY-472))|(1<<(MySQLStatementParserOPEN-472))|(1<<(MySQLStatementParserOPTIONAL-472))|(1<<(MySQLStatementParserOPTIONS-472))|(1<<(MySQLStatementParserORDINALITY-472))|(1<<(MySQLStatementParserORGANIZATION-472))|(1<<(MySQLStatementParserOTHERS-472))|(1<<(MySQLStatementParserOWNER-472))|(1<<(MySQLStatementParserPACK_KEYS-472))|(1<<(MySQLStatementParserPAGE-472))|(1<<(MySQLStatementParserPARSER-472))|(1<<(MySQLStatementParserPARTIAL-472))|(1<<(MySQLStatementParserPARTITIONING-472))|(1<<(MySQLStatementParserPARTITIONS-472))|(1<<(MySQLStatementParserPASSWORD-472))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-472))|(1<<(MySQLStatementParserPATH-472)))) != 0) || (((_la-505)&-(0x1f+1)) == 0 && ((1<<uint((_la-505)))&((1<<(MySQLStatementParserPERSIST-505))|(1<<(MySQLStatementParserPERSIST_ONLY-505))|(1<<(MySQLStatementParserPHASE-505))|(1<<(MySQLStatementParserPLUGIN-505))|(1<<(MySQLStatementParserPLUGINS-505))|(1<<(MySQLStatementParserPLUGIN_DIR-505))|(1<<(MySQLStatementParserPOINT-505))|(1<<(MySQLStatementParserPOLYGON-505))|(1<<(MySQLStatementParserPORT-505))|(1<<(MySQLStatementParserPRECEDES-505))|(1<<(MySQLStatementParserPRECEDING-505))|(1<<(MySQLStatementParserPREPARE-505))|(1<<(MySQLStatementParserPRESERVE-505))|(1<<(MySQLStatementParserPREV-505))|(1<<(MySQLStatementParserPRIVILEGES-505))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-505))|(1<<(MySQLStatementParserPROCESS-505))|(1<<(MySQLStatementParserPROCESSLIST-505))|(1<<(MySQLStatementParserPROFILE-505))|(1<<(MySQLStatementParserPROFILES-505))|(1<<(MySQLStatementParserPROXY-505))|(1<<(MySQLStatementParserQUARTER-505))|(1<<(MySQLStatementParserQUERY-505))|(1<<(MySQLStatementParserQUICK-505))|(1<<(MySQLStatementParserRANDOM-505)))) != 0) || (((_la-538)&-(0x1f+1)) == 0 && ((1<<uint((_la-538)))&((1<<(MySQLStatementParserREAD_ONLY-538))|(1<<(MySQLStatementParserREBUILD-538))|(1<<(MySQLStatementParserRECOVER-538))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-538))|(1<<(MySQLStatementParserREDUNDANT-538))|(1<<(MySQLStatementParserREFERENCE-538))|(1<<(MySQLStatementParserRELAY-538))|(1<<(MySQLStatementParserRELAYLOG-538))|(1<<(MySQLStatementParserRELAY_LOG_FILE-538))|(1<<(MySQLStatementParserRELAY_LOG_POS-538))|(1<<(MySQLStatementParserRELAY_THREAD-538))|(1<<(MySQLStatementParserRELOAD-538))|(1<<(MySQLStatementParserREMOVE-538))|(1<<(MySQLStatementParserREORGANIZE-538))|(1<<(MySQLStatementParserREPAIR-538))|(1<<(MySQLStatementParserREPEATABLE-538))|(1<<(MySQLStatementParserREPLICATE_DO_DB-538))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-538)))) != 0) || (((_la-570)&-(0x1f+1)) == 0 && ((1<<uint((_la-570)))&((1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-570))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-570))|(1<<(MySQLStatementParserREPLICATION-570))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-570))|(1<<(MySQLStatementParserRESET-570))|(1<<(MySQLStatementParserRESOURCE-570))|(1<<(MySQLStatementParserRESPECT-570))|(1<<(MySQLStatementParserRESTART-570))|(1<<(MySQLStatementParserRESTORE-570))|(1<<(MySQLStatementParserRESUME-570))|(1<<(MySQLStatementParserRETAIN-570))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-570))|(1<<(MySQLStatementParserRETURNING-570))|(1<<(MySQLStatementParserRETURNS-570))|(1<<(MySQLStatementParserREUSE-570))|(1<<(MySQLStatementParserREVERSE-570))|(1<<(MySQLStatementParserROLE-570))|(1<<(MySQLStatementParserROLLBACK-570))|(1<<(MySQLStatementParserROLLUP-570))|(1<<(MySQLStatementParserROTATE-570))|(1<<(MySQLStatementParserROUTINE-570))|(1<<(MySQLStatementParserROW_COUNT-570))|(1<<(MySQLStatementParserROW_FORMAT-570)))) != 0) || (((_la-603)&-(0x1f+1)) == 0 && ((1<<uint((_la-603)))&((1<<(MySQLStatementParserRTREE-603))|(1<<(MySQLStatementParserSAVEPOINT-603))|(1<<(MySQLStatementParserSCHEDULE-603))|(1<<(MySQLStatementParserSCHEMA_NAME-603))|(1<<(MySQLStatementParserSECOND-603))|(1<<(MySQLStatementParserSECONDARY-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-603))|(1<<(MySQLStatementParserSECONDARY_LOAD-603))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-603))|(1<<(MySQLStatementParserSECURITY-603))|(1<<(MySQLStatementParserSERIAL-603))|(1<<(MySQLStatementParserSERIALIZABLE-603))|(1<<(MySQLStatementParserSERVER-603))|(1<<(MySQLStatementParserSESSION-603))|(1<<(MySQLStatementParserSHARE-603))|(1<<(MySQLStatementParserSHUTDOWN-603))|(1<<(MySQLStatementParserSIGNED-603))|(1<<(MySQLStatementParserSIMPLE-603))|(1<<(MySQLStatementParserSLAVE-603))|(1<<(MySQLStatementParserSLOW-603)))) != 0) || (((_la-635)&-(0x1f+1)) == 0 && ((1<<uint((_la-635)))&((1<<(MySQLStatementParserSNAPSHOT-635))|(1<<(MySQLStatementParserSOCKET-635))|(1<<(MySQLStatementParserSONAME-635))|(1<<(MySQLStatementParserSOUNDS-635))|(1<<(MySQLStatementParserSOURCE-635))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-635))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-635))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-635))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-635))|(1<<(MySQLStatementParserSQL_NO_CACHE-635))|(1<<(MySQLStatementParserSQL_THREAD-635))|(1<<(MySQLStatementParserSRID-635))|(1<<(MySQLStatementParserSTACKED-635))|(1<<(MySQLStatementParserSTART-635))|(1<<(MySQLStatementParserSTARTS-635))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-635))|(1<<(MySQLStatementParserSTATS_PERSISTENT-635))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-635))|(1<<(MySQLStatementParserSTATUS-635))|(1<<(MySQLStatementParserSTOP-635))|(1<<(MySQLStatementParserSTORAGE-635)))) != 0) || (((_la-669)&-(0x1f+1)) == 0 && ((1<<uint((_la-669)))&((1<<(MySQLStatementParserSTREAM-669))|(1<<(MySQLStatementParserSTRING-669))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-669))|(1<<(MySQLStatementParserSUBJECT-669))|(1<<(MySQLStatementParserSUBPARTITION-669))|(1<<(MySQLStatementParserSUBPARTITIONS-669))|(1<<(MySQLStatementParserSUPER-669))|(1<<(MySQLStatementParserSUSPEND-669))|(1<<(MySQLStatementParserSWAPS-669))|(1<<(MySQLStatementParserSWITCHES-669))|(1<<(MySQLStatementParserTABLES-669))|(1<<(MySQLStatementParserTABLESPACE-669))|(1<<(MySQLStatementParserTABLE_CHECKSUM-669))|(1<<(MySQLStatementParserTABLE_NAME-669))|(1<<(MySQLStatementParserTEMPORARY-669))|(1<<(MySQLStatementParserTEMPTABLE-669))|(1<<(MySQLStatementParserTEXT-669))|(1<<(MySQLStatementParserTHAN-669))|(1<<(MySQLStatementParserTHREAD_PRIORITY-669))|(1<<(MySQLStatementParserTIES-669))|(1<<(MySQLStatementParserTIME-669))|(1<<(MySQLStatementParserTIMESTAMP-669))|(1<<(MySQLStatementParserTIMESTAMP_ADD-669))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-669))|(1<<(MySQLStatementParserTLS-669)))) != 0) || (((_la-703)&-(0x1f+1)) == 0 && ((1<<uint((_la-703)))&((1<<(MySQLStatementParserTRANSACTION-703))|(1<<(MySQLStatementParserTRIGGERS-703))|(1<<(MySQLStatementParserTRUNCATE-703))|(1<<(MySQLStatementParserTYPE-703))|(1<<(MySQLStatementParserTYPES-703))|(1<<(MySQLStatementParserUNBOUNDED-703))|(1<<(MySQLStatementParserUNCOMMITTED-703))|(1<<(MySQLStatementParserUNDEFINED-703))|(1<<(MySQLStatementParserUNDOFILE-703))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-703))|(1<<(MySQLStatementParserUNICODE-703))|(1<<(MySQLStatementParserUNINSTALL-703))|(1<<(MySQLStatementParserUNKNOWN-703))|(1<<(MySQLStatementParserUNTIL-703))|(1<<(MySQLStatementParserUPGRADE-703))|(1<<(MySQLStatementParserUSER-703))|(1<<(MySQLStatementParserUSER_RESOURCES-703))|(1<<(MySQLStatementParserUSE_FRM-703)))) != 0) || (((_la-735)&-(0x1f+1)) == 0 && ((1<<uint((_la-735)))&((1<<(MySQLStatementParserVALIDATION-735))|(1<<(MySQLStatementParserVALUE-735))|(1<<(MySQLStatementParserVARIABLES-735))|(1<<(MySQLStatementParserVCPU-735))|(1<<(MySQLStatementParserVIEW-735))|(1<<(MySQLStatementParserVISIBLE-735))|(1<<(MySQLStatementParserWAIT-735))|(1<<(MySQLStatementParserWARNINGS-735))|(1<<(MySQLStatementParserWEEK-735))|(1<<(MySQLStatementParserWEIGHT_STRING-735))|(1<<(MySQLStatementParserWITHOUT-735))|(1<<(MySQLStatementParserWORK-735))|(1<<(MySQLStatementParserWRAPPER-735))|(1<<(MySQLStatementParserX509-735))|(1<<(MySQLStatementParserXA-735))|(1<<(MySQLStatementParserXID-735))|(1<<(MySQLStatementParserXML-735))|(1<<(MySQLStatementParserYEAR-735)))) != 0) || _la == MySQLStatementParserIDENTIFIER_ || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
		{
			p.SetState(3595)
			p.Identifier()
		}
		p.SetState(3600)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(3596)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(3597)
				p.Identifier()
			}

			p.SetState(3602)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(3605)
		p.Match(MySQLStatementParserRP_)
	}

	return localctx
}

// INotExistClauseContext is an interface to support dynamic dispatch.
type INotExistClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNotExistClauseContext differentiates from other interfaces.
	IsNotExistClauseContext()
}

type NotExistClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNotExistClauseContext() *NotExistClauseContext {
	var p = new(NotExistClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_notExistClause
	return p
}

func (*NotExistClauseContext) IsNotExistClauseContext() {}

func NewNotExistClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NotExistClauseContext {
	var p = new(NotExistClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_notExistClause

	return p
}

func (s *NotExistClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *NotExistClauseContext) IF() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIF, 0)
}

func (s *NotExistClauseContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNOT, 0)
}

func (s *NotExistClauseContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXISTS, 0)
}

func (s *NotExistClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NotExistClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NotExistClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterNotExistClause(s)
	}
}

func (s *NotExistClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitNotExistClause(s)
	}
}

func (s *NotExistClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitNotExistClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) NotExistClause() (localctx INotExistClauseContext) {
	this := p
	_ = this

	localctx = NewNotExistClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 494, MySQLStatementParserRULE_notExistClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3607)
		p.Match(MySQLStatementParserIF)
	}
	{
		p.SetState(3608)
		p.Match(MySQLStatementParserNOT)
	}
	{
		p.SetState(3609)
		p.Match(MySQLStatementParserEXISTS)
	}

	return localctx
}

// IExistClauseContext is an interface to support dynamic dispatch.
type IExistClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExistClauseContext differentiates from other interfaces.
	IsExistClauseContext()
}

type ExistClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExistClauseContext() *ExistClauseContext {
	var p = new(ExistClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_existClause
	return p
}

func (*ExistClauseContext) IsExistClauseContext() {}

func NewExistClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExistClauseContext {
	var p = new(ExistClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_existClause

	return p
}

func (s *ExistClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ExistClauseContext) IF() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIF, 0)
}

func (s *ExistClauseContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXISTS, 0)
}

func (s *ExistClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExistClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExistClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterExistClause(s)
	}
}

func (s *ExistClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitExistClause(s)
	}
}

func (s *ExistClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitExistClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ExistClause() (localctx IExistClauseContext) {
	this := p
	_ = this

	localctx = NewExistClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 496, MySQLStatementParserRULE_existClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3611)
		p.Match(MySQLStatementParserIF)
	}
	{
		p.SetState(3612)
		p.Match(MySQLStatementParserEXISTS)
	}

	return localctx
}

// IConnectionIdContext is an interface to support dynamic dispatch.
type IConnectionIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConnectionIdContext differentiates from other interfaces.
	IsConnectionIdContext()
}

type ConnectionIdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConnectionIdContext() *ConnectionIdContext {
	var p = new(ConnectionIdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_connectionId
	return p
}

func (*ConnectionIdContext) IsConnectionIdContext() {}

func NewConnectionIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConnectionIdContext {
	var p = new(ConnectionIdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_connectionId

	return p
}

func (s *ConnectionIdContext) GetParser() antlr.Parser { return s.parser }

func (s *ConnectionIdContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *ConnectionIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConnectionIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConnectionIdContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterConnectionId(s)
	}
}

func (s *ConnectionIdContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitConnectionId(s)
	}
}

func (s *ConnectionIdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitConnectionId(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ConnectionId() (localctx IConnectionIdContext) {
	this := p
	_ = this

	localctx = NewConnectionIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 498, MySQLStatementParserRULE_connectionId)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3614)
		p.Match(MySQLStatementParserNUMBER_)
	}

	return localctx
}

// ILabelNameContext is an interface to support dynamic dispatch.
type ILabelNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelNameContext differentiates from other interfaces.
	IsLabelNameContext()
}

type LabelNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelNameContext() *LabelNameContext {
	var p = new(LabelNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_labelName
	return p
}

func (*LabelNameContext) IsLabelNameContext() {}

func NewLabelNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelNameContext {
	var p = new(LabelNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_labelName

	return p
}

func (s *LabelNameContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelNameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *LabelNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterLabelName(s)
	}
}

func (s *LabelNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitLabelName(s)
	}
}

func (s *LabelNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitLabelName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) LabelName() (localctx ILabelNameContext) {
	this := p
	_ = this

	localctx = NewLabelNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 500, MySQLStatementParserRULE_labelName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3616)
		p.Identifier()
	}

	return localctx
}

// ICursorNameContext is an interface to support dynamic dispatch.
type ICursorNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCursorNameContext differentiates from other interfaces.
	IsCursorNameContext()
}

type CursorNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCursorNameContext() *CursorNameContext {
	var p = new(CursorNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_cursorName
	return p
}

func (*CursorNameContext) IsCursorNameContext() {}

func NewCursorNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CursorNameContext {
	var p = new(CursorNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_cursorName

	return p
}

func (s *CursorNameContext) GetParser() antlr.Parser { return s.parser }

func (s *CursorNameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *CursorNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CursorNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CursorNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCursorName(s)
	}
}

func (s *CursorNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCursorName(s)
	}
}

func (s *CursorNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCursorName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CursorName() (localctx ICursorNameContext) {
	this := p
	_ = this

	localctx = NewCursorNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 502, MySQLStatementParserRULE_cursorName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3618)
		p.Identifier()
	}

	return localctx
}

// IConditionNameContext is an interface to support dynamic dispatch.
type IConditionNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionNameContext differentiates from other interfaces.
	IsConditionNameContext()
}

type ConditionNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionNameContext() *ConditionNameContext {
	var p = new(ConditionNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_conditionName
	return p
}

func (*ConditionNameContext) IsConditionNameContext() {}

func NewConditionNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionNameContext {
	var p = new(ConditionNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_conditionName

	return p
}

func (s *ConditionNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionNameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ConditionNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterConditionName(s)
	}
}

func (s *ConditionNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitConditionName(s)
	}
}

func (s *ConditionNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitConditionName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ConditionName() (localctx IConditionNameContext) {
	this := p
	_ = this

	localctx = NewConditionNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 504, MySQLStatementParserRULE_conditionName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3620)
		p.Identifier()
	}

	return localctx
}

// IUnionOptionContext is an interface to support dynamic dispatch.
type IUnionOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnionOptionContext differentiates from other interfaces.
	IsUnionOptionContext()
}

type UnionOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnionOptionContext() *UnionOptionContext {
	var p = new(UnionOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_unionOption
	return p
}

func (*UnionOptionContext) IsUnionOptionContext() {}

func NewUnionOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnionOptionContext {
	var p = new(UnionOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_unionOption

	return p
}

func (s *UnionOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *UnionOptionContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALL, 0)
}

func (s *UnionOptionContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDISTINCT, 0)
}

func (s *UnionOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnionOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnionOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterUnionOption(s)
	}
}

func (s *UnionOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitUnionOption(s)
	}
}

func (s *UnionOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitUnionOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) UnionOption() (localctx IUnionOptionContext) {
	this := p
	_ = this

	localctx = NewUnionOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 506, MySQLStatementParserRULE_unionOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3622)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserALL || _la == MySQLStatementParserDISTINCT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// INoWriteToBinLogContext is an interface to support dynamic dispatch.
type INoWriteToBinLogContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNoWriteToBinLogContext differentiates from other interfaces.
	IsNoWriteToBinLogContext()
}

type NoWriteToBinLogContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoWriteToBinLogContext() *NoWriteToBinLogContext {
	var p = new(NoWriteToBinLogContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_noWriteToBinLog
	return p
}

func (*NoWriteToBinLogContext) IsNoWriteToBinLogContext() {}

func NewNoWriteToBinLogContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoWriteToBinLogContext {
	var p = new(NoWriteToBinLogContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_noWriteToBinLog

	return p
}

func (s *NoWriteToBinLogContext) GetParser() antlr.Parser { return s.parser }

func (s *NoWriteToBinLogContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCAL, 0)
}

func (s *NoWriteToBinLogContext) NO_WRITE_TO_BINLOG() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNO_WRITE_TO_BINLOG, 0)
}

func (s *NoWriteToBinLogContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoWriteToBinLogContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoWriteToBinLogContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterNoWriteToBinLog(s)
	}
}

func (s *NoWriteToBinLogContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitNoWriteToBinLog(s)
	}
}

func (s *NoWriteToBinLogContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitNoWriteToBinLog(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) NoWriteToBinLog() (localctx INoWriteToBinLogContext) {
	this := p
	_ = this

	localctx = NewNoWriteToBinLogContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 508, MySQLStatementParserRULE_noWriteToBinLog)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3624)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserLOCAL || _la == MySQLStatementParserNO_WRITE_TO_BINLOG) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IChannelOptionContext is an interface to support dynamic dispatch.
type IChannelOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChannelOptionContext differentiates from other interfaces.
	IsChannelOptionContext()
}

type ChannelOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChannelOptionContext() *ChannelOptionContext {
	var p = new(ChannelOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_channelOption
	return p
}

func (*ChannelOptionContext) IsChannelOptionContext() {}

func NewChannelOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChannelOptionContext {
	var p = new(ChannelOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_channelOption

	return p
}

func (s *ChannelOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *ChannelOptionContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOR, 0)
}

func (s *ChannelOptionContext) CHANNEL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHANNEL, 0)
}

func (s *ChannelOptionContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *ChannelOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChannelOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChannelOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterChannelOption(s)
	}
}

func (s *ChannelOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitChannelOption(s)
	}
}

func (s *ChannelOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitChannelOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ChannelOption() (localctx IChannelOptionContext) {
	this := p
	_ = this

	localctx = NewChannelOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 510, MySQLStatementParserRULE_channelOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3626)
		p.Match(MySQLStatementParserFOR)
	}
	{
		p.SetState(3627)
		p.Match(MySQLStatementParserCHANNEL)
	}
	{
		p.SetState(3628)
		p.String_()
	}

	return localctx
}

// IPreparedStatementContext is an interface to support dynamic dispatch.
type IPreparedStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPreparedStatementContext differentiates from other interfaces.
	IsPreparedStatementContext()
}

type PreparedStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPreparedStatementContext() *PreparedStatementContext {
	var p = new(PreparedStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_preparedStatement
	return p
}

func (*PreparedStatementContext) IsPreparedStatementContext() {}

func NewPreparedStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PreparedStatementContext {
	var p = new(PreparedStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_preparedStatement

	return p
}

func (s *PreparedStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PreparedStatementContext) PREPARE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPREPARE, 0)
}

func (s *PreparedStatementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *PreparedStatementContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFROM, 0)
}

func (s *PreparedStatementContext) StringLiterals() IStringLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralsContext)
}

func (s *PreparedStatementContext) UserVariable() IUserVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserVariableContext)
}

func (s *PreparedStatementContext) ExecuteStatement() IExecuteStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecuteStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExecuteStatementContext)
}

func (s *PreparedStatementContext) DEALLOCATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEALLOCATE, 0)
}

func (s *PreparedStatementContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDROP, 0)
}

func (s *PreparedStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PreparedStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PreparedStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterPreparedStatement(s)
	}
}

func (s *PreparedStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitPreparedStatement(s)
	}
}

func (s *PreparedStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitPreparedStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) PreparedStatement() (localctx IPreparedStatementContext) {
	this := p
	_ = this

	localctx = NewPreparedStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 512, MySQLStatementParserRULE_preparedStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3641)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserPREPARE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3630)
			p.Match(MySQLStatementParserPREPARE)
		}
		{
			p.SetState(3631)
			p.Identifier()
		}
		{
			p.SetState(3632)
			p.Match(MySQLStatementParserFROM)
		}
		p.SetState(3635)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySQLStatementParserSINGLE_QUOTED_TEXT, MySQLStatementParserDOUBLE_QUOTED_TEXT, MySQLStatementParserNCHAR_TEXT, MySQLStatementParserUNDERSCORE_CHARSET:
			{
				p.SetState(3633)
				p.StringLiterals()
			}

		case MySQLStatementParserAT_:
			{
				p.SetState(3634)
				p.UserVariable()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case MySQLStatementParserEXECUTE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3637)
			p.ExecuteStatement()
		}

	case MySQLStatementParserDEALLOCATE, MySQLStatementParserDROP:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3638)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserDEALLOCATE || _la == MySQLStatementParserDROP) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(3639)
			p.Match(MySQLStatementParserPREPARE)
		}
		{
			p.SetState(3640)
			p.Identifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExecuteStatementContext is an interface to support dynamic dispatch.
type IExecuteStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExecuteStatementContext differentiates from other interfaces.
	IsExecuteStatementContext()
}

type ExecuteStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExecuteStatementContext() *ExecuteStatementContext {
	var p = new(ExecuteStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_executeStatement
	return p
}

func (*ExecuteStatementContext) IsExecuteStatementContext() {}

func NewExecuteStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExecuteStatementContext {
	var p = new(ExecuteStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_executeStatement

	return p
}

func (s *ExecuteStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExecuteStatementContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXECUTE, 0)
}

func (s *ExecuteStatementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ExecuteStatementContext) USING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUSING, 0)
}

func (s *ExecuteStatementContext) ExecuteVarList() IExecuteVarListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecuteVarListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExecuteVarListContext)
}

func (s *ExecuteStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExecuteStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExecuteStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterExecuteStatement(s)
	}
}

func (s *ExecuteStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitExecuteStatement(s)
	}
}

func (s *ExecuteStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitExecuteStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ExecuteStatement() (localctx IExecuteStatementContext) {
	this := p
	_ = this

	localctx = NewExecuteStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 514, MySQLStatementParserRULE_executeStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3643)
		p.Match(MySQLStatementParserEXECUTE)
	}
	{
		p.SetState(3644)
		p.Identifier()
	}
	p.SetState(3647)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserUSING {
		{
			p.SetState(3645)
			p.Match(MySQLStatementParserUSING)
		}
		{
			p.SetState(3646)
			p.ExecuteVarList()
		}

	}

	return localctx
}

// IExecuteVarListContext is an interface to support dynamic dispatch.
type IExecuteVarListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExecuteVarListContext differentiates from other interfaces.
	IsExecuteVarListContext()
}

type ExecuteVarListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExecuteVarListContext() *ExecuteVarListContext {
	var p = new(ExecuteVarListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_executeVarList
	return p
}

func (*ExecuteVarListContext) IsExecuteVarListContext() {}

func NewExecuteVarListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExecuteVarListContext {
	var p = new(ExecuteVarListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_executeVarList

	return p
}

func (s *ExecuteVarListContext) GetParser() antlr.Parser { return s.parser }

func (s *ExecuteVarListContext) AllUserVariable() []IUserVariableContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserVariableContext)(nil)).Elem())
	var tst = make([]IUserVariableContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserVariableContext)
		}
	}

	return tst
}

func (s *ExecuteVarListContext) UserVariable(i int) IUserVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserVariableContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserVariableContext)
}

func (s *ExecuteVarListContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *ExecuteVarListContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *ExecuteVarListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExecuteVarListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExecuteVarListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterExecuteVarList(s)
	}
}

func (s *ExecuteVarListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitExecuteVarList(s)
	}
}

func (s *ExecuteVarListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitExecuteVarList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ExecuteVarList() (localctx IExecuteVarListContext) {
	this := p
	_ = this

	localctx = NewExecuteVarListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 516, MySQLStatementParserRULE_executeVarList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3649)
		p.UserVariable()
	}
	p.SetState(3654)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(3650)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(3651)
			p.UserVariable()
		}

		p.SetState(3656)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAlterStatementContext is an interface to support dynamic dispatch.
type IAlterStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterStatementContext differentiates from other interfaces.
	IsAlterStatementContext()
}

type AlterStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStatementContext() *AlterStatementContext {
	var p = new(AlterStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterStatement
	return p
}

func (*AlterStatementContext) IsAlterStatementContext() {}

func NewAlterStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementContext {
	var p = new(AlterStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterStatement

	return p
}

func (s *AlterStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementContext) AlterTable() IAlterTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterTableContext)
}

func (s *AlterStatementContext) AlterDatabase() IAlterDatabaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterDatabaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterDatabaseContext)
}

func (s *AlterStatementContext) AlterProcedure() IAlterProcedureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterProcedureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterProcedureContext)
}

func (s *AlterStatementContext) AlterFunction() IAlterFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterFunctionContext)
}

func (s *AlterStatementContext) AlterEvent() IAlterEventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterEventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterEventContext)
}

func (s *AlterStatementContext) AlterView() IAlterViewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterViewContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterViewContext)
}

func (s *AlterStatementContext) AlterLogfileGroup() IAlterLogfileGroupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterLogfileGroupContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterLogfileGroupContext)
}

func (s *AlterStatementContext) AlterInstance() IAlterInstanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterInstanceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterInstanceContext)
}

func (s *AlterStatementContext) AlterServer() IAlterServerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterServerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterServerContext)
}

func (s *AlterStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterStatement(s)
	}
}

func (s *AlterStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterStatement(s)
	}
}

func (s *AlterStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterStatement() (localctx IAlterStatementContext) {
	this := p
	_ = this

	localctx = NewAlterStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 518, MySQLStatementParserRULE_alterStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3666)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 378, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3657)
			p.AlterTable()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3658)
			p.AlterDatabase()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3659)
			p.AlterProcedure()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3660)
			p.AlterFunction()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3661)
			p.AlterEvent()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3662)
			p.AlterView()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(3663)
			p.AlterLogfileGroup()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(3664)
			p.AlterInstance()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(3665)
			p.AlterServer()
		}

	}

	return localctx
}

// ICreateTableContext is an interface to support dynamic dispatch.
type ICreateTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateTableContext differentiates from other interfaces.
	IsCreateTableContext()
}

type CreateTableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateTableContext() *CreateTableContext {
	var p = new(CreateTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_createTable
	return p
}

func (*CreateTableContext) IsCreateTableContext() {}

func NewCreateTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateTableContext {
	var p = new(CreateTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_createTable

	return p
}

func (s *CreateTableContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateTableContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *CreateTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLE, 0)
}

func (s *CreateTableContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *CreateTableContext) CreateLikeClause() ICreateLikeClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateLikeClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateLikeClauseContext)
}

func (s *CreateTableContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTEMPORARY, 0)
}

func (s *CreateTableContext) NotExistClause() INotExistClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INotExistClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INotExistClauseContext)
}

func (s *CreateTableContext) CreateDefinitionClause() ICreateDefinitionClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateDefinitionClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateDefinitionClauseContext)
}

func (s *CreateTableContext) CreateTableOptions() ICreateTableOptionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateTableOptionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateTableOptionsContext)
}

func (s *CreateTableContext) PartitionClause() IPartitionClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionClauseContext)
}

func (s *CreateTableContext) DuplicateAsQueryExpression() IDuplicateAsQueryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDuplicateAsQueryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDuplicateAsQueryExpressionContext)
}

func (s *CreateTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateTable(s)
	}
}

func (s *CreateTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateTable(s)
	}
}

func (s *CreateTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CreateTable() (localctx ICreateTableContext) {
	this := p
	_ = this

	localctx = NewCreateTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 520, MySQLStatementParserRULE_createTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3668)
		p.Match(MySQLStatementParserCREATE)
	}
	p.SetState(3670)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserTEMPORARY {
		{
			p.SetState(3669)
			p.Match(MySQLStatementParserTEMPORARY)
		}

	}
	{
		p.SetState(3672)
		p.Match(MySQLStatementParserTABLE)
	}
	p.SetState(3674)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIF {
		{
			p.SetState(3673)
			p.NotExistClause()
		}

	}
	{
		p.SetState(3676)
		p.TableName()
	}
	p.SetState(3690)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 385, p.GetParserRuleContext()) {
	case 1:
		p.SetState(3678)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 381, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3677)
				p.CreateDefinitionClause()
			}

		}
		p.SetState(3681)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 382, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3680)
				p.CreateTableOptions()
			}

		}
		p.SetState(3684)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserPARTITION {
			{
				p.SetState(3683)
				p.PartitionClause()
			}

		}
		p.SetState(3687)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 384, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3686)
				p.DuplicateAsQueryExpression()
			}

		}

	case 2:
		{
			p.SetState(3689)
			p.CreateLikeClause()
		}

	}

	return localctx
}

// IPartitionClauseContext is an interface to support dynamic dispatch.
type IPartitionClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitionClauseContext differentiates from other interfaces.
	IsPartitionClauseContext()
}

type PartitionClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionClauseContext() *PartitionClauseContext {
	var p = new(PartitionClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_partitionClause
	return p
}

func (*PartitionClauseContext) IsPartitionClauseContext() {}

func NewPartitionClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionClauseContext {
	var p = new(PartitionClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_partitionClause

	return p
}

func (s *PartitionClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionClauseContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPARTITION, 0)
}

func (s *PartitionClauseContext) BY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBY, 0)
}

func (s *PartitionClauseContext) PartitionTypeDef() IPartitionTypeDefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionTypeDefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionTypeDefContext)
}

func (s *PartitionClauseContext) PARTITIONS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPARTITIONS, 0)
}

func (s *PartitionClauseContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *PartitionClauseContext) SubPartitions() ISubPartitionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubPartitionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubPartitionsContext)
}

func (s *PartitionClauseContext) PartitionDefinitions() IPartitionDefinitionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionDefinitionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionDefinitionsContext)
}

func (s *PartitionClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartitionClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterPartitionClause(s)
	}
}

func (s *PartitionClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitPartitionClause(s)
	}
}

func (s *PartitionClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitPartitionClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) PartitionClause() (localctx IPartitionClauseContext) {
	this := p
	_ = this

	localctx = NewPartitionClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 522, MySQLStatementParserRULE_partitionClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3692)
		p.Match(MySQLStatementParserPARTITION)
	}
	{
		p.SetState(3693)
		p.Match(MySQLStatementParserBY)
	}
	{
		p.SetState(3694)
		p.PartitionTypeDef()
	}
	p.SetState(3697)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 386, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3695)
			p.Match(MySQLStatementParserPARTITIONS)
		}
		{
			p.SetState(3696)
			p.Match(MySQLStatementParserNUMBER_)
		}

	}
	p.SetState(3700)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 387, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3699)
			p.SubPartitions()
		}

	}
	p.SetState(3703)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 388, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3702)
			p.PartitionDefinitions()
		}

	}

	return localctx
}

// IPartitionTypeDefContext is an interface to support dynamic dispatch.
type IPartitionTypeDefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitionTypeDefContext differentiates from other interfaces.
	IsPartitionTypeDefContext()
}

type PartitionTypeDefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionTypeDefContext() *PartitionTypeDefContext {
	var p = new(PartitionTypeDefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_partitionTypeDef
	return p
}

func (*PartitionTypeDefContext) IsPartitionTypeDefContext() {}

func NewPartitionTypeDefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionTypeDefContext {
	var p = new(PartitionTypeDefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_partitionTypeDef

	return p
}

func (s *PartitionTypeDefContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionTypeDefContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserKEY, 0)
}

func (s *PartitionTypeDefContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *PartitionTypeDefContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *PartitionTypeDefContext) LINEAR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLINEAR, 0)
}

func (s *PartitionTypeDefContext) PartitionKeyAlgorithm() IPartitionKeyAlgorithmContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionKeyAlgorithmContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionKeyAlgorithmContext)
}

func (s *PartitionTypeDefContext) ColumnNames() IColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNamesContext)
}

func (s *PartitionTypeDefContext) HASH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHASH, 0)
}

func (s *PartitionTypeDefContext) BitExpr() IBitExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitExprContext)
}

func (s *PartitionTypeDefContext) RANGE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRANGE, 0)
}

func (s *PartitionTypeDefContext) LIST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLIST, 0)
}

func (s *PartitionTypeDefContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOLUMNS, 0)
}

func (s *PartitionTypeDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionTypeDefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartitionTypeDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterPartitionTypeDef(s)
	}
}

func (s *PartitionTypeDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitPartitionTypeDef(s)
	}
}

func (s *PartitionTypeDefContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitPartitionTypeDef(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) PartitionTypeDef() (localctx IPartitionTypeDefContext) {
	this := p
	_ = this

	localctx = NewPartitionTypeDefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 524, MySQLStatementParserRULE_partitionTypeDef)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3737)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 394, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(3706)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserLINEAR {
			{
				p.SetState(3705)
				p.Match(MySQLStatementParserLINEAR)
			}

		}
		{
			p.SetState(3708)
			p.Match(MySQLStatementParserKEY)
		}
		p.SetState(3710)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserALGORITHM {
			{
				p.SetState(3709)
				p.PartitionKeyAlgorithm()
			}

		}
		{
			p.SetState(3712)
			p.Match(MySQLStatementParserLP_)
		}
		p.SetState(3714)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49))|(1<<(MySQLStatementParserGROUP_CONCAT-49))|(1<<(MySQLStatementParserCAST-49))|(1<<(MySQLStatementParserPOSITION-49))|(1<<(MySQLStatementParserSUBSTRING-49))|(1<<(MySQLStatementParserSUBSTR-49))|(1<<(MySQLStatementParserEXTRACT-49))|(1<<(MySQLStatementParserTRIM-49))|(1<<(MySQLStatementParserLAST_DAY-49))|(1<<(MySQLStatementParserTRADITIONAL-49))|(1<<(MySQLStatementParserTREE-49))|(1<<(MySQLStatementParserMYSQL_ADMIN-49))|(1<<(MySQLStatementParserINSTANT-49))|(1<<(MySQLStatementParserINPLACE-49))|(1<<(MySQLStatementParserCOPY-49))|(1<<(MySQLStatementParserUL_BINARY-49))|(1<<(MySQLStatementParserAUTOCOMMIT-49))|(1<<(MySQLStatementParserINNODB-49))|(1<<(MySQLStatementParserREDO_LOG-49))|(1<<(MySQLStatementParserACCOUNT-49))|(1<<(MySQLStatementParserACTION-49))|(1<<(MySQLStatementParserACTIVE-49))|(1<<(MySQLStatementParserADMIN-49))|(1<<(MySQLStatementParserAFTER-49))|(1<<(MySQLStatementParserAGAINST-49)))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(MySQLStatementParserAGGREGATE-81))|(1<<(MySQLStatementParserALGORITHM-81))|(1<<(MySQLStatementParserALWAYS-81))|(1<<(MySQLStatementParserANY-81))|(1<<(MySQLStatementParserARRAY-81))|(1<<(MySQLStatementParserASCII-81))|(1<<(MySQLStatementParserAT-81))|(1<<(MySQLStatementParserATTRIBUTE-81))|(1<<(MySQLStatementParserAUTOEXTEND_SIZE-81))|(1<<(MySQLStatementParserAUTO_INCREMENT-81))|(1<<(MySQLStatementParserAVG-81))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-81))|(1<<(MySQLStatementParserBACKUP-81))|(1<<(MySQLStatementParserBEGIN-81))|(1<<(MySQLStatementParserBINLOG-81))|(1<<(MySQLStatementParserBIT-81))|(1<<(MySQLStatementParserBLOCK-81))|(1<<(MySQLStatementParserBOOL-81))|(1<<(MySQLStatementParserBOOLEAN-81)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(MySQLStatementParserBTREE-114))|(1<<(MySQLStatementParserBUCKETS-114))|(1<<(MySQLStatementParserBYTE-114))|(1<<(MySQLStatementParserCACHE-114))|(1<<(MySQLStatementParserCASCADED-114))|(1<<(MySQLStatementParserCATALOG_NAME-114))|(1<<(MySQLStatementParserCHAIN-114))|(1<<(MySQLStatementParserCHANGED-114))|(1<<(MySQLStatementParserCHANNEL-114))|(1<<(MySQLStatementParserCHARSET-114))|(1<<(MySQLStatementParserCHECKSUM-114))|(1<<(MySQLStatementParserCIPHER-114))|(1<<(MySQLStatementParserCLASS_ORIGIN-114))|(1<<(MySQLStatementParserCLIENT-114))|(1<<(MySQLStatementParserCLONE-114))|(1<<(MySQLStatementParserCLOSE-114))|(1<<(MySQLStatementParserCOALESCE-114))|(1<<(MySQLStatementParserCODE-114))|(1<<(MySQLStatementParserCOLLATION-114))|(1<<(MySQLStatementParserCOLUMNS-114))|(1<<(MySQLStatementParserCOLUMN_FORMAT-114))|(1<<(MySQLStatementParserCOLUMN_NAME-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(MySQLStatementParserCOMMENT-146))|(1<<(MySQLStatementParserCOMMIT-146))|(1<<(MySQLStatementParserCOMMITTED-146))|(1<<(MySQLStatementParserCOMPACT-146))|(1<<(MySQLStatementParserCOMPLETION-146))|(1<<(MySQLStatementParserCOMPONENT-146))|(1<<(MySQLStatementParserCOMPRESSED-146))|(1<<(MySQLStatementParserCOMPRESSION-146))|(1<<(MySQLStatementParserCONCURRENT-146))|(1<<(MySQLStatementParserCONNECTION-146))|(1<<(MySQLStatementParserCONSISTENT-146))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-146))|(1<<(MySQLStatementParserCONSTRAINT_NAME-146))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-146))|(1<<(MySQLStatementParserCONTAINS-146))|(1<<(MySQLStatementParserCONTEXT-146))|(1<<(MySQLStatementParserCPU-146))|(1<<(MySQLStatementParserCURRENT-146))|(1<<(MySQLStatementParserCURSOR_NAME-146)))) != 0) || (((_la-178)&-(0x1f+1)) == 0 && ((1<<uint((_la-178)))&((1<<(MySQLStatementParserDATA-178))|(1<<(MySQLStatementParserDATAFILE-178))|(1<<(MySQLStatementParserDATE-178))|(1<<(MySQLStatementParserDATETIME-178))|(1<<(MySQLStatementParserDAY-178))|(1<<(MySQLStatementParserDEALLOCATE-178))|(1<<(MySQLStatementParserDEFAULT_AUTH-178))|(1<<(MySQLStatementParserDEFINER-178))|(1<<(MySQLStatementParserDEFINITION-178))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-178))|(1<<(MySQLStatementParserDESCRIPTION-178))|(1<<(MySQLStatementParserDIAGNOSTICS-178))|(1<<(MySQLStatementParserDIRECTORY-178))|(1<<(MySQLStatementParserDISABLE-178))|(1<<(MySQLStatementParserDISCARD-178))|(1<<(MySQLStatementParserDISK-178)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(MySQLStatementParserDO-213))|(1<<(MySQLStatementParserDUMPFILE-213))|(1<<(MySQLStatementParserDUPLICATE-213))|(1<<(MySQLStatementParserDYNAMIC-213))|(1<<(MySQLStatementParserENABLE-213))|(1<<(MySQLStatementParserENCRYPTION-213))|(1<<(MySQLStatementParserEND-213))|(1<<(MySQLStatementParserENDS-213))|(1<<(MySQLStatementParserENFORCED-213))|(1<<(MySQLStatementParserENGINE-213))|(1<<(MySQLStatementParserENGINES-213))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-213))|(1<<(MySQLStatementParserENUM-213))|(1<<(MySQLStatementParserERROR-213))|(1<<(MySQLStatementParserERRORS-213))|(1<<(MySQLStatementParserESCAPE-213))|(1<<(MySQLStatementParserEVENT-213))|(1<<(MySQLStatementParserEVENTS-213))|(1<<(MySQLStatementParserEVERY-213))|(1<<(MySQLStatementParserEXCHANGE-213))|(1<<(MySQLStatementParserEXCLUDE-213))|(1<<(MySQLStatementParserEXECUTE-213)))) != 0) || (((_la-247)&-(0x1f+1)) == 0 && ((1<<uint((_la-247)))&((1<<(MySQLStatementParserEXPANSION-247))|(1<<(MySQLStatementParserEXPIRE-247))|(1<<(MySQLStatementParserEXPORT-247))|(1<<(MySQLStatementParserEXTENDED-247))|(1<<(MySQLStatementParserEXTENT_SIZE-247))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-247))|(1<<(MySQLStatementParserFAST-247))|(1<<(MySQLStatementParserFAULTS-247))|(1<<(MySQLStatementParserFILE-247))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-247))|(1<<(MySQLStatementParserFILTER-247))|(1<<(MySQLStatementParserFIRST-247))|(1<<(MySQLStatementParserFIXED-247))|(1<<(MySQLStatementParserFLUSH-247))|(1<<(MySQLStatementParserFOLLOWING-247))|(1<<(MySQLStatementParserFOLLOWS-247))|(1<<(MySQLStatementParserFORMAT-247))|(1<<(MySQLStatementParserFOUND-247))|(1<<(MySQLStatementParserFULL-247)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(MySQLStatementParserGENERAL-279))|(1<<(MySQLStatementParserGEOMETRY-279))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-279))|(1<<(MySQLStatementParserGET_FORMAT-279))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-279))|(1<<(MySQLStatementParserGLOBAL-279))|(1<<(MySQLStatementParserGRANTS-279))|(1<<(MySQLStatementParserGROUP_REPLICATION-279))|(1<<(MySQLStatementParserHANDLER-279))|(1<<(MySQLStatementParserHASH-279))|(1<<(MySQLStatementParserHELP-279))|(1<<(MySQLStatementParserHISTOGRAM-279))|(1<<(MySQLStatementParserHISTORY-279))|(1<<(MySQLStatementParserHOST-279))|(1<<(MySQLStatementParserHOSTS-279))|(1<<(MySQLStatementParserHOUR-279))|(1<<(MySQLStatementParserIDENTIFIED-279))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-279))|(1<<(MySQLStatementParserIMPORT-279)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySQLStatementParserINACTIVE-312))|(1<<(MySQLStatementParserINDEXES-312))|(1<<(MySQLStatementParserINITIAL_SIZE-312))|(1<<(MySQLStatementParserINSERT_METHOD-312))|(1<<(MySQLStatementParserINSTALL-312))|(1<<(MySQLStatementParserINSTANCE-312))|(1<<(MySQLStatementParserINVISIBLE-312))|(1<<(MySQLStatementParserINVOKER-312))|(1<<(MySQLStatementParserIO-312))|(1<<(MySQLStatementParserIPC-312))|(1<<(MySQLStatementParserISOLATION-312))|(1<<(MySQLStatementParserISSUER-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySQLStatementParserJSON-344))|(1<<(MySQLStatementParserJSON_VALUE-344))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-344))|(1<<(MySQLStatementParserLANGUAGE-344))|(1<<(MySQLStatementParserLAST-344))|(1<<(MySQLStatementParserLAST_VALUE-344))|(1<<(MySQLStatementParserLEAVES-344))|(1<<(MySQLStatementParserLESS-344))|(1<<(MySQLStatementParserLEVEL-344))|(1<<(MySQLStatementParserLINESTRING-344))|(1<<(MySQLStatementParserLIST-344))|(1<<(MySQLStatementParserLOCAL-344))|(1<<(MySQLStatementParserLOCKED-344))|(1<<(MySQLStatementParserLOCKS-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySQLStatementParserLOGFILE-376))|(1<<(MySQLStatementParserLOGS-376))|(1<<(MySQLStatementParserMASTER-376))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-376))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-376))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-376))|(1<<(MySQLStatementParserMASTER_DELAY-376))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-376))|(1<<(MySQLStatementParserMASTER_HOST-376))|(1<<(MySQLStatementParserMASTER_LOG_FILE-376))|(1<<(MySQLStatementParserMASTER_LOG_POS-376))|(1<<(MySQLStatementParserMASTER_PASSWORD-376))|(1<<(MySQLStatementParserMASTER_PORT-376))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-376))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-376))|(1<<(MySQLStatementParserMASTER_SERVER_ID-376))|(1<<(MySQLStatementParserMASTER_SSL-376))|(1<<(MySQLStatementParserMASTER_SSL_CA-376))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_CERT-376))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-376))|(1<<(MySQLStatementParserMASTER_SSL_CRL-376))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_KEY-376))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySQLStatementParserMASTER_TLS_VERSION-408))|(1<<(MySQLStatementParserMASTER_USER-408))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-408))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_ROWS-408))|(1<<(MySQLStatementParserMAX_SIZE-408))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-408))|(1<<(MySQLStatementParserMEDIUM-408))|(1<<(MySQLStatementParserMEMBER-408))|(1<<(MySQLStatementParserMEMORY-408))|(1<<(MySQLStatementParserMERGE-408))|(1<<(MySQLStatementParserMESSAGE_TEXT-408))|(1<<(MySQLStatementParserMICROSECOND-408))|(1<<(MySQLStatementParserMIGRATE-408))|(1<<(MySQLStatementParserMINUTE-408))|(1<<(MySQLStatementParserMIN_ROWS-408))|(1<<(MySQLStatementParserMODE-408))|(1<<(MySQLStatementParserMODIFY-408))|(1<<(MySQLStatementParserMONTH-408))|(1<<(MySQLStatementParserMULTILINESTRING-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySQLStatementParserMULTIPOINT-440))|(1<<(MySQLStatementParserMULTIPOLYGON-440))|(1<<(MySQLStatementParserMUTEX-440))|(1<<(MySQLStatementParserMYSQL_ERRNO-440))|(1<<(MySQLStatementParserNAME-440))|(1<<(MySQLStatementParserNAMES-440))|(1<<(MySQLStatementParserNATIONAL-440))|(1<<(MySQLStatementParserNCHAR-440))|(1<<(MySQLStatementParserNDBCLUSTER-440))|(1<<(MySQLStatementParserNESTED-440))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-440))|(1<<(MySQLStatementParserNEVER-440))|(1<<(MySQLStatementParserNEW-440))|(1<<(MySQLStatementParserNEXT-440))|(1<<(MySQLStatementParserNO-440))|(1<<(MySQLStatementParserNODEGROUP-440))|(1<<(MySQLStatementParserNONE-440))|(1<<(MySQLStatementParserNOWAIT-440))|(1<<(MySQLStatementParserNO_WAIT-440))|(1<<(MySQLStatementParserNULLS-440))|(1<<(MySQLStatementParserNUMBER-440))|(1<<(MySQLStatementParserNVARCHAR-440))|(1<<(MySQLStatementParserOFF-440))|(1<<(MySQLStatementParserOFFSET-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySQLStatementParserOJ-472))|(1<<(MySQLStatementParserOLD-472))|(1<<(MySQLStatementParserONE-472))|(1<<(MySQLStatementParserONLY-472))|(1<<(MySQLStatementParserOPEN-472))|(1<<(MySQLStatementParserOPTIONAL-472))|(1<<(MySQLStatementParserOPTIONS-472))|(1<<(MySQLStatementParserORDINALITY-472))|(1<<(MySQLStatementParserORGANIZATION-472))|(1<<(MySQLStatementParserOTHERS-472))|(1<<(MySQLStatementParserOWNER-472))|(1<<(MySQLStatementParserPACK_KEYS-472))|(1<<(MySQLStatementParserPAGE-472))|(1<<(MySQLStatementParserPARSER-472))|(1<<(MySQLStatementParserPARTIAL-472))|(1<<(MySQLStatementParserPARTITIONING-472))|(1<<(MySQLStatementParserPARTITIONS-472))|(1<<(MySQLStatementParserPASSWORD-472))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-472))|(1<<(MySQLStatementParserPATH-472)))) != 0) || (((_la-505)&-(0x1f+1)) == 0 && ((1<<uint((_la-505)))&((1<<(MySQLStatementParserPERSIST-505))|(1<<(MySQLStatementParserPERSIST_ONLY-505))|(1<<(MySQLStatementParserPHASE-505))|(1<<(MySQLStatementParserPLUGIN-505))|(1<<(MySQLStatementParserPLUGINS-505))|(1<<(MySQLStatementParserPLUGIN_DIR-505))|(1<<(MySQLStatementParserPOINT-505))|(1<<(MySQLStatementParserPOLYGON-505))|(1<<(MySQLStatementParserPORT-505))|(1<<(MySQLStatementParserPRECEDES-505))|(1<<(MySQLStatementParserPRECEDING-505))|(1<<(MySQLStatementParserPREPARE-505))|(1<<(MySQLStatementParserPRESERVE-505))|(1<<(MySQLStatementParserPREV-505))|(1<<(MySQLStatementParserPRIVILEGES-505))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-505))|(1<<(MySQLStatementParserPROCESS-505))|(1<<(MySQLStatementParserPROCESSLIST-505))|(1<<(MySQLStatementParserPROFILE-505))|(1<<(MySQLStatementParserPROFILES-505))|(1<<(MySQLStatementParserPROXY-505))|(1<<(MySQLStatementParserQUARTER-505))|(1<<(MySQLStatementParserQUERY-505))|(1<<(MySQLStatementParserQUICK-505))|(1<<(MySQLStatementParserRANDOM-505)))) != 0) || (((_la-538)&-(0x1f+1)) == 0 && ((1<<uint((_la-538)))&((1<<(MySQLStatementParserREAD_ONLY-538))|(1<<(MySQLStatementParserREBUILD-538))|(1<<(MySQLStatementParserRECOVER-538))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-538))|(1<<(MySQLStatementParserREDUNDANT-538))|(1<<(MySQLStatementParserREFERENCE-538))|(1<<(MySQLStatementParserRELAY-538))|(1<<(MySQLStatementParserRELAYLOG-538))|(1<<(MySQLStatementParserRELAY_LOG_FILE-538))|(1<<(MySQLStatementParserRELAY_LOG_POS-538))|(1<<(MySQLStatementParserRELAY_THREAD-538))|(1<<(MySQLStatementParserRELOAD-538))|(1<<(MySQLStatementParserREMOVE-538))|(1<<(MySQLStatementParserREORGANIZE-538))|(1<<(MySQLStatementParserREPAIR-538))|(1<<(MySQLStatementParserREPEATABLE-538))|(1<<(MySQLStatementParserREPLICATE_DO_DB-538))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-538)))) != 0) || (((_la-570)&-(0x1f+1)) == 0 && ((1<<uint((_la-570)))&((1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-570))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-570))|(1<<(MySQLStatementParserREPLICATION-570))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-570))|(1<<(MySQLStatementParserRESET-570))|(1<<(MySQLStatementParserRESOURCE-570))|(1<<(MySQLStatementParserRESPECT-570))|(1<<(MySQLStatementParserRESTART-570))|(1<<(MySQLStatementParserRESTORE-570))|(1<<(MySQLStatementParserRESUME-570))|(1<<(MySQLStatementParserRETAIN-570))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-570))|(1<<(MySQLStatementParserRETURNING-570))|(1<<(MySQLStatementParserRETURNS-570))|(1<<(MySQLStatementParserREUSE-570))|(1<<(MySQLStatementParserREVERSE-570))|(1<<(MySQLStatementParserROLE-570))|(1<<(MySQLStatementParserROLLBACK-570))|(1<<(MySQLStatementParserROLLUP-570))|(1<<(MySQLStatementParserROTATE-570))|(1<<(MySQLStatementParserROUTINE-570))|(1<<(MySQLStatementParserROW_COUNT-570))|(1<<(MySQLStatementParserROW_FORMAT-570)))) != 0) || (((_la-603)&-(0x1f+1)) == 0 && ((1<<uint((_la-603)))&((1<<(MySQLStatementParserRTREE-603))|(1<<(MySQLStatementParserSAVEPOINT-603))|(1<<(MySQLStatementParserSCHEDULE-603))|(1<<(MySQLStatementParserSCHEMA_NAME-603))|(1<<(MySQLStatementParserSECOND-603))|(1<<(MySQLStatementParserSECONDARY-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-603))|(1<<(MySQLStatementParserSECONDARY_LOAD-603))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-603))|(1<<(MySQLStatementParserSECURITY-603))|(1<<(MySQLStatementParserSERIAL-603))|(1<<(MySQLStatementParserSERIALIZABLE-603))|(1<<(MySQLStatementParserSERVER-603))|(1<<(MySQLStatementParserSESSION-603))|(1<<(MySQLStatementParserSHARE-603))|(1<<(MySQLStatementParserSHUTDOWN-603))|(1<<(MySQLStatementParserSIGNED-603))|(1<<(MySQLStatementParserSIMPLE-603))|(1<<(MySQLStatementParserSLAVE-603))|(1<<(MySQLStatementParserSLOW-603)))) != 0) || (((_la-635)&-(0x1f+1)) == 0 && ((1<<uint((_la-635)))&((1<<(MySQLStatementParserSNAPSHOT-635))|(1<<(MySQLStatementParserSOCKET-635))|(1<<(MySQLStatementParserSONAME-635))|(1<<(MySQLStatementParserSOUNDS-635))|(1<<(MySQLStatementParserSOURCE-635))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-635))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-635))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-635))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-635))|(1<<(MySQLStatementParserSQL_NO_CACHE-635))|(1<<(MySQLStatementParserSQL_THREAD-635))|(1<<(MySQLStatementParserSRID-635))|(1<<(MySQLStatementParserSTACKED-635))|(1<<(MySQLStatementParserSTART-635))|(1<<(MySQLStatementParserSTARTS-635))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-635))|(1<<(MySQLStatementParserSTATS_PERSISTENT-635))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-635))|(1<<(MySQLStatementParserSTATUS-635))|(1<<(MySQLStatementParserSTOP-635))|(1<<(MySQLStatementParserSTORAGE-635)))) != 0) || (((_la-669)&-(0x1f+1)) == 0 && ((1<<uint((_la-669)))&((1<<(MySQLStatementParserSTREAM-669))|(1<<(MySQLStatementParserSTRING-669))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-669))|(1<<(MySQLStatementParserSUBJECT-669))|(1<<(MySQLStatementParserSUBPARTITION-669))|(1<<(MySQLStatementParserSUBPARTITIONS-669))|(1<<(MySQLStatementParserSUPER-669))|(1<<(MySQLStatementParserSUSPEND-669))|(1<<(MySQLStatementParserSWAPS-669))|(1<<(MySQLStatementParserSWITCHES-669))|(1<<(MySQLStatementParserTABLES-669))|(1<<(MySQLStatementParserTABLESPACE-669))|(1<<(MySQLStatementParserTABLE_CHECKSUM-669))|(1<<(MySQLStatementParserTABLE_NAME-669))|(1<<(MySQLStatementParserTEMPORARY-669))|(1<<(MySQLStatementParserTEMPTABLE-669))|(1<<(MySQLStatementParserTEXT-669))|(1<<(MySQLStatementParserTHAN-669))|(1<<(MySQLStatementParserTHREAD_PRIORITY-669))|(1<<(MySQLStatementParserTIES-669))|(1<<(MySQLStatementParserTIME-669))|(1<<(MySQLStatementParserTIMESTAMP-669))|(1<<(MySQLStatementParserTIMESTAMP_ADD-669))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-669))|(1<<(MySQLStatementParserTLS-669)))) != 0) || (((_la-703)&-(0x1f+1)) == 0 && ((1<<uint((_la-703)))&((1<<(MySQLStatementParserTRANSACTION-703))|(1<<(MySQLStatementParserTRIGGERS-703))|(1<<(MySQLStatementParserTRUNCATE-703))|(1<<(MySQLStatementParserTYPE-703))|(1<<(MySQLStatementParserTYPES-703))|(1<<(MySQLStatementParserUNBOUNDED-703))|(1<<(MySQLStatementParserUNCOMMITTED-703))|(1<<(MySQLStatementParserUNDEFINED-703))|(1<<(MySQLStatementParserUNDOFILE-703))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-703))|(1<<(MySQLStatementParserUNICODE-703))|(1<<(MySQLStatementParserUNINSTALL-703))|(1<<(MySQLStatementParserUNKNOWN-703))|(1<<(MySQLStatementParserUNTIL-703))|(1<<(MySQLStatementParserUPGRADE-703))|(1<<(MySQLStatementParserUSER-703))|(1<<(MySQLStatementParserUSER_RESOURCES-703))|(1<<(MySQLStatementParserUSE_FRM-703)))) != 0) || (((_la-735)&-(0x1f+1)) == 0 && ((1<<uint((_la-735)))&((1<<(MySQLStatementParserVALIDATION-735))|(1<<(MySQLStatementParserVALUE-735))|(1<<(MySQLStatementParserVARIABLES-735))|(1<<(MySQLStatementParserVCPU-735))|(1<<(MySQLStatementParserVIEW-735))|(1<<(MySQLStatementParserVISIBLE-735))|(1<<(MySQLStatementParserWAIT-735))|(1<<(MySQLStatementParserWARNINGS-735))|(1<<(MySQLStatementParserWEEK-735))|(1<<(MySQLStatementParserWEIGHT_STRING-735))|(1<<(MySQLStatementParserWITHOUT-735))|(1<<(MySQLStatementParserWORK-735))|(1<<(MySQLStatementParserWRAPPER-735))|(1<<(MySQLStatementParserX509-735))|(1<<(MySQLStatementParserXA-735))|(1<<(MySQLStatementParserXID-735))|(1<<(MySQLStatementParserXML-735))|(1<<(MySQLStatementParserYEAR-735)))) != 0) || _la == MySQLStatementParserIDENTIFIER_ || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
			{
				p.SetState(3713)
				p.ColumnNames()
			}

		}
		{
			p.SetState(3716)
			p.Match(MySQLStatementParserRP_)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(3718)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserLINEAR {
			{
				p.SetState(3717)
				p.Match(MySQLStatementParserLINEAR)
			}

		}
		{
			p.SetState(3720)
			p.Match(MySQLStatementParserHASH)
		}
		{
			p.SetState(3721)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(3722)
			p.bitExpr(0)
		}
		{
			p.SetState(3723)
			p.Match(MySQLStatementParserRP_)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3725)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserLIST || _la == MySQLStatementParserRANGE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(3735)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySQLStatementParserLP_:
			{
				p.SetState(3726)
				p.Match(MySQLStatementParserLP_)
			}
			{
				p.SetState(3727)
				p.bitExpr(0)
			}
			{
				p.SetState(3728)
				p.Match(MySQLStatementParserRP_)
			}

		case MySQLStatementParserCOLUMNS:
			{
				p.SetState(3730)
				p.Match(MySQLStatementParserCOLUMNS)
			}
			{
				p.SetState(3731)
				p.Match(MySQLStatementParserLP_)
			}
			{
				p.SetState(3732)
				p.ColumnNames()
			}
			{
				p.SetState(3733)
				p.Match(MySQLStatementParserRP_)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}

	return localctx
}

// ISubPartitionsContext is an interface to support dynamic dispatch.
type ISubPartitionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubPartitionsContext differentiates from other interfaces.
	IsSubPartitionsContext()
}

type SubPartitionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubPartitionsContext() *SubPartitionsContext {
	var p = new(SubPartitionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_subPartitions
	return p
}

func (*SubPartitionsContext) IsSubPartitionsContext() {}

func NewSubPartitionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubPartitionsContext {
	var p = new(SubPartitionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_subPartitions

	return p
}

func (s *SubPartitionsContext) GetParser() antlr.Parser { return s.parser }

func (s *SubPartitionsContext) SUBPARTITION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSUBPARTITION, 0)
}

func (s *SubPartitionsContext) BY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBY, 0)
}

func (s *SubPartitionsContext) HASH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHASH, 0)
}

func (s *SubPartitionsContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *SubPartitionsContext) BitExpr() IBitExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitExprContext)
}

func (s *SubPartitionsContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *SubPartitionsContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserKEY, 0)
}

func (s *SubPartitionsContext) ColumnNames() IColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNamesContext)
}

func (s *SubPartitionsContext) LINEAR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLINEAR, 0)
}

func (s *SubPartitionsContext) SUBPARTITIONS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSUBPARTITIONS, 0)
}

func (s *SubPartitionsContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *SubPartitionsContext) PartitionKeyAlgorithm() IPartitionKeyAlgorithmContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionKeyAlgorithmContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionKeyAlgorithmContext)
}

func (s *SubPartitionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubPartitionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubPartitionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSubPartitions(s)
	}
}

func (s *SubPartitionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSubPartitions(s)
	}
}

func (s *SubPartitionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSubPartitions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SubPartitions() (localctx ISubPartitionsContext) {
	this := p
	_ = this

	localctx = NewSubPartitionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 526, MySQLStatementParserRULE_subPartitions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3739)
		p.Match(MySQLStatementParserSUBPARTITION)
	}
	{
		p.SetState(3740)
		p.Match(MySQLStatementParserBY)
	}
	p.SetState(3742)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLINEAR {
		{
			p.SetState(3741)
			p.Match(MySQLStatementParserLINEAR)
		}

	}
	p.SetState(3757)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserHASH:
		{
			p.SetState(3744)
			p.Match(MySQLStatementParserHASH)
		}
		{
			p.SetState(3745)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(3746)
			p.bitExpr(0)
		}
		{
			p.SetState(3747)
			p.Match(MySQLStatementParserRP_)
		}

	case MySQLStatementParserKEY:
		{
			p.SetState(3749)
			p.Match(MySQLStatementParserKEY)
		}
		p.SetState(3751)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserALGORITHM {
			{
				p.SetState(3750)
				p.PartitionKeyAlgorithm()
			}

		}
		{
			p.SetState(3753)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(3754)
			p.ColumnNames()
		}
		{
			p.SetState(3755)
			p.Match(MySQLStatementParserRP_)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(3761)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 398, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3759)
			p.Match(MySQLStatementParserSUBPARTITIONS)
		}
		{
			p.SetState(3760)
			p.Match(MySQLStatementParserNUMBER_)
		}

	}

	return localctx
}

// IPartitionKeyAlgorithmContext is an interface to support dynamic dispatch.
type IPartitionKeyAlgorithmContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitionKeyAlgorithmContext differentiates from other interfaces.
	IsPartitionKeyAlgorithmContext()
}

type PartitionKeyAlgorithmContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionKeyAlgorithmContext() *PartitionKeyAlgorithmContext {
	var p = new(PartitionKeyAlgorithmContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_partitionKeyAlgorithm
	return p
}

func (*PartitionKeyAlgorithmContext) IsPartitionKeyAlgorithmContext() {}

func NewPartitionKeyAlgorithmContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionKeyAlgorithmContext {
	var p = new(PartitionKeyAlgorithmContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_partitionKeyAlgorithm

	return p
}

func (s *PartitionKeyAlgorithmContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionKeyAlgorithmContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALGORITHM, 0)
}

func (s *PartitionKeyAlgorithmContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *PartitionKeyAlgorithmContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *PartitionKeyAlgorithmContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionKeyAlgorithmContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartitionKeyAlgorithmContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterPartitionKeyAlgorithm(s)
	}
}

func (s *PartitionKeyAlgorithmContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitPartitionKeyAlgorithm(s)
	}
}

func (s *PartitionKeyAlgorithmContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitPartitionKeyAlgorithm(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) PartitionKeyAlgorithm() (localctx IPartitionKeyAlgorithmContext) {
	this := p
	_ = this

	localctx = NewPartitionKeyAlgorithmContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 528, MySQLStatementParserRULE_partitionKeyAlgorithm)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3763)
		p.Match(MySQLStatementParserALGORITHM)
	}
	{
		p.SetState(3764)
		p.Match(MySQLStatementParserEQ_)
	}
	{
		p.SetState(3765)
		p.Match(MySQLStatementParserNUMBER_)
	}

	return localctx
}

// IDuplicateAsQueryExpressionContext is an interface to support dynamic dispatch.
type IDuplicateAsQueryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDuplicateAsQueryExpressionContext differentiates from other interfaces.
	IsDuplicateAsQueryExpressionContext()
}

type DuplicateAsQueryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDuplicateAsQueryExpressionContext() *DuplicateAsQueryExpressionContext {
	var p = new(DuplicateAsQueryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_duplicateAsQueryExpression
	return p
}

func (*DuplicateAsQueryExpressionContext) IsDuplicateAsQueryExpressionContext() {}

func NewDuplicateAsQueryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DuplicateAsQueryExpressionContext {
	var p = new(DuplicateAsQueryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_duplicateAsQueryExpression

	return p
}

func (s *DuplicateAsQueryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *DuplicateAsQueryExpressionContext) Select() ISelectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectContext)
}

func (s *DuplicateAsQueryExpressionContext) AS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAS, 0)
}

func (s *DuplicateAsQueryExpressionContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *DuplicateAsQueryExpressionContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *DuplicateAsQueryExpressionContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLACE, 0)
}

func (s *DuplicateAsQueryExpressionContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIGNORE, 0)
}

func (s *DuplicateAsQueryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DuplicateAsQueryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DuplicateAsQueryExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDuplicateAsQueryExpression(s)
	}
}

func (s *DuplicateAsQueryExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDuplicateAsQueryExpression(s)
	}
}

func (s *DuplicateAsQueryExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDuplicateAsQueryExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DuplicateAsQueryExpression() (localctx IDuplicateAsQueryExpressionContext) {
	this := p
	_ = this

	localctx = NewDuplicateAsQueryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 530, MySQLStatementParserRULE_duplicateAsQueryExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3768)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIGNORE || _la == MySQLStatementParserREPLACE {
		{
			p.SetState(3767)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserIGNORE || _la == MySQLStatementParserREPLACE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(3771)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserAS {
		{
			p.SetState(3770)
			p.Match(MySQLStatementParserAS)
		}

	}
	p.SetState(3774)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 401, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3773)
			p.Match(MySQLStatementParserLP_)
		}

	}
	{
		p.SetState(3776)
		p.Select()
	}
	p.SetState(3778)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserRP_ {
		{
			p.SetState(3777)
			p.Match(MySQLStatementParserRP_)
		}

	}

	return localctx
}

// IAlterTableContext is an interface to support dynamic dispatch.
type IAlterTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterTableContext differentiates from other interfaces.
	IsAlterTableContext()
}

type AlterTableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterTableContext() *AlterTableContext {
	var p = new(AlterTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterTable
	return p
}

func (*AlterTableContext) IsAlterTableContext() {}

func NewAlterTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterTableContext {
	var p = new(AlterTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterTable

	return p
}

func (s *AlterTableContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterTableContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALTER, 0)
}

func (s *AlterTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLE, 0)
}

func (s *AlterTableContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *AlterTableContext) AlterTableActions() IAlterTableActionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterTableActionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterTableActionsContext)
}

func (s *AlterTableContext) StandaloneAlterTableAction() IStandaloneAlterTableActionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStandaloneAlterTableActionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStandaloneAlterTableActionContext)
}

func (s *AlterTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterTable(s)
	}
}

func (s *AlterTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterTable(s)
	}
}

func (s *AlterTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterTable() (localctx IAlterTableContext) {
	this := p
	_ = this

	localctx = NewAlterTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 532, MySQLStatementParserRULE_alterTable)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3791)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 404, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3780)
			p.Match(MySQLStatementParserALTER)
		}
		{
			p.SetState(3781)
			p.Match(MySQLStatementParserTABLE)
		}
		{
			p.SetState(3782)
			p.TableName()
		}
		p.SetState(3784)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 403, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3783)
				p.AlterTableActions()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3786)
			p.Match(MySQLStatementParserALTER)
		}
		{
			p.SetState(3787)
			p.Match(MySQLStatementParserTABLE)
		}
		{
			p.SetState(3788)
			p.TableName()
		}
		{
			p.SetState(3789)
			p.StandaloneAlterTableAction()
		}

	}

	return localctx
}

// IStandaloneAlterTableActionContext is an interface to support dynamic dispatch.
type IStandaloneAlterTableActionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStandaloneAlterTableActionContext differentiates from other interfaces.
	IsStandaloneAlterTableActionContext()
}

type StandaloneAlterTableActionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStandaloneAlterTableActionContext() *StandaloneAlterTableActionContext {
	var p = new(StandaloneAlterTableActionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_standaloneAlterTableAction
	return p
}

func (*StandaloneAlterTableActionContext) IsStandaloneAlterTableActionContext() {}

func NewStandaloneAlterTableActionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StandaloneAlterTableActionContext {
	var p = new(StandaloneAlterTableActionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_standaloneAlterTableAction

	return p
}

func (s *StandaloneAlterTableActionContext) GetParser() antlr.Parser { return s.parser }

func (s *StandaloneAlterTableActionContext) StandaloneAlterCommands() IStandaloneAlterCommandsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStandaloneAlterCommandsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStandaloneAlterCommandsContext)
}

func (s *StandaloneAlterTableActionContext) AlterCommandsModifierList() IAlterCommandsModifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterCommandsModifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterCommandsModifierListContext)
}

func (s *StandaloneAlterTableActionContext) COMMA_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, 0)
}

func (s *StandaloneAlterTableActionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StandaloneAlterTableActionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StandaloneAlterTableActionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStandaloneAlterTableAction(s)
	}
}

func (s *StandaloneAlterTableActionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStandaloneAlterTableAction(s)
	}
}

func (s *StandaloneAlterTableActionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStandaloneAlterTableAction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) StandaloneAlterTableAction() (localctx IStandaloneAlterTableActionContext) {
	this := p
	_ = this

	localctx = NewStandaloneAlterTableActionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 534, MySQLStatementParserRULE_standaloneAlterTableAction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3796)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserALGORITHM || _la == MySQLStatementParserLOCK || _la == MySQLStatementParserWITH || _la == MySQLStatementParserWITHOUT {
		{
			p.SetState(3793)
			p.AlterCommandsModifierList()
		}
		{
			p.SetState(3794)
			p.Match(MySQLStatementParserCOMMA_)
		}

	}
	{
		p.SetState(3798)
		p.StandaloneAlterCommands()
	}

	return localctx
}

// IAlterTableActionsContext is an interface to support dynamic dispatch.
type IAlterTableActionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterTableActionsContext differentiates from other interfaces.
	IsAlterTableActionsContext()
}

type AlterTableActionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterTableActionsContext() *AlterTableActionsContext {
	var p = new(AlterTableActionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterTableActions
	return p
}

func (*AlterTableActionsContext) IsAlterTableActionsContext() {}

func NewAlterTableActionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterTableActionsContext {
	var p = new(AlterTableActionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterTableActions

	return p
}

func (s *AlterTableActionsContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterTableActionsContext) AlterCommandList() IAlterCommandListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterCommandListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterCommandListContext)
}

func (s *AlterTableActionsContext) AlterTablePartitionOptions() IAlterTablePartitionOptionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterTablePartitionOptionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterTablePartitionOptionsContext)
}

func (s *AlterTableActionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableActionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterTableActionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterTableActions(s)
	}
}

func (s *AlterTableActionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterTableActions(s)
	}
}

func (s *AlterTableActionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterTableActions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterTableActions() (localctx IAlterTableActionsContext) {
	this := p
	_ = this

	localctx = NewAlterTableActionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 536, MySQLStatementParserRULE_alterTableActions)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3805)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserADD, MySQLStatementParserALGORITHM, MySQLStatementParserALTER, MySQLStatementParserAUTO_INCREMENT, MySQLStatementParserAVG_ROW_LENGTH, MySQLStatementParserCHANGE, MySQLStatementParserCHAR, MySQLStatementParserCHARACTER, MySQLStatementParserCHARSET, MySQLStatementParserCHECKSUM, MySQLStatementParserCOLLATE, MySQLStatementParserCOMMENT, MySQLStatementParserCOMPRESSION, MySQLStatementParserCONNECTION, MySQLStatementParserCONVERT, MySQLStatementParserDATA, MySQLStatementParserDEFAULT, MySQLStatementParserDELAY_KEY_WRITE, MySQLStatementParserDISABLE, MySQLStatementParserDROP, MySQLStatementParserENABLE, MySQLStatementParserENCRYPTION, MySQLStatementParserENGINE, MySQLStatementParserENGINE_ATTRIBUTE, MySQLStatementParserFORCE, MySQLStatementParserINDEX, MySQLStatementParserINSERT_METHOD, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserLOCK, MySQLStatementParserMAX_ROWS, MySQLStatementParserMIN_ROWS, MySQLStatementParserMODIFY, MySQLStatementParserORDER, MySQLStatementParserPACK_KEYS, MySQLStatementParserPASSWORD, MySQLStatementParserRENAME, MySQLStatementParserROW_FORMAT, MySQLStatementParserSECONDARY_ENGINE, MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, MySQLStatementParserSTATS_AUTO_RECALC, MySQLStatementParserSTATS_PERSISTENT, MySQLStatementParserSTATS_SAMPLE_PAGES, MySQLStatementParserSTORAGE, MySQLStatementParserTABLESPACE, MySQLStatementParserTABLE_CHECKSUM, MySQLStatementParserUNION, MySQLStatementParserWITH, MySQLStatementParserWITHOUT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3800)
			p.AlterCommandList()
		}
		p.SetState(3802)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 406, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3801)
				p.AlterTablePartitionOptions()
			}

		}

	case MySQLStatementParserPARTITION, MySQLStatementParserREMOVE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3804)
			p.AlterTablePartitionOptions()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAlterTablePartitionOptionsContext is an interface to support dynamic dispatch.
type IAlterTablePartitionOptionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterTablePartitionOptionsContext differentiates from other interfaces.
	IsAlterTablePartitionOptionsContext()
}

type AlterTablePartitionOptionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterTablePartitionOptionsContext() *AlterTablePartitionOptionsContext {
	var p = new(AlterTablePartitionOptionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterTablePartitionOptions
	return p
}

func (*AlterTablePartitionOptionsContext) IsAlterTablePartitionOptionsContext() {}

func NewAlterTablePartitionOptionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterTablePartitionOptionsContext {
	var p = new(AlterTablePartitionOptionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterTablePartitionOptions

	return p
}

func (s *AlterTablePartitionOptionsContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterTablePartitionOptionsContext) PartitionClause() IPartitionClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionClauseContext)
}

func (s *AlterTablePartitionOptionsContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREMOVE, 0)
}

func (s *AlterTablePartitionOptionsContext) PARTITIONING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPARTITIONING, 0)
}

func (s *AlterTablePartitionOptionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTablePartitionOptionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterTablePartitionOptionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterTablePartitionOptions(s)
	}
}

func (s *AlterTablePartitionOptionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterTablePartitionOptions(s)
	}
}

func (s *AlterTablePartitionOptionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterTablePartitionOptions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterTablePartitionOptions() (localctx IAlterTablePartitionOptionsContext) {
	this := p
	_ = this

	localctx = NewAlterTablePartitionOptionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 538, MySQLStatementParserRULE_alterTablePartitionOptions)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3810)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserPARTITION:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3807)
			p.PartitionClause()
		}

	case MySQLStatementParserREMOVE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3808)
			p.Match(MySQLStatementParserREMOVE)
		}
		{
			p.SetState(3809)
			p.Match(MySQLStatementParserPARTITIONING)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAlterCommandListContext is an interface to support dynamic dispatch.
type IAlterCommandListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterCommandListContext differentiates from other interfaces.
	IsAlterCommandListContext()
}

type AlterCommandListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterCommandListContext() *AlterCommandListContext {
	var p = new(AlterCommandListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterCommandList
	return p
}

func (*AlterCommandListContext) IsAlterCommandListContext() {}

func NewAlterCommandListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterCommandListContext {
	var p = new(AlterCommandListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterCommandList

	return p
}

func (s *AlterCommandListContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterCommandListContext) AlterCommandsModifierList() IAlterCommandsModifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterCommandsModifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterCommandsModifierListContext)
}

func (s *AlterCommandListContext) AlterList() IAlterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterListContext)
}

func (s *AlterCommandListContext) COMMA_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, 0)
}

func (s *AlterCommandListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterCommandListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterCommandListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterCommandList(s)
	}
}

func (s *AlterCommandListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterCommandList(s)
	}
}

func (s *AlterCommandListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterCommandList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterCommandList() (localctx IAlterCommandListContext) {
	this := p
	_ = this

	localctx = NewAlterCommandListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 540, MySQLStatementParserRULE_alterCommandList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3819)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 410, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3812)
			p.AlterCommandsModifierList()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(3816)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserALGORITHM || _la == MySQLStatementParserLOCK || _la == MySQLStatementParserWITH || _la == MySQLStatementParserWITHOUT {
			{
				p.SetState(3813)
				p.AlterCommandsModifierList()
			}
			{
				p.SetState(3814)
				p.Match(MySQLStatementParserCOMMA_)
			}

		}
		{
			p.SetState(3818)
			p.AlterList()
		}

	}

	return localctx
}

// IAlterListContext is an interface to support dynamic dispatch.
type IAlterListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterListContext differentiates from other interfaces.
	IsAlterListContext()
}

type AlterListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterListContext() *AlterListContext {
	var p = new(AlterListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterList
	return p
}

func (*AlterListContext) IsAlterListContext() {}

func NewAlterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterListContext {
	var p = new(AlterListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterList

	return p
}

func (s *AlterListContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterListContext) AllAlterListItem() []IAlterListItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAlterListItemContext)(nil)).Elem())
	var tst = make([]IAlterListItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAlterListItemContext)
		}
	}

	return tst
}

func (s *AlterListContext) AlterListItem(i int) IAlterListItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterListItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAlterListItemContext)
}

func (s *AlterListContext) AllCreateTableOptionsSpaceSeparated() []ICreateTableOptionsSpaceSeparatedContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICreateTableOptionsSpaceSeparatedContext)(nil)).Elem())
	var tst = make([]ICreateTableOptionsSpaceSeparatedContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICreateTableOptionsSpaceSeparatedContext)
		}
	}

	return tst
}

func (s *AlterListContext) CreateTableOptionsSpaceSeparated(i int) ICreateTableOptionsSpaceSeparatedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateTableOptionsSpaceSeparatedContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICreateTableOptionsSpaceSeparatedContext)
}

func (s *AlterListContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *AlterListContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *AlterListContext) AllAlterCommandsModifier() []IAlterCommandsModifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAlterCommandsModifierContext)(nil)).Elem())
	var tst = make([]IAlterCommandsModifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAlterCommandsModifierContext)
		}
	}

	return tst
}

func (s *AlterListContext) AlterCommandsModifier(i int) IAlterCommandsModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterCommandsModifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAlterCommandsModifierContext)
}

func (s *AlterListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterList(s)
	}
}

func (s *AlterListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterList(s)
	}
}

func (s *AlterListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterList() (localctx IAlterListContext) {
	this := p
	_ = this

	localctx = NewAlterListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 542, MySQLStatementParserRULE_alterList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3823)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserADD, MySQLStatementParserALTER, MySQLStatementParserCHANGE, MySQLStatementParserCONVERT, MySQLStatementParserDISABLE, MySQLStatementParserDROP, MySQLStatementParserENABLE, MySQLStatementParserFORCE, MySQLStatementParserMODIFY, MySQLStatementParserORDER, MySQLStatementParserRENAME:
		{
			p.SetState(3821)
			p.AlterListItem()
		}

	case MySQLStatementParserAUTO_INCREMENT, MySQLStatementParserAVG_ROW_LENGTH, MySQLStatementParserCHAR, MySQLStatementParserCHARACTER, MySQLStatementParserCHARSET, MySQLStatementParserCHECKSUM, MySQLStatementParserCOLLATE, MySQLStatementParserCOMMENT, MySQLStatementParserCOMPRESSION, MySQLStatementParserCONNECTION, MySQLStatementParserDATA, MySQLStatementParserDEFAULT, MySQLStatementParserDELAY_KEY_WRITE, MySQLStatementParserENCRYPTION, MySQLStatementParserENGINE, MySQLStatementParserENGINE_ATTRIBUTE, MySQLStatementParserINDEX, MySQLStatementParserINSERT_METHOD, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserMAX_ROWS, MySQLStatementParserMIN_ROWS, MySQLStatementParserPACK_KEYS, MySQLStatementParserPASSWORD, MySQLStatementParserROW_FORMAT, MySQLStatementParserSECONDARY_ENGINE, MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, MySQLStatementParserSTATS_AUTO_RECALC, MySQLStatementParserSTATS_PERSISTENT, MySQLStatementParserSTATS_SAMPLE_PAGES, MySQLStatementParserSTORAGE, MySQLStatementParserTABLESPACE, MySQLStatementParserTABLE_CHECKSUM, MySQLStatementParserUNION:
		{
			p.SetState(3822)
			p.CreateTableOptionsSpaceSeparated()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(3833)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(3825)
			p.Match(MySQLStatementParserCOMMA_)
		}
		p.SetState(3829)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySQLStatementParserADD, MySQLStatementParserALTER, MySQLStatementParserCHANGE, MySQLStatementParserCONVERT, MySQLStatementParserDISABLE, MySQLStatementParserDROP, MySQLStatementParserENABLE, MySQLStatementParserFORCE, MySQLStatementParserMODIFY, MySQLStatementParserORDER, MySQLStatementParserRENAME:
			{
				p.SetState(3826)
				p.AlterListItem()
			}

		case MySQLStatementParserALGORITHM, MySQLStatementParserLOCK, MySQLStatementParserWITH, MySQLStatementParserWITHOUT:
			{
				p.SetState(3827)
				p.AlterCommandsModifier()
			}

		case MySQLStatementParserAUTO_INCREMENT, MySQLStatementParserAVG_ROW_LENGTH, MySQLStatementParserCHAR, MySQLStatementParserCHARACTER, MySQLStatementParserCHARSET, MySQLStatementParserCHECKSUM, MySQLStatementParserCOLLATE, MySQLStatementParserCOMMENT, MySQLStatementParserCOMPRESSION, MySQLStatementParserCONNECTION, MySQLStatementParserDATA, MySQLStatementParserDEFAULT, MySQLStatementParserDELAY_KEY_WRITE, MySQLStatementParserENCRYPTION, MySQLStatementParserENGINE, MySQLStatementParserENGINE_ATTRIBUTE, MySQLStatementParserINDEX, MySQLStatementParserINSERT_METHOD, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserMAX_ROWS, MySQLStatementParserMIN_ROWS, MySQLStatementParserPACK_KEYS, MySQLStatementParserPASSWORD, MySQLStatementParserROW_FORMAT, MySQLStatementParserSECONDARY_ENGINE, MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, MySQLStatementParserSTATS_AUTO_RECALC, MySQLStatementParserSTATS_PERSISTENT, MySQLStatementParserSTATS_SAMPLE_PAGES, MySQLStatementParserSTORAGE, MySQLStatementParserTABLESPACE, MySQLStatementParserTABLE_CHECKSUM, MySQLStatementParserUNION:
			{
				p.SetState(3828)
				p.CreateTableOptionsSpaceSeparated()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(3835)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICreateTableOptionsSpaceSeparatedContext is an interface to support dynamic dispatch.
type ICreateTableOptionsSpaceSeparatedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateTableOptionsSpaceSeparatedContext differentiates from other interfaces.
	IsCreateTableOptionsSpaceSeparatedContext()
}

type CreateTableOptionsSpaceSeparatedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateTableOptionsSpaceSeparatedContext() *CreateTableOptionsSpaceSeparatedContext {
	var p = new(CreateTableOptionsSpaceSeparatedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_createTableOptionsSpaceSeparated
	return p
}

func (*CreateTableOptionsSpaceSeparatedContext) IsCreateTableOptionsSpaceSeparatedContext() {}

func NewCreateTableOptionsSpaceSeparatedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateTableOptionsSpaceSeparatedContext {
	var p = new(CreateTableOptionsSpaceSeparatedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_createTableOptionsSpaceSeparated

	return p
}

func (s *CreateTableOptionsSpaceSeparatedContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateTableOptionsSpaceSeparatedContext) AllCreateTableOption() []ICreateTableOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICreateTableOptionContext)(nil)).Elem())
	var tst = make([]ICreateTableOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICreateTableOptionContext)
		}
	}

	return tst
}

func (s *CreateTableOptionsSpaceSeparatedContext) CreateTableOption(i int) ICreateTableOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateTableOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICreateTableOptionContext)
}

func (s *CreateTableOptionsSpaceSeparatedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateTableOptionsSpaceSeparatedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateTableOptionsSpaceSeparatedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateTableOptionsSpaceSeparated(s)
	}
}

func (s *CreateTableOptionsSpaceSeparatedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateTableOptionsSpaceSeparated(s)
	}
}

func (s *CreateTableOptionsSpaceSeparatedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateTableOptionsSpaceSeparated(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CreateTableOptionsSpaceSeparated() (localctx ICreateTableOptionsSpaceSeparatedContext) {
	this := p
	_ = this

	localctx = NewCreateTableOptionsSpaceSeparatedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 544, MySQLStatementParserRULE_createTableOptionsSpaceSeparated)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3837)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(3836)
				p.CreateTableOption()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(3839)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 414, p.GetParserRuleContext())
	}

	return localctx
}

// IAlterListItemContext is an interface to support dynamic dispatch.
type IAlterListItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterListItemContext differentiates from other interfaces.
	IsAlterListItemContext()
}

type AlterListItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterListItemContext() *AlterListItemContext {
	var p = new(AlterListItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterListItem
	return p
}

func (*AlterListItemContext) IsAlterListItemContext() {}

func NewAlterListItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterListItemContext {
	var p = new(AlterListItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterListItem

	return p
}

func (s *AlterListItemContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterListItemContext) CopyFrom(ctx *AlterListItemContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *AlterListItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterListItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type AddColumnContext struct {
	*AlterListItemContext
}

func NewAddColumnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AddColumnContext {
	var p = new(AddColumnContext)

	p.AlterListItemContext = NewEmptyAlterListItemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterListItemContext))

	return p
}

func (s *AddColumnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AddColumnContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserADD, 0)
}

func (s *AddColumnContext) ColumnDefinition() IColumnDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnDefinitionContext)
}

func (s *AddColumnContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *AddColumnContext) TableElementList() ITableElementListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableElementListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableElementListContext)
}

func (s *AddColumnContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *AddColumnContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOLUMN, 0)
}

func (s *AddColumnContext) Place() IPlaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPlaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPlaceContext)
}

func (s *AddColumnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAddColumn(s)
	}
}

func (s *AddColumnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAddColumn(s)
	}
}

func (s *AddColumnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAddColumn(s)

	default:
		return t.VisitChildren(s)
	}
}

type EnableKeysContext struct {
	*AlterListItemContext
}

func NewEnableKeysContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *EnableKeysContext {
	var p = new(EnableKeysContext)

	p.AlterListItemContext = NewEmptyAlterListItemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterListItemContext))

	return p
}

func (s *EnableKeysContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnableKeysContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENABLE, 0)
}

func (s *EnableKeysContext) KEYS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserKEYS, 0)
}

func (s *EnableKeysContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterEnableKeys(s)
	}
}

func (s *EnableKeysContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitEnableKeys(s)
	}
}

func (s *EnableKeysContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitEnableKeys(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableDropContext struct {
	*AlterListItemContext
	columnInternalRef IIdentifierContext
}

func NewAlterTableDropContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableDropContext {
	var p = new(AlterTableDropContext)

	p.AlterListItemContext = NewEmptyAlterListItemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterListItemContext))

	return p
}

func (s *AlterTableDropContext) GetColumnInternalRef() IIdentifierContext { return s.columnInternalRef }

func (s *AlterTableDropContext) SetColumnInternalRef(v IIdentifierContext) { s.columnInternalRef = v }

func (s *AlterTableDropContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableDropContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDROP, 0)
}

func (s *AlterTableDropContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOREIGN, 0)
}

func (s *AlterTableDropContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserKEY, 0)
}

func (s *AlterTableDropContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPRIMARY, 0)
}

func (s *AlterTableDropContext) KeyOrIndex() IKeyOrIndexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeyOrIndexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKeyOrIndexContext)
}

func (s *AlterTableDropContext) IndexName() IIndexNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexNameContext)
}

func (s *AlterTableDropContext) CHECK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHECK, 0)
}

func (s *AlterTableDropContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AlterTableDropContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCONSTRAINT, 0)
}

func (s *AlterTableDropContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOLUMN, 0)
}

func (s *AlterTableDropContext) Restrict() IRestrictContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRestrictContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRestrictContext)
}

func (s *AlterTableDropContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterTableDrop(s)
	}
}

func (s *AlterTableDropContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterTableDrop(s)
	}
}

func (s *AlterTableDropContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterTableDrop(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterConstraintContext struct {
	*AlterListItemContext
}

func NewAlterConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterConstraintContext {
	var p = new(AlterConstraintContext)

	p.AlterListItemContext = NewEmptyAlterListItemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterListItemContext))

	return p
}

func (s *AlterConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterConstraintContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALTER, 0)
}

func (s *AlterConstraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCONSTRAINT, 0)
}

func (s *AlterConstraintContext) ConstraintName() IConstraintNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraintNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstraintNameContext)
}

func (s *AlterConstraintContext) ConstraintEnforcement() IConstraintEnforcementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraintEnforcementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstraintEnforcementContext)
}

func (s *AlterConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterConstraint(s)
	}
}

func (s *AlterConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterConstraint(s)
	}
}

func (s *AlterConstraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterConstraint(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterColumnContext struct {
	*AlterListItemContext
	columnInternalRef IIdentifierContext
}

func NewAlterColumnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterColumnContext {
	var p = new(AlterColumnContext)

	p.AlterListItemContext = NewEmptyAlterListItemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterListItemContext))

	return p
}

func (s *AlterColumnContext) GetColumnInternalRef() IIdentifierContext { return s.columnInternalRef }

func (s *AlterColumnContext) SetColumnInternalRef(v IIdentifierContext) { s.columnInternalRef = v }

func (s *AlterColumnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterColumnContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALTER, 0)
}

func (s *AlterColumnContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AlterColumnContext) SET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSET, 0)
}

func (s *AlterColumnContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFAULT, 0)
}

func (s *AlterColumnContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDROP, 0)
}

func (s *AlterColumnContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOLUMN, 0)
}

func (s *AlterColumnContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *AlterColumnContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *AlterColumnContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *AlterColumnContext) SignedLiteral() ISignedLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISignedLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISignedLiteralContext)
}

func (s *AlterColumnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterColumn(s)
	}
}

func (s *AlterColumnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterColumn(s)
	}
}

func (s *AlterColumnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterColumn(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterCheckContext struct {
	*AlterListItemContext
}

func NewAlterCheckContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterCheckContext {
	var p = new(AlterCheckContext)

	p.AlterListItemContext = NewEmptyAlterListItemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterListItemContext))

	return p
}

func (s *AlterCheckContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterCheckContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALTER, 0)
}

func (s *AlterCheckContext) CHECK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHECK, 0)
}

func (s *AlterCheckContext) ConstraintName() IConstraintNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraintNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstraintNameContext)
}

func (s *AlterCheckContext) ConstraintEnforcement() IConstraintEnforcementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraintEnforcementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstraintEnforcementContext)
}

func (s *AlterCheckContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterCheck(s)
	}
}

func (s *AlterCheckContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterCheck(s)
	}
}

func (s *AlterCheckContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterCheck(s)

	default:
		return t.VisitChildren(s)
	}
}

type ModifyColumnContext struct {
	*AlterListItemContext
	columnInternalRef IIdentifierContext
}

func NewModifyColumnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ModifyColumnContext {
	var p = new(ModifyColumnContext)

	p.AlterListItemContext = NewEmptyAlterListItemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterListItemContext))

	return p
}

func (s *ModifyColumnContext) GetColumnInternalRef() IIdentifierContext { return s.columnInternalRef }

func (s *ModifyColumnContext) SetColumnInternalRef(v IIdentifierContext) { s.columnInternalRef = v }

func (s *ModifyColumnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModifyColumnContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMODIFY, 0)
}

func (s *ModifyColumnContext) FieldDefinition() IFieldDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldDefinitionContext)
}

func (s *ModifyColumnContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ModifyColumnContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOLUMN, 0)
}

func (s *ModifyColumnContext) Place() IPlaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPlaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPlaceContext)
}

func (s *ModifyColumnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterModifyColumn(s)
	}
}

func (s *ModifyColumnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitModifyColumn(s)
	}
}

func (s *ModifyColumnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitModifyColumn(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterIndexContext struct {
	*AlterListItemContext
}

func NewAlterIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterIndexContext {
	var p = new(AlterIndexContext)

	p.AlterListItemContext = NewEmptyAlterListItemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterListItemContext))

	return p
}

func (s *AlterIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterIndexContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALTER, 0)
}

func (s *AlterIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINDEX, 0)
}

func (s *AlterIndexContext) IndexName() IIndexNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexNameContext)
}

func (s *AlterIndexContext) Visibility() IVisibilityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVisibilityContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVisibilityContext)
}

func (s *AlterIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterIndex(s)
	}
}

func (s *AlterIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterIndex(s)
	}
}

func (s *AlterIndexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterIndex(s)

	default:
		return t.VisitChildren(s)
	}
}

type ChangeColumnContext struct {
	*AlterListItemContext
	columnInternalRef IIdentifierContext
}

func NewChangeColumnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ChangeColumnContext {
	var p = new(ChangeColumnContext)

	p.AlterListItemContext = NewEmptyAlterListItemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterListItemContext))

	return p
}

func (s *ChangeColumnContext) GetColumnInternalRef() IIdentifierContext { return s.columnInternalRef }

func (s *ChangeColumnContext) SetColumnInternalRef(v IIdentifierContext) { s.columnInternalRef = v }

func (s *ChangeColumnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChangeColumnContext) CHANGE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHANGE, 0)
}

func (s *ChangeColumnContext) ColumnDefinition() IColumnDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnDefinitionContext)
}

func (s *ChangeColumnContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ChangeColumnContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOLUMN, 0)
}

func (s *ChangeColumnContext) Place() IPlaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPlaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPlaceContext)
}

func (s *ChangeColumnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterChangeColumn(s)
	}
}

func (s *ChangeColumnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitChangeColumn(s)
	}
}

func (s *ChangeColumnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitChangeColumn(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableOrderContext struct {
	*AlterListItemContext
}

func NewAlterTableOrderContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableOrderContext {
	var p = new(AlterTableOrderContext)

	p.AlterListItemContext = NewEmptyAlterListItemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterListItemContext))

	return p
}

func (s *AlterTableOrderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableOrderContext) ORDER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserORDER, 0)
}

func (s *AlterTableOrderContext) BY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBY, 0)
}

func (s *AlterTableOrderContext) AlterOrderList() IAlterOrderListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterOrderListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterOrderListContext)
}

func (s *AlterTableOrderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterTableOrder(s)
	}
}

func (s *AlterTableOrderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterTableOrder(s)
	}
}

func (s *AlterTableOrderContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterTableOrder(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterConvertContext struct {
	*AlterListItemContext
}

func NewAlterConvertContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterConvertContext {
	var p = new(AlterConvertContext)

	p.AlterListItemContext = NewEmptyAlterListItemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterListItemContext))

	return p
}

func (s *AlterConvertContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterConvertContext) CONVERT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCONVERT, 0)
}

func (s *AlterConvertContext) TO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTO, 0)
}

func (s *AlterConvertContext) Charset() ICharsetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetContext)
}

func (s *AlterConvertContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *AlterConvertContext) CollateClause() ICollateClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollateClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollateClauseContext)
}

func (s *AlterConvertContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterConvert(s)
	}
}

func (s *AlterConvertContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterConvert(s)
	}
}

func (s *AlterConvertContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterConvert(s)

	default:
		return t.VisitChildren(s)
	}
}

type RenameIndexContext struct {
	*AlterListItemContext
}

func NewRenameIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RenameIndexContext {
	var p = new(RenameIndexContext)

	p.AlterListItemContext = NewEmptyAlterListItemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterListItemContext))

	return p
}

func (s *RenameIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RenameIndexContext) RENAME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRENAME, 0)
}

func (s *RenameIndexContext) KeyOrIndex() IKeyOrIndexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeyOrIndexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKeyOrIndexContext)
}

func (s *RenameIndexContext) AllIndexName() []IIndexNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexNameContext)(nil)).Elem())
	var tst = make([]IIndexNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexNameContext)
		}
	}

	return tst
}

func (s *RenameIndexContext) IndexName(i int) IIndexNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexNameContext)
}

func (s *RenameIndexContext) TO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTO, 0)
}

func (s *RenameIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterRenameIndex(s)
	}
}

func (s *RenameIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitRenameIndex(s)
	}
}

func (s *RenameIndexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitRenameIndex(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableForceContext struct {
	*AlterListItemContext
}

func NewAlterTableForceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableForceContext {
	var p = new(AlterTableForceContext)

	p.AlterListItemContext = NewEmptyAlterListItemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterListItemContext))

	return p
}

func (s *AlterTableForceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableForceContext) FORCE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFORCE, 0)
}

func (s *AlterTableForceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterTableForce(s)
	}
}

func (s *AlterTableForceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterTableForce(s)
	}
}

func (s *AlterTableForceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterTableForce(s)

	default:
		return t.VisitChildren(s)
	}
}

type AddTableConstraintContext struct {
	*AlterListItemContext
}

func NewAddTableConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AddTableConstraintContext {
	var p = new(AddTableConstraintContext)

	p.AlterListItemContext = NewEmptyAlterListItemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterListItemContext))

	return p
}

func (s *AddTableConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AddTableConstraintContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserADD, 0)
}

func (s *AddTableConstraintContext) TableConstraintDef() ITableConstraintDefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableConstraintDefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableConstraintDefContext)
}

func (s *AddTableConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAddTableConstraint(s)
	}
}

func (s *AddTableConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAddTableConstraint(s)
	}
}

func (s *AddTableConstraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAddTableConstraint(s)

	default:
		return t.VisitChildren(s)
	}
}

type RenameColumnContext struct {
	*AlterListItemContext
	columnInternalRef IIdentifierContext
}

func NewRenameColumnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RenameColumnContext {
	var p = new(RenameColumnContext)

	p.AlterListItemContext = NewEmptyAlterListItemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterListItemContext))

	return p
}

func (s *RenameColumnContext) GetColumnInternalRef() IIdentifierContext { return s.columnInternalRef }

func (s *RenameColumnContext) SetColumnInternalRef(v IIdentifierContext) { s.columnInternalRef = v }

func (s *RenameColumnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RenameColumnContext) RENAME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRENAME, 0)
}

func (s *RenameColumnContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOLUMN, 0)
}

func (s *RenameColumnContext) TO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTO, 0)
}

func (s *RenameColumnContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *RenameColumnContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *RenameColumnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterRenameColumn(s)
	}
}

func (s *RenameColumnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitRenameColumn(s)
	}
}

func (s *RenameColumnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitRenameColumn(s)

	default:
		return t.VisitChildren(s)
	}
}

type DisableKeysContext struct {
	*AlterListItemContext
}

func NewDisableKeysContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DisableKeysContext {
	var p = new(DisableKeysContext)

	p.AlterListItemContext = NewEmptyAlterListItemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterListItemContext))

	return p
}

func (s *DisableKeysContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DisableKeysContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDISABLE, 0)
}

func (s *DisableKeysContext) KEYS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserKEYS, 0)
}

func (s *DisableKeysContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDisableKeys(s)
	}
}

func (s *DisableKeysContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDisableKeys(s)
	}
}

func (s *DisableKeysContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDisableKeys(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterRenameTableContext struct {
	*AlterListItemContext
}

func NewAlterRenameTableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterRenameTableContext {
	var p = new(AlterRenameTableContext)

	p.AlterListItemContext = NewEmptyAlterListItemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterListItemContext))

	return p
}

func (s *AlterRenameTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterRenameTableContext) RENAME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRENAME, 0)
}

func (s *AlterRenameTableContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *AlterRenameTableContext) TO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTO, 0)
}

func (s *AlterRenameTableContext) AS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAS, 0)
}

func (s *AlterRenameTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterRenameTable(s)
	}
}

func (s *AlterRenameTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterRenameTable(s)
	}
}

func (s *AlterRenameTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterRenameTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterListItem() (localctx IAlterListItemContext) {
	this := p
	_ = this

	localctx = NewAlterListItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 546, MySQLStatementParserRULE_alterListItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3962)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 430, p.GetParserRuleContext()) {
	case 1:
		localctx = NewAddColumnContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3841)
			p.Match(MySQLStatementParserADD)
		}
		p.SetState(3843)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserCOLUMN {
			{
				p.SetState(3842)
				p.Match(MySQLStatementParserCOLUMN)
			}

		}
		p.SetState(3853)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySQLStatementParserMAX, MySQLStatementParserMIN, MySQLStatementParserSUM, MySQLStatementParserCOUNT, MySQLStatementParserGROUP_CONCAT, MySQLStatementParserCAST, MySQLStatementParserPOSITION, MySQLStatementParserSUBSTRING, MySQLStatementParserSUBSTR, MySQLStatementParserEXTRACT, MySQLStatementParserTRIM, MySQLStatementParserLAST_DAY, MySQLStatementParserTRADITIONAL, MySQLStatementParserTREE, MySQLStatementParserMYSQL_ADMIN, MySQLStatementParserINSTANT, MySQLStatementParserINPLACE, MySQLStatementParserCOPY, MySQLStatementParserUL_BINARY, MySQLStatementParserAUTOCOMMIT, MySQLStatementParserINNODB, MySQLStatementParserREDO_LOG, MySQLStatementParserACCOUNT, MySQLStatementParserACTION, MySQLStatementParserACTIVE, MySQLStatementParserADMIN, MySQLStatementParserAFTER, MySQLStatementParserAGAINST, MySQLStatementParserAGGREGATE, MySQLStatementParserALGORITHM, MySQLStatementParserALWAYS, MySQLStatementParserANY, MySQLStatementParserARRAY, MySQLStatementParserASCII, MySQLStatementParserAT, MySQLStatementParserATTRIBUTE, MySQLStatementParserAUTOEXTEND_SIZE, MySQLStatementParserAUTO_INCREMENT, MySQLStatementParserAVG, MySQLStatementParserAVG_ROW_LENGTH, MySQLStatementParserBACKUP, MySQLStatementParserBEGIN, MySQLStatementParserBINLOG, MySQLStatementParserBIT, MySQLStatementParserBLOCK, MySQLStatementParserBOOL, MySQLStatementParserBOOLEAN, MySQLStatementParserBTREE, MySQLStatementParserBUCKETS, MySQLStatementParserBYTE, MySQLStatementParserCACHE, MySQLStatementParserCASCADED, MySQLStatementParserCATALOG_NAME, MySQLStatementParserCHAIN, MySQLStatementParserCHANGED, MySQLStatementParserCHANNEL, MySQLStatementParserCHARSET, MySQLStatementParserCHECKSUM, MySQLStatementParserCIPHER, MySQLStatementParserCLASS_ORIGIN, MySQLStatementParserCLIENT, MySQLStatementParserCLONE, MySQLStatementParserCLOSE, MySQLStatementParserCOALESCE, MySQLStatementParserCODE, MySQLStatementParserCOLLATION, MySQLStatementParserCOLUMNS, MySQLStatementParserCOLUMN_FORMAT, MySQLStatementParserCOLUMN_NAME, MySQLStatementParserCOMMENT, MySQLStatementParserCOMMIT, MySQLStatementParserCOMMITTED, MySQLStatementParserCOMPACT, MySQLStatementParserCOMPLETION, MySQLStatementParserCOMPONENT, MySQLStatementParserCOMPRESSED, MySQLStatementParserCOMPRESSION, MySQLStatementParserCONCURRENT, MySQLStatementParserCONNECTION, MySQLStatementParserCONSISTENT, MySQLStatementParserCONSTRAINT_CATALOG, MySQLStatementParserCONSTRAINT_NAME, MySQLStatementParserCONSTRAINT_SCHEMA, MySQLStatementParserCONTAINS, MySQLStatementParserCONTEXT, MySQLStatementParserCPU, MySQLStatementParserCURRENT, MySQLStatementParserCURSOR_NAME, MySQLStatementParserDATA, MySQLStatementParserDATAFILE, MySQLStatementParserDATE, MySQLStatementParserDATETIME, MySQLStatementParserDAY, MySQLStatementParserDEALLOCATE, MySQLStatementParserDEFAULT_AUTH, MySQLStatementParserDEFINER, MySQLStatementParserDEFINITION, MySQLStatementParserDELAY_KEY_WRITE, MySQLStatementParserDESCRIPTION, MySQLStatementParserDIAGNOSTICS, MySQLStatementParserDIRECTORY, MySQLStatementParserDISABLE, MySQLStatementParserDISCARD, MySQLStatementParserDISK, MySQLStatementParserDO, MySQLStatementParserDUMPFILE, MySQLStatementParserDUPLICATE, MySQLStatementParserDYNAMIC, MySQLStatementParserENABLE, MySQLStatementParserENCRYPTION, MySQLStatementParserEND, MySQLStatementParserENDS, MySQLStatementParserENFORCED, MySQLStatementParserENGINE, MySQLStatementParserENGINES, MySQLStatementParserENGINE_ATTRIBUTE, MySQLStatementParserENUM, MySQLStatementParserERROR, MySQLStatementParserERRORS, MySQLStatementParserESCAPE, MySQLStatementParserEVENT, MySQLStatementParserEVENTS, MySQLStatementParserEVERY, MySQLStatementParserEXCHANGE, MySQLStatementParserEXCLUDE, MySQLStatementParserEXECUTE, MySQLStatementParserEXPANSION, MySQLStatementParserEXPIRE, MySQLStatementParserEXPORT, MySQLStatementParserEXTENDED, MySQLStatementParserEXTENT_SIZE, MySQLStatementParserFAILED_LOGIN_ATTEMPTS, MySQLStatementParserFAST, MySQLStatementParserFAULTS, MySQLStatementParserFILE, MySQLStatementParserFILE_BLOCK_SIZE, MySQLStatementParserFILTER, MySQLStatementParserFIRST, MySQLStatementParserFIXED, MySQLStatementParserFLUSH, MySQLStatementParserFOLLOWING, MySQLStatementParserFOLLOWS, MySQLStatementParserFORMAT, MySQLStatementParserFOUND, MySQLStatementParserFULL, MySQLStatementParserGENERAL, MySQLStatementParserGEOMETRY, MySQLStatementParserGEOMETRYCOLLECTION, MySQLStatementParserGET_FORMAT, MySQLStatementParserGET_MASTER_PUBLIC_KEY, MySQLStatementParserGLOBAL, MySQLStatementParserGRANTS, MySQLStatementParserGROUP_REPLICATION, MySQLStatementParserHANDLER, MySQLStatementParserHASH, MySQLStatementParserHELP, MySQLStatementParserHISTOGRAM, MySQLStatementParserHISTORY, MySQLStatementParserHOST, MySQLStatementParserHOSTS, MySQLStatementParserHOUR, MySQLStatementParserIDENTIFIED, MySQLStatementParserIGNORE_SERVER_IDS, MySQLStatementParserIMPORT, MySQLStatementParserINACTIVE, MySQLStatementParserINDEXES, MySQLStatementParserINITIAL_SIZE, MySQLStatementParserINSERT_METHOD, MySQLStatementParserINSTALL, MySQLStatementParserINSTANCE, MySQLStatementParserINVISIBLE, MySQLStatementParserINVOKER, MySQLStatementParserIO, MySQLStatementParserIPC, MySQLStatementParserISOLATION, MySQLStatementParserISSUER, MySQLStatementParserJSON, MySQLStatementParserJSON_VALUE, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserLANGUAGE, MySQLStatementParserLAST, MySQLStatementParserLAST_VALUE, MySQLStatementParserLEAVES, MySQLStatementParserLESS, MySQLStatementParserLEVEL, MySQLStatementParserLINESTRING, MySQLStatementParserLIST, MySQLStatementParserLOCAL, MySQLStatementParserLOCKED, MySQLStatementParserLOCKS, MySQLStatementParserLOGFILE, MySQLStatementParserLOGS, MySQLStatementParserMASTER, MySQLStatementParserMASTER_AUTO_POSITION, MySQLStatementParserMASTER_COMPRESSION_ALGORITHM, MySQLStatementParserMASTER_CONNECT_RETRY, MySQLStatementParserMASTER_DELAY, MySQLStatementParserMASTER_HEARTBEAT_PERIOD, MySQLStatementParserMASTER_HOST, MySQLStatementParserMASTER_LOG_FILE, MySQLStatementParserMASTER_LOG_POS, MySQLStatementParserMASTER_PASSWORD, MySQLStatementParserMASTER_PORT, MySQLStatementParserMASTER_PUBLIC_KEY_PATH, MySQLStatementParserMASTER_RETRY_COUNT, MySQLStatementParserMASTER_SERVER_ID, MySQLStatementParserMASTER_SSL, MySQLStatementParserMASTER_SSL_CA, MySQLStatementParserMASTER_SSL_CAPATH, MySQLStatementParserMASTER_SSL_CERT, MySQLStatementParserMASTER_SSL_CIPHER, MySQLStatementParserMASTER_SSL_CRL, MySQLStatementParserMASTER_SSL_CRLPATH, MySQLStatementParserMASTER_SSL_KEY, MySQLStatementParserMASTER_TLS_CIPHERSUITES, MySQLStatementParserMASTER_TLS_VERSION, MySQLStatementParserMASTER_USER, MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL, MySQLStatementParserMAX_CONNECTIONS_PER_HOUR, MySQLStatementParserMAX_QUERIES_PER_HOUR, MySQLStatementParserMAX_ROWS, MySQLStatementParserMAX_SIZE, MySQLStatementParserMAX_UPDATES_PER_HOUR, MySQLStatementParserMAX_USER_CONNECTIONS, MySQLStatementParserMEDIUM, MySQLStatementParserMEMBER, MySQLStatementParserMEMORY, MySQLStatementParserMERGE, MySQLStatementParserMESSAGE_TEXT, MySQLStatementParserMICROSECOND, MySQLStatementParserMIGRATE, MySQLStatementParserMINUTE, MySQLStatementParserMIN_ROWS, MySQLStatementParserMODE, MySQLStatementParserMODIFY, MySQLStatementParserMONTH, MySQLStatementParserMULTILINESTRING, MySQLStatementParserMULTIPOINT, MySQLStatementParserMULTIPOLYGON, MySQLStatementParserMUTEX, MySQLStatementParserMYSQL_ERRNO, MySQLStatementParserNAME, MySQLStatementParserNAMES, MySQLStatementParserNATIONAL, MySQLStatementParserNCHAR, MySQLStatementParserNDBCLUSTER, MySQLStatementParserNESTED, MySQLStatementParserNETWORK_NAMESPACE, MySQLStatementParserNEVER, MySQLStatementParserNEW, MySQLStatementParserNEXT, MySQLStatementParserNO, MySQLStatementParserNODEGROUP, MySQLStatementParserNONE, MySQLStatementParserNOWAIT, MySQLStatementParserNO_WAIT, MySQLStatementParserNULLS, MySQLStatementParserNUMBER, MySQLStatementParserNVARCHAR, MySQLStatementParserOFF, MySQLStatementParserOFFSET, MySQLStatementParserOJ, MySQLStatementParserOLD, MySQLStatementParserONE, MySQLStatementParserONLY, MySQLStatementParserOPEN, MySQLStatementParserOPTIONAL, MySQLStatementParserOPTIONS, MySQLStatementParserORDINALITY, MySQLStatementParserORGANIZATION, MySQLStatementParserOTHERS, MySQLStatementParserOWNER, MySQLStatementParserPACK_KEYS, MySQLStatementParserPAGE, MySQLStatementParserPARSER, MySQLStatementParserPARTIAL, MySQLStatementParserPARTITIONING, MySQLStatementParserPARTITIONS, MySQLStatementParserPASSWORD, MySQLStatementParserPASSWORD_LOCK_TIME, MySQLStatementParserPATH, MySQLStatementParserPERSIST, MySQLStatementParserPERSIST_ONLY, MySQLStatementParserPHASE, MySQLStatementParserPLUGIN, MySQLStatementParserPLUGINS, MySQLStatementParserPLUGIN_DIR, MySQLStatementParserPOINT, MySQLStatementParserPOLYGON, MySQLStatementParserPORT, MySQLStatementParserPRECEDES, MySQLStatementParserPRECEDING, MySQLStatementParserPREPARE, MySQLStatementParserPRESERVE, MySQLStatementParserPREV, MySQLStatementParserPRIVILEGES, MySQLStatementParserPRIVILEGE_CHECKS_USER, MySQLStatementParserPROCESS, MySQLStatementParserPROCESSLIST, MySQLStatementParserPROFILE, MySQLStatementParserPROFILES, MySQLStatementParserPROXY, MySQLStatementParserQUARTER, MySQLStatementParserQUERY, MySQLStatementParserQUICK, MySQLStatementParserRANDOM, MySQLStatementParserREAD_ONLY, MySQLStatementParserREBUILD, MySQLStatementParserRECOVER, MySQLStatementParserREDO_BUFFER_SIZE, MySQLStatementParserREDUNDANT, MySQLStatementParserREFERENCE, MySQLStatementParserRELAY, MySQLStatementParserRELAYLOG, MySQLStatementParserRELAY_LOG_FILE, MySQLStatementParserRELAY_LOG_POS, MySQLStatementParserRELAY_THREAD, MySQLStatementParserRELOAD, MySQLStatementParserREMOVE, MySQLStatementParserREORGANIZE, MySQLStatementParserREPAIR, MySQLStatementParserREPEATABLE, MySQLStatementParserREPLICATE_DO_DB, MySQLStatementParserREPLICATE_DO_TABLE, MySQLStatementParserREPLICATE_IGNORE_DB, MySQLStatementParserREPLICATE_IGNORE_TABLE, MySQLStatementParserREPLICATE_REWRITE_DB, MySQLStatementParserREPLICATE_WILD_DO_TABLE, MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE, MySQLStatementParserREPLICATION, MySQLStatementParserREQUIRE_ROW_FORMAT, MySQLStatementParserRESET, MySQLStatementParserRESOURCE, MySQLStatementParserRESPECT, MySQLStatementParserRESTART, MySQLStatementParserRESTORE, MySQLStatementParserRESUME, MySQLStatementParserRETAIN, MySQLStatementParserRETURNED_SQLSTATE, MySQLStatementParserRETURNING, MySQLStatementParserRETURNS, MySQLStatementParserREUSE, MySQLStatementParserREVERSE, MySQLStatementParserROLE, MySQLStatementParserROLLBACK, MySQLStatementParserROLLUP, MySQLStatementParserROTATE, MySQLStatementParserROUTINE, MySQLStatementParserROW_COUNT, MySQLStatementParserROW_FORMAT, MySQLStatementParserRTREE, MySQLStatementParserSAVEPOINT, MySQLStatementParserSCHEDULE, MySQLStatementParserSCHEMA_NAME, MySQLStatementParserSECOND, MySQLStatementParserSECONDARY, MySQLStatementParserSECONDARY_ENGINE, MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, MySQLStatementParserSECONDARY_LOAD, MySQLStatementParserSECONDARY_UNLOAD, MySQLStatementParserSECURITY, MySQLStatementParserSERIAL, MySQLStatementParserSERIALIZABLE, MySQLStatementParserSERVER, MySQLStatementParserSESSION, MySQLStatementParserSHARE, MySQLStatementParserSHUTDOWN, MySQLStatementParserSIGNED, MySQLStatementParserSIMPLE, MySQLStatementParserSLAVE, MySQLStatementParserSLOW, MySQLStatementParserSNAPSHOT, MySQLStatementParserSOCKET, MySQLStatementParserSONAME, MySQLStatementParserSOUNDS, MySQLStatementParserSOURCE, MySQLStatementParserSQL_AFTER_GTIDS, MySQLStatementParserSQL_AFTER_MTS_GAPS, MySQLStatementParserSQL_BEFORE_GTIDS, MySQLStatementParserSQL_BUFFER_RESULT, MySQLStatementParserSQL_NO_CACHE, MySQLStatementParserSQL_THREAD, MySQLStatementParserSRID, MySQLStatementParserSTACKED, MySQLStatementParserSTART, MySQLStatementParserSTARTS, MySQLStatementParserSTATS_AUTO_RECALC, MySQLStatementParserSTATS_PERSISTENT, MySQLStatementParserSTATS_SAMPLE_PAGES, MySQLStatementParserSTATUS, MySQLStatementParserSTOP, MySQLStatementParserSTORAGE, MySQLStatementParserSTREAM, MySQLStatementParserSTRING, MySQLStatementParserSUBCLASS_ORIGIN, MySQLStatementParserSUBJECT, MySQLStatementParserSUBPARTITION, MySQLStatementParserSUBPARTITIONS, MySQLStatementParserSUPER, MySQLStatementParserSUSPEND, MySQLStatementParserSWAPS, MySQLStatementParserSWITCHES, MySQLStatementParserTABLES, MySQLStatementParserTABLESPACE, MySQLStatementParserTABLE_CHECKSUM, MySQLStatementParserTABLE_NAME, MySQLStatementParserTEMPORARY, MySQLStatementParserTEMPTABLE, MySQLStatementParserTEXT, MySQLStatementParserTHAN, MySQLStatementParserTHREAD_PRIORITY, MySQLStatementParserTIES, MySQLStatementParserTIME, MySQLStatementParserTIMESTAMP, MySQLStatementParserTIMESTAMP_ADD, MySQLStatementParserTIMESTAMP_DIFF, MySQLStatementParserTLS, MySQLStatementParserTRANSACTION, MySQLStatementParserTRIGGERS, MySQLStatementParserTRUNCATE, MySQLStatementParserTYPE, MySQLStatementParserTYPES, MySQLStatementParserUNBOUNDED, MySQLStatementParserUNCOMMITTED, MySQLStatementParserUNDEFINED, MySQLStatementParserUNDOFILE, MySQLStatementParserUNDO_BUFFER_SIZE, MySQLStatementParserUNICODE, MySQLStatementParserUNINSTALL, MySQLStatementParserUNKNOWN, MySQLStatementParserUNTIL, MySQLStatementParserUPGRADE, MySQLStatementParserUSER, MySQLStatementParserUSER_RESOURCES, MySQLStatementParserUSE_FRM, MySQLStatementParserVALIDATION, MySQLStatementParserVALUE, MySQLStatementParserVARIABLES, MySQLStatementParserVCPU, MySQLStatementParserVIEW, MySQLStatementParserVISIBLE, MySQLStatementParserWAIT, MySQLStatementParserWARNINGS, MySQLStatementParserWEEK, MySQLStatementParserWEIGHT_STRING, MySQLStatementParserWITHOUT, MySQLStatementParserWORK, MySQLStatementParserWRAPPER, MySQLStatementParserX509, MySQLStatementParserXA, MySQLStatementParserXID, MySQLStatementParserXML, MySQLStatementParserYEAR, MySQLStatementParserIDENTIFIER_, MySQLStatementParserDOUBLE_QUOTED_TEXT:
			{
				p.SetState(3845)
				p.ColumnDefinition()
			}
			p.SetState(3847)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 416, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(3846)
					p.Place()
				}

			}

		case MySQLStatementParserLP_:
			{
				p.SetState(3849)
				p.Match(MySQLStatementParserLP_)
			}
			{
				p.SetState(3850)
				p.TableElementList()
			}
			{
				p.SetState(3851)
				p.Match(MySQLStatementParserRP_)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 2:
		localctx = NewAddTableConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3855)
			p.Match(MySQLStatementParserADD)
		}
		{
			p.SetState(3856)
			p.TableConstraintDef()
		}

	case 3:
		localctx = NewChangeColumnContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3857)
			p.Match(MySQLStatementParserCHANGE)
		}
		p.SetState(3859)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserCOLUMN {
			{
				p.SetState(3858)
				p.Match(MySQLStatementParserCOLUMN)
			}

		}
		{
			p.SetState(3861)

			var _x = p.Identifier()

			localctx.(*ChangeColumnContext).columnInternalRef = _x
		}
		{
			p.SetState(3862)
			p.ColumnDefinition()
		}
		p.SetState(3864)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 419, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3863)
				p.Place()
			}

		}

	case 4:
		localctx = NewModifyColumnContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3866)
			p.Match(MySQLStatementParserMODIFY)
		}
		p.SetState(3868)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserCOLUMN {
			{
				p.SetState(3867)
				p.Match(MySQLStatementParserCOLUMN)
			}

		}
		{
			p.SetState(3870)

			var _x = p.Identifier()

			localctx.(*ModifyColumnContext).columnInternalRef = _x
		}
		{
			p.SetState(3871)
			p.FieldDefinition()
		}
		p.SetState(3873)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 421, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3872)
				p.Place()
			}

		}

	case 5:
		localctx = NewAlterTableDropContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3875)
			p.Match(MySQLStatementParserDROP)
		}
		p.SetState(3895)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySQLStatementParserMAX, MySQLStatementParserMIN, MySQLStatementParserSUM, MySQLStatementParserCOUNT, MySQLStatementParserGROUP_CONCAT, MySQLStatementParserCAST, MySQLStatementParserPOSITION, MySQLStatementParserSUBSTRING, MySQLStatementParserSUBSTR, MySQLStatementParserEXTRACT, MySQLStatementParserTRIM, MySQLStatementParserLAST_DAY, MySQLStatementParserTRADITIONAL, MySQLStatementParserTREE, MySQLStatementParserMYSQL_ADMIN, MySQLStatementParserINSTANT, MySQLStatementParserINPLACE, MySQLStatementParserCOPY, MySQLStatementParserUL_BINARY, MySQLStatementParserAUTOCOMMIT, MySQLStatementParserINNODB, MySQLStatementParserREDO_LOG, MySQLStatementParserACCOUNT, MySQLStatementParserACTION, MySQLStatementParserACTIVE, MySQLStatementParserADMIN, MySQLStatementParserAFTER, MySQLStatementParserAGAINST, MySQLStatementParserAGGREGATE, MySQLStatementParserALGORITHM, MySQLStatementParserALWAYS, MySQLStatementParserANY, MySQLStatementParserARRAY, MySQLStatementParserASCII, MySQLStatementParserAT, MySQLStatementParserATTRIBUTE, MySQLStatementParserAUTOEXTEND_SIZE, MySQLStatementParserAUTO_INCREMENT, MySQLStatementParserAVG, MySQLStatementParserAVG_ROW_LENGTH, MySQLStatementParserBACKUP, MySQLStatementParserBEGIN, MySQLStatementParserBINLOG, MySQLStatementParserBIT, MySQLStatementParserBLOCK, MySQLStatementParserBOOL, MySQLStatementParserBOOLEAN, MySQLStatementParserBTREE, MySQLStatementParserBUCKETS, MySQLStatementParserBYTE, MySQLStatementParserCACHE, MySQLStatementParserCASCADED, MySQLStatementParserCATALOG_NAME, MySQLStatementParserCHAIN, MySQLStatementParserCHANGED, MySQLStatementParserCHANNEL, MySQLStatementParserCHARSET, MySQLStatementParserCHECKSUM, MySQLStatementParserCIPHER, MySQLStatementParserCLASS_ORIGIN, MySQLStatementParserCLIENT, MySQLStatementParserCLONE, MySQLStatementParserCLOSE, MySQLStatementParserCOALESCE, MySQLStatementParserCODE, MySQLStatementParserCOLLATION, MySQLStatementParserCOLUMN, MySQLStatementParserCOLUMNS, MySQLStatementParserCOLUMN_FORMAT, MySQLStatementParserCOLUMN_NAME, MySQLStatementParserCOMMENT, MySQLStatementParserCOMMIT, MySQLStatementParserCOMMITTED, MySQLStatementParserCOMPACT, MySQLStatementParserCOMPLETION, MySQLStatementParserCOMPONENT, MySQLStatementParserCOMPRESSED, MySQLStatementParserCOMPRESSION, MySQLStatementParserCONCURRENT, MySQLStatementParserCONNECTION, MySQLStatementParserCONSISTENT, MySQLStatementParserCONSTRAINT_CATALOG, MySQLStatementParserCONSTRAINT_NAME, MySQLStatementParserCONSTRAINT_SCHEMA, MySQLStatementParserCONTAINS, MySQLStatementParserCONTEXT, MySQLStatementParserCPU, MySQLStatementParserCURRENT, MySQLStatementParserCURSOR_NAME, MySQLStatementParserDATA, MySQLStatementParserDATAFILE, MySQLStatementParserDATE, MySQLStatementParserDATETIME, MySQLStatementParserDAY, MySQLStatementParserDEALLOCATE, MySQLStatementParserDEFAULT_AUTH, MySQLStatementParserDEFINER, MySQLStatementParserDEFINITION, MySQLStatementParserDELAY_KEY_WRITE, MySQLStatementParserDESCRIPTION, MySQLStatementParserDIAGNOSTICS, MySQLStatementParserDIRECTORY, MySQLStatementParserDISABLE, MySQLStatementParserDISCARD, MySQLStatementParserDISK, MySQLStatementParserDO, MySQLStatementParserDUMPFILE, MySQLStatementParserDUPLICATE, MySQLStatementParserDYNAMIC, MySQLStatementParserENABLE, MySQLStatementParserENCRYPTION, MySQLStatementParserEND, MySQLStatementParserENDS, MySQLStatementParserENFORCED, MySQLStatementParserENGINE, MySQLStatementParserENGINES, MySQLStatementParserENGINE_ATTRIBUTE, MySQLStatementParserENUM, MySQLStatementParserERROR, MySQLStatementParserERRORS, MySQLStatementParserESCAPE, MySQLStatementParserEVENT, MySQLStatementParserEVENTS, MySQLStatementParserEVERY, MySQLStatementParserEXCHANGE, MySQLStatementParserEXCLUDE, MySQLStatementParserEXECUTE, MySQLStatementParserEXPANSION, MySQLStatementParserEXPIRE, MySQLStatementParserEXPORT, MySQLStatementParserEXTENDED, MySQLStatementParserEXTENT_SIZE, MySQLStatementParserFAILED_LOGIN_ATTEMPTS, MySQLStatementParserFAST, MySQLStatementParserFAULTS, MySQLStatementParserFILE, MySQLStatementParserFILE_BLOCK_SIZE, MySQLStatementParserFILTER, MySQLStatementParserFIRST, MySQLStatementParserFIXED, MySQLStatementParserFLUSH, MySQLStatementParserFOLLOWING, MySQLStatementParserFOLLOWS, MySQLStatementParserFORMAT, MySQLStatementParserFOUND, MySQLStatementParserFULL, MySQLStatementParserGENERAL, MySQLStatementParserGEOMETRY, MySQLStatementParserGEOMETRYCOLLECTION, MySQLStatementParserGET_FORMAT, MySQLStatementParserGET_MASTER_PUBLIC_KEY, MySQLStatementParserGLOBAL, MySQLStatementParserGRANTS, MySQLStatementParserGROUP_REPLICATION, MySQLStatementParserHANDLER, MySQLStatementParserHASH, MySQLStatementParserHELP, MySQLStatementParserHISTOGRAM, MySQLStatementParserHISTORY, MySQLStatementParserHOST, MySQLStatementParserHOSTS, MySQLStatementParserHOUR, MySQLStatementParserIDENTIFIED, MySQLStatementParserIGNORE_SERVER_IDS, MySQLStatementParserIMPORT, MySQLStatementParserINACTIVE, MySQLStatementParserINDEXES, MySQLStatementParserINITIAL_SIZE, MySQLStatementParserINSERT_METHOD, MySQLStatementParserINSTALL, MySQLStatementParserINSTANCE, MySQLStatementParserINVISIBLE, MySQLStatementParserINVOKER, MySQLStatementParserIO, MySQLStatementParserIPC, MySQLStatementParserISOLATION, MySQLStatementParserISSUER, MySQLStatementParserJSON, MySQLStatementParserJSON_VALUE, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserLANGUAGE, MySQLStatementParserLAST, MySQLStatementParserLAST_VALUE, MySQLStatementParserLEAVES, MySQLStatementParserLESS, MySQLStatementParserLEVEL, MySQLStatementParserLINESTRING, MySQLStatementParserLIST, MySQLStatementParserLOCAL, MySQLStatementParserLOCKED, MySQLStatementParserLOCKS, MySQLStatementParserLOGFILE, MySQLStatementParserLOGS, MySQLStatementParserMASTER, MySQLStatementParserMASTER_AUTO_POSITION, MySQLStatementParserMASTER_COMPRESSION_ALGORITHM, MySQLStatementParserMASTER_CONNECT_RETRY, MySQLStatementParserMASTER_DELAY, MySQLStatementParserMASTER_HEARTBEAT_PERIOD, MySQLStatementParserMASTER_HOST, MySQLStatementParserMASTER_LOG_FILE, MySQLStatementParserMASTER_LOG_POS, MySQLStatementParserMASTER_PASSWORD, MySQLStatementParserMASTER_PORT, MySQLStatementParserMASTER_PUBLIC_KEY_PATH, MySQLStatementParserMASTER_RETRY_COUNT, MySQLStatementParserMASTER_SERVER_ID, MySQLStatementParserMASTER_SSL, MySQLStatementParserMASTER_SSL_CA, MySQLStatementParserMASTER_SSL_CAPATH, MySQLStatementParserMASTER_SSL_CERT, MySQLStatementParserMASTER_SSL_CIPHER, MySQLStatementParserMASTER_SSL_CRL, MySQLStatementParserMASTER_SSL_CRLPATH, MySQLStatementParserMASTER_SSL_KEY, MySQLStatementParserMASTER_TLS_CIPHERSUITES, MySQLStatementParserMASTER_TLS_VERSION, MySQLStatementParserMASTER_USER, MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL, MySQLStatementParserMAX_CONNECTIONS_PER_HOUR, MySQLStatementParserMAX_QUERIES_PER_HOUR, MySQLStatementParserMAX_ROWS, MySQLStatementParserMAX_SIZE, MySQLStatementParserMAX_UPDATES_PER_HOUR, MySQLStatementParserMAX_USER_CONNECTIONS, MySQLStatementParserMEDIUM, MySQLStatementParserMEMBER, MySQLStatementParserMEMORY, MySQLStatementParserMERGE, MySQLStatementParserMESSAGE_TEXT, MySQLStatementParserMICROSECOND, MySQLStatementParserMIGRATE, MySQLStatementParserMINUTE, MySQLStatementParserMIN_ROWS, MySQLStatementParserMODE, MySQLStatementParserMODIFY, MySQLStatementParserMONTH, MySQLStatementParserMULTILINESTRING, MySQLStatementParserMULTIPOINT, MySQLStatementParserMULTIPOLYGON, MySQLStatementParserMUTEX, MySQLStatementParserMYSQL_ERRNO, MySQLStatementParserNAME, MySQLStatementParserNAMES, MySQLStatementParserNATIONAL, MySQLStatementParserNCHAR, MySQLStatementParserNDBCLUSTER, MySQLStatementParserNESTED, MySQLStatementParserNETWORK_NAMESPACE, MySQLStatementParserNEVER, MySQLStatementParserNEW, MySQLStatementParserNEXT, MySQLStatementParserNO, MySQLStatementParserNODEGROUP, MySQLStatementParserNONE, MySQLStatementParserNOWAIT, MySQLStatementParserNO_WAIT, MySQLStatementParserNULLS, MySQLStatementParserNUMBER, MySQLStatementParserNVARCHAR, MySQLStatementParserOFF, MySQLStatementParserOFFSET, MySQLStatementParserOJ, MySQLStatementParserOLD, MySQLStatementParserONE, MySQLStatementParserONLY, MySQLStatementParserOPEN, MySQLStatementParserOPTIONAL, MySQLStatementParserOPTIONS, MySQLStatementParserORDINALITY, MySQLStatementParserORGANIZATION, MySQLStatementParserOTHERS, MySQLStatementParserOWNER, MySQLStatementParserPACK_KEYS, MySQLStatementParserPAGE, MySQLStatementParserPARSER, MySQLStatementParserPARTIAL, MySQLStatementParserPARTITIONING, MySQLStatementParserPARTITIONS, MySQLStatementParserPASSWORD, MySQLStatementParserPASSWORD_LOCK_TIME, MySQLStatementParserPATH, MySQLStatementParserPERSIST, MySQLStatementParserPERSIST_ONLY, MySQLStatementParserPHASE, MySQLStatementParserPLUGIN, MySQLStatementParserPLUGINS, MySQLStatementParserPLUGIN_DIR, MySQLStatementParserPOINT, MySQLStatementParserPOLYGON, MySQLStatementParserPORT, MySQLStatementParserPRECEDES, MySQLStatementParserPRECEDING, MySQLStatementParserPREPARE, MySQLStatementParserPRESERVE, MySQLStatementParserPREV, MySQLStatementParserPRIVILEGES, MySQLStatementParserPRIVILEGE_CHECKS_USER, MySQLStatementParserPROCESS, MySQLStatementParserPROCESSLIST, MySQLStatementParserPROFILE, MySQLStatementParserPROFILES, MySQLStatementParserPROXY, MySQLStatementParserQUARTER, MySQLStatementParserQUERY, MySQLStatementParserQUICK, MySQLStatementParserRANDOM, MySQLStatementParserREAD_ONLY, MySQLStatementParserREBUILD, MySQLStatementParserRECOVER, MySQLStatementParserREDO_BUFFER_SIZE, MySQLStatementParserREDUNDANT, MySQLStatementParserREFERENCE, MySQLStatementParserRELAY, MySQLStatementParserRELAYLOG, MySQLStatementParserRELAY_LOG_FILE, MySQLStatementParserRELAY_LOG_POS, MySQLStatementParserRELAY_THREAD, MySQLStatementParserRELOAD, MySQLStatementParserREMOVE, MySQLStatementParserREORGANIZE, MySQLStatementParserREPAIR, MySQLStatementParserREPEATABLE, MySQLStatementParserREPLICATE_DO_DB, MySQLStatementParserREPLICATE_DO_TABLE, MySQLStatementParserREPLICATE_IGNORE_DB, MySQLStatementParserREPLICATE_IGNORE_TABLE, MySQLStatementParserREPLICATE_REWRITE_DB, MySQLStatementParserREPLICATE_WILD_DO_TABLE, MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE, MySQLStatementParserREPLICATION, MySQLStatementParserREQUIRE_ROW_FORMAT, MySQLStatementParserRESET, MySQLStatementParserRESOURCE, MySQLStatementParserRESPECT, MySQLStatementParserRESTART, MySQLStatementParserRESTORE, MySQLStatementParserRESUME, MySQLStatementParserRETAIN, MySQLStatementParserRETURNED_SQLSTATE, MySQLStatementParserRETURNING, MySQLStatementParserRETURNS, MySQLStatementParserREUSE, MySQLStatementParserREVERSE, MySQLStatementParserROLE, MySQLStatementParserROLLBACK, MySQLStatementParserROLLUP, MySQLStatementParserROTATE, MySQLStatementParserROUTINE, MySQLStatementParserROW_COUNT, MySQLStatementParserROW_FORMAT, MySQLStatementParserRTREE, MySQLStatementParserSAVEPOINT, MySQLStatementParserSCHEDULE, MySQLStatementParserSCHEMA_NAME, MySQLStatementParserSECOND, MySQLStatementParserSECONDARY, MySQLStatementParserSECONDARY_ENGINE, MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, MySQLStatementParserSECONDARY_LOAD, MySQLStatementParserSECONDARY_UNLOAD, MySQLStatementParserSECURITY, MySQLStatementParserSERIAL, MySQLStatementParserSERIALIZABLE, MySQLStatementParserSERVER, MySQLStatementParserSESSION, MySQLStatementParserSHARE, MySQLStatementParserSHUTDOWN, MySQLStatementParserSIGNED, MySQLStatementParserSIMPLE, MySQLStatementParserSLAVE, MySQLStatementParserSLOW, MySQLStatementParserSNAPSHOT, MySQLStatementParserSOCKET, MySQLStatementParserSONAME, MySQLStatementParserSOUNDS, MySQLStatementParserSOURCE, MySQLStatementParserSQL_AFTER_GTIDS, MySQLStatementParserSQL_AFTER_MTS_GAPS, MySQLStatementParserSQL_BEFORE_GTIDS, MySQLStatementParserSQL_BUFFER_RESULT, MySQLStatementParserSQL_NO_CACHE, MySQLStatementParserSQL_THREAD, MySQLStatementParserSRID, MySQLStatementParserSTACKED, MySQLStatementParserSTART, MySQLStatementParserSTARTS, MySQLStatementParserSTATS_AUTO_RECALC, MySQLStatementParserSTATS_PERSISTENT, MySQLStatementParserSTATS_SAMPLE_PAGES, MySQLStatementParserSTATUS, MySQLStatementParserSTOP, MySQLStatementParserSTORAGE, MySQLStatementParserSTREAM, MySQLStatementParserSTRING, MySQLStatementParserSUBCLASS_ORIGIN, MySQLStatementParserSUBJECT, MySQLStatementParserSUBPARTITION, MySQLStatementParserSUBPARTITIONS, MySQLStatementParserSUPER, MySQLStatementParserSUSPEND, MySQLStatementParserSWAPS, MySQLStatementParserSWITCHES, MySQLStatementParserTABLES, MySQLStatementParserTABLESPACE, MySQLStatementParserTABLE_CHECKSUM, MySQLStatementParserTABLE_NAME, MySQLStatementParserTEMPORARY, MySQLStatementParserTEMPTABLE, MySQLStatementParserTEXT, MySQLStatementParserTHAN, MySQLStatementParserTHREAD_PRIORITY, MySQLStatementParserTIES, MySQLStatementParserTIME, MySQLStatementParserTIMESTAMP, MySQLStatementParserTIMESTAMP_ADD, MySQLStatementParserTIMESTAMP_DIFF, MySQLStatementParserTLS, MySQLStatementParserTRANSACTION, MySQLStatementParserTRIGGERS, MySQLStatementParserTRUNCATE, MySQLStatementParserTYPE, MySQLStatementParserTYPES, MySQLStatementParserUNBOUNDED, MySQLStatementParserUNCOMMITTED, MySQLStatementParserUNDEFINED, MySQLStatementParserUNDOFILE, MySQLStatementParserUNDO_BUFFER_SIZE, MySQLStatementParserUNICODE, MySQLStatementParserUNINSTALL, MySQLStatementParserUNKNOWN, MySQLStatementParserUNTIL, MySQLStatementParserUPGRADE, MySQLStatementParserUSER, MySQLStatementParserUSER_RESOURCES, MySQLStatementParserUSE_FRM, MySQLStatementParserVALIDATION, MySQLStatementParserVALUE, MySQLStatementParserVARIABLES, MySQLStatementParserVCPU, MySQLStatementParserVIEW, MySQLStatementParserVISIBLE, MySQLStatementParserWAIT, MySQLStatementParserWARNINGS, MySQLStatementParserWEEK, MySQLStatementParserWEIGHT_STRING, MySQLStatementParserWITHOUT, MySQLStatementParserWORK, MySQLStatementParserWRAPPER, MySQLStatementParserX509, MySQLStatementParserXA, MySQLStatementParserXID, MySQLStatementParserXML, MySQLStatementParserYEAR, MySQLStatementParserIDENTIFIER_, MySQLStatementParserDOUBLE_QUOTED_TEXT:
			p.SetState(3877)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySQLStatementParserCOLUMN {
				{
					p.SetState(3876)
					p.Match(MySQLStatementParserCOLUMN)
				}

			}
			{
				p.SetState(3879)

				var _x = p.Identifier()

				localctx.(*AlterTableDropContext).columnInternalRef = _x
			}
			p.SetState(3881)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySQLStatementParserCASCADE || _la == MySQLStatementParserRESTRICT {
				{
					p.SetState(3880)
					p.Restrict()
				}

			}

		case MySQLStatementParserFOREIGN:
			{
				p.SetState(3883)
				p.Match(MySQLStatementParserFOREIGN)
			}
			{
				p.SetState(3884)
				p.Match(MySQLStatementParserKEY)
			}
			{
				p.SetState(3885)

				var _x = p.Identifier()

				localctx.(*AlterTableDropContext).columnInternalRef = _x
			}

		case MySQLStatementParserPRIMARY:
			{
				p.SetState(3886)
				p.Match(MySQLStatementParserPRIMARY)
			}
			{
				p.SetState(3887)
				p.Match(MySQLStatementParserKEY)
			}

		case MySQLStatementParserINDEX, MySQLStatementParserKEY:
			{
				p.SetState(3888)
				p.KeyOrIndex()
			}
			{
				p.SetState(3889)
				p.IndexName()
			}

		case MySQLStatementParserCHECK:
			{
				p.SetState(3891)
				p.Match(MySQLStatementParserCHECK)
			}
			{
				p.SetState(3892)
				p.Identifier()
			}

		case MySQLStatementParserCONSTRAINT:
			{
				p.SetState(3893)
				p.Match(MySQLStatementParserCONSTRAINT)
			}
			{
				p.SetState(3894)
				p.Identifier()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 6:
		localctx = NewDisableKeysContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3897)
			p.Match(MySQLStatementParserDISABLE)
		}
		{
			p.SetState(3898)
			p.Match(MySQLStatementParserKEYS)
		}

	case 7:
		localctx = NewEnableKeysContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(3899)
			p.Match(MySQLStatementParserENABLE)
		}
		{
			p.SetState(3900)
			p.Match(MySQLStatementParserKEYS)
		}

	case 8:
		localctx = NewAlterColumnContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(3901)
			p.Match(MySQLStatementParserALTER)
		}
		p.SetState(3903)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserCOLUMN {
			{
				p.SetState(3902)
				p.Match(MySQLStatementParserCOLUMN)
			}

		}
		{
			p.SetState(3905)

			var _x = p.Identifier()

			localctx.(*AlterColumnContext).columnInternalRef = _x
		}
		p.SetState(3917)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySQLStatementParserSET:
			{
				p.SetState(3906)
				p.Match(MySQLStatementParserSET)
			}
			{
				p.SetState(3907)
				p.Match(MySQLStatementParserDEFAULT)
			}
			p.SetState(3913)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySQLStatementParserLP_:
				{
					p.SetState(3908)
					p.Match(MySQLStatementParserLP_)
				}
				{
					p.SetState(3909)
					p.expr(0)
				}
				{
					p.SetState(3910)
					p.Match(MySQLStatementParserRP_)
				}

			case MySQLStatementParserPLUS_, MySQLStatementParserMINUS_, MySQLStatementParserDATE, MySQLStatementParserFALSE, MySQLStatementParserNULL, MySQLStatementParserTIME, MySQLStatementParserTIMESTAMP, MySQLStatementParserTRUE, MySQLStatementParserSINGLE_QUOTED_TEXT, MySQLStatementParserDOUBLE_QUOTED_TEXT, MySQLStatementParserNCHAR_TEXT, MySQLStatementParserUNDERSCORE_CHARSET, MySQLStatementParserNUMBER_, MySQLStatementParserHEX_DIGIT_, MySQLStatementParserBIT_NUM_:
				{
					p.SetState(3912)
					p.SignedLiteral()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		case MySQLStatementParserDROP:
			{
				p.SetState(3915)
				p.Match(MySQLStatementParserDROP)
			}
			{
				p.SetState(3916)
				p.Match(MySQLStatementParserDEFAULT)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 9:
		localctx = NewAlterIndexContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(3919)
			p.Match(MySQLStatementParserALTER)
		}
		{
			p.SetState(3920)
			p.Match(MySQLStatementParserINDEX)
		}
		{
			p.SetState(3921)
			p.IndexName()
		}
		{
			p.SetState(3922)
			p.Visibility()
		}

	case 10:
		localctx = NewAlterCheckContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(3924)
			p.Match(MySQLStatementParserALTER)
		}
		{
			p.SetState(3925)
			p.Match(MySQLStatementParserCHECK)
		}
		{
			p.SetState(3926)
			p.ConstraintName()
		}
		{
			p.SetState(3927)
			p.ConstraintEnforcement()
		}

	case 11:
		localctx = NewAlterConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(3929)
			p.Match(MySQLStatementParserALTER)
		}
		{
			p.SetState(3930)
			p.Match(MySQLStatementParserCONSTRAINT)
		}
		{
			p.SetState(3931)
			p.ConstraintName()
		}
		{
			p.SetState(3932)
			p.ConstraintEnforcement()
		}

	case 12:
		localctx = NewRenameColumnContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(3934)
			p.Match(MySQLStatementParserRENAME)
		}
		{
			p.SetState(3935)
			p.Match(MySQLStatementParserCOLUMN)
		}
		{
			p.SetState(3936)

			var _x = p.Identifier()

			localctx.(*RenameColumnContext).columnInternalRef = _x
		}
		{
			p.SetState(3937)
			p.Match(MySQLStatementParserTO)
		}
		{
			p.SetState(3938)
			p.Identifier()
		}

	case 13:
		localctx = NewAlterRenameTableContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(3940)
			p.Match(MySQLStatementParserRENAME)
		}
		p.SetState(3942)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserAS || _la == MySQLStatementParserTO {
			{
				p.SetState(3941)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySQLStatementParserAS || _la == MySQLStatementParserTO) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(3944)
			p.TableName()
		}

	case 14:
		localctx = NewRenameIndexContext(p, localctx)
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(3945)
			p.Match(MySQLStatementParserRENAME)
		}
		{
			p.SetState(3946)
			p.KeyOrIndex()
		}
		{
			p.SetState(3947)
			p.IndexName()
		}
		{
			p.SetState(3948)
			p.Match(MySQLStatementParserTO)
		}
		{
			p.SetState(3949)
			p.IndexName()
		}

	case 15:
		localctx = NewAlterConvertContext(p, localctx)
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(3951)
			p.Match(MySQLStatementParserCONVERT)
		}
		{
			p.SetState(3952)
			p.Match(MySQLStatementParserTO)
		}
		{
			p.SetState(3953)
			p.Charset()
		}
		{
			p.SetState(3954)
			p.CharsetName()
		}
		p.SetState(3956)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserCOLLATE {
			{
				p.SetState(3955)
				p.CollateClause()
			}

		}

	case 16:
		localctx = NewAlterTableForceContext(p, localctx)
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(3958)
			p.Match(MySQLStatementParserFORCE)
		}

	case 17:
		localctx = NewAlterTableOrderContext(p, localctx)
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(3959)
			p.Match(MySQLStatementParserORDER)
		}
		{
			p.SetState(3960)
			p.Match(MySQLStatementParserBY)
		}
		{
			p.SetState(3961)
			p.AlterOrderList()
		}

	}

	return localctx
}

// IAlterOrderListContext is an interface to support dynamic dispatch.
type IAlterOrderListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterOrderListContext differentiates from other interfaces.
	IsAlterOrderListContext()
}

type AlterOrderListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterOrderListContext() *AlterOrderListContext {
	var p = new(AlterOrderListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterOrderList
	return p
}

func (*AlterOrderListContext) IsAlterOrderListContext() {}

func NewAlterOrderListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterOrderListContext {
	var p = new(AlterOrderListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterOrderList

	return p
}

func (s *AlterOrderListContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterOrderListContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *AlterOrderListContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AlterOrderListContext) AllDirection() []IDirectionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDirectionContext)(nil)).Elem())
	var tst = make([]IDirectionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDirectionContext)
		}
	}

	return tst
}

func (s *AlterOrderListContext) Direction(i int) IDirectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDirectionContext)
}

func (s *AlterOrderListContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *AlterOrderListContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *AlterOrderListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterOrderListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterOrderListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterOrderList(s)
	}
}

func (s *AlterOrderListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterOrderList(s)
	}
}

func (s *AlterOrderListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterOrderList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterOrderList() (localctx IAlterOrderListContext) {
	this := p
	_ = this

	localctx = NewAlterOrderListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 548, MySQLStatementParserRULE_alterOrderList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3964)
		p.Identifier()
	}
	p.SetState(3966)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserASC || _la == MySQLStatementParserDESC {
		{
			p.SetState(3965)
			p.Direction()
		}

	}
	p.SetState(3975)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 433, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(3968)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(3969)
				p.Identifier()
			}
			p.SetState(3971)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySQLStatementParserASC || _la == MySQLStatementParserDESC {
				{
					p.SetState(3970)
					p.Direction()
				}

			}

		}
		p.SetState(3977)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 433, p.GetParserRuleContext())
	}

	return localctx
}

// ITableConstraintDefContext is an interface to support dynamic dispatch.
type ITableConstraintDefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableConstraintDefContext differentiates from other interfaces.
	IsTableConstraintDefContext()
}

type TableConstraintDefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableConstraintDefContext() *TableConstraintDefContext {
	var p = new(TableConstraintDefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_tableConstraintDef
	return p
}

func (*TableConstraintDefContext) IsTableConstraintDefContext() {}

func NewTableConstraintDefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableConstraintDefContext {
	var p = new(TableConstraintDefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_tableConstraintDef

	return p
}

func (s *TableConstraintDefContext) GetParser() antlr.Parser { return s.parser }

func (s *TableConstraintDefContext) KeyOrIndex() IKeyOrIndexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeyOrIndexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKeyOrIndexContext)
}

func (s *TableConstraintDefContext) KeyListWithExpression() IKeyListWithExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeyListWithExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKeyListWithExpressionContext)
}

func (s *TableConstraintDefContext) IndexNameAndType() IIndexNameAndTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexNameAndTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexNameAndTypeContext)
}

func (s *TableConstraintDefContext) AllIndexOption() []IIndexOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem())
	var tst = make([]IIndexOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexOptionContext)
		}
	}

	return tst
}

func (s *TableConstraintDefContext) IndexOption(i int) IIndexOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexOptionContext)
}

func (s *TableConstraintDefContext) FULLTEXT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFULLTEXT, 0)
}

func (s *TableConstraintDefContext) IndexName() IIndexNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexNameContext)
}

func (s *TableConstraintDefContext) AllFulltextIndexOption() []IFulltextIndexOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFulltextIndexOptionContext)(nil)).Elem())
	var tst = make([]IFulltextIndexOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFulltextIndexOptionContext)
		}
	}

	return tst
}

func (s *TableConstraintDefContext) FulltextIndexOption(i int) IFulltextIndexOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFulltextIndexOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFulltextIndexOptionContext)
}

func (s *TableConstraintDefContext) SPATIAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSPATIAL, 0)
}

func (s *TableConstraintDefContext) AllCommonIndexOption() []ICommonIndexOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICommonIndexOptionContext)(nil)).Elem())
	var tst = make([]ICommonIndexOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICommonIndexOptionContext)
		}
	}

	return tst
}

func (s *TableConstraintDefContext) CommonIndexOption(i int) ICommonIndexOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICommonIndexOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICommonIndexOptionContext)
}

func (s *TableConstraintDefContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPRIMARY, 0)
}

func (s *TableConstraintDefContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserKEY, 0)
}

func (s *TableConstraintDefContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNIQUE, 0)
}

func (s *TableConstraintDefContext) ConstraintClause() IConstraintClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraintClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstraintClauseContext)
}

func (s *TableConstraintDefContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOREIGN, 0)
}

func (s *TableConstraintDefContext) KeyParts() IKeyPartsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeyPartsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKeyPartsContext)
}

func (s *TableConstraintDefContext) ReferenceDefinition() IReferenceDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReferenceDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReferenceDefinitionContext)
}

func (s *TableConstraintDefContext) CheckConstraint() ICheckConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckConstraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICheckConstraintContext)
}

func (s *TableConstraintDefContext) ConstraintEnforcement() IConstraintEnforcementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraintEnforcementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstraintEnforcementContext)
}

func (s *TableConstraintDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableConstraintDefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableConstraintDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTableConstraintDef(s)
	}
}

func (s *TableConstraintDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTableConstraintDef(s)
	}
}

func (s *TableConstraintDefContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTableConstraintDef(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TableConstraintDef() (localctx ITableConstraintDefContext) {
	this := p
	_ = this

	localctx = NewTableConstraintDefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 550, MySQLStatementParserRULE_tableConstraintDef)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(4056)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 451, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3978)
			p.KeyOrIndex()
		}
		p.SetState(3980)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49))|(1<<(MySQLStatementParserGROUP_CONCAT-49))|(1<<(MySQLStatementParserCAST-49))|(1<<(MySQLStatementParserPOSITION-49))|(1<<(MySQLStatementParserSUBSTRING-49))|(1<<(MySQLStatementParserSUBSTR-49))|(1<<(MySQLStatementParserEXTRACT-49))|(1<<(MySQLStatementParserTRIM-49))|(1<<(MySQLStatementParserLAST_DAY-49))|(1<<(MySQLStatementParserTRADITIONAL-49))|(1<<(MySQLStatementParserTREE-49))|(1<<(MySQLStatementParserMYSQL_ADMIN-49))|(1<<(MySQLStatementParserINSTANT-49))|(1<<(MySQLStatementParserINPLACE-49))|(1<<(MySQLStatementParserCOPY-49))|(1<<(MySQLStatementParserUL_BINARY-49))|(1<<(MySQLStatementParserAUTOCOMMIT-49))|(1<<(MySQLStatementParserINNODB-49))|(1<<(MySQLStatementParserREDO_LOG-49))|(1<<(MySQLStatementParserACCOUNT-49))|(1<<(MySQLStatementParserACTION-49))|(1<<(MySQLStatementParserACTIVE-49))|(1<<(MySQLStatementParserADMIN-49))|(1<<(MySQLStatementParserAFTER-49))|(1<<(MySQLStatementParserAGAINST-49)))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(MySQLStatementParserAGGREGATE-81))|(1<<(MySQLStatementParserALGORITHM-81))|(1<<(MySQLStatementParserALWAYS-81))|(1<<(MySQLStatementParserANY-81))|(1<<(MySQLStatementParserARRAY-81))|(1<<(MySQLStatementParserASCII-81))|(1<<(MySQLStatementParserAT-81))|(1<<(MySQLStatementParserATTRIBUTE-81))|(1<<(MySQLStatementParserAUTOEXTEND_SIZE-81))|(1<<(MySQLStatementParserAUTO_INCREMENT-81))|(1<<(MySQLStatementParserAVG-81))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-81))|(1<<(MySQLStatementParserBACKUP-81))|(1<<(MySQLStatementParserBEGIN-81))|(1<<(MySQLStatementParserBINLOG-81))|(1<<(MySQLStatementParserBIT-81))|(1<<(MySQLStatementParserBLOCK-81))|(1<<(MySQLStatementParserBOOL-81))|(1<<(MySQLStatementParserBOOLEAN-81)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(MySQLStatementParserBTREE-114))|(1<<(MySQLStatementParserBUCKETS-114))|(1<<(MySQLStatementParserBYTE-114))|(1<<(MySQLStatementParserCACHE-114))|(1<<(MySQLStatementParserCASCADED-114))|(1<<(MySQLStatementParserCATALOG_NAME-114))|(1<<(MySQLStatementParserCHAIN-114))|(1<<(MySQLStatementParserCHANGED-114))|(1<<(MySQLStatementParserCHANNEL-114))|(1<<(MySQLStatementParserCHARSET-114))|(1<<(MySQLStatementParserCHECKSUM-114))|(1<<(MySQLStatementParserCIPHER-114))|(1<<(MySQLStatementParserCLASS_ORIGIN-114))|(1<<(MySQLStatementParserCLIENT-114))|(1<<(MySQLStatementParserCLONE-114))|(1<<(MySQLStatementParserCLOSE-114))|(1<<(MySQLStatementParserCOALESCE-114))|(1<<(MySQLStatementParserCODE-114))|(1<<(MySQLStatementParserCOLLATION-114))|(1<<(MySQLStatementParserCOLUMNS-114))|(1<<(MySQLStatementParserCOLUMN_FORMAT-114))|(1<<(MySQLStatementParserCOLUMN_NAME-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(MySQLStatementParserCOMMENT-146))|(1<<(MySQLStatementParserCOMMIT-146))|(1<<(MySQLStatementParserCOMMITTED-146))|(1<<(MySQLStatementParserCOMPACT-146))|(1<<(MySQLStatementParserCOMPLETION-146))|(1<<(MySQLStatementParserCOMPONENT-146))|(1<<(MySQLStatementParserCOMPRESSED-146))|(1<<(MySQLStatementParserCOMPRESSION-146))|(1<<(MySQLStatementParserCONCURRENT-146))|(1<<(MySQLStatementParserCONNECTION-146))|(1<<(MySQLStatementParserCONSISTENT-146))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-146))|(1<<(MySQLStatementParserCONSTRAINT_NAME-146))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-146))|(1<<(MySQLStatementParserCONTAINS-146))|(1<<(MySQLStatementParserCONTEXT-146))|(1<<(MySQLStatementParserCPU-146))|(1<<(MySQLStatementParserCURRENT-146))|(1<<(MySQLStatementParserCURSOR_NAME-146)))) != 0) || (((_la-178)&-(0x1f+1)) == 0 && ((1<<uint((_la-178)))&((1<<(MySQLStatementParserDATA-178))|(1<<(MySQLStatementParserDATAFILE-178))|(1<<(MySQLStatementParserDATE-178))|(1<<(MySQLStatementParserDATETIME-178))|(1<<(MySQLStatementParserDAY-178))|(1<<(MySQLStatementParserDEALLOCATE-178))|(1<<(MySQLStatementParserDEFAULT_AUTH-178))|(1<<(MySQLStatementParserDEFINER-178))|(1<<(MySQLStatementParserDEFINITION-178))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-178))|(1<<(MySQLStatementParserDESCRIPTION-178))|(1<<(MySQLStatementParserDIAGNOSTICS-178))|(1<<(MySQLStatementParserDIRECTORY-178))|(1<<(MySQLStatementParserDISABLE-178))|(1<<(MySQLStatementParserDISCARD-178))|(1<<(MySQLStatementParserDISK-178)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(MySQLStatementParserDO-213))|(1<<(MySQLStatementParserDUMPFILE-213))|(1<<(MySQLStatementParserDUPLICATE-213))|(1<<(MySQLStatementParserDYNAMIC-213))|(1<<(MySQLStatementParserENABLE-213))|(1<<(MySQLStatementParserENCRYPTION-213))|(1<<(MySQLStatementParserEND-213))|(1<<(MySQLStatementParserENDS-213))|(1<<(MySQLStatementParserENFORCED-213))|(1<<(MySQLStatementParserENGINE-213))|(1<<(MySQLStatementParserENGINES-213))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-213))|(1<<(MySQLStatementParserENUM-213))|(1<<(MySQLStatementParserERROR-213))|(1<<(MySQLStatementParserERRORS-213))|(1<<(MySQLStatementParserESCAPE-213))|(1<<(MySQLStatementParserEVENT-213))|(1<<(MySQLStatementParserEVENTS-213))|(1<<(MySQLStatementParserEVERY-213))|(1<<(MySQLStatementParserEXCHANGE-213))|(1<<(MySQLStatementParserEXCLUDE-213))|(1<<(MySQLStatementParserEXECUTE-213)))) != 0) || (((_la-247)&-(0x1f+1)) == 0 && ((1<<uint((_la-247)))&((1<<(MySQLStatementParserEXPANSION-247))|(1<<(MySQLStatementParserEXPIRE-247))|(1<<(MySQLStatementParserEXPORT-247))|(1<<(MySQLStatementParserEXTENDED-247))|(1<<(MySQLStatementParserEXTENT_SIZE-247))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-247))|(1<<(MySQLStatementParserFAST-247))|(1<<(MySQLStatementParserFAULTS-247))|(1<<(MySQLStatementParserFILE-247))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-247))|(1<<(MySQLStatementParserFILTER-247))|(1<<(MySQLStatementParserFIRST-247))|(1<<(MySQLStatementParserFIXED-247))|(1<<(MySQLStatementParserFLUSH-247))|(1<<(MySQLStatementParserFOLLOWING-247))|(1<<(MySQLStatementParserFOLLOWS-247))|(1<<(MySQLStatementParserFORMAT-247))|(1<<(MySQLStatementParserFOUND-247))|(1<<(MySQLStatementParserFULL-247)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(MySQLStatementParserGENERAL-279))|(1<<(MySQLStatementParserGEOMETRY-279))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-279))|(1<<(MySQLStatementParserGET_FORMAT-279))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-279))|(1<<(MySQLStatementParserGLOBAL-279))|(1<<(MySQLStatementParserGRANTS-279))|(1<<(MySQLStatementParserGROUP_REPLICATION-279))|(1<<(MySQLStatementParserHANDLER-279))|(1<<(MySQLStatementParserHASH-279))|(1<<(MySQLStatementParserHELP-279))|(1<<(MySQLStatementParserHISTOGRAM-279))|(1<<(MySQLStatementParserHISTORY-279))|(1<<(MySQLStatementParserHOST-279))|(1<<(MySQLStatementParserHOSTS-279))|(1<<(MySQLStatementParserHOUR-279))|(1<<(MySQLStatementParserIDENTIFIED-279))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-279))|(1<<(MySQLStatementParserIMPORT-279)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySQLStatementParserINACTIVE-312))|(1<<(MySQLStatementParserINDEXES-312))|(1<<(MySQLStatementParserINITIAL_SIZE-312))|(1<<(MySQLStatementParserINSERT_METHOD-312))|(1<<(MySQLStatementParserINSTALL-312))|(1<<(MySQLStatementParserINSTANCE-312))|(1<<(MySQLStatementParserINVISIBLE-312))|(1<<(MySQLStatementParserINVOKER-312))|(1<<(MySQLStatementParserIO-312))|(1<<(MySQLStatementParserIPC-312))|(1<<(MySQLStatementParserISOLATION-312))|(1<<(MySQLStatementParserISSUER-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySQLStatementParserJSON-344))|(1<<(MySQLStatementParserJSON_VALUE-344))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-344))|(1<<(MySQLStatementParserLANGUAGE-344))|(1<<(MySQLStatementParserLAST-344))|(1<<(MySQLStatementParserLAST_VALUE-344))|(1<<(MySQLStatementParserLEAVES-344))|(1<<(MySQLStatementParserLESS-344))|(1<<(MySQLStatementParserLEVEL-344))|(1<<(MySQLStatementParserLINESTRING-344))|(1<<(MySQLStatementParserLIST-344))|(1<<(MySQLStatementParserLOCAL-344))|(1<<(MySQLStatementParserLOCKED-344))|(1<<(MySQLStatementParserLOCKS-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySQLStatementParserLOGFILE-376))|(1<<(MySQLStatementParserLOGS-376))|(1<<(MySQLStatementParserMASTER-376))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-376))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-376))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-376))|(1<<(MySQLStatementParserMASTER_DELAY-376))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-376))|(1<<(MySQLStatementParserMASTER_HOST-376))|(1<<(MySQLStatementParserMASTER_LOG_FILE-376))|(1<<(MySQLStatementParserMASTER_LOG_POS-376))|(1<<(MySQLStatementParserMASTER_PASSWORD-376))|(1<<(MySQLStatementParserMASTER_PORT-376))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-376))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-376))|(1<<(MySQLStatementParserMASTER_SERVER_ID-376))|(1<<(MySQLStatementParserMASTER_SSL-376))|(1<<(MySQLStatementParserMASTER_SSL_CA-376))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_CERT-376))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-376))|(1<<(MySQLStatementParserMASTER_SSL_CRL-376))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_KEY-376))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySQLStatementParserMASTER_TLS_VERSION-408))|(1<<(MySQLStatementParserMASTER_USER-408))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-408))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_ROWS-408))|(1<<(MySQLStatementParserMAX_SIZE-408))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-408))|(1<<(MySQLStatementParserMEDIUM-408))|(1<<(MySQLStatementParserMEMBER-408))|(1<<(MySQLStatementParserMEMORY-408))|(1<<(MySQLStatementParserMERGE-408))|(1<<(MySQLStatementParserMESSAGE_TEXT-408))|(1<<(MySQLStatementParserMICROSECOND-408))|(1<<(MySQLStatementParserMIGRATE-408))|(1<<(MySQLStatementParserMINUTE-408))|(1<<(MySQLStatementParserMIN_ROWS-408))|(1<<(MySQLStatementParserMODE-408))|(1<<(MySQLStatementParserMODIFY-408))|(1<<(MySQLStatementParserMONTH-408))|(1<<(MySQLStatementParserMULTILINESTRING-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySQLStatementParserMULTIPOINT-440))|(1<<(MySQLStatementParserMULTIPOLYGON-440))|(1<<(MySQLStatementParserMUTEX-440))|(1<<(MySQLStatementParserMYSQL_ERRNO-440))|(1<<(MySQLStatementParserNAME-440))|(1<<(MySQLStatementParserNAMES-440))|(1<<(MySQLStatementParserNATIONAL-440))|(1<<(MySQLStatementParserNCHAR-440))|(1<<(MySQLStatementParserNDBCLUSTER-440))|(1<<(MySQLStatementParserNESTED-440))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-440))|(1<<(MySQLStatementParserNEVER-440))|(1<<(MySQLStatementParserNEW-440))|(1<<(MySQLStatementParserNEXT-440))|(1<<(MySQLStatementParserNO-440))|(1<<(MySQLStatementParserNODEGROUP-440))|(1<<(MySQLStatementParserNONE-440))|(1<<(MySQLStatementParserNOWAIT-440))|(1<<(MySQLStatementParserNO_WAIT-440))|(1<<(MySQLStatementParserNULLS-440))|(1<<(MySQLStatementParserNUMBER-440))|(1<<(MySQLStatementParserNVARCHAR-440))|(1<<(MySQLStatementParserOFF-440))|(1<<(MySQLStatementParserOFFSET-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySQLStatementParserOJ-472))|(1<<(MySQLStatementParserOLD-472))|(1<<(MySQLStatementParserONE-472))|(1<<(MySQLStatementParserONLY-472))|(1<<(MySQLStatementParserOPEN-472))|(1<<(MySQLStatementParserOPTIONAL-472))|(1<<(MySQLStatementParserOPTIONS-472))|(1<<(MySQLStatementParserORDINALITY-472))|(1<<(MySQLStatementParserORGANIZATION-472))|(1<<(MySQLStatementParserOTHERS-472))|(1<<(MySQLStatementParserOWNER-472))|(1<<(MySQLStatementParserPACK_KEYS-472))|(1<<(MySQLStatementParserPAGE-472))|(1<<(MySQLStatementParserPARSER-472))|(1<<(MySQLStatementParserPARTIAL-472))|(1<<(MySQLStatementParserPARTITIONING-472))|(1<<(MySQLStatementParserPARTITIONS-472))|(1<<(MySQLStatementParserPASSWORD-472))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-472))|(1<<(MySQLStatementParserPATH-472)))) != 0) || (((_la-505)&-(0x1f+1)) == 0 && ((1<<uint((_la-505)))&((1<<(MySQLStatementParserPERSIST-505))|(1<<(MySQLStatementParserPERSIST_ONLY-505))|(1<<(MySQLStatementParserPHASE-505))|(1<<(MySQLStatementParserPLUGIN-505))|(1<<(MySQLStatementParserPLUGINS-505))|(1<<(MySQLStatementParserPLUGIN_DIR-505))|(1<<(MySQLStatementParserPOINT-505))|(1<<(MySQLStatementParserPOLYGON-505))|(1<<(MySQLStatementParserPORT-505))|(1<<(MySQLStatementParserPRECEDES-505))|(1<<(MySQLStatementParserPRECEDING-505))|(1<<(MySQLStatementParserPREPARE-505))|(1<<(MySQLStatementParserPRESERVE-505))|(1<<(MySQLStatementParserPREV-505))|(1<<(MySQLStatementParserPRIVILEGES-505))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-505))|(1<<(MySQLStatementParserPROCESS-505))|(1<<(MySQLStatementParserPROCESSLIST-505))|(1<<(MySQLStatementParserPROFILE-505))|(1<<(MySQLStatementParserPROFILES-505))|(1<<(MySQLStatementParserPROXY-505))|(1<<(MySQLStatementParserQUARTER-505))|(1<<(MySQLStatementParserQUERY-505))|(1<<(MySQLStatementParserQUICK-505))|(1<<(MySQLStatementParserRANDOM-505)))) != 0) || (((_la-538)&-(0x1f+1)) == 0 && ((1<<uint((_la-538)))&((1<<(MySQLStatementParserREAD_ONLY-538))|(1<<(MySQLStatementParserREBUILD-538))|(1<<(MySQLStatementParserRECOVER-538))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-538))|(1<<(MySQLStatementParserREDUNDANT-538))|(1<<(MySQLStatementParserREFERENCE-538))|(1<<(MySQLStatementParserRELAY-538))|(1<<(MySQLStatementParserRELAYLOG-538))|(1<<(MySQLStatementParserRELAY_LOG_FILE-538))|(1<<(MySQLStatementParserRELAY_LOG_POS-538))|(1<<(MySQLStatementParserRELAY_THREAD-538))|(1<<(MySQLStatementParserRELOAD-538))|(1<<(MySQLStatementParserREMOVE-538))|(1<<(MySQLStatementParserREORGANIZE-538))|(1<<(MySQLStatementParserREPAIR-538))|(1<<(MySQLStatementParserREPEATABLE-538))|(1<<(MySQLStatementParserREPLICATE_DO_DB-538))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-538)))) != 0) || (((_la-570)&-(0x1f+1)) == 0 && ((1<<uint((_la-570)))&((1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-570))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-570))|(1<<(MySQLStatementParserREPLICATION-570))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-570))|(1<<(MySQLStatementParserRESET-570))|(1<<(MySQLStatementParserRESOURCE-570))|(1<<(MySQLStatementParserRESPECT-570))|(1<<(MySQLStatementParserRESTART-570))|(1<<(MySQLStatementParserRESTORE-570))|(1<<(MySQLStatementParserRESUME-570))|(1<<(MySQLStatementParserRETAIN-570))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-570))|(1<<(MySQLStatementParserRETURNING-570))|(1<<(MySQLStatementParserRETURNS-570))|(1<<(MySQLStatementParserREUSE-570))|(1<<(MySQLStatementParserREVERSE-570))|(1<<(MySQLStatementParserROLE-570))|(1<<(MySQLStatementParserROLLBACK-570))|(1<<(MySQLStatementParserROLLUP-570))|(1<<(MySQLStatementParserROTATE-570))|(1<<(MySQLStatementParserROUTINE-570))|(1<<(MySQLStatementParserROW_COUNT-570))|(1<<(MySQLStatementParserROW_FORMAT-570)))) != 0) || (((_la-603)&-(0x1f+1)) == 0 && ((1<<uint((_la-603)))&((1<<(MySQLStatementParserRTREE-603))|(1<<(MySQLStatementParserSAVEPOINT-603))|(1<<(MySQLStatementParserSCHEDULE-603))|(1<<(MySQLStatementParserSCHEMA_NAME-603))|(1<<(MySQLStatementParserSECOND-603))|(1<<(MySQLStatementParserSECONDARY-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-603))|(1<<(MySQLStatementParserSECONDARY_LOAD-603))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-603))|(1<<(MySQLStatementParserSECURITY-603))|(1<<(MySQLStatementParserSERIAL-603))|(1<<(MySQLStatementParserSERIALIZABLE-603))|(1<<(MySQLStatementParserSERVER-603))|(1<<(MySQLStatementParserSESSION-603))|(1<<(MySQLStatementParserSHARE-603))|(1<<(MySQLStatementParserSHUTDOWN-603))|(1<<(MySQLStatementParserSIGNED-603))|(1<<(MySQLStatementParserSIMPLE-603))|(1<<(MySQLStatementParserSLAVE-603))|(1<<(MySQLStatementParserSLOW-603)))) != 0) || (((_la-635)&-(0x1f+1)) == 0 && ((1<<uint((_la-635)))&((1<<(MySQLStatementParserSNAPSHOT-635))|(1<<(MySQLStatementParserSOCKET-635))|(1<<(MySQLStatementParserSONAME-635))|(1<<(MySQLStatementParserSOUNDS-635))|(1<<(MySQLStatementParserSOURCE-635))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-635))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-635))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-635))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-635))|(1<<(MySQLStatementParserSQL_NO_CACHE-635))|(1<<(MySQLStatementParserSQL_THREAD-635))|(1<<(MySQLStatementParserSRID-635))|(1<<(MySQLStatementParserSTACKED-635))|(1<<(MySQLStatementParserSTART-635))|(1<<(MySQLStatementParserSTARTS-635))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-635))|(1<<(MySQLStatementParserSTATS_PERSISTENT-635))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-635))|(1<<(MySQLStatementParserSTATUS-635))|(1<<(MySQLStatementParserSTOP-635))|(1<<(MySQLStatementParserSTORAGE-635)))) != 0) || (((_la-669)&-(0x1f+1)) == 0 && ((1<<uint((_la-669)))&((1<<(MySQLStatementParserSTREAM-669))|(1<<(MySQLStatementParserSTRING-669))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-669))|(1<<(MySQLStatementParserSUBJECT-669))|(1<<(MySQLStatementParserSUBPARTITION-669))|(1<<(MySQLStatementParserSUBPARTITIONS-669))|(1<<(MySQLStatementParserSUPER-669))|(1<<(MySQLStatementParserSUSPEND-669))|(1<<(MySQLStatementParserSWAPS-669))|(1<<(MySQLStatementParserSWITCHES-669))|(1<<(MySQLStatementParserTABLES-669))|(1<<(MySQLStatementParserTABLESPACE-669))|(1<<(MySQLStatementParserTABLE_CHECKSUM-669))|(1<<(MySQLStatementParserTABLE_NAME-669))|(1<<(MySQLStatementParserTEMPORARY-669))|(1<<(MySQLStatementParserTEMPTABLE-669))|(1<<(MySQLStatementParserTEXT-669))|(1<<(MySQLStatementParserTHAN-669))|(1<<(MySQLStatementParserTHREAD_PRIORITY-669))|(1<<(MySQLStatementParserTIES-669))|(1<<(MySQLStatementParserTIME-669))|(1<<(MySQLStatementParserTIMESTAMP-669))|(1<<(MySQLStatementParserTIMESTAMP_ADD-669))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-669))|(1<<(MySQLStatementParserTLS-669)))) != 0) || (((_la-703)&-(0x1f+1)) == 0 && ((1<<uint((_la-703)))&((1<<(MySQLStatementParserTRANSACTION-703))|(1<<(MySQLStatementParserTRIGGERS-703))|(1<<(MySQLStatementParserTRUNCATE-703))|(1<<(MySQLStatementParserTYPE-703))|(1<<(MySQLStatementParserTYPES-703))|(1<<(MySQLStatementParserUNBOUNDED-703))|(1<<(MySQLStatementParserUNCOMMITTED-703))|(1<<(MySQLStatementParserUNDEFINED-703))|(1<<(MySQLStatementParserUNDOFILE-703))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-703))|(1<<(MySQLStatementParserUNICODE-703))|(1<<(MySQLStatementParserUNINSTALL-703))|(1<<(MySQLStatementParserUNKNOWN-703))|(1<<(MySQLStatementParserUNTIL-703))|(1<<(MySQLStatementParserUPGRADE-703))|(1<<(MySQLStatementParserUSER-703))|(1<<(MySQLStatementParserUSER_RESOURCES-703))|(1<<(MySQLStatementParserUSE_FRM-703)))) != 0) || (((_la-735)&-(0x1f+1)) == 0 && ((1<<uint((_la-735)))&((1<<(MySQLStatementParserVALIDATION-735))|(1<<(MySQLStatementParserVALUE-735))|(1<<(MySQLStatementParserVARIABLES-735))|(1<<(MySQLStatementParserVCPU-735))|(1<<(MySQLStatementParserVIEW-735))|(1<<(MySQLStatementParserVISIBLE-735))|(1<<(MySQLStatementParserWAIT-735))|(1<<(MySQLStatementParserWARNINGS-735))|(1<<(MySQLStatementParserWEEK-735))|(1<<(MySQLStatementParserWEIGHT_STRING-735))|(1<<(MySQLStatementParserWITHOUT-735))|(1<<(MySQLStatementParserWORK-735))|(1<<(MySQLStatementParserWRAPPER-735))|(1<<(MySQLStatementParserX509-735))|(1<<(MySQLStatementParserXA-735))|(1<<(MySQLStatementParserXID-735))|(1<<(MySQLStatementParserXML-735))|(1<<(MySQLStatementParserYEAR-735)))) != 0) || _la == MySQLStatementParserIDENTIFIER_ || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
			{
				p.SetState(3979)
				p.IndexNameAndType()
			}

		}
		{
			p.SetState(3982)
			p.KeyListWithExpression()
		}
		p.SetState(3986)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 435, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(3983)
					p.IndexOption()
				}

			}
			p.SetState(3988)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 435, p.GetParserRuleContext())
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3989)
			p.Match(MySQLStatementParserFULLTEXT)
		}
		p.SetState(3991)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserINDEX || _la == MySQLStatementParserKEY {
			{
				p.SetState(3990)
				p.KeyOrIndex()
			}

		}
		p.SetState(3994)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49))|(1<<(MySQLStatementParserGROUP_CONCAT-49))|(1<<(MySQLStatementParserCAST-49))|(1<<(MySQLStatementParserPOSITION-49))|(1<<(MySQLStatementParserSUBSTRING-49))|(1<<(MySQLStatementParserSUBSTR-49))|(1<<(MySQLStatementParserEXTRACT-49))|(1<<(MySQLStatementParserTRIM-49))|(1<<(MySQLStatementParserLAST_DAY-49))|(1<<(MySQLStatementParserTRADITIONAL-49))|(1<<(MySQLStatementParserTREE-49))|(1<<(MySQLStatementParserMYSQL_ADMIN-49))|(1<<(MySQLStatementParserINSTANT-49))|(1<<(MySQLStatementParserINPLACE-49))|(1<<(MySQLStatementParserCOPY-49))|(1<<(MySQLStatementParserUL_BINARY-49))|(1<<(MySQLStatementParserAUTOCOMMIT-49))|(1<<(MySQLStatementParserINNODB-49))|(1<<(MySQLStatementParserREDO_LOG-49))|(1<<(MySQLStatementParserACCOUNT-49))|(1<<(MySQLStatementParserACTION-49))|(1<<(MySQLStatementParserACTIVE-49))|(1<<(MySQLStatementParserADMIN-49))|(1<<(MySQLStatementParserAFTER-49))|(1<<(MySQLStatementParserAGAINST-49)))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(MySQLStatementParserAGGREGATE-81))|(1<<(MySQLStatementParserALGORITHM-81))|(1<<(MySQLStatementParserALWAYS-81))|(1<<(MySQLStatementParserANY-81))|(1<<(MySQLStatementParserARRAY-81))|(1<<(MySQLStatementParserASCII-81))|(1<<(MySQLStatementParserAT-81))|(1<<(MySQLStatementParserATTRIBUTE-81))|(1<<(MySQLStatementParserAUTOEXTEND_SIZE-81))|(1<<(MySQLStatementParserAUTO_INCREMENT-81))|(1<<(MySQLStatementParserAVG-81))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-81))|(1<<(MySQLStatementParserBACKUP-81))|(1<<(MySQLStatementParserBEGIN-81))|(1<<(MySQLStatementParserBINLOG-81))|(1<<(MySQLStatementParserBIT-81))|(1<<(MySQLStatementParserBLOCK-81))|(1<<(MySQLStatementParserBOOL-81))|(1<<(MySQLStatementParserBOOLEAN-81)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(MySQLStatementParserBTREE-114))|(1<<(MySQLStatementParserBUCKETS-114))|(1<<(MySQLStatementParserBYTE-114))|(1<<(MySQLStatementParserCACHE-114))|(1<<(MySQLStatementParserCASCADED-114))|(1<<(MySQLStatementParserCATALOG_NAME-114))|(1<<(MySQLStatementParserCHAIN-114))|(1<<(MySQLStatementParserCHANGED-114))|(1<<(MySQLStatementParserCHANNEL-114))|(1<<(MySQLStatementParserCHARSET-114))|(1<<(MySQLStatementParserCHECKSUM-114))|(1<<(MySQLStatementParserCIPHER-114))|(1<<(MySQLStatementParserCLASS_ORIGIN-114))|(1<<(MySQLStatementParserCLIENT-114))|(1<<(MySQLStatementParserCLONE-114))|(1<<(MySQLStatementParserCLOSE-114))|(1<<(MySQLStatementParserCOALESCE-114))|(1<<(MySQLStatementParserCODE-114))|(1<<(MySQLStatementParserCOLLATION-114))|(1<<(MySQLStatementParserCOLUMNS-114))|(1<<(MySQLStatementParserCOLUMN_FORMAT-114))|(1<<(MySQLStatementParserCOLUMN_NAME-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(MySQLStatementParserCOMMENT-146))|(1<<(MySQLStatementParserCOMMIT-146))|(1<<(MySQLStatementParserCOMMITTED-146))|(1<<(MySQLStatementParserCOMPACT-146))|(1<<(MySQLStatementParserCOMPLETION-146))|(1<<(MySQLStatementParserCOMPONENT-146))|(1<<(MySQLStatementParserCOMPRESSED-146))|(1<<(MySQLStatementParserCOMPRESSION-146))|(1<<(MySQLStatementParserCONCURRENT-146))|(1<<(MySQLStatementParserCONNECTION-146))|(1<<(MySQLStatementParserCONSISTENT-146))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-146))|(1<<(MySQLStatementParserCONSTRAINT_NAME-146))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-146))|(1<<(MySQLStatementParserCONTAINS-146))|(1<<(MySQLStatementParserCONTEXT-146))|(1<<(MySQLStatementParserCPU-146))|(1<<(MySQLStatementParserCURRENT-146))|(1<<(MySQLStatementParserCURSOR_NAME-146)))) != 0) || (((_la-178)&-(0x1f+1)) == 0 && ((1<<uint((_la-178)))&((1<<(MySQLStatementParserDATA-178))|(1<<(MySQLStatementParserDATAFILE-178))|(1<<(MySQLStatementParserDATE-178))|(1<<(MySQLStatementParserDATETIME-178))|(1<<(MySQLStatementParserDAY-178))|(1<<(MySQLStatementParserDEALLOCATE-178))|(1<<(MySQLStatementParserDEFAULT_AUTH-178))|(1<<(MySQLStatementParserDEFINER-178))|(1<<(MySQLStatementParserDEFINITION-178))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-178))|(1<<(MySQLStatementParserDESCRIPTION-178))|(1<<(MySQLStatementParserDIAGNOSTICS-178))|(1<<(MySQLStatementParserDIRECTORY-178))|(1<<(MySQLStatementParserDISABLE-178))|(1<<(MySQLStatementParserDISCARD-178))|(1<<(MySQLStatementParserDISK-178)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(MySQLStatementParserDO-213))|(1<<(MySQLStatementParserDUMPFILE-213))|(1<<(MySQLStatementParserDUPLICATE-213))|(1<<(MySQLStatementParserDYNAMIC-213))|(1<<(MySQLStatementParserENABLE-213))|(1<<(MySQLStatementParserENCRYPTION-213))|(1<<(MySQLStatementParserEND-213))|(1<<(MySQLStatementParserENDS-213))|(1<<(MySQLStatementParserENFORCED-213))|(1<<(MySQLStatementParserENGINE-213))|(1<<(MySQLStatementParserENGINES-213))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-213))|(1<<(MySQLStatementParserENUM-213))|(1<<(MySQLStatementParserERROR-213))|(1<<(MySQLStatementParserERRORS-213))|(1<<(MySQLStatementParserESCAPE-213))|(1<<(MySQLStatementParserEVENT-213))|(1<<(MySQLStatementParserEVENTS-213))|(1<<(MySQLStatementParserEVERY-213))|(1<<(MySQLStatementParserEXCHANGE-213))|(1<<(MySQLStatementParserEXCLUDE-213))|(1<<(MySQLStatementParserEXECUTE-213)))) != 0) || (((_la-247)&-(0x1f+1)) == 0 && ((1<<uint((_la-247)))&((1<<(MySQLStatementParserEXPANSION-247))|(1<<(MySQLStatementParserEXPIRE-247))|(1<<(MySQLStatementParserEXPORT-247))|(1<<(MySQLStatementParserEXTENDED-247))|(1<<(MySQLStatementParserEXTENT_SIZE-247))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-247))|(1<<(MySQLStatementParserFAST-247))|(1<<(MySQLStatementParserFAULTS-247))|(1<<(MySQLStatementParserFILE-247))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-247))|(1<<(MySQLStatementParserFILTER-247))|(1<<(MySQLStatementParserFIRST-247))|(1<<(MySQLStatementParserFIXED-247))|(1<<(MySQLStatementParserFLUSH-247))|(1<<(MySQLStatementParserFOLLOWING-247))|(1<<(MySQLStatementParserFOLLOWS-247))|(1<<(MySQLStatementParserFORMAT-247))|(1<<(MySQLStatementParserFOUND-247))|(1<<(MySQLStatementParserFULL-247)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(MySQLStatementParserGENERAL-279))|(1<<(MySQLStatementParserGEOMETRY-279))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-279))|(1<<(MySQLStatementParserGET_FORMAT-279))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-279))|(1<<(MySQLStatementParserGLOBAL-279))|(1<<(MySQLStatementParserGRANTS-279))|(1<<(MySQLStatementParserGROUP_REPLICATION-279))|(1<<(MySQLStatementParserHANDLER-279))|(1<<(MySQLStatementParserHASH-279))|(1<<(MySQLStatementParserHELP-279))|(1<<(MySQLStatementParserHISTOGRAM-279))|(1<<(MySQLStatementParserHISTORY-279))|(1<<(MySQLStatementParserHOST-279))|(1<<(MySQLStatementParserHOSTS-279))|(1<<(MySQLStatementParserHOUR-279))|(1<<(MySQLStatementParserIDENTIFIED-279))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-279))|(1<<(MySQLStatementParserIMPORT-279)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySQLStatementParserINACTIVE-312))|(1<<(MySQLStatementParserINDEXES-312))|(1<<(MySQLStatementParserINITIAL_SIZE-312))|(1<<(MySQLStatementParserINSERT_METHOD-312))|(1<<(MySQLStatementParserINSTALL-312))|(1<<(MySQLStatementParserINSTANCE-312))|(1<<(MySQLStatementParserINVISIBLE-312))|(1<<(MySQLStatementParserINVOKER-312))|(1<<(MySQLStatementParserIO-312))|(1<<(MySQLStatementParserIPC-312))|(1<<(MySQLStatementParserISOLATION-312))|(1<<(MySQLStatementParserISSUER-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySQLStatementParserJSON-344))|(1<<(MySQLStatementParserJSON_VALUE-344))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-344))|(1<<(MySQLStatementParserLANGUAGE-344))|(1<<(MySQLStatementParserLAST-344))|(1<<(MySQLStatementParserLAST_VALUE-344))|(1<<(MySQLStatementParserLEAVES-344))|(1<<(MySQLStatementParserLESS-344))|(1<<(MySQLStatementParserLEVEL-344))|(1<<(MySQLStatementParserLINESTRING-344))|(1<<(MySQLStatementParserLIST-344))|(1<<(MySQLStatementParserLOCAL-344))|(1<<(MySQLStatementParserLOCKED-344))|(1<<(MySQLStatementParserLOCKS-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySQLStatementParserLOGFILE-376))|(1<<(MySQLStatementParserLOGS-376))|(1<<(MySQLStatementParserMASTER-376))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-376))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-376))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-376))|(1<<(MySQLStatementParserMASTER_DELAY-376))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-376))|(1<<(MySQLStatementParserMASTER_HOST-376))|(1<<(MySQLStatementParserMASTER_LOG_FILE-376))|(1<<(MySQLStatementParserMASTER_LOG_POS-376))|(1<<(MySQLStatementParserMASTER_PASSWORD-376))|(1<<(MySQLStatementParserMASTER_PORT-376))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-376))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-376))|(1<<(MySQLStatementParserMASTER_SERVER_ID-376))|(1<<(MySQLStatementParserMASTER_SSL-376))|(1<<(MySQLStatementParserMASTER_SSL_CA-376))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_CERT-376))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-376))|(1<<(MySQLStatementParserMASTER_SSL_CRL-376))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_KEY-376))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySQLStatementParserMASTER_TLS_VERSION-408))|(1<<(MySQLStatementParserMASTER_USER-408))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-408))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_ROWS-408))|(1<<(MySQLStatementParserMAX_SIZE-408))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-408))|(1<<(MySQLStatementParserMEDIUM-408))|(1<<(MySQLStatementParserMEMBER-408))|(1<<(MySQLStatementParserMEMORY-408))|(1<<(MySQLStatementParserMERGE-408))|(1<<(MySQLStatementParserMESSAGE_TEXT-408))|(1<<(MySQLStatementParserMICROSECOND-408))|(1<<(MySQLStatementParserMIGRATE-408))|(1<<(MySQLStatementParserMINUTE-408))|(1<<(MySQLStatementParserMIN_ROWS-408))|(1<<(MySQLStatementParserMODE-408))|(1<<(MySQLStatementParserMODIFY-408))|(1<<(MySQLStatementParserMONTH-408))|(1<<(MySQLStatementParserMULTILINESTRING-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySQLStatementParserMULTIPOINT-440))|(1<<(MySQLStatementParserMULTIPOLYGON-440))|(1<<(MySQLStatementParserMUTEX-440))|(1<<(MySQLStatementParserMYSQL_ERRNO-440))|(1<<(MySQLStatementParserNAME-440))|(1<<(MySQLStatementParserNAMES-440))|(1<<(MySQLStatementParserNATIONAL-440))|(1<<(MySQLStatementParserNCHAR-440))|(1<<(MySQLStatementParserNDBCLUSTER-440))|(1<<(MySQLStatementParserNESTED-440))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-440))|(1<<(MySQLStatementParserNEVER-440))|(1<<(MySQLStatementParserNEW-440))|(1<<(MySQLStatementParserNEXT-440))|(1<<(MySQLStatementParserNO-440))|(1<<(MySQLStatementParserNODEGROUP-440))|(1<<(MySQLStatementParserNONE-440))|(1<<(MySQLStatementParserNOWAIT-440))|(1<<(MySQLStatementParserNO_WAIT-440))|(1<<(MySQLStatementParserNULLS-440))|(1<<(MySQLStatementParserNUMBER-440))|(1<<(MySQLStatementParserNVARCHAR-440))|(1<<(MySQLStatementParserOFF-440))|(1<<(MySQLStatementParserOFFSET-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySQLStatementParserOJ-472))|(1<<(MySQLStatementParserOLD-472))|(1<<(MySQLStatementParserONE-472))|(1<<(MySQLStatementParserONLY-472))|(1<<(MySQLStatementParserOPEN-472))|(1<<(MySQLStatementParserOPTIONAL-472))|(1<<(MySQLStatementParserOPTIONS-472))|(1<<(MySQLStatementParserORDINALITY-472))|(1<<(MySQLStatementParserORGANIZATION-472))|(1<<(MySQLStatementParserOTHERS-472))|(1<<(MySQLStatementParserOWNER-472))|(1<<(MySQLStatementParserPACK_KEYS-472))|(1<<(MySQLStatementParserPAGE-472))|(1<<(MySQLStatementParserPARSER-472))|(1<<(MySQLStatementParserPARTIAL-472))|(1<<(MySQLStatementParserPARTITIONING-472))|(1<<(MySQLStatementParserPARTITIONS-472))|(1<<(MySQLStatementParserPASSWORD-472))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-472))|(1<<(MySQLStatementParserPATH-472)))) != 0) || (((_la-505)&-(0x1f+1)) == 0 && ((1<<uint((_la-505)))&((1<<(MySQLStatementParserPERSIST-505))|(1<<(MySQLStatementParserPERSIST_ONLY-505))|(1<<(MySQLStatementParserPHASE-505))|(1<<(MySQLStatementParserPLUGIN-505))|(1<<(MySQLStatementParserPLUGINS-505))|(1<<(MySQLStatementParserPLUGIN_DIR-505))|(1<<(MySQLStatementParserPOINT-505))|(1<<(MySQLStatementParserPOLYGON-505))|(1<<(MySQLStatementParserPORT-505))|(1<<(MySQLStatementParserPRECEDES-505))|(1<<(MySQLStatementParserPRECEDING-505))|(1<<(MySQLStatementParserPREPARE-505))|(1<<(MySQLStatementParserPRESERVE-505))|(1<<(MySQLStatementParserPREV-505))|(1<<(MySQLStatementParserPRIVILEGES-505))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-505))|(1<<(MySQLStatementParserPROCESS-505))|(1<<(MySQLStatementParserPROCESSLIST-505))|(1<<(MySQLStatementParserPROFILE-505))|(1<<(MySQLStatementParserPROFILES-505))|(1<<(MySQLStatementParserPROXY-505))|(1<<(MySQLStatementParserQUARTER-505))|(1<<(MySQLStatementParserQUERY-505))|(1<<(MySQLStatementParserQUICK-505))|(1<<(MySQLStatementParserRANDOM-505)))) != 0) || (((_la-538)&-(0x1f+1)) == 0 && ((1<<uint((_la-538)))&((1<<(MySQLStatementParserREAD_ONLY-538))|(1<<(MySQLStatementParserREBUILD-538))|(1<<(MySQLStatementParserRECOVER-538))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-538))|(1<<(MySQLStatementParserREDUNDANT-538))|(1<<(MySQLStatementParserREFERENCE-538))|(1<<(MySQLStatementParserRELAY-538))|(1<<(MySQLStatementParserRELAYLOG-538))|(1<<(MySQLStatementParserRELAY_LOG_FILE-538))|(1<<(MySQLStatementParserRELAY_LOG_POS-538))|(1<<(MySQLStatementParserRELAY_THREAD-538))|(1<<(MySQLStatementParserRELOAD-538))|(1<<(MySQLStatementParserREMOVE-538))|(1<<(MySQLStatementParserREORGANIZE-538))|(1<<(MySQLStatementParserREPAIR-538))|(1<<(MySQLStatementParserREPEATABLE-538))|(1<<(MySQLStatementParserREPLICATE_DO_DB-538))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-538)))) != 0) || (((_la-570)&-(0x1f+1)) == 0 && ((1<<uint((_la-570)))&((1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-570))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-570))|(1<<(MySQLStatementParserREPLICATION-570))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-570))|(1<<(MySQLStatementParserRESET-570))|(1<<(MySQLStatementParserRESOURCE-570))|(1<<(MySQLStatementParserRESPECT-570))|(1<<(MySQLStatementParserRESTART-570))|(1<<(MySQLStatementParserRESTORE-570))|(1<<(MySQLStatementParserRESUME-570))|(1<<(MySQLStatementParserRETAIN-570))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-570))|(1<<(MySQLStatementParserRETURNING-570))|(1<<(MySQLStatementParserRETURNS-570))|(1<<(MySQLStatementParserREUSE-570))|(1<<(MySQLStatementParserREVERSE-570))|(1<<(MySQLStatementParserROLE-570))|(1<<(MySQLStatementParserROLLBACK-570))|(1<<(MySQLStatementParserROLLUP-570))|(1<<(MySQLStatementParserROTATE-570))|(1<<(MySQLStatementParserROUTINE-570))|(1<<(MySQLStatementParserROW_COUNT-570))|(1<<(MySQLStatementParserROW_FORMAT-570)))) != 0) || (((_la-603)&-(0x1f+1)) == 0 && ((1<<uint((_la-603)))&((1<<(MySQLStatementParserRTREE-603))|(1<<(MySQLStatementParserSAVEPOINT-603))|(1<<(MySQLStatementParserSCHEDULE-603))|(1<<(MySQLStatementParserSCHEMA_NAME-603))|(1<<(MySQLStatementParserSECOND-603))|(1<<(MySQLStatementParserSECONDARY-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-603))|(1<<(MySQLStatementParserSECONDARY_LOAD-603))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-603))|(1<<(MySQLStatementParserSECURITY-603))|(1<<(MySQLStatementParserSERIAL-603))|(1<<(MySQLStatementParserSERIALIZABLE-603))|(1<<(MySQLStatementParserSERVER-603))|(1<<(MySQLStatementParserSESSION-603))|(1<<(MySQLStatementParserSHARE-603))|(1<<(MySQLStatementParserSHUTDOWN-603))|(1<<(MySQLStatementParserSIGNED-603))|(1<<(MySQLStatementParserSIMPLE-603))|(1<<(MySQLStatementParserSLAVE-603))|(1<<(MySQLStatementParserSLOW-603)))) != 0) || (((_la-635)&-(0x1f+1)) == 0 && ((1<<uint((_la-635)))&((1<<(MySQLStatementParserSNAPSHOT-635))|(1<<(MySQLStatementParserSOCKET-635))|(1<<(MySQLStatementParserSONAME-635))|(1<<(MySQLStatementParserSOUNDS-635))|(1<<(MySQLStatementParserSOURCE-635))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-635))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-635))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-635))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-635))|(1<<(MySQLStatementParserSQL_NO_CACHE-635))|(1<<(MySQLStatementParserSQL_THREAD-635))|(1<<(MySQLStatementParserSRID-635))|(1<<(MySQLStatementParserSTACKED-635))|(1<<(MySQLStatementParserSTART-635))|(1<<(MySQLStatementParserSTARTS-635))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-635))|(1<<(MySQLStatementParserSTATS_PERSISTENT-635))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-635))|(1<<(MySQLStatementParserSTATUS-635))|(1<<(MySQLStatementParserSTOP-635))|(1<<(MySQLStatementParserSTORAGE-635)))) != 0) || (((_la-669)&-(0x1f+1)) == 0 && ((1<<uint((_la-669)))&((1<<(MySQLStatementParserSTREAM-669))|(1<<(MySQLStatementParserSTRING-669))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-669))|(1<<(MySQLStatementParserSUBJECT-669))|(1<<(MySQLStatementParserSUBPARTITION-669))|(1<<(MySQLStatementParserSUBPARTITIONS-669))|(1<<(MySQLStatementParserSUPER-669))|(1<<(MySQLStatementParserSUSPEND-669))|(1<<(MySQLStatementParserSWAPS-669))|(1<<(MySQLStatementParserSWITCHES-669))|(1<<(MySQLStatementParserTABLES-669))|(1<<(MySQLStatementParserTABLESPACE-669))|(1<<(MySQLStatementParserTABLE_CHECKSUM-669))|(1<<(MySQLStatementParserTABLE_NAME-669))|(1<<(MySQLStatementParserTEMPORARY-669))|(1<<(MySQLStatementParserTEMPTABLE-669))|(1<<(MySQLStatementParserTEXT-669))|(1<<(MySQLStatementParserTHAN-669))|(1<<(MySQLStatementParserTHREAD_PRIORITY-669))|(1<<(MySQLStatementParserTIES-669))|(1<<(MySQLStatementParserTIME-669))|(1<<(MySQLStatementParserTIMESTAMP-669))|(1<<(MySQLStatementParserTIMESTAMP_ADD-669))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-669))|(1<<(MySQLStatementParserTLS-669)))) != 0) || (((_la-703)&-(0x1f+1)) == 0 && ((1<<uint((_la-703)))&((1<<(MySQLStatementParserTRANSACTION-703))|(1<<(MySQLStatementParserTRIGGERS-703))|(1<<(MySQLStatementParserTRUNCATE-703))|(1<<(MySQLStatementParserTYPE-703))|(1<<(MySQLStatementParserTYPES-703))|(1<<(MySQLStatementParserUNBOUNDED-703))|(1<<(MySQLStatementParserUNCOMMITTED-703))|(1<<(MySQLStatementParserUNDEFINED-703))|(1<<(MySQLStatementParserUNDOFILE-703))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-703))|(1<<(MySQLStatementParserUNICODE-703))|(1<<(MySQLStatementParserUNINSTALL-703))|(1<<(MySQLStatementParserUNKNOWN-703))|(1<<(MySQLStatementParserUNTIL-703))|(1<<(MySQLStatementParserUPGRADE-703))|(1<<(MySQLStatementParserUSER-703))|(1<<(MySQLStatementParserUSER_RESOURCES-703))|(1<<(MySQLStatementParserUSE_FRM-703)))) != 0) || (((_la-735)&-(0x1f+1)) == 0 && ((1<<uint((_la-735)))&((1<<(MySQLStatementParserVALIDATION-735))|(1<<(MySQLStatementParserVALUE-735))|(1<<(MySQLStatementParserVARIABLES-735))|(1<<(MySQLStatementParserVCPU-735))|(1<<(MySQLStatementParserVIEW-735))|(1<<(MySQLStatementParserVISIBLE-735))|(1<<(MySQLStatementParserWAIT-735))|(1<<(MySQLStatementParserWARNINGS-735))|(1<<(MySQLStatementParserWEEK-735))|(1<<(MySQLStatementParserWEIGHT_STRING-735))|(1<<(MySQLStatementParserWITHOUT-735))|(1<<(MySQLStatementParserWORK-735))|(1<<(MySQLStatementParserWRAPPER-735))|(1<<(MySQLStatementParserX509-735))|(1<<(MySQLStatementParserXA-735))|(1<<(MySQLStatementParserXID-735))|(1<<(MySQLStatementParserXML-735))|(1<<(MySQLStatementParserYEAR-735)))) != 0) || _la == MySQLStatementParserIDENTIFIER_ || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
			{
				p.SetState(3993)
				p.IndexName()
			}

		}
		{
			p.SetState(3996)
			p.KeyListWithExpression()
		}
		p.SetState(4000)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 438, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(3997)
					p.FulltextIndexOption()
				}

			}
			p.SetState(4002)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 438, p.GetParserRuleContext())
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4003)
			p.Match(MySQLStatementParserSPATIAL)
		}
		p.SetState(4005)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserINDEX || _la == MySQLStatementParserKEY {
			{
				p.SetState(4004)
				p.KeyOrIndex()
			}

		}
		p.SetState(4008)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49))|(1<<(MySQLStatementParserGROUP_CONCAT-49))|(1<<(MySQLStatementParserCAST-49))|(1<<(MySQLStatementParserPOSITION-49))|(1<<(MySQLStatementParserSUBSTRING-49))|(1<<(MySQLStatementParserSUBSTR-49))|(1<<(MySQLStatementParserEXTRACT-49))|(1<<(MySQLStatementParserTRIM-49))|(1<<(MySQLStatementParserLAST_DAY-49))|(1<<(MySQLStatementParserTRADITIONAL-49))|(1<<(MySQLStatementParserTREE-49))|(1<<(MySQLStatementParserMYSQL_ADMIN-49))|(1<<(MySQLStatementParserINSTANT-49))|(1<<(MySQLStatementParserINPLACE-49))|(1<<(MySQLStatementParserCOPY-49))|(1<<(MySQLStatementParserUL_BINARY-49))|(1<<(MySQLStatementParserAUTOCOMMIT-49))|(1<<(MySQLStatementParserINNODB-49))|(1<<(MySQLStatementParserREDO_LOG-49))|(1<<(MySQLStatementParserACCOUNT-49))|(1<<(MySQLStatementParserACTION-49))|(1<<(MySQLStatementParserACTIVE-49))|(1<<(MySQLStatementParserADMIN-49))|(1<<(MySQLStatementParserAFTER-49))|(1<<(MySQLStatementParserAGAINST-49)))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(MySQLStatementParserAGGREGATE-81))|(1<<(MySQLStatementParserALGORITHM-81))|(1<<(MySQLStatementParserALWAYS-81))|(1<<(MySQLStatementParserANY-81))|(1<<(MySQLStatementParserARRAY-81))|(1<<(MySQLStatementParserASCII-81))|(1<<(MySQLStatementParserAT-81))|(1<<(MySQLStatementParserATTRIBUTE-81))|(1<<(MySQLStatementParserAUTOEXTEND_SIZE-81))|(1<<(MySQLStatementParserAUTO_INCREMENT-81))|(1<<(MySQLStatementParserAVG-81))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-81))|(1<<(MySQLStatementParserBACKUP-81))|(1<<(MySQLStatementParserBEGIN-81))|(1<<(MySQLStatementParserBINLOG-81))|(1<<(MySQLStatementParserBIT-81))|(1<<(MySQLStatementParserBLOCK-81))|(1<<(MySQLStatementParserBOOL-81))|(1<<(MySQLStatementParserBOOLEAN-81)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(MySQLStatementParserBTREE-114))|(1<<(MySQLStatementParserBUCKETS-114))|(1<<(MySQLStatementParserBYTE-114))|(1<<(MySQLStatementParserCACHE-114))|(1<<(MySQLStatementParserCASCADED-114))|(1<<(MySQLStatementParserCATALOG_NAME-114))|(1<<(MySQLStatementParserCHAIN-114))|(1<<(MySQLStatementParserCHANGED-114))|(1<<(MySQLStatementParserCHANNEL-114))|(1<<(MySQLStatementParserCHARSET-114))|(1<<(MySQLStatementParserCHECKSUM-114))|(1<<(MySQLStatementParserCIPHER-114))|(1<<(MySQLStatementParserCLASS_ORIGIN-114))|(1<<(MySQLStatementParserCLIENT-114))|(1<<(MySQLStatementParserCLONE-114))|(1<<(MySQLStatementParserCLOSE-114))|(1<<(MySQLStatementParserCOALESCE-114))|(1<<(MySQLStatementParserCODE-114))|(1<<(MySQLStatementParserCOLLATION-114))|(1<<(MySQLStatementParserCOLUMNS-114))|(1<<(MySQLStatementParserCOLUMN_FORMAT-114))|(1<<(MySQLStatementParserCOLUMN_NAME-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(MySQLStatementParserCOMMENT-146))|(1<<(MySQLStatementParserCOMMIT-146))|(1<<(MySQLStatementParserCOMMITTED-146))|(1<<(MySQLStatementParserCOMPACT-146))|(1<<(MySQLStatementParserCOMPLETION-146))|(1<<(MySQLStatementParserCOMPONENT-146))|(1<<(MySQLStatementParserCOMPRESSED-146))|(1<<(MySQLStatementParserCOMPRESSION-146))|(1<<(MySQLStatementParserCONCURRENT-146))|(1<<(MySQLStatementParserCONNECTION-146))|(1<<(MySQLStatementParserCONSISTENT-146))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-146))|(1<<(MySQLStatementParserCONSTRAINT_NAME-146))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-146))|(1<<(MySQLStatementParserCONTAINS-146))|(1<<(MySQLStatementParserCONTEXT-146))|(1<<(MySQLStatementParserCPU-146))|(1<<(MySQLStatementParserCURRENT-146))|(1<<(MySQLStatementParserCURSOR_NAME-146)))) != 0) || (((_la-178)&-(0x1f+1)) == 0 && ((1<<uint((_la-178)))&((1<<(MySQLStatementParserDATA-178))|(1<<(MySQLStatementParserDATAFILE-178))|(1<<(MySQLStatementParserDATE-178))|(1<<(MySQLStatementParserDATETIME-178))|(1<<(MySQLStatementParserDAY-178))|(1<<(MySQLStatementParserDEALLOCATE-178))|(1<<(MySQLStatementParserDEFAULT_AUTH-178))|(1<<(MySQLStatementParserDEFINER-178))|(1<<(MySQLStatementParserDEFINITION-178))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-178))|(1<<(MySQLStatementParserDESCRIPTION-178))|(1<<(MySQLStatementParserDIAGNOSTICS-178))|(1<<(MySQLStatementParserDIRECTORY-178))|(1<<(MySQLStatementParserDISABLE-178))|(1<<(MySQLStatementParserDISCARD-178))|(1<<(MySQLStatementParserDISK-178)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(MySQLStatementParserDO-213))|(1<<(MySQLStatementParserDUMPFILE-213))|(1<<(MySQLStatementParserDUPLICATE-213))|(1<<(MySQLStatementParserDYNAMIC-213))|(1<<(MySQLStatementParserENABLE-213))|(1<<(MySQLStatementParserENCRYPTION-213))|(1<<(MySQLStatementParserEND-213))|(1<<(MySQLStatementParserENDS-213))|(1<<(MySQLStatementParserENFORCED-213))|(1<<(MySQLStatementParserENGINE-213))|(1<<(MySQLStatementParserENGINES-213))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-213))|(1<<(MySQLStatementParserENUM-213))|(1<<(MySQLStatementParserERROR-213))|(1<<(MySQLStatementParserERRORS-213))|(1<<(MySQLStatementParserESCAPE-213))|(1<<(MySQLStatementParserEVENT-213))|(1<<(MySQLStatementParserEVENTS-213))|(1<<(MySQLStatementParserEVERY-213))|(1<<(MySQLStatementParserEXCHANGE-213))|(1<<(MySQLStatementParserEXCLUDE-213))|(1<<(MySQLStatementParserEXECUTE-213)))) != 0) || (((_la-247)&-(0x1f+1)) == 0 && ((1<<uint((_la-247)))&((1<<(MySQLStatementParserEXPANSION-247))|(1<<(MySQLStatementParserEXPIRE-247))|(1<<(MySQLStatementParserEXPORT-247))|(1<<(MySQLStatementParserEXTENDED-247))|(1<<(MySQLStatementParserEXTENT_SIZE-247))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-247))|(1<<(MySQLStatementParserFAST-247))|(1<<(MySQLStatementParserFAULTS-247))|(1<<(MySQLStatementParserFILE-247))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-247))|(1<<(MySQLStatementParserFILTER-247))|(1<<(MySQLStatementParserFIRST-247))|(1<<(MySQLStatementParserFIXED-247))|(1<<(MySQLStatementParserFLUSH-247))|(1<<(MySQLStatementParserFOLLOWING-247))|(1<<(MySQLStatementParserFOLLOWS-247))|(1<<(MySQLStatementParserFORMAT-247))|(1<<(MySQLStatementParserFOUND-247))|(1<<(MySQLStatementParserFULL-247)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(MySQLStatementParserGENERAL-279))|(1<<(MySQLStatementParserGEOMETRY-279))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-279))|(1<<(MySQLStatementParserGET_FORMAT-279))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-279))|(1<<(MySQLStatementParserGLOBAL-279))|(1<<(MySQLStatementParserGRANTS-279))|(1<<(MySQLStatementParserGROUP_REPLICATION-279))|(1<<(MySQLStatementParserHANDLER-279))|(1<<(MySQLStatementParserHASH-279))|(1<<(MySQLStatementParserHELP-279))|(1<<(MySQLStatementParserHISTOGRAM-279))|(1<<(MySQLStatementParserHISTORY-279))|(1<<(MySQLStatementParserHOST-279))|(1<<(MySQLStatementParserHOSTS-279))|(1<<(MySQLStatementParserHOUR-279))|(1<<(MySQLStatementParserIDENTIFIED-279))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-279))|(1<<(MySQLStatementParserIMPORT-279)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySQLStatementParserINACTIVE-312))|(1<<(MySQLStatementParserINDEXES-312))|(1<<(MySQLStatementParserINITIAL_SIZE-312))|(1<<(MySQLStatementParserINSERT_METHOD-312))|(1<<(MySQLStatementParserINSTALL-312))|(1<<(MySQLStatementParserINSTANCE-312))|(1<<(MySQLStatementParserINVISIBLE-312))|(1<<(MySQLStatementParserINVOKER-312))|(1<<(MySQLStatementParserIO-312))|(1<<(MySQLStatementParserIPC-312))|(1<<(MySQLStatementParserISOLATION-312))|(1<<(MySQLStatementParserISSUER-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySQLStatementParserJSON-344))|(1<<(MySQLStatementParserJSON_VALUE-344))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-344))|(1<<(MySQLStatementParserLANGUAGE-344))|(1<<(MySQLStatementParserLAST-344))|(1<<(MySQLStatementParserLAST_VALUE-344))|(1<<(MySQLStatementParserLEAVES-344))|(1<<(MySQLStatementParserLESS-344))|(1<<(MySQLStatementParserLEVEL-344))|(1<<(MySQLStatementParserLINESTRING-344))|(1<<(MySQLStatementParserLIST-344))|(1<<(MySQLStatementParserLOCAL-344))|(1<<(MySQLStatementParserLOCKED-344))|(1<<(MySQLStatementParserLOCKS-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySQLStatementParserLOGFILE-376))|(1<<(MySQLStatementParserLOGS-376))|(1<<(MySQLStatementParserMASTER-376))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-376))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-376))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-376))|(1<<(MySQLStatementParserMASTER_DELAY-376))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-376))|(1<<(MySQLStatementParserMASTER_HOST-376))|(1<<(MySQLStatementParserMASTER_LOG_FILE-376))|(1<<(MySQLStatementParserMASTER_LOG_POS-376))|(1<<(MySQLStatementParserMASTER_PASSWORD-376))|(1<<(MySQLStatementParserMASTER_PORT-376))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-376))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-376))|(1<<(MySQLStatementParserMASTER_SERVER_ID-376))|(1<<(MySQLStatementParserMASTER_SSL-376))|(1<<(MySQLStatementParserMASTER_SSL_CA-376))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_CERT-376))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-376))|(1<<(MySQLStatementParserMASTER_SSL_CRL-376))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_KEY-376))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySQLStatementParserMASTER_TLS_VERSION-408))|(1<<(MySQLStatementParserMASTER_USER-408))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-408))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_ROWS-408))|(1<<(MySQLStatementParserMAX_SIZE-408))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-408))|(1<<(MySQLStatementParserMEDIUM-408))|(1<<(MySQLStatementParserMEMBER-408))|(1<<(MySQLStatementParserMEMORY-408))|(1<<(MySQLStatementParserMERGE-408))|(1<<(MySQLStatementParserMESSAGE_TEXT-408))|(1<<(MySQLStatementParserMICROSECOND-408))|(1<<(MySQLStatementParserMIGRATE-408))|(1<<(MySQLStatementParserMINUTE-408))|(1<<(MySQLStatementParserMIN_ROWS-408))|(1<<(MySQLStatementParserMODE-408))|(1<<(MySQLStatementParserMODIFY-408))|(1<<(MySQLStatementParserMONTH-408))|(1<<(MySQLStatementParserMULTILINESTRING-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySQLStatementParserMULTIPOINT-440))|(1<<(MySQLStatementParserMULTIPOLYGON-440))|(1<<(MySQLStatementParserMUTEX-440))|(1<<(MySQLStatementParserMYSQL_ERRNO-440))|(1<<(MySQLStatementParserNAME-440))|(1<<(MySQLStatementParserNAMES-440))|(1<<(MySQLStatementParserNATIONAL-440))|(1<<(MySQLStatementParserNCHAR-440))|(1<<(MySQLStatementParserNDBCLUSTER-440))|(1<<(MySQLStatementParserNESTED-440))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-440))|(1<<(MySQLStatementParserNEVER-440))|(1<<(MySQLStatementParserNEW-440))|(1<<(MySQLStatementParserNEXT-440))|(1<<(MySQLStatementParserNO-440))|(1<<(MySQLStatementParserNODEGROUP-440))|(1<<(MySQLStatementParserNONE-440))|(1<<(MySQLStatementParserNOWAIT-440))|(1<<(MySQLStatementParserNO_WAIT-440))|(1<<(MySQLStatementParserNULLS-440))|(1<<(MySQLStatementParserNUMBER-440))|(1<<(MySQLStatementParserNVARCHAR-440))|(1<<(MySQLStatementParserOFF-440))|(1<<(MySQLStatementParserOFFSET-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySQLStatementParserOJ-472))|(1<<(MySQLStatementParserOLD-472))|(1<<(MySQLStatementParserONE-472))|(1<<(MySQLStatementParserONLY-472))|(1<<(MySQLStatementParserOPEN-472))|(1<<(MySQLStatementParserOPTIONAL-472))|(1<<(MySQLStatementParserOPTIONS-472))|(1<<(MySQLStatementParserORDINALITY-472))|(1<<(MySQLStatementParserORGANIZATION-472))|(1<<(MySQLStatementParserOTHERS-472))|(1<<(MySQLStatementParserOWNER-472))|(1<<(MySQLStatementParserPACK_KEYS-472))|(1<<(MySQLStatementParserPAGE-472))|(1<<(MySQLStatementParserPARSER-472))|(1<<(MySQLStatementParserPARTIAL-472))|(1<<(MySQLStatementParserPARTITIONING-472))|(1<<(MySQLStatementParserPARTITIONS-472))|(1<<(MySQLStatementParserPASSWORD-472))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-472))|(1<<(MySQLStatementParserPATH-472)))) != 0) || (((_la-505)&-(0x1f+1)) == 0 && ((1<<uint((_la-505)))&((1<<(MySQLStatementParserPERSIST-505))|(1<<(MySQLStatementParserPERSIST_ONLY-505))|(1<<(MySQLStatementParserPHASE-505))|(1<<(MySQLStatementParserPLUGIN-505))|(1<<(MySQLStatementParserPLUGINS-505))|(1<<(MySQLStatementParserPLUGIN_DIR-505))|(1<<(MySQLStatementParserPOINT-505))|(1<<(MySQLStatementParserPOLYGON-505))|(1<<(MySQLStatementParserPORT-505))|(1<<(MySQLStatementParserPRECEDES-505))|(1<<(MySQLStatementParserPRECEDING-505))|(1<<(MySQLStatementParserPREPARE-505))|(1<<(MySQLStatementParserPRESERVE-505))|(1<<(MySQLStatementParserPREV-505))|(1<<(MySQLStatementParserPRIVILEGES-505))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-505))|(1<<(MySQLStatementParserPROCESS-505))|(1<<(MySQLStatementParserPROCESSLIST-505))|(1<<(MySQLStatementParserPROFILE-505))|(1<<(MySQLStatementParserPROFILES-505))|(1<<(MySQLStatementParserPROXY-505))|(1<<(MySQLStatementParserQUARTER-505))|(1<<(MySQLStatementParserQUERY-505))|(1<<(MySQLStatementParserQUICK-505))|(1<<(MySQLStatementParserRANDOM-505)))) != 0) || (((_la-538)&-(0x1f+1)) == 0 && ((1<<uint((_la-538)))&((1<<(MySQLStatementParserREAD_ONLY-538))|(1<<(MySQLStatementParserREBUILD-538))|(1<<(MySQLStatementParserRECOVER-538))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-538))|(1<<(MySQLStatementParserREDUNDANT-538))|(1<<(MySQLStatementParserREFERENCE-538))|(1<<(MySQLStatementParserRELAY-538))|(1<<(MySQLStatementParserRELAYLOG-538))|(1<<(MySQLStatementParserRELAY_LOG_FILE-538))|(1<<(MySQLStatementParserRELAY_LOG_POS-538))|(1<<(MySQLStatementParserRELAY_THREAD-538))|(1<<(MySQLStatementParserRELOAD-538))|(1<<(MySQLStatementParserREMOVE-538))|(1<<(MySQLStatementParserREORGANIZE-538))|(1<<(MySQLStatementParserREPAIR-538))|(1<<(MySQLStatementParserREPEATABLE-538))|(1<<(MySQLStatementParserREPLICATE_DO_DB-538))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-538)))) != 0) || (((_la-570)&-(0x1f+1)) == 0 && ((1<<uint((_la-570)))&((1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-570))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-570))|(1<<(MySQLStatementParserREPLICATION-570))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-570))|(1<<(MySQLStatementParserRESET-570))|(1<<(MySQLStatementParserRESOURCE-570))|(1<<(MySQLStatementParserRESPECT-570))|(1<<(MySQLStatementParserRESTART-570))|(1<<(MySQLStatementParserRESTORE-570))|(1<<(MySQLStatementParserRESUME-570))|(1<<(MySQLStatementParserRETAIN-570))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-570))|(1<<(MySQLStatementParserRETURNING-570))|(1<<(MySQLStatementParserRETURNS-570))|(1<<(MySQLStatementParserREUSE-570))|(1<<(MySQLStatementParserREVERSE-570))|(1<<(MySQLStatementParserROLE-570))|(1<<(MySQLStatementParserROLLBACK-570))|(1<<(MySQLStatementParserROLLUP-570))|(1<<(MySQLStatementParserROTATE-570))|(1<<(MySQLStatementParserROUTINE-570))|(1<<(MySQLStatementParserROW_COUNT-570))|(1<<(MySQLStatementParserROW_FORMAT-570)))) != 0) || (((_la-603)&-(0x1f+1)) == 0 && ((1<<uint((_la-603)))&((1<<(MySQLStatementParserRTREE-603))|(1<<(MySQLStatementParserSAVEPOINT-603))|(1<<(MySQLStatementParserSCHEDULE-603))|(1<<(MySQLStatementParserSCHEMA_NAME-603))|(1<<(MySQLStatementParserSECOND-603))|(1<<(MySQLStatementParserSECONDARY-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-603))|(1<<(MySQLStatementParserSECONDARY_LOAD-603))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-603))|(1<<(MySQLStatementParserSECURITY-603))|(1<<(MySQLStatementParserSERIAL-603))|(1<<(MySQLStatementParserSERIALIZABLE-603))|(1<<(MySQLStatementParserSERVER-603))|(1<<(MySQLStatementParserSESSION-603))|(1<<(MySQLStatementParserSHARE-603))|(1<<(MySQLStatementParserSHUTDOWN-603))|(1<<(MySQLStatementParserSIGNED-603))|(1<<(MySQLStatementParserSIMPLE-603))|(1<<(MySQLStatementParserSLAVE-603))|(1<<(MySQLStatementParserSLOW-603)))) != 0) || (((_la-635)&-(0x1f+1)) == 0 && ((1<<uint((_la-635)))&((1<<(MySQLStatementParserSNAPSHOT-635))|(1<<(MySQLStatementParserSOCKET-635))|(1<<(MySQLStatementParserSONAME-635))|(1<<(MySQLStatementParserSOUNDS-635))|(1<<(MySQLStatementParserSOURCE-635))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-635))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-635))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-635))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-635))|(1<<(MySQLStatementParserSQL_NO_CACHE-635))|(1<<(MySQLStatementParserSQL_THREAD-635))|(1<<(MySQLStatementParserSRID-635))|(1<<(MySQLStatementParserSTACKED-635))|(1<<(MySQLStatementParserSTART-635))|(1<<(MySQLStatementParserSTARTS-635))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-635))|(1<<(MySQLStatementParserSTATS_PERSISTENT-635))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-635))|(1<<(MySQLStatementParserSTATUS-635))|(1<<(MySQLStatementParserSTOP-635))|(1<<(MySQLStatementParserSTORAGE-635)))) != 0) || (((_la-669)&-(0x1f+1)) == 0 && ((1<<uint((_la-669)))&((1<<(MySQLStatementParserSTREAM-669))|(1<<(MySQLStatementParserSTRING-669))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-669))|(1<<(MySQLStatementParserSUBJECT-669))|(1<<(MySQLStatementParserSUBPARTITION-669))|(1<<(MySQLStatementParserSUBPARTITIONS-669))|(1<<(MySQLStatementParserSUPER-669))|(1<<(MySQLStatementParserSUSPEND-669))|(1<<(MySQLStatementParserSWAPS-669))|(1<<(MySQLStatementParserSWITCHES-669))|(1<<(MySQLStatementParserTABLES-669))|(1<<(MySQLStatementParserTABLESPACE-669))|(1<<(MySQLStatementParserTABLE_CHECKSUM-669))|(1<<(MySQLStatementParserTABLE_NAME-669))|(1<<(MySQLStatementParserTEMPORARY-669))|(1<<(MySQLStatementParserTEMPTABLE-669))|(1<<(MySQLStatementParserTEXT-669))|(1<<(MySQLStatementParserTHAN-669))|(1<<(MySQLStatementParserTHREAD_PRIORITY-669))|(1<<(MySQLStatementParserTIES-669))|(1<<(MySQLStatementParserTIME-669))|(1<<(MySQLStatementParserTIMESTAMP-669))|(1<<(MySQLStatementParserTIMESTAMP_ADD-669))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-669))|(1<<(MySQLStatementParserTLS-669)))) != 0) || (((_la-703)&-(0x1f+1)) == 0 && ((1<<uint((_la-703)))&((1<<(MySQLStatementParserTRANSACTION-703))|(1<<(MySQLStatementParserTRIGGERS-703))|(1<<(MySQLStatementParserTRUNCATE-703))|(1<<(MySQLStatementParserTYPE-703))|(1<<(MySQLStatementParserTYPES-703))|(1<<(MySQLStatementParserUNBOUNDED-703))|(1<<(MySQLStatementParserUNCOMMITTED-703))|(1<<(MySQLStatementParserUNDEFINED-703))|(1<<(MySQLStatementParserUNDOFILE-703))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-703))|(1<<(MySQLStatementParserUNICODE-703))|(1<<(MySQLStatementParserUNINSTALL-703))|(1<<(MySQLStatementParserUNKNOWN-703))|(1<<(MySQLStatementParserUNTIL-703))|(1<<(MySQLStatementParserUPGRADE-703))|(1<<(MySQLStatementParserUSER-703))|(1<<(MySQLStatementParserUSER_RESOURCES-703))|(1<<(MySQLStatementParserUSE_FRM-703)))) != 0) || (((_la-735)&-(0x1f+1)) == 0 && ((1<<uint((_la-735)))&((1<<(MySQLStatementParserVALIDATION-735))|(1<<(MySQLStatementParserVALUE-735))|(1<<(MySQLStatementParserVARIABLES-735))|(1<<(MySQLStatementParserVCPU-735))|(1<<(MySQLStatementParserVIEW-735))|(1<<(MySQLStatementParserVISIBLE-735))|(1<<(MySQLStatementParserWAIT-735))|(1<<(MySQLStatementParserWARNINGS-735))|(1<<(MySQLStatementParserWEEK-735))|(1<<(MySQLStatementParserWEIGHT_STRING-735))|(1<<(MySQLStatementParserWITHOUT-735))|(1<<(MySQLStatementParserWORK-735))|(1<<(MySQLStatementParserWRAPPER-735))|(1<<(MySQLStatementParserX509-735))|(1<<(MySQLStatementParserXA-735))|(1<<(MySQLStatementParserXID-735))|(1<<(MySQLStatementParserXML-735))|(1<<(MySQLStatementParserYEAR-735)))) != 0) || _la == MySQLStatementParserIDENTIFIER_ || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
			{
				p.SetState(4007)
				p.IndexName()
			}

		}
		{
			p.SetState(4010)
			p.KeyListWithExpression()
		}
		p.SetState(4014)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 441, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(4011)
					p.CommonIndexOption()
				}

			}
			p.SetState(4016)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 441, p.GetParserRuleContext())
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(4018)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserCONSTRAINT {
			{
				p.SetState(4017)
				p.ConstraintClause()
			}

		}
		p.SetState(4026)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySQLStatementParserPRIMARY:
			{
				p.SetState(4020)
				p.Match(MySQLStatementParserPRIMARY)
			}
			{
				p.SetState(4021)
				p.Match(MySQLStatementParserKEY)
			}

		case MySQLStatementParserUNIQUE:
			{
				p.SetState(4022)
				p.Match(MySQLStatementParserUNIQUE)
			}
			p.SetState(4024)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySQLStatementParserINDEX || _la == MySQLStatementParserKEY {
				{
					p.SetState(4023)
					p.KeyOrIndex()
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(4029)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49))|(1<<(MySQLStatementParserGROUP_CONCAT-49))|(1<<(MySQLStatementParserCAST-49))|(1<<(MySQLStatementParserPOSITION-49))|(1<<(MySQLStatementParserSUBSTRING-49))|(1<<(MySQLStatementParserSUBSTR-49))|(1<<(MySQLStatementParserEXTRACT-49))|(1<<(MySQLStatementParserTRIM-49))|(1<<(MySQLStatementParserLAST_DAY-49))|(1<<(MySQLStatementParserTRADITIONAL-49))|(1<<(MySQLStatementParserTREE-49))|(1<<(MySQLStatementParserMYSQL_ADMIN-49))|(1<<(MySQLStatementParserINSTANT-49))|(1<<(MySQLStatementParserINPLACE-49))|(1<<(MySQLStatementParserCOPY-49))|(1<<(MySQLStatementParserUL_BINARY-49))|(1<<(MySQLStatementParserAUTOCOMMIT-49))|(1<<(MySQLStatementParserINNODB-49))|(1<<(MySQLStatementParserREDO_LOG-49))|(1<<(MySQLStatementParserACCOUNT-49))|(1<<(MySQLStatementParserACTION-49))|(1<<(MySQLStatementParserACTIVE-49))|(1<<(MySQLStatementParserADMIN-49))|(1<<(MySQLStatementParserAFTER-49))|(1<<(MySQLStatementParserAGAINST-49)))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(MySQLStatementParserAGGREGATE-81))|(1<<(MySQLStatementParserALGORITHM-81))|(1<<(MySQLStatementParserALWAYS-81))|(1<<(MySQLStatementParserANY-81))|(1<<(MySQLStatementParserARRAY-81))|(1<<(MySQLStatementParserASCII-81))|(1<<(MySQLStatementParserAT-81))|(1<<(MySQLStatementParserATTRIBUTE-81))|(1<<(MySQLStatementParserAUTOEXTEND_SIZE-81))|(1<<(MySQLStatementParserAUTO_INCREMENT-81))|(1<<(MySQLStatementParserAVG-81))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-81))|(1<<(MySQLStatementParserBACKUP-81))|(1<<(MySQLStatementParserBEGIN-81))|(1<<(MySQLStatementParserBINLOG-81))|(1<<(MySQLStatementParserBIT-81))|(1<<(MySQLStatementParserBLOCK-81))|(1<<(MySQLStatementParserBOOL-81))|(1<<(MySQLStatementParserBOOLEAN-81)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(MySQLStatementParserBTREE-114))|(1<<(MySQLStatementParserBUCKETS-114))|(1<<(MySQLStatementParserBYTE-114))|(1<<(MySQLStatementParserCACHE-114))|(1<<(MySQLStatementParserCASCADED-114))|(1<<(MySQLStatementParserCATALOG_NAME-114))|(1<<(MySQLStatementParserCHAIN-114))|(1<<(MySQLStatementParserCHANGED-114))|(1<<(MySQLStatementParserCHANNEL-114))|(1<<(MySQLStatementParserCHARSET-114))|(1<<(MySQLStatementParserCHECKSUM-114))|(1<<(MySQLStatementParserCIPHER-114))|(1<<(MySQLStatementParserCLASS_ORIGIN-114))|(1<<(MySQLStatementParserCLIENT-114))|(1<<(MySQLStatementParserCLONE-114))|(1<<(MySQLStatementParserCLOSE-114))|(1<<(MySQLStatementParserCOALESCE-114))|(1<<(MySQLStatementParserCODE-114))|(1<<(MySQLStatementParserCOLLATION-114))|(1<<(MySQLStatementParserCOLUMNS-114))|(1<<(MySQLStatementParserCOLUMN_FORMAT-114))|(1<<(MySQLStatementParserCOLUMN_NAME-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(MySQLStatementParserCOMMENT-146))|(1<<(MySQLStatementParserCOMMIT-146))|(1<<(MySQLStatementParserCOMMITTED-146))|(1<<(MySQLStatementParserCOMPACT-146))|(1<<(MySQLStatementParserCOMPLETION-146))|(1<<(MySQLStatementParserCOMPONENT-146))|(1<<(MySQLStatementParserCOMPRESSED-146))|(1<<(MySQLStatementParserCOMPRESSION-146))|(1<<(MySQLStatementParserCONCURRENT-146))|(1<<(MySQLStatementParserCONNECTION-146))|(1<<(MySQLStatementParserCONSISTENT-146))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-146))|(1<<(MySQLStatementParserCONSTRAINT_NAME-146))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-146))|(1<<(MySQLStatementParserCONTAINS-146))|(1<<(MySQLStatementParserCONTEXT-146))|(1<<(MySQLStatementParserCPU-146))|(1<<(MySQLStatementParserCURRENT-146))|(1<<(MySQLStatementParserCURSOR_NAME-146)))) != 0) || (((_la-178)&-(0x1f+1)) == 0 && ((1<<uint((_la-178)))&((1<<(MySQLStatementParserDATA-178))|(1<<(MySQLStatementParserDATAFILE-178))|(1<<(MySQLStatementParserDATE-178))|(1<<(MySQLStatementParserDATETIME-178))|(1<<(MySQLStatementParserDAY-178))|(1<<(MySQLStatementParserDEALLOCATE-178))|(1<<(MySQLStatementParserDEFAULT_AUTH-178))|(1<<(MySQLStatementParserDEFINER-178))|(1<<(MySQLStatementParserDEFINITION-178))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-178))|(1<<(MySQLStatementParserDESCRIPTION-178))|(1<<(MySQLStatementParserDIAGNOSTICS-178))|(1<<(MySQLStatementParserDIRECTORY-178))|(1<<(MySQLStatementParserDISABLE-178))|(1<<(MySQLStatementParserDISCARD-178))|(1<<(MySQLStatementParserDISK-178)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(MySQLStatementParserDO-213))|(1<<(MySQLStatementParserDUMPFILE-213))|(1<<(MySQLStatementParserDUPLICATE-213))|(1<<(MySQLStatementParserDYNAMIC-213))|(1<<(MySQLStatementParserENABLE-213))|(1<<(MySQLStatementParserENCRYPTION-213))|(1<<(MySQLStatementParserEND-213))|(1<<(MySQLStatementParserENDS-213))|(1<<(MySQLStatementParserENFORCED-213))|(1<<(MySQLStatementParserENGINE-213))|(1<<(MySQLStatementParserENGINES-213))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-213))|(1<<(MySQLStatementParserENUM-213))|(1<<(MySQLStatementParserERROR-213))|(1<<(MySQLStatementParserERRORS-213))|(1<<(MySQLStatementParserESCAPE-213))|(1<<(MySQLStatementParserEVENT-213))|(1<<(MySQLStatementParserEVENTS-213))|(1<<(MySQLStatementParserEVERY-213))|(1<<(MySQLStatementParserEXCHANGE-213))|(1<<(MySQLStatementParserEXCLUDE-213))|(1<<(MySQLStatementParserEXECUTE-213)))) != 0) || (((_la-247)&-(0x1f+1)) == 0 && ((1<<uint((_la-247)))&((1<<(MySQLStatementParserEXPANSION-247))|(1<<(MySQLStatementParserEXPIRE-247))|(1<<(MySQLStatementParserEXPORT-247))|(1<<(MySQLStatementParserEXTENDED-247))|(1<<(MySQLStatementParserEXTENT_SIZE-247))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-247))|(1<<(MySQLStatementParserFAST-247))|(1<<(MySQLStatementParserFAULTS-247))|(1<<(MySQLStatementParserFILE-247))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-247))|(1<<(MySQLStatementParserFILTER-247))|(1<<(MySQLStatementParserFIRST-247))|(1<<(MySQLStatementParserFIXED-247))|(1<<(MySQLStatementParserFLUSH-247))|(1<<(MySQLStatementParserFOLLOWING-247))|(1<<(MySQLStatementParserFOLLOWS-247))|(1<<(MySQLStatementParserFORMAT-247))|(1<<(MySQLStatementParserFOUND-247))|(1<<(MySQLStatementParserFULL-247)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(MySQLStatementParserGENERAL-279))|(1<<(MySQLStatementParserGEOMETRY-279))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-279))|(1<<(MySQLStatementParserGET_FORMAT-279))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-279))|(1<<(MySQLStatementParserGLOBAL-279))|(1<<(MySQLStatementParserGRANTS-279))|(1<<(MySQLStatementParserGROUP_REPLICATION-279))|(1<<(MySQLStatementParserHANDLER-279))|(1<<(MySQLStatementParserHASH-279))|(1<<(MySQLStatementParserHELP-279))|(1<<(MySQLStatementParserHISTOGRAM-279))|(1<<(MySQLStatementParserHISTORY-279))|(1<<(MySQLStatementParserHOST-279))|(1<<(MySQLStatementParserHOSTS-279))|(1<<(MySQLStatementParserHOUR-279))|(1<<(MySQLStatementParserIDENTIFIED-279))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-279))|(1<<(MySQLStatementParserIMPORT-279)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySQLStatementParserINACTIVE-312))|(1<<(MySQLStatementParserINDEXES-312))|(1<<(MySQLStatementParserINITIAL_SIZE-312))|(1<<(MySQLStatementParserINSERT_METHOD-312))|(1<<(MySQLStatementParserINSTALL-312))|(1<<(MySQLStatementParserINSTANCE-312))|(1<<(MySQLStatementParserINVISIBLE-312))|(1<<(MySQLStatementParserINVOKER-312))|(1<<(MySQLStatementParserIO-312))|(1<<(MySQLStatementParserIPC-312))|(1<<(MySQLStatementParserISOLATION-312))|(1<<(MySQLStatementParserISSUER-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySQLStatementParserJSON-344))|(1<<(MySQLStatementParserJSON_VALUE-344))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-344))|(1<<(MySQLStatementParserLANGUAGE-344))|(1<<(MySQLStatementParserLAST-344))|(1<<(MySQLStatementParserLAST_VALUE-344))|(1<<(MySQLStatementParserLEAVES-344))|(1<<(MySQLStatementParserLESS-344))|(1<<(MySQLStatementParserLEVEL-344))|(1<<(MySQLStatementParserLINESTRING-344))|(1<<(MySQLStatementParserLIST-344))|(1<<(MySQLStatementParserLOCAL-344))|(1<<(MySQLStatementParserLOCKED-344))|(1<<(MySQLStatementParserLOCKS-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySQLStatementParserLOGFILE-376))|(1<<(MySQLStatementParserLOGS-376))|(1<<(MySQLStatementParserMASTER-376))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-376))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-376))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-376))|(1<<(MySQLStatementParserMASTER_DELAY-376))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-376))|(1<<(MySQLStatementParserMASTER_HOST-376))|(1<<(MySQLStatementParserMASTER_LOG_FILE-376))|(1<<(MySQLStatementParserMASTER_LOG_POS-376))|(1<<(MySQLStatementParserMASTER_PASSWORD-376))|(1<<(MySQLStatementParserMASTER_PORT-376))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-376))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-376))|(1<<(MySQLStatementParserMASTER_SERVER_ID-376))|(1<<(MySQLStatementParserMASTER_SSL-376))|(1<<(MySQLStatementParserMASTER_SSL_CA-376))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_CERT-376))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-376))|(1<<(MySQLStatementParserMASTER_SSL_CRL-376))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_KEY-376))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySQLStatementParserMASTER_TLS_VERSION-408))|(1<<(MySQLStatementParserMASTER_USER-408))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-408))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_ROWS-408))|(1<<(MySQLStatementParserMAX_SIZE-408))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-408))|(1<<(MySQLStatementParserMEDIUM-408))|(1<<(MySQLStatementParserMEMBER-408))|(1<<(MySQLStatementParserMEMORY-408))|(1<<(MySQLStatementParserMERGE-408))|(1<<(MySQLStatementParserMESSAGE_TEXT-408))|(1<<(MySQLStatementParserMICROSECOND-408))|(1<<(MySQLStatementParserMIGRATE-408))|(1<<(MySQLStatementParserMINUTE-408))|(1<<(MySQLStatementParserMIN_ROWS-408))|(1<<(MySQLStatementParserMODE-408))|(1<<(MySQLStatementParserMODIFY-408))|(1<<(MySQLStatementParserMONTH-408))|(1<<(MySQLStatementParserMULTILINESTRING-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySQLStatementParserMULTIPOINT-440))|(1<<(MySQLStatementParserMULTIPOLYGON-440))|(1<<(MySQLStatementParserMUTEX-440))|(1<<(MySQLStatementParserMYSQL_ERRNO-440))|(1<<(MySQLStatementParserNAME-440))|(1<<(MySQLStatementParserNAMES-440))|(1<<(MySQLStatementParserNATIONAL-440))|(1<<(MySQLStatementParserNCHAR-440))|(1<<(MySQLStatementParserNDBCLUSTER-440))|(1<<(MySQLStatementParserNESTED-440))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-440))|(1<<(MySQLStatementParserNEVER-440))|(1<<(MySQLStatementParserNEW-440))|(1<<(MySQLStatementParserNEXT-440))|(1<<(MySQLStatementParserNO-440))|(1<<(MySQLStatementParserNODEGROUP-440))|(1<<(MySQLStatementParserNONE-440))|(1<<(MySQLStatementParserNOWAIT-440))|(1<<(MySQLStatementParserNO_WAIT-440))|(1<<(MySQLStatementParserNULLS-440))|(1<<(MySQLStatementParserNUMBER-440))|(1<<(MySQLStatementParserNVARCHAR-440))|(1<<(MySQLStatementParserOFF-440))|(1<<(MySQLStatementParserOFFSET-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySQLStatementParserOJ-472))|(1<<(MySQLStatementParserOLD-472))|(1<<(MySQLStatementParserONE-472))|(1<<(MySQLStatementParserONLY-472))|(1<<(MySQLStatementParserOPEN-472))|(1<<(MySQLStatementParserOPTIONAL-472))|(1<<(MySQLStatementParserOPTIONS-472))|(1<<(MySQLStatementParserORDINALITY-472))|(1<<(MySQLStatementParserORGANIZATION-472))|(1<<(MySQLStatementParserOTHERS-472))|(1<<(MySQLStatementParserOWNER-472))|(1<<(MySQLStatementParserPACK_KEYS-472))|(1<<(MySQLStatementParserPAGE-472))|(1<<(MySQLStatementParserPARSER-472))|(1<<(MySQLStatementParserPARTIAL-472))|(1<<(MySQLStatementParserPARTITIONING-472))|(1<<(MySQLStatementParserPARTITIONS-472))|(1<<(MySQLStatementParserPASSWORD-472))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-472))|(1<<(MySQLStatementParserPATH-472)))) != 0) || (((_la-505)&-(0x1f+1)) == 0 && ((1<<uint((_la-505)))&((1<<(MySQLStatementParserPERSIST-505))|(1<<(MySQLStatementParserPERSIST_ONLY-505))|(1<<(MySQLStatementParserPHASE-505))|(1<<(MySQLStatementParserPLUGIN-505))|(1<<(MySQLStatementParserPLUGINS-505))|(1<<(MySQLStatementParserPLUGIN_DIR-505))|(1<<(MySQLStatementParserPOINT-505))|(1<<(MySQLStatementParserPOLYGON-505))|(1<<(MySQLStatementParserPORT-505))|(1<<(MySQLStatementParserPRECEDES-505))|(1<<(MySQLStatementParserPRECEDING-505))|(1<<(MySQLStatementParserPREPARE-505))|(1<<(MySQLStatementParserPRESERVE-505))|(1<<(MySQLStatementParserPREV-505))|(1<<(MySQLStatementParserPRIVILEGES-505))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-505))|(1<<(MySQLStatementParserPROCESS-505))|(1<<(MySQLStatementParserPROCESSLIST-505))|(1<<(MySQLStatementParserPROFILE-505))|(1<<(MySQLStatementParserPROFILES-505))|(1<<(MySQLStatementParserPROXY-505))|(1<<(MySQLStatementParserQUARTER-505))|(1<<(MySQLStatementParserQUERY-505))|(1<<(MySQLStatementParserQUICK-505))|(1<<(MySQLStatementParserRANDOM-505)))) != 0) || (((_la-538)&-(0x1f+1)) == 0 && ((1<<uint((_la-538)))&((1<<(MySQLStatementParserREAD_ONLY-538))|(1<<(MySQLStatementParserREBUILD-538))|(1<<(MySQLStatementParserRECOVER-538))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-538))|(1<<(MySQLStatementParserREDUNDANT-538))|(1<<(MySQLStatementParserREFERENCE-538))|(1<<(MySQLStatementParserRELAY-538))|(1<<(MySQLStatementParserRELAYLOG-538))|(1<<(MySQLStatementParserRELAY_LOG_FILE-538))|(1<<(MySQLStatementParserRELAY_LOG_POS-538))|(1<<(MySQLStatementParserRELAY_THREAD-538))|(1<<(MySQLStatementParserRELOAD-538))|(1<<(MySQLStatementParserREMOVE-538))|(1<<(MySQLStatementParserREORGANIZE-538))|(1<<(MySQLStatementParserREPAIR-538))|(1<<(MySQLStatementParserREPEATABLE-538))|(1<<(MySQLStatementParserREPLICATE_DO_DB-538))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-538)))) != 0) || (((_la-570)&-(0x1f+1)) == 0 && ((1<<uint((_la-570)))&((1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-570))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-570))|(1<<(MySQLStatementParserREPLICATION-570))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-570))|(1<<(MySQLStatementParserRESET-570))|(1<<(MySQLStatementParserRESOURCE-570))|(1<<(MySQLStatementParserRESPECT-570))|(1<<(MySQLStatementParserRESTART-570))|(1<<(MySQLStatementParserRESTORE-570))|(1<<(MySQLStatementParserRESUME-570))|(1<<(MySQLStatementParserRETAIN-570))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-570))|(1<<(MySQLStatementParserRETURNING-570))|(1<<(MySQLStatementParserRETURNS-570))|(1<<(MySQLStatementParserREUSE-570))|(1<<(MySQLStatementParserREVERSE-570))|(1<<(MySQLStatementParserROLE-570))|(1<<(MySQLStatementParserROLLBACK-570))|(1<<(MySQLStatementParserROLLUP-570))|(1<<(MySQLStatementParserROTATE-570))|(1<<(MySQLStatementParserROUTINE-570))|(1<<(MySQLStatementParserROW_COUNT-570))|(1<<(MySQLStatementParserROW_FORMAT-570)))) != 0) || (((_la-603)&-(0x1f+1)) == 0 && ((1<<uint((_la-603)))&((1<<(MySQLStatementParserRTREE-603))|(1<<(MySQLStatementParserSAVEPOINT-603))|(1<<(MySQLStatementParserSCHEDULE-603))|(1<<(MySQLStatementParserSCHEMA_NAME-603))|(1<<(MySQLStatementParserSECOND-603))|(1<<(MySQLStatementParserSECONDARY-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-603))|(1<<(MySQLStatementParserSECONDARY_LOAD-603))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-603))|(1<<(MySQLStatementParserSECURITY-603))|(1<<(MySQLStatementParserSERIAL-603))|(1<<(MySQLStatementParserSERIALIZABLE-603))|(1<<(MySQLStatementParserSERVER-603))|(1<<(MySQLStatementParserSESSION-603))|(1<<(MySQLStatementParserSHARE-603))|(1<<(MySQLStatementParserSHUTDOWN-603))|(1<<(MySQLStatementParserSIGNED-603))|(1<<(MySQLStatementParserSIMPLE-603))|(1<<(MySQLStatementParserSLAVE-603))|(1<<(MySQLStatementParserSLOW-603)))) != 0) || (((_la-635)&-(0x1f+1)) == 0 && ((1<<uint((_la-635)))&((1<<(MySQLStatementParserSNAPSHOT-635))|(1<<(MySQLStatementParserSOCKET-635))|(1<<(MySQLStatementParserSONAME-635))|(1<<(MySQLStatementParserSOUNDS-635))|(1<<(MySQLStatementParserSOURCE-635))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-635))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-635))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-635))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-635))|(1<<(MySQLStatementParserSQL_NO_CACHE-635))|(1<<(MySQLStatementParserSQL_THREAD-635))|(1<<(MySQLStatementParserSRID-635))|(1<<(MySQLStatementParserSTACKED-635))|(1<<(MySQLStatementParserSTART-635))|(1<<(MySQLStatementParserSTARTS-635))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-635))|(1<<(MySQLStatementParserSTATS_PERSISTENT-635))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-635))|(1<<(MySQLStatementParserSTATUS-635))|(1<<(MySQLStatementParserSTOP-635))|(1<<(MySQLStatementParserSTORAGE-635)))) != 0) || (((_la-669)&-(0x1f+1)) == 0 && ((1<<uint((_la-669)))&((1<<(MySQLStatementParserSTREAM-669))|(1<<(MySQLStatementParserSTRING-669))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-669))|(1<<(MySQLStatementParserSUBJECT-669))|(1<<(MySQLStatementParserSUBPARTITION-669))|(1<<(MySQLStatementParserSUBPARTITIONS-669))|(1<<(MySQLStatementParserSUPER-669))|(1<<(MySQLStatementParserSUSPEND-669))|(1<<(MySQLStatementParserSWAPS-669))|(1<<(MySQLStatementParserSWITCHES-669))|(1<<(MySQLStatementParserTABLES-669))|(1<<(MySQLStatementParserTABLESPACE-669))|(1<<(MySQLStatementParserTABLE_CHECKSUM-669))|(1<<(MySQLStatementParserTABLE_NAME-669))|(1<<(MySQLStatementParserTEMPORARY-669))|(1<<(MySQLStatementParserTEMPTABLE-669))|(1<<(MySQLStatementParserTEXT-669))|(1<<(MySQLStatementParserTHAN-669))|(1<<(MySQLStatementParserTHREAD_PRIORITY-669))|(1<<(MySQLStatementParserTIES-669))|(1<<(MySQLStatementParserTIME-669))|(1<<(MySQLStatementParserTIMESTAMP-669))|(1<<(MySQLStatementParserTIMESTAMP_ADD-669))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-669))|(1<<(MySQLStatementParserTLS-669)))) != 0) || (((_la-703)&-(0x1f+1)) == 0 && ((1<<uint((_la-703)))&((1<<(MySQLStatementParserTRANSACTION-703))|(1<<(MySQLStatementParserTRIGGERS-703))|(1<<(MySQLStatementParserTRUNCATE-703))|(1<<(MySQLStatementParserTYPE-703))|(1<<(MySQLStatementParserTYPES-703))|(1<<(MySQLStatementParserUNBOUNDED-703))|(1<<(MySQLStatementParserUNCOMMITTED-703))|(1<<(MySQLStatementParserUNDEFINED-703))|(1<<(MySQLStatementParserUNDOFILE-703))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-703))|(1<<(MySQLStatementParserUNICODE-703))|(1<<(MySQLStatementParserUNINSTALL-703))|(1<<(MySQLStatementParserUNKNOWN-703))|(1<<(MySQLStatementParserUNTIL-703))|(1<<(MySQLStatementParserUPGRADE-703))|(1<<(MySQLStatementParserUSER-703))|(1<<(MySQLStatementParserUSER_RESOURCES-703))|(1<<(MySQLStatementParserUSE_FRM-703)))) != 0) || (((_la-735)&-(0x1f+1)) == 0 && ((1<<uint((_la-735)))&((1<<(MySQLStatementParserVALIDATION-735))|(1<<(MySQLStatementParserVALUE-735))|(1<<(MySQLStatementParserVARIABLES-735))|(1<<(MySQLStatementParserVCPU-735))|(1<<(MySQLStatementParserVIEW-735))|(1<<(MySQLStatementParserVISIBLE-735))|(1<<(MySQLStatementParserWAIT-735))|(1<<(MySQLStatementParserWARNINGS-735))|(1<<(MySQLStatementParserWEEK-735))|(1<<(MySQLStatementParserWEIGHT_STRING-735))|(1<<(MySQLStatementParserWITHOUT-735))|(1<<(MySQLStatementParserWORK-735))|(1<<(MySQLStatementParserWRAPPER-735))|(1<<(MySQLStatementParserX509-735))|(1<<(MySQLStatementParserXA-735))|(1<<(MySQLStatementParserXID-735))|(1<<(MySQLStatementParserXML-735))|(1<<(MySQLStatementParserYEAR-735)))) != 0) || _la == MySQLStatementParserIDENTIFIER_ || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
			{
				p.SetState(4028)
				p.IndexNameAndType()
			}

		}
		{
			p.SetState(4031)
			p.KeyListWithExpression()
		}
		p.SetState(4035)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 446, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(4032)
					p.IndexOption()
				}

			}
			p.SetState(4037)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 446, p.GetParserRuleContext())
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		p.SetState(4039)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserCONSTRAINT {
			{
				p.SetState(4038)
				p.ConstraintClause()
			}

		}
		{
			p.SetState(4041)
			p.Match(MySQLStatementParserFOREIGN)
		}
		{
			p.SetState(4042)
			p.Match(MySQLStatementParserKEY)
		}
		p.SetState(4044)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49))|(1<<(MySQLStatementParserGROUP_CONCAT-49))|(1<<(MySQLStatementParserCAST-49))|(1<<(MySQLStatementParserPOSITION-49))|(1<<(MySQLStatementParserSUBSTRING-49))|(1<<(MySQLStatementParserSUBSTR-49))|(1<<(MySQLStatementParserEXTRACT-49))|(1<<(MySQLStatementParserTRIM-49))|(1<<(MySQLStatementParserLAST_DAY-49))|(1<<(MySQLStatementParserTRADITIONAL-49))|(1<<(MySQLStatementParserTREE-49))|(1<<(MySQLStatementParserMYSQL_ADMIN-49))|(1<<(MySQLStatementParserINSTANT-49))|(1<<(MySQLStatementParserINPLACE-49))|(1<<(MySQLStatementParserCOPY-49))|(1<<(MySQLStatementParserUL_BINARY-49))|(1<<(MySQLStatementParserAUTOCOMMIT-49))|(1<<(MySQLStatementParserINNODB-49))|(1<<(MySQLStatementParserREDO_LOG-49))|(1<<(MySQLStatementParserACCOUNT-49))|(1<<(MySQLStatementParserACTION-49))|(1<<(MySQLStatementParserACTIVE-49))|(1<<(MySQLStatementParserADMIN-49))|(1<<(MySQLStatementParserAFTER-49))|(1<<(MySQLStatementParserAGAINST-49)))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(MySQLStatementParserAGGREGATE-81))|(1<<(MySQLStatementParserALGORITHM-81))|(1<<(MySQLStatementParserALWAYS-81))|(1<<(MySQLStatementParserANY-81))|(1<<(MySQLStatementParserARRAY-81))|(1<<(MySQLStatementParserASCII-81))|(1<<(MySQLStatementParserAT-81))|(1<<(MySQLStatementParserATTRIBUTE-81))|(1<<(MySQLStatementParserAUTOEXTEND_SIZE-81))|(1<<(MySQLStatementParserAUTO_INCREMENT-81))|(1<<(MySQLStatementParserAVG-81))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-81))|(1<<(MySQLStatementParserBACKUP-81))|(1<<(MySQLStatementParserBEGIN-81))|(1<<(MySQLStatementParserBINLOG-81))|(1<<(MySQLStatementParserBIT-81))|(1<<(MySQLStatementParserBLOCK-81))|(1<<(MySQLStatementParserBOOL-81))|(1<<(MySQLStatementParserBOOLEAN-81)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(MySQLStatementParserBTREE-114))|(1<<(MySQLStatementParserBUCKETS-114))|(1<<(MySQLStatementParserBYTE-114))|(1<<(MySQLStatementParserCACHE-114))|(1<<(MySQLStatementParserCASCADED-114))|(1<<(MySQLStatementParserCATALOG_NAME-114))|(1<<(MySQLStatementParserCHAIN-114))|(1<<(MySQLStatementParserCHANGED-114))|(1<<(MySQLStatementParserCHANNEL-114))|(1<<(MySQLStatementParserCHARSET-114))|(1<<(MySQLStatementParserCHECKSUM-114))|(1<<(MySQLStatementParserCIPHER-114))|(1<<(MySQLStatementParserCLASS_ORIGIN-114))|(1<<(MySQLStatementParserCLIENT-114))|(1<<(MySQLStatementParserCLONE-114))|(1<<(MySQLStatementParserCLOSE-114))|(1<<(MySQLStatementParserCOALESCE-114))|(1<<(MySQLStatementParserCODE-114))|(1<<(MySQLStatementParserCOLLATION-114))|(1<<(MySQLStatementParserCOLUMNS-114))|(1<<(MySQLStatementParserCOLUMN_FORMAT-114))|(1<<(MySQLStatementParserCOLUMN_NAME-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(MySQLStatementParserCOMMENT-146))|(1<<(MySQLStatementParserCOMMIT-146))|(1<<(MySQLStatementParserCOMMITTED-146))|(1<<(MySQLStatementParserCOMPACT-146))|(1<<(MySQLStatementParserCOMPLETION-146))|(1<<(MySQLStatementParserCOMPONENT-146))|(1<<(MySQLStatementParserCOMPRESSED-146))|(1<<(MySQLStatementParserCOMPRESSION-146))|(1<<(MySQLStatementParserCONCURRENT-146))|(1<<(MySQLStatementParserCONNECTION-146))|(1<<(MySQLStatementParserCONSISTENT-146))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-146))|(1<<(MySQLStatementParserCONSTRAINT_NAME-146))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-146))|(1<<(MySQLStatementParserCONTAINS-146))|(1<<(MySQLStatementParserCONTEXT-146))|(1<<(MySQLStatementParserCPU-146))|(1<<(MySQLStatementParserCURRENT-146))|(1<<(MySQLStatementParserCURSOR_NAME-146)))) != 0) || (((_la-178)&-(0x1f+1)) == 0 && ((1<<uint((_la-178)))&((1<<(MySQLStatementParserDATA-178))|(1<<(MySQLStatementParserDATAFILE-178))|(1<<(MySQLStatementParserDATE-178))|(1<<(MySQLStatementParserDATETIME-178))|(1<<(MySQLStatementParserDAY-178))|(1<<(MySQLStatementParserDEALLOCATE-178))|(1<<(MySQLStatementParserDEFAULT_AUTH-178))|(1<<(MySQLStatementParserDEFINER-178))|(1<<(MySQLStatementParserDEFINITION-178))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-178))|(1<<(MySQLStatementParserDESCRIPTION-178))|(1<<(MySQLStatementParserDIAGNOSTICS-178))|(1<<(MySQLStatementParserDIRECTORY-178))|(1<<(MySQLStatementParserDISABLE-178))|(1<<(MySQLStatementParserDISCARD-178))|(1<<(MySQLStatementParserDISK-178)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(MySQLStatementParserDO-213))|(1<<(MySQLStatementParserDUMPFILE-213))|(1<<(MySQLStatementParserDUPLICATE-213))|(1<<(MySQLStatementParserDYNAMIC-213))|(1<<(MySQLStatementParserENABLE-213))|(1<<(MySQLStatementParserENCRYPTION-213))|(1<<(MySQLStatementParserEND-213))|(1<<(MySQLStatementParserENDS-213))|(1<<(MySQLStatementParserENFORCED-213))|(1<<(MySQLStatementParserENGINE-213))|(1<<(MySQLStatementParserENGINES-213))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-213))|(1<<(MySQLStatementParserENUM-213))|(1<<(MySQLStatementParserERROR-213))|(1<<(MySQLStatementParserERRORS-213))|(1<<(MySQLStatementParserESCAPE-213))|(1<<(MySQLStatementParserEVENT-213))|(1<<(MySQLStatementParserEVENTS-213))|(1<<(MySQLStatementParserEVERY-213))|(1<<(MySQLStatementParserEXCHANGE-213))|(1<<(MySQLStatementParserEXCLUDE-213))|(1<<(MySQLStatementParserEXECUTE-213)))) != 0) || (((_la-247)&-(0x1f+1)) == 0 && ((1<<uint((_la-247)))&((1<<(MySQLStatementParserEXPANSION-247))|(1<<(MySQLStatementParserEXPIRE-247))|(1<<(MySQLStatementParserEXPORT-247))|(1<<(MySQLStatementParserEXTENDED-247))|(1<<(MySQLStatementParserEXTENT_SIZE-247))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-247))|(1<<(MySQLStatementParserFAST-247))|(1<<(MySQLStatementParserFAULTS-247))|(1<<(MySQLStatementParserFILE-247))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-247))|(1<<(MySQLStatementParserFILTER-247))|(1<<(MySQLStatementParserFIRST-247))|(1<<(MySQLStatementParserFIXED-247))|(1<<(MySQLStatementParserFLUSH-247))|(1<<(MySQLStatementParserFOLLOWING-247))|(1<<(MySQLStatementParserFOLLOWS-247))|(1<<(MySQLStatementParserFORMAT-247))|(1<<(MySQLStatementParserFOUND-247))|(1<<(MySQLStatementParserFULL-247)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(MySQLStatementParserGENERAL-279))|(1<<(MySQLStatementParserGEOMETRY-279))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-279))|(1<<(MySQLStatementParserGET_FORMAT-279))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-279))|(1<<(MySQLStatementParserGLOBAL-279))|(1<<(MySQLStatementParserGRANTS-279))|(1<<(MySQLStatementParserGROUP_REPLICATION-279))|(1<<(MySQLStatementParserHANDLER-279))|(1<<(MySQLStatementParserHASH-279))|(1<<(MySQLStatementParserHELP-279))|(1<<(MySQLStatementParserHISTOGRAM-279))|(1<<(MySQLStatementParserHISTORY-279))|(1<<(MySQLStatementParserHOST-279))|(1<<(MySQLStatementParserHOSTS-279))|(1<<(MySQLStatementParserHOUR-279))|(1<<(MySQLStatementParserIDENTIFIED-279))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-279))|(1<<(MySQLStatementParserIMPORT-279)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySQLStatementParserINACTIVE-312))|(1<<(MySQLStatementParserINDEXES-312))|(1<<(MySQLStatementParserINITIAL_SIZE-312))|(1<<(MySQLStatementParserINSERT_METHOD-312))|(1<<(MySQLStatementParserINSTALL-312))|(1<<(MySQLStatementParserINSTANCE-312))|(1<<(MySQLStatementParserINVISIBLE-312))|(1<<(MySQLStatementParserINVOKER-312))|(1<<(MySQLStatementParserIO-312))|(1<<(MySQLStatementParserIPC-312))|(1<<(MySQLStatementParserISOLATION-312))|(1<<(MySQLStatementParserISSUER-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySQLStatementParserJSON-344))|(1<<(MySQLStatementParserJSON_VALUE-344))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-344))|(1<<(MySQLStatementParserLANGUAGE-344))|(1<<(MySQLStatementParserLAST-344))|(1<<(MySQLStatementParserLAST_VALUE-344))|(1<<(MySQLStatementParserLEAVES-344))|(1<<(MySQLStatementParserLESS-344))|(1<<(MySQLStatementParserLEVEL-344))|(1<<(MySQLStatementParserLINESTRING-344))|(1<<(MySQLStatementParserLIST-344))|(1<<(MySQLStatementParserLOCAL-344))|(1<<(MySQLStatementParserLOCKED-344))|(1<<(MySQLStatementParserLOCKS-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySQLStatementParserLOGFILE-376))|(1<<(MySQLStatementParserLOGS-376))|(1<<(MySQLStatementParserMASTER-376))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-376))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-376))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-376))|(1<<(MySQLStatementParserMASTER_DELAY-376))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-376))|(1<<(MySQLStatementParserMASTER_HOST-376))|(1<<(MySQLStatementParserMASTER_LOG_FILE-376))|(1<<(MySQLStatementParserMASTER_LOG_POS-376))|(1<<(MySQLStatementParserMASTER_PASSWORD-376))|(1<<(MySQLStatementParserMASTER_PORT-376))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-376))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-376))|(1<<(MySQLStatementParserMASTER_SERVER_ID-376))|(1<<(MySQLStatementParserMASTER_SSL-376))|(1<<(MySQLStatementParserMASTER_SSL_CA-376))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_CERT-376))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-376))|(1<<(MySQLStatementParserMASTER_SSL_CRL-376))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_KEY-376))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySQLStatementParserMASTER_TLS_VERSION-408))|(1<<(MySQLStatementParserMASTER_USER-408))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-408))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_ROWS-408))|(1<<(MySQLStatementParserMAX_SIZE-408))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-408))|(1<<(MySQLStatementParserMEDIUM-408))|(1<<(MySQLStatementParserMEMBER-408))|(1<<(MySQLStatementParserMEMORY-408))|(1<<(MySQLStatementParserMERGE-408))|(1<<(MySQLStatementParserMESSAGE_TEXT-408))|(1<<(MySQLStatementParserMICROSECOND-408))|(1<<(MySQLStatementParserMIGRATE-408))|(1<<(MySQLStatementParserMINUTE-408))|(1<<(MySQLStatementParserMIN_ROWS-408))|(1<<(MySQLStatementParserMODE-408))|(1<<(MySQLStatementParserMODIFY-408))|(1<<(MySQLStatementParserMONTH-408))|(1<<(MySQLStatementParserMULTILINESTRING-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySQLStatementParserMULTIPOINT-440))|(1<<(MySQLStatementParserMULTIPOLYGON-440))|(1<<(MySQLStatementParserMUTEX-440))|(1<<(MySQLStatementParserMYSQL_ERRNO-440))|(1<<(MySQLStatementParserNAME-440))|(1<<(MySQLStatementParserNAMES-440))|(1<<(MySQLStatementParserNATIONAL-440))|(1<<(MySQLStatementParserNCHAR-440))|(1<<(MySQLStatementParserNDBCLUSTER-440))|(1<<(MySQLStatementParserNESTED-440))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-440))|(1<<(MySQLStatementParserNEVER-440))|(1<<(MySQLStatementParserNEW-440))|(1<<(MySQLStatementParserNEXT-440))|(1<<(MySQLStatementParserNO-440))|(1<<(MySQLStatementParserNODEGROUP-440))|(1<<(MySQLStatementParserNONE-440))|(1<<(MySQLStatementParserNOWAIT-440))|(1<<(MySQLStatementParserNO_WAIT-440))|(1<<(MySQLStatementParserNULLS-440))|(1<<(MySQLStatementParserNUMBER-440))|(1<<(MySQLStatementParserNVARCHAR-440))|(1<<(MySQLStatementParserOFF-440))|(1<<(MySQLStatementParserOFFSET-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySQLStatementParserOJ-472))|(1<<(MySQLStatementParserOLD-472))|(1<<(MySQLStatementParserONE-472))|(1<<(MySQLStatementParserONLY-472))|(1<<(MySQLStatementParserOPEN-472))|(1<<(MySQLStatementParserOPTIONAL-472))|(1<<(MySQLStatementParserOPTIONS-472))|(1<<(MySQLStatementParserORDINALITY-472))|(1<<(MySQLStatementParserORGANIZATION-472))|(1<<(MySQLStatementParserOTHERS-472))|(1<<(MySQLStatementParserOWNER-472))|(1<<(MySQLStatementParserPACK_KEYS-472))|(1<<(MySQLStatementParserPAGE-472))|(1<<(MySQLStatementParserPARSER-472))|(1<<(MySQLStatementParserPARTIAL-472))|(1<<(MySQLStatementParserPARTITIONING-472))|(1<<(MySQLStatementParserPARTITIONS-472))|(1<<(MySQLStatementParserPASSWORD-472))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-472))|(1<<(MySQLStatementParserPATH-472)))) != 0) || (((_la-505)&-(0x1f+1)) == 0 && ((1<<uint((_la-505)))&((1<<(MySQLStatementParserPERSIST-505))|(1<<(MySQLStatementParserPERSIST_ONLY-505))|(1<<(MySQLStatementParserPHASE-505))|(1<<(MySQLStatementParserPLUGIN-505))|(1<<(MySQLStatementParserPLUGINS-505))|(1<<(MySQLStatementParserPLUGIN_DIR-505))|(1<<(MySQLStatementParserPOINT-505))|(1<<(MySQLStatementParserPOLYGON-505))|(1<<(MySQLStatementParserPORT-505))|(1<<(MySQLStatementParserPRECEDES-505))|(1<<(MySQLStatementParserPRECEDING-505))|(1<<(MySQLStatementParserPREPARE-505))|(1<<(MySQLStatementParserPRESERVE-505))|(1<<(MySQLStatementParserPREV-505))|(1<<(MySQLStatementParserPRIVILEGES-505))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-505))|(1<<(MySQLStatementParserPROCESS-505))|(1<<(MySQLStatementParserPROCESSLIST-505))|(1<<(MySQLStatementParserPROFILE-505))|(1<<(MySQLStatementParserPROFILES-505))|(1<<(MySQLStatementParserPROXY-505))|(1<<(MySQLStatementParserQUARTER-505))|(1<<(MySQLStatementParserQUERY-505))|(1<<(MySQLStatementParserQUICK-505))|(1<<(MySQLStatementParserRANDOM-505)))) != 0) || (((_la-538)&-(0x1f+1)) == 0 && ((1<<uint((_la-538)))&((1<<(MySQLStatementParserREAD_ONLY-538))|(1<<(MySQLStatementParserREBUILD-538))|(1<<(MySQLStatementParserRECOVER-538))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-538))|(1<<(MySQLStatementParserREDUNDANT-538))|(1<<(MySQLStatementParserREFERENCE-538))|(1<<(MySQLStatementParserRELAY-538))|(1<<(MySQLStatementParserRELAYLOG-538))|(1<<(MySQLStatementParserRELAY_LOG_FILE-538))|(1<<(MySQLStatementParserRELAY_LOG_POS-538))|(1<<(MySQLStatementParserRELAY_THREAD-538))|(1<<(MySQLStatementParserRELOAD-538))|(1<<(MySQLStatementParserREMOVE-538))|(1<<(MySQLStatementParserREORGANIZE-538))|(1<<(MySQLStatementParserREPAIR-538))|(1<<(MySQLStatementParserREPEATABLE-538))|(1<<(MySQLStatementParserREPLICATE_DO_DB-538))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-538)))) != 0) || (((_la-570)&-(0x1f+1)) == 0 && ((1<<uint((_la-570)))&((1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-570))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-570))|(1<<(MySQLStatementParserREPLICATION-570))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-570))|(1<<(MySQLStatementParserRESET-570))|(1<<(MySQLStatementParserRESOURCE-570))|(1<<(MySQLStatementParserRESPECT-570))|(1<<(MySQLStatementParserRESTART-570))|(1<<(MySQLStatementParserRESTORE-570))|(1<<(MySQLStatementParserRESUME-570))|(1<<(MySQLStatementParserRETAIN-570))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-570))|(1<<(MySQLStatementParserRETURNING-570))|(1<<(MySQLStatementParserRETURNS-570))|(1<<(MySQLStatementParserREUSE-570))|(1<<(MySQLStatementParserREVERSE-570))|(1<<(MySQLStatementParserROLE-570))|(1<<(MySQLStatementParserROLLBACK-570))|(1<<(MySQLStatementParserROLLUP-570))|(1<<(MySQLStatementParserROTATE-570))|(1<<(MySQLStatementParserROUTINE-570))|(1<<(MySQLStatementParserROW_COUNT-570))|(1<<(MySQLStatementParserROW_FORMAT-570)))) != 0) || (((_la-603)&-(0x1f+1)) == 0 && ((1<<uint((_la-603)))&((1<<(MySQLStatementParserRTREE-603))|(1<<(MySQLStatementParserSAVEPOINT-603))|(1<<(MySQLStatementParserSCHEDULE-603))|(1<<(MySQLStatementParserSCHEMA_NAME-603))|(1<<(MySQLStatementParserSECOND-603))|(1<<(MySQLStatementParserSECONDARY-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-603))|(1<<(MySQLStatementParserSECONDARY_LOAD-603))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-603))|(1<<(MySQLStatementParserSECURITY-603))|(1<<(MySQLStatementParserSERIAL-603))|(1<<(MySQLStatementParserSERIALIZABLE-603))|(1<<(MySQLStatementParserSERVER-603))|(1<<(MySQLStatementParserSESSION-603))|(1<<(MySQLStatementParserSHARE-603))|(1<<(MySQLStatementParserSHUTDOWN-603))|(1<<(MySQLStatementParserSIGNED-603))|(1<<(MySQLStatementParserSIMPLE-603))|(1<<(MySQLStatementParserSLAVE-603))|(1<<(MySQLStatementParserSLOW-603)))) != 0) || (((_la-635)&-(0x1f+1)) == 0 && ((1<<uint((_la-635)))&((1<<(MySQLStatementParserSNAPSHOT-635))|(1<<(MySQLStatementParserSOCKET-635))|(1<<(MySQLStatementParserSONAME-635))|(1<<(MySQLStatementParserSOUNDS-635))|(1<<(MySQLStatementParserSOURCE-635))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-635))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-635))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-635))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-635))|(1<<(MySQLStatementParserSQL_NO_CACHE-635))|(1<<(MySQLStatementParserSQL_THREAD-635))|(1<<(MySQLStatementParserSRID-635))|(1<<(MySQLStatementParserSTACKED-635))|(1<<(MySQLStatementParserSTART-635))|(1<<(MySQLStatementParserSTARTS-635))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-635))|(1<<(MySQLStatementParserSTATS_PERSISTENT-635))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-635))|(1<<(MySQLStatementParserSTATUS-635))|(1<<(MySQLStatementParserSTOP-635))|(1<<(MySQLStatementParserSTORAGE-635)))) != 0) || (((_la-669)&-(0x1f+1)) == 0 && ((1<<uint((_la-669)))&((1<<(MySQLStatementParserSTREAM-669))|(1<<(MySQLStatementParserSTRING-669))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-669))|(1<<(MySQLStatementParserSUBJECT-669))|(1<<(MySQLStatementParserSUBPARTITION-669))|(1<<(MySQLStatementParserSUBPARTITIONS-669))|(1<<(MySQLStatementParserSUPER-669))|(1<<(MySQLStatementParserSUSPEND-669))|(1<<(MySQLStatementParserSWAPS-669))|(1<<(MySQLStatementParserSWITCHES-669))|(1<<(MySQLStatementParserTABLES-669))|(1<<(MySQLStatementParserTABLESPACE-669))|(1<<(MySQLStatementParserTABLE_CHECKSUM-669))|(1<<(MySQLStatementParserTABLE_NAME-669))|(1<<(MySQLStatementParserTEMPORARY-669))|(1<<(MySQLStatementParserTEMPTABLE-669))|(1<<(MySQLStatementParserTEXT-669))|(1<<(MySQLStatementParserTHAN-669))|(1<<(MySQLStatementParserTHREAD_PRIORITY-669))|(1<<(MySQLStatementParserTIES-669))|(1<<(MySQLStatementParserTIME-669))|(1<<(MySQLStatementParserTIMESTAMP-669))|(1<<(MySQLStatementParserTIMESTAMP_ADD-669))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-669))|(1<<(MySQLStatementParserTLS-669)))) != 0) || (((_la-703)&-(0x1f+1)) == 0 && ((1<<uint((_la-703)))&((1<<(MySQLStatementParserTRANSACTION-703))|(1<<(MySQLStatementParserTRIGGERS-703))|(1<<(MySQLStatementParserTRUNCATE-703))|(1<<(MySQLStatementParserTYPE-703))|(1<<(MySQLStatementParserTYPES-703))|(1<<(MySQLStatementParserUNBOUNDED-703))|(1<<(MySQLStatementParserUNCOMMITTED-703))|(1<<(MySQLStatementParserUNDEFINED-703))|(1<<(MySQLStatementParserUNDOFILE-703))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-703))|(1<<(MySQLStatementParserUNICODE-703))|(1<<(MySQLStatementParserUNINSTALL-703))|(1<<(MySQLStatementParserUNKNOWN-703))|(1<<(MySQLStatementParserUNTIL-703))|(1<<(MySQLStatementParserUPGRADE-703))|(1<<(MySQLStatementParserUSER-703))|(1<<(MySQLStatementParserUSER_RESOURCES-703))|(1<<(MySQLStatementParserUSE_FRM-703)))) != 0) || (((_la-735)&-(0x1f+1)) == 0 && ((1<<uint((_la-735)))&((1<<(MySQLStatementParserVALIDATION-735))|(1<<(MySQLStatementParserVALUE-735))|(1<<(MySQLStatementParserVARIABLES-735))|(1<<(MySQLStatementParserVCPU-735))|(1<<(MySQLStatementParserVIEW-735))|(1<<(MySQLStatementParserVISIBLE-735))|(1<<(MySQLStatementParserWAIT-735))|(1<<(MySQLStatementParserWARNINGS-735))|(1<<(MySQLStatementParserWEEK-735))|(1<<(MySQLStatementParserWEIGHT_STRING-735))|(1<<(MySQLStatementParserWITHOUT-735))|(1<<(MySQLStatementParserWORK-735))|(1<<(MySQLStatementParserWRAPPER-735))|(1<<(MySQLStatementParserX509-735))|(1<<(MySQLStatementParserXA-735))|(1<<(MySQLStatementParserXID-735))|(1<<(MySQLStatementParserXML-735))|(1<<(MySQLStatementParserYEAR-735)))) != 0) || _la == MySQLStatementParserIDENTIFIER_ || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
			{
				p.SetState(4043)
				p.IndexName()
			}

		}
		{
			p.SetState(4046)
			p.KeyParts()
		}
		{
			p.SetState(4047)
			p.ReferenceDefinition()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		p.SetState(4050)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserCONSTRAINT {
			{
				p.SetState(4049)
				p.ConstraintClause()
			}

		}
		{
			p.SetState(4052)
			p.CheckConstraint()
		}
		p.SetState(4054)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 450, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4053)
				p.ConstraintEnforcement()
			}

		}

	}

	return localctx
}

// IAlterCommandsModifierListContext is an interface to support dynamic dispatch.
type IAlterCommandsModifierListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterCommandsModifierListContext differentiates from other interfaces.
	IsAlterCommandsModifierListContext()
}

type AlterCommandsModifierListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterCommandsModifierListContext() *AlterCommandsModifierListContext {
	var p = new(AlterCommandsModifierListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterCommandsModifierList
	return p
}

func (*AlterCommandsModifierListContext) IsAlterCommandsModifierListContext() {}

func NewAlterCommandsModifierListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterCommandsModifierListContext {
	var p = new(AlterCommandsModifierListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterCommandsModifierList

	return p
}

func (s *AlterCommandsModifierListContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterCommandsModifierListContext) AllAlterCommandsModifier() []IAlterCommandsModifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAlterCommandsModifierContext)(nil)).Elem())
	var tst = make([]IAlterCommandsModifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAlterCommandsModifierContext)
		}
	}

	return tst
}

func (s *AlterCommandsModifierListContext) AlterCommandsModifier(i int) IAlterCommandsModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterCommandsModifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAlterCommandsModifierContext)
}

func (s *AlterCommandsModifierListContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *AlterCommandsModifierListContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *AlterCommandsModifierListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterCommandsModifierListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterCommandsModifierListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterCommandsModifierList(s)
	}
}

func (s *AlterCommandsModifierListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterCommandsModifierList(s)
	}
}

func (s *AlterCommandsModifierListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterCommandsModifierList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterCommandsModifierList() (localctx IAlterCommandsModifierListContext) {
	this := p
	_ = this

	localctx = NewAlterCommandsModifierListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 552, MySQLStatementParserRULE_alterCommandsModifierList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4058)
		p.AlterCommandsModifier()
	}
	p.SetState(4063)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 452, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(4059)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(4060)
				p.AlterCommandsModifier()
			}

		}
		p.SetState(4065)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 452, p.GetParserRuleContext())
	}

	return localctx
}

// IAlterCommandsModifierContext is an interface to support dynamic dispatch.
type IAlterCommandsModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterCommandsModifierContext differentiates from other interfaces.
	IsAlterCommandsModifierContext()
}

type AlterCommandsModifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterCommandsModifierContext() *AlterCommandsModifierContext {
	var p = new(AlterCommandsModifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterCommandsModifier
	return p
}

func (*AlterCommandsModifierContext) IsAlterCommandsModifierContext() {}

func NewAlterCommandsModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterCommandsModifierContext {
	var p = new(AlterCommandsModifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterCommandsModifier

	return p
}

func (s *AlterCommandsModifierContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterCommandsModifierContext) AlterAlgorithmOption() IAlterAlgorithmOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterAlgorithmOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterAlgorithmOptionContext)
}

func (s *AlterCommandsModifierContext) AlterLockOption() IAlterLockOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterLockOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterLockOptionContext)
}

func (s *AlterCommandsModifierContext) WithValidation() IWithValidationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWithValidationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWithValidationContext)
}

func (s *AlterCommandsModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterCommandsModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterCommandsModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterCommandsModifier(s)
	}
}

func (s *AlterCommandsModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterCommandsModifier(s)
	}
}

func (s *AlterCommandsModifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterCommandsModifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterCommandsModifier() (localctx IAlterCommandsModifierContext) {
	this := p
	_ = this

	localctx = NewAlterCommandsModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 554, MySQLStatementParserRULE_alterCommandsModifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4069)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserALGORITHM:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4066)
			p.AlterAlgorithmOption()
		}

	case MySQLStatementParserLOCK:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4067)
			p.AlterLockOption()
		}

	case MySQLStatementParserWITH, MySQLStatementParserWITHOUT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4068)
			p.WithValidation()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWithValidationContext is an interface to support dynamic dispatch.
type IWithValidationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWithValidationContext differentiates from other interfaces.
	IsWithValidationContext()
}

type WithValidationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWithValidationContext() *WithValidationContext {
	var p = new(WithValidationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_withValidation
	return p
}

func (*WithValidationContext) IsWithValidationContext() {}

func NewWithValidationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WithValidationContext {
	var p = new(WithValidationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_withValidation

	return p
}

func (s *WithValidationContext) GetParser() antlr.Parser { return s.parser }

func (s *WithValidationContext) VALIDATION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVALIDATION, 0)
}

func (s *WithValidationContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWITH, 0)
}

func (s *WithValidationContext) WITHOUT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWITHOUT, 0)
}

func (s *WithValidationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WithValidationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WithValidationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterWithValidation(s)
	}
}

func (s *WithValidationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitWithValidation(s)
	}
}

func (s *WithValidationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitWithValidation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) WithValidation() (localctx IWithValidationContext) {
	this := p
	_ = this

	localctx = NewWithValidationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 556, MySQLStatementParserRULE_withValidation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4071)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserWITH || _la == MySQLStatementParserWITHOUT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(4072)
		p.Match(MySQLStatementParserVALIDATION)
	}

	return localctx
}

// IStandaloneAlterCommandsContext is an interface to support dynamic dispatch.
type IStandaloneAlterCommandsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStandaloneAlterCommandsContext differentiates from other interfaces.
	IsStandaloneAlterCommandsContext()
}

type StandaloneAlterCommandsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStandaloneAlterCommandsContext() *StandaloneAlterCommandsContext {
	var p = new(StandaloneAlterCommandsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_standaloneAlterCommands
	return p
}

func (*StandaloneAlterCommandsContext) IsStandaloneAlterCommandsContext() {}

func NewStandaloneAlterCommandsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StandaloneAlterCommandsContext {
	var p = new(StandaloneAlterCommandsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_standaloneAlterCommands

	return p
}

func (s *StandaloneAlterCommandsContext) GetParser() antlr.Parser { return s.parser }

func (s *StandaloneAlterCommandsContext) DISCARD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDISCARD, 0)
}

func (s *StandaloneAlterCommandsContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLESPACE, 0)
}

func (s *StandaloneAlterCommandsContext) IMPORT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIMPORT, 0)
}

func (s *StandaloneAlterCommandsContext) AlterPartition() IAlterPartitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterPartitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterPartitionContext)
}

func (s *StandaloneAlterCommandsContext) SECONDARY_LOAD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSECONDARY_LOAD, 0)
}

func (s *StandaloneAlterCommandsContext) SECONDARY_UNLOAD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSECONDARY_UNLOAD, 0)
}

func (s *StandaloneAlterCommandsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StandaloneAlterCommandsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StandaloneAlterCommandsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStandaloneAlterCommands(s)
	}
}

func (s *StandaloneAlterCommandsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStandaloneAlterCommands(s)
	}
}

func (s *StandaloneAlterCommandsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStandaloneAlterCommands(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) StandaloneAlterCommands() (localctx IStandaloneAlterCommandsContext) {
	this := p
	_ = this

	localctx = NewStandaloneAlterCommandsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 558, MySQLStatementParserRULE_standaloneAlterCommands)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4080)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 454, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4074)
			p.Match(MySQLStatementParserDISCARD)
		}
		{
			p.SetState(4075)
			p.Match(MySQLStatementParserTABLESPACE)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4076)
			p.Match(MySQLStatementParserIMPORT)
		}
		{
			p.SetState(4077)
			p.Match(MySQLStatementParserTABLESPACE)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4078)
			p.AlterPartition()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4079)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserSECONDARY_LOAD || _la == MySQLStatementParserSECONDARY_UNLOAD) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IAlterPartitionContext is an interface to support dynamic dispatch.
type IAlterPartitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterPartitionContext differentiates from other interfaces.
	IsAlterPartitionContext()
}

type AlterPartitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterPartitionContext() *AlterPartitionContext {
	var p = new(AlterPartitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterPartition
	return p
}

func (*AlterPartitionContext) IsAlterPartitionContext() {}

func NewAlterPartitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterPartitionContext {
	var p = new(AlterPartitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterPartition

	return p
}

func (s *AlterPartitionContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterPartitionContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserADD, 0)
}

func (s *AlterPartitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPARTITION, 0)
}

func (s *AlterPartitionContext) PartitionDefinitions() IPartitionDefinitionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionDefinitionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionDefinitionsContext)
}

func (s *AlterPartitionContext) PARTITIONS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPARTITIONS, 0)
}

func (s *AlterPartitionContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *AlterPartitionContext) AllNoWriteToBinLog() []INoWriteToBinLogContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INoWriteToBinLogContext)(nil)).Elem())
	var tst = make([]INoWriteToBinLogContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INoWriteToBinLogContext)
		}
	}

	return tst
}

func (s *AlterPartitionContext) NoWriteToBinLog(i int) INoWriteToBinLogContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INoWriteToBinLogContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INoWriteToBinLogContext)
}

func (s *AlterPartitionContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDROP, 0)
}

func (s *AlterPartitionContext) IdentifierList() IIdentifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierListContext)
}

func (s *AlterPartitionContext) REBUILD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREBUILD, 0)
}

func (s *AlterPartitionContext) AllOrPartitionNameList() IAllOrPartitionNameListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAllOrPartitionNameListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAllOrPartitionNameListContext)
}

func (s *AlterPartitionContext) OPTIMIZE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOPTIMIZE, 0)
}

func (s *AlterPartitionContext) ANALYZE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserANALYZE, 0)
}

func (s *AlterPartitionContext) CHECK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHECK, 0)
}

func (s *AlterPartitionContext) AllCheckType() []ICheckTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICheckTypeContext)(nil)).Elem())
	var tst = make([]ICheckTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICheckTypeContext)
		}
	}

	return tst
}

func (s *AlterPartitionContext) CheckType(i int) ICheckTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICheckTypeContext)
}

func (s *AlterPartitionContext) REPAIR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPAIR, 0)
}

func (s *AlterPartitionContext) AllRepairType() []IRepairTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRepairTypeContext)(nil)).Elem())
	var tst = make([]IRepairTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRepairTypeContext)
		}
	}

	return tst
}

func (s *AlterPartitionContext) RepairType(i int) IRepairTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRepairTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRepairTypeContext)
}

func (s *AlterPartitionContext) COALESCE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOALESCE, 0)
}

func (s *AlterPartitionContext) TRUNCATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTRUNCATE, 0)
}

func (s *AlterPartitionContext) REORGANIZE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREORGANIZE, 0)
}

func (s *AlterPartitionContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINTO, 0)
}

func (s *AlterPartitionContext) EXCHANGE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXCHANGE, 0)
}

func (s *AlterPartitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AlterPartitionContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWITH, 0)
}

func (s *AlterPartitionContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLE, 0)
}

func (s *AlterPartitionContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *AlterPartitionContext) WithValidation() IWithValidationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWithValidationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWithValidationContext)
}

func (s *AlterPartitionContext) DISCARD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDISCARD, 0)
}

func (s *AlterPartitionContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLESPACE, 0)
}

func (s *AlterPartitionContext) IMPORT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIMPORT, 0)
}

func (s *AlterPartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterPartitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterPartitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterPartition(s)
	}
}

func (s *AlterPartitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterPartition(s)
	}
}

func (s *AlterPartitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterPartition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterPartition() (localctx IAlterPartitionContext) {
	this := p
	_ = this

	localctx = NewAlterPartitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 560, MySQLStatementParserRULE_alterPartition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(4176)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserADD:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4082)
			p.Match(MySQLStatementParserADD)
		}
		{
			p.SetState(4083)
			p.Match(MySQLStatementParserPARTITION)
		}
		p.SetState(4085)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserLOCAL || _la == MySQLStatementParserNO_WRITE_TO_BINLOG {
			{
				p.SetState(4084)
				p.NoWriteToBinLog()
			}

		}
		p.SetState(4090)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySQLStatementParserLP_:
			{
				p.SetState(4087)
				p.PartitionDefinitions()
			}

		case MySQLStatementParserPARTITIONS:
			{
				p.SetState(4088)
				p.Match(MySQLStatementParserPARTITIONS)
			}
			{
				p.SetState(4089)
				p.Match(MySQLStatementParserNUMBER_)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case MySQLStatementParserDROP:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4092)
			p.Match(MySQLStatementParserDROP)
		}
		{
			p.SetState(4093)
			p.Match(MySQLStatementParserPARTITION)
		}
		{
			p.SetState(4094)
			p.IdentifierList()
		}

	case MySQLStatementParserREBUILD:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4095)
			p.Match(MySQLStatementParserREBUILD)
		}
		{
			p.SetState(4096)
			p.Match(MySQLStatementParserPARTITION)
		}
		p.SetState(4098)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 457, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4097)
				p.NoWriteToBinLog()
			}

		}
		{
			p.SetState(4100)
			p.AllOrPartitionNameList()
		}

	case MySQLStatementParserOPTIMIZE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4101)
			p.Match(MySQLStatementParserOPTIMIZE)
		}
		{
			p.SetState(4102)
			p.Match(MySQLStatementParserPARTITION)
		}
		p.SetState(4104)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 458, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4103)
				p.NoWriteToBinLog()
			}

		}
		{
			p.SetState(4106)
			p.AllOrPartitionNameList()
		}
		p.SetState(4108)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 459, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4107)
				p.NoWriteToBinLog()
			}

		}

	case MySQLStatementParserANALYZE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4110)
			p.Match(MySQLStatementParserANALYZE)
		}
		{
			p.SetState(4111)
			p.Match(MySQLStatementParserPARTITION)
		}
		p.SetState(4113)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 460, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4112)
				p.NoWriteToBinLog()
			}

		}
		{
			p.SetState(4115)
			p.AllOrPartitionNameList()
		}

	case MySQLStatementParserCHECK:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4116)
			p.Match(MySQLStatementParserCHECK)
		}
		{
			p.SetState(4117)
			p.Match(MySQLStatementParserPARTITION)
		}
		{
			p.SetState(4118)
			p.AllOrPartitionNameList()
		}
		p.SetState(4122)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 461, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(4119)
					p.CheckType()
				}

			}
			p.SetState(4124)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 461, p.GetParserRuleContext())
		}

	case MySQLStatementParserREPAIR:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(4125)
			p.Match(MySQLStatementParserREPAIR)
		}
		{
			p.SetState(4126)
			p.Match(MySQLStatementParserPARTITION)
		}
		p.SetState(4128)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 462, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4127)
				p.NoWriteToBinLog()
			}

		}
		{
			p.SetState(4130)
			p.AllOrPartitionNameList()
		}
		p.SetState(4134)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 463, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(4131)
					p.RepairType()
				}

			}
			p.SetState(4136)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 463, p.GetParserRuleContext())
		}

	case MySQLStatementParserCOALESCE:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(4137)
			p.Match(MySQLStatementParserCOALESCE)
		}
		{
			p.SetState(4138)
			p.Match(MySQLStatementParserPARTITION)
		}
		p.SetState(4140)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserLOCAL || _la == MySQLStatementParserNO_WRITE_TO_BINLOG {
			{
				p.SetState(4139)
				p.NoWriteToBinLog()
			}

		}
		{
			p.SetState(4142)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case MySQLStatementParserTRUNCATE:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(4143)
			p.Match(MySQLStatementParserTRUNCATE)
		}
		{
			p.SetState(4144)
			p.Match(MySQLStatementParserPARTITION)
		}
		{
			p.SetState(4145)
			p.AllOrPartitionNameList()
		}

	case MySQLStatementParserREORGANIZE:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(4146)
			p.Match(MySQLStatementParserREORGANIZE)
		}
		{
			p.SetState(4147)
			p.Match(MySQLStatementParserPARTITION)
		}
		p.SetState(4149)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 465, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4148)
				p.NoWriteToBinLog()
			}

		}
		p.SetState(4155)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 466, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4151)
				p.IdentifierList()
			}
			{
				p.SetState(4152)
				p.Match(MySQLStatementParserINTO)
			}
			{
				p.SetState(4153)
				p.PartitionDefinitions()
			}

		}

	case MySQLStatementParserEXCHANGE:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(4157)
			p.Match(MySQLStatementParserEXCHANGE)
		}
		{
			p.SetState(4158)
			p.Match(MySQLStatementParserPARTITION)
		}
		{
			p.SetState(4159)
			p.Identifier()
		}
		{
			p.SetState(4160)
			p.Match(MySQLStatementParserWITH)
		}
		{
			p.SetState(4161)
			p.Match(MySQLStatementParserTABLE)
		}
		{
			p.SetState(4162)
			p.TableName()
		}
		p.SetState(4164)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 467, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4163)
				p.WithValidation()
			}

		}

	case MySQLStatementParserDISCARD:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(4166)
			p.Match(MySQLStatementParserDISCARD)
		}
		{
			p.SetState(4167)
			p.Match(MySQLStatementParserPARTITION)
		}
		{
			p.SetState(4168)
			p.AllOrPartitionNameList()
		}
		{
			p.SetState(4169)
			p.Match(MySQLStatementParserTABLESPACE)
		}

	case MySQLStatementParserIMPORT:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(4171)
			p.Match(MySQLStatementParserIMPORT)
		}
		{
			p.SetState(4172)
			p.Match(MySQLStatementParserPARTITION)
		}
		{
			p.SetState(4173)
			p.AllOrPartitionNameList()
		}
		{
			p.SetState(4174)
			p.Match(MySQLStatementParserTABLESPACE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConstraintClauseContext is an interface to support dynamic dispatch.
type IConstraintClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstraintClauseContext differentiates from other interfaces.
	IsConstraintClauseContext()
}

type ConstraintClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstraintClauseContext() *ConstraintClauseContext {
	var p = new(ConstraintClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_constraintClause
	return p
}

func (*ConstraintClauseContext) IsConstraintClauseContext() {}

func NewConstraintClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstraintClauseContext {
	var p = new(ConstraintClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_constraintClause

	return p
}

func (s *ConstraintClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstraintClauseContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCONSTRAINT, 0)
}

func (s *ConstraintClauseContext) ConstraintName() IConstraintNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraintNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstraintNameContext)
}

func (s *ConstraintClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstraintClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstraintClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterConstraintClause(s)
	}
}

func (s *ConstraintClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitConstraintClause(s)
	}
}

func (s *ConstraintClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitConstraintClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ConstraintClause() (localctx IConstraintClauseContext) {
	this := p
	_ = this

	localctx = NewConstraintClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 562, MySQLStatementParserRULE_constraintClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4178)
		p.Match(MySQLStatementParserCONSTRAINT)
	}
	p.SetState(4180)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49))|(1<<(MySQLStatementParserGROUP_CONCAT-49))|(1<<(MySQLStatementParserCAST-49))|(1<<(MySQLStatementParserPOSITION-49))|(1<<(MySQLStatementParserSUBSTRING-49))|(1<<(MySQLStatementParserSUBSTR-49))|(1<<(MySQLStatementParserEXTRACT-49))|(1<<(MySQLStatementParserTRIM-49))|(1<<(MySQLStatementParserLAST_DAY-49))|(1<<(MySQLStatementParserTRADITIONAL-49))|(1<<(MySQLStatementParserTREE-49))|(1<<(MySQLStatementParserMYSQL_ADMIN-49))|(1<<(MySQLStatementParserINSTANT-49))|(1<<(MySQLStatementParserINPLACE-49))|(1<<(MySQLStatementParserCOPY-49))|(1<<(MySQLStatementParserUL_BINARY-49))|(1<<(MySQLStatementParserAUTOCOMMIT-49))|(1<<(MySQLStatementParserINNODB-49))|(1<<(MySQLStatementParserREDO_LOG-49))|(1<<(MySQLStatementParserACCOUNT-49))|(1<<(MySQLStatementParserACTION-49))|(1<<(MySQLStatementParserACTIVE-49))|(1<<(MySQLStatementParserADMIN-49))|(1<<(MySQLStatementParserAFTER-49))|(1<<(MySQLStatementParserAGAINST-49)))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(MySQLStatementParserAGGREGATE-81))|(1<<(MySQLStatementParserALGORITHM-81))|(1<<(MySQLStatementParserALWAYS-81))|(1<<(MySQLStatementParserANY-81))|(1<<(MySQLStatementParserARRAY-81))|(1<<(MySQLStatementParserASCII-81))|(1<<(MySQLStatementParserAT-81))|(1<<(MySQLStatementParserATTRIBUTE-81))|(1<<(MySQLStatementParserAUTOEXTEND_SIZE-81))|(1<<(MySQLStatementParserAUTO_INCREMENT-81))|(1<<(MySQLStatementParserAVG-81))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-81))|(1<<(MySQLStatementParserBACKUP-81))|(1<<(MySQLStatementParserBEGIN-81))|(1<<(MySQLStatementParserBINLOG-81))|(1<<(MySQLStatementParserBIT-81))|(1<<(MySQLStatementParserBLOCK-81))|(1<<(MySQLStatementParserBOOL-81))|(1<<(MySQLStatementParserBOOLEAN-81)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(MySQLStatementParserBTREE-114))|(1<<(MySQLStatementParserBUCKETS-114))|(1<<(MySQLStatementParserBYTE-114))|(1<<(MySQLStatementParserCACHE-114))|(1<<(MySQLStatementParserCASCADED-114))|(1<<(MySQLStatementParserCATALOG_NAME-114))|(1<<(MySQLStatementParserCHAIN-114))|(1<<(MySQLStatementParserCHANGED-114))|(1<<(MySQLStatementParserCHANNEL-114))|(1<<(MySQLStatementParserCHARSET-114))|(1<<(MySQLStatementParserCHECKSUM-114))|(1<<(MySQLStatementParserCIPHER-114))|(1<<(MySQLStatementParserCLASS_ORIGIN-114))|(1<<(MySQLStatementParserCLIENT-114))|(1<<(MySQLStatementParserCLONE-114))|(1<<(MySQLStatementParserCLOSE-114))|(1<<(MySQLStatementParserCOALESCE-114))|(1<<(MySQLStatementParserCODE-114))|(1<<(MySQLStatementParserCOLLATION-114))|(1<<(MySQLStatementParserCOLUMNS-114))|(1<<(MySQLStatementParserCOLUMN_FORMAT-114))|(1<<(MySQLStatementParserCOLUMN_NAME-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(MySQLStatementParserCOMMENT-146))|(1<<(MySQLStatementParserCOMMIT-146))|(1<<(MySQLStatementParserCOMMITTED-146))|(1<<(MySQLStatementParserCOMPACT-146))|(1<<(MySQLStatementParserCOMPLETION-146))|(1<<(MySQLStatementParserCOMPONENT-146))|(1<<(MySQLStatementParserCOMPRESSED-146))|(1<<(MySQLStatementParserCOMPRESSION-146))|(1<<(MySQLStatementParserCONCURRENT-146))|(1<<(MySQLStatementParserCONNECTION-146))|(1<<(MySQLStatementParserCONSISTENT-146))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-146))|(1<<(MySQLStatementParserCONSTRAINT_NAME-146))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-146))|(1<<(MySQLStatementParserCONTAINS-146))|(1<<(MySQLStatementParserCONTEXT-146))|(1<<(MySQLStatementParserCPU-146))|(1<<(MySQLStatementParserCURRENT-146))|(1<<(MySQLStatementParserCURSOR_NAME-146)))) != 0) || (((_la-178)&-(0x1f+1)) == 0 && ((1<<uint((_la-178)))&((1<<(MySQLStatementParserDATA-178))|(1<<(MySQLStatementParserDATAFILE-178))|(1<<(MySQLStatementParserDATE-178))|(1<<(MySQLStatementParserDATETIME-178))|(1<<(MySQLStatementParserDAY-178))|(1<<(MySQLStatementParserDEALLOCATE-178))|(1<<(MySQLStatementParserDEFAULT_AUTH-178))|(1<<(MySQLStatementParserDEFINER-178))|(1<<(MySQLStatementParserDEFINITION-178))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-178))|(1<<(MySQLStatementParserDESCRIPTION-178))|(1<<(MySQLStatementParserDIAGNOSTICS-178))|(1<<(MySQLStatementParserDIRECTORY-178))|(1<<(MySQLStatementParserDISABLE-178))|(1<<(MySQLStatementParserDISCARD-178))|(1<<(MySQLStatementParserDISK-178)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(MySQLStatementParserDO-213))|(1<<(MySQLStatementParserDUMPFILE-213))|(1<<(MySQLStatementParserDUPLICATE-213))|(1<<(MySQLStatementParserDYNAMIC-213))|(1<<(MySQLStatementParserENABLE-213))|(1<<(MySQLStatementParserENCRYPTION-213))|(1<<(MySQLStatementParserEND-213))|(1<<(MySQLStatementParserENDS-213))|(1<<(MySQLStatementParserENFORCED-213))|(1<<(MySQLStatementParserENGINE-213))|(1<<(MySQLStatementParserENGINES-213))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-213))|(1<<(MySQLStatementParserENUM-213))|(1<<(MySQLStatementParserERROR-213))|(1<<(MySQLStatementParserERRORS-213))|(1<<(MySQLStatementParserESCAPE-213))|(1<<(MySQLStatementParserEVENT-213))|(1<<(MySQLStatementParserEVENTS-213))|(1<<(MySQLStatementParserEVERY-213))|(1<<(MySQLStatementParserEXCHANGE-213))|(1<<(MySQLStatementParserEXCLUDE-213))|(1<<(MySQLStatementParserEXECUTE-213)))) != 0) || (((_la-247)&-(0x1f+1)) == 0 && ((1<<uint((_la-247)))&((1<<(MySQLStatementParserEXPANSION-247))|(1<<(MySQLStatementParserEXPIRE-247))|(1<<(MySQLStatementParserEXPORT-247))|(1<<(MySQLStatementParserEXTENDED-247))|(1<<(MySQLStatementParserEXTENT_SIZE-247))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-247))|(1<<(MySQLStatementParserFAST-247))|(1<<(MySQLStatementParserFAULTS-247))|(1<<(MySQLStatementParserFILE-247))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-247))|(1<<(MySQLStatementParserFILTER-247))|(1<<(MySQLStatementParserFIRST-247))|(1<<(MySQLStatementParserFIXED-247))|(1<<(MySQLStatementParserFLUSH-247))|(1<<(MySQLStatementParserFOLLOWING-247))|(1<<(MySQLStatementParserFOLLOWS-247))|(1<<(MySQLStatementParserFORMAT-247))|(1<<(MySQLStatementParserFOUND-247))|(1<<(MySQLStatementParserFULL-247)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(MySQLStatementParserGENERAL-279))|(1<<(MySQLStatementParserGEOMETRY-279))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-279))|(1<<(MySQLStatementParserGET_FORMAT-279))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-279))|(1<<(MySQLStatementParserGLOBAL-279))|(1<<(MySQLStatementParserGRANTS-279))|(1<<(MySQLStatementParserGROUP_REPLICATION-279))|(1<<(MySQLStatementParserHANDLER-279))|(1<<(MySQLStatementParserHASH-279))|(1<<(MySQLStatementParserHELP-279))|(1<<(MySQLStatementParserHISTOGRAM-279))|(1<<(MySQLStatementParserHISTORY-279))|(1<<(MySQLStatementParserHOST-279))|(1<<(MySQLStatementParserHOSTS-279))|(1<<(MySQLStatementParserHOUR-279))|(1<<(MySQLStatementParserIDENTIFIED-279))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-279))|(1<<(MySQLStatementParserIMPORT-279)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySQLStatementParserINACTIVE-312))|(1<<(MySQLStatementParserINDEXES-312))|(1<<(MySQLStatementParserINITIAL_SIZE-312))|(1<<(MySQLStatementParserINSERT_METHOD-312))|(1<<(MySQLStatementParserINSTALL-312))|(1<<(MySQLStatementParserINSTANCE-312))|(1<<(MySQLStatementParserINVISIBLE-312))|(1<<(MySQLStatementParserINVOKER-312))|(1<<(MySQLStatementParserIO-312))|(1<<(MySQLStatementParserIPC-312))|(1<<(MySQLStatementParserISOLATION-312))|(1<<(MySQLStatementParserISSUER-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySQLStatementParserJSON-344))|(1<<(MySQLStatementParserJSON_VALUE-344))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-344))|(1<<(MySQLStatementParserLANGUAGE-344))|(1<<(MySQLStatementParserLAST-344))|(1<<(MySQLStatementParserLAST_VALUE-344))|(1<<(MySQLStatementParserLEAVES-344))|(1<<(MySQLStatementParserLESS-344))|(1<<(MySQLStatementParserLEVEL-344))|(1<<(MySQLStatementParserLINESTRING-344))|(1<<(MySQLStatementParserLIST-344))|(1<<(MySQLStatementParserLOCAL-344))|(1<<(MySQLStatementParserLOCKED-344))|(1<<(MySQLStatementParserLOCKS-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySQLStatementParserLOGFILE-376))|(1<<(MySQLStatementParserLOGS-376))|(1<<(MySQLStatementParserMASTER-376))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-376))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-376))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-376))|(1<<(MySQLStatementParserMASTER_DELAY-376))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-376))|(1<<(MySQLStatementParserMASTER_HOST-376))|(1<<(MySQLStatementParserMASTER_LOG_FILE-376))|(1<<(MySQLStatementParserMASTER_LOG_POS-376))|(1<<(MySQLStatementParserMASTER_PASSWORD-376))|(1<<(MySQLStatementParserMASTER_PORT-376))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-376))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-376))|(1<<(MySQLStatementParserMASTER_SERVER_ID-376))|(1<<(MySQLStatementParserMASTER_SSL-376))|(1<<(MySQLStatementParserMASTER_SSL_CA-376))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_CERT-376))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-376))|(1<<(MySQLStatementParserMASTER_SSL_CRL-376))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_KEY-376))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySQLStatementParserMASTER_TLS_VERSION-408))|(1<<(MySQLStatementParserMASTER_USER-408))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-408))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_ROWS-408))|(1<<(MySQLStatementParserMAX_SIZE-408))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-408))|(1<<(MySQLStatementParserMEDIUM-408))|(1<<(MySQLStatementParserMEMBER-408))|(1<<(MySQLStatementParserMEMORY-408))|(1<<(MySQLStatementParserMERGE-408))|(1<<(MySQLStatementParserMESSAGE_TEXT-408))|(1<<(MySQLStatementParserMICROSECOND-408))|(1<<(MySQLStatementParserMIGRATE-408))|(1<<(MySQLStatementParserMINUTE-408))|(1<<(MySQLStatementParserMIN_ROWS-408))|(1<<(MySQLStatementParserMODE-408))|(1<<(MySQLStatementParserMODIFY-408))|(1<<(MySQLStatementParserMONTH-408))|(1<<(MySQLStatementParserMULTILINESTRING-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySQLStatementParserMULTIPOINT-440))|(1<<(MySQLStatementParserMULTIPOLYGON-440))|(1<<(MySQLStatementParserMUTEX-440))|(1<<(MySQLStatementParserMYSQL_ERRNO-440))|(1<<(MySQLStatementParserNAME-440))|(1<<(MySQLStatementParserNAMES-440))|(1<<(MySQLStatementParserNATIONAL-440))|(1<<(MySQLStatementParserNCHAR-440))|(1<<(MySQLStatementParserNDBCLUSTER-440))|(1<<(MySQLStatementParserNESTED-440))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-440))|(1<<(MySQLStatementParserNEVER-440))|(1<<(MySQLStatementParserNEW-440))|(1<<(MySQLStatementParserNEXT-440))|(1<<(MySQLStatementParserNO-440))|(1<<(MySQLStatementParserNODEGROUP-440))|(1<<(MySQLStatementParserNONE-440))|(1<<(MySQLStatementParserNOWAIT-440))|(1<<(MySQLStatementParserNO_WAIT-440))|(1<<(MySQLStatementParserNULLS-440))|(1<<(MySQLStatementParserNUMBER-440))|(1<<(MySQLStatementParserNVARCHAR-440))|(1<<(MySQLStatementParserOFF-440))|(1<<(MySQLStatementParserOFFSET-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySQLStatementParserOJ-472))|(1<<(MySQLStatementParserOLD-472))|(1<<(MySQLStatementParserONE-472))|(1<<(MySQLStatementParserONLY-472))|(1<<(MySQLStatementParserOPEN-472))|(1<<(MySQLStatementParserOPTIONAL-472))|(1<<(MySQLStatementParserOPTIONS-472))|(1<<(MySQLStatementParserORDINALITY-472))|(1<<(MySQLStatementParserORGANIZATION-472))|(1<<(MySQLStatementParserOTHERS-472))|(1<<(MySQLStatementParserOWNER-472))|(1<<(MySQLStatementParserPACK_KEYS-472))|(1<<(MySQLStatementParserPAGE-472))|(1<<(MySQLStatementParserPARSER-472))|(1<<(MySQLStatementParserPARTIAL-472))|(1<<(MySQLStatementParserPARTITIONING-472))|(1<<(MySQLStatementParserPARTITIONS-472))|(1<<(MySQLStatementParserPASSWORD-472))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-472))|(1<<(MySQLStatementParserPATH-472)))) != 0) || (((_la-505)&-(0x1f+1)) == 0 && ((1<<uint((_la-505)))&((1<<(MySQLStatementParserPERSIST-505))|(1<<(MySQLStatementParserPERSIST_ONLY-505))|(1<<(MySQLStatementParserPHASE-505))|(1<<(MySQLStatementParserPLUGIN-505))|(1<<(MySQLStatementParserPLUGINS-505))|(1<<(MySQLStatementParserPLUGIN_DIR-505))|(1<<(MySQLStatementParserPOINT-505))|(1<<(MySQLStatementParserPOLYGON-505))|(1<<(MySQLStatementParserPORT-505))|(1<<(MySQLStatementParserPRECEDES-505))|(1<<(MySQLStatementParserPRECEDING-505))|(1<<(MySQLStatementParserPREPARE-505))|(1<<(MySQLStatementParserPRESERVE-505))|(1<<(MySQLStatementParserPREV-505))|(1<<(MySQLStatementParserPRIVILEGES-505))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-505))|(1<<(MySQLStatementParserPROCESS-505))|(1<<(MySQLStatementParserPROCESSLIST-505))|(1<<(MySQLStatementParserPROFILE-505))|(1<<(MySQLStatementParserPROFILES-505))|(1<<(MySQLStatementParserPROXY-505))|(1<<(MySQLStatementParserQUARTER-505))|(1<<(MySQLStatementParserQUERY-505))|(1<<(MySQLStatementParserQUICK-505))|(1<<(MySQLStatementParserRANDOM-505)))) != 0) || (((_la-538)&-(0x1f+1)) == 0 && ((1<<uint((_la-538)))&((1<<(MySQLStatementParserREAD_ONLY-538))|(1<<(MySQLStatementParserREBUILD-538))|(1<<(MySQLStatementParserRECOVER-538))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-538))|(1<<(MySQLStatementParserREDUNDANT-538))|(1<<(MySQLStatementParserREFERENCE-538))|(1<<(MySQLStatementParserRELAY-538))|(1<<(MySQLStatementParserRELAYLOG-538))|(1<<(MySQLStatementParserRELAY_LOG_FILE-538))|(1<<(MySQLStatementParserRELAY_LOG_POS-538))|(1<<(MySQLStatementParserRELAY_THREAD-538))|(1<<(MySQLStatementParserRELOAD-538))|(1<<(MySQLStatementParserREMOVE-538))|(1<<(MySQLStatementParserREORGANIZE-538))|(1<<(MySQLStatementParserREPAIR-538))|(1<<(MySQLStatementParserREPEATABLE-538))|(1<<(MySQLStatementParserREPLICATE_DO_DB-538))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-538)))) != 0) || (((_la-570)&-(0x1f+1)) == 0 && ((1<<uint((_la-570)))&((1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-570))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-570))|(1<<(MySQLStatementParserREPLICATION-570))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-570))|(1<<(MySQLStatementParserRESET-570))|(1<<(MySQLStatementParserRESOURCE-570))|(1<<(MySQLStatementParserRESPECT-570))|(1<<(MySQLStatementParserRESTART-570))|(1<<(MySQLStatementParserRESTORE-570))|(1<<(MySQLStatementParserRESUME-570))|(1<<(MySQLStatementParserRETAIN-570))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-570))|(1<<(MySQLStatementParserRETURNING-570))|(1<<(MySQLStatementParserRETURNS-570))|(1<<(MySQLStatementParserREUSE-570))|(1<<(MySQLStatementParserREVERSE-570))|(1<<(MySQLStatementParserROLE-570))|(1<<(MySQLStatementParserROLLBACK-570))|(1<<(MySQLStatementParserROLLUP-570))|(1<<(MySQLStatementParserROTATE-570))|(1<<(MySQLStatementParserROUTINE-570))|(1<<(MySQLStatementParserROW_COUNT-570))|(1<<(MySQLStatementParserROW_FORMAT-570)))) != 0) || (((_la-603)&-(0x1f+1)) == 0 && ((1<<uint((_la-603)))&((1<<(MySQLStatementParserRTREE-603))|(1<<(MySQLStatementParserSAVEPOINT-603))|(1<<(MySQLStatementParserSCHEDULE-603))|(1<<(MySQLStatementParserSCHEMA_NAME-603))|(1<<(MySQLStatementParserSECOND-603))|(1<<(MySQLStatementParserSECONDARY-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-603))|(1<<(MySQLStatementParserSECONDARY_LOAD-603))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-603))|(1<<(MySQLStatementParserSECURITY-603))|(1<<(MySQLStatementParserSERIAL-603))|(1<<(MySQLStatementParserSERIALIZABLE-603))|(1<<(MySQLStatementParserSERVER-603))|(1<<(MySQLStatementParserSESSION-603))|(1<<(MySQLStatementParserSHARE-603))|(1<<(MySQLStatementParserSHUTDOWN-603))|(1<<(MySQLStatementParserSIGNED-603))|(1<<(MySQLStatementParserSIMPLE-603))|(1<<(MySQLStatementParserSLAVE-603))|(1<<(MySQLStatementParserSLOW-603)))) != 0) || (((_la-635)&-(0x1f+1)) == 0 && ((1<<uint((_la-635)))&((1<<(MySQLStatementParserSNAPSHOT-635))|(1<<(MySQLStatementParserSOCKET-635))|(1<<(MySQLStatementParserSONAME-635))|(1<<(MySQLStatementParserSOUNDS-635))|(1<<(MySQLStatementParserSOURCE-635))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-635))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-635))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-635))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-635))|(1<<(MySQLStatementParserSQL_NO_CACHE-635))|(1<<(MySQLStatementParserSQL_THREAD-635))|(1<<(MySQLStatementParserSRID-635))|(1<<(MySQLStatementParserSTACKED-635))|(1<<(MySQLStatementParserSTART-635))|(1<<(MySQLStatementParserSTARTS-635))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-635))|(1<<(MySQLStatementParserSTATS_PERSISTENT-635))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-635))|(1<<(MySQLStatementParserSTATUS-635))|(1<<(MySQLStatementParserSTOP-635))|(1<<(MySQLStatementParserSTORAGE-635)))) != 0) || (((_la-669)&-(0x1f+1)) == 0 && ((1<<uint((_la-669)))&((1<<(MySQLStatementParserSTREAM-669))|(1<<(MySQLStatementParserSTRING-669))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-669))|(1<<(MySQLStatementParserSUBJECT-669))|(1<<(MySQLStatementParserSUBPARTITION-669))|(1<<(MySQLStatementParserSUBPARTITIONS-669))|(1<<(MySQLStatementParserSUPER-669))|(1<<(MySQLStatementParserSUSPEND-669))|(1<<(MySQLStatementParserSWAPS-669))|(1<<(MySQLStatementParserSWITCHES-669))|(1<<(MySQLStatementParserTABLES-669))|(1<<(MySQLStatementParserTABLESPACE-669))|(1<<(MySQLStatementParserTABLE_CHECKSUM-669))|(1<<(MySQLStatementParserTABLE_NAME-669))|(1<<(MySQLStatementParserTEMPORARY-669))|(1<<(MySQLStatementParserTEMPTABLE-669))|(1<<(MySQLStatementParserTEXT-669))|(1<<(MySQLStatementParserTHAN-669))|(1<<(MySQLStatementParserTHREAD_PRIORITY-669))|(1<<(MySQLStatementParserTIES-669))|(1<<(MySQLStatementParserTIME-669))|(1<<(MySQLStatementParserTIMESTAMP-669))|(1<<(MySQLStatementParserTIMESTAMP_ADD-669))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-669))|(1<<(MySQLStatementParserTLS-669)))) != 0) || (((_la-703)&-(0x1f+1)) == 0 && ((1<<uint((_la-703)))&((1<<(MySQLStatementParserTRANSACTION-703))|(1<<(MySQLStatementParserTRIGGERS-703))|(1<<(MySQLStatementParserTRUNCATE-703))|(1<<(MySQLStatementParserTYPE-703))|(1<<(MySQLStatementParserTYPES-703))|(1<<(MySQLStatementParserUNBOUNDED-703))|(1<<(MySQLStatementParserUNCOMMITTED-703))|(1<<(MySQLStatementParserUNDEFINED-703))|(1<<(MySQLStatementParserUNDOFILE-703))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-703))|(1<<(MySQLStatementParserUNICODE-703))|(1<<(MySQLStatementParserUNINSTALL-703))|(1<<(MySQLStatementParserUNKNOWN-703))|(1<<(MySQLStatementParserUNTIL-703))|(1<<(MySQLStatementParserUPGRADE-703))|(1<<(MySQLStatementParserUSER-703))|(1<<(MySQLStatementParserUSER_RESOURCES-703))|(1<<(MySQLStatementParserUSE_FRM-703)))) != 0) || (((_la-735)&-(0x1f+1)) == 0 && ((1<<uint((_la-735)))&((1<<(MySQLStatementParserVALIDATION-735))|(1<<(MySQLStatementParserVALUE-735))|(1<<(MySQLStatementParserVARIABLES-735))|(1<<(MySQLStatementParserVCPU-735))|(1<<(MySQLStatementParserVIEW-735))|(1<<(MySQLStatementParserVISIBLE-735))|(1<<(MySQLStatementParserWAIT-735))|(1<<(MySQLStatementParserWARNINGS-735))|(1<<(MySQLStatementParserWEEK-735))|(1<<(MySQLStatementParserWEIGHT_STRING-735))|(1<<(MySQLStatementParserWITHOUT-735))|(1<<(MySQLStatementParserWORK-735))|(1<<(MySQLStatementParserWRAPPER-735))|(1<<(MySQLStatementParserX509-735))|(1<<(MySQLStatementParserXA-735))|(1<<(MySQLStatementParserXID-735))|(1<<(MySQLStatementParserXML-735))|(1<<(MySQLStatementParserYEAR-735)))) != 0) || _la == MySQLStatementParserIDENTIFIER_ || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
		{
			p.SetState(4179)
			p.ConstraintName()
		}

	}

	return localctx
}

// ITableElementListContext is an interface to support dynamic dispatch.
type ITableElementListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableElementListContext differentiates from other interfaces.
	IsTableElementListContext()
}

type TableElementListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableElementListContext() *TableElementListContext {
	var p = new(TableElementListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_tableElementList
	return p
}

func (*TableElementListContext) IsTableElementListContext() {}

func NewTableElementListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableElementListContext {
	var p = new(TableElementListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_tableElementList

	return p
}

func (s *TableElementListContext) GetParser() antlr.Parser { return s.parser }

func (s *TableElementListContext) AllTableElement() []ITableElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableElementContext)(nil)).Elem())
	var tst = make([]ITableElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableElementContext)
		}
	}

	return tst
}

func (s *TableElementListContext) TableElement(i int) ITableElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableElementContext)
}

func (s *TableElementListContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *TableElementListContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *TableElementListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableElementListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableElementListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTableElementList(s)
	}
}

func (s *TableElementListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTableElementList(s)
	}
}

func (s *TableElementListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTableElementList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TableElementList() (localctx ITableElementListContext) {
	this := p
	_ = this

	localctx = NewTableElementListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 564, MySQLStatementParserRULE_tableElementList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4182)
		p.TableElement()
	}
	p.SetState(4187)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(4183)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(4184)
			p.TableElement()
		}

		p.SetState(4189)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITableElementContext is an interface to support dynamic dispatch.
type ITableElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableElementContext differentiates from other interfaces.
	IsTableElementContext()
}

type TableElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableElementContext() *TableElementContext {
	var p = new(TableElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_tableElement
	return p
}

func (*TableElementContext) IsTableElementContext() {}

func NewTableElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableElementContext {
	var p = new(TableElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_tableElement

	return p
}

func (s *TableElementContext) GetParser() antlr.Parser { return s.parser }

func (s *TableElementContext) ColumnDefinition() IColumnDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnDefinitionContext)
}

func (s *TableElementContext) TableConstraintDef() ITableConstraintDefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableConstraintDefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableConstraintDefContext)
}

func (s *TableElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableElementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTableElement(s)
	}
}

func (s *TableElementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTableElement(s)
	}
}

func (s *TableElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTableElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TableElement() (localctx ITableElementContext) {
	this := p
	_ = this

	localctx = NewTableElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 566, MySQLStatementParserRULE_tableElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4192)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserMAX, MySQLStatementParserMIN, MySQLStatementParserSUM, MySQLStatementParserCOUNT, MySQLStatementParserGROUP_CONCAT, MySQLStatementParserCAST, MySQLStatementParserPOSITION, MySQLStatementParserSUBSTRING, MySQLStatementParserSUBSTR, MySQLStatementParserEXTRACT, MySQLStatementParserTRIM, MySQLStatementParserLAST_DAY, MySQLStatementParserTRADITIONAL, MySQLStatementParserTREE, MySQLStatementParserMYSQL_ADMIN, MySQLStatementParserINSTANT, MySQLStatementParserINPLACE, MySQLStatementParserCOPY, MySQLStatementParserUL_BINARY, MySQLStatementParserAUTOCOMMIT, MySQLStatementParserINNODB, MySQLStatementParserREDO_LOG, MySQLStatementParserACCOUNT, MySQLStatementParserACTION, MySQLStatementParserACTIVE, MySQLStatementParserADMIN, MySQLStatementParserAFTER, MySQLStatementParserAGAINST, MySQLStatementParserAGGREGATE, MySQLStatementParserALGORITHM, MySQLStatementParserALWAYS, MySQLStatementParserANY, MySQLStatementParserARRAY, MySQLStatementParserASCII, MySQLStatementParserAT, MySQLStatementParserATTRIBUTE, MySQLStatementParserAUTOEXTEND_SIZE, MySQLStatementParserAUTO_INCREMENT, MySQLStatementParserAVG, MySQLStatementParserAVG_ROW_LENGTH, MySQLStatementParserBACKUP, MySQLStatementParserBEGIN, MySQLStatementParserBINLOG, MySQLStatementParserBIT, MySQLStatementParserBLOCK, MySQLStatementParserBOOL, MySQLStatementParserBOOLEAN, MySQLStatementParserBTREE, MySQLStatementParserBUCKETS, MySQLStatementParserBYTE, MySQLStatementParserCACHE, MySQLStatementParserCASCADED, MySQLStatementParserCATALOG_NAME, MySQLStatementParserCHAIN, MySQLStatementParserCHANGED, MySQLStatementParserCHANNEL, MySQLStatementParserCHARSET, MySQLStatementParserCHECKSUM, MySQLStatementParserCIPHER, MySQLStatementParserCLASS_ORIGIN, MySQLStatementParserCLIENT, MySQLStatementParserCLONE, MySQLStatementParserCLOSE, MySQLStatementParserCOALESCE, MySQLStatementParserCODE, MySQLStatementParserCOLLATION, MySQLStatementParserCOLUMNS, MySQLStatementParserCOLUMN_FORMAT, MySQLStatementParserCOLUMN_NAME, MySQLStatementParserCOMMENT, MySQLStatementParserCOMMIT, MySQLStatementParserCOMMITTED, MySQLStatementParserCOMPACT, MySQLStatementParserCOMPLETION, MySQLStatementParserCOMPONENT, MySQLStatementParserCOMPRESSED, MySQLStatementParserCOMPRESSION, MySQLStatementParserCONCURRENT, MySQLStatementParserCONNECTION, MySQLStatementParserCONSISTENT, MySQLStatementParserCONSTRAINT_CATALOG, MySQLStatementParserCONSTRAINT_NAME, MySQLStatementParserCONSTRAINT_SCHEMA, MySQLStatementParserCONTAINS, MySQLStatementParserCONTEXT, MySQLStatementParserCPU, MySQLStatementParserCURRENT, MySQLStatementParserCURSOR_NAME, MySQLStatementParserDATA, MySQLStatementParserDATAFILE, MySQLStatementParserDATE, MySQLStatementParserDATETIME, MySQLStatementParserDAY, MySQLStatementParserDEALLOCATE, MySQLStatementParserDEFAULT_AUTH, MySQLStatementParserDEFINER, MySQLStatementParserDEFINITION, MySQLStatementParserDELAY_KEY_WRITE, MySQLStatementParserDESCRIPTION, MySQLStatementParserDIAGNOSTICS, MySQLStatementParserDIRECTORY, MySQLStatementParserDISABLE, MySQLStatementParserDISCARD, MySQLStatementParserDISK, MySQLStatementParserDO, MySQLStatementParserDUMPFILE, MySQLStatementParserDUPLICATE, MySQLStatementParserDYNAMIC, MySQLStatementParserENABLE, MySQLStatementParserENCRYPTION, MySQLStatementParserEND, MySQLStatementParserENDS, MySQLStatementParserENFORCED, MySQLStatementParserENGINE, MySQLStatementParserENGINES, MySQLStatementParserENGINE_ATTRIBUTE, MySQLStatementParserENUM, MySQLStatementParserERROR, MySQLStatementParserERRORS, MySQLStatementParserESCAPE, MySQLStatementParserEVENT, MySQLStatementParserEVENTS, MySQLStatementParserEVERY, MySQLStatementParserEXCHANGE, MySQLStatementParserEXCLUDE, MySQLStatementParserEXECUTE, MySQLStatementParserEXPANSION, MySQLStatementParserEXPIRE, MySQLStatementParserEXPORT, MySQLStatementParserEXTENDED, MySQLStatementParserEXTENT_SIZE, MySQLStatementParserFAILED_LOGIN_ATTEMPTS, MySQLStatementParserFAST, MySQLStatementParserFAULTS, MySQLStatementParserFILE, MySQLStatementParserFILE_BLOCK_SIZE, MySQLStatementParserFILTER, MySQLStatementParserFIRST, MySQLStatementParserFIXED, MySQLStatementParserFLUSH, MySQLStatementParserFOLLOWING, MySQLStatementParserFOLLOWS, MySQLStatementParserFORMAT, MySQLStatementParserFOUND, MySQLStatementParserFULL, MySQLStatementParserGENERAL, MySQLStatementParserGEOMETRY, MySQLStatementParserGEOMETRYCOLLECTION, MySQLStatementParserGET_FORMAT, MySQLStatementParserGET_MASTER_PUBLIC_KEY, MySQLStatementParserGLOBAL, MySQLStatementParserGRANTS, MySQLStatementParserGROUP_REPLICATION, MySQLStatementParserHANDLER, MySQLStatementParserHASH, MySQLStatementParserHELP, MySQLStatementParserHISTOGRAM, MySQLStatementParserHISTORY, MySQLStatementParserHOST, MySQLStatementParserHOSTS, MySQLStatementParserHOUR, MySQLStatementParserIDENTIFIED, MySQLStatementParserIGNORE_SERVER_IDS, MySQLStatementParserIMPORT, MySQLStatementParserINACTIVE, MySQLStatementParserINDEXES, MySQLStatementParserINITIAL_SIZE, MySQLStatementParserINSERT_METHOD, MySQLStatementParserINSTALL, MySQLStatementParserINSTANCE, MySQLStatementParserINVISIBLE, MySQLStatementParserINVOKER, MySQLStatementParserIO, MySQLStatementParserIPC, MySQLStatementParserISOLATION, MySQLStatementParserISSUER, MySQLStatementParserJSON, MySQLStatementParserJSON_VALUE, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserLANGUAGE, MySQLStatementParserLAST, MySQLStatementParserLAST_VALUE, MySQLStatementParserLEAVES, MySQLStatementParserLESS, MySQLStatementParserLEVEL, MySQLStatementParserLINESTRING, MySQLStatementParserLIST, MySQLStatementParserLOCAL, MySQLStatementParserLOCKED, MySQLStatementParserLOCKS, MySQLStatementParserLOGFILE, MySQLStatementParserLOGS, MySQLStatementParserMASTER, MySQLStatementParserMASTER_AUTO_POSITION, MySQLStatementParserMASTER_COMPRESSION_ALGORITHM, MySQLStatementParserMASTER_CONNECT_RETRY, MySQLStatementParserMASTER_DELAY, MySQLStatementParserMASTER_HEARTBEAT_PERIOD, MySQLStatementParserMASTER_HOST, MySQLStatementParserMASTER_LOG_FILE, MySQLStatementParserMASTER_LOG_POS, MySQLStatementParserMASTER_PASSWORD, MySQLStatementParserMASTER_PORT, MySQLStatementParserMASTER_PUBLIC_KEY_PATH, MySQLStatementParserMASTER_RETRY_COUNT, MySQLStatementParserMASTER_SERVER_ID, MySQLStatementParserMASTER_SSL, MySQLStatementParserMASTER_SSL_CA, MySQLStatementParserMASTER_SSL_CAPATH, MySQLStatementParserMASTER_SSL_CERT, MySQLStatementParserMASTER_SSL_CIPHER, MySQLStatementParserMASTER_SSL_CRL, MySQLStatementParserMASTER_SSL_CRLPATH, MySQLStatementParserMASTER_SSL_KEY, MySQLStatementParserMASTER_TLS_CIPHERSUITES, MySQLStatementParserMASTER_TLS_VERSION, MySQLStatementParserMASTER_USER, MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL, MySQLStatementParserMAX_CONNECTIONS_PER_HOUR, MySQLStatementParserMAX_QUERIES_PER_HOUR, MySQLStatementParserMAX_ROWS, MySQLStatementParserMAX_SIZE, MySQLStatementParserMAX_UPDATES_PER_HOUR, MySQLStatementParserMAX_USER_CONNECTIONS, MySQLStatementParserMEDIUM, MySQLStatementParserMEMBER, MySQLStatementParserMEMORY, MySQLStatementParserMERGE, MySQLStatementParserMESSAGE_TEXT, MySQLStatementParserMICROSECOND, MySQLStatementParserMIGRATE, MySQLStatementParserMINUTE, MySQLStatementParserMIN_ROWS, MySQLStatementParserMODE, MySQLStatementParserMODIFY, MySQLStatementParserMONTH, MySQLStatementParserMULTILINESTRING, MySQLStatementParserMULTIPOINT, MySQLStatementParserMULTIPOLYGON, MySQLStatementParserMUTEX, MySQLStatementParserMYSQL_ERRNO, MySQLStatementParserNAME, MySQLStatementParserNAMES, MySQLStatementParserNATIONAL, MySQLStatementParserNCHAR, MySQLStatementParserNDBCLUSTER, MySQLStatementParserNESTED, MySQLStatementParserNETWORK_NAMESPACE, MySQLStatementParserNEVER, MySQLStatementParserNEW, MySQLStatementParserNEXT, MySQLStatementParserNO, MySQLStatementParserNODEGROUP, MySQLStatementParserNONE, MySQLStatementParserNOWAIT, MySQLStatementParserNO_WAIT, MySQLStatementParserNULLS, MySQLStatementParserNUMBER, MySQLStatementParserNVARCHAR, MySQLStatementParserOFF, MySQLStatementParserOFFSET, MySQLStatementParserOJ, MySQLStatementParserOLD, MySQLStatementParserONE, MySQLStatementParserONLY, MySQLStatementParserOPEN, MySQLStatementParserOPTIONAL, MySQLStatementParserOPTIONS, MySQLStatementParserORDINALITY, MySQLStatementParserORGANIZATION, MySQLStatementParserOTHERS, MySQLStatementParserOWNER, MySQLStatementParserPACK_KEYS, MySQLStatementParserPAGE, MySQLStatementParserPARSER, MySQLStatementParserPARTIAL, MySQLStatementParserPARTITIONING, MySQLStatementParserPARTITIONS, MySQLStatementParserPASSWORD, MySQLStatementParserPASSWORD_LOCK_TIME, MySQLStatementParserPATH, MySQLStatementParserPERSIST, MySQLStatementParserPERSIST_ONLY, MySQLStatementParserPHASE, MySQLStatementParserPLUGIN, MySQLStatementParserPLUGINS, MySQLStatementParserPLUGIN_DIR, MySQLStatementParserPOINT, MySQLStatementParserPOLYGON, MySQLStatementParserPORT, MySQLStatementParserPRECEDES, MySQLStatementParserPRECEDING, MySQLStatementParserPREPARE, MySQLStatementParserPRESERVE, MySQLStatementParserPREV, MySQLStatementParserPRIVILEGES, MySQLStatementParserPRIVILEGE_CHECKS_USER, MySQLStatementParserPROCESS, MySQLStatementParserPROCESSLIST, MySQLStatementParserPROFILE, MySQLStatementParserPROFILES, MySQLStatementParserPROXY, MySQLStatementParserQUARTER, MySQLStatementParserQUERY, MySQLStatementParserQUICK, MySQLStatementParserRANDOM, MySQLStatementParserREAD_ONLY, MySQLStatementParserREBUILD, MySQLStatementParserRECOVER, MySQLStatementParserREDO_BUFFER_SIZE, MySQLStatementParserREDUNDANT, MySQLStatementParserREFERENCE, MySQLStatementParserRELAY, MySQLStatementParserRELAYLOG, MySQLStatementParserRELAY_LOG_FILE, MySQLStatementParserRELAY_LOG_POS, MySQLStatementParserRELAY_THREAD, MySQLStatementParserRELOAD, MySQLStatementParserREMOVE, MySQLStatementParserREORGANIZE, MySQLStatementParserREPAIR, MySQLStatementParserREPEATABLE, MySQLStatementParserREPLICATE_DO_DB, MySQLStatementParserREPLICATE_DO_TABLE, MySQLStatementParserREPLICATE_IGNORE_DB, MySQLStatementParserREPLICATE_IGNORE_TABLE, MySQLStatementParserREPLICATE_REWRITE_DB, MySQLStatementParserREPLICATE_WILD_DO_TABLE, MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE, MySQLStatementParserREPLICATION, MySQLStatementParserREQUIRE_ROW_FORMAT, MySQLStatementParserRESET, MySQLStatementParserRESOURCE, MySQLStatementParserRESPECT, MySQLStatementParserRESTART, MySQLStatementParserRESTORE, MySQLStatementParserRESUME, MySQLStatementParserRETAIN, MySQLStatementParserRETURNED_SQLSTATE, MySQLStatementParserRETURNING, MySQLStatementParserRETURNS, MySQLStatementParserREUSE, MySQLStatementParserREVERSE, MySQLStatementParserROLE, MySQLStatementParserROLLBACK, MySQLStatementParserROLLUP, MySQLStatementParserROTATE, MySQLStatementParserROUTINE, MySQLStatementParserROW_COUNT, MySQLStatementParserROW_FORMAT, MySQLStatementParserRTREE, MySQLStatementParserSAVEPOINT, MySQLStatementParserSCHEDULE, MySQLStatementParserSCHEMA_NAME, MySQLStatementParserSECOND, MySQLStatementParserSECONDARY, MySQLStatementParserSECONDARY_ENGINE, MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, MySQLStatementParserSECONDARY_LOAD, MySQLStatementParserSECONDARY_UNLOAD, MySQLStatementParserSECURITY, MySQLStatementParserSERIAL, MySQLStatementParserSERIALIZABLE, MySQLStatementParserSERVER, MySQLStatementParserSESSION, MySQLStatementParserSHARE, MySQLStatementParserSHUTDOWN, MySQLStatementParserSIGNED, MySQLStatementParserSIMPLE, MySQLStatementParserSLAVE, MySQLStatementParserSLOW, MySQLStatementParserSNAPSHOT, MySQLStatementParserSOCKET, MySQLStatementParserSONAME, MySQLStatementParserSOUNDS, MySQLStatementParserSOURCE, MySQLStatementParserSQL_AFTER_GTIDS, MySQLStatementParserSQL_AFTER_MTS_GAPS, MySQLStatementParserSQL_BEFORE_GTIDS, MySQLStatementParserSQL_BUFFER_RESULT, MySQLStatementParserSQL_NO_CACHE, MySQLStatementParserSQL_THREAD, MySQLStatementParserSRID, MySQLStatementParserSTACKED, MySQLStatementParserSTART, MySQLStatementParserSTARTS, MySQLStatementParserSTATS_AUTO_RECALC, MySQLStatementParserSTATS_PERSISTENT, MySQLStatementParserSTATS_SAMPLE_PAGES, MySQLStatementParserSTATUS, MySQLStatementParserSTOP, MySQLStatementParserSTORAGE, MySQLStatementParserSTREAM, MySQLStatementParserSTRING, MySQLStatementParserSUBCLASS_ORIGIN, MySQLStatementParserSUBJECT, MySQLStatementParserSUBPARTITION, MySQLStatementParserSUBPARTITIONS, MySQLStatementParserSUPER, MySQLStatementParserSUSPEND, MySQLStatementParserSWAPS, MySQLStatementParserSWITCHES, MySQLStatementParserTABLES, MySQLStatementParserTABLESPACE, MySQLStatementParserTABLE_CHECKSUM, MySQLStatementParserTABLE_NAME, MySQLStatementParserTEMPORARY, MySQLStatementParserTEMPTABLE, MySQLStatementParserTEXT, MySQLStatementParserTHAN, MySQLStatementParserTHREAD_PRIORITY, MySQLStatementParserTIES, MySQLStatementParserTIME, MySQLStatementParserTIMESTAMP, MySQLStatementParserTIMESTAMP_ADD, MySQLStatementParserTIMESTAMP_DIFF, MySQLStatementParserTLS, MySQLStatementParserTRANSACTION, MySQLStatementParserTRIGGERS, MySQLStatementParserTRUNCATE, MySQLStatementParserTYPE, MySQLStatementParserTYPES, MySQLStatementParserUNBOUNDED, MySQLStatementParserUNCOMMITTED, MySQLStatementParserUNDEFINED, MySQLStatementParserUNDOFILE, MySQLStatementParserUNDO_BUFFER_SIZE, MySQLStatementParserUNICODE, MySQLStatementParserUNINSTALL, MySQLStatementParserUNKNOWN, MySQLStatementParserUNTIL, MySQLStatementParserUPGRADE, MySQLStatementParserUSER, MySQLStatementParserUSER_RESOURCES, MySQLStatementParserUSE_FRM, MySQLStatementParserVALIDATION, MySQLStatementParserVALUE, MySQLStatementParserVARIABLES, MySQLStatementParserVCPU, MySQLStatementParserVIEW, MySQLStatementParserVISIBLE, MySQLStatementParserWAIT, MySQLStatementParserWARNINGS, MySQLStatementParserWEEK, MySQLStatementParserWEIGHT_STRING, MySQLStatementParserWITHOUT, MySQLStatementParserWORK, MySQLStatementParserWRAPPER, MySQLStatementParserX509, MySQLStatementParserXA, MySQLStatementParserXID, MySQLStatementParserXML, MySQLStatementParserYEAR, MySQLStatementParserIDENTIFIER_, MySQLStatementParserDOUBLE_QUOTED_TEXT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4190)
			p.ColumnDefinition()
		}

	case MySQLStatementParserCHECK, MySQLStatementParserCONSTRAINT, MySQLStatementParserFOREIGN, MySQLStatementParserFULLTEXT, MySQLStatementParserINDEX, MySQLStatementParserKEY, MySQLStatementParserPRIMARY, MySQLStatementParserSPATIAL, MySQLStatementParserUNIQUE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4191)
			p.TableConstraintDef()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IRestrictContext is an interface to support dynamic dispatch.
type IRestrictContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRestrictContext differentiates from other interfaces.
	IsRestrictContext()
}

type RestrictContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRestrictContext() *RestrictContext {
	var p = new(RestrictContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_restrict
	return p
}

func (*RestrictContext) IsRestrictContext() {}

func NewRestrictContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RestrictContext {
	var p = new(RestrictContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_restrict

	return p
}

func (s *RestrictContext) GetParser() antlr.Parser { return s.parser }

func (s *RestrictContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRESTRICT, 0)
}

func (s *RestrictContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCASCADE, 0)
}

func (s *RestrictContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RestrictContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RestrictContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterRestrict(s)
	}
}

func (s *RestrictContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitRestrict(s)
	}
}

func (s *RestrictContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitRestrict(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Restrict() (localctx IRestrictContext) {
	this := p
	_ = this

	localctx = NewRestrictContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 568, MySQLStatementParserRULE_restrict)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4194)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserCASCADE || _la == MySQLStatementParserRESTRICT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IFulltextIndexOptionContext is an interface to support dynamic dispatch.
type IFulltextIndexOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFulltextIndexOptionContext differentiates from other interfaces.
	IsFulltextIndexOptionContext()
}

type FulltextIndexOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFulltextIndexOptionContext() *FulltextIndexOptionContext {
	var p = new(FulltextIndexOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_fulltextIndexOption
	return p
}

func (*FulltextIndexOptionContext) IsFulltextIndexOptionContext() {}

func NewFulltextIndexOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FulltextIndexOptionContext {
	var p = new(FulltextIndexOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_fulltextIndexOption

	return p
}

func (s *FulltextIndexOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *FulltextIndexOptionContext) CommonIndexOption() ICommonIndexOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICommonIndexOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICommonIndexOptionContext)
}

func (s *FulltextIndexOptionContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWITH, 0)
}

func (s *FulltextIndexOptionContext) PARSER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPARSER, 0)
}

func (s *FulltextIndexOptionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *FulltextIndexOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FulltextIndexOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FulltextIndexOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterFulltextIndexOption(s)
	}
}

func (s *FulltextIndexOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitFulltextIndexOption(s)
	}
}

func (s *FulltextIndexOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitFulltextIndexOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) FulltextIndexOption() (localctx IFulltextIndexOptionContext) {
	this := p
	_ = this

	localctx = NewFulltextIndexOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 570, MySQLStatementParserRULE_fulltextIndexOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4200)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserCOMMENT, MySQLStatementParserINVISIBLE, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserVISIBLE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4196)
			p.CommonIndexOption()
		}

	case MySQLStatementParserWITH:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4197)
			p.Match(MySQLStatementParserWITH)
		}
		{
			p.SetState(4198)
			p.Match(MySQLStatementParserPARSER)
		}
		{
			p.SetState(4199)
			p.Identifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDropTableContext is an interface to support dynamic dispatch.
type IDropTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropTableContext differentiates from other interfaces.
	IsDropTableContext()
}

type DropTableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropTableContext() *DropTableContext {
	var p = new(DropTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_dropTable
	return p
}

func (*DropTableContext) IsDropTableContext() {}

func NewDropTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropTableContext {
	var p = new(DropTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_dropTable

	return p
}

func (s *DropTableContext) GetParser() antlr.Parser { return s.parser }

func (s *DropTableContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDROP, 0)
}

func (s *DropTableContext) TableOrTables() ITableOrTablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableOrTablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableOrTablesContext)
}

func (s *DropTableContext) TableList() ITableListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableListContext)
}

func (s *DropTableContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTEMPORARY, 0)
}

func (s *DropTableContext) ExistClause() IExistClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExistClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExistClauseContext)
}

func (s *DropTableContext) Restrict() IRestrictContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRestrictContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRestrictContext)
}

func (s *DropTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDropTable(s)
	}
}

func (s *DropTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDropTable(s)
	}
}

func (s *DropTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDropTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DropTable() (localctx IDropTableContext) {
	this := p
	_ = this

	localctx = NewDropTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 572, MySQLStatementParserRULE_dropTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4202)
		p.Match(MySQLStatementParserDROP)
	}
	p.SetState(4204)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserTEMPORARY {
		{
			p.SetState(4203)
			p.Match(MySQLStatementParserTEMPORARY)
		}

	}
	{
		p.SetState(4206)
		p.TableOrTables()
	}
	p.SetState(4208)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIF {
		{
			p.SetState(4207)
			p.ExistClause()
		}

	}
	{
		p.SetState(4210)
		p.TableList()
	}
	p.SetState(4212)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserCASCADE || _la == MySQLStatementParserRESTRICT {
		{
			p.SetState(4211)
			p.Restrict()
		}

	}

	return localctx
}

// IDropIndexContext is an interface to support dynamic dispatch.
type IDropIndexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropIndexContext differentiates from other interfaces.
	IsDropIndexContext()
}

type DropIndexContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropIndexContext() *DropIndexContext {
	var p = new(DropIndexContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_dropIndex
	return p
}

func (*DropIndexContext) IsDropIndexContext() {}

func NewDropIndexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropIndexContext {
	var p = new(DropIndexContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_dropIndex

	return p
}

func (s *DropIndexContext) GetParser() antlr.Parser { return s.parser }

func (s *DropIndexContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDROP, 0)
}

func (s *DropIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINDEX, 0)
}

func (s *DropIndexContext) IndexName() IIndexNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexNameContext)
}

func (s *DropIndexContext) ON() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserON, 0)
}

func (s *DropIndexContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *DropIndexContext) AllAlterAlgorithmOption() []IAlterAlgorithmOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAlterAlgorithmOptionContext)(nil)).Elem())
	var tst = make([]IAlterAlgorithmOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAlterAlgorithmOptionContext)
		}
	}

	return tst
}

func (s *DropIndexContext) AlterAlgorithmOption(i int) IAlterAlgorithmOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterAlgorithmOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAlterAlgorithmOptionContext)
}

func (s *DropIndexContext) AllAlterLockOption() []IAlterLockOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAlterLockOptionContext)(nil)).Elem())
	var tst = make([]IAlterLockOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAlterLockOptionContext)
		}
	}

	return tst
}

func (s *DropIndexContext) AlterLockOption(i int) IAlterLockOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterLockOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAlterLockOptionContext)
}

func (s *DropIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropIndexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDropIndex(s)
	}
}

func (s *DropIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDropIndex(s)
	}
}

func (s *DropIndexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDropIndex(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DropIndex() (localctx IDropIndexContext) {
	this := p
	_ = this

	localctx = NewDropIndexContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 574, MySQLStatementParserRULE_dropIndex)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4214)
		p.Match(MySQLStatementParserDROP)
	}
	{
		p.SetState(4215)
		p.Match(MySQLStatementParserINDEX)
	}
	{
		p.SetState(4216)
		p.IndexName()
	}
	p.SetState(4219)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserON {
		{
			p.SetState(4217)
			p.Match(MySQLStatementParserON)
		}
		{
			p.SetState(4218)
			p.TableName()
		}

	}
	p.SetState(4225)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserALGORITHM || _la == MySQLStatementParserLOCK {
		p.SetState(4223)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySQLStatementParserALGORITHM:
			{
				p.SetState(4221)
				p.AlterAlgorithmOption()
			}

		case MySQLStatementParserLOCK:
			{
				p.SetState(4222)
				p.AlterLockOption()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(4227)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAlterAlgorithmOptionContext is an interface to support dynamic dispatch.
type IAlterAlgorithmOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterAlgorithmOptionContext differentiates from other interfaces.
	IsAlterAlgorithmOptionContext()
}

type AlterAlgorithmOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterAlgorithmOptionContext() *AlterAlgorithmOptionContext {
	var p = new(AlterAlgorithmOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterAlgorithmOption
	return p
}

func (*AlterAlgorithmOptionContext) IsAlterAlgorithmOptionContext() {}

func NewAlterAlgorithmOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterAlgorithmOptionContext {
	var p = new(AlterAlgorithmOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterAlgorithmOption

	return p
}

func (s *AlterAlgorithmOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterAlgorithmOptionContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALGORITHM, 0)
}

func (s *AlterAlgorithmOptionContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFAULT, 0)
}

func (s *AlterAlgorithmOptionContext) INSTANT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINSTANT, 0)
}

func (s *AlterAlgorithmOptionContext) INPLACE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINPLACE, 0)
}

func (s *AlterAlgorithmOptionContext) COPY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOPY, 0)
}

func (s *AlterAlgorithmOptionContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *AlterAlgorithmOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterAlgorithmOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterAlgorithmOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterAlgorithmOption(s)
	}
}

func (s *AlterAlgorithmOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterAlgorithmOption(s)
	}
}

func (s *AlterAlgorithmOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterAlgorithmOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterAlgorithmOption() (localctx IAlterAlgorithmOptionContext) {
	this := p
	_ = this

	localctx = NewAlterAlgorithmOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 576, MySQLStatementParserRULE_alterAlgorithmOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4228)
		p.Match(MySQLStatementParserALGORITHM)
	}
	p.SetState(4230)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserEQ_ {
		{
			p.SetState(4229)
			p.Match(MySQLStatementParserEQ_)
		}

	}
	{
		p.SetState(4232)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(MySQLStatementParserINSTANT-65))|(1<<(MySQLStatementParserINPLACE-65))|(1<<(MySQLStatementParserCOPY-65)))) != 0) || _la == MySQLStatementParserDEFAULT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IAlterLockOptionContext is an interface to support dynamic dispatch.
type IAlterLockOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterLockOptionContext differentiates from other interfaces.
	IsAlterLockOptionContext()
}

type AlterLockOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterLockOptionContext() *AlterLockOptionContext {
	var p = new(AlterLockOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterLockOption
	return p
}

func (*AlterLockOptionContext) IsAlterLockOptionContext() {}

func NewAlterLockOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterLockOptionContext {
	var p = new(AlterLockOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterLockOption

	return p
}

func (s *AlterLockOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterLockOptionContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCK, 0)
}

func (s *AlterLockOptionContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFAULT, 0)
}

func (s *AlterLockOptionContext) NONE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNONE, 0)
}

func (s *AlterLockOptionContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *AlterLockOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterLockOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterLockOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterLockOption(s)
	}
}

func (s *AlterLockOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterLockOption(s)
	}
}

func (s *AlterLockOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterLockOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterLockOption() (localctx IAlterLockOptionContext) {
	this := p
	_ = this

	localctx = NewAlterLockOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 578, MySQLStatementParserRULE_alterLockOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4234)
		p.Match(MySQLStatementParserLOCK)
	}
	p.SetState(4236)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserEQ_ {
		{
			p.SetState(4235)
			p.Match(MySQLStatementParserEQ_)
		}

	}
	{
		p.SetState(4238)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserT__0 || _la == MySQLStatementParserT__1 || _la == MySQLStatementParserDEFAULT || _la == MySQLStatementParserNONE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ITruncateTableContext is an interface to support dynamic dispatch.
type ITruncateTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTruncateTableContext differentiates from other interfaces.
	IsTruncateTableContext()
}

type TruncateTableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTruncateTableContext() *TruncateTableContext {
	var p = new(TruncateTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_truncateTable
	return p
}

func (*TruncateTableContext) IsTruncateTableContext() {}

func NewTruncateTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TruncateTableContext {
	var p = new(TruncateTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_truncateTable

	return p
}

func (s *TruncateTableContext) GetParser() antlr.Parser { return s.parser }

func (s *TruncateTableContext) TRUNCATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTRUNCATE, 0)
}

func (s *TruncateTableContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *TruncateTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLE, 0)
}

func (s *TruncateTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TruncateTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TruncateTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTruncateTable(s)
	}
}

func (s *TruncateTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTruncateTable(s)
	}
}

func (s *TruncateTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTruncateTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TruncateTable() (localctx ITruncateTableContext) {
	this := p
	_ = this

	localctx = NewTruncateTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 580, MySQLStatementParserRULE_truncateTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4240)
		p.Match(MySQLStatementParserTRUNCATE)
	}
	p.SetState(4242)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserTABLE {
		{
			p.SetState(4241)
			p.Match(MySQLStatementParserTABLE)
		}

	}
	{
		p.SetState(4244)
		p.TableName()
	}

	return localctx
}

// ICreateIndexContext is an interface to support dynamic dispatch.
type ICreateIndexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateIndexContext differentiates from other interfaces.
	IsCreateIndexContext()
}

type CreateIndexContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateIndexContext() *CreateIndexContext {
	var p = new(CreateIndexContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_createIndex
	return p
}

func (*CreateIndexContext) IsCreateIndexContext() {}

func NewCreateIndexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateIndexContext {
	var p = new(CreateIndexContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_createIndex

	return p
}

func (s *CreateIndexContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateIndexContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *CreateIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINDEX, 0)
}

func (s *CreateIndexContext) IndexName() IIndexNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexNameContext)
}

func (s *CreateIndexContext) ON() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserON, 0)
}

func (s *CreateIndexContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *CreateIndexContext) KeyListWithExpression() IKeyListWithExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeyListWithExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKeyListWithExpressionContext)
}

func (s *CreateIndexContext) CreateIndexSpecification() ICreateIndexSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateIndexSpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateIndexSpecificationContext)
}

func (s *CreateIndexContext) IndexTypeClause() IIndexTypeClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexTypeClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexTypeClauseContext)
}

func (s *CreateIndexContext) IndexOption() IIndexOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexOptionContext)
}

func (s *CreateIndexContext) AllAlterAlgorithmOption() []IAlterAlgorithmOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAlterAlgorithmOptionContext)(nil)).Elem())
	var tst = make([]IAlterAlgorithmOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAlterAlgorithmOptionContext)
		}
	}

	return tst
}

func (s *CreateIndexContext) AlterAlgorithmOption(i int) IAlterAlgorithmOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterAlgorithmOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAlterAlgorithmOptionContext)
}

func (s *CreateIndexContext) AllAlterLockOption() []IAlterLockOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAlterLockOptionContext)(nil)).Elem())
	var tst = make([]IAlterLockOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAlterLockOptionContext)
		}
	}

	return tst
}

func (s *CreateIndexContext) AlterLockOption(i int) IAlterLockOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterLockOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAlterLockOptionContext)
}

func (s *CreateIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateIndexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateIndex(s)
	}
}

func (s *CreateIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateIndex(s)
	}
}

func (s *CreateIndexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateIndex(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CreateIndex() (localctx ICreateIndexContext) {
	this := p
	_ = this

	localctx = NewCreateIndexContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 582, MySQLStatementParserRULE_createIndex)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4246)
		p.Match(MySQLStatementParserCREATE)
	}
	p.SetState(4248)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserFULLTEXT || _la == MySQLStatementParserSPATIAL || _la == MySQLStatementParserUNIQUE {
		{
			p.SetState(4247)
			p.CreateIndexSpecification()
		}

	}
	{
		p.SetState(4250)
		p.Match(MySQLStatementParserINDEX)
	}
	{
		p.SetState(4251)
		p.IndexName()
	}
	p.SetState(4253)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserTYPE || _la == MySQLStatementParserUSING {
		{
			p.SetState(4252)
			p.IndexTypeClause()
		}

	}
	{
		p.SetState(4255)
		p.Match(MySQLStatementParserON)
	}
	{
		p.SetState(4256)
		p.TableName()
	}
	{
		p.SetState(4257)
		p.KeyListWithExpression()
	}
	p.SetState(4259)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserCOMMENT || _la == MySQLStatementParserINVISIBLE || _la == MySQLStatementParserKEY_BLOCK_SIZE || _la == MySQLStatementParserTYPE || _la == MySQLStatementParserUSING || _la == MySQLStatementParserVISIBLE {
		{
			p.SetState(4258)
			p.IndexOption()
		}

	}
	p.SetState(4265)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserALGORITHM || _la == MySQLStatementParserLOCK {
		p.SetState(4263)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySQLStatementParserALGORITHM:
			{
				p.SetState(4261)
				p.AlterAlgorithmOption()
			}

		case MySQLStatementParserLOCK:
			{
				p.SetState(4262)
				p.AlterLockOption()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(4267)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICreateDatabaseContext is an interface to support dynamic dispatch.
type ICreateDatabaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateDatabaseContext differentiates from other interfaces.
	IsCreateDatabaseContext()
}

type CreateDatabaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateDatabaseContext() *CreateDatabaseContext {
	var p = new(CreateDatabaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_createDatabase
	return p
}

func (*CreateDatabaseContext) IsCreateDatabaseContext() {}

func NewCreateDatabaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateDatabaseContext {
	var p = new(CreateDatabaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_createDatabase

	return p
}

func (s *CreateDatabaseContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateDatabaseContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *CreateDatabaseContext) SchemaName() ISchemaNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemaNameContext)
}

func (s *CreateDatabaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDATABASE, 0)
}

func (s *CreateDatabaseContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSCHEMA, 0)
}

func (s *CreateDatabaseContext) NotExistClause() INotExistClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INotExistClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INotExistClauseContext)
}

func (s *CreateDatabaseContext) AllCreateDatabaseSpecification_() []ICreateDatabaseSpecification_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICreateDatabaseSpecification_Context)(nil)).Elem())
	var tst = make([]ICreateDatabaseSpecification_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICreateDatabaseSpecification_Context)
		}
	}

	return tst
}

func (s *CreateDatabaseContext) CreateDatabaseSpecification_(i int) ICreateDatabaseSpecification_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateDatabaseSpecification_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICreateDatabaseSpecification_Context)
}

func (s *CreateDatabaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateDatabaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateDatabaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateDatabase(s)
	}
}

func (s *CreateDatabaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateDatabase(s)
	}
}

func (s *CreateDatabaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateDatabase(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CreateDatabase() (localctx ICreateDatabaseContext) {
	this := p
	_ = this

	localctx = NewCreateDatabaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 584, MySQLStatementParserRULE_createDatabase)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4268)
		p.Match(MySQLStatementParserCREATE)
	}
	{
		p.SetState(4269)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserDATABASE || _la == MySQLStatementParserSCHEMA) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(4271)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIF {
		{
			p.SetState(4270)
			p.NotExistClause()
		}

	}
	{
		p.SetState(4273)
		p.SchemaName()
	}
	p.SetState(4277)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la-128)&-(0x1f+1)) == 0 && ((1<<uint((_la-128)))&((1<<(MySQLStatementParserCHAR-128))|(1<<(MySQLStatementParserCHARACTER-128))|(1<<(MySQLStatementParserCHARSET-128))|(1<<(MySQLStatementParserCOLLATE-128)))) != 0) || _la == MySQLStatementParserDEFAULT || _la == MySQLStatementParserENCRYPTION {
		{
			p.SetState(4274)
			p.CreateDatabaseSpecification_()
		}

		p.SetState(4279)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAlterDatabaseContext is an interface to support dynamic dispatch.
type IAlterDatabaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterDatabaseContext differentiates from other interfaces.
	IsAlterDatabaseContext()
}

type AlterDatabaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterDatabaseContext() *AlterDatabaseContext {
	var p = new(AlterDatabaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterDatabase
	return p
}

func (*AlterDatabaseContext) IsAlterDatabaseContext() {}

func NewAlterDatabaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterDatabaseContext {
	var p = new(AlterDatabaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterDatabase

	return p
}

func (s *AlterDatabaseContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterDatabaseContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALTER, 0)
}

func (s *AlterDatabaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDATABASE, 0)
}

func (s *AlterDatabaseContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSCHEMA, 0)
}

func (s *AlterDatabaseContext) SchemaName() ISchemaNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemaNameContext)
}

func (s *AlterDatabaseContext) AllAlterDatabaseSpecification_() []IAlterDatabaseSpecification_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAlterDatabaseSpecification_Context)(nil)).Elem())
	var tst = make([]IAlterDatabaseSpecification_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAlterDatabaseSpecification_Context)
		}
	}

	return tst
}

func (s *AlterDatabaseContext) AlterDatabaseSpecification_(i int) IAlterDatabaseSpecification_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterDatabaseSpecification_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAlterDatabaseSpecification_Context)
}

func (s *AlterDatabaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterDatabaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterDatabaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterDatabase(s)
	}
}

func (s *AlterDatabaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterDatabase(s)
	}
}

func (s *AlterDatabaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterDatabase(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterDatabase() (localctx IAlterDatabaseContext) {
	this := p
	_ = this

	localctx = NewAlterDatabaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 586, MySQLStatementParserRULE_alterDatabase)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4280)
		p.Match(MySQLStatementParserALTER)
	}
	{
		p.SetState(4281)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserDATABASE || _la == MySQLStatementParserSCHEMA) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(4283)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 489, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4282)
			p.SchemaName()
		}

	}
	p.SetState(4288)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la-128)&-(0x1f+1)) == 0 && ((1<<uint((_la-128)))&((1<<(MySQLStatementParserCHAR-128))|(1<<(MySQLStatementParserCHARACTER-128))|(1<<(MySQLStatementParserCHARSET-128))|(1<<(MySQLStatementParserCOLLATE-128)))) != 0) || _la == MySQLStatementParserDEFAULT || _la == MySQLStatementParserENCRYPTION || _la == MySQLStatementParserREAD {
		{
			p.SetState(4285)
			p.AlterDatabaseSpecification_()
		}

		p.SetState(4290)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICreateDatabaseSpecification_Context is an interface to support dynamic dispatch.
type ICreateDatabaseSpecification_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateDatabaseSpecification_Context differentiates from other interfaces.
	IsCreateDatabaseSpecification_Context()
}

type CreateDatabaseSpecification_Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateDatabaseSpecification_Context() *CreateDatabaseSpecification_Context {
	var p = new(CreateDatabaseSpecification_Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_createDatabaseSpecification_
	return p
}

func (*CreateDatabaseSpecification_Context) IsCreateDatabaseSpecification_Context() {}

func NewCreateDatabaseSpecification_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateDatabaseSpecification_Context {
	var p = new(CreateDatabaseSpecification_Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_createDatabaseSpecification_

	return p
}

func (s *CreateDatabaseSpecification_Context) GetParser() antlr.Parser { return s.parser }

func (s *CreateDatabaseSpecification_Context) DefaultCharset() IDefaultCharsetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefaultCharsetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefaultCharsetContext)
}

func (s *CreateDatabaseSpecification_Context) DefaultCollation() IDefaultCollationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefaultCollationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefaultCollationContext)
}

func (s *CreateDatabaseSpecification_Context) DefaultEncryption() IDefaultEncryptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefaultEncryptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefaultEncryptionContext)
}

func (s *CreateDatabaseSpecification_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateDatabaseSpecification_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateDatabaseSpecification_Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateDatabaseSpecification_(s)
	}
}

func (s *CreateDatabaseSpecification_Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateDatabaseSpecification_(s)
	}
}

func (s *CreateDatabaseSpecification_Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateDatabaseSpecification_(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CreateDatabaseSpecification_() (localctx ICreateDatabaseSpecification_Context) {
	this := p
	_ = this

	localctx = NewCreateDatabaseSpecification_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 588, MySQLStatementParserRULE_createDatabaseSpecification_)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4294)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 491, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4291)
			p.DefaultCharset()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4292)
			p.DefaultCollation()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4293)
			p.DefaultEncryption()
		}

	}

	return localctx
}

// IAlterDatabaseSpecification_Context is an interface to support dynamic dispatch.
type IAlterDatabaseSpecification_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterDatabaseSpecification_Context differentiates from other interfaces.
	IsAlterDatabaseSpecification_Context()
}

type AlterDatabaseSpecification_Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterDatabaseSpecification_Context() *AlterDatabaseSpecification_Context {
	var p = new(AlterDatabaseSpecification_Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterDatabaseSpecification_
	return p
}

func (*AlterDatabaseSpecification_Context) IsAlterDatabaseSpecification_Context() {}

func NewAlterDatabaseSpecification_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterDatabaseSpecification_Context {
	var p = new(AlterDatabaseSpecification_Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterDatabaseSpecification_

	return p
}

func (s *AlterDatabaseSpecification_Context) GetParser() antlr.Parser { return s.parser }

func (s *AlterDatabaseSpecification_Context) CreateDatabaseSpecification_() ICreateDatabaseSpecification_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateDatabaseSpecification_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateDatabaseSpecification_Context)
}

func (s *AlterDatabaseSpecification_Context) READ() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREAD, 0)
}

func (s *AlterDatabaseSpecification_Context) ONLY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserONLY, 0)
}

func (s *AlterDatabaseSpecification_Context) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFAULT, 0)
}

func (s *AlterDatabaseSpecification_Context) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *AlterDatabaseSpecification_Context) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *AlterDatabaseSpecification_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterDatabaseSpecification_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterDatabaseSpecification_Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterDatabaseSpecification_(s)
	}
}

func (s *AlterDatabaseSpecification_Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterDatabaseSpecification_(s)
	}
}

func (s *AlterDatabaseSpecification_Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterDatabaseSpecification_(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterDatabaseSpecification_() (localctx IAlterDatabaseSpecification_Context) {
	this := p
	_ = this

	localctx = NewAlterDatabaseSpecification_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 590, MySQLStatementParserRULE_alterDatabaseSpecification_)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4303)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserCHAR, MySQLStatementParserCHARACTER, MySQLStatementParserCHARSET, MySQLStatementParserCOLLATE, MySQLStatementParserDEFAULT, MySQLStatementParserENCRYPTION:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4296)
			p.CreateDatabaseSpecification_()
		}

	case MySQLStatementParserREAD:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4297)
			p.Match(MySQLStatementParserREAD)
		}
		{
			p.SetState(4298)
			p.Match(MySQLStatementParserONLY)
		}
		p.SetState(4300)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(4299)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(4302)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserDEFAULT || _la == MySQLStatementParserNUMBER_) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDropDatabaseContext is an interface to support dynamic dispatch.
type IDropDatabaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropDatabaseContext differentiates from other interfaces.
	IsDropDatabaseContext()
}

type DropDatabaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropDatabaseContext() *DropDatabaseContext {
	var p = new(DropDatabaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_dropDatabase
	return p
}

func (*DropDatabaseContext) IsDropDatabaseContext() {}

func NewDropDatabaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropDatabaseContext {
	var p = new(DropDatabaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_dropDatabase

	return p
}

func (s *DropDatabaseContext) GetParser() antlr.Parser { return s.parser }

func (s *DropDatabaseContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDROP, 0)
}

func (s *DropDatabaseContext) SchemaName() ISchemaNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemaNameContext)
}

func (s *DropDatabaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDATABASE, 0)
}

func (s *DropDatabaseContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSCHEMA, 0)
}

func (s *DropDatabaseContext) ExistClause() IExistClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExistClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExistClauseContext)
}

func (s *DropDatabaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropDatabaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropDatabaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDropDatabase(s)
	}
}

func (s *DropDatabaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDropDatabase(s)
	}
}

func (s *DropDatabaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDropDatabase(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DropDatabase() (localctx IDropDatabaseContext) {
	this := p
	_ = this

	localctx = NewDropDatabaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 592, MySQLStatementParserRULE_dropDatabase)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4305)
		p.Match(MySQLStatementParserDROP)
	}
	{
		p.SetState(4306)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserDATABASE || _la == MySQLStatementParserSCHEMA) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(4308)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIF {
		{
			p.SetState(4307)
			p.ExistClause()
		}

	}
	{
		p.SetState(4310)
		p.SchemaName()
	}

	return localctx
}

// IAlterInstanceContext is an interface to support dynamic dispatch.
type IAlterInstanceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterInstanceContext differentiates from other interfaces.
	IsAlterInstanceContext()
}

type AlterInstanceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterInstanceContext() *AlterInstanceContext {
	var p = new(AlterInstanceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterInstance
	return p
}

func (*AlterInstanceContext) IsAlterInstanceContext() {}

func NewAlterInstanceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterInstanceContext {
	var p = new(AlterInstanceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterInstance

	return p
}

func (s *AlterInstanceContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterInstanceContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALTER, 0)
}

func (s *AlterInstanceContext) INSTANCE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINSTANCE, 0)
}

func (s *AlterInstanceContext) InstanceAction() IInstanceActionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstanceActionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstanceActionContext)
}

func (s *AlterInstanceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterInstanceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterInstanceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterInstance(s)
	}
}

func (s *AlterInstanceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterInstance(s)
	}
}

func (s *AlterInstanceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterInstance(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterInstance() (localctx IAlterInstanceContext) {
	this := p
	_ = this

	localctx = NewAlterInstanceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 594, MySQLStatementParserRULE_alterInstance)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4312)
		p.Match(MySQLStatementParserALTER)
	}
	{
		p.SetState(4313)
		p.Match(MySQLStatementParserINSTANCE)
	}
	{
		p.SetState(4314)
		p.InstanceAction()
	}

	return localctx
}

// IInstanceActionContext is an interface to support dynamic dispatch.
type IInstanceActionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInstanceActionContext differentiates from other interfaces.
	IsInstanceActionContext()
}

type InstanceActionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInstanceActionContext() *InstanceActionContext {
	var p = new(InstanceActionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_instanceAction
	return p
}

func (*InstanceActionContext) IsInstanceActionContext() {}

func NewInstanceActionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstanceActionContext {
	var p = new(InstanceActionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_instanceAction

	return p
}

func (s *InstanceActionContext) GetParser() antlr.Parser { return s.parser }

func (s *InstanceActionContext) INNODB() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINNODB, 0)
}

func (s *InstanceActionContext) REDO_LOG() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREDO_LOG, 0)
}

func (s *InstanceActionContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENABLE, 0)
}

func (s *InstanceActionContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDISABLE, 0)
}

func (s *InstanceActionContext) ROTATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROTATE, 0)
}

func (s *InstanceActionContext) MASTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER, 0)
}

func (s *InstanceActionContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserKEY, 0)
}

func (s *InstanceActionContext) BINLOG() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBINLOG, 0)
}

func (s *InstanceActionContext) RELOAD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRELOAD, 0)
}

func (s *InstanceActionContext) TLS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTLS, 0)
}

func (s *InstanceActionContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOR, 0)
}

func (s *InstanceActionContext) CHANNEL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHANNEL, 0)
}

func (s *InstanceActionContext) Channel() IChannelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChannelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChannelContext)
}

func (s *InstanceActionContext) NO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNO, 0)
}

func (s *InstanceActionContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROLLBACK, 0)
}

func (s *InstanceActionContext) ON() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserON, 0)
}

func (s *InstanceActionContext) ERROR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserERROR, 0)
}

func (s *InstanceActionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstanceActionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstanceActionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterInstanceAction(s)
	}
}

func (s *InstanceActionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitInstanceAction(s)
	}
}

func (s *InstanceActionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitInstanceAction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) InstanceAction() (localctx IInstanceActionContext) {
	this := p
	_ = this

	localctx = NewInstanceActionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 596, MySQLStatementParserRULE_instanceAction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4340)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 497, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4316)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserDISABLE || _la == MySQLStatementParserENABLE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(4317)
			p.Match(MySQLStatementParserINNODB)
		}
		{
			p.SetState(4318)
			p.Match(MySQLStatementParserREDO_LOG)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4319)
			p.Match(MySQLStatementParserROTATE)
		}
		{
			p.SetState(4320)
			p.Match(MySQLStatementParserINNODB)
		}
		{
			p.SetState(4321)
			p.Match(MySQLStatementParserMASTER)
		}
		{
			p.SetState(4322)
			p.Match(MySQLStatementParserKEY)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4323)
			p.Match(MySQLStatementParserROTATE)
		}
		{
			p.SetState(4324)
			p.Match(MySQLStatementParserBINLOG)
		}
		{
			p.SetState(4325)
			p.Match(MySQLStatementParserMASTER)
		}
		{
			p.SetState(4326)
			p.Match(MySQLStatementParserKEY)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4327)
			p.Match(MySQLStatementParserRELOAD)
		}
		{
			p.SetState(4328)
			p.Match(MySQLStatementParserTLS)
		}
		p.SetState(4332)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserFOR {
			{
				p.SetState(4329)
				p.Match(MySQLStatementParserFOR)
			}
			{
				p.SetState(4330)
				p.Match(MySQLStatementParserCHANNEL)
			}
			{
				p.SetState(4331)
				p.Channel()
			}

		}
		p.SetState(4338)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserNO {
			{
				p.SetState(4334)
				p.Match(MySQLStatementParserNO)
			}
			{
				p.SetState(4335)
				p.Match(MySQLStatementParserROLLBACK)
			}
			{
				p.SetState(4336)
				p.Match(MySQLStatementParserON)
			}
			{
				p.SetState(4337)
				p.Match(MySQLStatementParserERROR)
			}

		}

	}

	return localctx
}

// IChannelContext is an interface to support dynamic dispatch.
type IChannelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChannelContext differentiates from other interfaces.
	IsChannelContext()
}

type ChannelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChannelContext() *ChannelContext {
	var p = new(ChannelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_channel
	return p
}

func (*ChannelContext) IsChannelContext() {}

func NewChannelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChannelContext {
	var p = new(ChannelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_channel

	return p
}

func (s *ChannelContext) GetParser() antlr.Parser { return s.parser }

func (s *ChannelContext) MYSQL_MAIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMYSQL_MAIN, 0)
}

func (s *ChannelContext) MYSQL_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMYSQL_ADMIN, 0)
}

func (s *ChannelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChannelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChannelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterChannel(s)
	}
}

func (s *ChannelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitChannel(s)
	}
}

func (s *ChannelContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitChannel(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Channel() (localctx IChannelContext) {
	this := p
	_ = this

	localctx = NewChannelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 598, MySQLStatementParserRULE_channel)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4342)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserMYSQL_MAIN || _la == MySQLStatementParserMYSQL_ADMIN) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ICreateEventContext is an interface to support dynamic dispatch.
type ICreateEventContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateEventContext differentiates from other interfaces.
	IsCreateEventContext()
}

type CreateEventContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateEventContext() *CreateEventContext {
	var p = new(CreateEventContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_createEvent
	return p
}

func (*CreateEventContext) IsCreateEventContext() {}

func NewCreateEventContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateEventContext {
	var p = new(CreateEventContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_createEvent

	return p
}

func (s *CreateEventContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateEventContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *CreateEventContext) EVENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEVENT, 0)
}

func (s *CreateEventContext) EventName() IEventNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEventNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEventNameContext)
}

func (s *CreateEventContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserON)
}

func (s *CreateEventContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserON, i)
}

func (s *CreateEventContext) SCHEDULE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSCHEDULE, 0)
}

func (s *CreateEventContext) ScheduleExpression() IScheduleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScheduleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScheduleExpressionContext)
}

func (s *CreateEventContext) DO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDO, 0)
}

func (s *CreateEventContext) RoutineBody() IRoutineBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoutineBodyContext)
}

func (s *CreateEventContext) OwnerStatement() IOwnerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwnerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwnerStatementContext)
}

func (s *CreateEventContext) NotExistClause() INotExistClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INotExistClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INotExistClauseContext)
}

func (s *CreateEventContext) COMPLETION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMPLETION, 0)
}

func (s *CreateEventContext) PRESERVE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPRESERVE, 0)
}

func (s *CreateEventContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENABLE, 0)
}

func (s *CreateEventContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDISABLE, 0)
}

func (s *CreateEventContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSLAVE, 0)
}

func (s *CreateEventContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMENT, 0)
}

func (s *CreateEventContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *CreateEventContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNOT, 0)
}

func (s *CreateEventContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateEventContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateEventContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateEvent(s)
	}
}

func (s *CreateEventContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateEvent(s)
	}
}

func (s *CreateEventContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateEvent(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CreateEvent() (localctx ICreateEventContext) {
	this := p
	_ = this

	localctx = NewCreateEventContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 600, MySQLStatementParserRULE_createEvent)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4344)
		p.Match(MySQLStatementParserCREATE)
	}
	p.SetState(4346)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserDEFINER {
		{
			p.SetState(4345)
			p.OwnerStatement()
		}

	}
	{
		p.SetState(4348)
		p.Match(MySQLStatementParserEVENT)
	}
	p.SetState(4350)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIF {
		{
			p.SetState(4349)
			p.NotExistClause()
		}

	}
	{
		p.SetState(4352)
		p.EventName()
	}
	{
		p.SetState(4353)
		p.Match(MySQLStatementParserON)
	}
	{
		p.SetState(4354)
		p.Match(MySQLStatementParserSCHEDULE)
	}
	{
		p.SetState(4355)
		p.ScheduleExpression()
	}
	p.SetState(4362)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserON {
		{
			p.SetState(4356)
			p.Match(MySQLStatementParserON)
		}
		{
			p.SetState(4357)
			p.Match(MySQLStatementParserCOMPLETION)
		}
		p.SetState(4359)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserNOT {
			{
				p.SetState(4358)
				p.Match(MySQLStatementParserNOT)
			}

		}
		{
			p.SetState(4361)
			p.Match(MySQLStatementParserPRESERVE)
		}

	}
	p.SetState(4369)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 502, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4364)
			p.Match(MySQLStatementParserENABLE)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 502, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(4365)
			p.Match(MySQLStatementParserDISABLE)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 502, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(4366)
			p.Match(MySQLStatementParserDISABLE)
		}
		{
			p.SetState(4367)
			p.Match(MySQLStatementParserON)
		}
		{
			p.SetState(4368)
			p.Match(MySQLStatementParserSLAVE)
		}

	}
	p.SetState(4373)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserCOMMENT {
		{
			p.SetState(4371)
			p.Match(MySQLStatementParserCOMMENT)
		}
		{
			p.SetState(4372)
			p.String_()
		}

	}
	{
		p.SetState(4375)
		p.Match(MySQLStatementParserDO)
	}
	{
		p.SetState(4376)
		p.RoutineBody()
	}

	return localctx
}

// IAlterEventContext is an interface to support dynamic dispatch.
type IAlterEventContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterEventContext differentiates from other interfaces.
	IsAlterEventContext()
}

type AlterEventContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterEventContext() *AlterEventContext {
	var p = new(AlterEventContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterEvent
	return p
}

func (*AlterEventContext) IsAlterEventContext() {}

func NewAlterEventContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterEventContext {
	var p = new(AlterEventContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterEvent

	return p
}

func (s *AlterEventContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterEventContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALTER, 0)
}

func (s *AlterEventContext) EVENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEVENT, 0)
}

func (s *AlterEventContext) AllEventName() []IEventNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEventNameContext)(nil)).Elem())
	var tst = make([]IEventNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEventNameContext)
		}
	}

	return tst
}

func (s *AlterEventContext) EventName(i int) IEventNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEventNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEventNameContext)
}

func (s *AlterEventContext) OwnerStatement() IOwnerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwnerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwnerStatementContext)
}

func (s *AlterEventContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserON)
}

func (s *AlterEventContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserON, i)
}

func (s *AlterEventContext) SCHEDULE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSCHEDULE, 0)
}

func (s *AlterEventContext) ScheduleExpression() IScheduleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScheduleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScheduleExpressionContext)
}

func (s *AlterEventContext) COMPLETION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMPLETION, 0)
}

func (s *AlterEventContext) PRESERVE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPRESERVE, 0)
}

func (s *AlterEventContext) RENAME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRENAME, 0)
}

func (s *AlterEventContext) TO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTO, 0)
}

func (s *AlterEventContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENABLE, 0)
}

func (s *AlterEventContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDISABLE, 0)
}

func (s *AlterEventContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSLAVE, 0)
}

func (s *AlterEventContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMENT, 0)
}

func (s *AlterEventContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *AlterEventContext) DO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDO, 0)
}

func (s *AlterEventContext) RoutineBody() IRoutineBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoutineBodyContext)
}

func (s *AlterEventContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNOT, 0)
}

func (s *AlterEventContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterEventContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterEventContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterEvent(s)
	}
}

func (s *AlterEventContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterEvent(s)
	}
}

func (s *AlterEventContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterEvent(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterEvent() (localctx IAlterEventContext) {
	this := p
	_ = this

	localctx = NewAlterEventContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 602, MySQLStatementParserRULE_alterEvent)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4378)
		p.Match(MySQLStatementParserALTER)
	}
	p.SetState(4380)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserDEFINER {
		{
			p.SetState(4379)
			p.OwnerStatement()
		}

	}
	{
		p.SetState(4382)
		p.Match(MySQLStatementParserEVENT)
	}
	{
		p.SetState(4383)
		p.EventName()
	}
	p.SetState(4387)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 505, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4384)
			p.Match(MySQLStatementParserON)
		}
		{
			p.SetState(4385)
			p.Match(MySQLStatementParserSCHEDULE)
		}
		{
			p.SetState(4386)
			p.ScheduleExpression()
		}

	}
	p.SetState(4395)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserON {
		{
			p.SetState(4389)
			p.Match(MySQLStatementParserON)
		}
		{
			p.SetState(4390)
			p.Match(MySQLStatementParserCOMPLETION)
		}
		p.SetState(4392)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserNOT {
			{
				p.SetState(4391)
				p.Match(MySQLStatementParserNOT)
			}

		}
		{
			p.SetState(4394)
			p.Match(MySQLStatementParserPRESERVE)
		}

	}
	p.SetState(4400)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserRENAME {
		{
			p.SetState(4397)
			p.Match(MySQLStatementParserRENAME)
		}
		{
			p.SetState(4398)
			p.Match(MySQLStatementParserTO)
		}
		{
			p.SetState(4399)
			p.EventName()
		}

	}
	p.SetState(4407)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 509, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4402)
			p.Match(MySQLStatementParserENABLE)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 509, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(4403)
			p.Match(MySQLStatementParserDISABLE)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 509, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(4404)
			p.Match(MySQLStatementParserDISABLE)
		}
		{
			p.SetState(4405)
			p.Match(MySQLStatementParserON)
		}
		{
			p.SetState(4406)
			p.Match(MySQLStatementParserSLAVE)
		}

	}
	p.SetState(4411)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserCOMMENT {
		{
			p.SetState(4409)
			p.Match(MySQLStatementParserCOMMENT)
		}
		{
			p.SetState(4410)
			p.String_()
		}

	}
	p.SetState(4415)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserDO {
		{
			p.SetState(4413)
			p.Match(MySQLStatementParserDO)
		}
		{
			p.SetState(4414)
			p.RoutineBody()
		}

	}

	return localctx
}

// IDropEventContext is an interface to support dynamic dispatch.
type IDropEventContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropEventContext differentiates from other interfaces.
	IsDropEventContext()
}

type DropEventContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropEventContext() *DropEventContext {
	var p = new(DropEventContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_dropEvent
	return p
}

func (*DropEventContext) IsDropEventContext() {}

func NewDropEventContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropEventContext {
	var p = new(DropEventContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_dropEvent

	return p
}

func (s *DropEventContext) GetParser() antlr.Parser { return s.parser }

func (s *DropEventContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDROP, 0)
}

func (s *DropEventContext) EVENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEVENT, 0)
}

func (s *DropEventContext) EventName() IEventNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEventNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEventNameContext)
}

func (s *DropEventContext) ExistClause() IExistClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExistClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExistClauseContext)
}

func (s *DropEventContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropEventContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropEventContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDropEvent(s)
	}
}

func (s *DropEventContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDropEvent(s)
	}
}

func (s *DropEventContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDropEvent(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DropEvent() (localctx IDropEventContext) {
	this := p
	_ = this

	localctx = NewDropEventContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 604, MySQLStatementParserRULE_dropEvent)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4417)
		p.Match(MySQLStatementParserDROP)
	}
	{
		p.SetState(4418)
		p.Match(MySQLStatementParserEVENT)
	}
	p.SetState(4420)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIF {
		{
			p.SetState(4419)
			p.ExistClause()
		}

	}
	{
		p.SetState(4422)
		p.EventName()
	}

	return localctx
}

// ICreateFunctionContext is an interface to support dynamic dispatch.
type ICreateFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateFunctionContext differentiates from other interfaces.
	IsCreateFunctionContext()
}

type CreateFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateFunctionContext() *CreateFunctionContext {
	var p = new(CreateFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_createFunction
	return p
}

func (*CreateFunctionContext) IsCreateFunctionContext() {}

func NewCreateFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateFunctionContext {
	var p = new(CreateFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_createFunction

	return p
}

func (s *CreateFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateFunctionContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *CreateFunctionContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFUNCTION, 0)
}

func (s *CreateFunctionContext) FunctionName() IFunctionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionNameContext)
}

func (s *CreateFunctionContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *CreateFunctionContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *CreateFunctionContext) RETURNS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRETURNS, 0)
}

func (s *CreateFunctionContext) AllDataType() []IDataTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDataTypeContext)(nil)).Elem())
	var tst = make([]IDataTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDataTypeContext)
		}
	}

	return tst
}

func (s *CreateFunctionContext) DataType(i int) IDataTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDataTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *CreateFunctionContext) RoutineBody() IRoutineBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoutineBodyContext)
}

func (s *CreateFunctionContext) OwnerStatement() IOwnerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwnerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwnerStatementContext)
}

func (s *CreateFunctionContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *CreateFunctionContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *CreateFunctionContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *CreateFunctionContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *CreateFunctionContext) AllRoutineOption() []IRoutineOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRoutineOptionContext)(nil)).Elem())
	var tst = make([]IRoutineOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRoutineOptionContext)
		}
	}

	return tst
}

func (s *CreateFunctionContext) RoutineOption(i int) IRoutineOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRoutineOptionContext)
}

func (s *CreateFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateFunction(s)
	}
}

func (s *CreateFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateFunction(s)
	}
}

func (s *CreateFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CreateFunction() (localctx ICreateFunctionContext) {
	this := p
	_ = this

	localctx = NewCreateFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 606, MySQLStatementParserRULE_createFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4424)
		p.Match(MySQLStatementParserCREATE)
	}
	p.SetState(4426)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserDEFINER {
		{
			p.SetState(4425)
			p.OwnerStatement()
		}

	}
	{
		p.SetState(4428)
		p.Match(MySQLStatementParserFUNCTION)
	}
	{
		p.SetState(4429)
		p.FunctionName()
	}
	{
		p.SetState(4430)
		p.Match(MySQLStatementParserLP_)
	}
	p.SetState(4434)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49))|(1<<(MySQLStatementParserGROUP_CONCAT-49))|(1<<(MySQLStatementParserCAST-49))|(1<<(MySQLStatementParserPOSITION-49))|(1<<(MySQLStatementParserSUBSTRING-49))|(1<<(MySQLStatementParserSUBSTR-49))|(1<<(MySQLStatementParserEXTRACT-49))|(1<<(MySQLStatementParserTRIM-49))|(1<<(MySQLStatementParserLAST_DAY-49))|(1<<(MySQLStatementParserTRADITIONAL-49))|(1<<(MySQLStatementParserTREE-49))|(1<<(MySQLStatementParserMYSQL_ADMIN-49))|(1<<(MySQLStatementParserINSTANT-49))|(1<<(MySQLStatementParserINPLACE-49))|(1<<(MySQLStatementParserCOPY-49))|(1<<(MySQLStatementParserUL_BINARY-49))|(1<<(MySQLStatementParserAUTOCOMMIT-49))|(1<<(MySQLStatementParserINNODB-49))|(1<<(MySQLStatementParserREDO_LOG-49))|(1<<(MySQLStatementParserACCOUNT-49))|(1<<(MySQLStatementParserACTION-49))|(1<<(MySQLStatementParserACTIVE-49))|(1<<(MySQLStatementParserADMIN-49))|(1<<(MySQLStatementParserAFTER-49))|(1<<(MySQLStatementParserAGAINST-49)))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(MySQLStatementParserAGGREGATE-81))|(1<<(MySQLStatementParserALGORITHM-81))|(1<<(MySQLStatementParserALWAYS-81))|(1<<(MySQLStatementParserANY-81))|(1<<(MySQLStatementParserARRAY-81))|(1<<(MySQLStatementParserASCII-81))|(1<<(MySQLStatementParserAT-81))|(1<<(MySQLStatementParserATTRIBUTE-81))|(1<<(MySQLStatementParserAUTOEXTEND_SIZE-81))|(1<<(MySQLStatementParserAUTO_INCREMENT-81))|(1<<(MySQLStatementParserAVG-81))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-81))|(1<<(MySQLStatementParserBACKUP-81))|(1<<(MySQLStatementParserBEGIN-81))|(1<<(MySQLStatementParserBINLOG-81))|(1<<(MySQLStatementParserBIT-81))|(1<<(MySQLStatementParserBLOCK-81))|(1<<(MySQLStatementParserBOOL-81))|(1<<(MySQLStatementParserBOOLEAN-81)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(MySQLStatementParserBTREE-114))|(1<<(MySQLStatementParserBUCKETS-114))|(1<<(MySQLStatementParserBYTE-114))|(1<<(MySQLStatementParserCACHE-114))|(1<<(MySQLStatementParserCASCADED-114))|(1<<(MySQLStatementParserCATALOG_NAME-114))|(1<<(MySQLStatementParserCHAIN-114))|(1<<(MySQLStatementParserCHANGED-114))|(1<<(MySQLStatementParserCHANNEL-114))|(1<<(MySQLStatementParserCHARSET-114))|(1<<(MySQLStatementParserCHECKSUM-114))|(1<<(MySQLStatementParserCIPHER-114))|(1<<(MySQLStatementParserCLASS_ORIGIN-114))|(1<<(MySQLStatementParserCLIENT-114))|(1<<(MySQLStatementParserCLONE-114))|(1<<(MySQLStatementParserCLOSE-114))|(1<<(MySQLStatementParserCOALESCE-114))|(1<<(MySQLStatementParserCODE-114))|(1<<(MySQLStatementParserCOLLATION-114))|(1<<(MySQLStatementParserCOLUMNS-114))|(1<<(MySQLStatementParserCOLUMN_FORMAT-114))|(1<<(MySQLStatementParserCOLUMN_NAME-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(MySQLStatementParserCOMMENT-146))|(1<<(MySQLStatementParserCOMMIT-146))|(1<<(MySQLStatementParserCOMMITTED-146))|(1<<(MySQLStatementParserCOMPACT-146))|(1<<(MySQLStatementParserCOMPLETION-146))|(1<<(MySQLStatementParserCOMPONENT-146))|(1<<(MySQLStatementParserCOMPRESSED-146))|(1<<(MySQLStatementParserCOMPRESSION-146))|(1<<(MySQLStatementParserCONCURRENT-146))|(1<<(MySQLStatementParserCONNECTION-146))|(1<<(MySQLStatementParserCONSISTENT-146))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-146))|(1<<(MySQLStatementParserCONSTRAINT_NAME-146))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-146))|(1<<(MySQLStatementParserCONTAINS-146))|(1<<(MySQLStatementParserCONTEXT-146))|(1<<(MySQLStatementParserCPU-146))|(1<<(MySQLStatementParserCURRENT-146))|(1<<(MySQLStatementParserCURSOR_NAME-146)))) != 0) || (((_la-178)&-(0x1f+1)) == 0 && ((1<<uint((_la-178)))&((1<<(MySQLStatementParserDATA-178))|(1<<(MySQLStatementParserDATAFILE-178))|(1<<(MySQLStatementParserDATE-178))|(1<<(MySQLStatementParserDATETIME-178))|(1<<(MySQLStatementParserDAY-178))|(1<<(MySQLStatementParserDEALLOCATE-178))|(1<<(MySQLStatementParserDEFAULT_AUTH-178))|(1<<(MySQLStatementParserDEFINER-178))|(1<<(MySQLStatementParserDEFINITION-178))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-178))|(1<<(MySQLStatementParserDESCRIPTION-178))|(1<<(MySQLStatementParserDIAGNOSTICS-178))|(1<<(MySQLStatementParserDIRECTORY-178))|(1<<(MySQLStatementParserDISABLE-178))|(1<<(MySQLStatementParserDISCARD-178))|(1<<(MySQLStatementParserDISK-178)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(MySQLStatementParserDO-213))|(1<<(MySQLStatementParserDUMPFILE-213))|(1<<(MySQLStatementParserDUPLICATE-213))|(1<<(MySQLStatementParserDYNAMIC-213))|(1<<(MySQLStatementParserENABLE-213))|(1<<(MySQLStatementParserENCRYPTION-213))|(1<<(MySQLStatementParserEND-213))|(1<<(MySQLStatementParserENDS-213))|(1<<(MySQLStatementParserENFORCED-213))|(1<<(MySQLStatementParserENGINE-213))|(1<<(MySQLStatementParserENGINES-213))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-213))|(1<<(MySQLStatementParserENUM-213))|(1<<(MySQLStatementParserERROR-213))|(1<<(MySQLStatementParserERRORS-213))|(1<<(MySQLStatementParserESCAPE-213))|(1<<(MySQLStatementParserEVENT-213))|(1<<(MySQLStatementParserEVENTS-213))|(1<<(MySQLStatementParserEVERY-213))|(1<<(MySQLStatementParserEXCHANGE-213))|(1<<(MySQLStatementParserEXCLUDE-213))|(1<<(MySQLStatementParserEXECUTE-213)))) != 0) || (((_la-247)&-(0x1f+1)) == 0 && ((1<<uint((_la-247)))&((1<<(MySQLStatementParserEXPANSION-247))|(1<<(MySQLStatementParserEXPIRE-247))|(1<<(MySQLStatementParserEXPORT-247))|(1<<(MySQLStatementParserEXTENDED-247))|(1<<(MySQLStatementParserEXTENT_SIZE-247))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-247))|(1<<(MySQLStatementParserFAST-247))|(1<<(MySQLStatementParserFAULTS-247))|(1<<(MySQLStatementParserFILE-247))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-247))|(1<<(MySQLStatementParserFILTER-247))|(1<<(MySQLStatementParserFIRST-247))|(1<<(MySQLStatementParserFIXED-247))|(1<<(MySQLStatementParserFLUSH-247))|(1<<(MySQLStatementParserFOLLOWING-247))|(1<<(MySQLStatementParserFOLLOWS-247))|(1<<(MySQLStatementParserFORMAT-247))|(1<<(MySQLStatementParserFOUND-247))|(1<<(MySQLStatementParserFULL-247)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(MySQLStatementParserGENERAL-279))|(1<<(MySQLStatementParserGEOMETRY-279))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-279))|(1<<(MySQLStatementParserGET_FORMAT-279))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-279))|(1<<(MySQLStatementParserGLOBAL-279))|(1<<(MySQLStatementParserGRANTS-279))|(1<<(MySQLStatementParserGROUP_REPLICATION-279))|(1<<(MySQLStatementParserHANDLER-279))|(1<<(MySQLStatementParserHASH-279))|(1<<(MySQLStatementParserHELP-279))|(1<<(MySQLStatementParserHISTOGRAM-279))|(1<<(MySQLStatementParserHISTORY-279))|(1<<(MySQLStatementParserHOST-279))|(1<<(MySQLStatementParserHOSTS-279))|(1<<(MySQLStatementParserHOUR-279))|(1<<(MySQLStatementParserIDENTIFIED-279))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-279))|(1<<(MySQLStatementParserIMPORT-279)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySQLStatementParserINACTIVE-312))|(1<<(MySQLStatementParserINDEXES-312))|(1<<(MySQLStatementParserINITIAL_SIZE-312))|(1<<(MySQLStatementParserINSERT_METHOD-312))|(1<<(MySQLStatementParserINSTALL-312))|(1<<(MySQLStatementParserINSTANCE-312))|(1<<(MySQLStatementParserINVISIBLE-312))|(1<<(MySQLStatementParserINVOKER-312))|(1<<(MySQLStatementParserIO-312))|(1<<(MySQLStatementParserIPC-312))|(1<<(MySQLStatementParserISOLATION-312))|(1<<(MySQLStatementParserISSUER-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySQLStatementParserJSON-344))|(1<<(MySQLStatementParserJSON_VALUE-344))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-344))|(1<<(MySQLStatementParserLANGUAGE-344))|(1<<(MySQLStatementParserLAST-344))|(1<<(MySQLStatementParserLAST_VALUE-344))|(1<<(MySQLStatementParserLEAVES-344))|(1<<(MySQLStatementParserLESS-344))|(1<<(MySQLStatementParserLEVEL-344))|(1<<(MySQLStatementParserLINESTRING-344))|(1<<(MySQLStatementParserLIST-344))|(1<<(MySQLStatementParserLOCAL-344))|(1<<(MySQLStatementParserLOCKED-344))|(1<<(MySQLStatementParserLOCKS-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySQLStatementParserLOGFILE-376))|(1<<(MySQLStatementParserLOGS-376))|(1<<(MySQLStatementParserMASTER-376))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-376))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-376))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-376))|(1<<(MySQLStatementParserMASTER_DELAY-376))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-376))|(1<<(MySQLStatementParserMASTER_HOST-376))|(1<<(MySQLStatementParserMASTER_LOG_FILE-376))|(1<<(MySQLStatementParserMASTER_LOG_POS-376))|(1<<(MySQLStatementParserMASTER_PASSWORD-376))|(1<<(MySQLStatementParserMASTER_PORT-376))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-376))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-376))|(1<<(MySQLStatementParserMASTER_SERVER_ID-376))|(1<<(MySQLStatementParserMASTER_SSL-376))|(1<<(MySQLStatementParserMASTER_SSL_CA-376))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_CERT-376))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-376))|(1<<(MySQLStatementParserMASTER_SSL_CRL-376))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_KEY-376))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySQLStatementParserMASTER_TLS_VERSION-408))|(1<<(MySQLStatementParserMASTER_USER-408))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-408))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_ROWS-408))|(1<<(MySQLStatementParserMAX_SIZE-408))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-408))|(1<<(MySQLStatementParserMEDIUM-408))|(1<<(MySQLStatementParserMEMBER-408))|(1<<(MySQLStatementParserMEMORY-408))|(1<<(MySQLStatementParserMERGE-408))|(1<<(MySQLStatementParserMESSAGE_TEXT-408))|(1<<(MySQLStatementParserMICROSECOND-408))|(1<<(MySQLStatementParserMIGRATE-408))|(1<<(MySQLStatementParserMINUTE-408))|(1<<(MySQLStatementParserMIN_ROWS-408))|(1<<(MySQLStatementParserMODE-408))|(1<<(MySQLStatementParserMODIFY-408))|(1<<(MySQLStatementParserMONTH-408))|(1<<(MySQLStatementParserMULTILINESTRING-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySQLStatementParserMULTIPOINT-440))|(1<<(MySQLStatementParserMULTIPOLYGON-440))|(1<<(MySQLStatementParserMUTEX-440))|(1<<(MySQLStatementParserMYSQL_ERRNO-440))|(1<<(MySQLStatementParserNAME-440))|(1<<(MySQLStatementParserNAMES-440))|(1<<(MySQLStatementParserNATIONAL-440))|(1<<(MySQLStatementParserNCHAR-440))|(1<<(MySQLStatementParserNDBCLUSTER-440))|(1<<(MySQLStatementParserNESTED-440))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-440))|(1<<(MySQLStatementParserNEVER-440))|(1<<(MySQLStatementParserNEW-440))|(1<<(MySQLStatementParserNEXT-440))|(1<<(MySQLStatementParserNO-440))|(1<<(MySQLStatementParserNODEGROUP-440))|(1<<(MySQLStatementParserNONE-440))|(1<<(MySQLStatementParserNOWAIT-440))|(1<<(MySQLStatementParserNO_WAIT-440))|(1<<(MySQLStatementParserNULLS-440))|(1<<(MySQLStatementParserNUMBER-440))|(1<<(MySQLStatementParserNVARCHAR-440))|(1<<(MySQLStatementParserOFF-440))|(1<<(MySQLStatementParserOFFSET-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySQLStatementParserOJ-472))|(1<<(MySQLStatementParserOLD-472))|(1<<(MySQLStatementParserONE-472))|(1<<(MySQLStatementParserONLY-472))|(1<<(MySQLStatementParserOPEN-472))|(1<<(MySQLStatementParserOPTIONAL-472))|(1<<(MySQLStatementParserOPTIONS-472))|(1<<(MySQLStatementParserORDINALITY-472))|(1<<(MySQLStatementParserORGANIZATION-472))|(1<<(MySQLStatementParserOTHERS-472))|(1<<(MySQLStatementParserOWNER-472))|(1<<(MySQLStatementParserPACK_KEYS-472))|(1<<(MySQLStatementParserPAGE-472))|(1<<(MySQLStatementParserPARSER-472))|(1<<(MySQLStatementParserPARTIAL-472))|(1<<(MySQLStatementParserPARTITIONING-472))|(1<<(MySQLStatementParserPARTITIONS-472))|(1<<(MySQLStatementParserPASSWORD-472))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-472))|(1<<(MySQLStatementParserPATH-472)))) != 0) || (((_la-505)&-(0x1f+1)) == 0 && ((1<<uint((_la-505)))&((1<<(MySQLStatementParserPERSIST-505))|(1<<(MySQLStatementParserPERSIST_ONLY-505))|(1<<(MySQLStatementParserPHASE-505))|(1<<(MySQLStatementParserPLUGIN-505))|(1<<(MySQLStatementParserPLUGINS-505))|(1<<(MySQLStatementParserPLUGIN_DIR-505))|(1<<(MySQLStatementParserPOINT-505))|(1<<(MySQLStatementParserPOLYGON-505))|(1<<(MySQLStatementParserPORT-505))|(1<<(MySQLStatementParserPRECEDES-505))|(1<<(MySQLStatementParserPRECEDING-505))|(1<<(MySQLStatementParserPREPARE-505))|(1<<(MySQLStatementParserPRESERVE-505))|(1<<(MySQLStatementParserPREV-505))|(1<<(MySQLStatementParserPRIVILEGES-505))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-505))|(1<<(MySQLStatementParserPROCESS-505))|(1<<(MySQLStatementParserPROCESSLIST-505))|(1<<(MySQLStatementParserPROFILE-505))|(1<<(MySQLStatementParserPROFILES-505))|(1<<(MySQLStatementParserPROXY-505))|(1<<(MySQLStatementParserQUARTER-505))|(1<<(MySQLStatementParserQUERY-505))|(1<<(MySQLStatementParserQUICK-505))|(1<<(MySQLStatementParserRANDOM-505)))) != 0) || (((_la-538)&-(0x1f+1)) == 0 && ((1<<uint((_la-538)))&((1<<(MySQLStatementParserREAD_ONLY-538))|(1<<(MySQLStatementParserREBUILD-538))|(1<<(MySQLStatementParserRECOVER-538))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-538))|(1<<(MySQLStatementParserREDUNDANT-538))|(1<<(MySQLStatementParserREFERENCE-538))|(1<<(MySQLStatementParserRELAY-538))|(1<<(MySQLStatementParserRELAYLOG-538))|(1<<(MySQLStatementParserRELAY_LOG_FILE-538))|(1<<(MySQLStatementParserRELAY_LOG_POS-538))|(1<<(MySQLStatementParserRELAY_THREAD-538))|(1<<(MySQLStatementParserRELOAD-538))|(1<<(MySQLStatementParserREMOVE-538))|(1<<(MySQLStatementParserREORGANIZE-538))|(1<<(MySQLStatementParserREPAIR-538))|(1<<(MySQLStatementParserREPEATABLE-538))|(1<<(MySQLStatementParserREPLICATE_DO_DB-538))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-538)))) != 0) || (((_la-570)&-(0x1f+1)) == 0 && ((1<<uint((_la-570)))&((1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-570))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-570))|(1<<(MySQLStatementParserREPLICATION-570))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-570))|(1<<(MySQLStatementParserRESET-570))|(1<<(MySQLStatementParserRESOURCE-570))|(1<<(MySQLStatementParserRESPECT-570))|(1<<(MySQLStatementParserRESTART-570))|(1<<(MySQLStatementParserRESTORE-570))|(1<<(MySQLStatementParserRESUME-570))|(1<<(MySQLStatementParserRETAIN-570))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-570))|(1<<(MySQLStatementParserRETURNING-570))|(1<<(MySQLStatementParserRETURNS-570))|(1<<(MySQLStatementParserREUSE-570))|(1<<(MySQLStatementParserREVERSE-570))|(1<<(MySQLStatementParserROLE-570))|(1<<(MySQLStatementParserROLLBACK-570))|(1<<(MySQLStatementParserROLLUP-570))|(1<<(MySQLStatementParserROTATE-570))|(1<<(MySQLStatementParserROUTINE-570))|(1<<(MySQLStatementParserROW_COUNT-570))|(1<<(MySQLStatementParserROW_FORMAT-570)))) != 0) || (((_la-603)&-(0x1f+1)) == 0 && ((1<<uint((_la-603)))&((1<<(MySQLStatementParserRTREE-603))|(1<<(MySQLStatementParserSAVEPOINT-603))|(1<<(MySQLStatementParserSCHEDULE-603))|(1<<(MySQLStatementParserSCHEMA_NAME-603))|(1<<(MySQLStatementParserSECOND-603))|(1<<(MySQLStatementParserSECONDARY-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-603))|(1<<(MySQLStatementParserSECONDARY_LOAD-603))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-603))|(1<<(MySQLStatementParserSECURITY-603))|(1<<(MySQLStatementParserSERIAL-603))|(1<<(MySQLStatementParserSERIALIZABLE-603))|(1<<(MySQLStatementParserSERVER-603))|(1<<(MySQLStatementParserSESSION-603))|(1<<(MySQLStatementParserSHARE-603))|(1<<(MySQLStatementParserSHUTDOWN-603))|(1<<(MySQLStatementParserSIGNED-603))|(1<<(MySQLStatementParserSIMPLE-603))|(1<<(MySQLStatementParserSLAVE-603))|(1<<(MySQLStatementParserSLOW-603)))) != 0) || (((_la-635)&-(0x1f+1)) == 0 && ((1<<uint((_la-635)))&((1<<(MySQLStatementParserSNAPSHOT-635))|(1<<(MySQLStatementParserSOCKET-635))|(1<<(MySQLStatementParserSONAME-635))|(1<<(MySQLStatementParserSOUNDS-635))|(1<<(MySQLStatementParserSOURCE-635))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-635))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-635))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-635))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-635))|(1<<(MySQLStatementParserSQL_NO_CACHE-635))|(1<<(MySQLStatementParserSQL_THREAD-635))|(1<<(MySQLStatementParserSRID-635))|(1<<(MySQLStatementParserSTACKED-635))|(1<<(MySQLStatementParserSTART-635))|(1<<(MySQLStatementParserSTARTS-635))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-635))|(1<<(MySQLStatementParserSTATS_PERSISTENT-635))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-635))|(1<<(MySQLStatementParserSTATUS-635))|(1<<(MySQLStatementParserSTOP-635))|(1<<(MySQLStatementParserSTORAGE-635)))) != 0) || (((_la-669)&-(0x1f+1)) == 0 && ((1<<uint((_la-669)))&((1<<(MySQLStatementParserSTREAM-669))|(1<<(MySQLStatementParserSTRING-669))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-669))|(1<<(MySQLStatementParserSUBJECT-669))|(1<<(MySQLStatementParserSUBPARTITION-669))|(1<<(MySQLStatementParserSUBPARTITIONS-669))|(1<<(MySQLStatementParserSUPER-669))|(1<<(MySQLStatementParserSUSPEND-669))|(1<<(MySQLStatementParserSWAPS-669))|(1<<(MySQLStatementParserSWITCHES-669))|(1<<(MySQLStatementParserTABLES-669))|(1<<(MySQLStatementParserTABLESPACE-669))|(1<<(MySQLStatementParserTABLE_CHECKSUM-669))|(1<<(MySQLStatementParserTABLE_NAME-669))|(1<<(MySQLStatementParserTEMPORARY-669))|(1<<(MySQLStatementParserTEMPTABLE-669))|(1<<(MySQLStatementParserTEXT-669))|(1<<(MySQLStatementParserTHAN-669))|(1<<(MySQLStatementParserTHREAD_PRIORITY-669))|(1<<(MySQLStatementParserTIES-669))|(1<<(MySQLStatementParserTIME-669))|(1<<(MySQLStatementParserTIMESTAMP-669))|(1<<(MySQLStatementParserTIMESTAMP_ADD-669))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-669))|(1<<(MySQLStatementParserTLS-669)))) != 0) || (((_la-703)&-(0x1f+1)) == 0 && ((1<<uint((_la-703)))&((1<<(MySQLStatementParserTRANSACTION-703))|(1<<(MySQLStatementParserTRIGGERS-703))|(1<<(MySQLStatementParserTRUNCATE-703))|(1<<(MySQLStatementParserTYPE-703))|(1<<(MySQLStatementParserTYPES-703))|(1<<(MySQLStatementParserUNBOUNDED-703))|(1<<(MySQLStatementParserUNCOMMITTED-703))|(1<<(MySQLStatementParserUNDEFINED-703))|(1<<(MySQLStatementParserUNDOFILE-703))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-703))|(1<<(MySQLStatementParserUNICODE-703))|(1<<(MySQLStatementParserUNINSTALL-703))|(1<<(MySQLStatementParserUNKNOWN-703))|(1<<(MySQLStatementParserUNTIL-703))|(1<<(MySQLStatementParserUPGRADE-703))|(1<<(MySQLStatementParserUSER-703))|(1<<(MySQLStatementParserUSER_RESOURCES-703))|(1<<(MySQLStatementParserUSE_FRM-703)))) != 0) || (((_la-735)&-(0x1f+1)) == 0 && ((1<<uint((_la-735)))&((1<<(MySQLStatementParserVALIDATION-735))|(1<<(MySQLStatementParserVALUE-735))|(1<<(MySQLStatementParserVARIABLES-735))|(1<<(MySQLStatementParserVCPU-735))|(1<<(MySQLStatementParserVIEW-735))|(1<<(MySQLStatementParserVISIBLE-735))|(1<<(MySQLStatementParserWAIT-735))|(1<<(MySQLStatementParserWARNINGS-735))|(1<<(MySQLStatementParserWEEK-735))|(1<<(MySQLStatementParserWEIGHT_STRING-735))|(1<<(MySQLStatementParserWITHOUT-735))|(1<<(MySQLStatementParserWORK-735))|(1<<(MySQLStatementParserWRAPPER-735))|(1<<(MySQLStatementParserX509-735))|(1<<(MySQLStatementParserXA-735))|(1<<(MySQLStatementParserXID-735))|(1<<(MySQLStatementParserXML-735))|(1<<(MySQLStatementParserYEAR-735)))) != 0) || _la == MySQLStatementParserIDENTIFIER_ || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
		{
			p.SetState(4431)
			p.Identifier()
		}
		{
			p.SetState(4432)
			p.DataType()
		}

	}
	p.SetState(4442)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(4436)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(4437)
			p.Identifier()
		}
		{
			p.SetState(4438)
			p.DataType()
		}

		p.SetState(4444)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(4445)
		p.Match(MySQLStatementParserRP_)
	}
	{
		p.SetState(4446)
		p.Match(MySQLStatementParserRETURNS)
	}
	{
		p.SetState(4447)
		p.DataType()
	}
	p.SetState(4451)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 516, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(4448)
				p.RoutineOption()
			}

		}
		p.SetState(4453)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 516, p.GetParserRuleContext())
	}
	{
		p.SetState(4454)
		p.RoutineBody()
	}

	return localctx
}

// IAlterFunctionContext is an interface to support dynamic dispatch.
type IAlterFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterFunctionContext differentiates from other interfaces.
	IsAlterFunctionContext()
}

type AlterFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterFunctionContext() *AlterFunctionContext {
	var p = new(AlterFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterFunction
	return p
}

func (*AlterFunctionContext) IsAlterFunctionContext() {}

func NewAlterFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterFunctionContext {
	var p = new(AlterFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterFunction

	return p
}

func (s *AlterFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterFunctionContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALTER, 0)
}

func (s *AlterFunctionContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFUNCTION, 0)
}

func (s *AlterFunctionContext) FunctionName() IFunctionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionNameContext)
}

func (s *AlterFunctionContext) AllRoutineOption() []IRoutineOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRoutineOptionContext)(nil)).Elem())
	var tst = make([]IRoutineOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRoutineOptionContext)
		}
	}

	return tst
}

func (s *AlterFunctionContext) RoutineOption(i int) IRoutineOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRoutineOptionContext)
}

func (s *AlterFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterFunction(s)
	}
}

func (s *AlterFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterFunction(s)
	}
}

func (s *AlterFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterFunction() (localctx IAlterFunctionContext) {
	this := p
	_ = this

	localctx = NewAlterFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 608, MySQLStatementParserRULE_alterFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4456)
		p.Match(MySQLStatementParserALTER)
	}
	{
		p.SetState(4457)
		p.Match(MySQLStatementParserFUNCTION)
	}
	{
		p.SetState(4458)
		p.FunctionName()
	}
	p.SetState(4462)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMENT || _la == MySQLStatementParserCONTAINS || _la == MySQLStatementParserDETERMINISTIC || _la == MySQLStatementParserLANGUAGE || (((_la-436)&-(0x1f+1)) == 0 && ((1<<uint((_la-436)))&((1<<(MySQLStatementParserMODIFIES-436))|(1<<(MySQLStatementParserNO-436))|(1<<(MySQLStatementParserNOT-436)))) != 0) || _la == MySQLStatementParserREADS || _la == MySQLStatementParserSQL {
		{
			p.SetState(4459)
			p.RoutineOption()
		}

		p.SetState(4464)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IDropFunctionContext is an interface to support dynamic dispatch.
type IDropFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropFunctionContext differentiates from other interfaces.
	IsDropFunctionContext()
}

type DropFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropFunctionContext() *DropFunctionContext {
	var p = new(DropFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_dropFunction
	return p
}

func (*DropFunctionContext) IsDropFunctionContext() {}

func NewDropFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropFunctionContext {
	var p = new(DropFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_dropFunction

	return p
}

func (s *DropFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *DropFunctionContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDROP, 0)
}

func (s *DropFunctionContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFUNCTION, 0)
}

func (s *DropFunctionContext) FunctionName() IFunctionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionNameContext)
}

func (s *DropFunctionContext) ExistClause() IExistClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExistClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExistClauseContext)
}

func (s *DropFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDropFunction(s)
	}
}

func (s *DropFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDropFunction(s)
	}
}

func (s *DropFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDropFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DropFunction() (localctx IDropFunctionContext) {
	this := p
	_ = this

	localctx = NewDropFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 610, MySQLStatementParserRULE_dropFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4465)
		p.Match(MySQLStatementParserDROP)
	}
	{
		p.SetState(4466)
		p.Match(MySQLStatementParserFUNCTION)
	}
	p.SetState(4468)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIF {
		{
			p.SetState(4467)
			p.ExistClause()
		}

	}
	{
		p.SetState(4470)
		p.FunctionName()
	}

	return localctx
}

// ICreateProcedureContext is an interface to support dynamic dispatch.
type ICreateProcedureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateProcedureContext differentiates from other interfaces.
	IsCreateProcedureContext()
}

type CreateProcedureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateProcedureContext() *CreateProcedureContext {
	var p = new(CreateProcedureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_createProcedure
	return p
}

func (*CreateProcedureContext) IsCreateProcedureContext() {}

func NewCreateProcedureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateProcedureContext {
	var p = new(CreateProcedureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_createProcedure

	return p
}

func (s *CreateProcedureContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateProcedureContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *CreateProcedureContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPROCEDURE, 0)
}

func (s *CreateProcedureContext) FunctionName() IFunctionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionNameContext)
}

func (s *CreateProcedureContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *CreateProcedureContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *CreateProcedureContext) RoutineBody() IRoutineBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoutineBodyContext)
}

func (s *CreateProcedureContext) OwnerStatement() IOwnerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwnerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwnerStatementContext)
}

func (s *CreateProcedureContext) AllProcedureParameter() []IProcedureParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedureParameterContext)(nil)).Elem())
	var tst = make([]IProcedureParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedureParameterContext)
		}
	}

	return tst
}

func (s *CreateProcedureContext) ProcedureParameter(i int) IProcedureParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedureParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedureParameterContext)
}

func (s *CreateProcedureContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *CreateProcedureContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *CreateProcedureContext) AllRoutineOption() []IRoutineOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRoutineOptionContext)(nil)).Elem())
	var tst = make([]IRoutineOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRoutineOptionContext)
		}
	}

	return tst
}

func (s *CreateProcedureContext) RoutineOption(i int) IRoutineOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRoutineOptionContext)
}

func (s *CreateProcedureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateProcedureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateProcedureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateProcedure(s)
	}
}

func (s *CreateProcedureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateProcedure(s)
	}
}

func (s *CreateProcedureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateProcedure(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CreateProcedure() (localctx ICreateProcedureContext) {
	this := p
	_ = this

	localctx = NewCreateProcedureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 612, MySQLStatementParserRULE_createProcedure)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4472)
		p.Match(MySQLStatementParserCREATE)
	}
	p.SetState(4474)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserDEFINER {
		{
			p.SetState(4473)
			p.OwnerStatement()
		}

	}
	{
		p.SetState(4476)
		p.Match(MySQLStatementParserPROCEDURE)
	}
	{
		p.SetState(4477)
		p.FunctionName()
	}
	{
		p.SetState(4478)
		p.Match(MySQLStatementParserLP_)
	}
	p.SetState(4480)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49))|(1<<(MySQLStatementParserGROUP_CONCAT-49))|(1<<(MySQLStatementParserCAST-49))|(1<<(MySQLStatementParserPOSITION-49))|(1<<(MySQLStatementParserSUBSTRING-49))|(1<<(MySQLStatementParserSUBSTR-49))|(1<<(MySQLStatementParserEXTRACT-49))|(1<<(MySQLStatementParserTRIM-49))|(1<<(MySQLStatementParserLAST_DAY-49))|(1<<(MySQLStatementParserTRADITIONAL-49))|(1<<(MySQLStatementParserTREE-49))|(1<<(MySQLStatementParserMYSQL_ADMIN-49))|(1<<(MySQLStatementParserINSTANT-49))|(1<<(MySQLStatementParserINPLACE-49))|(1<<(MySQLStatementParserCOPY-49))|(1<<(MySQLStatementParserUL_BINARY-49))|(1<<(MySQLStatementParserAUTOCOMMIT-49))|(1<<(MySQLStatementParserINNODB-49))|(1<<(MySQLStatementParserREDO_LOG-49))|(1<<(MySQLStatementParserACCOUNT-49))|(1<<(MySQLStatementParserACTION-49))|(1<<(MySQLStatementParserACTIVE-49))|(1<<(MySQLStatementParserADMIN-49))|(1<<(MySQLStatementParserAFTER-49))|(1<<(MySQLStatementParserAGAINST-49)))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(MySQLStatementParserAGGREGATE-81))|(1<<(MySQLStatementParserALGORITHM-81))|(1<<(MySQLStatementParserALWAYS-81))|(1<<(MySQLStatementParserANY-81))|(1<<(MySQLStatementParserARRAY-81))|(1<<(MySQLStatementParserASCII-81))|(1<<(MySQLStatementParserAT-81))|(1<<(MySQLStatementParserATTRIBUTE-81))|(1<<(MySQLStatementParserAUTOEXTEND_SIZE-81))|(1<<(MySQLStatementParserAUTO_INCREMENT-81))|(1<<(MySQLStatementParserAVG-81))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-81))|(1<<(MySQLStatementParserBACKUP-81))|(1<<(MySQLStatementParserBEGIN-81))|(1<<(MySQLStatementParserBINLOG-81))|(1<<(MySQLStatementParserBIT-81))|(1<<(MySQLStatementParserBLOCK-81))|(1<<(MySQLStatementParserBOOL-81))|(1<<(MySQLStatementParserBOOLEAN-81)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(MySQLStatementParserBTREE-114))|(1<<(MySQLStatementParserBUCKETS-114))|(1<<(MySQLStatementParserBYTE-114))|(1<<(MySQLStatementParserCACHE-114))|(1<<(MySQLStatementParserCASCADED-114))|(1<<(MySQLStatementParserCATALOG_NAME-114))|(1<<(MySQLStatementParserCHAIN-114))|(1<<(MySQLStatementParserCHANGED-114))|(1<<(MySQLStatementParserCHANNEL-114))|(1<<(MySQLStatementParserCHARSET-114))|(1<<(MySQLStatementParserCHECKSUM-114))|(1<<(MySQLStatementParserCIPHER-114))|(1<<(MySQLStatementParserCLASS_ORIGIN-114))|(1<<(MySQLStatementParserCLIENT-114))|(1<<(MySQLStatementParserCLONE-114))|(1<<(MySQLStatementParserCLOSE-114))|(1<<(MySQLStatementParserCOALESCE-114))|(1<<(MySQLStatementParserCODE-114))|(1<<(MySQLStatementParserCOLLATION-114))|(1<<(MySQLStatementParserCOLUMNS-114))|(1<<(MySQLStatementParserCOLUMN_FORMAT-114))|(1<<(MySQLStatementParserCOLUMN_NAME-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(MySQLStatementParserCOMMENT-146))|(1<<(MySQLStatementParserCOMMIT-146))|(1<<(MySQLStatementParserCOMMITTED-146))|(1<<(MySQLStatementParserCOMPACT-146))|(1<<(MySQLStatementParserCOMPLETION-146))|(1<<(MySQLStatementParserCOMPONENT-146))|(1<<(MySQLStatementParserCOMPRESSED-146))|(1<<(MySQLStatementParserCOMPRESSION-146))|(1<<(MySQLStatementParserCONCURRENT-146))|(1<<(MySQLStatementParserCONNECTION-146))|(1<<(MySQLStatementParserCONSISTENT-146))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-146))|(1<<(MySQLStatementParserCONSTRAINT_NAME-146))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-146))|(1<<(MySQLStatementParserCONTAINS-146))|(1<<(MySQLStatementParserCONTEXT-146))|(1<<(MySQLStatementParserCPU-146))|(1<<(MySQLStatementParserCURRENT-146))|(1<<(MySQLStatementParserCURSOR_NAME-146)))) != 0) || (((_la-178)&-(0x1f+1)) == 0 && ((1<<uint((_la-178)))&((1<<(MySQLStatementParserDATA-178))|(1<<(MySQLStatementParserDATAFILE-178))|(1<<(MySQLStatementParserDATE-178))|(1<<(MySQLStatementParserDATETIME-178))|(1<<(MySQLStatementParserDAY-178))|(1<<(MySQLStatementParserDEALLOCATE-178))|(1<<(MySQLStatementParserDEFAULT_AUTH-178))|(1<<(MySQLStatementParserDEFINER-178))|(1<<(MySQLStatementParserDEFINITION-178))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-178))|(1<<(MySQLStatementParserDESCRIPTION-178))|(1<<(MySQLStatementParserDIAGNOSTICS-178))|(1<<(MySQLStatementParserDIRECTORY-178))|(1<<(MySQLStatementParserDISABLE-178))|(1<<(MySQLStatementParserDISCARD-178))|(1<<(MySQLStatementParserDISK-178)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(MySQLStatementParserDO-213))|(1<<(MySQLStatementParserDUMPFILE-213))|(1<<(MySQLStatementParserDUPLICATE-213))|(1<<(MySQLStatementParserDYNAMIC-213))|(1<<(MySQLStatementParserENABLE-213))|(1<<(MySQLStatementParserENCRYPTION-213))|(1<<(MySQLStatementParserEND-213))|(1<<(MySQLStatementParserENDS-213))|(1<<(MySQLStatementParserENFORCED-213))|(1<<(MySQLStatementParserENGINE-213))|(1<<(MySQLStatementParserENGINES-213))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-213))|(1<<(MySQLStatementParserENUM-213))|(1<<(MySQLStatementParserERROR-213))|(1<<(MySQLStatementParserERRORS-213))|(1<<(MySQLStatementParserESCAPE-213))|(1<<(MySQLStatementParserEVENT-213))|(1<<(MySQLStatementParserEVENTS-213))|(1<<(MySQLStatementParserEVERY-213))|(1<<(MySQLStatementParserEXCHANGE-213))|(1<<(MySQLStatementParserEXCLUDE-213))|(1<<(MySQLStatementParserEXECUTE-213)))) != 0) || (((_la-247)&-(0x1f+1)) == 0 && ((1<<uint((_la-247)))&((1<<(MySQLStatementParserEXPANSION-247))|(1<<(MySQLStatementParserEXPIRE-247))|(1<<(MySQLStatementParserEXPORT-247))|(1<<(MySQLStatementParserEXTENDED-247))|(1<<(MySQLStatementParserEXTENT_SIZE-247))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-247))|(1<<(MySQLStatementParserFAST-247))|(1<<(MySQLStatementParserFAULTS-247))|(1<<(MySQLStatementParserFILE-247))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-247))|(1<<(MySQLStatementParserFILTER-247))|(1<<(MySQLStatementParserFIRST-247))|(1<<(MySQLStatementParserFIXED-247))|(1<<(MySQLStatementParserFLUSH-247))|(1<<(MySQLStatementParserFOLLOWING-247))|(1<<(MySQLStatementParserFOLLOWS-247))|(1<<(MySQLStatementParserFORMAT-247))|(1<<(MySQLStatementParserFOUND-247))|(1<<(MySQLStatementParserFULL-247)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(MySQLStatementParserGENERAL-279))|(1<<(MySQLStatementParserGEOMETRY-279))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-279))|(1<<(MySQLStatementParserGET_FORMAT-279))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-279))|(1<<(MySQLStatementParserGLOBAL-279))|(1<<(MySQLStatementParserGRANTS-279))|(1<<(MySQLStatementParserGROUP_REPLICATION-279))|(1<<(MySQLStatementParserHANDLER-279))|(1<<(MySQLStatementParserHASH-279))|(1<<(MySQLStatementParserHELP-279))|(1<<(MySQLStatementParserHISTOGRAM-279))|(1<<(MySQLStatementParserHISTORY-279))|(1<<(MySQLStatementParserHOST-279))|(1<<(MySQLStatementParserHOSTS-279))|(1<<(MySQLStatementParserHOUR-279))|(1<<(MySQLStatementParserIDENTIFIED-279))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-279))|(1<<(MySQLStatementParserIMPORT-279)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySQLStatementParserIN-311))|(1<<(MySQLStatementParserINACTIVE-311))|(1<<(MySQLStatementParserINDEXES-311))|(1<<(MySQLStatementParserINITIAL_SIZE-311))|(1<<(MySQLStatementParserINOUT-311))|(1<<(MySQLStatementParserINSERT_METHOD-311))|(1<<(MySQLStatementParserINSTALL-311))|(1<<(MySQLStatementParserINSTANCE-311))|(1<<(MySQLStatementParserINVISIBLE-311))|(1<<(MySQLStatementParserINVOKER-311))|(1<<(MySQLStatementParserIO-311))|(1<<(MySQLStatementParserIPC-311))|(1<<(MySQLStatementParserISOLATION-311))|(1<<(MySQLStatementParserISSUER-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySQLStatementParserJSON-344))|(1<<(MySQLStatementParserJSON_VALUE-344))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-344))|(1<<(MySQLStatementParserLANGUAGE-344))|(1<<(MySQLStatementParserLAST-344))|(1<<(MySQLStatementParserLAST_VALUE-344))|(1<<(MySQLStatementParserLEAVES-344))|(1<<(MySQLStatementParserLESS-344))|(1<<(MySQLStatementParserLEVEL-344))|(1<<(MySQLStatementParserLINESTRING-344))|(1<<(MySQLStatementParserLIST-344))|(1<<(MySQLStatementParserLOCAL-344))|(1<<(MySQLStatementParserLOCKED-344))|(1<<(MySQLStatementParserLOCKS-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySQLStatementParserLOGFILE-376))|(1<<(MySQLStatementParserLOGS-376))|(1<<(MySQLStatementParserMASTER-376))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-376))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-376))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-376))|(1<<(MySQLStatementParserMASTER_DELAY-376))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-376))|(1<<(MySQLStatementParserMASTER_HOST-376))|(1<<(MySQLStatementParserMASTER_LOG_FILE-376))|(1<<(MySQLStatementParserMASTER_LOG_POS-376))|(1<<(MySQLStatementParserMASTER_PASSWORD-376))|(1<<(MySQLStatementParserMASTER_PORT-376))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-376))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-376))|(1<<(MySQLStatementParserMASTER_SERVER_ID-376))|(1<<(MySQLStatementParserMASTER_SSL-376))|(1<<(MySQLStatementParserMASTER_SSL_CA-376))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_CERT-376))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-376))|(1<<(MySQLStatementParserMASTER_SSL_CRL-376))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_KEY-376))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySQLStatementParserMASTER_TLS_VERSION-408))|(1<<(MySQLStatementParserMASTER_USER-408))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-408))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_ROWS-408))|(1<<(MySQLStatementParserMAX_SIZE-408))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-408))|(1<<(MySQLStatementParserMEDIUM-408))|(1<<(MySQLStatementParserMEMBER-408))|(1<<(MySQLStatementParserMEMORY-408))|(1<<(MySQLStatementParserMERGE-408))|(1<<(MySQLStatementParserMESSAGE_TEXT-408))|(1<<(MySQLStatementParserMICROSECOND-408))|(1<<(MySQLStatementParserMIGRATE-408))|(1<<(MySQLStatementParserMINUTE-408))|(1<<(MySQLStatementParserMIN_ROWS-408))|(1<<(MySQLStatementParserMODE-408))|(1<<(MySQLStatementParserMODIFY-408))|(1<<(MySQLStatementParserMONTH-408))|(1<<(MySQLStatementParserMULTILINESTRING-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySQLStatementParserMULTIPOINT-440))|(1<<(MySQLStatementParserMULTIPOLYGON-440))|(1<<(MySQLStatementParserMUTEX-440))|(1<<(MySQLStatementParserMYSQL_ERRNO-440))|(1<<(MySQLStatementParserNAME-440))|(1<<(MySQLStatementParserNAMES-440))|(1<<(MySQLStatementParserNATIONAL-440))|(1<<(MySQLStatementParserNCHAR-440))|(1<<(MySQLStatementParserNDBCLUSTER-440))|(1<<(MySQLStatementParserNESTED-440))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-440))|(1<<(MySQLStatementParserNEVER-440))|(1<<(MySQLStatementParserNEW-440))|(1<<(MySQLStatementParserNEXT-440))|(1<<(MySQLStatementParserNO-440))|(1<<(MySQLStatementParserNODEGROUP-440))|(1<<(MySQLStatementParserNONE-440))|(1<<(MySQLStatementParserNOWAIT-440))|(1<<(MySQLStatementParserNO_WAIT-440))|(1<<(MySQLStatementParserNULLS-440))|(1<<(MySQLStatementParserNUMBER-440))|(1<<(MySQLStatementParserNVARCHAR-440))|(1<<(MySQLStatementParserOFF-440))|(1<<(MySQLStatementParserOFFSET-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySQLStatementParserOJ-472))|(1<<(MySQLStatementParserOLD-472))|(1<<(MySQLStatementParserONE-472))|(1<<(MySQLStatementParserONLY-472))|(1<<(MySQLStatementParserOPEN-472))|(1<<(MySQLStatementParserOPTIONAL-472))|(1<<(MySQLStatementParserOPTIONS-472))|(1<<(MySQLStatementParserORDINALITY-472))|(1<<(MySQLStatementParserORGANIZATION-472))|(1<<(MySQLStatementParserOTHERS-472))|(1<<(MySQLStatementParserOUT-472))|(1<<(MySQLStatementParserOWNER-472))|(1<<(MySQLStatementParserPACK_KEYS-472))|(1<<(MySQLStatementParserPAGE-472))|(1<<(MySQLStatementParserPARSER-472))|(1<<(MySQLStatementParserPARTIAL-472))|(1<<(MySQLStatementParserPARTITIONING-472))|(1<<(MySQLStatementParserPARTITIONS-472))|(1<<(MySQLStatementParserPASSWORD-472))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-472))|(1<<(MySQLStatementParserPATH-472)))) != 0) || (((_la-505)&-(0x1f+1)) == 0 && ((1<<uint((_la-505)))&((1<<(MySQLStatementParserPERSIST-505))|(1<<(MySQLStatementParserPERSIST_ONLY-505))|(1<<(MySQLStatementParserPHASE-505))|(1<<(MySQLStatementParserPLUGIN-505))|(1<<(MySQLStatementParserPLUGINS-505))|(1<<(MySQLStatementParserPLUGIN_DIR-505))|(1<<(MySQLStatementParserPOINT-505))|(1<<(MySQLStatementParserPOLYGON-505))|(1<<(MySQLStatementParserPORT-505))|(1<<(MySQLStatementParserPRECEDES-505))|(1<<(MySQLStatementParserPRECEDING-505))|(1<<(MySQLStatementParserPREPARE-505))|(1<<(MySQLStatementParserPRESERVE-505))|(1<<(MySQLStatementParserPREV-505))|(1<<(MySQLStatementParserPRIVILEGES-505))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-505))|(1<<(MySQLStatementParserPROCESS-505))|(1<<(MySQLStatementParserPROCESSLIST-505))|(1<<(MySQLStatementParserPROFILE-505))|(1<<(MySQLStatementParserPROFILES-505))|(1<<(MySQLStatementParserPROXY-505))|(1<<(MySQLStatementParserQUARTER-505))|(1<<(MySQLStatementParserQUERY-505))|(1<<(MySQLStatementParserQUICK-505))|(1<<(MySQLStatementParserRANDOM-505)))) != 0) || (((_la-538)&-(0x1f+1)) == 0 && ((1<<uint((_la-538)))&((1<<(MySQLStatementParserREAD_ONLY-538))|(1<<(MySQLStatementParserREBUILD-538))|(1<<(MySQLStatementParserRECOVER-538))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-538))|(1<<(MySQLStatementParserREDUNDANT-538))|(1<<(MySQLStatementParserREFERENCE-538))|(1<<(MySQLStatementParserRELAY-538))|(1<<(MySQLStatementParserRELAYLOG-538))|(1<<(MySQLStatementParserRELAY_LOG_FILE-538))|(1<<(MySQLStatementParserRELAY_LOG_POS-538))|(1<<(MySQLStatementParserRELAY_THREAD-538))|(1<<(MySQLStatementParserRELOAD-538))|(1<<(MySQLStatementParserREMOVE-538))|(1<<(MySQLStatementParserREORGANIZE-538))|(1<<(MySQLStatementParserREPAIR-538))|(1<<(MySQLStatementParserREPEATABLE-538))|(1<<(MySQLStatementParserREPLICATE_DO_DB-538))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-538)))) != 0) || (((_la-570)&-(0x1f+1)) == 0 && ((1<<uint((_la-570)))&((1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-570))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-570))|(1<<(MySQLStatementParserREPLICATION-570))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-570))|(1<<(MySQLStatementParserRESET-570))|(1<<(MySQLStatementParserRESOURCE-570))|(1<<(MySQLStatementParserRESPECT-570))|(1<<(MySQLStatementParserRESTART-570))|(1<<(MySQLStatementParserRESTORE-570))|(1<<(MySQLStatementParserRESUME-570))|(1<<(MySQLStatementParserRETAIN-570))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-570))|(1<<(MySQLStatementParserRETURNING-570))|(1<<(MySQLStatementParserRETURNS-570))|(1<<(MySQLStatementParserREUSE-570))|(1<<(MySQLStatementParserREVERSE-570))|(1<<(MySQLStatementParserROLE-570))|(1<<(MySQLStatementParserROLLBACK-570))|(1<<(MySQLStatementParserROLLUP-570))|(1<<(MySQLStatementParserROTATE-570))|(1<<(MySQLStatementParserROUTINE-570))|(1<<(MySQLStatementParserROW_COUNT-570))|(1<<(MySQLStatementParserROW_FORMAT-570)))) != 0) || (((_la-603)&-(0x1f+1)) == 0 && ((1<<uint((_la-603)))&((1<<(MySQLStatementParserRTREE-603))|(1<<(MySQLStatementParserSAVEPOINT-603))|(1<<(MySQLStatementParserSCHEDULE-603))|(1<<(MySQLStatementParserSCHEMA_NAME-603))|(1<<(MySQLStatementParserSECOND-603))|(1<<(MySQLStatementParserSECONDARY-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-603))|(1<<(MySQLStatementParserSECONDARY_LOAD-603))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-603))|(1<<(MySQLStatementParserSECURITY-603))|(1<<(MySQLStatementParserSERIAL-603))|(1<<(MySQLStatementParserSERIALIZABLE-603))|(1<<(MySQLStatementParserSERVER-603))|(1<<(MySQLStatementParserSESSION-603))|(1<<(MySQLStatementParserSHARE-603))|(1<<(MySQLStatementParserSHUTDOWN-603))|(1<<(MySQLStatementParserSIGNED-603))|(1<<(MySQLStatementParserSIMPLE-603))|(1<<(MySQLStatementParserSLAVE-603))|(1<<(MySQLStatementParserSLOW-603)))) != 0) || (((_la-635)&-(0x1f+1)) == 0 && ((1<<uint((_la-635)))&((1<<(MySQLStatementParserSNAPSHOT-635))|(1<<(MySQLStatementParserSOCKET-635))|(1<<(MySQLStatementParserSONAME-635))|(1<<(MySQLStatementParserSOUNDS-635))|(1<<(MySQLStatementParserSOURCE-635))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-635))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-635))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-635))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-635))|(1<<(MySQLStatementParserSQL_NO_CACHE-635))|(1<<(MySQLStatementParserSQL_THREAD-635))|(1<<(MySQLStatementParserSRID-635))|(1<<(MySQLStatementParserSTACKED-635))|(1<<(MySQLStatementParserSTART-635))|(1<<(MySQLStatementParserSTARTS-635))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-635))|(1<<(MySQLStatementParserSTATS_PERSISTENT-635))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-635))|(1<<(MySQLStatementParserSTATUS-635))|(1<<(MySQLStatementParserSTOP-635))|(1<<(MySQLStatementParserSTORAGE-635)))) != 0) || (((_la-669)&-(0x1f+1)) == 0 && ((1<<uint((_la-669)))&((1<<(MySQLStatementParserSTREAM-669))|(1<<(MySQLStatementParserSTRING-669))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-669))|(1<<(MySQLStatementParserSUBJECT-669))|(1<<(MySQLStatementParserSUBPARTITION-669))|(1<<(MySQLStatementParserSUBPARTITIONS-669))|(1<<(MySQLStatementParserSUPER-669))|(1<<(MySQLStatementParserSUSPEND-669))|(1<<(MySQLStatementParserSWAPS-669))|(1<<(MySQLStatementParserSWITCHES-669))|(1<<(MySQLStatementParserTABLES-669))|(1<<(MySQLStatementParserTABLESPACE-669))|(1<<(MySQLStatementParserTABLE_CHECKSUM-669))|(1<<(MySQLStatementParserTABLE_NAME-669))|(1<<(MySQLStatementParserTEMPORARY-669))|(1<<(MySQLStatementParserTEMPTABLE-669))|(1<<(MySQLStatementParserTEXT-669))|(1<<(MySQLStatementParserTHAN-669))|(1<<(MySQLStatementParserTHREAD_PRIORITY-669))|(1<<(MySQLStatementParserTIES-669))|(1<<(MySQLStatementParserTIME-669))|(1<<(MySQLStatementParserTIMESTAMP-669))|(1<<(MySQLStatementParserTIMESTAMP_ADD-669))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-669))|(1<<(MySQLStatementParserTLS-669)))) != 0) || (((_la-703)&-(0x1f+1)) == 0 && ((1<<uint((_la-703)))&((1<<(MySQLStatementParserTRANSACTION-703))|(1<<(MySQLStatementParserTRIGGERS-703))|(1<<(MySQLStatementParserTRUNCATE-703))|(1<<(MySQLStatementParserTYPE-703))|(1<<(MySQLStatementParserTYPES-703))|(1<<(MySQLStatementParserUNBOUNDED-703))|(1<<(MySQLStatementParserUNCOMMITTED-703))|(1<<(MySQLStatementParserUNDEFINED-703))|(1<<(MySQLStatementParserUNDOFILE-703))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-703))|(1<<(MySQLStatementParserUNICODE-703))|(1<<(MySQLStatementParserUNINSTALL-703))|(1<<(MySQLStatementParserUNKNOWN-703))|(1<<(MySQLStatementParserUNTIL-703))|(1<<(MySQLStatementParserUPGRADE-703))|(1<<(MySQLStatementParserUSER-703))|(1<<(MySQLStatementParserUSER_RESOURCES-703))|(1<<(MySQLStatementParserUSE_FRM-703)))) != 0) || (((_la-735)&-(0x1f+1)) == 0 && ((1<<uint((_la-735)))&((1<<(MySQLStatementParserVALIDATION-735))|(1<<(MySQLStatementParserVALUE-735))|(1<<(MySQLStatementParserVARIABLES-735))|(1<<(MySQLStatementParserVCPU-735))|(1<<(MySQLStatementParserVIEW-735))|(1<<(MySQLStatementParserVISIBLE-735))|(1<<(MySQLStatementParserWAIT-735))|(1<<(MySQLStatementParserWARNINGS-735))|(1<<(MySQLStatementParserWEEK-735))|(1<<(MySQLStatementParserWEIGHT_STRING-735))|(1<<(MySQLStatementParserWITHOUT-735))|(1<<(MySQLStatementParserWORK-735))|(1<<(MySQLStatementParserWRAPPER-735))|(1<<(MySQLStatementParserX509-735))|(1<<(MySQLStatementParserXA-735))|(1<<(MySQLStatementParserXID-735))|(1<<(MySQLStatementParserXML-735))|(1<<(MySQLStatementParserYEAR-735)))) != 0) || _la == MySQLStatementParserIDENTIFIER_ || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
		{
			p.SetState(4479)
			p.ProcedureParameter()
		}

	}
	p.SetState(4486)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(4482)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(4483)
			p.ProcedureParameter()
		}

		p.SetState(4488)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(4489)
		p.Match(MySQLStatementParserRP_)
	}
	p.SetState(4493)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 522, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(4490)
				p.RoutineOption()
			}

		}
		p.SetState(4495)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 522, p.GetParserRuleContext())
	}
	{
		p.SetState(4496)
		p.RoutineBody()
	}

	return localctx
}

// IAlterProcedureContext is an interface to support dynamic dispatch.
type IAlterProcedureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterProcedureContext differentiates from other interfaces.
	IsAlterProcedureContext()
}

type AlterProcedureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterProcedureContext() *AlterProcedureContext {
	var p = new(AlterProcedureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterProcedure
	return p
}

func (*AlterProcedureContext) IsAlterProcedureContext() {}

func NewAlterProcedureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterProcedureContext {
	var p = new(AlterProcedureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterProcedure

	return p
}

func (s *AlterProcedureContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterProcedureContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALTER, 0)
}

func (s *AlterProcedureContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPROCEDURE, 0)
}

func (s *AlterProcedureContext) FunctionName() IFunctionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionNameContext)
}

func (s *AlterProcedureContext) AllRoutineOption() []IRoutineOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRoutineOptionContext)(nil)).Elem())
	var tst = make([]IRoutineOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRoutineOptionContext)
		}
	}

	return tst
}

func (s *AlterProcedureContext) RoutineOption(i int) IRoutineOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRoutineOptionContext)
}

func (s *AlterProcedureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterProcedureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterProcedureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterProcedure(s)
	}
}

func (s *AlterProcedureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterProcedure(s)
	}
}

func (s *AlterProcedureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterProcedure(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterProcedure() (localctx IAlterProcedureContext) {
	this := p
	_ = this

	localctx = NewAlterProcedureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 614, MySQLStatementParserRULE_alterProcedure)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4498)
		p.Match(MySQLStatementParserALTER)
	}
	{
		p.SetState(4499)
		p.Match(MySQLStatementParserPROCEDURE)
	}
	{
		p.SetState(4500)
		p.FunctionName()
	}
	p.SetState(4504)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMENT || _la == MySQLStatementParserCONTAINS || _la == MySQLStatementParserDETERMINISTIC || _la == MySQLStatementParserLANGUAGE || (((_la-436)&-(0x1f+1)) == 0 && ((1<<uint((_la-436)))&((1<<(MySQLStatementParserMODIFIES-436))|(1<<(MySQLStatementParserNO-436))|(1<<(MySQLStatementParserNOT-436)))) != 0) || _la == MySQLStatementParserREADS || _la == MySQLStatementParserSQL {
		{
			p.SetState(4501)
			p.RoutineOption()
		}

		p.SetState(4506)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IDropProcedureContext is an interface to support dynamic dispatch.
type IDropProcedureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropProcedureContext differentiates from other interfaces.
	IsDropProcedureContext()
}

type DropProcedureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropProcedureContext() *DropProcedureContext {
	var p = new(DropProcedureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_dropProcedure
	return p
}

func (*DropProcedureContext) IsDropProcedureContext() {}

func NewDropProcedureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropProcedureContext {
	var p = new(DropProcedureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_dropProcedure

	return p
}

func (s *DropProcedureContext) GetParser() antlr.Parser { return s.parser }

func (s *DropProcedureContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDROP, 0)
}

func (s *DropProcedureContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPROCEDURE, 0)
}

func (s *DropProcedureContext) FunctionName() IFunctionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionNameContext)
}

func (s *DropProcedureContext) ExistClause() IExistClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExistClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExistClauseContext)
}

func (s *DropProcedureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropProcedureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropProcedureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDropProcedure(s)
	}
}

func (s *DropProcedureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDropProcedure(s)
	}
}

func (s *DropProcedureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDropProcedure(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DropProcedure() (localctx IDropProcedureContext) {
	this := p
	_ = this

	localctx = NewDropProcedureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 616, MySQLStatementParserRULE_dropProcedure)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4507)
		p.Match(MySQLStatementParserDROP)
	}
	{
		p.SetState(4508)
		p.Match(MySQLStatementParserPROCEDURE)
	}
	p.SetState(4510)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIF {
		{
			p.SetState(4509)
			p.ExistClause()
		}

	}
	{
		p.SetState(4512)
		p.FunctionName()
	}

	return localctx
}

// ICreateServerContext is an interface to support dynamic dispatch.
type ICreateServerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateServerContext differentiates from other interfaces.
	IsCreateServerContext()
}

type CreateServerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateServerContext() *CreateServerContext {
	var p = new(CreateServerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_createServer
	return p
}

func (*CreateServerContext) IsCreateServerContext() {}

func NewCreateServerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateServerContext {
	var p = new(CreateServerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_createServer

	return p
}

func (s *CreateServerContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateServerContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *CreateServerContext) SERVER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSERVER, 0)
}

func (s *CreateServerContext) ServerName() IServerNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IServerNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IServerNameContext)
}

func (s *CreateServerContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOREIGN, 0)
}

func (s *CreateServerContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDATA, 0)
}

func (s *CreateServerContext) WRAPPER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWRAPPER, 0)
}

func (s *CreateServerContext) WrapperName() IWrapperNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWrapperNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWrapperNameContext)
}

func (s *CreateServerContext) OPTIONS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOPTIONS, 0)
}

func (s *CreateServerContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *CreateServerContext) AllServerOption() []IServerOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IServerOptionContext)(nil)).Elem())
	var tst = make([]IServerOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IServerOptionContext)
		}
	}

	return tst
}

func (s *CreateServerContext) ServerOption(i int) IServerOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IServerOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IServerOptionContext)
}

func (s *CreateServerContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *CreateServerContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *CreateServerContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *CreateServerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateServerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateServerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateServer(s)
	}
}

func (s *CreateServerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateServer(s)
	}
}

func (s *CreateServerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateServer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CreateServer() (localctx ICreateServerContext) {
	this := p
	_ = this

	localctx = NewCreateServerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 618, MySQLStatementParserRULE_createServer)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4514)
		p.Match(MySQLStatementParserCREATE)
	}
	{
		p.SetState(4515)
		p.Match(MySQLStatementParserSERVER)
	}
	{
		p.SetState(4516)
		p.ServerName()
	}
	{
		p.SetState(4517)
		p.Match(MySQLStatementParserFOREIGN)
	}
	{
		p.SetState(4518)
		p.Match(MySQLStatementParserDATA)
	}
	{
		p.SetState(4519)
		p.Match(MySQLStatementParserWRAPPER)
	}
	{
		p.SetState(4520)
		p.WrapperName()
	}
	{
		p.SetState(4521)
		p.Match(MySQLStatementParserOPTIONS)
	}
	{
		p.SetState(4522)
		p.Match(MySQLStatementParserLP_)
	}
	{
		p.SetState(4523)
		p.ServerOption()
	}
	p.SetState(4528)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(4524)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(4525)
			p.ServerOption()
		}

		p.SetState(4530)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(4531)
		p.Match(MySQLStatementParserRP_)
	}

	return localctx
}

// IAlterServerContext is an interface to support dynamic dispatch.
type IAlterServerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterServerContext differentiates from other interfaces.
	IsAlterServerContext()
}

type AlterServerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterServerContext() *AlterServerContext {
	var p = new(AlterServerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterServer
	return p
}

func (*AlterServerContext) IsAlterServerContext() {}

func NewAlterServerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterServerContext {
	var p = new(AlterServerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterServer

	return p
}

func (s *AlterServerContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterServerContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALTER, 0)
}

func (s *AlterServerContext) SERVER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSERVER, 0)
}

func (s *AlterServerContext) ServerName() IServerNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IServerNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IServerNameContext)
}

func (s *AlterServerContext) OPTIONS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOPTIONS, 0)
}

func (s *AlterServerContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *AlterServerContext) AllServerOption() []IServerOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IServerOptionContext)(nil)).Elem())
	var tst = make([]IServerOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IServerOptionContext)
		}
	}

	return tst
}

func (s *AlterServerContext) ServerOption(i int) IServerOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IServerOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IServerOptionContext)
}

func (s *AlterServerContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *AlterServerContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *AlterServerContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *AlterServerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterServerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterServerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterServer(s)
	}
}

func (s *AlterServerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterServer(s)
	}
}

func (s *AlterServerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterServer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterServer() (localctx IAlterServerContext) {
	this := p
	_ = this

	localctx = NewAlterServerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 620, MySQLStatementParserRULE_alterServer)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4533)
		p.Match(MySQLStatementParserALTER)
	}
	{
		p.SetState(4534)
		p.Match(MySQLStatementParserSERVER)
	}
	{
		p.SetState(4535)
		p.ServerName()
	}
	{
		p.SetState(4536)
		p.Match(MySQLStatementParserOPTIONS)
	}
	{
		p.SetState(4537)
		p.Match(MySQLStatementParserLP_)
	}
	{
		p.SetState(4538)
		p.ServerOption()
	}
	p.SetState(4543)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(4539)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(4540)
			p.ServerOption()
		}

		p.SetState(4545)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(4546)
		p.Match(MySQLStatementParserRP_)
	}

	return localctx
}

// IDropServerContext is an interface to support dynamic dispatch.
type IDropServerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropServerContext differentiates from other interfaces.
	IsDropServerContext()
}

type DropServerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropServerContext() *DropServerContext {
	var p = new(DropServerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_dropServer
	return p
}

func (*DropServerContext) IsDropServerContext() {}

func NewDropServerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropServerContext {
	var p = new(DropServerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_dropServer

	return p
}

func (s *DropServerContext) GetParser() antlr.Parser { return s.parser }

func (s *DropServerContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDROP, 0)
}

func (s *DropServerContext) SERVER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSERVER, 0)
}

func (s *DropServerContext) ServerName() IServerNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IServerNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IServerNameContext)
}

func (s *DropServerContext) ExistClause() IExistClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExistClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExistClauseContext)
}

func (s *DropServerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropServerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropServerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDropServer(s)
	}
}

func (s *DropServerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDropServer(s)
	}
}

func (s *DropServerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDropServer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DropServer() (localctx IDropServerContext) {
	this := p
	_ = this

	localctx = NewDropServerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 622, MySQLStatementParserRULE_dropServer)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4548)
		p.Match(MySQLStatementParserDROP)
	}
	{
		p.SetState(4549)
		p.Match(MySQLStatementParserSERVER)
	}
	p.SetState(4551)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIF {
		{
			p.SetState(4550)
			p.ExistClause()
		}

	}
	{
		p.SetState(4553)
		p.ServerName()
	}

	return localctx
}

// ICreateViewContext is an interface to support dynamic dispatch.
type ICreateViewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateViewContext differentiates from other interfaces.
	IsCreateViewContext()
}

type CreateViewContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateViewContext() *CreateViewContext {
	var p = new(CreateViewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_createView
	return p
}

func (*CreateViewContext) IsCreateViewContext() {}

func NewCreateViewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateViewContext {
	var p = new(CreateViewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_createView

	return p
}

func (s *CreateViewContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateViewContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *CreateViewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVIEW, 0)
}

func (s *CreateViewContext) ViewName() IViewNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IViewNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IViewNameContext)
}

func (s *CreateViewContext) AS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAS, 0)
}

func (s *CreateViewContext) Select() ISelectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectContext)
}

func (s *CreateViewContext) OR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOR, 0)
}

func (s *CreateViewContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLACE, 0)
}

func (s *CreateViewContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALGORITHM, 0)
}

func (s *CreateViewContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *CreateViewContext) OwnerStatement() IOwnerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwnerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwnerStatementContext)
}

func (s *CreateViewContext) SQL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSQL, 0)
}

func (s *CreateViewContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSECURITY, 0)
}

func (s *CreateViewContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *CreateViewContext) ColumnNames() IColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNamesContext)
}

func (s *CreateViewContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *CreateViewContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWITH, 0)
}

func (s *CreateViewContext) CHECK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHECK, 0)
}

func (s *CreateViewContext) OPTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOPTION, 0)
}

func (s *CreateViewContext) UNDEFINED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNDEFINED, 0)
}

func (s *CreateViewContext) MERGE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMERGE, 0)
}

func (s *CreateViewContext) TEMPTABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTEMPTABLE, 0)
}

func (s *CreateViewContext) DEFINER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFINER, 0)
}

func (s *CreateViewContext) INVOKER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINVOKER, 0)
}

func (s *CreateViewContext) CASCADED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCASCADED, 0)
}

func (s *CreateViewContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCAL, 0)
}

func (s *CreateViewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateViewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateViewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateView(s)
	}
}

func (s *CreateViewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateView(s)
	}
}

func (s *CreateViewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateView(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CreateView() (localctx ICreateViewContext) {
	this := p
	_ = this

	localctx = NewCreateViewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 624, MySQLStatementParserRULE_createView)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4555)
		p.Match(MySQLStatementParserCREATE)
	}
	p.SetState(4558)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserOR {
		{
			p.SetState(4556)
			p.Match(MySQLStatementParserOR)
		}
		{
			p.SetState(4557)
			p.Match(MySQLStatementParserREPLACE)
		}

	}
	p.SetState(4563)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserALGORITHM {
		{
			p.SetState(4560)
			p.Match(MySQLStatementParserALGORITHM)
		}
		{
			p.SetState(4561)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(4562)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserMERGE || _la == MySQLStatementParserTEMPTABLE || _la == MySQLStatementParserUNDEFINED) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(4566)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserDEFINER {
		{
			p.SetState(4565)
			p.OwnerStatement()
		}

	}
	p.SetState(4571)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserSQL {
		{
			p.SetState(4568)
			p.Match(MySQLStatementParserSQL)
		}
		{
			p.SetState(4569)
			p.Match(MySQLStatementParserSECURITY)
		}
		{
			p.SetState(4570)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserDEFINER || _la == MySQLStatementParserINVOKER) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(4573)
		p.Match(MySQLStatementParserVIEW)
	}
	{
		p.SetState(4574)
		p.ViewName()
	}
	p.SetState(4579)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLP_ {
		{
			p.SetState(4575)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(4576)
			p.ColumnNames()
		}
		{
			p.SetState(4577)
			p.Match(MySQLStatementParserRP_)
		}

	}
	{
		p.SetState(4581)
		p.Match(MySQLStatementParserAS)
	}
	{
		p.SetState(4582)
		p.Select()
	}
	p.SetState(4589)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserWITH {
		{
			p.SetState(4583)
			p.Match(MySQLStatementParserWITH)
		}
		p.SetState(4585)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserCASCADED || _la == MySQLStatementParserLOCAL {
			{
				p.SetState(4584)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySQLStatementParserCASCADED || _la == MySQLStatementParserLOCAL) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(4587)
			p.Match(MySQLStatementParserCHECK)
		}
		{
			p.SetState(4588)
			p.Match(MySQLStatementParserOPTION)
		}

	}

	return localctx
}

// IAlterViewContext is an interface to support dynamic dispatch.
type IAlterViewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterViewContext differentiates from other interfaces.
	IsAlterViewContext()
}

type AlterViewContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterViewContext() *AlterViewContext {
	var p = new(AlterViewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterView
	return p
}

func (*AlterViewContext) IsAlterViewContext() {}

func NewAlterViewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterViewContext {
	var p = new(AlterViewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterView

	return p
}

func (s *AlterViewContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterViewContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALTER, 0)
}

func (s *AlterViewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVIEW, 0)
}

func (s *AlterViewContext) ViewName() IViewNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IViewNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IViewNameContext)
}

func (s *AlterViewContext) AS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAS, 0)
}

func (s *AlterViewContext) Select() ISelectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectContext)
}

func (s *AlterViewContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALGORITHM, 0)
}

func (s *AlterViewContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *AlterViewContext) OwnerStatement() IOwnerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwnerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwnerStatementContext)
}

func (s *AlterViewContext) SQL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSQL, 0)
}

func (s *AlterViewContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSECURITY, 0)
}

func (s *AlterViewContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *AlterViewContext) ColumnNames() IColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNamesContext)
}

func (s *AlterViewContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *AlterViewContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWITH, 0)
}

func (s *AlterViewContext) CHECK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHECK, 0)
}

func (s *AlterViewContext) OPTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOPTION, 0)
}

func (s *AlterViewContext) UNDEFINED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNDEFINED, 0)
}

func (s *AlterViewContext) MERGE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMERGE, 0)
}

func (s *AlterViewContext) TEMPTABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTEMPTABLE, 0)
}

func (s *AlterViewContext) DEFINER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFINER, 0)
}

func (s *AlterViewContext) INVOKER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINVOKER, 0)
}

func (s *AlterViewContext) CASCADED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCASCADED, 0)
}

func (s *AlterViewContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCAL, 0)
}

func (s *AlterViewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterViewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterViewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterView(s)
	}
}

func (s *AlterViewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterView(s)
	}
}

func (s *AlterViewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterView(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterView() (localctx IAlterViewContext) {
	this := p
	_ = this

	localctx = NewAlterViewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 626, MySQLStatementParserRULE_alterView)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4591)
		p.Match(MySQLStatementParserALTER)
	}
	p.SetState(4595)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserALGORITHM {
		{
			p.SetState(4592)
			p.Match(MySQLStatementParserALGORITHM)
		}
		{
			p.SetState(4593)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(4594)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserMERGE || _la == MySQLStatementParserTEMPTABLE || _la == MySQLStatementParserUNDEFINED) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(4598)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserDEFINER {
		{
			p.SetState(4597)
			p.OwnerStatement()
		}

	}
	p.SetState(4603)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserSQL {
		{
			p.SetState(4600)
			p.Match(MySQLStatementParserSQL)
		}
		{
			p.SetState(4601)
			p.Match(MySQLStatementParserSECURITY)
		}
		{
			p.SetState(4602)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserDEFINER || _la == MySQLStatementParserINVOKER) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(4605)
		p.Match(MySQLStatementParserVIEW)
	}
	{
		p.SetState(4606)
		p.ViewName()
	}
	p.SetState(4611)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLP_ {
		{
			p.SetState(4607)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(4608)
			p.ColumnNames()
		}
		{
			p.SetState(4609)
			p.Match(MySQLStatementParserRP_)
		}

	}
	{
		p.SetState(4613)
		p.Match(MySQLStatementParserAS)
	}
	{
		p.SetState(4614)
		p.Select()
	}
	p.SetState(4621)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserWITH {
		{
			p.SetState(4615)
			p.Match(MySQLStatementParserWITH)
		}
		p.SetState(4617)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserCASCADED || _la == MySQLStatementParserLOCAL {
			{
				p.SetState(4616)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySQLStatementParserCASCADED || _la == MySQLStatementParserLOCAL) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(4619)
			p.Match(MySQLStatementParserCHECK)
		}
		{
			p.SetState(4620)
			p.Match(MySQLStatementParserOPTION)
		}

	}

	return localctx
}

// IDropViewContext is an interface to support dynamic dispatch.
type IDropViewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropViewContext differentiates from other interfaces.
	IsDropViewContext()
}

type DropViewContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropViewContext() *DropViewContext {
	var p = new(DropViewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_dropView
	return p
}

func (*DropViewContext) IsDropViewContext() {}

func NewDropViewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropViewContext {
	var p = new(DropViewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_dropView

	return p
}

func (s *DropViewContext) GetParser() antlr.Parser { return s.parser }

func (s *DropViewContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDROP, 0)
}

func (s *DropViewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVIEW, 0)
}

func (s *DropViewContext) ViewNames() IViewNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IViewNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IViewNamesContext)
}

func (s *DropViewContext) ExistClause() IExistClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExistClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExistClauseContext)
}

func (s *DropViewContext) Restrict() IRestrictContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRestrictContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRestrictContext)
}

func (s *DropViewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropViewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropViewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDropView(s)
	}
}

func (s *DropViewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDropView(s)
	}
}

func (s *DropViewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDropView(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DropView() (localctx IDropViewContext) {
	this := p
	_ = this

	localctx = NewDropViewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 628, MySQLStatementParserRULE_dropView)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4623)
		p.Match(MySQLStatementParserDROP)
	}
	{
		p.SetState(4624)
		p.Match(MySQLStatementParserVIEW)
	}
	p.SetState(4626)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIF {
		{
			p.SetState(4625)
			p.ExistClause()
		}

	}
	{
		p.SetState(4628)
		p.ViewNames()
	}
	p.SetState(4630)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserCASCADE || _la == MySQLStatementParserRESTRICT {
		{
			p.SetState(4629)
			p.Restrict()
		}

	}

	return localctx
}

// ICreateTablespaceContext is an interface to support dynamic dispatch.
type ICreateTablespaceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateTablespaceContext differentiates from other interfaces.
	IsCreateTablespaceContext()
}

type CreateTablespaceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateTablespaceContext() *CreateTablespaceContext {
	var p = new(CreateTablespaceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_createTablespace
	return p
}

func (*CreateTablespaceContext) IsCreateTablespaceContext() {}

func NewCreateTablespaceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateTablespaceContext {
	var p = new(CreateTablespaceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_createTablespace

	return p
}

func (s *CreateTablespaceContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateTablespaceContext) CreateTablespaceInnodb() ICreateTablespaceInnodbContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateTablespaceInnodbContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateTablespaceInnodbContext)
}

func (s *CreateTablespaceContext) CreateTablespaceNdb() ICreateTablespaceNdbContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateTablespaceNdbContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateTablespaceNdbContext)
}

func (s *CreateTablespaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateTablespaceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateTablespaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateTablespace(s)
	}
}

func (s *CreateTablespaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateTablespace(s)
	}
}

func (s *CreateTablespaceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateTablespace(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CreateTablespace() (localctx ICreateTablespaceContext) {
	this := p
	_ = this

	localctx = NewCreateTablespaceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 630, MySQLStatementParserRULE_createTablespace)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4634)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 543, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4632)
			p.CreateTablespaceInnodb()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4633)
			p.CreateTablespaceNdb()
		}

	}

	return localctx
}

// ICreateTablespaceInnodbContext is an interface to support dynamic dispatch.
type ICreateTablespaceInnodbContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetY_or_n returns the y_or_n rule contexts.
	GetY_or_n() IString_Context

	// SetY_or_n sets the y_or_n rule contexts.
	SetY_or_n(IString_Context)

	// IsCreateTablespaceInnodbContext differentiates from other interfaces.
	IsCreateTablespaceInnodbContext()
}

type CreateTablespaceInnodbContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	y_or_n IString_Context
}

func NewEmptyCreateTablespaceInnodbContext() *CreateTablespaceInnodbContext {
	var p = new(CreateTablespaceInnodbContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_createTablespaceInnodb
	return p
}

func (*CreateTablespaceInnodbContext) IsCreateTablespaceInnodbContext() {}

func NewCreateTablespaceInnodbContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateTablespaceInnodbContext {
	var p = new(CreateTablespaceInnodbContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_createTablespaceInnodb

	return p
}

func (s *CreateTablespaceInnodbContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateTablespaceInnodbContext) GetY_or_n() IString_Context { return s.y_or_n }

func (s *CreateTablespaceInnodbContext) SetY_or_n(v IString_Context) { s.y_or_n = v }

func (s *CreateTablespaceInnodbContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *CreateTablespaceInnodbContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLESPACE, 0)
}

func (s *CreateTablespaceInnodbContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *CreateTablespaceInnodbContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserADD, 0)
}

func (s *CreateTablespaceInnodbContext) DATAFILE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDATAFILE, 0)
}

func (s *CreateTablespaceInnodbContext) AllString_() []IString_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IString_Context)(nil)).Elem())
	var tst = make([]IString_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IString_Context)
		}
	}

	return tst
}

func (s *CreateTablespaceInnodbContext) String_(i int) IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *CreateTablespaceInnodbContext) UNDO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNDO, 0)
}

func (s *CreateTablespaceInnodbContext) FILE_BLOCK_SIZE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFILE_BLOCK_SIZE, 0)
}

func (s *CreateTablespaceInnodbContext) AllEQ_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserEQ_)
}

func (s *CreateTablespaceInnodbContext) EQ_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, i)
}

func (s *CreateTablespaceInnodbContext) FileSizeLiteral() IFileSizeLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFileSizeLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFileSizeLiteralContext)
}

func (s *CreateTablespaceInnodbContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENCRYPTION, 0)
}

func (s *CreateTablespaceInnodbContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENGINE, 0)
}

func (s *CreateTablespaceInnodbContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateTablespaceInnodbContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateTablespaceInnodbContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateTablespaceInnodb(s)
	}
}

func (s *CreateTablespaceInnodbContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateTablespaceInnodb(s)
	}
}

func (s *CreateTablespaceInnodbContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateTablespaceInnodb(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CreateTablespaceInnodb() (localctx ICreateTablespaceInnodbContext) {
	this := p
	_ = this

	localctx = NewCreateTablespaceInnodbContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 632, MySQLStatementParserRULE_createTablespaceInnodb)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4636)
		p.Match(MySQLStatementParserCREATE)
	}
	p.SetState(4638)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserUNDO {
		{
			p.SetState(4637)
			p.Match(MySQLStatementParserUNDO)
		}

	}
	{
		p.SetState(4640)
		p.Match(MySQLStatementParserTABLESPACE)
	}
	{
		p.SetState(4641)
		p.Identifier()
	}
	{
		p.SetState(4642)
		p.Match(MySQLStatementParserADD)
	}
	{
		p.SetState(4643)
		p.Match(MySQLStatementParserDATAFILE)
	}
	{
		p.SetState(4644)
		p.String_()
	}
	p.SetState(4648)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserFILE_BLOCK_SIZE {
		{
			p.SetState(4645)
			p.Match(MySQLStatementParserFILE_BLOCK_SIZE)
		}
		{
			p.SetState(4646)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(4647)
			p.FileSizeLiteral()
		}

	}
	p.SetState(4653)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserENCRYPTION {
		{
			p.SetState(4650)
			p.Match(MySQLStatementParserENCRYPTION)
		}
		{
			p.SetState(4651)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(4652)

			var _x = p.String_()

			localctx.(*CreateTablespaceInnodbContext).y_or_n = _x
		}

	}
	p.SetState(4660)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserENGINE {
		{
			p.SetState(4655)
			p.Match(MySQLStatementParserENGINE)
		}
		p.SetState(4657)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(4656)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(4659)
			p.String_()
		}

	}

	return localctx
}

// ICreateTablespaceNdbContext is an interface to support dynamic dispatch.
type ICreateTablespaceNdbContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateTablespaceNdbContext differentiates from other interfaces.
	IsCreateTablespaceNdbContext()
}

type CreateTablespaceNdbContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateTablespaceNdbContext() *CreateTablespaceNdbContext {
	var p = new(CreateTablespaceNdbContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_createTablespaceNdb
	return p
}

func (*CreateTablespaceNdbContext) IsCreateTablespaceNdbContext() {}

func NewCreateTablespaceNdbContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateTablespaceNdbContext {
	var p = new(CreateTablespaceNdbContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_createTablespaceNdb

	return p
}

func (s *CreateTablespaceNdbContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateTablespaceNdbContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *CreateTablespaceNdbContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLESPACE, 0)
}

func (s *CreateTablespaceNdbContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *CreateTablespaceNdbContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *CreateTablespaceNdbContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserADD, 0)
}

func (s *CreateTablespaceNdbContext) DATAFILE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDATAFILE, 0)
}

func (s *CreateTablespaceNdbContext) AllString_() []IString_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IString_Context)(nil)).Elem())
	var tst = make([]IString_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IString_Context)
		}
	}

	return tst
}

func (s *CreateTablespaceNdbContext) String_(i int) IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *CreateTablespaceNdbContext) USE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUSE, 0)
}

func (s *CreateTablespaceNdbContext) LOGFILE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOGFILE, 0)
}

func (s *CreateTablespaceNdbContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGROUP, 0)
}

func (s *CreateTablespaceNdbContext) UNDO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNDO, 0)
}

func (s *CreateTablespaceNdbContext) EXTENT_SIZE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXTENT_SIZE, 0)
}

func (s *CreateTablespaceNdbContext) AllFileSizeLiteral() []IFileSizeLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFileSizeLiteralContext)(nil)).Elem())
	var tst = make([]IFileSizeLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFileSizeLiteralContext)
		}
	}

	return tst
}

func (s *CreateTablespaceNdbContext) FileSizeLiteral(i int) IFileSizeLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFileSizeLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFileSizeLiteralContext)
}

func (s *CreateTablespaceNdbContext) INITIAL_SIZE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINITIAL_SIZE, 0)
}

func (s *CreateTablespaceNdbContext) AUTOEXTEND_SIZE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAUTOEXTEND_SIZE, 0)
}

func (s *CreateTablespaceNdbContext) MAX_SIZE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMAX_SIZE, 0)
}

func (s *CreateTablespaceNdbContext) NODEGROUP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNODEGROUP, 0)
}

func (s *CreateTablespaceNdbContext) WAIT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWAIT, 0)
}

func (s *CreateTablespaceNdbContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMENT, 0)
}

func (s *CreateTablespaceNdbContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENGINE, 0)
}

func (s *CreateTablespaceNdbContext) AllEQ_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserEQ_)
}

func (s *CreateTablespaceNdbContext) EQ_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, i)
}

func (s *CreateTablespaceNdbContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateTablespaceNdbContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateTablespaceNdbContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateTablespaceNdb(s)
	}
}

func (s *CreateTablespaceNdbContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateTablespaceNdb(s)
	}
}

func (s *CreateTablespaceNdbContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateTablespaceNdb(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CreateTablespaceNdb() (localctx ICreateTablespaceNdbContext) {
	this := p
	_ = this

	localctx = NewCreateTablespaceNdbContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 634, MySQLStatementParserRULE_createTablespaceNdb)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4662)
		p.Match(MySQLStatementParserCREATE)
	}
	p.SetState(4664)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserUNDO {
		{
			p.SetState(4663)
			p.Match(MySQLStatementParserUNDO)
		}

	}
	{
		p.SetState(4666)
		p.Match(MySQLStatementParserTABLESPACE)
	}
	{
		p.SetState(4667)
		p.Identifier()
	}
	{
		p.SetState(4668)
		p.Match(MySQLStatementParserADD)
	}
	{
		p.SetState(4669)
		p.Match(MySQLStatementParserDATAFILE)
	}
	{
		p.SetState(4670)
		p.String_()
	}
	{
		p.SetState(4671)
		p.Match(MySQLStatementParserUSE)
	}
	{
		p.SetState(4672)
		p.Match(MySQLStatementParserLOGFILE)
	}
	{
		p.SetState(4673)
		p.Match(MySQLStatementParserGROUP)
	}
	{
		p.SetState(4674)
		p.Identifier()
	}
	p.SetState(4680)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserEXTENT_SIZE {
		{
			p.SetState(4675)
			p.Match(MySQLStatementParserEXTENT_SIZE)
		}
		p.SetState(4677)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(4676)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(4679)
			p.FileSizeLiteral()
		}

	}
	p.SetState(4687)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserINITIAL_SIZE {
		{
			p.SetState(4682)
			p.Match(MySQLStatementParserINITIAL_SIZE)
		}
		p.SetState(4684)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(4683)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(4686)
			p.FileSizeLiteral()
		}

	}
	p.SetState(4694)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserAUTOEXTEND_SIZE {
		{
			p.SetState(4689)
			p.Match(MySQLStatementParserAUTOEXTEND_SIZE)
		}
		p.SetState(4691)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(4690)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(4693)
			p.FileSizeLiteral()
		}

	}
	p.SetState(4701)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserMAX_SIZE {
		{
			p.SetState(4696)
			p.Match(MySQLStatementParserMAX_SIZE)
		}
		p.SetState(4698)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(4697)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(4700)
			p.FileSizeLiteral()
		}

	}
	p.SetState(4708)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserNODEGROUP {
		{
			p.SetState(4703)
			p.Match(MySQLStatementParserNODEGROUP)
		}
		p.SetState(4705)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(4704)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(4707)
			p.Identifier()
		}

	}
	p.SetState(4711)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserWAIT {
		{
			p.SetState(4710)
			p.Match(MySQLStatementParserWAIT)
		}

	}
	p.SetState(4718)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserCOMMENT {
		{
			p.SetState(4713)
			p.Match(MySQLStatementParserCOMMENT)
		}
		p.SetState(4715)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(4714)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(4717)
			p.String_()
		}

	}
	p.SetState(4725)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserENGINE {
		{
			p.SetState(4720)
			p.Match(MySQLStatementParserENGINE)
		}
		p.SetState(4722)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(4721)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(4724)
			p.Identifier()
		}

	}

	return localctx
}

// IAlterTablespaceContext is an interface to support dynamic dispatch.
type IAlterTablespaceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterTablespaceContext differentiates from other interfaces.
	IsAlterTablespaceContext()
}

type AlterTablespaceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterTablespaceContext() *AlterTablespaceContext {
	var p = new(AlterTablespaceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterTablespace
	return p
}

func (*AlterTablespaceContext) IsAlterTablespaceContext() {}

func NewAlterTablespaceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterTablespaceContext {
	var p = new(AlterTablespaceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterTablespace

	return p
}

func (s *AlterTablespaceContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterTablespaceContext) AlterTablespaceInnodb() IAlterTablespaceInnodbContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterTablespaceInnodbContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterTablespaceInnodbContext)
}

func (s *AlterTablespaceContext) AlterTablespaceNdb() IAlterTablespaceNdbContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterTablespaceNdbContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterTablespaceNdbContext)
}

func (s *AlterTablespaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTablespaceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterTablespaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterTablespace(s)
	}
}

func (s *AlterTablespaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterTablespace(s)
	}
}

func (s *AlterTablespaceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterTablespace(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterTablespace() (localctx IAlterTablespaceContext) {
	this := p
	_ = this

	localctx = NewAlterTablespaceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 636, MySQLStatementParserRULE_alterTablespace)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4729)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 565, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4727)
			p.AlterTablespaceInnodb()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4728)
			p.AlterTablespaceNdb()
		}

	}

	return localctx
}

// IAlterTablespaceNdbContext is an interface to support dynamic dispatch.
type IAlterTablespaceNdbContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterTablespaceNdbContext differentiates from other interfaces.
	IsAlterTablespaceNdbContext()
}

type AlterTablespaceNdbContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterTablespaceNdbContext() *AlterTablespaceNdbContext {
	var p = new(AlterTablespaceNdbContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterTablespaceNdb
	return p
}

func (*AlterTablespaceNdbContext) IsAlterTablespaceNdbContext() {}

func NewAlterTablespaceNdbContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterTablespaceNdbContext {
	var p = new(AlterTablespaceNdbContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterTablespaceNdb

	return p
}

func (s *AlterTablespaceNdbContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterTablespaceNdbContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALTER, 0)
}

func (s *AlterTablespaceNdbContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLESPACE, 0)
}

func (s *AlterTablespaceNdbContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *AlterTablespaceNdbContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AlterTablespaceNdbContext) DATAFILE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDATAFILE, 0)
}

func (s *AlterTablespaceNdbContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *AlterTablespaceNdbContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserADD, 0)
}

func (s *AlterTablespaceNdbContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDROP, 0)
}

func (s *AlterTablespaceNdbContext) UNDO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNDO, 0)
}

func (s *AlterTablespaceNdbContext) INITIAL_SIZE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINITIAL_SIZE, 0)
}

func (s *AlterTablespaceNdbContext) AllEQ_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserEQ_)
}

func (s *AlterTablespaceNdbContext) EQ_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, i)
}

func (s *AlterTablespaceNdbContext) FileSizeLiteral() IFileSizeLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFileSizeLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFileSizeLiteralContext)
}

func (s *AlterTablespaceNdbContext) WAIT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWAIT, 0)
}

func (s *AlterTablespaceNdbContext) RENAME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRENAME, 0)
}

func (s *AlterTablespaceNdbContext) TO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTO, 0)
}

func (s *AlterTablespaceNdbContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENGINE, 0)
}

func (s *AlterTablespaceNdbContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTablespaceNdbContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterTablespaceNdbContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterTablespaceNdb(s)
	}
}

func (s *AlterTablespaceNdbContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterTablespaceNdb(s)
	}
}

func (s *AlterTablespaceNdbContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterTablespaceNdb(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterTablespaceNdb() (localctx IAlterTablespaceNdbContext) {
	this := p
	_ = this

	localctx = NewAlterTablespaceNdbContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 638, MySQLStatementParserRULE_alterTablespaceNdb)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4731)
		p.Match(MySQLStatementParserALTER)
	}
	p.SetState(4733)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserUNDO {
		{
			p.SetState(4732)
			p.Match(MySQLStatementParserUNDO)
		}

	}
	{
		p.SetState(4735)
		p.Match(MySQLStatementParserTABLESPACE)
	}
	{
		p.SetState(4736)
		p.Identifier()
	}
	{
		p.SetState(4737)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserADD || _la == MySQLStatementParserDROP) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(4738)
		p.Match(MySQLStatementParserDATAFILE)
	}
	{
		p.SetState(4739)
		p.String_()
	}
	p.SetState(4743)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserINITIAL_SIZE {
		{
			p.SetState(4740)
			p.Match(MySQLStatementParserINITIAL_SIZE)
		}
		{
			p.SetState(4741)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(4742)
			p.FileSizeLiteral()
		}

	}
	p.SetState(4746)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserWAIT {
		{
			p.SetState(4745)
			p.Match(MySQLStatementParserWAIT)
		}

	}
	p.SetState(4751)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserRENAME {
		{
			p.SetState(4748)
			p.Match(MySQLStatementParserRENAME)
		}
		{
			p.SetState(4749)
			p.Match(MySQLStatementParserTO)
		}
		{
			p.SetState(4750)
			p.Identifier()
		}

	}
	p.SetState(4758)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserENGINE {
		{
			p.SetState(4753)
			p.Match(MySQLStatementParserENGINE)
		}
		p.SetState(4755)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(4754)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(4757)
			p.Identifier()
		}

	}

	return localctx
}

// IAlterTablespaceInnodbContext is an interface to support dynamic dispatch.
type IAlterTablespaceInnodbContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetY_or_n returns the y_or_n rule contexts.
	GetY_or_n() IString_Context

	// SetY_or_n sets the y_or_n rule contexts.
	SetY_or_n(IString_Context)

	// IsAlterTablespaceInnodbContext differentiates from other interfaces.
	IsAlterTablespaceInnodbContext()
}

type AlterTablespaceInnodbContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	y_or_n IString_Context
}

func NewEmptyAlterTablespaceInnodbContext() *AlterTablespaceInnodbContext {
	var p = new(AlterTablespaceInnodbContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterTablespaceInnodb
	return p
}

func (*AlterTablespaceInnodbContext) IsAlterTablespaceInnodbContext() {}

func NewAlterTablespaceInnodbContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterTablespaceInnodbContext {
	var p = new(AlterTablespaceInnodbContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterTablespaceInnodb

	return p
}

func (s *AlterTablespaceInnodbContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterTablespaceInnodbContext) GetY_or_n() IString_Context { return s.y_or_n }

func (s *AlterTablespaceInnodbContext) SetY_or_n(v IString_Context) { s.y_or_n = v }

func (s *AlterTablespaceInnodbContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALTER, 0)
}

func (s *AlterTablespaceInnodbContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLESPACE, 0)
}

func (s *AlterTablespaceInnodbContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *AlterTablespaceInnodbContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AlterTablespaceInnodbContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENCRYPTION, 0)
}

func (s *AlterTablespaceInnodbContext) UNDO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNDO, 0)
}

func (s *AlterTablespaceInnodbContext) SET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSET, 0)
}

func (s *AlterTablespaceInnodbContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *AlterTablespaceInnodbContext) RENAME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRENAME, 0)
}

func (s *AlterTablespaceInnodbContext) TO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTO, 0)
}

func (s *AlterTablespaceInnodbContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENGINE, 0)
}

func (s *AlterTablespaceInnodbContext) ACTIVE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserACTIVE, 0)
}

func (s *AlterTablespaceInnodbContext) INACTIVE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINACTIVE, 0)
}

func (s *AlterTablespaceInnodbContext) AllEQ_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserEQ_)
}

func (s *AlterTablespaceInnodbContext) EQ_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, i)
}

func (s *AlterTablespaceInnodbContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTablespaceInnodbContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterTablespaceInnodbContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterTablespaceInnodb(s)
	}
}

func (s *AlterTablespaceInnodbContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterTablespaceInnodb(s)
	}
}

func (s *AlterTablespaceInnodbContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterTablespaceInnodb(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterTablespaceInnodb() (localctx IAlterTablespaceInnodbContext) {
	this := p
	_ = this

	localctx = NewAlterTablespaceInnodbContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 640, MySQLStatementParserRULE_alterTablespaceInnodb)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4760)
		p.Match(MySQLStatementParserALTER)
	}
	p.SetState(4762)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserUNDO {
		{
			p.SetState(4761)
			p.Match(MySQLStatementParserUNDO)
		}

	}
	{
		p.SetState(4764)
		p.Match(MySQLStatementParserTABLESPACE)
	}
	{
		p.SetState(4765)
		p.Identifier()
	}
	p.SetState(4768)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserSET {
		{
			p.SetState(4766)
			p.Match(MySQLStatementParserSET)
		}
		{
			p.SetState(4767)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserACTIVE || _la == MySQLStatementParserINACTIVE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	{
		p.SetState(4770)
		p.Match(MySQLStatementParserENCRYPTION)
	}
	p.SetState(4772)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserEQ_ {
		{
			p.SetState(4771)
			p.Match(MySQLStatementParserEQ_)
		}

	}
	{
		p.SetState(4774)

		var _x = p.String_()

		localctx.(*AlterTablespaceInnodbContext).y_or_n = _x
	}

	p.SetState(4779)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserRENAME {
		{
			p.SetState(4776)
			p.Match(MySQLStatementParserRENAME)
		}
		{
			p.SetState(4777)
			p.Match(MySQLStatementParserTO)
		}
		{
			p.SetState(4778)
			p.Identifier()
		}

	}
	p.SetState(4786)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserENGINE {
		{
			p.SetState(4781)
			p.Match(MySQLStatementParserENGINE)
		}
		p.SetState(4783)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(4782)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(4785)
			p.Identifier()
		}

	}

	return localctx
}

// IDropTablespaceContext is an interface to support dynamic dispatch.
type IDropTablespaceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropTablespaceContext differentiates from other interfaces.
	IsDropTablespaceContext()
}

type DropTablespaceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropTablespaceContext() *DropTablespaceContext {
	var p = new(DropTablespaceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_dropTablespace
	return p
}

func (*DropTablespaceContext) IsDropTablespaceContext() {}

func NewDropTablespaceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropTablespaceContext {
	var p = new(DropTablespaceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_dropTablespace

	return p
}

func (s *DropTablespaceContext) GetParser() antlr.Parser { return s.parser }

func (s *DropTablespaceContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDROP, 0)
}

func (s *DropTablespaceContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLESPACE, 0)
}

func (s *DropTablespaceContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *DropTablespaceContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *DropTablespaceContext) UNDO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNDO, 0)
}

func (s *DropTablespaceContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENGINE, 0)
}

func (s *DropTablespaceContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *DropTablespaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropTablespaceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropTablespaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDropTablespace(s)
	}
}

func (s *DropTablespaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDropTablespace(s)
	}
}

func (s *DropTablespaceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDropTablespace(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DropTablespace() (localctx IDropTablespaceContext) {
	this := p
	_ = this

	localctx = NewDropTablespaceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 642, MySQLStatementParserRULE_dropTablespace)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4788)
		p.Match(MySQLStatementParserDROP)
	}
	p.SetState(4790)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserUNDO {
		{
			p.SetState(4789)
			p.Match(MySQLStatementParserUNDO)
		}

	}
	{
		p.SetState(4792)
		p.Match(MySQLStatementParserTABLESPACE)
	}
	{
		p.SetState(4793)
		p.Identifier()
	}
	p.SetState(4799)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserENGINE {
		{
			p.SetState(4794)
			p.Match(MySQLStatementParserENGINE)
		}
		p.SetState(4796)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(4795)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(4798)
			p.Identifier()
		}

	}

	return localctx
}

// ICreateLogfileGroupContext is an interface to support dynamic dispatch.
type ICreateLogfileGroupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateLogfileGroupContext differentiates from other interfaces.
	IsCreateLogfileGroupContext()
}

type CreateLogfileGroupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateLogfileGroupContext() *CreateLogfileGroupContext {
	var p = new(CreateLogfileGroupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_createLogfileGroup
	return p
}

func (*CreateLogfileGroupContext) IsCreateLogfileGroupContext() {}

func NewCreateLogfileGroupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateLogfileGroupContext {
	var p = new(CreateLogfileGroupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_createLogfileGroup

	return p
}

func (s *CreateLogfileGroupContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateLogfileGroupContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *CreateLogfileGroupContext) LOGFILE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOGFILE, 0)
}

func (s *CreateLogfileGroupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGROUP, 0)
}

func (s *CreateLogfileGroupContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *CreateLogfileGroupContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *CreateLogfileGroupContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserADD, 0)
}

func (s *CreateLogfileGroupContext) UNDOFILE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNDOFILE, 0)
}

func (s *CreateLogfileGroupContext) AllString_() []IString_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IString_Context)(nil)).Elem())
	var tst = make([]IString_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IString_Context)
		}
	}

	return tst
}

func (s *CreateLogfileGroupContext) String_(i int) IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *CreateLogfileGroupContext) INITIAL_SIZE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINITIAL_SIZE, 0)
}

func (s *CreateLogfileGroupContext) AllFileSizeLiteral() []IFileSizeLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFileSizeLiteralContext)(nil)).Elem())
	var tst = make([]IFileSizeLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFileSizeLiteralContext)
		}
	}

	return tst
}

func (s *CreateLogfileGroupContext) FileSizeLiteral(i int) IFileSizeLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFileSizeLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFileSizeLiteralContext)
}

func (s *CreateLogfileGroupContext) UNDO_BUFFER_SIZE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNDO_BUFFER_SIZE, 0)
}

func (s *CreateLogfileGroupContext) REDO_BUFFER_SIZE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREDO_BUFFER_SIZE, 0)
}

func (s *CreateLogfileGroupContext) NODEGROUP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNODEGROUP, 0)
}

func (s *CreateLogfileGroupContext) WAIT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWAIT, 0)
}

func (s *CreateLogfileGroupContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMENT, 0)
}

func (s *CreateLogfileGroupContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENGINE, 0)
}

func (s *CreateLogfileGroupContext) AllEQ_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserEQ_)
}

func (s *CreateLogfileGroupContext) EQ_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, i)
}

func (s *CreateLogfileGroupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateLogfileGroupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateLogfileGroupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateLogfileGroup(s)
	}
}

func (s *CreateLogfileGroupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateLogfileGroup(s)
	}
}

func (s *CreateLogfileGroupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateLogfileGroup(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CreateLogfileGroup() (localctx ICreateLogfileGroupContext) {
	this := p
	_ = this

	localctx = NewCreateLogfileGroupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 644, MySQLStatementParserRULE_createLogfileGroup)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4801)
		p.Match(MySQLStatementParserCREATE)
	}
	{
		p.SetState(4802)
		p.Match(MySQLStatementParserLOGFILE)
	}
	{
		p.SetState(4803)
		p.Match(MySQLStatementParserGROUP)
	}
	{
		p.SetState(4804)
		p.Identifier()
	}
	{
		p.SetState(4805)
		p.Match(MySQLStatementParserADD)
	}
	{
		p.SetState(4806)
		p.Match(MySQLStatementParserUNDOFILE)
	}
	{
		p.SetState(4807)
		p.String_()
	}
	p.SetState(4813)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserINITIAL_SIZE {
		{
			p.SetState(4808)
			p.Match(MySQLStatementParserINITIAL_SIZE)
		}
		p.SetState(4810)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(4809)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(4812)
			p.FileSizeLiteral()
		}

	}
	p.SetState(4820)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserUNDO_BUFFER_SIZE {
		{
			p.SetState(4815)
			p.Match(MySQLStatementParserUNDO_BUFFER_SIZE)
		}
		p.SetState(4817)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(4816)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(4819)
			p.FileSizeLiteral()
		}

	}
	p.SetState(4827)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserREDO_BUFFER_SIZE {
		{
			p.SetState(4822)
			p.Match(MySQLStatementParserREDO_BUFFER_SIZE)
		}
		p.SetState(4824)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(4823)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(4826)
			p.FileSizeLiteral()
		}

	}
	p.SetState(4834)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserNODEGROUP {
		{
			p.SetState(4829)
			p.Match(MySQLStatementParserNODEGROUP)
		}
		p.SetState(4831)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(4830)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(4833)
			p.Identifier()
		}

	}
	p.SetState(4837)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserWAIT {
		{
			p.SetState(4836)
			p.Match(MySQLStatementParserWAIT)
		}

	}
	p.SetState(4844)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserCOMMENT {
		{
			p.SetState(4839)
			p.Match(MySQLStatementParserCOMMENT)
		}
		p.SetState(4841)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(4840)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(4843)
			p.String_()
		}

	}
	p.SetState(4851)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserENGINE {
		{
			p.SetState(4846)
			p.Match(MySQLStatementParserENGINE)
		}
		p.SetState(4848)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(4847)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(4850)
			p.Identifier()
		}

	}

	return localctx
}

// IAlterLogfileGroupContext is an interface to support dynamic dispatch.
type IAlterLogfileGroupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterLogfileGroupContext differentiates from other interfaces.
	IsAlterLogfileGroupContext()
}

type AlterLogfileGroupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterLogfileGroupContext() *AlterLogfileGroupContext {
	var p = new(AlterLogfileGroupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterLogfileGroup
	return p
}

func (*AlterLogfileGroupContext) IsAlterLogfileGroupContext() {}

func NewAlterLogfileGroupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterLogfileGroupContext {
	var p = new(AlterLogfileGroupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterLogfileGroup

	return p
}

func (s *AlterLogfileGroupContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterLogfileGroupContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALTER, 0)
}

func (s *AlterLogfileGroupContext) LOGFILE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOGFILE, 0)
}

func (s *AlterLogfileGroupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGROUP, 0)
}

func (s *AlterLogfileGroupContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *AlterLogfileGroupContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AlterLogfileGroupContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserADD, 0)
}

func (s *AlterLogfileGroupContext) UNDOFILE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNDOFILE, 0)
}

func (s *AlterLogfileGroupContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *AlterLogfileGroupContext) INITIAL_SIZE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINITIAL_SIZE, 0)
}

func (s *AlterLogfileGroupContext) FileSizeLiteral() IFileSizeLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFileSizeLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFileSizeLiteralContext)
}

func (s *AlterLogfileGroupContext) WAIT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWAIT, 0)
}

func (s *AlterLogfileGroupContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENGINE, 0)
}

func (s *AlterLogfileGroupContext) AllEQ_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserEQ_)
}

func (s *AlterLogfileGroupContext) EQ_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, i)
}

func (s *AlterLogfileGroupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterLogfileGroupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterLogfileGroupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterLogfileGroup(s)
	}
}

func (s *AlterLogfileGroupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterLogfileGroup(s)
	}
}

func (s *AlterLogfileGroupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterLogfileGroup(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterLogfileGroup() (localctx IAlterLogfileGroupContext) {
	this := p
	_ = this

	localctx = NewAlterLogfileGroupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 646, MySQLStatementParserRULE_alterLogfileGroup)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4853)
		p.Match(MySQLStatementParserALTER)
	}
	{
		p.SetState(4854)
		p.Match(MySQLStatementParserLOGFILE)
	}
	{
		p.SetState(4855)
		p.Match(MySQLStatementParserGROUP)
	}
	{
		p.SetState(4856)
		p.Identifier()
	}
	{
		p.SetState(4857)
		p.Match(MySQLStatementParserADD)
	}
	{
		p.SetState(4858)
		p.Match(MySQLStatementParserUNDOFILE)
	}
	{
		p.SetState(4859)
		p.String_()
	}
	p.SetState(4865)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserINITIAL_SIZE {
		{
			p.SetState(4860)
			p.Match(MySQLStatementParserINITIAL_SIZE)
		}
		p.SetState(4862)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(4861)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(4864)
			p.FileSizeLiteral()
		}

	}
	p.SetState(4868)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserWAIT {
		{
			p.SetState(4867)
			p.Match(MySQLStatementParserWAIT)
		}

	}
	p.SetState(4875)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserENGINE {
		{
			p.SetState(4870)
			p.Match(MySQLStatementParserENGINE)
		}
		p.SetState(4872)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(4871)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(4874)
			p.Identifier()
		}

	}

	return localctx
}

// IDropLogfileGroupContext is an interface to support dynamic dispatch.
type IDropLogfileGroupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropLogfileGroupContext differentiates from other interfaces.
	IsDropLogfileGroupContext()
}

type DropLogfileGroupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropLogfileGroupContext() *DropLogfileGroupContext {
	var p = new(DropLogfileGroupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_dropLogfileGroup
	return p
}

func (*DropLogfileGroupContext) IsDropLogfileGroupContext() {}

func NewDropLogfileGroupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropLogfileGroupContext {
	var p = new(DropLogfileGroupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_dropLogfileGroup

	return p
}

func (s *DropLogfileGroupContext) GetParser() antlr.Parser { return s.parser }

func (s *DropLogfileGroupContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDROP, 0)
}

func (s *DropLogfileGroupContext) LOGFILE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOGFILE, 0)
}

func (s *DropLogfileGroupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGROUP, 0)
}

func (s *DropLogfileGroupContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *DropLogfileGroupContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *DropLogfileGroupContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENGINE, 0)
}

func (s *DropLogfileGroupContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *DropLogfileGroupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropLogfileGroupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropLogfileGroupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDropLogfileGroup(s)
	}
}

func (s *DropLogfileGroupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDropLogfileGroup(s)
	}
}

func (s *DropLogfileGroupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDropLogfileGroup(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DropLogfileGroup() (localctx IDropLogfileGroupContext) {
	this := p
	_ = this

	localctx = NewDropLogfileGroupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 648, MySQLStatementParserRULE_dropLogfileGroup)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4877)
		p.Match(MySQLStatementParserDROP)
	}
	{
		p.SetState(4878)
		p.Match(MySQLStatementParserLOGFILE)
	}
	{
		p.SetState(4879)
		p.Match(MySQLStatementParserGROUP)
	}
	{
		p.SetState(4880)
		p.Identifier()
	}
	p.SetState(4886)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserENGINE {
		{
			p.SetState(4881)
			p.Match(MySQLStatementParserENGINE)
		}
		p.SetState(4883)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(4882)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(4885)
			p.Identifier()
		}

	}

	return localctx
}

// ICreateTriggerContext is an interface to support dynamic dispatch.
type ICreateTriggerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateTriggerContext differentiates from other interfaces.
	IsCreateTriggerContext()
}

type CreateTriggerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateTriggerContext() *CreateTriggerContext {
	var p = new(CreateTriggerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_createTrigger
	return p
}

func (*CreateTriggerContext) IsCreateTriggerContext() {}

func NewCreateTriggerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateTriggerContext {
	var p = new(CreateTriggerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_createTrigger

	return p
}

func (s *CreateTriggerContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateTriggerContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *CreateTriggerContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTRIGGER, 0)
}

func (s *CreateTriggerContext) TriggerName() ITriggerNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITriggerNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITriggerNameContext)
}

func (s *CreateTriggerContext) TriggerTime() ITriggerTimeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITriggerTimeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITriggerTimeContext)
}

func (s *CreateTriggerContext) TriggerEvent() ITriggerEventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITriggerEventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITriggerEventContext)
}

func (s *CreateTriggerContext) ON() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserON, 0)
}

func (s *CreateTriggerContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *CreateTriggerContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOR, 0)
}

func (s *CreateTriggerContext) EACH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEACH, 0)
}

func (s *CreateTriggerContext) ROW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROW, 0)
}

func (s *CreateTriggerContext) RoutineBody() IRoutineBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoutineBodyContext)
}

func (s *CreateTriggerContext) OwnerStatement() IOwnerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwnerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwnerStatementContext)
}

func (s *CreateTriggerContext) TriggerOrder() ITriggerOrderContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITriggerOrderContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITriggerOrderContext)
}

func (s *CreateTriggerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateTriggerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateTriggerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateTrigger(s)
	}
}

func (s *CreateTriggerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateTrigger(s)
	}
}

func (s *CreateTriggerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateTrigger(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CreateTrigger() (localctx ICreateTriggerContext) {
	this := p
	_ = this

	localctx = NewCreateTriggerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 650, MySQLStatementParserRULE_createTrigger)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4888)
		p.Match(MySQLStatementParserCREATE)
	}
	p.SetState(4890)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserDEFINER {
		{
			p.SetState(4889)
			p.OwnerStatement()
		}

	}
	{
		p.SetState(4892)
		p.Match(MySQLStatementParserTRIGGER)
	}
	{
		p.SetState(4893)
		p.TriggerName()
	}
	{
		p.SetState(4894)
		p.TriggerTime()
	}
	{
		p.SetState(4895)
		p.TriggerEvent()
	}
	{
		p.SetState(4896)
		p.Match(MySQLStatementParserON)
	}
	{
		p.SetState(4897)
		p.TableName()
	}
	{
		p.SetState(4898)
		p.Match(MySQLStatementParserFOR)
	}
	{
		p.SetState(4899)
		p.Match(MySQLStatementParserEACH)
	}
	{
		p.SetState(4900)
		p.Match(MySQLStatementParserROW)
	}
	p.SetState(4902)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 602, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4901)
			p.TriggerOrder()
		}

	}
	{
		p.SetState(4904)
		p.RoutineBody()
	}

	return localctx
}

// IDropTriggerContext is an interface to support dynamic dispatch.
type IDropTriggerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropTriggerContext differentiates from other interfaces.
	IsDropTriggerContext()
}

type DropTriggerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropTriggerContext() *DropTriggerContext {
	var p = new(DropTriggerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_dropTrigger
	return p
}

func (*DropTriggerContext) IsDropTriggerContext() {}

func NewDropTriggerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropTriggerContext {
	var p = new(DropTriggerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_dropTrigger

	return p
}

func (s *DropTriggerContext) GetParser() antlr.Parser { return s.parser }

func (s *DropTriggerContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDROP, 0)
}

func (s *DropTriggerContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTRIGGER, 0)
}

func (s *DropTriggerContext) TriggerName() ITriggerNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITriggerNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITriggerNameContext)
}

func (s *DropTriggerContext) ExistClause() IExistClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExistClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExistClauseContext)
}

func (s *DropTriggerContext) SchemaName() ISchemaNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemaNameContext)
}

func (s *DropTriggerContext) DOT_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDOT_, 0)
}

func (s *DropTriggerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropTriggerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropTriggerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDropTrigger(s)
	}
}

func (s *DropTriggerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDropTrigger(s)
	}
}

func (s *DropTriggerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDropTrigger(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DropTrigger() (localctx IDropTriggerContext) {
	this := p
	_ = this

	localctx = NewDropTriggerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 652, MySQLStatementParserRULE_dropTrigger)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4906)
		p.Match(MySQLStatementParserDROP)
	}
	{
		p.SetState(4907)
		p.Match(MySQLStatementParserTRIGGER)
	}
	p.SetState(4909)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIF {
		{
			p.SetState(4908)
			p.ExistClause()
		}

	}
	p.SetState(4914)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 604, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4911)
			p.SchemaName()
		}
		{
			p.SetState(4912)
			p.Match(MySQLStatementParserDOT_)
		}

	}
	{
		p.SetState(4916)
		p.TriggerName()
	}

	return localctx
}

// IRenameTableContext is an interface to support dynamic dispatch.
type IRenameTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRenameTableContext differentiates from other interfaces.
	IsRenameTableContext()
}

type RenameTableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRenameTableContext() *RenameTableContext {
	var p = new(RenameTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_renameTable
	return p
}

func (*RenameTableContext) IsRenameTableContext() {}

func NewRenameTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RenameTableContext {
	var p = new(RenameTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_renameTable

	return p
}

func (s *RenameTableContext) GetParser() antlr.Parser { return s.parser }

func (s *RenameTableContext) RENAME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRENAME, 0)
}

func (s *RenameTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLE, 0)
}

func (s *RenameTableContext) AllTableName() []ITableNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableNameContext)(nil)).Elem())
	var tst = make([]ITableNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableNameContext)
		}
	}

	return tst
}

func (s *RenameTableContext) TableName(i int) ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *RenameTableContext) AllTO() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserTO)
}

func (s *RenameTableContext) TO(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTO, i)
}

func (s *RenameTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RenameTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RenameTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterRenameTable(s)
	}
}

func (s *RenameTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitRenameTable(s)
	}
}

func (s *RenameTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitRenameTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) RenameTable() (localctx IRenameTableContext) {
	this := p
	_ = this

	localctx = NewRenameTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 654, MySQLStatementParserRULE_renameTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4918)
		p.Match(MySQLStatementParserRENAME)
	}
	{
		p.SetState(4919)
		p.Match(MySQLStatementParserTABLE)
	}
	{
		p.SetState(4920)
		p.TableName()
	}
	{
		p.SetState(4921)
		p.Match(MySQLStatementParserTO)
	}
	{
		p.SetState(4922)
		p.TableName()
	}
	p.SetState(4929)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49))|(1<<(MySQLStatementParserGROUP_CONCAT-49))|(1<<(MySQLStatementParserCAST-49))|(1<<(MySQLStatementParserPOSITION-49))|(1<<(MySQLStatementParserSUBSTRING-49))|(1<<(MySQLStatementParserSUBSTR-49))|(1<<(MySQLStatementParserEXTRACT-49))|(1<<(MySQLStatementParserTRIM-49))|(1<<(MySQLStatementParserLAST_DAY-49))|(1<<(MySQLStatementParserTRADITIONAL-49))|(1<<(MySQLStatementParserTREE-49))|(1<<(MySQLStatementParserMYSQL_ADMIN-49))|(1<<(MySQLStatementParserINSTANT-49))|(1<<(MySQLStatementParserINPLACE-49))|(1<<(MySQLStatementParserCOPY-49))|(1<<(MySQLStatementParserUL_BINARY-49))|(1<<(MySQLStatementParserAUTOCOMMIT-49))|(1<<(MySQLStatementParserINNODB-49))|(1<<(MySQLStatementParserREDO_LOG-49))|(1<<(MySQLStatementParserACCOUNT-49))|(1<<(MySQLStatementParserACTION-49))|(1<<(MySQLStatementParserACTIVE-49))|(1<<(MySQLStatementParserADMIN-49))|(1<<(MySQLStatementParserAFTER-49))|(1<<(MySQLStatementParserAGAINST-49)))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(MySQLStatementParserAGGREGATE-81))|(1<<(MySQLStatementParserALGORITHM-81))|(1<<(MySQLStatementParserALWAYS-81))|(1<<(MySQLStatementParserANY-81))|(1<<(MySQLStatementParserARRAY-81))|(1<<(MySQLStatementParserASCII-81))|(1<<(MySQLStatementParserAT-81))|(1<<(MySQLStatementParserATTRIBUTE-81))|(1<<(MySQLStatementParserAUTOEXTEND_SIZE-81))|(1<<(MySQLStatementParserAUTO_INCREMENT-81))|(1<<(MySQLStatementParserAVG-81))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-81))|(1<<(MySQLStatementParserBACKUP-81))|(1<<(MySQLStatementParserBEGIN-81))|(1<<(MySQLStatementParserBINLOG-81))|(1<<(MySQLStatementParserBIT-81))|(1<<(MySQLStatementParserBLOCK-81))|(1<<(MySQLStatementParserBOOL-81))|(1<<(MySQLStatementParserBOOLEAN-81)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(MySQLStatementParserBTREE-114))|(1<<(MySQLStatementParserBUCKETS-114))|(1<<(MySQLStatementParserBYTE-114))|(1<<(MySQLStatementParserCACHE-114))|(1<<(MySQLStatementParserCASCADED-114))|(1<<(MySQLStatementParserCATALOG_NAME-114))|(1<<(MySQLStatementParserCHAIN-114))|(1<<(MySQLStatementParserCHANGED-114))|(1<<(MySQLStatementParserCHANNEL-114))|(1<<(MySQLStatementParserCHARSET-114))|(1<<(MySQLStatementParserCHECKSUM-114))|(1<<(MySQLStatementParserCIPHER-114))|(1<<(MySQLStatementParserCLASS_ORIGIN-114))|(1<<(MySQLStatementParserCLIENT-114))|(1<<(MySQLStatementParserCLONE-114))|(1<<(MySQLStatementParserCLOSE-114))|(1<<(MySQLStatementParserCOALESCE-114))|(1<<(MySQLStatementParserCODE-114))|(1<<(MySQLStatementParserCOLLATION-114))|(1<<(MySQLStatementParserCOLUMNS-114))|(1<<(MySQLStatementParserCOLUMN_FORMAT-114))|(1<<(MySQLStatementParserCOLUMN_NAME-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(MySQLStatementParserCOMMENT-146))|(1<<(MySQLStatementParserCOMMIT-146))|(1<<(MySQLStatementParserCOMMITTED-146))|(1<<(MySQLStatementParserCOMPACT-146))|(1<<(MySQLStatementParserCOMPLETION-146))|(1<<(MySQLStatementParserCOMPONENT-146))|(1<<(MySQLStatementParserCOMPRESSED-146))|(1<<(MySQLStatementParserCOMPRESSION-146))|(1<<(MySQLStatementParserCONCURRENT-146))|(1<<(MySQLStatementParserCONNECTION-146))|(1<<(MySQLStatementParserCONSISTENT-146))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-146))|(1<<(MySQLStatementParserCONSTRAINT_NAME-146))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-146))|(1<<(MySQLStatementParserCONTAINS-146))|(1<<(MySQLStatementParserCONTEXT-146))|(1<<(MySQLStatementParserCPU-146))|(1<<(MySQLStatementParserCURRENT-146))|(1<<(MySQLStatementParserCURSOR_NAME-146)))) != 0) || (((_la-178)&-(0x1f+1)) == 0 && ((1<<uint((_la-178)))&((1<<(MySQLStatementParserDATA-178))|(1<<(MySQLStatementParserDATAFILE-178))|(1<<(MySQLStatementParserDATE-178))|(1<<(MySQLStatementParserDATETIME-178))|(1<<(MySQLStatementParserDAY-178))|(1<<(MySQLStatementParserDEALLOCATE-178))|(1<<(MySQLStatementParserDEFAULT_AUTH-178))|(1<<(MySQLStatementParserDEFINER-178))|(1<<(MySQLStatementParserDEFINITION-178))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-178))|(1<<(MySQLStatementParserDESCRIPTION-178))|(1<<(MySQLStatementParserDIAGNOSTICS-178))|(1<<(MySQLStatementParserDIRECTORY-178))|(1<<(MySQLStatementParserDISABLE-178))|(1<<(MySQLStatementParserDISCARD-178))|(1<<(MySQLStatementParserDISK-178)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(MySQLStatementParserDO-213))|(1<<(MySQLStatementParserDUMPFILE-213))|(1<<(MySQLStatementParserDUPLICATE-213))|(1<<(MySQLStatementParserDYNAMIC-213))|(1<<(MySQLStatementParserENABLE-213))|(1<<(MySQLStatementParserENCRYPTION-213))|(1<<(MySQLStatementParserEND-213))|(1<<(MySQLStatementParserENDS-213))|(1<<(MySQLStatementParserENFORCED-213))|(1<<(MySQLStatementParserENGINE-213))|(1<<(MySQLStatementParserENGINES-213))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-213))|(1<<(MySQLStatementParserENUM-213))|(1<<(MySQLStatementParserERROR-213))|(1<<(MySQLStatementParserERRORS-213))|(1<<(MySQLStatementParserESCAPE-213))|(1<<(MySQLStatementParserEVENT-213))|(1<<(MySQLStatementParserEVENTS-213))|(1<<(MySQLStatementParserEVERY-213))|(1<<(MySQLStatementParserEXCHANGE-213))|(1<<(MySQLStatementParserEXCLUDE-213))|(1<<(MySQLStatementParserEXECUTE-213)))) != 0) || (((_la-247)&-(0x1f+1)) == 0 && ((1<<uint((_la-247)))&((1<<(MySQLStatementParserEXPANSION-247))|(1<<(MySQLStatementParserEXPIRE-247))|(1<<(MySQLStatementParserEXPORT-247))|(1<<(MySQLStatementParserEXTENDED-247))|(1<<(MySQLStatementParserEXTENT_SIZE-247))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-247))|(1<<(MySQLStatementParserFAST-247))|(1<<(MySQLStatementParserFAULTS-247))|(1<<(MySQLStatementParserFILE-247))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-247))|(1<<(MySQLStatementParserFILTER-247))|(1<<(MySQLStatementParserFIRST-247))|(1<<(MySQLStatementParserFIXED-247))|(1<<(MySQLStatementParserFLUSH-247))|(1<<(MySQLStatementParserFOLLOWING-247))|(1<<(MySQLStatementParserFOLLOWS-247))|(1<<(MySQLStatementParserFORMAT-247))|(1<<(MySQLStatementParserFOUND-247))|(1<<(MySQLStatementParserFULL-247)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(MySQLStatementParserGENERAL-279))|(1<<(MySQLStatementParserGEOMETRY-279))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-279))|(1<<(MySQLStatementParserGET_FORMAT-279))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-279))|(1<<(MySQLStatementParserGLOBAL-279))|(1<<(MySQLStatementParserGRANTS-279))|(1<<(MySQLStatementParserGROUP_REPLICATION-279))|(1<<(MySQLStatementParserHANDLER-279))|(1<<(MySQLStatementParserHASH-279))|(1<<(MySQLStatementParserHELP-279))|(1<<(MySQLStatementParserHISTOGRAM-279))|(1<<(MySQLStatementParserHISTORY-279))|(1<<(MySQLStatementParserHOST-279))|(1<<(MySQLStatementParserHOSTS-279))|(1<<(MySQLStatementParserHOUR-279))|(1<<(MySQLStatementParserIDENTIFIED-279))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-279))|(1<<(MySQLStatementParserIMPORT-279)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySQLStatementParserINACTIVE-312))|(1<<(MySQLStatementParserINDEXES-312))|(1<<(MySQLStatementParserINITIAL_SIZE-312))|(1<<(MySQLStatementParserINSERT_METHOD-312))|(1<<(MySQLStatementParserINSTALL-312))|(1<<(MySQLStatementParserINSTANCE-312))|(1<<(MySQLStatementParserINVISIBLE-312))|(1<<(MySQLStatementParserINVOKER-312))|(1<<(MySQLStatementParserIO-312))|(1<<(MySQLStatementParserIPC-312))|(1<<(MySQLStatementParserISOLATION-312))|(1<<(MySQLStatementParserISSUER-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySQLStatementParserJSON-344))|(1<<(MySQLStatementParserJSON_VALUE-344))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-344))|(1<<(MySQLStatementParserLANGUAGE-344))|(1<<(MySQLStatementParserLAST-344))|(1<<(MySQLStatementParserLAST_VALUE-344))|(1<<(MySQLStatementParserLEAVES-344))|(1<<(MySQLStatementParserLESS-344))|(1<<(MySQLStatementParserLEVEL-344))|(1<<(MySQLStatementParserLINESTRING-344))|(1<<(MySQLStatementParserLIST-344))|(1<<(MySQLStatementParserLOCAL-344))|(1<<(MySQLStatementParserLOCKED-344))|(1<<(MySQLStatementParserLOCKS-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySQLStatementParserLOGFILE-376))|(1<<(MySQLStatementParserLOGS-376))|(1<<(MySQLStatementParserMASTER-376))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-376))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-376))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-376))|(1<<(MySQLStatementParserMASTER_DELAY-376))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-376))|(1<<(MySQLStatementParserMASTER_HOST-376))|(1<<(MySQLStatementParserMASTER_LOG_FILE-376))|(1<<(MySQLStatementParserMASTER_LOG_POS-376))|(1<<(MySQLStatementParserMASTER_PASSWORD-376))|(1<<(MySQLStatementParserMASTER_PORT-376))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-376))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-376))|(1<<(MySQLStatementParserMASTER_SERVER_ID-376))|(1<<(MySQLStatementParserMASTER_SSL-376))|(1<<(MySQLStatementParserMASTER_SSL_CA-376))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_CERT-376))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-376))|(1<<(MySQLStatementParserMASTER_SSL_CRL-376))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_KEY-376))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySQLStatementParserMASTER_TLS_VERSION-408))|(1<<(MySQLStatementParserMASTER_USER-408))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-408))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_ROWS-408))|(1<<(MySQLStatementParserMAX_SIZE-408))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-408))|(1<<(MySQLStatementParserMEDIUM-408))|(1<<(MySQLStatementParserMEMBER-408))|(1<<(MySQLStatementParserMEMORY-408))|(1<<(MySQLStatementParserMERGE-408))|(1<<(MySQLStatementParserMESSAGE_TEXT-408))|(1<<(MySQLStatementParserMICROSECOND-408))|(1<<(MySQLStatementParserMIGRATE-408))|(1<<(MySQLStatementParserMINUTE-408))|(1<<(MySQLStatementParserMIN_ROWS-408))|(1<<(MySQLStatementParserMODE-408))|(1<<(MySQLStatementParserMODIFY-408))|(1<<(MySQLStatementParserMONTH-408))|(1<<(MySQLStatementParserMULTILINESTRING-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySQLStatementParserMULTIPOINT-440))|(1<<(MySQLStatementParserMULTIPOLYGON-440))|(1<<(MySQLStatementParserMUTEX-440))|(1<<(MySQLStatementParserMYSQL_ERRNO-440))|(1<<(MySQLStatementParserNAME-440))|(1<<(MySQLStatementParserNAMES-440))|(1<<(MySQLStatementParserNATIONAL-440))|(1<<(MySQLStatementParserNCHAR-440))|(1<<(MySQLStatementParserNDBCLUSTER-440))|(1<<(MySQLStatementParserNESTED-440))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-440))|(1<<(MySQLStatementParserNEVER-440))|(1<<(MySQLStatementParserNEW-440))|(1<<(MySQLStatementParserNEXT-440))|(1<<(MySQLStatementParserNO-440))|(1<<(MySQLStatementParserNODEGROUP-440))|(1<<(MySQLStatementParserNONE-440))|(1<<(MySQLStatementParserNOWAIT-440))|(1<<(MySQLStatementParserNO_WAIT-440))|(1<<(MySQLStatementParserNULLS-440))|(1<<(MySQLStatementParserNUMBER-440))|(1<<(MySQLStatementParserNVARCHAR-440))|(1<<(MySQLStatementParserOFF-440))|(1<<(MySQLStatementParserOFFSET-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySQLStatementParserOJ-472))|(1<<(MySQLStatementParserOLD-472))|(1<<(MySQLStatementParserONE-472))|(1<<(MySQLStatementParserONLY-472))|(1<<(MySQLStatementParserOPEN-472))|(1<<(MySQLStatementParserOPTIONAL-472))|(1<<(MySQLStatementParserOPTIONS-472))|(1<<(MySQLStatementParserORDINALITY-472))|(1<<(MySQLStatementParserORGANIZATION-472))|(1<<(MySQLStatementParserOTHERS-472))|(1<<(MySQLStatementParserOWNER-472))|(1<<(MySQLStatementParserPACK_KEYS-472))|(1<<(MySQLStatementParserPAGE-472))|(1<<(MySQLStatementParserPARSER-472))|(1<<(MySQLStatementParserPARTIAL-472))|(1<<(MySQLStatementParserPARTITIONING-472))|(1<<(MySQLStatementParserPARTITIONS-472))|(1<<(MySQLStatementParserPASSWORD-472))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-472))|(1<<(MySQLStatementParserPATH-472)))) != 0) || (((_la-505)&-(0x1f+1)) == 0 && ((1<<uint((_la-505)))&((1<<(MySQLStatementParserPERSIST-505))|(1<<(MySQLStatementParserPERSIST_ONLY-505))|(1<<(MySQLStatementParserPHASE-505))|(1<<(MySQLStatementParserPLUGIN-505))|(1<<(MySQLStatementParserPLUGINS-505))|(1<<(MySQLStatementParserPLUGIN_DIR-505))|(1<<(MySQLStatementParserPOINT-505))|(1<<(MySQLStatementParserPOLYGON-505))|(1<<(MySQLStatementParserPORT-505))|(1<<(MySQLStatementParserPRECEDES-505))|(1<<(MySQLStatementParserPRECEDING-505))|(1<<(MySQLStatementParserPREPARE-505))|(1<<(MySQLStatementParserPRESERVE-505))|(1<<(MySQLStatementParserPREV-505))|(1<<(MySQLStatementParserPRIVILEGES-505))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-505))|(1<<(MySQLStatementParserPROCESS-505))|(1<<(MySQLStatementParserPROCESSLIST-505))|(1<<(MySQLStatementParserPROFILE-505))|(1<<(MySQLStatementParserPROFILES-505))|(1<<(MySQLStatementParserPROXY-505))|(1<<(MySQLStatementParserQUARTER-505))|(1<<(MySQLStatementParserQUERY-505))|(1<<(MySQLStatementParserQUICK-505))|(1<<(MySQLStatementParserRANDOM-505)))) != 0) || (((_la-538)&-(0x1f+1)) == 0 && ((1<<uint((_la-538)))&((1<<(MySQLStatementParserREAD_ONLY-538))|(1<<(MySQLStatementParserREBUILD-538))|(1<<(MySQLStatementParserRECOVER-538))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-538))|(1<<(MySQLStatementParserREDUNDANT-538))|(1<<(MySQLStatementParserREFERENCE-538))|(1<<(MySQLStatementParserRELAY-538))|(1<<(MySQLStatementParserRELAYLOG-538))|(1<<(MySQLStatementParserRELAY_LOG_FILE-538))|(1<<(MySQLStatementParserRELAY_LOG_POS-538))|(1<<(MySQLStatementParserRELAY_THREAD-538))|(1<<(MySQLStatementParserRELOAD-538))|(1<<(MySQLStatementParserREMOVE-538))|(1<<(MySQLStatementParserREORGANIZE-538))|(1<<(MySQLStatementParserREPAIR-538))|(1<<(MySQLStatementParserREPEATABLE-538))|(1<<(MySQLStatementParserREPLICATE_DO_DB-538))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-538)))) != 0) || (((_la-570)&-(0x1f+1)) == 0 && ((1<<uint((_la-570)))&((1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-570))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-570))|(1<<(MySQLStatementParserREPLICATION-570))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-570))|(1<<(MySQLStatementParserRESET-570))|(1<<(MySQLStatementParserRESOURCE-570))|(1<<(MySQLStatementParserRESPECT-570))|(1<<(MySQLStatementParserRESTART-570))|(1<<(MySQLStatementParserRESTORE-570))|(1<<(MySQLStatementParserRESUME-570))|(1<<(MySQLStatementParserRETAIN-570))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-570))|(1<<(MySQLStatementParserRETURNING-570))|(1<<(MySQLStatementParserRETURNS-570))|(1<<(MySQLStatementParserREUSE-570))|(1<<(MySQLStatementParserREVERSE-570))|(1<<(MySQLStatementParserROLE-570))|(1<<(MySQLStatementParserROLLBACK-570))|(1<<(MySQLStatementParserROLLUP-570))|(1<<(MySQLStatementParserROTATE-570))|(1<<(MySQLStatementParserROUTINE-570))|(1<<(MySQLStatementParserROW_COUNT-570))|(1<<(MySQLStatementParserROW_FORMAT-570)))) != 0) || (((_la-603)&-(0x1f+1)) == 0 && ((1<<uint((_la-603)))&((1<<(MySQLStatementParserRTREE-603))|(1<<(MySQLStatementParserSAVEPOINT-603))|(1<<(MySQLStatementParserSCHEDULE-603))|(1<<(MySQLStatementParserSCHEMA_NAME-603))|(1<<(MySQLStatementParserSECOND-603))|(1<<(MySQLStatementParserSECONDARY-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-603))|(1<<(MySQLStatementParserSECONDARY_LOAD-603))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-603))|(1<<(MySQLStatementParserSECURITY-603))|(1<<(MySQLStatementParserSERIAL-603))|(1<<(MySQLStatementParserSERIALIZABLE-603))|(1<<(MySQLStatementParserSERVER-603))|(1<<(MySQLStatementParserSESSION-603))|(1<<(MySQLStatementParserSHARE-603))|(1<<(MySQLStatementParserSHUTDOWN-603))|(1<<(MySQLStatementParserSIGNED-603))|(1<<(MySQLStatementParserSIMPLE-603))|(1<<(MySQLStatementParserSLAVE-603))|(1<<(MySQLStatementParserSLOW-603)))) != 0) || (((_la-635)&-(0x1f+1)) == 0 && ((1<<uint((_la-635)))&((1<<(MySQLStatementParserSNAPSHOT-635))|(1<<(MySQLStatementParserSOCKET-635))|(1<<(MySQLStatementParserSONAME-635))|(1<<(MySQLStatementParserSOUNDS-635))|(1<<(MySQLStatementParserSOURCE-635))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-635))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-635))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-635))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-635))|(1<<(MySQLStatementParserSQL_NO_CACHE-635))|(1<<(MySQLStatementParserSQL_THREAD-635))|(1<<(MySQLStatementParserSRID-635))|(1<<(MySQLStatementParserSTACKED-635))|(1<<(MySQLStatementParserSTART-635))|(1<<(MySQLStatementParserSTARTS-635))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-635))|(1<<(MySQLStatementParserSTATS_PERSISTENT-635))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-635))|(1<<(MySQLStatementParserSTATUS-635))|(1<<(MySQLStatementParserSTOP-635))|(1<<(MySQLStatementParserSTORAGE-635)))) != 0) || (((_la-669)&-(0x1f+1)) == 0 && ((1<<uint((_la-669)))&((1<<(MySQLStatementParserSTREAM-669))|(1<<(MySQLStatementParserSTRING-669))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-669))|(1<<(MySQLStatementParserSUBJECT-669))|(1<<(MySQLStatementParserSUBPARTITION-669))|(1<<(MySQLStatementParserSUBPARTITIONS-669))|(1<<(MySQLStatementParserSUPER-669))|(1<<(MySQLStatementParserSUSPEND-669))|(1<<(MySQLStatementParserSWAPS-669))|(1<<(MySQLStatementParserSWITCHES-669))|(1<<(MySQLStatementParserTABLES-669))|(1<<(MySQLStatementParserTABLESPACE-669))|(1<<(MySQLStatementParserTABLE_CHECKSUM-669))|(1<<(MySQLStatementParserTABLE_NAME-669))|(1<<(MySQLStatementParserTEMPORARY-669))|(1<<(MySQLStatementParserTEMPTABLE-669))|(1<<(MySQLStatementParserTEXT-669))|(1<<(MySQLStatementParserTHAN-669))|(1<<(MySQLStatementParserTHREAD_PRIORITY-669))|(1<<(MySQLStatementParserTIES-669))|(1<<(MySQLStatementParserTIME-669))|(1<<(MySQLStatementParserTIMESTAMP-669))|(1<<(MySQLStatementParserTIMESTAMP_ADD-669))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-669))|(1<<(MySQLStatementParserTLS-669)))) != 0) || (((_la-703)&-(0x1f+1)) == 0 && ((1<<uint((_la-703)))&((1<<(MySQLStatementParserTRANSACTION-703))|(1<<(MySQLStatementParserTRIGGERS-703))|(1<<(MySQLStatementParserTRUNCATE-703))|(1<<(MySQLStatementParserTYPE-703))|(1<<(MySQLStatementParserTYPES-703))|(1<<(MySQLStatementParserUNBOUNDED-703))|(1<<(MySQLStatementParserUNCOMMITTED-703))|(1<<(MySQLStatementParserUNDEFINED-703))|(1<<(MySQLStatementParserUNDOFILE-703))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-703))|(1<<(MySQLStatementParserUNICODE-703))|(1<<(MySQLStatementParserUNINSTALL-703))|(1<<(MySQLStatementParserUNKNOWN-703))|(1<<(MySQLStatementParserUNTIL-703))|(1<<(MySQLStatementParserUPGRADE-703))|(1<<(MySQLStatementParserUSER-703))|(1<<(MySQLStatementParserUSER_RESOURCES-703))|(1<<(MySQLStatementParserUSE_FRM-703)))) != 0) || (((_la-735)&-(0x1f+1)) == 0 && ((1<<uint((_la-735)))&((1<<(MySQLStatementParserVALIDATION-735))|(1<<(MySQLStatementParserVALUE-735))|(1<<(MySQLStatementParserVARIABLES-735))|(1<<(MySQLStatementParserVCPU-735))|(1<<(MySQLStatementParserVIEW-735))|(1<<(MySQLStatementParserVISIBLE-735))|(1<<(MySQLStatementParserWAIT-735))|(1<<(MySQLStatementParserWARNINGS-735))|(1<<(MySQLStatementParserWEEK-735))|(1<<(MySQLStatementParserWEIGHT_STRING-735))|(1<<(MySQLStatementParserWITHOUT-735))|(1<<(MySQLStatementParserWORK-735))|(1<<(MySQLStatementParserWRAPPER-735))|(1<<(MySQLStatementParserX509-735))|(1<<(MySQLStatementParserXA-735))|(1<<(MySQLStatementParserXID-735))|(1<<(MySQLStatementParserXML-735))|(1<<(MySQLStatementParserYEAR-735)))) != 0) || _la == MySQLStatementParserIDENTIFIER_ || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
		{
			p.SetState(4923)
			p.TableName()
		}
		{
			p.SetState(4924)
			p.Match(MySQLStatementParserTO)
		}
		{
			p.SetState(4925)
			p.TableName()
		}

		p.SetState(4931)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICreateDefinitionClauseContext is an interface to support dynamic dispatch.
type ICreateDefinitionClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateDefinitionClauseContext differentiates from other interfaces.
	IsCreateDefinitionClauseContext()
}

type CreateDefinitionClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateDefinitionClauseContext() *CreateDefinitionClauseContext {
	var p = new(CreateDefinitionClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_createDefinitionClause
	return p
}

func (*CreateDefinitionClauseContext) IsCreateDefinitionClauseContext() {}

func NewCreateDefinitionClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateDefinitionClauseContext {
	var p = new(CreateDefinitionClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_createDefinitionClause

	return p
}

func (s *CreateDefinitionClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateDefinitionClauseContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *CreateDefinitionClauseContext) TableElementList() ITableElementListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableElementListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableElementListContext)
}

func (s *CreateDefinitionClauseContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *CreateDefinitionClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateDefinitionClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateDefinitionClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateDefinitionClause(s)
	}
}

func (s *CreateDefinitionClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateDefinitionClause(s)
	}
}

func (s *CreateDefinitionClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateDefinitionClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CreateDefinitionClause() (localctx ICreateDefinitionClauseContext) {
	this := p
	_ = this

	localctx = NewCreateDefinitionClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 656, MySQLStatementParserRULE_createDefinitionClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4932)
		p.Match(MySQLStatementParserLP_)
	}
	{
		p.SetState(4933)
		p.TableElementList()
	}
	{
		p.SetState(4934)
		p.Match(MySQLStatementParserRP_)
	}

	return localctx
}

// IColumnDefinitionContext is an interface to support dynamic dispatch.
type IColumnDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetColumn_name returns the column_name rule contexts.
	GetColumn_name() IIdentifierContext

	// SetColumn_name sets the column_name rule contexts.
	SetColumn_name(IIdentifierContext)

	// IsColumnDefinitionContext differentiates from other interfaces.
	IsColumnDefinitionContext()
}

type ColumnDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	column_name IIdentifierContext
}

func NewEmptyColumnDefinitionContext() *ColumnDefinitionContext {
	var p = new(ColumnDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_columnDefinition
	return p
}

func (*ColumnDefinitionContext) IsColumnDefinitionContext() {}

func NewColumnDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnDefinitionContext {
	var p = new(ColumnDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_columnDefinition

	return p
}

func (s *ColumnDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnDefinitionContext) GetColumn_name() IIdentifierContext { return s.column_name }

func (s *ColumnDefinitionContext) SetColumn_name(v IIdentifierContext) { s.column_name = v }

func (s *ColumnDefinitionContext) FieldDefinition() IFieldDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldDefinitionContext)
}

func (s *ColumnDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnDefinitionContext) ReferenceDefinition() IReferenceDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReferenceDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReferenceDefinitionContext)
}

func (s *ColumnDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterColumnDefinition(s)
	}
}

func (s *ColumnDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitColumnDefinition(s)
	}
}

func (s *ColumnDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitColumnDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ColumnDefinition() (localctx IColumnDefinitionContext) {
	this := p
	_ = this

	localctx = NewColumnDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 658, MySQLStatementParserRULE_columnDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4936)

		var _x = p.Identifier()

		localctx.(*ColumnDefinitionContext).column_name = _x
	}
	{
		p.SetState(4937)
		p.FieldDefinition()
	}
	p.SetState(4939)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserREFERENCES {
		{
			p.SetState(4938)
			p.ReferenceDefinition()
		}

	}

	return localctx
}

// IFieldDefinitionContext is an interface to support dynamic dispatch.
type IFieldDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetStoredAttribute returns the storedAttribute token.
	GetStoredAttribute() antlr.Token

	// SetStoredAttribute sets the storedAttribute token.
	SetStoredAttribute(antlr.Token)

	// IsFieldDefinitionContext differentiates from other interfaces.
	IsFieldDefinitionContext()
}

type FieldDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	storedAttribute antlr.Token
}

func NewEmptyFieldDefinitionContext() *FieldDefinitionContext {
	var p = new(FieldDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_fieldDefinition
	return p
}

func (*FieldDefinitionContext) IsFieldDefinitionContext() {}

func NewFieldDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldDefinitionContext {
	var p = new(FieldDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_fieldDefinition

	return p
}

func (s *FieldDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldDefinitionContext) GetStoredAttribute() antlr.Token { return s.storedAttribute }

func (s *FieldDefinitionContext) SetStoredAttribute(v antlr.Token) { s.storedAttribute = v }

func (s *FieldDefinitionContext) DataType() IDataTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDataTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *FieldDefinitionContext) AS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAS, 0)
}

func (s *FieldDefinitionContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *FieldDefinitionContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *FieldDefinitionContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *FieldDefinitionContext) AllColumnAttribute() []IColumnAttributeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumnAttributeContext)(nil)).Elem())
	var tst = make([]IColumnAttributeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumnAttributeContext)
		}
	}

	return tst
}

func (s *FieldDefinitionContext) ColumnAttribute(i int) IColumnAttributeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnAttributeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumnAttributeContext)
}

func (s *FieldDefinitionContext) CollateClause() ICollateClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollateClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollateClauseContext)
}

func (s *FieldDefinitionContext) GeneratedOption() IGeneratedOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratedOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratedOptionContext)
}

func (s *FieldDefinitionContext) VIRTUAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVIRTUAL, 0)
}

func (s *FieldDefinitionContext) STORED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTORED, 0)
}

func (s *FieldDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterFieldDefinition(s)
	}
}

func (s *FieldDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitFieldDefinition(s)
	}
}

func (s *FieldDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitFieldDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) FieldDefinition() (localctx IFieldDefinitionContext) {
	this := p
	_ = this

	localctx = NewFieldDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 660, MySQLStatementParserRULE_fieldDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4941)
		p.DataType()
	}
	p.SetState(4967)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 612, p.GetParserRuleContext()) {
	case 1:
		p.SetState(4945)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 607, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(4942)
					p.ColumnAttribute()
				}

			}
			p.SetState(4947)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 607, p.GetParserRuleContext())
		}

	case 2:
		p.SetState(4949)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserCOLLATE {
			{
				p.SetState(4948)
				p.CollateClause()
			}

		}
		p.SetState(4952)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserGENERATED {
			{
				p.SetState(4951)
				p.GeneratedOption()
			}

		}
		{
			p.SetState(4954)
			p.Match(MySQLStatementParserAS)
		}
		{
			p.SetState(4955)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(4956)
			p.expr(0)
		}
		{
			p.SetState(4957)
			p.Match(MySQLStatementParserRP_)
		}
		p.SetState(4959)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserSTORED || _la == MySQLStatementParserVIRTUAL {
			{
				p.SetState(4958)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*FieldDefinitionContext).storedAttribute = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySQLStatementParserSTORED || _la == MySQLStatementParserVIRTUAL) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*FieldDefinitionContext).storedAttribute = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(4964)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 611, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(4961)
					p.ColumnAttribute()
				}

			}
			p.SetState(4966)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 611, p.GetParserRuleContext())
		}

	}

	return localctx
}

// IColumnAttributeContext is an interface to support dynamic dispatch.
type IColumnAttributeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetValue returns the value token.
	GetValue() antlr.Token

	// SetValue sets the value token.
	SetValue(antlr.Token)

	// IsColumnAttributeContext differentiates from other interfaces.
	IsColumnAttributeContext()
}

type ColumnAttributeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	value  antlr.Token
}

func NewEmptyColumnAttributeContext() *ColumnAttributeContext {
	var p = new(ColumnAttributeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_columnAttribute
	return p
}

func (*ColumnAttributeContext) IsColumnAttributeContext() {}

func NewColumnAttributeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnAttributeContext {
	var p = new(ColumnAttributeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_columnAttribute

	return p
}

func (s *ColumnAttributeContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnAttributeContext) GetValue() antlr.Token { return s.value }

func (s *ColumnAttributeContext) SetValue(v antlr.Token) { s.value = v }

func (s *ColumnAttributeContext) NULL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNULL, 0)
}

func (s *ColumnAttributeContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNOT, 0)
}

func (s *ColumnAttributeContext) SECONDARY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSECONDARY, 0)
}

func (s *ColumnAttributeContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFAULT, 0)
}

func (s *ColumnAttributeContext) SignedLiteral() ISignedLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISignedLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISignedLiteralContext)
}

func (s *ColumnAttributeContext) Now() INowContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INowContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INowContext)
}

func (s *ColumnAttributeContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *ColumnAttributeContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ColumnAttributeContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *ColumnAttributeContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUPDATE, 0)
}

func (s *ColumnAttributeContext) ON() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserON, 0)
}

func (s *ColumnAttributeContext) AUTO_INCREMENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAUTO_INCREMENT, 0)
}

func (s *ColumnAttributeContext) VALUE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVALUE, 0)
}

func (s *ColumnAttributeContext) SERIAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSERIAL, 0)
}

func (s *ColumnAttributeContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserKEY, 0)
}

func (s *ColumnAttributeContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPRIMARY, 0)
}

func (s *ColumnAttributeContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNIQUE, 0)
}

func (s *ColumnAttributeContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *ColumnAttributeContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMENT, 0)
}

func (s *ColumnAttributeContext) CollateClause() ICollateClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollateClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollateClauseContext)
}

func (s *ColumnAttributeContext) ColumnFormat() IColumnFormatContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnFormatContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnFormatContext)
}

func (s *ColumnAttributeContext) COLUMN_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOLUMN_FORMAT, 0)
}

func (s *ColumnAttributeContext) StorageMedia() IStorageMediaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorageMediaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorageMediaContext)
}

func (s *ColumnAttributeContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTORAGE, 0)
}

func (s *ColumnAttributeContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *ColumnAttributeContext) SRID() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSRID, 0)
}

func (s *ColumnAttributeContext) CheckConstraint() ICheckConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckConstraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICheckConstraintContext)
}

func (s *ColumnAttributeContext) ConstraintClause() IConstraintClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraintClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstraintClauseContext)
}

func (s *ColumnAttributeContext) ConstraintEnforcement() IConstraintEnforcementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraintEnforcementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstraintEnforcementContext)
}

func (s *ColumnAttributeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnAttributeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnAttributeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterColumnAttribute(s)
	}
}

func (s *ColumnAttributeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitColumnAttribute(s)
	}
}

func (s *ColumnAttributeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitColumnAttribute(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ColumnAttribute() (localctx IColumnAttributeContext) {
	this := p
	_ = this

	localctx = NewColumnAttributeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 662, MySQLStatementParserRULE_columnAttribute)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5013)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 618, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(4970)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserNOT {
			{
				p.SetState(4969)
				p.Match(MySQLStatementParserNOT)
			}

		}
		{
			p.SetState(4972)
			p.Match(MySQLStatementParserNULL)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4973)
			p.Match(MySQLStatementParserNOT)
		}
		{
			p.SetState(4974)
			p.Match(MySQLStatementParserSECONDARY)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4975)

			var _m = p.Match(MySQLStatementParserDEFAULT)

			localctx.(*ColumnAttributeContext).value = _m
		}
		p.SetState(4982)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySQLStatementParserPLUS_, MySQLStatementParserMINUS_, MySQLStatementParserDATE, MySQLStatementParserFALSE, MySQLStatementParserNULL, MySQLStatementParserTIME, MySQLStatementParserTIMESTAMP, MySQLStatementParserTRUE, MySQLStatementParserSINGLE_QUOTED_TEXT, MySQLStatementParserDOUBLE_QUOTED_TEXT, MySQLStatementParserNCHAR_TEXT, MySQLStatementParserUNDERSCORE_CHARSET, MySQLStatementParserNUMBER_, MySQLStatementParserHEX_DIGIT_, MySQLStatementParserBIT_NUM_:
			{
				p.SetState(4976)
				p.SignedLiteral()
			}

		case MySQLStatementParserCURRENT_TIMESTAMP, MySQLStatementParserLOCALTIME, MySQLStatementParserLOCALTIMESTAMP:
			{
				p.SetState(4977)
				p.Now()
			}

		case MySQLStatementParserLP_:
			{
				p.SetState(4978)
				p.Match(MySQLStatementParserLP_)
			}
			{
				p.SetState(4979)
				p.expr(0)
			}
			{
				p.SetState(4980)
				p.Match(MySQLStatementParserRP_)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4984)

			var _m = p.Match(MySQLStatementParserON)

			localctx.(*ColumnAttributeContext).value = _m
		}
		{
			p.SetState(4985)
			p.Match(MySQLStatementParserUPDATE)
		}
		{
			p.SetState(4986)
			p.Now()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4987)

			var _m = p.Match(MySQLStatementParserAUTO_INCREMENT)

			localctx.(*ColumnAttributeContext).value = _m
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4988)

			var _m = p.Match(MySQLStatementParserSERIAL)

			localctx.(*ColumnAttributeContext).value = _m
		}
		{
			p.SetState(4989)
			p.Match(MySQLStatementParserDEFAULT)
		}
		{
			p.SetState(4990)
			p.Match(MySQLStatementParserVALUE)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		p.SetState(4992)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserPRIMARY {
			{
				p.SetState(4991)
				p.Match(MySQLStatementParserPRIMARY)
			}

		}
		{
			p.SetState(4994)

			var _m = p.Match(MySQLStatementParserKEY)

			localctx.(*ColumnAttributeContext).value = _m
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(4995)

			var _m = p.Match(MySQLStatementParserUNIQUE)

			localctx.(*ColumnAttributeContext).value = _m
		}
		p.SetState(4997)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 616, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4996)
				p.Match(MySQLStatementParserKEY)
			}

		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(4999)

			var _m = p.Match(MySQLStatementParserCOMMENT)

			localctx.(*ColumnAttributeContext).value = _m
		}
		{
			p.SetState(5000)
			p.String_()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(5001)
			p.CollateClause()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(5002)

			var _m = p.Match(MySQLStatementParserCOLUMN_FORMAT)

			localctx.(*ColumnAttributeContext).value = _m
		}
		{
			p.SetState(5003)
			p.ColumnFormat()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(5004)

			var _m = p.Match(MySQLStatementParserSTORAGE)

			localctx.(*ColumnAttributeContext).value = _m
		}
		{
			p.SetState(5005)
			p.StorageMedia()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(5006)

			var _m = p.Match(MySQLStatementParserSRID)

			localctx.(*ColumnAttributeContext).value = _m
		}
		{
			p.SetState(5007)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		p.SetState(5009)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserCONSTRAINT {
			{
				p.SetState(5008)
				p.ConstraintClause()
			}

		}
		{
			p.SetState(5011)
			p.CheckConstraint()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(5012)
			p.ConstraintEnforcement()
		}

	}

	return localctx
}

// ICheckConstraintContext is an interface to support dynamic dispatch.
type ICheckConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheckConstraintContext differentiates from other interfaces.
	IsCheckConstraintContext()
}

type CheckConstraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheckConstraintContext() *CheckConstraintContext {
	var p = new(CheckConstraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_checkConstraint
	return p
}

func (*CheckConstraintContext) IsCheckConstraintContext() {}

func NewCheckConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CheckConstraintContext {
	var p = new(CheckConstraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_checkConstraint

	return p
}

func (s *CheckConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *CheckConstraintContext) CHECK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHECK, 0)
}

func (s *CheckConstraintContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *CheckConstraintContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *CheckConstraintContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *CheckConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CheckConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCheckConstraint(s)
	}
}

func (s *CheckConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCheckConstraint(s)
	}
}

func (s *CheckConstraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCheckConstraint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CheckConstraint() (localctx ICheckConstraintContext) {
	this := p
	_ = this

	localctx = NewCheckConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 664, MySQLStatementParserRULE_checkConstraint)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5015)
		p.Match(MySQLStatementParserCHECK)
	}
	{
		p.SetState(5016)
		p.Match(MySQLStatementParserLP_)
	}
	{
		p.SetState(5017)
		p.expr(0)
	}
	{
		p.SetState(5018)
		p.Match(MySQLStatementParserRP_)
	}

	return localctx
}

// IConstraintEnforcementContext is an interface to support dynamic dispatch.
type IConstraintEnforcementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstraintEnforcementContext differentiates from other interfaces.
	IsConstraintEnforcementContext()
}

type ConstraintEnforcementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstraintEnforcementContext() *ConstraintEnforcementContext {
	var p = new(ConstraintEnforcementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_constraintEnforcement
	return p
}

func (*ConstraintEnforcementContext) IsConstraintEnforcementContext() {}

func NewConstraintEnforcementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstraintEnforcementContext {
	var p = new(ConstraintEnforcementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_constraintEnforcement

	return p
}

func (s *ConstraintEnforcementContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstraintEnforcementContext) ENFORCED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENFORCED, 0)
}

func (s *ConstraintEnforcementContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNOT, 0)
}

func (s *ConstraintEnforcementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstraintEnforcementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstraintEnforcementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterConstraintEnforcement(s)
	}
}

func (s *ConstraintEnforcementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitConstraintEnforcement(s)
	}
}

func (s *ConstraintEnforcementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitConstraintEnforcement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ConstraintEnforcement() (localctx IConstraintEnforcementContext) {
	this := p
	_ = this

	localctx = NewConstraintEnforcementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 666, MySQLStatementParserRULE_constraintEnforcement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5021)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserNOT {
		{
			p.SetState(5020)
			p.Match(MySQLStatementParserNOT)
		}

	}
	{
		p.SetState(5023)
		p.Match(MySQLStatementParserENFORCED)
	}

	return localctx
}

// IGeneratedOptionContext is an interface to support dynamic dispatch.
type IGeneratedOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGeneratedOptionContext differentiates from other interfaces.
	IsGeneratedOptionContext()
}

type GeneratedOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneratedOptionContext() *GeneratedOptionContext {
	var p = new(GeneratedOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_generatedOption
	return p
}

func (*GeneratedOptionContext) IsGeneratedOptionContext() {}

func NewGeneratedOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GeneratedOptionContext {
	var p = new(GeneratedOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_generatedOption

	return p
}

func (s *GeneratedOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *GeneratedOptionContext) GENERATED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGENERATED, 0)
}

func (s *GeneratedOptionContext) ALWAYS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALWAYS, 0)
}

func (s *GeneratedOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GeneratedOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GeneratedOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterGeneratedOption(s)
	}
}

func (s *GeneratedOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitGeneratedOption(s)
	}
}

func (s *GeneratedOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitGeneratedOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) GeneratedOption() (localctx IGeneratedOptionContext) {
	this := p
	_ = this

	localctx = NewGeneratedOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 668, MySQLStatementParserRULE_generatedOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5025)
		p.Match(MySQLStatementParserGENERATED)
	}
	{
		p.SetState(5026)
		p.Match(MySQLStatementParserALWAYS)
	}

	return localctx
}

// IReferenceDefinitionContext is an interface to support dynamic dispatch.
type IReferenceDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReferenceDefinitionContext differentiates from other interfaces.
	IsReferenceDefinitionContext()
}

type ReferenceDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReferenceDefinitionContext() *ReferenceDefinitionContext {
	var p = new(ReferenceDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_referenceDefinition
	return p
}

func (*ReferenceDefinitionContext) IsReferenceDefinitionContext() {}

func NewReferenceDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReferenceDefinitionContext {
	var p = new(ReferenceDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_referenceDefinition

	return p
}

func (s *ReferenceDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ReferenceDefinitionContext) REFERENCES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREFERENCES, 0)
}

func (s *ReferenceDefinitionContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *ReferenceDefinitionContext) KeyParts() IKeyPartsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeyPartsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKeyPartsContext)
}

func (s *ReferenceDefinitionContext) MATCH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMATCH, 0)
}

func (s *ReferenceDefinitionContext) FULL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFULL, 0)
}

func (s *ReferenceDefinitionContext) PARTIAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPARTIAL, 0)
}

func (s *ReferenceDefinitionContext) SIMPLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSIMPLE, 0)
}

func (s *ReferenceDefinitionContext) OnUpdateDelete() IOnUpdateDeleteContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOnUpdateDeleteContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOnUpdateDeleteContext)
}

func (s *ReferenceDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReferenceDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReferenceDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterReferenceDefinition(s)
	}
}

func (s *ReferenceDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitReferenceDefinition(s)
	}
}

func (s *ReferenceDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitReferenceDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ReferenceDefinition() (localctx IReferenceDefinitionContext) {
	this := p
	_ = this

	localctx = NewReferenceDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 670, MySQLStatementParserRULE_referenceDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5028)
		p.Match(MySQLStatementParserREFERENCES)
	}
	{
		p.SetState(5029)
		p.TableName()
	}
	{
		p.SetState(5030)
		p.KeyParts()
	}
	p.SetState(5037)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 620, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5031)
			p.Match(MySQLStatementParserMATCH)
		}
		{
			p.SetState(5032)
			p.Match(MySQLStatementParserFULL)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 620, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(5033)
			p.Match(MySQLStatementParserMATCH)
		}
		{
			p.SetState(5034)
			p.Match(MySQLStatementParserPARTIAL)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 620, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(5035)
			p.Match(MySQLStatementParserMATCH)
		}
		{
			p.SetState(5036)
			p.Match(MySQLStatementParserSIMPLE)
		}

	}
	p.SetState(5040)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserON {
		{
			p.SetState(5039)
			p.OnUpdateDelete()
		}

	}

	return localctx
}

// IOnUpdateDeleteContext is an interface to support dynamic dispatch.
type IOnUpdateDeleteContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOnUpdateDeleteContext differentiates from other interfaces.
	IsOnUpdateDeleteContext()
}

type OnUpdateDeleteContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOnUpdateDeleteContext() *OnUpdateDeleteContext {
	var p = new(OnUpdateDeleteContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_onUpdateDelete
	return p
}

func (*OnUpdateDeleteContext) IsOnUpdateDeleteContext() {}

func NewOnUpdateDeleteContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OnUpdateDeleteContext {
	var p = new(OnUpdateDeleteContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_onUpdateDelete

	return p
}

func (s *OnUpdateDeleteContext) GetParser() antlr.Parser { return s.parser }

func (s *OnUpdateDeleteContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserON)
}

func (s *OnUpdateDeleteContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserON, i)
}

func (s *OnUpdateDeleteContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUPDATE, 0)
}

func (s *OnUpdateDeleteContext) AllReferenceOption() []IReferenceOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IReferenceOptionContext)(nil)).Elem())
	var tst = make([]IReferenceOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IReferenceOptionContext)
		}
	}

	return tst
}

func (s *OnUpdateDeleteContext) ReferenceOption(i int) IReferenceOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReferenceOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IReferenceOptionContext)
}

func (s *OnUpdateDeleteContext) DELETE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDELETE, 0)
}

func (s *OnUpdateDeleteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OnUpdateDeleteContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OnUpdateDeleteContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterOnUpdateDelete(s)
	}
}

func (s *OnUpdateDeleteContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitOnUpdateDelete(s)
	}
}

func (s *OnUpdateDeleteContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitOnUpdateDelete(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) OnUpdateDelete() (localctx IOnUpdateDeleteContext) {
	this := p
	_ = this

	localctx = NewOnUpdateDeleteContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 672, MySQLStatementParserRULE_onUpdateDelete)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5058)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 624, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5042)
			p.Match(MySQLStatementParserON)
		}
		{
			p.SetState(5043)
			p.Match(MySQLStatementParserUPDATE)
		}
		{
			p.SetState(5044)
			p.ReferenceOption()
		}
		p.SetState(5048)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserON {
			{
				p.SetState(5045)
				p.Match(MySQLStatementParserON)
			}
			{
				p.SetState(5046)
				p.Match(MySQLStatementParserDELETE)
			}
			{
				p.SetState(5047)
				p.ReferenceOption()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5050)
			p.Match(MySQLStatementParserON)
		}
		{
			p.SetState(5051)
			p.Match(MySQLStatementParserDELETE)
		}
		{
			p.SetState(5052)
			p.ReferenceOption()
		}
		p.SetState(5056)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserON {
			{
				p.SetState(5053)
				p.Match(MySQLStatementParserON)
			}
			{
				p.SetState(5054)
				p.Match(MySQLStatementParserUPDATE)
			}
			{
				p.SetState(5055)
				p.ReferenceOption()
			}

		}

	}

	return localctx
}

// IReferenceOptionContext is an interface to support dynamic dispatch.
type IReferenceOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReferenceOptionContext differentiates from other interfaces.
	IsReferenceOptionContext()
}

type ReferenceOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReferenceOptionContext() *ReferenceOptionContext {
	var p = new(ReferenceOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_referenceOption
	return p
}

func (*ReferenceOptionContext) IsReferenceOptionContext() {}

func NewReferenceOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReferenceOptionContext {
	var p = new(ReferenceOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_referenceOption

	return p
}

func (s *ReferenceOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *ReferenceOptionContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRESTRICT, 0)
}

func (s *ReferenceOptionContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCASCADE, 0)
}

func (s *ReferenceOptionContext) SET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSET, 0)
}

func (s *ReferenceOptionContext) NULL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNULL, 0)
}

func (s *ReferenceOptionContext) NO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNO, 0)
}

func (s *ReferenceOptionContext) ACTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserACTION, 0)
}

func (s *ReferenceOptionContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFAULT, 0)
}

func (s *ReferenceOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReferenceOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReferenceOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterReferenceOption(s)
	}
}

func (s *ReferenceOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitReferenceOption(s)
	}
}

func (s *ReferenceOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitReferenceOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ReferenceOption() (localctx IReferenceOptionContext) {
	this := p
	_ = this

	localctx = NewReferenceOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 674, MySQLStatementParserRULE_referenceOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5068)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 625, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5060)
			p.Match(MySQLStatementParserRESTRICT)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5061)
			p.Match(MySQLStatementParserCASCADE)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5062)
			p.Match(MySQLStatementParserSET)
		}
		{
			p.SetState(5063)
			p.Match(MySQLStatementParserNULL)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5064)
			p.Match(MySQLStatementParserNO)
		}
		{
			p.SetState(5065)
			p.Match(MySQLStatementParserACTION)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5066)
			p.Match(MySQLStatementParserSET)
		}
		{
			p.SetState(5067)
			p.Match(MySQLStatementParserDEFAULT)
		}

	}

	return localctx
}

// IIndexNameAndTypeContext is an interface to support dynamic dispatch.
type IIndexNameAndTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexNameAndTypeContext differentiates from other interfaces.
	IsIndexNameAndTypeContext()
}

type IndexNameAndTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexNameAndTypeContext() *IndexNameAndTypeContext {
	var p = new(IndexNameAndTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_indexNameAndType
	return p
}

func (*IndexNameAndTypeContext) IsIndexNameAndTypeContext() {}

func NewIndexNameAndTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexNameAndTypeContext {
	var p = new(IndexNameAndTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_indexNameAndType

	return p
}

func (s *IndexNameAndTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexNameAndTypeContext) IndexName() IIndexNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexNameContext)
}

func (s *IndexNameAndTypeContext) IndexTypeClause() IIndexTypeClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexTypeClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexTypeClauseContext)
}

func (s *IndexNameAndTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexNameAndTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexNameAndTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterIndexNameAndType(s)
	}
}

func (s *IndexNameAndTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitIndexNameAndType(s)
	}
}

func (s *IndexNameAndTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitIndexNameAndType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) IndexNameAndType() (localctx IIndexNameAndTypeContext) {
	this := p
	_ = this

	localctx = NewIndexNameAndTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 676, MySQLStatementParserRULE_indexNameAndType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5070)
		p.IndexName()
	}
	p.SetState(5072)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserTYPE || _la == MySQLStatementParserUSING {
		{
			p.SetState(5071)
			p.IndexTypeClause()
		}

	}

	return localctx
}

// IIndexTypeContext is an interface to support dynamic dispatch.
type IIndexTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexTypeContext differentiates from other interfaces.
	IsIndexTypeContext()
}

type IndexTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexTypeContext() *IndexTypeContext {
	var p = new(IndexTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_indexType
	return p
}

func (*IndexTypeContext) IsIndexTypeContext() {}

func NewIndexTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexTypeContext {
	var p = new(IndexTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_indexType

	return p
}

func (s *IndexTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexTypeContext) BTREE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBTREE, 0)
}

func (s *IndexTypeContext) RTREE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRTREE, 0)
}

func (s *IndexTypeContext) HASH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHASH, 0)
}

func (s *IndexTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterIndexType(s)
	}
}

func (s *IndexTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitIndexType(s)
	}
}

func (s *IndexTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitIndexType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) IndexType() (localctx IIndexTypeContext) {
	this := p
	_ = this

	localctx = NewIndexTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 678, MySQLStatementParserRULE_indexType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5074)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserBTREE || _la == MySQLStatementParserHASH || _la == MySQLStatementParserRTREE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IIndexTypeClauseContext is an interface to support dynamic dispatch.
type IIndexTypeClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexTypeClauseContext differentiates from other interfaces.
	IsIndexTypeClauseContext()
}

type IndexTypeClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexTypeClauseContext() *IndexTypeClauseContext {
	var p = new(IndexTypeClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_indexTypeClause
	return p
}

func (*IndexTypeClauseContext) IsIndexTypeClauseContext() {}

func NewIndexTypeClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexTypeClauseContext {
	var p = new(IndexTypeClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_indexTypeClause

	return p
}

func (s *IndexTypeClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexTypeClauseContext) IndexType() IIndexTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexTypeContext)
}

func (s *IndexTypeClauseContext) USING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUSING, 0)
}

func (s *IndexTypeClauseContext) TYPE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTYPE, 0)
}

func (s *IndexTypeClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexTypeClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexTypeClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterIndexTypeClause(s)
	}
}

func (s *IndexTypeClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitIndexTypeClause(s)
	}
}

func (s *IndexTypeClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitIndexTypeClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) IndexTypeClause() (localctx IIndexTypeClauseContext) {
	this := p
	_ = this

	localctx = NewIndexTypeClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 680, MySQLStatementParserRULE_indexTypeClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5076)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserTYPE || _la == MySQLStatementParserUSING) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(5077)
		p.IndexType()
	}

	return localctx
}

// IKeyPartsContext is an interface to support dynamic dispatch.
type IKeyPartsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeyPartsContext differentiates from other interfaces.
	IsKeyPartsContext()
}

type KeyPartsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeyPartsContext() *KeyPartsContext {
	var p = new(KeyPartsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_keyParts
	return p
}

func (*KeyPartsContext) IsKeyPartsContext() {}

func NewKeyPartsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeyPartsContext {
	var p = new(KeyPartsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_keyParts

	return p
}

func (s *KeyPartsContext) GetParser() antlr.Parser { return s.parser }

func (s *KeyPartsContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *KeyPartsContext) AllKeyPart() []IKeyPartContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IKeyPartContext)(nil)).Elem())
	var tst = make([]IKeyPartContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IKeyPartContext)
		}
	}

	return tst
}

func (s *KeyPartsContext) KeyPart(i int) IKeyPartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeyPartContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IKeyPartContext)
}

func (s *KeyPartsContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *KeyPartsContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *KeyPartsContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *KeyPartsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeyPartsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeyPartsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterKeyParts(s)
	}
}

func (s *KeyPartsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitKeyParts(s)
	}
}

func (s *KeyPartsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitKeyParts(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) KeyParts() (localctx IKeyPartsContext) {
	this := p
	_ = this

	localctx = NewKeyPartsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 682, MySQLStatementParserRULE_keyParts)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5079)
		p.Match(MySQLStatementParserLP_)
	}
	{
		p.SetState(5080)
		p.KeyPart()
	}
	p.SetState(5085)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(5081)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(5082)
			p.KeyPart()
		}

		p.SetState(5087)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(5088)
		p.Match(MySQLStatementParserRP_)
	}

	return localctx
}

// IKeyPartContext is an interface to support dynamic dispatch.
type IKeyPartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeyPartContext differentiates from other interfaces.
	IsKeyPartContext()
}

type KeyPartContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeyPartContext() *KeyPartContext {
	var p = new(KeyPartContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_keyPart
	return p
}

func (*KeyPartContext) IsKeyPartContext() {}

func NewKeyPartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeyPartContext {
	var p = new(KeyPartContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_keyPart

	return p
}

func (s *KeyPartContext) GetParser() antlr.Parser { return s.parser }

func (s *KeyPartContext) ColumnName() IColumnNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNameContext)
}

func (s *KeyPartContext) FieldLength() IFieldLengthContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldLengthContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldLengthContext)
}

func (s *KeyPartContext) Direction() IDirectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectionContext)
}

func (s *KeyPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeyPartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeyPartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterKeyPart(s)
	}
}

func (s *KeyPartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitKeyPart(s)
	}
}

func (s *KeyPartContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitKeyPart(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) KeyPart() (localctx IKeyPartContext) {
	this := p
	_ = this

	localctx = NewKeyPartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 684, MySQLStatementParserRULE_keyPart)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5090)
		p.ColumnName()
	}
	p.SetState(5092)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLP_ {
		{
			p.SetState(5091)
			p.FieldLength()
		}

	}
	p.SetState(5095)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserASC || _la == MySQLStatementParserDESC {
		{
			p.SetState(5094)
			p.Direction()
		}

	}

	return localctx
}

// IKeyPartWithExpressionContext is an interface to support dynamic dispatch.
type IKeyPartWithExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeyPartWithExpressionContext differentiates from other interfaces.
	IsKeyPartWithExpressionContext()
}

type KeyPartWithExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeyPartWithExpressionContext() *KeyPartWithExpressionContext {
	var p = new(KeyPartWithExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_keyPartWithExpression
	return p
}

func (*KeyPartWithExpressionContext) IsKeyPartWithExpressionContext() {}

func NewKeyPartWithExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeyPartWithExpressionContext {
	var p = new(KeyPartWithExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_keyPartWithExpression

	return p
}

func (s *KeyPartWithExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *KeyPartWithExpressionContext) KeyPart() IKeyPartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeyPartContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKeyPartContext)
}

func (s *KeyPartWithExpressionContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *KeyPartWithExpressionContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *KeyPartWithExpressionContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *KeyPartWithExpressionContext) Direction() IDirectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectionContext)
}

func (s *KeyPartWithExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeyPartWithExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeyPartWithExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterKeyPartWithExpression(s)
	}
}

func (s *KeyPartWithExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitKeyPartWithExpression(s)
	}
}

func (s *KeyPartWithExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitKeyPartWithExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) KeyPartWithExpression() (localctx IKeyPartWithExpressionContext) {
	this := p
	_ = this

	localctx = NewKeyPartWithExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 686, MySQLStatementParserRULE_keyPartWithExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5104)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserMAX, MySQLStatementParserMIN, MySQLStatementParserSUM, MySQLStatementParserCOUNT, MySQLStatementParserGROUP_CONCAT, MySQLStatementParserCAST, MySQLStatementParserPOSITION, MySQLStatementParserSUBSTRING, MySQLStatementParserSUBSTR, MySQLStatementParserEXTRACT, MySQLStatementParserTRIM, MySQLStatementParserLAST_DAY, MySQLStatementParserTRADITIONAL, MySQLStatementParserTREE, MySQLStatementParserMYSQL_ADMIN, MySQLStatementParserINSTANT, MySQLStatementParserINPLACE, MySQLStatementParserCOPY, MySQLStatementParserUL_BINARY, MySQLStatementParserAUTOCOMMIT, MySQLStatementParserINNODB, MySQLStatementParserREDO_LOG, MySQLStatementParserACCOUNT, MySQLStatementParserACTION, MySQLStatementParserACTIVE, MySQLStatementParserADMIN, MySQLStatementParserAFTER, MySQLStatementParserAGAINST, MySQLStatementParserAGGREGATE, MySQLStatementParserALGORITHM, MySQLStatementParserALWAYS, MySQLStatementParserANY, MySQLStatementParserARRAY, MySQLStatementParserASCII, MySQLStatementParserAT, MySQLStatementParserATTRIBUTE, MySQLStatementParserAUTOEXTEND_SIZE, MySQLStatementParserAUTO_INCREMENT, MySQLStatementParserAVG, MySQLStatementParserAVG_ROW_LENGTH, MySQLStatementParserBACKUP, MySQLStatementParserBEGIN, MySQLStatementParserBINLOG, MySQLStatementParserBIT, MySQLStatementParserBLOCK, MySQLStatementParserBOOL, MySQLStatementParserBOOLEAN, MySQLStatementParserBTREE, MySQLStatementParserBUCKETS, MySQLStatementParserBYTE, MySQLStatementParserCACHE, MySQLStatementParserCASCADED, MySQLStatementParserCATALOG_NAME, MySQLStatementParserCHAIN, MySQLStatementParserCHANGED, MySQLStatementParserCHANNEL, MySQLStatementParserCHARSET, MySQLStatementParserCHECKSUM, MySQLStatementParserCIPHER, MySQLStatementParserCLASS_ORIGIN, MySQLStatementParserCLIENT, MySQLStatementParserCLONE, MySQLStatementParserCLOSE, MySQLStatementParserCOALESCE, MySQLStatementParserCODE, MySQLStatementParserCOLLATION, MySQLStatementParserCOLUMNS, MySQLStatementParserCOLUMN_FORMAT, MySQLStatementParserCOLUMN_NAME, MySQLStatementParserCOMMENT, MySQLStatementParserCOMMIT, MySQLStatementParserCOMMITTED, MySQLStatementParserCOMPACT, MySQLStatementParserCOMPLETION, MySQLStatementParserCOMPONENT, MySQLStatementParserCOMPRESSED, MySQLStatementParserCOMPRESSION, MySQLStatementParserCONCURRENT, MySQLStatementParserCONNECTION, MySQLStatementParserCONSISTENT, MySQLStatementParserCONSTRAINT_CATALOG, MySQLStatementParserCONSTRAINT_NAME, MySQLStatementParserCONSTRAINT_SCHEMA, MySQLStatementParserCONTAINS, MySQLStatementParserCONTEXT, MySQLStatementParserCPU, MySQLStatementParserCURRENT, MySQLStatementParserCURSOR_NAME, MySQLStatementParserDATA, MySQLStatementParserDATAFILE, MySQLStatementParserDATE, MySQLStatementParserDATETIME, MySQLStatementParserDAY, MySQLStatementParserDEALLOCATE, MySQLStatementParserDEFAULT_AUTH, MySQLStatementParserDEFINER, MySQLStatementParserDEFINITION, MySQLStatementParserDELAY_KEY_WRITE, MySQLStatementParserDESCRIPTION, MySQLStatementParserDIAGNOSTICS, MySQLStatementParserDIRECTORY, MySQLStatementParserDISABLE, MySQLStatementParserDISCARD, MySQLStatementParserDISK, MySQLStatementParserDO, MySQLStatementParserDUMPFILE, MySQLStatementParserDUPLICATE, MySQLStatementParserDYNAMIC, MySQLStatementParserENABLE, MySQLStatementParserENCRYPTION, MySQLStatementParserEND, MySQLStatementParserENDS, MySQLStatementParserENFORCED, MySQLStatementParserENGINE, MySQLStatementParserENGINES, MySQLStatementParserENGINE_ATTRIBUTE, MySQLStatementParserENUM, MySQLStatementParserERROR, MySQLStatementParserERRORS, MySQLStatementParserESCAPE, MySQLStatementParserEVENT, MySQLStatementParserEVENTS, MySQLStatementParserEVERY, MySQLStatementParserEXCHANGE, MySQLStatementParserEXCLUDE, MySQLStatementParserEXECUTE, MySQLStatementParserEXPANSION, MySQLStatementParserEXPIRE, MySQLStatementParserEXPORT, MySQLStatementParserEXTENDED, MySQLStatementParserEXTENT_SIZE, MySQLStatementParserFAILED_LOGIN_ATTEMPTS, MySQLStatementParserFAST, MySQLStatementParserFAULTS, MySQLStatementParserFILE, MySQLStatementParserFILE_BLOCK_SIZE, MySQLStatementParserFILTER, MySQLStatementParserFIRST, MySQLStatementParserFIXED, MySQLStatementParserFLUSH, MySQLStatementParserFOLLOWING, MySQLStatementParserFOLLOWS, MySQLStatementParserFORMAT, MySQLStatementParserFOUND, MySQLStatementParserFULL, MySQLStatementParserGENERAL, MySQLStatementParserGEOMETRY, MySQLStatementParserGEOMETRYCOLLECTION, MySQLStatementParserGET_FORMAT, MySQLStatementParserGET_MASTER_PUBLIC_KEY, MySQLStatementParserGLOBAL, MySQLStatementParserGRANTS, MySQLStatementParserGROUP_REPLICATION, MySQLStatementParserHANDLER, MySQLStatementParserHASH, MySQLStatementParserHELP, MySQLStatementParserHISTOGRAM, MySQLStatementParserHISTORY, MySQLStatementParserHOST, MySQLStatementParserHOSTS, MySQLStatementParserHOUR, MySQLStatementParserIDENTIFIED, MySQLStatementParserIGNORE_SERVER_IDS, MySQLStatementParserIMPORT, MySQLStatementParserINACTIVE, MySQLStatementParserINDEXES, MySQLStatementParserINITIAL_SIZE, MySQLStatementParserINSERT_METHOD, MySQLStatementParserINSTALL, MySQLStatementParserINSTANCE, MySQLStatementParserINVISIBLE, MySQLStatementParserINVOKER, MySQLStatementParserIO, MySQLStatementParserIPC, MySQLStatementParserISOLATION, MySQLStatementParserISSUER, MySQLStatementParserJSON, MySQLStatementParserJSON_VALUE, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserLANGUAGE, MySQLStatementParserLAST, MySQLStatementParserLAST_VALUE, MySQLStatementParserLEAVES, MySQLStatementParserLESS, MySQLStatementParserLEVEL, MySQLStatementParserLINESTRING, MySQLStatementParserLIST, MySQLStatementParserLOCAL, MySQLStatementParserLOCKED, MySQLStatementParserLOCKS, MySQLStatementParserLOGFILE, MySQLStatementParserLOGS, MySQLStatementParserMASTER, MySQLStatementParserMASTER_AUTO_POSITION, MySQLStatementParserMASTER_COMPRESSION_ALGORITHM, MySQLStatementParserMASTER_CONNECT_RETRY, MySQLStatementParserMASTER_DELAY, MySQLStatementParserMASTER_HEARTBEAT_PERIOD, MySQLStatementParserMASTER_HOST, MySQLStatementParserMASTER_LOG_FILE, MySQLStatementParserMASTER_LOG_POS, MySQLStatementParserMASTER_PASSWORD, MySQLStatementParserMASTER_PORT, MySQLStatementParserMASTER_PUBLIC_KEY_PATH, MySQLStatementParserMASTER_RETRY_COUNT, MySQLStatementParserMASTER_SERVER_ID, MySQLStatementParserMASTER_SSL, MySQLStatementParserMASTER_SSL_CA, MySQLStatementParserMASTER_SSL_CAPATH, MySQLStatementParserMASTER_SSL_CERT, MySQLStatementParserMASTER_SSL_CIPHER, MySQLStatementParserMASTER_SSL_CRL, MySQLStatementParserMASTER_SSL_CRLPATH, MySQLStatementParserMASTER_SSL_KEY, MySQLStatementParserMASTER_TLS_CIPHERSUITES, MySQLStatementParserMASTER_TLS_VERSION, MySQLStatementParserMASTER_USER, MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL, MySQLStatementParserMAX_CONNECTIONS_PER_HOUR, MySQLStatementParserMAX_QUERIES_PER_HOUR, MySQLStatementParserMAX_ROWS, MySQLStatementParserMAX_SIZE, MySQLStatementParserMAX_UPDATES_PER_HOUR, MySQLStatementParserMAX_USER_CONNECTIONS, MySQLStatementParserMEDIUM, MySQLStatementParserMEMBER, MySQLStatementParserMEMORY, MySQLStatementParserMERGE, MySQLStatementParserMESSAGE_TEXT, MySQLStatementParserMICROSECOND, MySQLStatementParserMIGRATE, MySQLStatementParserMINUTE, MySQLStatementParserMIN_ROWS, MySQLStatementParserMODE, MySQLStatementParserMODIFY, MySQLStatementParserMONTH, MySQLStatementParserMULTILINESTRING, MySQLStatementParserMULTIPOINT, MySQLStatementParserMULTIPOLYGON, MySQLStatementParserMUTEX, MySQLStatementParserMYSQL_ERRNO, MySQLStatementParserNAME, MySQLStatementParserNAMES, MySQLStatementParserNATIONAL, MySQLStatementParserNCHAR, MySQLStatementParserNDBCLUSTER, MySQLStatementParserNESTED, MySQLStatementParserNETWORK_NAMESPACE, MySQLStatementParserNEVER, MySQLStatementParserNEW, MySQLStatementParserNEXT, MySQLStatementParserNO, MySQLStatementParserNODEGROUP, MySQLStatementParserNONE, MySQLStatementParserNOWAIT, MySQLStatementParserNO_WAIT, MySQLStatementParserNULLS, MySQLStatementParserNUMBER, MySQLStatementParserNVARCHAR, MySQLStatementParserOFF, MySQLStatementParserOFFSET, MySQLStatementParserOJ, MySQLStatementParserOLD, MySQLStatementParserONE, MySQLStatementParserONLY, MySQLStatementParserOPEN, MySQLStatementParserOPTIONAL, MySQLStatementParserOPTIONS, MySQLStatementParserORDINALITY, MySQLStatementParserORGANIZATION, MySQLStatementParserOTHERS, MySQLStatementParserOWNER, MySQLStatementParserPACK_KEYS, MySQLStatementParserPAGE, MySQLStatementParserPARSER, MySQLStatementParserPARTIAL, MySQLStatementParserPARTITIONING, MySQLStatementParserPARTITIONS, MySQLStatementParserPASSWORD, MySQLStatementParserPASSWORD_LOCK_TIME, MySQLStatementParserPATH, MySQLStatementParserPERSIST, MySQLStatementParserPERSIST_ONLY, MySQLStatementParserPHASE, MySQLStatementParserPLUGIN, MySQLStatementParserPLUGINS, MySQLStatementParserPLUGIN_DIR, MySQLStatementParserPOINT, MySQLStatementParserPOLYGON, MySQLStatementParserPORT, MySQLStatementParserPRECEDES, MySQLStatementParserPRECEDING, MySQLStatementParserPREPARE, MySQLStatementParserPRESERVE, MySQLStatementParserPREV, MySQLStatementParserPRIVILEGES, MySQLStatementParserPRIVILEGE_CHECKS_USER, MySQLStatementParserPROCESS, MySQLStatementParserPROCESSLIST, MySQLStatementParserPROFILE, MySQLStatementParserPROFILES, MySQLStatementParserPROXY, MySQLStatementParserQUARTER, MySQLStatementParserQUERY, MySQLStatementParserQUICK, MySQLStatementParserRANDOM, MySQLStatementParserREAD_ONLY, MySQLStatementParserREBUILD, MySQLStatementParserRECOVER, MySQLStatementParserREDO_BUFFER_SIZE, MySQLStatementParserREDUNDANT, MySQLStatementParserREFERENCE, MySQLStatementParserRELAY, MySQLStatementParserRELAYLOG, MySQLStatementParserRELAY_LOG_FILE, MySQLStatementParserRELAY_LOG_POS, MySQLStatementParserRELAY_THREAD, MySQLStatementParserRELOAD, MySQLStatementParserREMOVE, MySQLStatementParserREORGANIZE, MySQLStatementParserREPAIR, MySQLStatementParserREPEATABLE, MySQLStatementParserREPLICATE_DO_DB, MySQLStatementParserREPLICATE_DO_TABLE, MySQLStatementParserREPLICATE_IGNORE_DB, MySQLStatementParserREPLICATE_IGNORE_TABLE, MySQLStatementParserREPLICATE_REWRITE_DB, MySQLStatementParserREPLICATE_WILD_DO_TABLE, MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE, MySQLStatementParserREPLICATION, MySQLStatementParserREQUIRE_ROW_FORMAT, MySQLStatementParserRESET, MySQLStatementParserRESOURCE, MySQLStatementParserRESPECT, MySQLStatementParserRESTART, MySQLStatementParserRESTORE, MySQLStatementParserRESUME, MySQLStatementParserRETAIN, MySQLStatementParserRETURNED_SQLSTATE, MySQLStatementParserRETURNING, MySQLStatementParserRETURNS, MySQLStatementParserREUSE, MySQLStatementParserREVERSE, MySQLStatementParserROLE, MySQLStatementParserROLLBACK, MySQLStatementParserROLLUP, MySQLStatementParserROTATE, MySQLStatementParserROUTINE, MySQLStatementParserROW_COUNT, MySQLStatementParserROW_FORMAT, MySQLStatementParserRTREE, MySQLStatementParserSAVEPOINT, MySQLStatementParserSCHEDULE, MySQLStatementParserSCHEMA_NAME, MySQLStatementParserSECOND, MySQLStatementParserSECONDARY, MySQLStatementParserSECONDARY_ENGINE, MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, MySQLStatementParserSECONDARY_LOAD, MySQLStatementParserSECONDARY_UNLOAD, MySQLStatementParserSECURITY, MySQLStatementParserSERIAL, MySQLStatementParserSERIALIZABLE, MySQLStatementParserSERVER, MySQLStatementParserSESSION, MySQLStatementParserSHARE, MySQLStatementParserSHUTDOWN, MySQLStatementParserSIGNED, MySQLStatementParserSIMPLE, MySQLStatementParserSLAVE, MySQLStatementParserSLOW, MySQLStatementParserSNAPSHOT, MySQLStatementParserSOCKET, MySQLStatementParserSONAME, MySQLStatementParserSOUNDS, MySQLStatementParserSOURCE, MySQLStatementParserSQL_AFTER_GTIDS, MySQLStatementParserSQL_AFTER_MTS_GAPS, MySQLStatementParserSQL_BEFORE_GTIDS, MySQLStatementParserSQL_BUFFER_RESULT, MySQLStatementParserSQL_NO_CACHE, MySQLStatementParserSQL_THREAD, MySQLStatementParserSRID, MySQLStatementParserSTACKED, MySQLStatementParserSTART, MySQLStatementParserSTARTS, MySQLStatementParserSTATS_AUTO_RECALC, MySQLStatementParserSTATS_PERSISTENT, MySQLStatementParserSTATS_SAMPLE_PAGES, MySQLStatementParserSTATUS, MySQLStatementParserSTOP, MySQLStatementParserSTORAGE, MySQLStatementParserSTREAM, MySQLStatementParserSTRING, MySQLStatementParserSUBCLASS_ORIGIN, MySQLStatementParserSUBJECT, MySQLStatementParserSUBPARTITION, MySQLStatementParserSUBPARTITIONS, MySQLStatementParserSUPER, MySQLStatementParserSUSPEND, MySQLStatementParserSWAPS, MySQLStatementParserSWITCHES, MySQLStatementParserTABLES, MySQLStatementParserTABLESPACE, MySQLStatementParserTABLE_CHECKSUM, MySQLStatementParserTABLE_NAME, MySQLStatementParserTEMPORARY, MySQLStatementParserTEMPTABLE, MySQLStatementParserTEXT, MySQLStatementParserTHAN, MySQLStatementParserTHREAD_PRIORITY, MySQLStatementParserTIES, MySQLStatementParserTIME, MySQLStatementParserTIMESTAMP, MySQLStatementParserTIMESTAMP_ADD, MySQLStatementParserTIMESTAMP_DIFF, MySQLStatementParserTLS, MySQLStatementParserTRANSACTION, MySQLStatementParserTRIGGERS, MySQLStatementParserTRUNCATE, MySQLStatementParserTYPE, MySQLStatementParserTYPES, MySQLStatementParserUNBOUNDED, MySQLStatementParserUNCOMMITTED, MySQLStatementParserUNDEFINED, MySQLStatementParserUNDOFILE, MySQLStatementParserUNDO_BUFFER_SIZE, MySQLStatementParserUNICODE, MySQLStatementParserUNINSTALL, MySQLStatementParserUNKNOWN, MySQLStatementParserUNTIL, MySQLStatementParserUPGRADE, MySQLStatementParserUSER, MySQLStatementParserUSER_RESOURCES, MySQLStatementParserUSE_FRM, MySQLStatementParserVALIDATION, MySQLStatementParserVALUE, MySQLStatementParserVARIABLES, MySQLStatementParserVCPU, MySQLStatementParserVIEW, MySQLStatementParserVISIBLE, MySQLStatementParserWAIT, MySQLStatementParserWARNINGS, MySQLStatementParserWEEK, MySQLStatementParserWEIGHT_STRING, MySQLStatementParserWITHOUT, MySQLStatementParserWORK, MySQLStatementParserWRAPPER, MySQLStatementParserX509, MySQLStatementParserXA, MySQLStatementParserXID, MySQLStatementParserXML, MySQLStatementParserYEAR, MySQLStatementParserIDENTIFIER_, MySQLStatementParserDOUBLE_QUOTED_TEXT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5097)
			p.KeyPart()
		}

	case MySQLStatementParserLP_:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5098)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(5099)
			p.expr(0)
		}
		{
			p.SetState(5100)
			p.Match(MySQLStatementParserRP_)
		}
		p.SetState(5102)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserASC || _la == MySQLStatementParserDESC {
			{
				p.SetState(5101)
				p.Direction()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IKeyListWithExpressionContext is an interface to support dynamic dispatch.
type IKeyListWithExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeyListWithExpressionContext differentiates from other interfaces.
	IsKeyListWithExpressionContext()
}

type KeyListWithExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeyListWithExpressionContext() *KeyListWithExpressionContext {
	var p = new(KeyListWithExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_keyListWithExpression
	return p
}

func (*KeyListWithExpressionContext) IsKeyListWithExpressionContext() {}

func NewKeyListWithExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeyListWithExpressionContext {
	var p = new(KeyListWithExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_keyListWithExpression

	return p
}

func (s *KeyListWithExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *KeyListWithExpressionContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *KeyListWithExpressionContext) AllKeyPartWithExpression() []IKeyPartWithExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IKeyPartWithExpressionContext)(nil)).Elem())
	var tst = make([]IKeyPartWithExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IKeyPartWithExpressionContext)
		}
	}

	return tst
}

func (s *KeyListWithExpressionContext) KeyPartWithExpression(i int) IKeyPartWithExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeyPartWithExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IKeyPartWithExpressionContext)
}

func (s *KeyListWithExpressionContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *KeyListWithExpressionContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *KeyListWithExpressionContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *KeyListWithExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeyListWithExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeyListWithExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterKeyListWithExpression(s)
	}
}

func (s *KeyListWithExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitKeyListWithExpression(s)
	}
}

func (s *KeyListWithExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitKeyListWithExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) KeyListWithExpression() (localctx IKeyListWithExpressionContext) {
	this := p
	_ = this

	localctx = NewKeyListWithExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 688, MySQLStatementParserRULE_keyListWithExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5106)
		p.Match(MySQLStatementParserLP_)
	}
	{
		p.SetState(5107)
		p.KeyPartWithExpression()
	}
	p.SetState(5112)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(5108)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(5109)
			p.KeyPartWithExpression()
		}

		p.SetState(5114)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(5115)
		p.Match(MySQLStatementParserRP_)
	}

	return localctx
}

// IIndexOptionContext is an interface to support dynamic dispatch.
type IIndexOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexOptionContext differentiates from other interfaces.
	IsIndexOptionContext()
}

type IndexOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexOptionContext() *IndexOptionContext {
	var p = new(IndexOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_indexOption
	return p
}

func (*IndexOptionContext) IsIndexOptionContext() {}

func NewIndexOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexOptionContext {
	var p = new(IndexOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_indexOption

	return p
}

func (s *IndexOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexOptionContext) CommonIndexOption() ICommonIndexOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICommonIndexOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICommonIndexOptionContext)
}

func (s *IndexOptionContext) IndexTypeClause() IIndexTypeClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexTypeClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexTypeClauseContext)
}

func (s *IndexOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterIndexOption(s)
	}
}

func (s *IndexOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitIndexOption(s)
	}
}

func (s *IndexOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitIndexOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) IndexOption() (localctx IIndexOptionContext) {
	this := p
	_ = this

	localctx = NewIndexOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 690, MySQLStatementParserRULE_indexOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5119)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserCOMMENT, MySQLStatementParserINVISIBLE, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserVISIBLE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5117)
			p.CommonIndexOption()
		}

	case MySQLStatementParserTYPE, MySQLStatementParserUSING:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5118)
			p.IndexTypeClause()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICommonIndexOptionContext is an interface to support dynamic dispatch.
type ICommonIndexOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCommonIndexOptionContext differentiates from other interfaces.
	IsCommonIndexOptionContext()
}

type CommonIndexOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommonIndexOptionContext() *CommonIndexOptionContext {
	var p = new(CommonIndexOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_commonIndexOption
	return p
}

func (*CommonIndexOptionContext) IsCommonIndexOptionContext() {}

func NewCommonIndexOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CommonIndexOptionContext {
	var p = new(CommonIndexOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_commonIndexOption

	return p
}

func (s *CommonIndexOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *CommonIndexOptionContext) KEY_BLOCK_SIZE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserKEY_BLOCK_SIZE, 0)
}

func (s *CommonIndexOptionContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *CommonIndexOptionContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *CommonIndexOptionContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMENT, 0)
}

func (s *CommonIndexOptionContext) StringLiterals() IStringLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralsContext)
}

func (s *CommonIndexOptionContext) Visibility() IVisibilityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVisibilityContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVisibilityContext)
}

func (s *CommonIndexOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CommonIndexOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CommonIndexOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCommonIndexOption(s)
	}
}

func (s *CommonIndexOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCommonIndexOption(s)
	}
}

func (s *CommonIndexOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCommonIndexOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CommonIndexOption() (localctx ICommonIndexOptionContext) {
	this := p
	_ = this

	localctx = NewCommonIndexOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 692, MySQLStatementParserRULE_commonIndexOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5129)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserKEY_BLOCK_SIZE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5121)
			p.Match(MySQLStatementParserKEY_BLOCK_SIZE)
		}
		p.SetState(5123)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5122)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5125)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case MySQLStatementParserCOMMENT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5126)
			p.Match(MySQLStatementParserCOMMENT)
		}
		{
			p.SetState(5127)
			p.StringLiterals()
		}

	case MySQLStatementParserINVISIBLE, MySQLStatementParserVISIBLE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5128)
			p.Visibility()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IVisibilityContext is an interface to support dynamic dispatch.
type IVisibilityContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVisibilityContext differentiates from other interfaces.
	IsVisibilityContext()
}

type VisibilityContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVisibilityContext() *VisibilityContext {
	var p = new(VisibilityContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_visibility
	return p
}

func (*VisibilityContext) IsVisibilityContext() {}

func NewVisibilityContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VisibilityContext {
	var p = new(VisibilityContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_visibility

	return p
}

func (s *VisibilityContext) GetParser() antlr.Parser { return s.parser }

func (s *VisibilityContext) VISIBLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVISIBLE, 0)
}

func (s *VisibilityContext) INVISIBLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINVISIBLE, 0)
}

func (s *VisibilityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VisibilityContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VisibilityContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterVisibility(s)
	}
}

func (s *VisibilityContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitVisibility(s)
	}
}

func (s *VisibilityContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitVisibility(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Visibility() (localctx IVisibilityContext) {
	this := p
	_ = this

	localctx = NewVisibilityContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 694, MySQLStatementParserRULE_visibility)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5131)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserINVISIBLE || _la == MySQLStatementParserVISIBLE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ICreateLikeClauseContext is an interface to support dynamic dispatch.
type ICreateLikeClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateLikeClauseContext differentiates from other interfaces.
	IsCreateLikeClauseContext()
}

type CreateLikeClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateLikeClauseContext() *CreateLikeClauseContext {
	var p = new(CreateLikeClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_createLikeClause
	return p
}

func (*CreateLikeClauseContext) IsCreateLikeClauseContext() {}

func NewCreateLikeClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateLikeClauseContext {
	var p = new(CreateLikeClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_createLikeClause

	return p
}

func (s *CreateLikeClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateLikeClauseContext) LIKE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLIKE, 0)
}

func (s *CreateLikeClauseContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *CreateLikeClauseContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *CreateLikeClauseContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *CreateLikeClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateLikeClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateLikeClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateLikeClause(s)
	}
}

func (s *CreateLikeClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateLikeClause(s)
	}
}

func (s *CreateLikeClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateLikeClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CreateLikeClause() (localctx ICreateLikeClauseContext) {
	this := p
	_ = this

	localctx = NewCreateLikeClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 696, MySQLStatementParserRULE_createLikeClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5134)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLP_ {
		{
			p.SetState(5133)
			p.Match(MySQLStatementParserLP_)
		}

	}
	{
		p.SetState(5136)
		p.Match(MySQLStatementParserLIKE)
	}
	{
		p.SetState(5137)
		p.TableName()
	}
	p.SetState(5139)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserRP_ {
		{
			p.SetState(5138)
			p.Match(MySQLStatementParserRP_)
		}

	}

	return localctx
}

// ICreateIndexSpecificationContext is an interface to support dynamic dispatch.
type ICreateIndexSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateIndexSpecificationContext differentiates from other interfaces.
	IsCreateIndexSpecificationContext()
}

type CreateIndexSpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateIndexSpecificationContext() *CreateIndexSpecificationContext {
	var p = new(CreateIndexSpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_createIndexSpecification
	return p
}

func (*CreateIndexSpecificationContext) IsCreateIndexSpecificationContext() {}

func NewCreateIndexSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateIndexSpecificationContext {
	var p = new(CreateIndexSpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_createIndexSpecification

	return p
}

func (s *CreateIndexSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateIndexSpecificationContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNIQUE, 0)
}

func (s *CreateIndexSpecificationContext) FULLTEXT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFULLTEXT, 0)
}

func (s *CreateIndexSpecificationContext) SPATIAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSPATIAL, 0)
}

func (s *CreateIndexSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateIndexSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateIndexSpecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateIndexSpecification(s)
	}
}

func (s *CreateIndexSpecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateIndexSpecification(s)
	}
}

func (s *CreateIndexSpecificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateIndexSpecification(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CreateIndexSpecification() (localctx ICreateIndexSpecificationContext) {
	this := p
	_ = this

	localctx = NewCreateIndexSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 698, MySQLStatementParserRULE_createIndexSpecification)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5141)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserFULLTEXT || _la == MySQLStatementParserSPATIAL || _la == MySQLStatementParserUNIQUE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ICreateTableOptionsContext is an interface to support dynamic dispatch.
type ICreateTableOptionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateTableOptionsContext differentiates from other interfaces.
	IsCreateTableOptionsContext()
}

type CreateTableOptionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateTableOptionsContext() *CreateTableOptionsContext {
	var p = new(CreateTableOptionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_createTableOptions
	return p
}

func (*CreateTableOptionsContext) IsCreateTableOptionsContext() {}

func NewCreateTableOptionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateTableOptionsContext {
	var p = new(CreateTableOptionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_createTableOptions

	return p
}

func (s *CreateTableOptionsContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateTableOptionsContext) AllCreateTableOption() []ICreateTableOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICreateTableOptionContext)(nil)).Elem())
	var tst = make([]ICreateTableOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICreateTableOptionContext)
		}
	}

	return tst
}

func (s *CreateTableOptionsContext) CreateTableOption(i int) ICreateTableOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateTableOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICreateTableOptionContext)
}

func (s *CreateTableOptionsContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *CreateTableOptionsContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *CreateTableOptionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateTableOptionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateTableOptionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateTableOptions(s)
	}
}

func (s *CreateTableOptionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateTableOptions(s)
	}
}

func (s *CreateTableOptionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateTableOptions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CreateTableOptions() (localctx ICreateTableOptionsContext) {
	this := p
	_ = this

	localctx = NewCreateTableOptionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 700, MySQLStatementParserRULE_createTableOptions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5143)
		p.CreateTableOption()
	}
	p.SetState(5150)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 639, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(5145)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySQLStatementParserCOMMA_ {
				{
					p.SetState(5144)
					p.Match(MySQLStatementParserCOMMA_)
				}

			}
			{
				p.SetState(5147)
				p.CreateTableOption()
			}

		}
		p.SetState(5152)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 639, p.GetParserRuleContext())
	}

	return localctx
}

// ICreateTableOptionContext is an interface to support dynamic dispatch.
type ICreateTableOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOption returns the option token.
	GetOption() antlr.Token

	// GetTernaryOption returns the ternaryOption token.
	GetTernaryOption() antlr.Token

	// GetFormat returns the format token.
	GetFormat() antlr.Token

	// GetMethod returns the method token.
	GetMethod() antlr.Token

	// SetOption sets the option token.
	SetOption(antlr.Token)

	// SetTernaryOption sets the ternaryOption token.
	SetTernaryOption(antlr.Token)

	// SetFormat sets the format token.
	SetFormat(antlr.Token)

	// SetMethod sets the method token.
	SetMethod(antlr.Token)

	// GetJsonAttribute returns the jsonAttribute rule contexts.
	GetJsonAttribute() IString_Context

	// SetJsonAttribute sets the jsonAttribute rule contexts.
	SetJsonAttribute(IString_Context)

	// IsCreateTableOptionContext differentiates from other interfaces.
	IsCreateTableOptionContext()
}

type CreateTableOptionContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	option        antlr.Token
	ternaryOption antlr.Token
	format        antlr.Token
	method        antlr.Token
	jsonAttribute IString_Context
}

func NewEmptyCreateTableOptionContext() *CreateTableOptionContext {
	var p = new(CreateTableOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_createTableOption
	return p
}

func (*CreateTableOptionContext) IsCreateTableOptionContext() {}

func NewCreateTableOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateTableOptionContext {
	var p = new(CreateTableOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_createTableOption

	return p
}

func (s *CreateTableOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateTableOptionContext) GetOption() antlr.Token { return s.option }

func (s *CreateTableOptionContext) GetTernaryOption() antlr.Token { return s.ternaryOption }

func (s *CreateTableOptionContext) GetFormat() antlr.Token { return s.format }

func (s *CreateTableOptionContext) GetMethod() antlr.Token { return s.method }

func (s *CreateTableOptionContext) SetOption(v antlr.Token) { s.option = v }

func (s *CreateTableOptionContext) SetTernaryOption(v antlr.Token) { s.ternaryOption = v }

func (s *CreateTableOptionContext) SetFormat(v antlr.Token) { s.format = v }

func (s *CreateTableOptionContext) SetMethod(v antlr.Token) { s.method = v }

func (s *CreateTableOptionContext) GetJsonAttribute() IString_Context { return s.jsonAttribute }

func (s *CreateTableOptionContext) SetJsonAttribute(v IString_Context) { s.jsonAttribute = v }

func (s *CreateTableOptionContext) EngineRef() IEngineRefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngineRefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngineRefContext)
}

func (s *CreateTableOptionContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENGINE, 0)
}

func (s *CreateTableOptionContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *CreateTableOptionContext) SECONDARY_ENGINE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSECONDARY_ENGINE, 0)
}

func (s *CreateTableOptionContext) NULL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNULL, 0)
}

func (s *CreateTableOptionContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *CreateTableOptionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *CreateTableOptionContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *CreateTableOptionContext) MAX_ROWS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMAX_ROWS, 0)
}

func (s *CreateTableOptionContext) MIN_ROWS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMIN_ROWS, 0)
}

func (s *CreateTableOptionContext) AVG_ROW_LENGTH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAVG_ROW_LENGTH, 0)
}

func (s *CreateTableOptionContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPASSWORD, 0)
}

func (s *CreateTableOptionContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMENT, 0)
}

func (s *CreateTableOptionContext) TextString() ITextStringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITextStringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITextStringContext)
}

func (s *CreateTableOptionContext) COMPRESSION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMPRESSION, 0)
}

func (s *CreateTableOptionContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENCRYPTION, 0)
}

func (s *CreateTableOptionContext) AUTO_INCREMENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAUTO_INCREMENT, 0)
}

func (s *CreateTableOptionContext) PACK_KEYS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPACK_KEYS, 0)
}

func (s *CreateTableOptionContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFAULT, 0)
}

func (s *CreateTableOptionContext) STATS_AUTO_RECALC() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTATS_AUTO_RECALC, 0)
}

func (s *CreateTableOptionContext) STATS_PERSISTENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTATS_PERSISTENT, 0)
}

func (s *CreateTableOptionContext) STATS_SAMPLE_PAGES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTATS_SAMPLE_PAGES, 0)
}

func (s *CreateTableOptionContext) CHECKSUM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHECKSUM, 0)
}

func (s *CreateTableOptionContext) TABLE_CHECKSUM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLE_CHECKSUM, 0)
}

func (s *CreateTableOptionContext) DELAY_KEY_WRITE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDELAY_KEY_WRITE, 0)
}

func (s *CreateTableOptionContext) ROW_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROW_FORMAT, 0)
}

func (s *CreateTableOptionContext) DYNAMIC() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDYNAMIC, 0)
}

func (s *CreateTableOptionContext) FIXED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFIXED, 0)
}

func (s *CreateTableOptionContext) COMPRESSED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMPRESSED, 0)
}

func (s *CreateTableOptionContext) REDUNDANT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREDUNDANT, 0)
}

func (s *CreateTableOptionContext) COMPACT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMPACT, 0)
}

func (s *CreateTableOptionContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *CreateTableOptionContext) TableList() ITableListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableListContext)
}

func (s *CreateTableOptionContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *CreateTableOptionContext) UNION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNION, 0)
}

func (s *CreateTableOptionContext) DefaultCharset() IDefaultCharsetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefaultCharsetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefaultCharsetContext)
}

func (s *CreateTableOptionContext) DefaultCollation() IDefaultCollationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefaultCollationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefaultCollationContext)
}

func (s *CreateTableOptionContext) INSERT_METHOD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINSERT_METHOD, 0)
}

func (s *CreateTableOptionContext) NO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNO, 0)
}

func (s *CreateTableOptionContext) FIRST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFIRST, 0)
}

func (s *CreateTableOptionContext) LAST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLAST, 0)
}

func (s *CreateTableOptionContext) DIRECTORY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDIRECTORY, 0)
}

func (s *CreateTableOptionContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDATA, 0)
}

func (s *CreateTableOptionContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINDEX, 0)
}

func (s *CreateTableOptionContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLESPACE, 0)
}

func (s *CreateTableOptionContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTORAGE, 0)
}

func (s *CreateTableOptionContext) DISK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDISK, 0)
}

func (s *CreateTableOptionContext) MEMORY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMEMORY, 0)
}

func (s *CreateTableOptionContext) CONNECTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCONNECTION, 0)
}

func (s *CreateTableOptionContext) KEY_BLOCK_SIZE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserKEY_BLOCK_SIZE, 0)
}

func (s *CreateTableOptionContext) ENGINE_ATTRIBUTE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENGINE_ATTRIBUTE, 0)
}

func (s *CreateTableOptionContext) SECONDARY_ENGINE_ATTRIBUTE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, 0)
}

func (s *CreateTableOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateTableOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateTableOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateTableOption(s)
	}
}

func (s *CreateTableOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateTableOption(s)
	}
}

func (s *CreateTableOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateTableOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CreateTableOption() (localctx ICreateTableOptionContext) {
	this := p
	_ = this

	localctx = NewCreateTableOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 702, MySQLStatementParserRULE_createTableOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5284)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 664, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5153)

			var _m = p.Match(MySQLStatementParserENGINE)

			localctx.(*CreateTableOptionContext).option = _m
		}
		p.SetState(5155)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5154)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5157)
			p.EngineRef()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5158)

			var _m = p.Match(MySQLStatementParserSECONDARY_ENGINE)

			localctx.(*CreateTableOptionContext).option = _m
		}
		p.SetState(5160)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5159)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		p.SetState(5165)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 642, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(5162)
				p.Match(MySQLStatementParserNULL)
			}

		case 2:
			{
				p.SetState(5163)
				p.String_()
			}

		case 3:
			{
				p.SetState(5164)
				p.Identifier()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5167)

			var _m = p.Match(MySQLStatementParserMAX_ROWS)

			localctx.(*CreateTableOptionContext).option = _m
		}
		p.SetState(5169)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5168)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5171)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5172)

			var _m = p.Match(MySQLStatementParserMIN_ROWS)

			localctx.(*CreateTableOptionContext).option = _m
		}
		p.SetState(5174)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5173)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5176)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5177)

			var _m = p.Match(MySQLStatementParserAVG_ROW_LENGTH)

			localctx.(*CreateTableOptionContext).option = _m
		}
		p.SetState(5179)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5178)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5181)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5182)

			var _m = p.Match(MySQLStatementParserPASSWORD)

			localctx.(*CreateTableOptionContext).option = _m
		}
		p.SetState(5184)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5183)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5186)
			p.String_()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5187)

			var _m = p.Match(MySQLStatementParserCOMMENT)

			localctx.(*CreateTableOptionContext).option = _m
		}
		p.SetState(5189)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5188)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5191)
			p.String_()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5192)

			var _m = p.Match(MySQLStatementParserCOMPRESSION)

			localctx.(*CreateTableOptionContext).option = _m
		}
		p.SetState(5194)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5193)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5196)
			p.TextString()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5197)

			var _m = p.Match(MySQLStatementParserENCRYPTION)

			localctx.(*CreateTableOptionContext).option = _m
		}
		p.SetState(5199)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5198)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5201)
			p.TextString()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(5202)

			var _m = p.Match(MySQLStatementParserAUTO_INCREMENT)

			localctx.(*CreateTableOptionContext).option = _m
		}
		p.SetState(5204)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5203)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5206)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(5207)

			var _m = p.Match(MySQLStatementParserPACK_KEYS)

			localctx.(*CreateTableOptionContext).option = _m
		}
		p.SetState(5209)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5208)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5211)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*CreateTableOptionContext).ternaryOption = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserDEFAULT || _la == MySQLStatementParserNUMBER_) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*CreateTableOptionContext).ternaryOption = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(5212)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*CreateTableOptionContext).option = _lt

			_la = p.GetTokenStream().LA(1)

			if !(((_la-661)&-(0x1f+1)) == 0 && ((1<<uint((_la-661)))&((1<<(MySQLStatementParserSTATS_AUTO_RECALC-661))|(1<<(MySQLStatementParserSTATS_PERSISTENT-661))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-661)))) != 0) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*CreateTableOptionContext).option = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(5214)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5213)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5216)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*CreateTableOptionContext).ternaryOption = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserDEFAULT || _la == MySQLStatementParserNUMBER_) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*CreateTableOptionContext).ternaryOption = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(5217)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*CreateTableOptionContext).option = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserCHECKSUM || _la == MySQLStatementParserTABLE_CHECKSUM) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*CreateTableOptionContext).option = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(5219)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5218)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5221)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(5222)

			var _m = p.Match(MySQLStatementParserDELAY_KEY_WRITE)

			localctx.(*CreateTableOptionContext).option = _m
		}
		p.SetState(5224)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5223)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5226)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(5227)

			var _m = p.Match(MySQLStatementParserROW_FORMAT)

			localctx.(*CreateTableOptionContext).option = _m
		}
		p.SetState(5229)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5228)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5231)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*CreateTableOptionContext).format = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserCOMPACT || _la == MySQLStatementParserCOMPRESSED || _la == MySQLStatementParserDEFAULT || _la == MySQLStatementParserDYNAMIC || _la == MySQLStatementParserFIXED || _la == MySQLStatementParserREDUNDANT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*CreateTableOptionContext).format = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(5232)

			var _m = p.Match(MySQLStatementParserUNION)

			localctx.(*CreateTableOptionContext).option = _m
		}
		p.SetState(5234)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5233)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5236)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(5237)
			p.TableList()
		}
		{
			p.SetState(5238)
			p.Match(MySQLStatementParserRP_)
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(5240)
			p.DefaultCharset()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(5241)
			p.DefaultCollation()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(5242)

			var _m = p.Match(MySQLStatementParserINSERT_METHOD)

			localctx.(*CreateTableOptionContext).option = _m
		}
		p.SetState(5244)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5243)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5246)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*CreateTableOptionContext).method = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserFIRST || _la == MySQLStatementParserLAST || _la == MySQLStatementParserNO) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*CreateTableOptionContext).method = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(5247)

			var _m = p.Match(MySQLStatementParserDATA)

			localctx.(*CreateTableOptionContext).option = _m
		}
		{
			p.SetState(5248)
			p.Match(MySQLStatementParserDIRECTORY)
		}
		p.SetState(5250)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5249)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5252)
			p.TextString()
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(5253)

			var _m = p.Match(MySQLStatementParserINDEX)

			localctx.(*CreateTableOptionContext).option = _m
		}
		{
			p.SetState(5254)
			p.Match(MySQLStatementParserDIRECTORY)
		}
		p.SetState(5256)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5255)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5258)
			p.TextString()
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(5259)

			var _m = p.Match(MySQLStatementParserTABLESPACE)

			localctx.(*CreateTableOptionContext).option = _m
		}
		p.SetState(5261)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5260)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5263)
			p.Identifier()
		}

	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(5264)

			var _m = p.Match(MySQLStatementParserSTORAGE)

			localctx.(*CreateTableOptionContext).option = _m
		}
		{
			p.SetState(5265)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserDISK || _la == MySQLStatementParserMEMORY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(5266)

			var _m = p.Match(MySQLStatementParserCONNECTION)

			localctx.(*CreateTableOptionContext).option = _m
		}
		p.SetState(5268)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5267)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5270)
			p.TextString()
		}

	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(5271)

			var _m = p.Match(MySQLStatementParserKEY_BLOCK_SIZE)

			localctx.(*CreateTableOptionContext).option = _m
		}
		p.SetState(5273)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5272)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5275)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(5276)

			var _m = p.Match(MySQLStatementParserENGINE_ATTRIBUTE)

			localctx.(*CreateTableOptionContext).option = _m
		}
		p.SetState(5278)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5277)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5280)

			var _x = p.String_()

			localctx.(*CreateTableOptionContext).jsonAttribute = _x
		}

	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(5281)

			var _m = p.Match(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE)

			localctx.(*CreateTableOptionContext).option = _m
		}
		{
			p.SetState(5282)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(5283)

			var _x = p.String_()

			localctx.(*CreateTableOptionContext).jsonAttribute = _x
		}

	}

	return localctx
}

// ICreateSRSStatementContext is an interface to support dynamic dispatch.
type ICreateSRSStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateSRSStatementContext differentiates from other interfaces.
	IsCreateSRSStatementContext()
}

type CreateSRSStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateSRSStatementContext() *CreateSRSStatementContext {
	var p = new(CreateSRSStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_createSRSStatement
	return p
}

func (*CreateSRSStatementContext) IsCreateSRSStatementContext() {}

func NewCreateSRSStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateSRSStatementContext {
	var p = new(CreateSRSStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_createSRSStatement

	return p
}

func (s *CreateSRSStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateSRSStatementContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *CreateSRSStatementContext) OR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOR, 0)
}

func (s *CreateSRSStatementContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLACE, 0)
}

func (s *CreateSRSStatementContext) SPATIAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSPATIAL, 0)
}

func (s *CreateSRSStatementContext) REFERENCE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREFERENCE, 0)
}

func (s *CreateSRSStatementContext) SYSTEM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSYSTEM, 0)
}

func (s *CreateSRSStatementContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *CreateSRSStatementContext) AllSrsAttribute() []ISrsAttributeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISrsAttributeContext)(nil)).Elem())
	var tst = make([]ISrsAttributeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISrsAttributeContext)
		}
	}

	return tst
}

func (s *CreateSRSStatementContext) SrsAttribute(i int) ISrsAttributeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISrsAttributeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISrsAttributeContext)
}

func (s *CreateSRSStatementContext) NotExistClause() INotExistClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INotExistClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INotExistClauseContext)
}

func (s *CreateSRSStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateSRSStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateSRSStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateSRSStatement(s)
	}
}

func (s *CreateSRSStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateSRSStatement(s)
	}
}

func (s *CreateSRSStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateSRSStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CreateSRSStatement() (localctx ICreateSRSStatementContext) {
	this := p
	_ = this

	localctx = NewCreateSRSStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 704, MySQLStatementParserRULE_createSRSStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5313)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 668, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5286)
			p.Match(MySQLStatementParserCREATE)
		}
		{
			p.SetState(5287)
			p.Match(MySQLStatementParserOR)
		}
		{
			p.SetState(5288)
			p.Match(MySQLStatementParserREPLACE)
		}
		{
			p.SetState(5289)
			p.Match(MySQLStatementParserSPATIAL)
		}
		{
			p.SetState(5290)
			p.Match(MySQLStatementParserREFERENCE)
		}
		{
			p.SetState(5291)
			p.Match(MySQLStatementParserSYSTEM)
		}
		{
			p.SetState(5292)
			p.Match(MySQLStatementParserNUMBER_)
		}
		p.SetState(5296)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserDEFINITION || _la == MySQLStatementParserDESCRIPTION || _la == MySQLStatementParserNAME || _la == MySQLStatementParserORGANIZATION {
			{
				p.SetState(5293)
				p.SrsAttribute()
			}

			p.SetState(5298)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5299)
			p.Match(MySQLStatementParserCREATE)
		}
		{
			p.SetState(5300)
			p.Match(MySQLStatementParserSPATIAL)
		}
		{
			p.SetState(5301)
			p.Match(MySQLStatementParserREFERENCE)
		}
		{
			p.SetState(5302)
			p.Match(MySQLStatementParserSYSTEM)
		}
		p.SetState(5304)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserIF {
			{
				p.SetState(5303)
				p.NotExistClause()
			}

		}
		{
			p.SetState(5306)
			p.Match(MySQLStatementParserNUMBER_)
		}
		p.SetState(5310)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserDEFINITION || _la == MySQLStatementParserDESCRIPTION || _la == MySQLStatementParserNAME || _la == MySQLStatementParserORGANIZATION {
			{
				p.SetState(5307)
				p.SrsAttribute()
			}

			p.SetState(5312)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IDropSRSStatementContext is an interface to support dynamic dispatch.
type IDropSRSStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropSRSStatementContext differentiates from other interfaces.
	IsDropSRSStatementContext()
}

type DropSRSStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropSRSStatementContext() *DropSRSStatementContext {
	var p = new(DropSRSStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_dropSRSStatement
	return p
}

func (*DropSRSStatementContext) IsDropSRSStatementContext() {}

func NewDropSRSStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropSRSStatementContext {
	var p = new(DropSRSStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_dropSRSStatement

	return p
}

func (s *DropSRSStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DropSRSStatementContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDROP, 0)
}

func (s *DropSRSStatementContext) SPATIAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSPATIAL, 0)
}

func (s *DropSRSStatementContext) REFERENCE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREFERENCE, 0)
}

func (s *DropSRSStatementContext) SYSTEM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSYSTEM, 0)
}

func (s *DropSRSStatementContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *DropSRSStatementContext) NotExistClause() INotExistClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INotExistClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INotExistClauseContext)
}

func (s *DropSRSStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropSRSStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropSRSStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDropSRSStatement(s)
	}
}

func (s *DropSRSStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDropSRSStatement(s)
	}
}

func (s *DropSRSStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDropSRSStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DropSRSStatement() (localctx IDropSRSStatementContext) {
	this := p
	_ = this

	localctx = NewDropSRSStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 706, MySQLStatementParserRULE_dropSRSStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5315)
		p.Match(MySQLStatementParserDROP)
	}
	{
		p.SetState(5316)
		p.Match(MySQLStatementParserSPATIAL)
	}
	{
		p.SetState(5317)
		p.Match(MySQLStatementParserREFERENCE)
	}
	{
		p.SetState(5318)
		p.Match(MySQLStatementParserSYSTEM)
	}
	p.SetState(5320)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIF {
		{
			p.SetState(5319)
			p.NotExistClause()
		}

	}
	{
		p.SetState(5322)
		p.Match(MySQLStatementParserNUMBER_)
	}

	return localctx
}

// ISrsAttributeContext is an interface to support dynamic dispatch.
type ISrsAttributeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSrsAttributeContext differentiates from other interfaces.
	IsSrsAttributeContext()
}

type SrsAttributeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySrsAttributeContext() *SrsAttributeContext {
	var p = new(SrsAttributeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_srsAttribute
	return p
}

func (*SrsAttributeContext) IsSrsAttributeContext() {}

func NewSrsAttributeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SrsAttributeContext {
	var p = new(SrsAttributeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_srsAttribute

	return p
}

func (s *SrsAttributeContext) GetParser() antlr.Parser { return s.parser }

func (s *SrsAttributeContext) NAME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNAME, 0)
}

func (s *SrsAttributeContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *SrsAttributeContext) DEFINITION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFINITION, 0)
}

func (s *SrsAttributeContext) ORGANIZATION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserORGANIZATION, 0)
}

func (s *SrsAttributeContext) IDENTIFIED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIDENTIFIED, 0)
}

func (s *SrsAttributeContext) BY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBY, 0)
}

func (s *SrsAttributeContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *SrsAttributeContext) DESCRIPTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDESCRIPTION, 0)
}

func (s *SrsAttributeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SrsAttributeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SrsAttributeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSrsAttribute(s)
	}
}

func (s *SrsAttributeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSrsAttribute(s)
	}
}

func (s *SrsAttributeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSrsAttribute(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SrsAttribute() (localctx ISrsAttributeContext) {
	this := p
	_ = this

	localctx = NewSrsAttributeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 708, MySQLStatementParserRULE_srsAttribute)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5336)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserNAME:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5324)
			p.Match(MySQLStatementParserNAME)
		}
		{
			p.SetState(5325)
			p.String_()
		}

	case MySQLStatementParserDEFINITION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5326)
			p.Match(MySQLStatementParserDEFINITION)
		}
		{
			p.SetState(5327)
			p.String_()
		}

	case MySQLStatementParserORGANIZATION:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5328)
			p.Match(MySQLStatementParserORGANIZATION)
		}
		{
			p.SetState(5329)
			p.String_()
		}
		{
			p.SetState(5330)
			p.Match(MySQLStatementParserIDENTIFIED)
		}
		{
			p.SetState(5331)
			p.Match(MySQLStatementParserBY)
		}
		{
			p.SetState(5332)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case MySQLStatementParserDESCRIPTION:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5334)
			p.Match(MySQLStatementParserDESCRIPTION)
		}
		{
			p.SetState(5335)
			p.String_()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPlaceContext is an interface to support dynamic dispatch.
type IPlaceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPlaceContext differentiates from other interfaces.
	IsPlaceContext()
}

type PlaceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPlaceContext() *PlaceContext {
	var p = new(PlaceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_place
	return p
}

func (*PlaceContext) IsPlaceContext() {}

func NewPlaceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PlaceContext {
	var p = new(PlaceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_place

	return p
}

func (s *PlaceContext) GetParser() antlr.Parser { return s.parser }

func (s *PlaceContext) FIRST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFIRST, 0)
}

func (s *PlaceContext) AFTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAFTER, 0)
}

func (s *PlaceContext) ColumnName() IColumnNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNameContext)
}

func (s *PlaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PlaceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PlaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterPlace(s)
	}
}

func (s *PlaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitPlace(s)
	}
}

func (s *PlaceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitPlace(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Place() (localctx IPlaceContext) {
	this := p
	_ = this

	localctx = NewPlaceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 710, MySQLStatementParserRULE_place)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5341)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserFIRST:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5338)
			p.Match(MySQLStatementParserFIRST)
		}

	case MySQLStatementParserAFTER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5339)
			p.Match(MySQLStatementParserAFTER)
		}
		{
			p.SetState(5340)
			p.ColumnName()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPartitionDefinitionsContext is an interface to support dynamic dispatch.
type IPartitionDefinitionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitionDefinitionsContext differentiates from other interfaces.
	IsPartitionDefinitionsContext()
}

type PartitionDefinitionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionDefinitionsContext() *PartitionDefinitionsContext {
	var p = new(PartitionDefinitionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_partitionDefinitions
	return p
}

func (*PartitionDefinitionsContext) IsPartitionDefinitionsContext() {}

func NewPartitionDefinitionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionDefinitionsContext {
	var p = new(PartitionDefinitionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_partitionDefinitions

	return p
}

func (s *PartitionDefinitionsContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionDefinitionsContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *PartitionDefinitionsContext) AllPartitionDefinition() []IPartitionDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionDefinitionContext)(nil)).Elem())
	var tst = make([]IPartitionDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionDefinitionContext)
		}
	}

	return tst
}

func (s *PartitionDefinitionsContext) PartitionDefinition(i int) IPartitionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionDefinitionContext)
}

func (s *PartitionDefinitionsContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *PartitionDefinitionsContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *PartitionDefinitionsContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *PartitionDefinitionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionDefinitionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartitionDefinitionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterPartitionDefinitions(s)
	}
}

func (s *PartitionDefinitionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitPartitionDefinitions(s)
	}
}

func (s *PartitionDefinitionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitPartitionDefinitions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) PartitionDefinitions() (localctx IPartitionDefinitionsContext) {
	this := p
	_ = this

	localctx = NewPartitionDefinitionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 712, MySQLStatementParserRULE_partitionDefinitions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5343)
		p.Match(MySQLStatementParserLP_)
	}
	{
		p.SetState(5344)
		p.PartitionDefinition()
	}
	p.SetState(5349)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(5345)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(5346)
			p.PartitionDefinition()
		}

		p.SetState(5351)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(5352)
		p.Match(MySQLStatementParserRP_)
	}

	return localctx
}

// IPartitionDefinitionContext is an interface to support dynamic dispatch.
type IPartitionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitionDefinitionContext differentiates from other interfaces.
	IsPartitionDefinitionContext()
}

type PartitionDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionDefinitionContext() *PartitionDefinitionContext {
	var p = new(PartitionDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_partitionDefinition
	return p
}

func (*PartitionDefinitionContext) IsPartitionDefinitionContext() {}

func NewPartitionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionDefinitionContext {
	var p = new(PartitionDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_partitionDefinition

	return p
}

func (s *PartitionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionDefinitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPARTITION, 0)
}

func (s *PartitionDefinitionContext) PartitionName() IPartitionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionNameContext)
}

func (s *PartitionDefinitionContext) VALUES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVALUES, 0)
}

func (s *PartitionDefinitionContext) AllPartitionDefinitionOption() []IPartitionDefinitionOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionDefinitionOptionContext)(nil)).Elem())
	var tst = make([]IPartitionDefinitionOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionDefinitionOptionContext)
		}
	}

	return tst
}

func (s *PartitionDefinitionContext) PartitionDefinitionOption(i int) IPartitionDefinitionOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionDefinitionOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionDefinitionOptionContext)
}

func (s *PartitionDefinitionContext) AllLP_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserLP_)
}

func (s *PartitionDefinitionContext) LP_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, i)
}

func (s *PartitionDefinitionContext) AllSubpartitionDefinition() []ISubpartitionDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISubpartitionDefinitionContext)(nil)).Elem())
	var tst = make([]ISubpartitionDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISubpartitionDefinitionContext)
		}
	}

	return tst
}

func (s *PartitionDefinitionContext) SubpartitionDefinition(i int) ISubpartitionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubpartitionDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISubpartitionDefinitionContext)
}

func (s *PartitionDefinitionContext) AllRP_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserRP_)
}

func (s *PartitionDefinitionContext) RP_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, i)
}

func (s *PartitionDefinitionContext) LESS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLESS, 0)
}

func (s *PartitionDefinitionContext) THAN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTHAN, 0)
}

func (s *PartitionDefinitionContext) PartitionLessThanValue() IPartitionLessThanValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionLessThanValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionLessThanValueContext)
}

func (s *PartitionDefinitionContext) IN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIN, 0)
}

func (s *PartitionDefinitionContext) PartitionValueList() IPartitionValueListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionValueListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionValueListContext)
}

func (s *PartitionDefinitionContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *PartitionDefinitionContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *PartitionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartitionDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterPartitionDefinition(s)
	}
}

func (s *PartitionDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitPartitionDefinition(s)
	}
}

func (s *PartitionDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitPartitionDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) PartitionDefinition() (localctx IPartitionDefinitionContext) {
	this := p
	_ = this

	localctx = NewPartitionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 714, MySQLStatementParserRULE_partitionDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5354)
		p.Match(MySQLStatementParserPARTITION)
	}
	{
		p.SetState(5355)
		p.PartitionName()
	}
	p.SetState(5367)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserVALUES {
		{
			p.SetState(5356)
			p.Match(MySQLStatementParserVALUES)
		}
		p.SetState(5365)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySQLStatementParserLESS:
			{
				p.SetState(5357)
				p.Match(MySQLStatementParserLESS)
			}
			{
				p.SetState(5358)
				p.Match(MySQLStatementParserTHAN)
			}
			{
				p.SetState(5359)
				p.PartitionLessThanValue()
			}

		case MySQLStatementParserIN:
			{
				p.SetState(5360)
				p.Match(MySQLStatementParserIN)
			}
			{
				p.SetState(5361)
				p.Match(MySQLStatementParserLP_)
			}
			{
				p.SetState(5362)
				p.PartitionValueList()
			}
			{
				p.SetState(5363)
				p.Match(MySQLStatementParserRP_)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	p.SetState(5372)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMENT || _la == MySQLStatementParserDATA || _la == MySQLStatementParserENGINE || _la == MySQLStatementParserINDEX || _la == MySQLStatementParserMAX_ROWS || _la == MySQLStatementParserMIN_ROWS || _la == MySQLStatementParserSTORAGE || _la == MySQLStatementParserTABLESPACE {
		{
			p.SetState(5369)
			p.PartitionDefinitionOption()
		}

		p.SetState(5374)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(5386)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLP_ {
		{
			p.SetState(5375)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(5376)
			p.SubpartitionDefinition()
		}
		p.SetState(5381)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(5377)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(5378)
				p.SubpartitionDefinition()
			}

			p.SetState(5383)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(5384)
			p.Match(MySQLStatementParserRP_)
		}

	}

	return localctx
}

// IPartitionLessThanValueContext is an interface to support dynamic dispatch.
type IPartitionLessThanValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitionLessThanValueContext differentiates from other interfaces.
	IsPartitionLessThanValueContext()
}

type PartitionLessThanValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionLessThanValueContext() *PartitionLessThanValueContext {
	var p = new(PartitionLessThanValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_partitionLessThanValue
	return p
}

func (*PartitionLessThanValueContext) IsPartitionLessThanValueContext() {}

func NewPartitionLessThanValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionLessThanValueContext {
	var p = new(PartitionLessThanValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_partitionLessThanValue

	return p
}

func (s *PartitionLessThanValueContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionLessThanValueContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *PartitionLessThanValueContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *PartitionLessThanValueContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *PartitionLessThanValueContext) PartitionValueList() IPartitionValueListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionValueListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionValueListContext)
}

func (s *PartitionLessThanValueContext) MAXVALUE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMAXVALUE, 0)
}

func (s *PartitionLessThanValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionLessThanValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartitionLessThanValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterPartitionLessThanValue(s)
	}
}

func (s *PartitionLessThanValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitPartitionLessThanValue(s)
	}
}

func (s *PartitionLessThanValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitPartitionLessThanValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) PartitionLessThanValue() (localctx IPartitionLessThanValueContext) {
	this := p
	_ = this

	localctx = NewPartitionLessThanValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 716, MySQLStatementParserRULE_partitionLessThanValue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5396)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserLP_:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5388)
			p.Match(MySQLStatementParserLP_)
		}
		p.SetState(5391)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 678, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(5389)
				p.expr(0)
			}

		case 2:
			{
				p.SetState(5390)
				p.PartitionValueList()
			}

		}
		{
			p.SetState(5393)
			p.Match(MySQLStatementParserRP_)
		}

	case MySQLStatementParserMAXVALUE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5395)
			p.Match(MySQLStatementParserMAXVALUE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPartitionValueListContext is an interface to support dynamic dispatch.
type IPartitionValueListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitionValueListContext differentiates from other interfaces.
	IsPartitionValueListContext()
}

type PartitionValueListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionValueListContext() *PartitionValueListContext {
	var p = new(PartitionValueListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_partitionValueList
	return p
}

func (*PartitionValueListContext) IsPartitionValueListContext() {}

func NewPartitionValueListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionValueListContext {
	var p = new(PartitionValueListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_partitionValueList

	return p
}

func (s *PartitionValueListContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionValueListContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *PartitionValueListContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *PartitionValueListContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *PartitionValueListContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *PartitionValueListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionValueListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartitionValueListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterPartitionValueList(s)
	}
}

func (s *PartitionValueListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitPartitionValueList(s)
	}
}

func (s *PartitionValueListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitPartitionValueList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) PartitionValueList() (localctx IPartitionValueListContext) {
	this := p
	_ = this

	localctx = NewPartitionValueListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 718, MySQLStatementParserRULE_partitionValueList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5398)
		p.expr(0)
	}
	p.SetState(5403)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(5399)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(5400)
			p.expr(0)
		}

		p.SetState(5405)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPartitionDefinitionOptionContext is an interface to support dynamic dispatch.
type IPartitionDefinitionOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitionDefinitionOptionContext differentiates from other interfaces.
	IsPartitionDefinitionOptionContext()
}

type PartitionDefinitionOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionDefinitionOptionContext() *PartitionDefinitionOptionContext {
	var p = new(PartitionDefinitionOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_partitionDefinitionOption
	return p
}

func (*PartitionDefinitionOptionContext) IsPartitionDefinitionOptionContext() {}

func NewPartitionDefinitionOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionDefinitionOptionContext {
	var p = new(PartitionDefinitionOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_partitionDefinitionOption

	return p
}

func (s *PartitionDefinitionOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionDefinitionOptionContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENGINE, 0)
}

func (s *PartitionDefinitionOptionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *PartitionDefinitionOptionContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTORAGE, 0)
}

func (s *PartitionDefinitionOptionContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *PartitionDefinitionOptionContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMENT, 0)
}

func (s *PartitionDefinitionOptionContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *PartitionDefinitionOptionContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDATA, 0)
}

func (s *PartitionDefinitionOptionContext) DIRECTORY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDIRECTORY, 0)
}

func (s *PartitionDefinitionOptionContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINDEX, 0)
}

func (s *PartitionDefinitionOptionContext) MAX_ROWS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMAX_ROWS, 0)
}

func (s *PartitionDefinitionOptionContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *PartitionDefinitionOptionContext) MIN_ROWS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMIN_ROWS, 0)
}

func (s *PartitionDefinitionOptionContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLESPACE, 0)
}

func (s *PartitionDefinitionOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionDefinitionOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartitionDefinitionOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterPartitionDefinitionOption(s)
	}
}

func (s *PartitionDefinitionOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitPartitionDefinitionOption(s)
	}
}

func (s *PartitionDefinitionOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitPartitionDefinitionOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) PartitionDefinitionOption() (localctx IPartitionDefinitionOptionContext) {
	this := p
	_ = this

	localctx = NewPartitionDefinitionOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 720, MySQLStatementParserRULE_partitionDefinitionOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5446)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserENGINE, MySQLStatementParserSTORAGE:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(5407)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserSTORAGE {
			{
				p.SetState(5406)
				p.Match(MySQLStatementParserSTORAGE)
			}

		}
		{
			p.SetState(5409)
			p.Match(MySQLStatementParserENGINE)
		}
		p.SetState(5411)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5410)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5413)
			p.Identifier()
		}

	case MySQLStatementParserCOMMENT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5414)
			p.Match(MySQLStatementParserCOMMENT)
		}
		p.SetState(5416)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5415)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5418)
			p.String_()
		}

	case MySQLStatementParserDATA:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5419)
			p.Match(MySQLStatementParserDATA)
		}
		{
			p.SetState(5420)
			p.Match(MySQLStatementParserDIRECTORY)
		}
		p.SetState(5422)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5421)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5424)
			p.String_()
		}

	case MySQLStatementParserINDEX:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5425)
			p.Match(MySQLStatementParserINDEX)
		}
		{
			p.SetState(5426)
			p.Match(MySQLStatementParserDIRECTORY)
		}
		p.SetState(5428)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5427)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5430)
			p.String_()
		}

	case MySQLStatementParserMAX_ROWS:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5431)
			p.Match(MySQLStatementParserMAX_ROWS)
		}
		p.SetState(5433)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5432)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5435)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case MySQLStatementParserMIN_ROWS:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5436)
			p.Match(MySQLStatementParserMIN_ROWS)
		}
		p.SetState(5438)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5437)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5440)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case MySQLStatementParserTABLESPACE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5441)
			p.Match(MySQLStatementParserTABLESPACE)
		}
		p.SetState(5443)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(5442)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(5445)
			p.Identifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISubpartitionDefinitionContext is an interface to support dynamic dispatch.
type ISubpartitionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubpartitionDefinitionContext differentiates from other interfaces.
	IsSubpartitionDefinitionContext()
}

type SubpartitionDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubpartitionDefinitionContext() *SubpartitionDefinitionContext {
	var p = new(SubpartitionDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_subpartitionDefinition
	return p
}

func (*SubpartitionDefinitionContext) IsSubpartitionDefinitionContext() {}

func NewSubpartitionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubpartitionDefinitionContext {
	var p = new(SubpartitionDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_subpartitionDefinition

	return p
}

func (s *SubpartitionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *SubpartitionDefinitionContext) SUBPARTITION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSUBPARTITION, 0)
}

func (s *SubpartitionDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *SubpartitionDefinitionContext) AllPartitionDefinitionOption() []IPartitionDefinitionOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionDefinitionOptionContext)(nil)).Elem())
	var tst = make([]IPartitionDefinitionOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionDefinitionOptionContext)
		}
	}

	return tst
}

func (s *SubpartitionDefinitionContext) PartitionDefinitionOption(i int) IPartitionDefinitionOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionDefinitionOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionDefinitionOptionContext)
}

func (s *SubpartitionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubpartitionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubpartitionDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSubpartitionDefinition(s)
	}
}

func (s *SubpartitionDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSubpartitionDefinition(s)
	}
}

func (s *SubpartitionDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSubpartitionDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SubpartitionDefinition() (localctx ISubpartitionDefinitionContext) {
	this := p
	_ = this

	localctx = NewSubpartitionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 722, MySQLStatementParserRULE_subpartitionDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5448)
		p.Match(MySQLStatementParserSUBPARTITION)
	}
	{
		p.SetState(5449)
		p.Identifier()
	}
	p.SetState(5453)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMENT || _la == MySQLStatementParserDATA || _la == MySQLStatementParserENGINE || _la == MySQLStatementParserINDEX || _la == MySQLStatementParserMAX_ROWS || _la == MySQLStatementParserMIN_ROWS || _la == MySQLStatementParserSTORAGE || _la == MySQLStatementParserTABLESPACE {
		{
			p.SetState(5450)
			p.PartitionDefinitionOption()
		}

		p.SetState(5455)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IOwnerStatementContext is an interface to support dynamic dispatch.
type IOwnerStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOwnerStatementContext differentiates from other interfaces.
	IsOwnerStatementContext()
}

type OwnerStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOwnerStatementContext() *OwnerStatementContext {
	var p = new(OwnerStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_ownerStatement
	return p
}

func (*OwnerStatementContext) IsOwnerStatementContext() {}

func NewOwnerStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OwnerStatementContext {
	var p = new(OwnerStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_ownerStatement

	return p
}

func (s *OwnerStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *OwnerStatementContext) DEFINER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFINER, 0)
}

func (s *OwnerStatementContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *OwnerStatementContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *OwnerStatementContext) CURRENT_USER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCURRENT_USER, 0)
}

func (s *OwnerStatementContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *OwnerStatementContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *OwnerStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OwnerStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OwnerStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterOwnerStatement(s)
	}
}

func (s *OwnerStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitOwnerStatement(s)
	}
}

func (s *OwnerStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitOwnerStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) OwnerStatement() (localctx IOwnerStatementContext) {
	this := p
	_ = this

	localctx = NewOwnerStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 724, MySQLStatementParserRULE_ownerStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5456)
		p.Match(MySQLStatementParserDEFINER)
	}
	{
		p.SetState(5457)
		p.Match(MySQLStatementParserEQ_)
	}
	p.SetState(5464)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 692, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(5458)
			p.UserName()
		}

	case 2:
		{
			p.SetState(5459)
			p.Match(MySQLStatementParserCURRENT_USER)
		}
		p.SetState(5462)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserLP_ {
			{
				p.SetState(5460)
				p.Match(MySQLStatementParserLP_)
			}
			{
				p.SetState(5461)
				p.Match(MySQLStatementParserRP_)
			}

		}

	}

	return localctx
}

// IScheduleExpressionContext is an interface to support dynamic dispatch.
type IScheduleExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsScheduleExpressionContext differentiates from other interfaces.
	IsScheduleExpressionContext()
}

type ScheduleExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyScheduleExpressionContext() *ScheduleExpressionContext {
	var p = new(ScheduleExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_scheduleExpression
	return p
}

func (*ScheduleExpressionContext) IsScheduleExpressionContext() {}

func NewScheduleExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ScheduleExpressionContext {
	var p = new(ScheduleExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_scheduleExpression

	return p
}

func (s *ScheduleExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ScheduleExpressionContext) AT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAT, 0)
}

func (s *ScheduleExpressionContext) AllTimestampValue() []ITimestampValueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITimestampValueContext)(nil)).Elem())
	var tst = make([]ITimestampValueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITimestampValueContext)
		}
	}

	return tst
}

func (s *ScheduleExpressionContext) TimestampValue(i int) ITimestampValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimestampValueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITimestampValueContext)
}

func (s *ScheduleExpressionContext) AllPLUS_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserPLUS_)
}

func (s *ScheduleExpressionContext) PLUS_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPLUS_, i)
}

func (s *ScheduleExpressionContext) AllIntervalExpression() []IIntervalExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIntervalExpressionContext)(nil)).Elem())
	var tst = make([]IIntervalExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIntervalExpressionContext)
		}
	}

	return tst
}

func (s *ScheduleExpressionContext) IntervalExpression(i int) IIntervalExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIntervalExpressionContext)
}

func (s *ScheduleExpressionContext) EVERY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEVERY, 0)
}

func (s *ScheduleExpressionContext) IntervalValue() IIntervalValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntervalValueContext)
}

func (s *ScheduleExpressionContext) STARTS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTARTS, 0)
}

func (s *ScheduleExpressionContext) ENDS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENDS, 0)
}

func (s *ScheduleExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ScheduleExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ScheduleExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterScheduleExpression(s)
	}
}

func (s *ScheduleExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitScheduleExpression(s)
	}
}

func (s *ScheduleExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitScheduleExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ScheduleExpression() (localctx IScheduleExpressionContext) {
	this := p
	_ = this

	localctx = NewScheduleExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 726, MySQLStatementParserRULE_scheduleExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5499)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserAT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5466)
			p.Match(MySQLStatementParserAT)
		}
		{
			p.SetState(5467)
			p.TimestampValue()
		}
		p.SetState(5472)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserPLUS_ {
			{
				p.SetState(5468)
				p.Match(MySQLStatementParserPLUS_)
			}
			{
				p.SetState(5469)
				p.IntervalExpression()
			}

			p.SetState(5474)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case MySQLStatementParserEVERY:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5475)
			p.Match(MySQLStatementParserEVERY)
		}
		{
			p.SetState(5476)
			p.IntervalValue()
		}
		p.SetState(5486)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserSTARTS {
			{
				p.SetState(5477)
				p.Match(MySQLStatementParserSTARTS)
			}
			{
				p.SetState(5478)
				p.TimestampValue()
			}
			p.SetState(5483)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySQLStatementParserPLUS_ {
				{
					p.SetState(5479)
					p.Match(MySQLStatementParserPLUS_)
				}
				{
					p.SetState(5480)
					p.IntervalExpression()
				}

				p.SetState(5485)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(5497)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserENDS {
			{
				p.SetState(5488)
				p.Match(MySQLStatementParserENDS)
			}
			{
				p.SetState(5489)
				p.TimestampValue()
			}
			p.SetState(5494)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySQLStatementParserPLUS_ {
				{
					p.SetState(5490)
					p.Match(MySQLStatementParserPLUS_)
				}
				{
					p.SetState(5491)
					p.IntervalExpression()
				}

				p.SetState(5496)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITimestampValueContext is an interface to support dynamic dispatch.
type ITimestampValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTimestampValueContext differentiates from other interfaces.
	IsTimestampValueContext()
}

type TimestampValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTimestampValueContext() *TimestampValueContext {
	var p = new(TimestampValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_timestampValue
	return p
}

func (*TimestampValueContext) IsTimestampValueContext() {}

func NewTimestampValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TimestampValueContext {
	var p = new(TimestampValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_timestampValue

	return p
}

func (s *TimestampValueContext) GetParser() antlr.Parser { return s.parser }

func (s *TimestampValueContext) CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCURRENT_TIMESTAMP, 0)
}

func (s *TimestampValueContext) StringLiterals() IStringLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralsContext)
}

func (s *TimestampValueContext) NumberLiterals() INumberLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumberLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumberLiteralsContext)
}

func (s *TimestampValueContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *TimestampValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TimestampValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TimestampValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTimestampValue(s)
	}
}

func (s *TimestampValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTimestampValue(s)
	}
}

func (s *TimestampValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTimestampValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TimestampValue() (localctx ITimestampValueContext) {
	this := p
	_ = this

	localctx = NewTimestampValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 728, MySQLStatementParserRULE_timestampValue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5505)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 699, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5501)
			p.Match(MySQLStatementParserCURRENT_TIMESTAMP)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5502)
			p.StringLiterals()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5503)
			p.NumberLiterals()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5504)
			p.expr(0)
		}

	}

	return localctx
}

// IRoutineBodyContext is an interface to support dynamic dispatch.
type IRoutineBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRoutineBodyContext differentiates from other interfaces.
	IsRoutineBodyContext()
}

type RoutineBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRoutineBodyContext() *RoutineBodyContext {
	var p = new(RoutineBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_routineBody
	return p
}

func (*RoutineBodyContext) IsRoutineBodyContext() {}

func NewRoutineBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RoutineBodyContext {
	var p = new(RoutineBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_routineBody

	return p
}

func (s *RoutineBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *RoutineBodyContext) SimpleStatement() ISimpleStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleStatementContext)
}

func (s *RoutineBodyContext) CompoundStatement() ICompoundStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompoundStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICompoundStatementContext)
}

func (s *RoutineBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RoutineBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RoutineBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterRoutineBody(s)
	}
}

func (s *RoutineBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitRoutineBody(s)
	}
}

func (s *RoutineBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitRoutineBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) RoutineBody() (localctx IRoutineBodyContext) {
	this := p
	_ = this

	localctx = NewRoutineBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 730, MySQLStatementParserRULE_routineBody)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5509)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 700, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5507)
			p.SimpleStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5508)
			p.CompoundStatement()
		}

	}

	return localctx
}

// IServerOptionContext is an interface to support dynamic dispatch.
type IServerOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsServerOptionContext differentiates from other interfaces.
	IsServerOptionContext()
}

type ServerOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyServerOptionContext() *ServerOptionContext {
	var p = new(ServerOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_serverOption
	return p
}

func (*ServerOptionContext) IsServerOptionContext() {}

func NewServerOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ServerOptionContext {
	var p = new(ServerOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_serverOption

	return p
}

func (s *ServerOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *ServerOptionContext) HOST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHOST, 0)
}

func (s *ServerOptionContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *ServerOptionContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDATABASE, 0)
}

func (s *ServerOptionContext) USER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUSER, 0)
}

func (s *ServerOptionContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPASSWORD, 0)
}

func (s *ServerOptionContext) SOCKET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSOCKET, 0)
}

func (s *ServerOptionContext) OWNER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOWNER, 0)
}

func (s *ServerOptionContext) PORT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPORT, 0)
}

func (s *ServerOptionContext) NumberLiterals() INumberLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumberLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumberLiteralsContext)
}

func (s *ServerOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ServerOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ServerOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterServerOption(s)
	}
}

func (s *ServerOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitServerOption(s)
	}
}

func (s *ServerOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitServerOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ServerOption() (localctx IServerOptionContext) {
	this := p
	_ = this

	localctx = NewServerOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 732, MySQLStatementParserRULE_serverOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5525)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserHOST:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5511)
			p.Match(MySQLStatementParserHOST)
		}
		{
			p.SetState(5512)
			p.String_()
		}

	case MySQLStatementParserDATABASE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5513)
			p.Match(MySQLStatementParserDATABASE)
		}
		{
			p.SetState(5514)
			p.String_()
		}

	case MySQLStatementParserUSER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5515)
			p.Match(MySQLStatementParserUSER)
		}
		{
			p.SetState(5516)
			p.String_()
		}

	case MySQLStatementParserPASSWORD:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5517)
			p.Match(MySQLStatementParserPASSWORD)
		}
		{
			p.SetState(5518)
			p.String_()
		}

	case MySQLStatementParserSOCKET:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5519)
			p.Match(MySQLStatementParserSOCKET)
		}
		{
			p.SetState(5520)
			p.String_()
		}

	case MySQLStatementParserOWNER:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5521)
			p.Match(MySQLStatementParserOWNER)
		}
		{
			p.SetState(5522)
			p.String_()
		}

	case MySQLStatementParserPORT:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5523)
			p.Match(MySQLStatementParserPORT)
		}
		{
			p.SetState(5524)
			p.NumberLiterals()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IRoutineOptionContext is an interface to support dynamic dispatch.
type IRoutineOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRoutineOptionContext differentiates from other interfaces.
	IsRoutineOptionContext()
}

type RoutineOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRoutineOptionContext() *RoutineOptionContext {
	var p = new(RoutineOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_routineOption
	return p
}

func (*RoutineOptionContext) IsRoutineOptionContext() {}

func NewRoutineOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RoutineOptionContext {
	var p = new(RoutineOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_routineOption

	return p
}

func (s *RoutineOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *RoutineOptionContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMENT, 0)
}

func (s *RoutineOptionContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *RoutineOptionContext) LANGUAGE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLANGUAGE, 0)
}

func (s *RoutineOptionContext) SQL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSQL, 0)
}

func (s *RoutineOptionContext) DETERMINISTIC() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDETERMINISTIC, 0)
}

func (s *RoutineOptionContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNOT, 0)
}

func (s *RoutineOptionContext) CONTAINS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCONTAINS, 0)
}

func (s *RoutineOptionContext) NO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNO, 0)
}

func (s *RoutineOptionContext) READS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREADS, 0)
}

func (s *RoutineOptionContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDATA, 0)
}

func (s *RoutineOptionContext) MODIFIES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMODIFIES, 0)
}

func (s *RoutineOptionContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSECURITY, 0)
}

func (s *RoutineOptionContext) DEFINER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFINER, 0)
}

func (s *RoutineOptionContext) INVOKER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINVOKER, 0)
}

func (s *RoutineOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RoutineOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RoutineOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterRoutineOption(s)
	}
}

func (s *RoutineOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitRoutineOption(s)
	}
}

func (s *RoutineOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitRoutineOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) RoutineOption() (localctx IRoutineOptionContext) {
	this := p
	_ = this

	localctx = NewRoutineOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 734, MySQLStatementParserRULE_routineOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5550)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserCOMMENT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5527)
			p.Match(MySQLStatementParserCOMMENT)
		}
		{
			p.SetState(5528)
			p.String_()
		}

	case MySQLStatementParserLANGUAGE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5529)
			p.Match(MySQLStatementParserLANGUAGE)
		}
		{
			p.SetState(5530)
			p.Match(MySQLStatementParserSQL)
		}

	case MySQLStatementParserDETERMINISTIC, MySQLStatementParserNOT:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(5532)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserNOT {
			{
				p.SetState(5531)
				p.Match(MySQLStatementParserNOT)
			}

		}
		{
			p.SetState(5534)
			p.Match(MySQLStatementParserDETERMINISTIC)
		}

	case MySQLStatementParserCONTAINS, MySQLStatementParserMODIFIES, MySQLStatementParserNO, MySQLStatementParserREADS:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(5545)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySQLStatementParserCONTAINS:
			{
				p.SetState(5535)
				p.Match(MySQLStatementParserCONTAINS)
			}
			{
				p.SetState(5536)
				p.Match(MySQLStatementParserSQL)
			}

		case MySQLStatementParserNO:
			{
				p.SetState(5537)
				p.Match(MySQLStatementParserNO)
			}
			{
				p.SetState(5538)
				p.Match(MySQLStatementParserSQL)
			}

		case MySQLStatementParserREADS:
			{
				p.SetState(5539)
				p.Match(MySQLStatementParserREADS)
			}
			{
				p.SetState(5540)
				p.Match(MySQLStatementParserSQL)
			}
			{
				p.SetState(5541)
				p.Match(MySQLStatementParserDATA)
			}

		case MySQLStatementParserMODIFIES:
			{
				p.SetState(5542)
				p.Match(MySQLStatementParserMODIFIES)
			}
			{
				p.SetState(5543)
				p.Match(MySQLStatementParserSQL)
			}
			{
				p.SetState(5544)
				p.Match(MySQLStatementParserDATA)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case MySQLStatementParserSQL:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5547)
			p.Match(MySQLStatementParserSQL)
		}
		{
			p.SetState(5548)
			p.Match(MySQLStatementParserSECURITY)
		}
		{
			p.SetState(5549)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserDEFINER || _la == MySQLStatementParserINVOKER) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IProcedureParameterContext is an interface to support dynamic dispatch.
type IProcedureParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProcedureParameterContext differentiates from other interfaces.
	IsProcedureParameterContext()
}

type ProcedureParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProcedureParameterContext() *ProcedureParameterContext {
	var p = new(ProcedureParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_procedureParameter
	return p
}

func (*ProcedureParameterContext) IsProcedureParameterContext() {}

func NewProcedureParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProcedureParameterContext {
	var p = new(ProcedureParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_procedureParameter

	return p
}

func (s *ProcedureParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *ProcedureParameterContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ProcedureParameterContext) DataType() IDataTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDataTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *ProcedureParameterContext) IN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIN, 0)
}

func (s *ProcedureParameterContext) OUT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOUT, 0)
}

func (s *ProcedureParameterContext) INOUT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINOUT, 0)
}

func (s *ProcedureParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProcedureParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProcedureParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterProcedureParameter(s)
	}
}

func (s *ProcedureParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitProcedureParameter(s)
	}
}

func (s *ProcedureParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitProcedureParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ProcedureParameter() (localctx IProcedureParameterContext) {
	this := p
	_ = this

	localctx = NewProcedureParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 736, MySQLStatementParserRULE_procedureParameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5553)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIN || _la == MySQLStatementParserINOUT || _la == MySQLStatementParserOUT {
		{
			p.SetState(5552)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserIN || _la == MySQLStatementParserINOUT || _la == MySQLStatementParserOUT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(5555)
		p.Identifier()
	}
	{
		p.SetState(5556)
		p.DataType()
	}

	return localctx
}

// IFileSizeLiteralContext is an interface to support dynamic dispatch.
type IFileSizeLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFileSizeLiteralContext differentiates from other interfaces.
	IsFileSizeLiteralContext()
}

type FileSizeLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFileSizeLiteralContext() *FileSizeLiteralContext {
	var p = new(FileSizeLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_fileSizeLiteral
	return p
}

func (*FileSizeLiteralContext) IsFileSizeLiteralContext() {}

func NewFileSizeLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FileSizeLiteralContext {
	var p = new(FileSizeLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_fileSizeLiteral

	return p
}

func (s *FileSizeLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *FileSizeLiteralContext) FILESIZE_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFILESIZE_LITERAL, 0)
}

func (s *FileSizeLiteralContext) NumberLiterals() INumberLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumberLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumberLiteralsContext)
}

func (s *FileSizeLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FileSizeLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FileSizeLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterFileSizeLiteral(s)
	}
}

func (s *FileSizeLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitFileSizeLiteral(s)
	}
}

func (s *FileSizeLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitFileSizeLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) FileSizeLiteral() (localctx IFileSizeLiteralContext) {
	this := p
	_ = this

	localctx = NewFileSizeLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 738, MySQLStatementParserRULE_fileSizeLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5560)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserFILESIZE_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5558)
			p.Match(MySQLStatementParserFILESIZE_LITERAL)
		}

	case MySQLStatementParserNUMBER_:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5559)
			p.NumberLiterals()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISimpleStatementContext is an interface to support dynamic dispatch.
type ISimpleStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimpleStatementContext differentiates from other interfaces.
	IsSimpleStatementContext()
}

type SimpleStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleStatementContext() *SimpleStatementContext {
	var p = new(SimpleStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_simpleStatement
	return p
}

func (*SimpleStatementContext) IsSimpleStatementContext() {}

func NewSimpleStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleStatementContext {
	var p = new(SimpleStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_simpleStatement

	return p
}

func (s *SimpleStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleStatementContext) ValidStatement() IValidStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValidStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValidStatementContext)
}

func (s *SimpleStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSimpleStatement(s)
	}
}

func (s *SimpleStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSimpleStatement(s)
	}
}

func (s *SimpleStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSimpleStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SimpleStatement() (localctx ISimpleStatementContext) {
	this := p
	_ = this

	localctx = NewSimpleStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 740, MySQLStatementParserRULE_simpleStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5562)
		p.ValidStatement()
	}

	return localctx
}

// ICompoundStatementContext is an interface to support dynamic dispatch.
type ICompoundStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCompoundStatementContext differentiates from other interfaces.
	IsCompoundStatementContext()
}

type CompoundStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompoundStatementContext() *CompoundStatementContext {
	var p = new(CompoundStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_compoundStatement
	return p
}

func (*CompoundStatementContext) IsCompoundStatementContext() {}

func NewCompoundStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CompoundStatementContext {
	var p = new(CompoundStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_compoundStatement

	return p
}

func (s *CompoundStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CompoundStatementContext) BeginStatement() IBeginStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBeginStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBeginStatementContext)
}

func (s *CompoundStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CompoundStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CompoundStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCompoundStatement(s)
	}
}

func (s *CompoundStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCompoundStatement(s)
	}
}

func (s *CompoundStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCompoundStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CompoundStatement() (localctx ICompoundStatementContext) {
	this := p
	_ = this

	localctx = NewCompoundStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 742, MySQLStatementParserRULE_compoundStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5564)
		p.BeginStatement()
	}

	return localctx
}

// IValidStatementContext is an interface to support dynamic dispatch.
type IValidStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsValidStatementContext differentiates from other interfaces.
	IsValidStatementContext()
}

type ValidStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValidStatementContext() *ValidStatementContext {
	var p = new(ValidStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_validStatement
	return p
}

func (*ValidStatementContext) IsValidStatementContext() {}

func NewValidStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ValidStatementContext {
	var p = new(ValidStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_validStatement

	return p
}

func (s *ValidStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ValidStatementContext) CreateTable() ICreateTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateTableContext)
}

func (s *ValidStatementContext) AlterTable() IAlterTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterTableContext)
}

func (s *ValidStatementContext) DropTable() IDropTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropTableContext)
}

func (s *ValidStatementContext) TruncateTable() ITruncateTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITruncateTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITruncateTableContext)
}

func (s *ValidStatementContext) Insert() IInsertContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsertContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsertContext)
}

func (s *ValidStatementContext) Replace() IReplaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReplaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReplaceContext)
}

func (s *ValidStatementContext) Update() IUpdateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdateContext)
}

func (s *ValidStatementContext) Delete() IDeleteContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeleteContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeleteContext)
}

func (s *ValidStatementContext) Select() ISelectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectContext)
}

func (s *ValidStatementContext) Call() ICallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *ValidStatementContext) SetVariable() ISetVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetVariableContext)
}

func (s *ValidStatementContext) BeginStatement() IBeginStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBeginStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBeginStatementContext)
}

func (s *ValidStatementContext) DeclareStatement() IDeclareStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclareStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclareStatementContext)
}

func (s *ValidStatementContext) FlowControlStatement() IFlowControlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFlowControlStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFlowControlStatementContext)
}

func (s *ValidStatementContext) CursorStatement() ICursorStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursorStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursorStatementContext)
}

func (s *ValidStatementContext) ConditionHandlingStatement() IConditionHandlingStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionHandlingStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionHandlingStatementContext)
}

func (s *ValidStatementContext) SEMI_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSEMI_, 0)
}

func (s *ValidStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValidStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ValidStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterValidStatement(s)
	}
}

func (s *ValidStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitValidStatement(s)
	}
}

func (s *ValidStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitValidStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ValidStatement() (localctx IValidStatementContext) {
	this := p
	_ = this

	localctx = NewValidStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 744, MySQLStatementParserRULE_validStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5582)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 707, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(5566)
			p.CreateTable()
		}

	case 2:
		{
			p.SetState(5567)
			p.AlterTable()
		}

	case 3:
		{
			p.SetState(5568)
			p.DropTable()
		}

	case 4:
		{
			p.SetState(5569)
			p.TruncateTable()
		}

	case 5:
		{
			p.SetState(5570)
			p.Insert()
		}

	case 6:
		{
			p.SetState(5571)
			p.Replace()
		}

	case 7:
		{
			p.SetState(5572)
			p.Update()
		}

	case 8:
		{
			p.SetState(5573)
			p.Delete()
		}

	case 9:
		{
			p.SetState(5574)
			p.Select()
		}

	case 10:
		{
			p.SetState(5575)
			p.Call()
		}

	case 11:
		{
			p.SetState(5576)
			p.SetVariable()
		}

	case 12:
		{
			p.SetState(5577)
			p.BeginStatement()
		}

	case 13:
		{
			p.SetState(5578)
			p.DeclareStatement()
		}

	case 14:
		{
			p.SetState(5579)
			p.FlowControlStatement()
		}

	case 15:
		{
			p.SetState(5580)
			p.CursorStatement()
		}

	case 16:
		{
			p.SetState(5581)
			p.ConditionHandlingStatement()
		}

	}
	p.SetState(5585)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 708, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5584)
			p.Match(MySQLStatementParserSEMI_)
		}

	}

	return localctx
}

// IBeginStatementContext is an interface to support dynamic dispatch.
type IBeginStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBeginStatementContext differentiates from other interfaces.
	IsBeginStatementContext()
}

type BeginStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBeginStatementContext() *BeginStatementContext {
	var p = new(BeginStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_beginStatement
	return p
}

func (*BeginStatementContext) IsBeginStatementContext() {}

func NewBeginStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BeginStatementContext {
	var p = new(BeginStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_beginStatement

	return p
}

func (s *BeginStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BeginStatementContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBEGIN, 0)
}

func (s *BeginStatementContext) END() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEND, 0)
}

func (s *BeginStatementContext) AllLabelName() []ILabelNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILabelNameContext)(nil)).Elem())
	var tst = make([]ILabelNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILabelNameContext)
		}
	}

	return tst
}

func (s *BeginStatementContext) LabelName(i int) ILabelNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILabelNameContext)
}

func (s *BeginStatementContext) COLON_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOLON_, 0)
}

func (s *BeginStatementContext) AllValidStatement() []IValidStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IValidStatementContext)(nil)).Elem())
	var tst = make([]IValidStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IValidStatementContext)
		}
	}

	return tst
}

func (s *BeginStatementContext) ValidStatement(i int) IValidStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValidStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IValidStatementContext)
}

func (s *BeginStatementContext) SEMI_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSEMI_, 0)
}

func (s *BeginStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BeginStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BeginStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterBeginStatement(s)
	}
}

func (s *BeginStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitBeginStatement(s)
	}
}

func (s *BeginStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitBeginStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) BeginStatement() (localctx IBeginStatementContext) {
	this := p
	_ = this

	localctx = NewBeginStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 746, MySQLStatementParserRULE_beginStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5590)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 709, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5587)
			p.LabelName()
		}
		{
			p.SetState(5588)
			p.Match(MySQLStatementParserCOLON_)
		}

	}
	{
		p.SetState(5592)
		p.Match(MySQLStatementParserBEGIN)
	}
	p.SetState(5596)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 710, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(5593)
				p.ValidStatement()
			}

		}
		p.SetState(5598)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 710, p.GetParserRuleContext())
	}
	{
		p.SetState(5599)
		p.Match(MySQLStatementParserEND)
	}
	p.SetState(5601)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 711, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5600)
			p.LabelName()
		}

	}
	p.SetState(5604)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 712, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5603)
			p.Match(MySQLStatementParserSEMI_)
		}

	}

	return localctx
}

// IDeclareStatementContext is an interface to support dynamic dispatch.
type IDeclareStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclareStatementContext differentiates from other interfaces.
	IsDeclareStatementContext()
}

type DeclareStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclareStatementContext() *DeclareStatementContext {
	var p = new(DeclareStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_declareStatement
	return p
}

func (*DeclareStatementContext) IsDeclareStatementContext() {}

func NewDeclareStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclareStatementContext {
	var p = new(DeclareStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_declareStatement

	return p
}

func (s *DeclareStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclareStatementContext) DECLARE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDECLARE, 0)
}

func (s *DeclareStatementContext) AllVariable() []IVariableContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariableContext)(nil)).Elem())
	var tst = make([]IVariableContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariableContext)
		}
	}

	return tst
}

func (s *DeclareStatementContext) Variable(i int) IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *DeclareStatementContext) DataType() IDataTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDataTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *DeclareStatementContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *DeclareStatementContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *DeclareStatementContext) AllDEFAULT() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserDEFAULT)
}

func (s *DeclareStatementContext) DEFAULT(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFAULT, i)
}

func (s *DeclareStatementContext) AllSimpleExpr() []ISimpleExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISimpleExprContext)(nil)).Elem())
	var tst = make([]ISimpleExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISimpleExprContext)
		}
	}

	return tst
}

func (s *DeclareStatementContext) SimpleExpr(i int) ISimpleExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISimpleExprContext)
}

func (s *DeclareStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclareStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclareStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDeclareStatement(s)
	}
}

func (s *DeclareStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDeclareStatement(s)
	}
}

func (s *DeclareStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDeclareStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DeclareStatement() (localctx IDeclareStatementContext) {
	this := p
	_ = this

	localctx = NewDeclareStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 748, MySQLStatementParserRULE_declareStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5606)
		p.Match(MySQLStatementParserDECLARE)
	}
	{
		p.SetState(5607)
		p.Variable()
	}
	p.SetState(5612)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(5608)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(5609)
			p.Variable()
		}

		p.SetState(5614)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(5615)
		p.DataType()
	}
	p.SetState(5620)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserDEFAULT {
		{
			p.SetState(5616)
			p.Match(MySQLStatementParserDEFAULT)
		}
		{
			p.SetState(5617)
			p.simpleExpr(0)
		}

		p.SetState(5622)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IFlowControlStatementContext is an interface to support dynamic dispatch.
type IFlowControlStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFlowControlStatementContext differentiates from other interfaces.
	IsFlowControlStatementContext()
}

type FlowControlStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFlowControlStatementContext() *FlowControlStatementContext {
	var p = new(FlowControlStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_flowControlStatement
	return p
}

func (*FlowControlStatementContext) IsFlowControlStatementContext() {}

func NewFlowControlStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FlowControlStatementContext {
	var p = new(FlowControlStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_flowControlStatement

	return p
}

func (s *FlowControlStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *FlowControlStatementContext) CaseStatement() ICaseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICaseStatementContext)
}

func (s *FlowControlStatementContext) IfStatement() IIfStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfStatementContext)
}

func (s *FlowControlStatementContext) IterateStatement() IIterateStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIterateStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIterateStatementContext)
}

func (s *FlowControlStatementContext) LeaveStatement() ILeaveStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeaveStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeaveStatementContext)
}

func (s *FlowControlStatementContext) LoopStatement() ILoopStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopStatementContext)
}

func (s *FlowControlStatementContext) RepeatStatement() IRepeatStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRepeatStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRepeatStatementContext)
}

func (s *FlowControlStatementContext) ReturnStatement() IReturnStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnStatementContext)
}

func (s *FlowControlStatementContext) WhileStatement() IWhileStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhileStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhileStatementContext)
}

func (s *FlowControlStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FlowControlStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FlowControlStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterFlowControlStatement(s)
	}
}

func (s *FlowControlStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitFlowControlStatement(s)
	}
}

func (s *FlowControlStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitFlowControlStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) FlowControlStatement() (localctx IFlowControlStatementContext) {
	this := p
	_ = this

	localctx = NewFlowControlStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 750, MySQLStatementParserRULE_flowControlStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5631)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 715, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5623)
			p.CaseStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5624)
			p.IfStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5625)
			p.IterateStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5626)
			p.LeaveStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5627)
			p.LoopStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5628)
			p.RepeatStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5629)
			p.ReturnStatement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5630)
			p.WhileStatement()
		}

	}

	return localctx
}

// ICaseStatementContext is an interface to support dynamic dispatch.
type ICaseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseStatementContext differentiates from other interfaces.
	IsCaseStatementContext()
}

type CaseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseStatementContext() *CaseStatementContext {
	var p = new(CaseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_caseStatement
	return p
}

func (*CaseStatementContext) IsCaseStatementContext() {}

func NewCaseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseStatementContext {
	var p = new(CaseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_caseStatement

	return p
}

func (s *CaseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseStatementContext) AllCASE() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCASE)
}

func (s *CaseStatementContext) CASE(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCASE, i)
}

func (s *CaseStatementContext) END() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEND, 0)
}

func (s *CaseStatementContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *CaseStatementContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *CaseStatementContext) AllWHEN() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserWHEN)
}

func (s *CaseStatementContext) WHEN(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWHEN, i)
}

func (s *CaseStatementContext) AllTHEN() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserTHEN)
}

func (s *CaseStatementContext) THEN(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTHEN, i)
}

func (s *CaseStatementContext) ELSE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserELSE, 0)
}

func (s *CaseStatementContext) AllValidStatement() []IValidStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IValidStatementContext)(nil)).Elem())
	var tst = make([]IValidStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IValidStatementContext)
		}
	}

	return tst
}

func (s *CaseStatementContext) ValidStatement(i int) IValidStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValidStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IValidStatementContext)
}

func (s *CaseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCaseStatement(s)
	}
}

func (s *CaseStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCaseStatement(s)
	}
}

func (s *CaseStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCaseStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CaseStatement() (localctx ICaseStatementContext) {
	this := p
	_ = this

	localctx = NewCaseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 752, MySQLStatementParserRULE_caseStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5633)
		p.Match(MySQLStatementParserCASE)
	}
	p.SetState(5635)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MySQLStatementParserNOT_)|(1<<MySQLStatementParserTILDE_)|(1<<MySQLStatementParserPLUS_)|(1<<MySQLStatementParserMINUS_)|(1<<MySQLStatementParserLP_))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySQLStatementParserLBE_-32))|(1<<(MySQLStatementParserQUESTION_-32))|(1<<(MySQLStatementParserAT_-32))|(1<<(MySQLStatementParserMAX-32))|(1<<(MySQLStatementParserMIN-32))|(1<<(MySQLStatementParserSUM-32))|(1<<(MySQLStatementParserCOUNT-32))|(1<<(MySQLStatementParserGROUP_CONCAT-32))|(1<<(MySQLStatementParserCAST-32))|(1<<(MySQLStatementParserPOSITION-32))|(1<<(MySQLStatementParserSUBSTRING-32))|(1<<(MySQLStatementParserSUBSTR-32))|(1<<(MySQLStatementParserEXTRACT-32))|(1<<(MySQLStatementParserTRIM-32))|(1<<(MySQLStatementParserLAST_DAY-32))|(1<<(MySQLStatementParserTRADITIONAL-32))|(1<<(MySQLStatementParserTREE-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(MySQLStatementParserMYSQL_ADMIN-64))|(1<<(MySQLStatementParserINSTANT-64))|(1<<(MySQLStatementParserINPLACE-64))|(1<<(MySQLStatementParserCOPY-64))|(1<<(MySQLStatementParserUL_BINARY-64))|(1<<(MySQLStatementParserAUTOCOMMIT-64))|(1<<(MySQLStatementParserINNODB-64))|(1<<(MySQLStatementParserREDO_LOG-64))|(1<<(MySQLStatementParserACCOUNT-64))|(1<<(MySQLStatementParserACTION-64))|(1<<(MySQLStatementParserACTIVE-64))|(1<<(MySQLStatementParserADMIN-64))|(1<<(MySQLStatementParserAFTER-64))|(1<<(MySQLStatementParserAGAINST-64))|(1<<(MySQLStatementParserAGGREGATE-64))|(1<<(MySQLStatementParserALGORITHM-64))|(1<<(MySQLStatementParserALWAYS-64))|(1<<(MySQLStatementParserANY-64))|(1<<(MySQLStatementParserARRAY-64))|(1<<(MySQLStatementParserASCII-64))|(1<<(MySQLStatementParserAT-64))|(1<<(MySQLStatementParserATTRIBUTE-64)))) != 0) || (((_la-96)&-(0x1f+1)) == 0 && ((1<<uint((_la-96)))&((1<<(MySQLStatementParserAUTOEXTEND_SIZE-96))|(1<<(MySQLStatementParserAUTO_INCREMENT-96))|(1<<(MySQLStatementParserAVG-96))|(1<<(MySQLStatementParserBIT_XOR-96))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-96))|(1<<(MySQLStatementParserBACKUP-96))|(1<<(MySQLStatementParserBEGIN-96))|(1<<(MySQLStatementParserBINARY-96))|(1<<(MySQLStatementParserBINLOG-96))|(1<<(MySQLStatementParserBIT-96))|(1<<(MySQLStatementParserBLOCK-96))|(1<<(MySQLStatementParserBOOL-96))|(1<<(MySQLStatementParserBOOLEAN-96))|(1<<(MySQLStatementParserBTREE-96))|(1<<(MySQLStatementParserBUCKETS-96))|(1<<(MySQLStatementParserBYTE-96))|(1<<(MySQLStatementParserCACHE-96))|(1<<(MySQLStatementParserCASCADED-96))|(1<<(MySQLStatementParserCASE-96))|(1<<(MySQLStatementParserCATALOG_NAME-96))|(1<<(MySQLStatementParserCHAIN-96))|(1<<(MySQLStatementParserCHANGED-96))|(1<<(MySQLStatementParserCHANNEL-96)))) != 0) || (((_la-128)&-(0x1f+1)) == 0 && ((1<<uint((_la-128)))&((1<<(MySQLStatementParserCHAR-128))|(1<<(MySQLStatementParserCHARSET-128))|(1<<(MySQLStatementParserCHECKSUM-128))|(1<<(MySQLStatementParserCIPHER-128))|(1<<(MySQLStatementParserCLASS_ORIGIN-128))|(1<<(MySQLStatementParserCLIENT-128))|(1<<(MySQLStatementParserCLONE-128))|(1<<(MySQLStatementParserCLOSE-128))|(1<<(MySQLStatementParserCOALESCE-128))|(1<<(MySQLStatementParserCODE-128))|(1<<(MySQLStatementParserCOLLATION-128))|(1<<(MySQLStatementParserCOLUMNS-128))|(1<<(MySQLStatementParserCOLUMN_FORMAT-128))|(1<<(MySQLStatementParserCOLUMN_NAME-128))|(1<<(MySQLStatementParserCOMMENT-128))|(1<<(MySQLStatementParserCOMMIT-128))|(1<<(MySQLStatementParserCOMMITTED-128))|(1<<(MySQLStatementParserCOMPACT-128))|(1<<(MySQLStatementParserCOMPLETION-128))|(1<<(MySQLStatementParserCOMPONENT-128))|(1<<(MySQLStatementParserCOMPRESSED-128))|(1<<(MySQLStatementParserCOMPRESSION-128))|(1<<(MySQLStatementParserCONCURRENT-128))|(1<<(MySQLStatementParserCONNECTION-128))|(1<<(MySQLStatementParserCONSISTENT-128))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-128)))) != 0) || (((_la-160)&-(0x1f+1)) == 0 && ((1<<uint((_la-160)))&((1<<(MySQLStatementParserCONSTRAINT_NAME-160))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-160))|(1<<(MySQLStatementParserCONTAINS-160))|(1<<(MySQLStatementParserCONTEXT-160))|(1<<(MySQLStatementParserCONVERT-160))|(1<<(MySQLStatementParserCPU-160))|(1<<(MySQLStatementParserCUME_DIST-160))|(1<<(MySQLStatementParserCURRENT-160))|(1<<(MySQLStatementParserCURRENT_DATE-160))|(1<<(MySQLStatementParserCURRENT_TIME-160))|(1<<(MySQLStatementParserCURRENT_TIMESTAMP-160))|(1<<(MySQLStatementParserCURRENT_USER-160))|(1<<(MySQLStatementParserCURSOR_NAME-160))|(1<<(MySQLStatementParserDATA-160))|(1<<(MySQLStatementParserDATABASE-160))|(1<<(MySQLStatementParserDATAFILE-160))|(1<<(MySQLStatementParserDATE-160))|(1<<(MySQLStatementParserDATETIME-160))|(1<<(MySQLStatementParserDAY-160))|(1<<(MySQLStatementParserDEALLOCATE-160)))) != 0) || (((_la-194)&-(0x1f+1)) == 0 && ((1<<uint((_la-194)))&((1<<(MySQLStatementParserDEFAULT_AUTH-194))|(1<<(MySQLStatementParserDEFINER-194))|(1<<(MySQLStatementParserDEFINITION-194))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-194))|(1<<(MySQLStatementParserDENSE_RANK-194))|(1<<(MySQLStatementParserDESCRIPTION-194))|(1<<(MySQLStatementParserDIAGNOSTICS-194))|(1<<(MySQLStatementParserDIRECTORY-194))|(1<<(MySQLStatementParserDISABLE-194))|(1<<(MySQLStatementParserDISCARD-194))|(1<<(MySQLStatementParserDISK-194))|(1<<(MySQLStatementParserDO-194))|(1<<(MySQLStatementParserDUMPFILE-194))|(1<<(MySQLStatementParserDUPLICATE-194))|(1<<(MySQLStatementParserDYNAMIC-194))|(1<<(MySQLStatementParserENABLE-194)))) != 0) || (((_la-226)&-(0x1f+1)) == 0 && ((1<<uint((_la-226)))&((1<<(MySQLStatementParserENCRYPTION-226))|(1<<(MySQLStatementParserEND-226))|(1<<(MySQLStatementParserENDS-226))|(1<<(MySQLStatementParserENFORCED-226))|(1<<(MySQLStatementParserENGINE-226))|(1<<(MySQLStatementParserENGINES-226))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-226))|(1<<(MySQLStatementParserENUM-226))|(1<<(MySQLStatementParserERROR-226))|(1<<(MySQLStatementParserERRORS-226))|(1<<(MySQLStatementParserESCAPE-226))|(1<<(MySQLStatementParserEVENT-226))|(1<<(MySQLStatementParserEVENTS-226))|(1<<(MySQLStatementParserEVERY-226))|(1<<(MySQLStatementParserEXCHANGE-226))|(1<<(MySQLStatementParserEXCLUDE-226))|(1<<(MySQLStatementParserEXECUTE-226))|(1<<(MySQLStatementParserEXISTS-226))|(1<<(MySQLStatementParserEXPANSION-226))|(1<<(MySQLStatementParserEXPIRE-226))|(1<<(MySQLStatementParserEXPORT-226))|(1<<(MySQLStatementParserEXTENDED-226))|(1<<(MySQLStatementParserEXTENT_SIZE-226))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-226))|(1<<(MySQLStatementParserFALSE-226))|(1<<(MySQLStatementParserFAST-226))|(1<<(MySQLStatementParserFAULTS-226)))) != 0) || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(MySQLStatementParserFILE-258))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-258))|(1<<(MySQLStatementParserFILTER-258))|(1<<(MySQLStatementParserFIRST-258))|(1<<(MySQLStatementParserFIRST_VALUE-258))|(1<<(MySQLStatementParserFIXED-258))|(1<<(MySQLStatementParserFLUSH-258))|(1<<(MySQLStatementParserFOLLOWING-258))|(1<<(MySQLStatementParserFOLLOWS-258))|(1<<(MySQLStatementParserFORMAT-258))|(1<<(MySQLStatementParserFOUND-258))|(1<<(MySQLStatementParserFULL-258))|(1<<(MySQLStatementParserGENERAL-258))|(1<<(MySQLStatementParserGEOMETRY-258))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-258))|(1<<(MySQLStatementParserGET_FORMAT-258))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-258))|(1<<(MySQLStatementParserGLOBAL-258))|(1<<(MySQLStatementParserGRANTS-258)))) != 0) || (((_la-292)&-(0x1f+1)) == 0 && ((1<<uint((_la-292)))&((1<<(MySQLStatementParserGROUP_REPLICATION-292))|(1<<(MySQLStatementParserHANDLER-292))|(1<<(MySQLStatementParserHASH-292))|(1<<(MySQLStatementParserHELP-292))|(1<<(MySQLStatementParserHISTOGRAM-292))|(1<<(MySQLStatementParserHISTORY-292))|(1<<(MySQLStatementParserHOST-292))|(1<<(MySQLStatementParserHOSTS-292))|(1<<(MySQLStatementParserHOUR-292))|(1<<(MySQLStatementParserIDENTIFIED-292))|(1<<(MySQLStatementParserIF-292))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-292))|(1<<(MySQLStatementParserIMPORT-292))|(1<<(MySQLStatementParserINACTIVE-292))|(1<<(MySQLStatementParserINDEXES-292))|(1<<(MySQLStatementParserINITIAL_SIZE-292))|(1<<(MySQLStatementParserINSERT_METHOD-292))|(1<<(MySQLStatementParserINSTALL-292))|(1<<(MySQLStatementParserINSTANCE-292)))) != 0) || (((_la-331)&-(0x1f+1)) == 0 && ((1<<uint((_la-331)))&((1<<(MySQLStatementParserINTERVAL-331))|(1<<(MySQLStatementParserINVISIBLE-331))|(1<<(MySQLStatementParserINVOKER-331))|(1<<(MySQLStatementParserIO-331))|(1<<(MySQLStatementParserIPC-331))|(1<<(MySQLStatementParserISOLATION-331))|(1<<(MySQLStatementParserISSUER-331))|(1<<(MySQLStatementParserJSON-331))|(1<<(MySQLStatementParserJSON_VALUE-331))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-331))|(1<<(MySQLStatementParserLAG-331))|(1<<(MySQLStatementParserLANGUAGE-331))|(1<<(MySQLStatementParserLAST-331))|(1<<(MySQLStatementParserLAST_VALUE-331))|(1<<(MySQLStatementParserLEAD-331))|(1<<(MySQLStatementParserLEAVES-331))|(1<<(MySQLStatementParserLEFT-331))|(1<<(MySQLStatementParserLESS-331))|(1<<(MySQLStatementParserLEVEL-331)))) != 0) || (((_la-367)&-(0x1f+1)) == 0 && ((1<<uint((_la-367)))&((1<<(MySQLStatementParserLINESTRING-367))|(1<<(MySQLStatementParserLIST-367))|(1<<(MySQLStatementParserLOCAL-367))|(1<<(MySQLStatementParserLOCALTIME-367))|(1<<(MySQLStatementParserLOCALTIMESTAMP-367))|(1<<(MySQLStatementParserLOCKED-367))|(1<<(MySQLStatementParserLOCKS-367))|(1<<(MySQLStatementParserLOGFILE-367))|(1<<(MySQLStatementParserLOGS-367))|(1<<(MySQLStatementParserMASTER-367))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-367))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-367))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-367))|(1<<(MySQLStatementParserMASTER_DELAY-367))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-367))|(1<<(MySQLStatementParserMASTER_HOST-367))|(1<<(MySQLStatementParserMASTER_LOG_FILE-367))|(1<<(MySQLStatementParserMASTER_LOG_POS-367))|(1<<(MySQLStatementParserMASTER_PASSWORD-367))|(1<<(MySQLStatementParserMASTER_PORT-367))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-367))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-367))|(1<<(MySQLStatementParserMASTER_SERVER_ID-367))|(1<<(MySQLStatementParserMASTER_SSL-367)))) != 0) || (((_la-399)&-(0x1f+1)) == 0 && ((1<<uint((_la-399)))&((1<<(MySQLStatementParserMASTER_SSL_CA-399))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-399))|(1<<(MySQLStatementParserMASTER_SSL_CERT-399))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-399))|(1<<(MySQLStatementParserMASTER_SSL_CRL-399))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-399))|(1<<(MySQLStatementParserMASTER_SSL_KEY-399))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-399))|(1<<(MySQLStatementParserMASTER_TLS_VERSION-399))|(1<<(MySQLStatementParserMASTER_USER-399))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-399))|(1<<(MySQLStatementParserMATCH-399))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-399))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-399))|(1<<(MySQLStatementParserMAX_ROWS-399))|(1<<(MySQLStatementParserMAX_SIZE-399))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-399))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-399))|(1<<(MySQLStatementParserMEDIUM-399))|(1<<(MySQLStatementParserMEMBER-399))|(1<<(MySQLStatementParserMEMORY-399))|(1<<(MySQLStatementParserMERGE-399))|(1<<(MySQLStatementParserMESSAGE_TEXT-399))|(1<<(MySQLStatementParserMICROSECOND-399))|(1<<(MySQLStatementParserMIGRATE-399))|(1<<(MySQLStatementParserMINUTE-399)))) != 0) || (((_la-433)&-(0x1f+1)) == 0 && ((1<<uint((_la-433)))&((1<<(MySQLStatementParserMIN_ROWS-433))|(1<<(MySQLStatementParserMOD-433))|(1<<(MySQLStatementParserMODE-433))|(1<<(MySQLStatementParserMODIFY-433))|(1<<(MySQLStatementParserMONTH-433))|(1<<(MySQLStatementParserMULTILINESTRING-433))|(1<<(MySQLStatementParserMULTIPOINT-433))|(1<<(MySQLStatementParserMULTIPOLYGON-433))|(1<<(MySQLStatementParserMUTEX-433))|(1<<(MySQLStatementParserMYSQL_ERRNO-433))|(1<<(MySQLStatementParserNAME-433))|(1<<(MySQLStatementParserNAMES-433))|(1<<(MySQLStatementParserNATIONAL-433))|(1<<(MySQLStatementParserNCHAR-433))|(1<<(MySQLStatementParserNDBCLUSTER-433))|(1<<(MySQLStatementParserNESTED-433))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-433))|(1<<(MySQLStatementParserNEVER-433))|(1<<(MySQLStatementParserNEW-433))|(1<<(MySQLStatementParserNEXT-433))|(1<<(MySQLStatementParserNO-433))|(1<<(MySQLStatementParserNODEGROUP-433))|(1<<(MySQLStatementParserNONE-433))|(1<<(MySQLStatementParserNOT-433))|(1<<(MySQLStatementParserNOWAIT-433))|(1<<(MySQLStatementParserNO_WAIT-433))|(1<<(MySQLStatementParserNTH_VALUE-433))|(1<<(MySQLStatementParserNTILE-433))|(1<<(MySQLStatementParserNULL-433)))) != 0) || (((_la-465)&-(0x1f+1)) == 0 && ((1<<uint((_la-465)))&((1<<(MySQLStatementParserNULLS-465))|(1<<(MySQLStatementParserNUMBER-465))|(1<<(MySQLStatementParserNVARCHAR-465))|(1<<(MySQLStatementParserOFF-465))|(1<<(MySQLStatementParserOFFSET-465))|(1<<(MySQLStatementParserOJ-465))|(1<<(MySQLStatementParserOLD-465))|(1<<(MySQLStatementParserONE-465))|(1<<(MySQLStatementParserONLY-465))|(1<<(MySQLStatementParserOPEN-465))|(1<<(MySQLStatementParserOPTIONAL-465))|(1<<(MySQLStatementParserOPTIONS-465))|(1<<(MySQLStatementParserORDINALITY-465))|(1<<(MySQLStatementParserORGANIZATION-465))|(1<<(MySQLStatementParserOTHERS-465))|(1<<(MySQLStatementParserOWNER-465))|(1<<(MySQLStatementParserPACK_KEYS-465))|(1<<(MySQLStatementParserPAGE-465))|(1<<(MySQLStatementParserPARSER-465)))) != 0) || (((_la-497)&-(0x1f+1)) == 0 && ((1<<uint((_la-497)))&((1<<(MySQLStatementParserPARTIAL-497))|(1<<(MySQLStatementParserPARTITIONING-497))|(1<<(MySQLStatementParserPARTITIONS-497))|(1<<(MySQLStatementParserPASSWORD-497))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-497))|(1<<(MySQLStatementParserPATH-497))|(1<<(MySQLStatementParserPERCENT_RANK-497))|(1<<(MySQLStatementParserPERSIST-497))|(1<<(MySQLStatementParserPERSIST_ONLY-497))|(1<<(MySQLStatementParserPHASE-497))|(1<<(MySQLStatementParserPLUGIN-497))|(1<<(MySQLStatementParserPLUGINS-497))|(1<<(MySQLStatementParserPLUGIN_DIR-497))|(1<<(MySQLStatementParserPOINT-497))|(1<<(MySQLStatementParserPOLYGON-497))|(1<<(MySQLStatementParserPORT-497))|(1<<(MySQLStatementParserPRECEDES-497))|(1<<(MySQLStatementParserPRECEDING-497))|(1<<(MySQLStatementParserPREPARE-497))|(1<<(MySQLStatementParserPRESERVE-497))|(1<<(MySQLStatementParserPREV-497))|(1<<(MySQLStatementParserPRIVILEGES-497))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-497))|(1<<(MySQLStatementParserPROCESS-497))|(1<<(MySQLStatementParserPROCESSLIST-497))|(1<<(MySQLStatementParserPROFILE-497))|(1<<(MySQLStatementParserPROFILES-497))|(1<<(MySQLStatementParserPROXY-497)))) != 0) || (((_la-530)&-(0x1f+1)) == 0 && ((1<<uint((_la-530)))&((1<<(MySQLStatementParserQUARTER-530))|(1<<(MySQLStatementParserQUERY-530))|(1<<(MySQLStatementParserQUICK-530))|(1<<(MySQLStatementParserRANDOM-530))|(1<<(MySQLStatementParserRANK-530))|(1<<(MySQLStatementParserREAD_ONLY-530))|(1<<(MySQLStatementParserREBUILD-530))|(1<<(MySQLStatementParserRECOVER-530))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-530))|(1<<(MySQLStatementParserREDUNDANT-530))|(1<<(MySQLStatementParserREFERENCE-530))|(1<<(MySQLStatementParserRELAY-530))|(1<<(MySQLStatementParserRELAYLOG-530))|(1<<(MySQLStatementParserRELAY_LOG_FILE-530))|(1<<(MySQLStatementParserRELAY_LOG_POS-530))|(1<<(MySQLStatementParserRELAY_THREAD-530))|(1<<(MySQLStatementParserRELOAD-530))|(1<<(MySQLStatementParserREMOVE-530))|(1<<(MySQLStatementParserREORGANIZE-530))|(1<<(MySQLStatementParserREPAIR-530))|(1<<(MySQLStatementParserREPEATABLE-530)))) != 0) || (((_la-562)&-(0x1f+1)) == 0 && ((1<<uint((_la-562)))&((1<<(MySQLStatementParserREPLACE-562))|(1<<(MySQLStatementParserREPLICATE_DO_DB-562))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-562))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-562))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-562))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-562))|(1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-562))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-562))|(1<<(MySQLStatementParserREPLICATION-562))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-562))|(1<<(MySQLStatementParserRESET-562))|(1<<(MySQLStatementParserRESOURCE-562))|(1<<(MySQLStatementParserRESPECT-562))|(1<<(MySQLStatementParserRESTART-562))|(1<<(MySQLStatementParserRESTORE-562))|(1<<(MySQLStatementParserRESUME-562))|(1<<(MySQLStatementParserRETAIN-562))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-562))|(1<<(MySQLStatementParserRETURNING-562))|(1<<(MySQLStatementParserRETURNS-562))|(1<<(MySQLStatementParserREUSE-562))|(1<<(MySQLStatementParserREVERSE-562))|(1<<(MySQLStatementParserRIGHT-562))|(1<<(MySQLStatementParserROLE-562)))) != 0) || (((_la-594)&-(0x1f+1)) == 0 && ((1<<uint((_la-594)))&((1<<(MySQLStatementParserROLLBACK-594))|(1<<(MySQLStatementParserROLLUP-594))|(1<<(MySQLStatementParserROTATE-594))|(1<<(MySQLStatementParserROUTINE-594))|(1<<(MySQLStatementParserROW-594))|(1<<(MySQLStatementParserROW_COUNT-594))|(1<<(MySQLStatementParserROW_FORMAT-594))|(1<<(MySQLStatementParserROW_NUMBER-594))|(1<<(MySQLStatementParserRTREE-594))|(1<<(MySQLStatementParserSAVEPOINT-594))|(1<<(MySQLStatementParserSCHEDULE-594))|(1<<(MySQLStatementParserSCHEMA-594))|(1<<(MySQLStatementParserSCHEMA_NAME-594))|(1<<(MySQLStatementParserSECOND-594))|(1<<(MySQLStatementParserSECONDARY-594))|(1<<(MySQLStatementParserSECONDARY_ENGINE-594))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-594))|(1<<(MySQLStatementParserSECONDARY_LOAD-594))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-594))|(1<<(MySQLStatementParserSECURITY-594))|(1<<(MySQLStatementParserSERIAL-594))|(1<<(MySQLStatementParserSERIALIZABLE-594))|(1<<(MySQLStatementParserSERVER-594))|(1<<(MySQLStatementParserSESSION-594))|(1<<(MySQLStatementParserSHARE-594)))) != 0) || (((_la-627)&-(0x1f+1)) == 0 && ((1<<uint((_la-627)))&((1<<(MySQLStatementParserSHUTDOWN-627))|(1<<(MySQLStatementParserSIGNED-627))|(1<<(MySQLStatementParserSIMPLE-627))|(1<<(MySQLStatementParserSLAVE-627))|(1<<(MySQLStatementParserSLOW-627))|(1<<(MySQLStatementParserSNAPSHOT-627))|(1<<(MySQLStatementParserSOCKET-627))|(1<<(MySQLStatementParserSONAME-627))|(1<<(MySQLStatementParserSOUNDS-627))|(1<<(MySQLStatementParserSOURCE-627))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-627))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-627))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-627))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-627))|(1<<(MySQLStatementParserSQL_NO_CACHE-627))|(1<<(MySQLStatementParserSQL_THREAD-627))|(1<<(MySQLStatementParserSRID-627))|(1<<(MySQLStatementParserSTACKED-627))|(1<<(MySQLStatementParserSTART-627)))) != 0) || (((_la-660)&-(0x1f+1)) == 0 && ((1<<uint((_la-660)))&((1<<(MySQLStatementParserSTARTS-660))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-660))|(1<<(MySQLStatementParserSTATS_PERSISTENT-660))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-660))|(1<<(MySQLStatementParserSTATUS-660))|(1<<(MySQLStatementParserSTOP-660))|(1<<(MySQLStatementParserSTORAGE-660))|(1<<(MySQLStatementParserSTREAM-660))|(1<<(MySQLStatementParserSTRING-660))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-660))|(1<<(MySQLStatementParserSUBJECT-660))|(1<<(MySQLStatementParserSUBPARTITION-660))|(1<<(MySQLStatementParserSUBPARTITIONS-660))|(1<<(MySQLStatementParserSUPER-660))|(1<<(MySQLStatementParserSUSPEND-660))|(1<<(MySQLStatementParserSWAPS-660))|(1<<(MySQLStatementParserSWITCHES-660))|(1<<(MySQLStatementParserTABLES-660))|(1<<(MySQLStatementParserTABLESPACE-660))|(1<<(MySQLStatementParserTABLE_CHECKSUM-660))|(1<<(MySQLStatementParserTABLE_NAME-660))|(1<<(MySQLStatementParserTEMPORARY-660))|(1<<(MySQLStatementParserTEMPTABLE-660))|(1<<(MySQLStatementParserTEXT-660))|(1<<(MySQLStatementParserTHAN-660))|(1<<(MySQLStatementParserTHREAD_PRIORITY-660)))) != 0) || (((_la-692)&-(0x1f+1)) == 0 && ((1<<uint((_la-692)))&((1<<(MySQLStatementParserTIES-692))|(1<<(MySQLStatementParserTIME-692))|(1<<(MySQLStatementParserTIMESTAMP-692))|(1<<(MySQLStatementParserTIMESTAMP_ADD-692))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-692))|(1<<(MySQLStatementParserTLS-692))|(1<<(MySQLStatementParserTRANSACTION-692))|(1<<(MySQLStatementParserTRIGGERS-692))|(1<<(MySQLStatementParserTRUE-692))|(1<<(MySQLStatementParserTRUNCATE-692))|(1<<(MySQLStatementParserTYPE-692))|(1<<(MySQLStatementParserTYPES-692))|(1<<(MySQLStatementParserUNBOUNDED-692))|(1<<(MySQLStatementParserUNCOMMITTED-692))|(1<<(MySQLStatementParserUNDEFINED-692))|(1<<(MySQLStatementParserUNDOFILE-692))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-692))|(1<<(MySQLStatementParserUNICODE-692))|(1<<(MySQLStatementParserUNINSTALL-692))|(1<<(MySQLStatementParserUNKNOWN-692))|(1<<(MySQLStatementParserUNTIL-692)))) != 0) || (((_la-725)&-(0x1f+1)) == 0 && ((1<<uint((_la-725)))&((1<<(MySQLStatementParserUPGRADE-725))|(1<<(MySQLStatementParserUSER-725))|(1<<(MySQLStatementParserUSER_RESOURCES-725))|(1<<(MySQLStatementParserUSE_FRM-725))|(1<<(MySQLStatementParserUTC_TIMESTAMP-725))|(1<<(MySQLStatementParserVALIDATION-725))|(1<<(MySQLStatementParserVALUE-725))|(1<<(MySQLStatementParserVALUES-725))|(1<<(MySQLStatementParserVARIABLES-725))|(1<<(MySQLStatementParserVCPU-725))|(1<<(MySQLStatementParserVIEW-725))|(1<<(MySQLStatementParserVISIBLE-725))|(1<<(MySQLStatementParserWAIT-725))|(1<<(MySQLStatementParserWARNINGS-725))|(1<<(MySQLStatementParserWEEK-725))|(1<<(MySQLStatementParserWEIGHT_STRING-725))|(1<<(MySQLStatementParserWITHOUT-725)))) != 0) || (((_la-757)&-(0x1f+1)) == 0 && ((1<<uint((_la-757)))&((1<<(MySQLStatementParserWORK-757))|(1<<(MySQLStatementParserWRAPPER-757))|(1<<(MySQLStatementParserX509-757))|(1<<(MySQLStatementParserXA-757))|(1<<(MySQLStatementParserXID-757))|(1<<(MySQLStatementParserXML-757))|(1<<(MySQLStatementParserYEAR-757))|(1<<(MySQLStatementParserIDENTIFIER_-757))|(1<<(MySQLStatementParserSINGLE_QUOTED_TEXT-757))|(1<<(MySQLStatementParserDOUBLE_QUOTED_TEXT-757))|(1<<(MySQLStatementParserNCHAR_TEXT-757))|(1<<(MySQLStatementParserUNDERSCORE_CHARSET-757))|(1<<(MySQLStatementParserNUMBER_-757))|(1<<(MySQLStatementParserHEX_DIGIT_-757))|(1<<(MySQLStatementParserBIT_NUM_-757)))) != 0) {
		{
			p.SetState(5634)
			p.expr(0)
		}

	}
	p.SetState(5645)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == MySQLStatementParserWHEN {
		{
			p.SetState(5637)
			p.Match(MySQLStatementParserWHEN)
		}
		{
			p.SetState(5638)
			p.expr(0)
		}
		{
			p.SetState(5639)
			p.Match(MySQLStatementParserTHEN)
		}
		p.SetState(5641)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(5640)
					p.ValidStatement()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(5643)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 717, p.GetParserRuleContext())
		}

		p.SetState(5647)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(5655)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserELSE {
		{
			p.SetState(5649)
			p.Match(MySQLStatementParserELSE)
		}
		p.SetState(5651)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(5650)
					p.ValidStatement()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(5653)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 719, p.GetParserRuleContext())
		}

	}
	{
		p.SetState(5657)
		p.Match(MySQLStatementParserEND)
	}
	{
		p.SetState(5658)
		p.Match(MySQLStatementParserCASE)
	}

	return localctx
}

// IIfStatementContext is an interface to support dynamic dispatch.
type IIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfStatementContext differentiates from other interfaces.
	IsIfStatementContext()
}

type IfStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfStatementContext() *IfStatementContext {
	var p = new(IfStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_ifStatement
	return p
}

func (*IfStatementContext) IsIfStatementContext() {}

func NewIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfStatementContext {
	var p = new(IfStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_ifStatement

	return p
}

func (s *IfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IfStatementContext) AllIF() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserIF)
}

func (s *IfStatementContext) IF(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIF, i)
}

func (s *IfStatementContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *IfStatementContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IfStatementContext) AllTHEN() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserTHEN)
}

func (s *IfStatementContext) THEN(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTHEN, i)
}

func (s *IfStatementContext) END() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEND, 0)
}

func (s *IfStatementContext) AllValidStatement() []IValidStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IValidStatementContext)(nil)).Elem())
	var tst = make([]IValidStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IValidStatementContext)
		}
	}

	return tst
}

func (s *IfStatementContext) ValidStatement(i int) IValidStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValidStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IValidStatementContext)
}

func (s *IfStatementContext) AllELSEIF() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserELSEIF)
}

func (s *IfStatementContext) ELSEIF(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserELSEIF, i)
}

func (s *IfStatementContext) ELSE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserELSE, 0)
}

func (s *IfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterIfStatement(s)
	}
}

func (s *IfStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitIfStatement(s)
	}
}

func (s *IfStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitIfStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) IfStatement() (localctx IIfStatementContext) {
	this := p
	_ = this

	localctx = NewIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 754, MySQLStatementParserRULE_ifStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5660)
		p.Match(MySQLStatementParserIF)
	}
	{
		p.SetState(5661)
		p.expr(0)
	}
	{
		p.SetState(5662)
		p.Match(MySQLStatementParserTHEN)
	}
	p.SetState(5664)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(5663)
				p.ValidStatement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(5666)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 721, p.GetParserRuleContext())
	}
	p.SetState(5678)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserELSEIF {
		{
			p.SetState(5668)
			p.Match(MySQLStatementParserELSEIF)
		}
		{
			p.SetState(5669)
			p.expr(0)
		}
		{
			p.SetState(5670)
			p.Match(MySQLStatementParserTHEN)
		}
		p.SetState(5672)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(5671)
					p.ValidStatement()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(5674)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 722, p.GetParserRuleContext())
		}

		p.SetState(5680)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(5687)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserELSE {
		{
			p.SetState(5681)
			p.Match(MySQLStatementParserELSE)
		}
		p.SetState(5683)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(5682)
					p.ValidStatement()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(5685)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 724, p.GetParserRuleContext())
		}

	}
	{
		p.SetState(5689)
		p.Match(MySQLStatementParserEND)
	}
	{
		p.SetState(5690)
		p.Match(MySQLStatementParserIF)
	}

	return localctx
}

// IIterateStatementContext is an interface to support dynamic dispatch.
type IIterateStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIterateStatementContext differentiates from other interfaces.
	IsIterateStatementContext()
}

type IterateStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIterateStatementContext() *IterateStatementContext {
	var p = new(IterateStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_iterateStatement
	return p
}

func (*IterateStatementContext) IsIterateStatementContext() {}

func NewIterateStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IterateStatementContext {
	var p = new(IterateStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_iterateStatement

	return p
}

func (s *IterateStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IterateStatementContext) ITERATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserITERATE, 0)
}

func (s *IterateStatementContext) LabelName() ILabelNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelNameContext)
}

func (s *IterateStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IterateStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IterateStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterIterateStatement(s)
	}
}

func (s *IterateStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitIterateStatement(s)
	}
}

func (s *IterateStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitIterateStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) IterateStatement() (localctx IIterateStatementContext) {
	this := p
	_ = this

	localctx = NewIterateStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 756, MySQLStatementParserRULE_iterateStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5692)
		p.Match(MySQLStatementParserITERATE)
	}
	{
		p.SetState(5693)
		p.LabelName()
	}

	return localctx
}

// ILeaveStatementContext is an interface to support dynamic dispatch.
type ILeaveStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeaveStatementContext differentiates from other interfaces.
	IsLeaveStatementContext()
}

type LeaveStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeaveStatementContext() *LeaveStatementContext {
	var p = new(LeaveStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_leaveStatement
	return p
}

func (*LeaveStatementContext) IsLeaveStatementContext() {}

func NewLeaveStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LeaveStatementContext {
	var p = new(LeaveStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_leaveStatement

	return p
}

func (s *LeaveStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LeaveStatementContext) LEAVE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLEAVE, 0)
}

func (s *LeaveStatementContext) LabelName() ILabelNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelNameContext)
}

func (s *LeaveStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LeaveStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LeaveStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterLeaveStatement(s)
	}
}

func (s *LeaveStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitLeaveStatement(s)
	}
}

func (s *LeaveStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitLeaveStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) LeaveStatement() (localctx ILeaveStatementContext) {
	this := p
	_ = this

	localctx = NewLeaveStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 758, MySQLStatementParserRULE_leaveStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5695)
		p.Match(MySQLStatementParserLEAVE)
	}
	{
		p.SetState(5696)
		p.LabelName()
	}

	return localctx
}

// ILoopStatementContext is an interface to support dynamic dispatch.
type ILoopStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopStatementContext differentiates from other interfaces.
	IsLoopStatementContext()
}

type LoopStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopStatementContext() *LoopStatementContext {
	var p = new(LoopStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_loopStatement
	return p
}

func (*LoopStatementContext) IsLoopStatementContext() {}

func NewLoopStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopStatementContext {
	var p = new(LoopStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_loopStatement

	return p
}

func (s *LoopStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopStatementContext) AllLOOP() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserLOOP)
}

func (s *LoopStatementContext) LOOP(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOOP, i)
}

func (s *LoopStatementContext) END() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEND, 0)
}

func (s *LoopStatementContext) AllLabelName() []ILabelNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILabelNameContext)(nil)).Elem())
	var tst = make([]ILabelNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILabelNameContext)
		}
	}

	return tst
}

func (s *LoopStatementContext) LabelName(i int) ILabelNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILabelNameContext)
}

func (s *LoopStatementContext) COLON_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOLON_, 0)
}

func (s *LoopStatementContext) AllValidStatement() []IValidStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IValidStatementContext)(nil)).Elem())
	var tst = make([]IValidStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IValidStatementContext)
		}
	}

	return tst
}

func (s *LoopStatementContext) ValidStatement(i int) IValidStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValidStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IValidStatementContext)
}

func (s *LoopStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterLoopStatement(s)
	}
}

func (s *LoopStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitLoopStatement(s)
	}
}

func (s *LoopStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitLoopStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) LoopStatement() (localctx ILoopStatementContext) {
	this := p
	_ = this

	localctx = NewLoopStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 760, MySQLStatementParserRULE_loopStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5701)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49))|(1<<(MySQLStatementParserGROUP_CONCAT-49))|(1<<(MySQLStatementParserCAST-49))|(1<<(MySQLStatementParserPOSITION-49))|(1<<(MySQLStatementParserSUBSTRING-49))|(1<<(MySQLStatementParserSUBSTR-49))|(1<<(MySQLStatementParserEXTRACT-49))|(1<<(MySQLStatementParserTRIM-49))|(1<<(MySQLStatementParserLAST_DAY-49))|(1<<(MySQLStatementParserTRADITIONAL-49))|(1<<(MySQLStatementParserTREE-49))|(1<<(MySQLStatementParserMYSQL_ADMIN-49))|(1<<(MySQLStatementParserINSTANT-49))|(1<<(MySQLStatementParserINPLACE-49))|(1<<(MySQLStatementParserCOPY-49))|(1<<(MySQLStatementParserUL_BINARY-49))|(1<<(MySQLStatementParserAUTOCOMMIT-49))|(1<<(MySQLStatementParserINNODB-49))|(1<<(MySQLStatementParserREDO_LOG-49))|(1<<(MySQLStatementParserACCOUNT-49))|(1<<(MySQLStatementParserACTION-49))|(1<<(MySQLStatementParserACTIVE-49))|(1<<(MySQLStatementParserADMIN-49))|(1<<(MySQLStatementParserAFTER-49))|(1<<(MySQLStatementParserAGAINST-49)))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(MySQLStatementParserAGGREGATE-81))|(1<<(MySQLStatementParserALGORITHM-81))|(1<<(MySQLStatementParserALWAYS-81))|(1<<(MySQLStatementParserANY-81))|(1<<(MySQLStatementParserARRAY-81))|(1<<(MySQLStatementParserASCII-81))|(1<<(MySQLStatementParserAT-81))|(1<<(MySQLStatementParserATTRIBUTE-81))|(1<<(MySQLStatementParserAUTOEXTEND_SIZE-81))|(1<<(MySQLStatementParserAUTO_INCREMENT-81))|(1<<(MySQLStatementParserAVG-81))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-81))|(1<<(MySQLStatementParserBACKUP-81))|(1<<(MySQLStatementParserBEGIN-81))|(1<<(MySQLStatementParserBINLOG-81))|(1<<(MySQLStatementParserBIT-81))|(1<<(MySQLStatementParserBLOCK-81))|(1<<(MySQLStatementParserBOOL-81))|(1<<(MySQLStatementParserBOOLEAN-81)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(MySQLStatementParserBTREE-114))|(1<<(MySQLStatementParserBUCKETS-114))|(1<<(MySQLStatementParserBYTE-114))|(1<<(MySQLStatementParserCACHE-114))|(1<<(MySQLStatementParserCASCADED-114))|(1<<(MySQLStatementParserCATALOG_NAME-114))|(1<<(MySQLStatementParserCHAIN-114))|(1<<(MySQLStatementParserCHANGED-114))|(1<<(MySQLStatementParserCHANNEL-114))|(1<<(MySQLStatementParserCHARSET-114))|(1<<(MySQLStatementParserCHECKSUM-114))|(1<<(MySQLStatementParserCIPHER-114))|(1<<(MySQLStatementParserCLASS_ORIGIN-114))|(1<<(MySQLStatementParserCLIENT-114))|(1<<(MySQLStatementParserCLONE-114))|(1<<(MySQLStatementParserCLOSE-114))|(1<<(MySQLStatementParserCOALESCE-114))|(1<<(MySQLStatementParserCODE-114))|(1<<(MySQLStatementParserCOLLATION-114))|(1<<(MySQLStatementParserCOLUMNS-114))|(1<<(MySQLStatementParserCOLUMN_FORMAT-114))|(1<<(MySQLStatementParserCOLUMN_NAME-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(MySQLStatementParserCOMMENT-146))|(1<<(MySQLStatementParserCOMMIT-146))|(1<<(MySQLStatementParserCOMMITTED-146))|(1<<(MySQLStatementParserCOMPACT-146))|(1<<(MySQLStatementParserCOMPLETION-146))|(1<<(MySQLStatementParserCOMPONENT-146))|(1<<(MySQLStatementParserCOMPRESSED-146))|(1<<(MySQLStatementParserCOMPRESSION-146))|(1<<(MySQLStatementParserCONCURRENT-146))|(1<<(MySQLStatementParserCONNECTION-146))|(1<<(MySQLStatementParserCONSISTENT-146))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-146))|(1<<(MySQLStatementParserCONSTRAINT_NAME-146))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-146))|(1<<(MySQLStatementParserCONTAINS-146))|(1<<(MySQLStatementParserCONTEXT-146))|(1<<(MySQLStatementParserCPU-146))|(1<<(MySQLStatementParserCURRENT-146))|(1<<(MySQLStatementParserCURSOR_NAME-146)))) != 0) || (((_la-178)&-(0x1f+1)) == 0 && ((1<<uint((_la-178)))&((1<<(MySQLStatementParserDATA-178))|(1<<(MySQLStatementParserDATAFILE-178))|(1<<(MySQLStatementParserDATE-178))|(1<<(MySQLStatementParserDATETIME-178))|(1<<(MySQLStatementParserDAY-178))|(1<<(MySQLStatementParserDEALLOCATE-178))|(1<<(MySQLStatementParserDEFAULT_AUTH-178))|(1<<(MySQLStatementParserDEFINER-178))|(1<<(MySQLStatementParserDEFINITION-178))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-178))|(1<<(MySQLStatementParserDESCRIPTION-178))|(1<<(MySQLStatementParserDIAGNOSTICS-178))|(1<<(MySQLStatementParserDIRECTORY-178))|(1<<(MySQLStatementParserDISABLE-178))|(1<<(MySQLStatementParserDISCARD-178))|(1<<(MySQLStatementParserDISK-178)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(MySQLStatementParserDO-213))|(1<<(MySQLStatementParserDUMPFILE-213))|(1<<(MySQLStatementParserDUPLICATE-213))|(1<<(MySQLStatementParserDYNAMIC-213))|(1<<(MySQLStatementParserENABLE-213))|(1<<(MySQLStatementParserENCRYPTION-213))|(1<<(MySQLStatementParserEND-213))|(1<<(MySQLStatementParserENDS-213))|(1<<(MySQLStatementParserENFORCED-213))|(1<<(MySQLStatementParserENGINE-213))|(1<<(MySQLStatementParserENGINES-213))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-213))|(1<<(MySQLStatementParserENUM-213))|(1<<(MySQLStatementParserERROR-213))|(1<<(MySQLStatementParserERRORS-213))|(1<<(MySQLStatementParserESCAPE-213))|(1<<(MySQLStatementParserEVENT-213))|(1<<(MySQLStatementParserEVENTS-213))|(1<<(MySQLStatementParserEVERY-213))|(1<<(MySQLStatementParserEXCHANGE-213))|(1<<(MySQLStatementParserEXCLUDE-213))|(1<<(MySQLStatementParserEXECUTE-213)))) != 0) || (((_la-247)&-(0x1f+1)) == 0 && ((1<<uint((_la-247)))&((1<<(MySQLStatementParserEXPANSION-247))|(1<<(MySQLStatementParserEXPIRE-247))|(1<<(MySQLStatementParserEXPORT-247))|(1<<(MySQLStatementParserEXTENDED-247))|(1<<(MySQLStatementParserEXTENT_SIZE-247))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-247))|(1<<(MySQLStatementParserFAST-247))|(1<<(MySQLStatementParserFAULTS-247))|(1<<(MySQLStatementParserFILE-247))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-247))|(1<<(MySQLStatementParserFILTER-247))|(1<<(MySQLStatementParserFIRST-247))|(1<<(MySQLStatementParserFIXED-247))|(1<<(MySQLStatementParserFLUSH-247))|(1<<(MySQLStatementParserFOLLOWING-247))|(1<<(MySQLStatementParserFOLLOWS-247))|(1<<(MySQLStatementParserFORMAT-247))|(1<<(MySQLStatementParserFOUND-247))|(1<<(MySQLStatementParserFULL-247)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(MySQLStatementParserGENERAL-279))|(1<<(MySQLStatementParserGEOMETRY-279))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-279))|(1<<(MySQLStatementParserGET_FORMAT-279))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-279))|(1<<(MySQLStatementParserGLOBAL-279))|(1<<(MySQLStatementParserGRANTS-279))|(1<<(MySQLStatementParserGROUP_REPLICATION-279))|(1<<(MySQLStatementParserHANDLER-279))|(1<<(MySQLStatementParserHASH-279))|(1<<(MySQLStatementParserHELP-279))|(1<<(MySQLStatementParserHISTOGRAM-279))|(1<<(MySQLStatementParserHISTORY-279))|(1<<(MySQLStatementParserHOST-279))|(1<<(MySQLStatementParserHOSTS-279))|(1<<(MySQLStatementParserHOUR-279))|(1<<(MySQLStatementParserIDENTIFIED-279))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-279))|(1<<(MySQLStatementParserIMPORT-279)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySQLStatementParserINACTIVE-312))|(1<<(MySQLStatementParserINDEXES-312))|(1<<(MySQLStatementParserINITIAL_SIZE-312))|(1<<(MySQLStatementParserINSERT_METHOD-312))|(1<<(MySQLStatementParserINSTALL-312))|(1<<(MySQLStatementParserINSTANCE-312))|(1<<(MySQLStatementParserINVISIBLE-312))|(1<<(MySQLStatementParserINVOKER-312))|(1<<(MySQLStatementParserIO-312))|(1<<(MySQLStatementParserIPC-312))|(1<<(MySQLStatementParserISOLATION-312))|(1<<(MySQLStatementParserISSUER-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySQLStatementParserJSON-344))|(1<<(MySQLStatementParserJSON_VALUE-344))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-344))|(1<<(MySQLStatementParserLANGUAGE-344))|(1<<(MySQLStatementParserLAST-344))|(1<<(MySQLStatementParserLAST_VALUE-344))|(1<<(MySQLStatementParserLEAVES-344))|(1<<(MySQLStatementParserLESS-344))|(1<<(MySQLStatementParserLEVEL-344))|(1<<(MySQLStatementParserLINESTRING-344))|(1<<(MySQLStatementParserLIST-344))|(1<<(MySQLStatementParserLOCAL-344))|(1<<(MySQLStatementParserLOCKED-344))|(1<<(MySQLStatementParserLOCKS-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySQLStatementParserLOGFILE-376))|(1<<(MySQLStatementParserLOGS-376))|(1<<(MySQLStatementParserMASTER-376))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-376))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-376))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-376))|(1<<(MySQLStatementParserMASTER_DELAY-376))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-376))|(1<<(MySQLStatementParserMASTER_HOST-376))|(1<<(MySQLStatementParserMASTER_LOG_FILE-376))|(1<<(MySQLStatementParserMASTER_LOG_POS-376))|(1<<(MySQLStatementParserMASTER_PASSWORD-376))|(1<<(MySQLStatementParserMASTER_PORT-376))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-376))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-376))|(1<<(MySQLStatementParserMASTER_SERVER_ID-376))|(1<<(MySQLStatementParserMASTER_SSL-376))|(1<<(MySQLStatementParserMASTER_SSL_CA-376))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_CERT-376))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-376))|(1<<(MySQLStatementParserMASTER_SSL_CRL-376))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_KEY-376))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySQLStatementParserMASTER_TLS_VERSION-408))|(1<<(MySQLStatementParserMASTER_USER-408))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-408))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_ROWS-408))|(1<<(MySQLStatementParserMAX_SIZE-408))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-408))|(1<<(MySQLStatementParserMEDIUM-408))|(1<<(MySQLStatementParserMEMBER-408))|(1<<(MySQLStatementParserMEMORY-408))|(1<<(MySQLStatementParserMERGE-408))|(1<<(MySQLStatementParserMESSAGE_TEXT-408))|(1<<(MySQLStatementParserMICROSECOND-408))|(1<<(MySQLStatementParserMIGRATE-408))|(1<<(MySQLStatementParserMINUTE-408))|(1<<(MySQLStatementParserMIN_ROWS-408))|(1<<(MySQLStatementParserMODE-408))|(1<<(MySQLStatementParserMODIFY-408))|(1<<(MySQLStatementParserMONTH-408))|(1<<(MySQLStatementParserMULTILINESTRING-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySQLStatementParserMULTIPOINT-440))|(1<<(MySQLStatementParserMULTIPOLYGON-440))|(1<<(MySQLStatementParserMUTEX-440))|(1<<(MySQLStatementParserMYSQL_ERRNO-440))|(1<<(MySQLStatementParserNAME-440))|(1<<(MySQLStatementParserNAMES-440))|(1<<(MySQLStatementParserNATIONAL-440))|(1<<(MySQLStatementParserNCHAR-440))|(1<<(MySQLStatementParserNDBCLUSTER-440))|(1<<(MySQLStatementParserNESTED-440))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-440))|(1<<(MySQLStatementParserNEVER-440))|(1<<(MySQLStatementParserNEW-440))|(1<<(MySQLStatementParserNEXT-440))|(1<<(MySQLStatementParserNO-440))|(1<<(MySQLStatementParserNODEGROUP-440))|(1<<(MySQLStatementParserNONE-440))|(1<<(MySQLStatementParserNOWAIT-440))|(1<<(MySQLStatementParserNO_WAIT-440))|(1<<(MySQLStatementParserNULLS-440))|(1<<(MySQLStatementParserNUMBER-440))|(1<<(MySQLStatementParserNVARCHAR-440))|(1<<(MySQLStatementParserOFF-440))|(1<<(MySQLStatementParserOFFSET-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySQLStatementParserOJ-472))|(1<<(MySQLStatementParserOLD-472))|(1<<(MySQLStatementParserONE-472))|(1<<(MySQLStatementParserONLY-472))|(1<<(MySQLStatementParserOPEN-472))|(1<<(MySQLStatementParserOPTIONAL-472))|(1<<(MySQLStatementParserOPTIONS-472))|(1<<(MySQLStatementParserORDINALITY-472))|(1<<(MySQLStatementParserORGANIZATION-472))|(1<<(MySQLStatementParserOTHERS-472))|(1<<(MySQLStatementParserOWNER-472))|(1<<(MySQLStatementParserPACK_KEYS-472))|(1<<(MySQLStatementParserPAGE-472))|(1<<(MySQLStatementParserPARSER-472))|(1<<(MySQLStatementParserPARTIAL-472))|(1<<(MySQLStatementParserPARTITIONING-472))|(1<<(MySQLStatementParserPARTITIONS-472))|(1<<(MySQLStatementParserPASSWORD-472))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-472))|(1<<(MySQLStatementParserPATH-472)))) != 0) || (((_la-505)&-(0x1f+1)) == 0 && ((1<<uint((_la-505)))&((1<<(MySQLStatementParserPERSIST-505))|(1<<(MySQLStatementParserPERSIST_ONLY-505))|(1<<(MySQLStatementParserPHASE-505))|(1<<(MySQLStatementParserPLUGIN-505))|(1<<(MySQLStatementParserPLUGINS-505))|(1<<(MySQLStatementParserPLUGIN_DIR-505))|(1<<(MySQLStatementParserPOINT-505))|(1<<(MySQLStatementParserPOLYGON-505))|(1<<(MySQLStatementParserPORT-505))|(1<<(MySQLStatementParserPRECEDES-505))|(1<<(MySQLStatementParserPRECEDING-505))|(1<<(MySQLStatementParserPREPARE-505))|(1<<(MySQLStatementParserPRESERVE-505))|(1<<(MySQLStatementParserPREV-505))|(1<<(MySQLStatementParserPRIVILEGES-505))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-505))|(1<<(MySQLStatementParserPROCESS-505))|(1<<(MySQLStatementParserPROCESSLIST-505))|(1<<(MySQLStatementParserPROFILE-505))|(1<<(MySQLStatementParserPROFILES-505))|(1<<(MySQLStatementParserPROXY-505))|(1<<(MySQLStatementParserQUARTER-505))|(1<<(MySQLStatementParserQUERY-505))|(1<<(MySQLStatementParserQUICK-505))|(1<<(MySQLStatementParserRANDOM-505)))) != 0) || (((_la-538)&-(0x1f+1)) == 0 && ((1<<uint((_la-538)))&((1<<(MySQLStatementParserREAD_ONLY-538))|(1<<(MySQLStatementParserREBUILD-538))|(1<<(MySQLStatementParserRECOVER-538))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-538))|(1<<(MySQLStatementParserREDUNDANT-538))|(1<<(MySQLStatementParserREFERENCE-538))|(1<<(MySQLStatementParserRELAY-538))|(1<<(MySQLStatementParserRELAYLOG-538))|(1<<(MySQLStatementParserRELAY_LOG_FILE-538))|(1<<(MySQLStatementParserRELAY_LOG_POS-538))|(1<<(MySQLStatementParserRELAY_THREAD-538))|(1<<(MySQLStatementParserRELOAD-538))|(1<<(MySQLStatementParserREMOVE-538))|(1<<(MySQLStatementParserREORGANIZE-538))|(1<<(MySQLStatementParserREPAIR-538))|(1<<(MySQLStatementParserREPEATABLE-538))|(1<<(MySQLStatementParserREPLICATE_DO_DB-538))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-538)))) != 0) || (((_la-570)&-(0x1f+1)) == 0 && ((1<<uint((_la-570)))&((1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-570))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-570))|(1<<(MySQLStatementParserREPLICATION-570))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-570))|(1<<(MySQLStatementParserRESET-570))|(1<<(MySQLStatementParserRESOURCE-570))|(1<<(MySQLStatementParserRESPECT-570))|(1<<(MySQLStatementParserRESTART-570))|(1<<(MySQLStatementParserRESTORE-570))|(1<<(MySQLStatementParserRESUME-570))|(1<<(MySQLStatementParserRETAIN-570))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-570))|(1<<(MySQLStatementParserRETURNING-570))|(1<<(MySQLStatementParserRETURNS-570))|(1<<(MySQLStatementParserREUSE-570))|(1<<(MySQLStatementParserREVERSE-570))|(1<<(MySQLStatementParserROLE-570))|(1<<(MySQLStatementParserROLLBACK-570))|(1<<(MySQLStatementParserROLLUP-570))|(1<<(MySQLStatementParserROTATE-570))|(1<<(MySQLStatementParserROUTINE-570))|(1<<(MySQLStatementParserROW_COUNT-570))|(1<<(MySQLStatementParserROW_FORMAT-570)))) != 0) || (((_la-603)&-(0x1f+1)) == 0 && ((1<<uint((_la-603)))&((1<<(MySQLStatementParserRTREE-603))|(1<<(MySQLStatementParserSAVEPOINT-603))|(1<<(MySQLStatementParserSCHEDULE-603))|(1<<(MySQLStatementParserSCHEMA_NAME-603))|(1<<(MySQLStatementParserSECOND-603))|(1<<(MySQLStatementParserSECONDARY-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-603))|(1<<(MySQLStatementParserSECONDARY_LOAD-603))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-603))|(1<<(MySQLStatementParserSECURITY-603))|(1<<(MySQLStatementParserSERIAL-603))|(1<<(MySQLStatementParserSERIALIZABLE-603))|(1<<(MySQLStatementParserSERVER-603))|(1<<(MySQLStatementParserSESSION-603))|(1<<(MySQLStatementParserSHARE-603))|(1<<(MySQLStatementParserSHUTDOWN-603))|(1<<(MySQLStatementParserSIGNED-603))|(1<<(MySQLStatementParserSIMPLE-603))|(1<<(MySQLStatementParserSLAVE-603))|(1<<(MySQLStatementParserSLOW-603)))) != 0) || (((_la-635)&-(0x1f+1)) == 0 && ((1<<uint((_la-635)))&((1<<(MySQLStatementParserSNAPSHOT-635))|(1<<(MySQLStatementParserSOCKET-635))|(1<<(MySQLStatementParserSONAME-635))|(1<<(MySQLStatementParserSOUNDS-635))|(1<<(MySQLStatementParserSOURCE-635))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-635))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-635))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-635))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-635))|(1<<(MySQLStatementParserSQL_NO_CACHE-635))|(1<<(MySQLStatementParserSQL_THREAD-635))|(1<<(MySQLStatementParserSRID-635))|(1<<(MySQLStatementParserSTACKED-635))|(1<<(MySQLStatementParserSTART-635))|(1<<(MySQLStatementParserSTARTS-635))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-635))|(1<<(MySQLStatementParserSTATS_PERSISTENT-635))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-635))|(1<<(MySQLStatementParserSTATUS-635))|(1<<(MySQLStatementParserSTOP-635))|(1<<(MySQLStatementParserSTORAGE-635)))) != 0) || (((_la-669)&-(0x1f+1)) == 0 && ((1<<uint((_la-669)))&((1<<(MySQLStatementParserSTREAM-669))|(1<<(MySQLStatementParserSTRING-669))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-669))|(1<<(MySQLStatementParserSUBJECT-669))|(1<<(MySQLStatementParserSUBPARTITION-669))|(1<<(MySQLStatementParserSUBPARTITIONS-669))|(1<<(MySQLStatementParserSUPER-669))|(1<<(MySQLStatementParserSUSPEND-669))|(1<<(MySQLStatementParserSWAPS-669))|(1<<(MySQLStatementParserSWITCHES-669))|(1<<(MySQLStatementParserTABLES-669))|(1<<(MySQLStatementParserTABLESPACE-669))|(1<<(MySQLStatementParserTABLE_CHECKSUM-669))|(1<<(MySQLStatementParserTABLE_NAME-669))|(1<<(MySQLStatementParserTEMPORARY-669))|(1<<(MySQLStatementParserTEMPTABLE-669))|(1<<(MySQLStatementParserTEXT-669))|(1<<(MySQLStatementParserTHAN-669))|(1<<(MySQLStatementParserTHREAD_PRIORITY-669))|(1<<(MySQLStatementParserTIES-669))|(1<<(MySQLStatementParserTIME-669))|(1<<(MySQLStatementParserTIMESTAMP-669))|(1<<(MySQLStatementParserTIMESTAMP_ADD-669))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-669))|(1<<(MySQLStatementParserTLS-669)))) != 0) || (((_la-703)&-(0x1f+1)) == 0 && ((1<<uint((_la-703)))&((1<<(MySQLStatementParserTRANSACTION-703))|(1<<(MySQLStatementParserTRIGGERS-703))|(1<<(MySQLStatementParserTRUNCATE-703))|(1<<(MySQLStatementParserTYPE-703))|(1<<(MySQLStatementParserTYPES-703))|(1<<(MySQLStatementParserUNBOUNDED-703))|(1<<(MySQLStatementParserUNCOMMITTED-703))|(1<<(MySQLStatementParserUNDEFINED-703))|(1<<(MySQLStatementParserUNDOFILE-703))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-703))|(1<<(MySQLStatementParserUNICODE-703))|(1<<(MySQLStatementParserUNINSTALL-703))|(1<<(MySQLStatementParserUNKNOWN-703))|(1<<(MySQLStatementParserUNTIL-703))|(1<<(MySQLStatementParserUPGRADE-703))|(1<<(MySQLStatementParserUSER-703))|(1<<(MySQLStatementParserUSER_RESOURCES-703))|(1<<(MySQLStatementParserUSE_FRM-703)))) != 0) || (((_la-735)&-(0x1f+1)) == 0 && ((1<<uint((_la-735)))&((1<<(MySQLStatementParserVALIDATION-735))|(1<<(MySQLStatementParserVALUE-735))|(1<<(MySQLStatementParserVARIABLES-735))|(1<<(MySQLStatementParserVCPU-735))|(1<<(MySQLStatementParserVIEW-735))|(1<<(MySQLStatementParserVISIBLE-735))|(1<<(MySQLStatementParserWAIT-735))|(1<<(MySQLStatementParserWARNINGS-735))|(1<<(MySQLStatementParserWEEK-735))|(1<<(MySQLStatementParserWEIGHT_STRING-735))|(1<<(MySQLStatementParserWITHOUT-735))|(1<<(MySQLStatementParserWORK-735))|(1<<(MySQLStatementParserWRAPPER-735))|(1<<(MySQLStatementParserX509-735))|(1<<(MySQLStatementParserXA-735))|(1<<(MySQLStatementParserXID-735))|(1<<(MySQLStatementParserXML-735))|(1<<(MySQLStatementParserYEAR-735)))) != 0) || _la == MySQLStatementParserIDENTIFIER_ || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
		{
			p.SetState(5698)
			p.LabelName()
		}
		{
			p.SetState(5699)
			p.Match(MySQLStatementParserCOLON_)
		}

	}
	{
		p.SetState(5703)
		p.Match(MySQLStatementParserLOOP)
	}
	p.SetState(5705)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(5704)
				p.ValidStatement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(5707)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 727, p.GetParserRuleContext())
	}
	{
		p.SetState(5709)
		p.Match(MySQLStatementParserEND)
	}
	{
		p.SetState(5710)
		p.Match(MySQLStatementParserLOOP)
	}
	p.SetState(5712)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 728, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5711)
			p.LabelName()
		}

	}

	return localctx
}

// IRepeatStatementContext is an interface to support dynamic dispatch.
type IRepeatStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRepeatStatementContext differentiates from other interfaces.
	IsRepeatStatementContext()
}

type RepeatStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRepeatStatementContext() *RepeatStatementContext {
	var p = new(RepeatStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_repeatStatement
	return p
}

func (*RepeatStatementContext) IsRepeatStatementContext() {}

func NewRepeatStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RepeatStatementContext {
	var p = new(RepeatStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_repeatStatement

	return p
}

func (s *RepeatStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *RepeatStatementContext) AllREPEAT() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserREPEAT)
}

func (s *RepeatStatementContext) REPEAT(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPEAT, i)
}

func (s *RepeatStatementContext) UNTIL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNTIL, 0)
}

func (s *RepeatStatementContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *RepeatStatementContext) END() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEND, 0)
}

func (s *RepeatStatementContext) AllLabelName() []ILabelNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILabelNameContext)(nil)).Elem())
	var tst = make([]ILabelNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILabelNameContext)
		}
	}

	return tst
}

func (s *RepeatStatementContext) LabelName(i int) ILabelNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILabelNameContext)
}

func (s *RepeatStatementContext) COLON_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOLON_, 0)
}

func (s *RepeatStatementContext) AllValidStatement() []IValidStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IValidStatementContext)(nil)).Elem())
	var tst = make([]IValidStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IValidStatementContext)
		}
	}

	return tst
}

func (s *RepeatStatementContext) ValidStatement(i int) IValidStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValidStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IValidStatementContext)
}

func (s *RepeatStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RepeatStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RepeatStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterRepeatStatement(s)
	}
}

func (s *RepeatStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitRepeatStatement(s)
	}
}

func (s *RepeatStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitRepeatStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) RepeatStatement() (localctx IRepeatStatementContext) {
	this := p
	_ = this

	localctx = NewRepeatStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 762, MySQLStatementParserRULE_repeatStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5717)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49))|(1<<(MySQLStatementParserGROUP_CONCAT-49))|(1<<(MySQLStatementParserCAST-49))|(1<<(MySQLStatementParserPOSITION-49))|(1<<(MySQLStatementParserSUBSTRING-49))|(1<<(MySQLStatementParserSUBSTR-49))|(1<<(MySQLStatementParserEXTRACT-49))|(1<<(MySQLStatementParserTRIM-49))|(1<<(MySQLStatementParserLAST_DAY-49))|(1<<(MySQLStatementParserTRADITIONAL-49))|(1<<(MySQLStatementParserTREE-49))|(1<<(MySQLStatementParserMYSQL_ADMIN-49))|(1<<(MySQLStatementParserINSTANT-49))|(1<<(MySQLStatementParserINPLACE-49))|(1<<(MySQLStatementParserCOPY-49))|(1<<(MySQLStatementParserUL_BINARY-49))|(1<<(MySQLStatementParserAUTOCOMMIT-49))|(1<<(MySQLStatementParserINNODB-49))|(1<<(MySQLStatementParserREDO_LOG-49))|(1<<(MySQLStatementParserACCOUNT-49))|(1<<(MySQLStatementParserACTION-49))|(1<<(MySQLStatementParserACTIVE-49))|(1<<(MySQLStatementParserADMIN-49))|(1<<(MySQLStatementParserAFTER-49))|(1<<(MySQLStatementParserAGAINST-49)))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(MySQLStatementParserAGGREGATE-81))|(1<<(MySQLStatementParserALGORITHM-81))|(1<<(MySQLStatementParserALWAYS-81))|(1<<(MySQLStatementParserANY-81))|(1<<(MySQLStatementParserARRAY-81))|(1<<(MySQLStatementParserASCII-81))|(1<<(MySQLStatementParserAT-81))|(1<<(MySQLStatementParserATTRIBUTE-81))|(1<<(MySQLStatementParserAUTOEXTEND_SIZE-81))|(1<<(MySQLStatementParserAUTO_INCREMENT-81))|(1<<(MySQLStatementParserAVG-81))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-81))|(1<<(MySQLStatementParserBACKUP-81))|(1<<(MySQLStatementParserBEGIN-81))|(1<<(MySQLStatementParserBINLOG-81))|(1<<(MySQLStatementParserBIT-81))|(1<<(MySQLStatementParserBLOCK-81))|(1<<(MySQLStatementParserBOOL-81))|(1<<(MySQLStatementParserBOOLEAN-81)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(MySQLStatementParserBTREE-114))|(1<<(MySQLStatementParserBUCKETS-114))|(1<<(MySQLStatementParserBYTE-114))|(1<<(MySQLStatementParserCACHE-114))|(1<<(MySQLStatementParserCASCADED-114))|(1<<(MySQLStatementParserCATALOG_NAME-114))|(1<<(MySQLStatementParserCHAIN-114))|(1<<(MySQLStatementParserCHANGED-114))|(1<<(MySQLStatementParserCHANNEL-114))|(1<<(MySQLStatementParserCHARSET-114))|(1<<(MySQLStatementParserCHECKSUM-114))|(1<<(MySQLStatementParserCIPHER-114))|(1<<(MySQLStatementParserCLASS_ORIGIN-114))|(1<<(MySQLStatementParserCLIENT-114))|(1<<(MySQLStatementParserCLONE-114))|(1<<(MySQLStatementParserCLOSE-114))|(1<<(MySQLStatementParserCOALESCE-114))|(1<<(MySQLStatementParserCODE-114))|(1<<(MySQLStatementParserCOLLATION-114))|(1<<(MySQLStatementParserCOLUMNS-114))|(1<<(MySQLStatementParserCOLUMN_FORMAT-114))|(1<<(MySQLStatementParserCOLUMN_NAME-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(MySQLStatementParserCOMMENT-146))|(1<<(MySQLStatementParserCOMMIT-146))|(1<<(MySQLStatementParserCOMMITTED-146))|(1<<(MySQLStatementParserCOMPACT-146))|(1<<(MySQLStatementParserCOMPLETION-146))|(1<<(MySQLStatementParserCOMPONENT-146))|(1<<(MySQLStatementParserCOMPRESSED-146))|(1<<(MySQLStatementParserCOMPRESSION-146))|(1<<(MySQLStatementParserCONCURRENT-146))|(1<<(MySQLStatementParserCONNECTION-146))|(1<<(MySQLStatementParserCONSISTENT-146))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-146))|(1<<(MySQLStatementParserCONSTRAINT_NAME-146))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-146))|(1<<(MySQLStatementParserCONTAINS-146))|(1<<(MySQLStatementParserCONTEXT-146))|(1<<(MySQLStatementParserCPU-146))|(1<<(MySQLStatementParserCURRENT-146))|(1<<(MySQLStatementParserCURSOR_NAME-146)))) != 0) || (((_la-178)&-(0x1f+1)) == 0 && ((1<<uint((_la-178)))&((1<<(MySQLStatementParserDATA-178))|(1<<(MySQLStatementParserDATAFILE-178))|(1<<(MySQLStatementParserDATE-178))|(1<<(MySQLStatementParserDATETIME-178))|(1<<(MySQLStatementParserDAY-178))|(1<<(MySQLStatementParserDEALLOCATE-178))|(1<<(MySQLStatementParserDEFAULT_AUTH-178))|(1<<(MySQLStatementParserDEFINER-178))|(1<<(MySQLStatementParserDEFINITION-178))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-178))|(1<<(MySQLStatementParserDESCRIPTION-178))|(1<<(MySQLStatementParserDIAGNOSTICS-178))|(1<<(MySQLStatementParserDIRECTORY-178))|(1<<(MySQLStatementParserDISABLE-178))|(1<<(MySQLStatementParserDISCARD-178))|(1<<(MySQLStatementParserDISK-178)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(MySQLStatementParserDO-213))|(1<<(MySQLStatementParserDUMPFILE-213))|(1<<(MySQLStatementParserDUPLICATE-213))|(1<<(MySQLStatementParserDYNAMIC-213))|(1<<(MySQLStatementParserENABLE-213))|(1<<(MySQLStatementParserENCRYPTION-213))|(1<<(MySQLStatementParserEND-213))|(1<<(MySQLStatementParserENDS-213))|(1<<(MySQLStatementParserENFORCED-213))|(1<<(MySQLStatementParserENGINE-213))|(1<<(MySQLStatementParserENGINES-213))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-213))|(1<<(MySQLStatementParserENUM-213))|(1<<(MySQLStatementParserERROR-213))|(1<<(MySQLStatementParserERRORS-213))|(1<<(MySQLStatementParserESCAPE-213))|(1<<(MySQLStatementParserEVENT-213))|(1<<(MySQLStatementParserEVENTS-213))|(1<<(MySQLStatementParserEVERY-213))|(1<<(MySQLStatementParserEXCHANGE-213))|(1<<(MySQLStatementParserEXCLUDE-213))|(1<<(MySQLStatementParserEXECUTE-213)))) != 0) || (((_la-247)&-(0x1f+1)) == 0 && ((1<<uint((_la-247)))&((1<<(MySQLStatementParserEXPANSION-247))|(1<<(MySQLStatementParserEXPIRE-247))|(1<<(MySQLStatementParserEXPORT-247))|(1<<(MySQLStatementParserEXTENDED-247))|(1<<(MySQLStatementParserEXTENT_SIZE-247))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-247))|(1<<(MySQLStatementParserFAST-247))|(1<<(MySQLStatementParserFAULTS-247))|(1<<(MySQLStatementParserFILE-247))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-247))|(1<<(MySQLStatementParserFILTER-247))|(1<<(MySQLStatementParserFIRST-247))|(1<<(MySQLStatementParserFIXED-247))|(1<<(MySQLStatementParserFLUSH-247))|(1<<(MySQLStatementParserFOLLOWING-247))|(1<<(MySQLStatementParserFOLLOWS-247))|(1<<(MySQLStatementParserFORMAT-247))|(1<<(MySQLStatementParserFOUND-247))|(1<<(MySQLStatementParserFULL-247)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(MySQLStatementParserGENERAL-279))|(1<<(MySQLStatementParserGEOMETRY-279))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-279))|(1<<(MySQLStatementParserGET_FORMAT-279))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-279))|(1<<(MySQLStatementParserGLOBAL-279))|(1<<(MySQLStatementParserGRANTS-279))|(1<<(MySQLStatementParserGROUP_REPLICATION-279))|(1<<(MySQLStatementParserHANDLER-279))|(1<<(MySQLStatementParserHASH-279))|(1<<(MySQLStatementParserHELP-279))|(1<<(MySQLStatementParserHISTOGRAM-279))|(1<<(MySQLStatementParserHISTORY-279))|(1<<(MySQLStatementParserHOST-279))|(1<<(MySQLStatementParserHOSTS-279))|(1<<(MySQLStatementParserHOUR-279))|(1<<(MySQLStatementParserIDENTIFIED-279))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-279))|(1<<(MySQLStatementParserIMPORT-279)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySQLStatementParserINACTIVE-312))|(1<<(MySQLStatementParserINDEXES-312))|(1<<(MySQLStatementParserINITIAL_SIZE-312))|(1<<(MySQLStatementParserINSERT_METHOD-312))|(1<<(MySQLStatementParserINSTALL-312))|(1<<(MySQLStatementParserINSTANCE-312))|(1<<(MySQLStatementParserINVISIBLE-312))|(1<<(MySQLStatementParserINVOKER-312))|(1<<(MySQLStatementParserIO-312))|(1<<(MySQLStatementParserIPC-312))|(1<<(MySQLStatementParserISOLATION-312))|(1<<(MySQLStatementParserISSUER-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySQLStatementParserJSON-344))|(1<<(MySQLStatementParserJSON_VALUE-344))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-344))|(1<<(MySQLStatementParserLANGUAGE-344))|(1<<(MySQLStatementParserLAST-344))|(1<<(MySQLStatementParserLAST_VALUE-344))|(1<<(MySQLStatementParserLEAVES-344))|(1<<(MySQLStatementParserLESS-344))|(1<<(MySQLStatementParserLEVEL-344))|(1<<(MySQLStatementParserLINESTRING-344))|(1<<(MySQLStatementParserLIST-344))|(1<<(MySQLStatementParserLOCAL-344))|(1<<(MySQLStatementParserLOCKED-344))|(1<<(MySQLStatementParserLOCKS-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySQLStatementParserLOGFILE-376))|(1<<(MySQLStatementParserLOGS-376))|(1<<(MySQLStatementParserMASTER-376))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-376))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-376))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-376))|(1<<(MySQLStatementParserMASTER_DELAY-376))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-376))|(1<<(MySQLStatementParserMASTER_HOST-376))|(1<<(MySQLStatementParserMASTER_LOG_FILE-376))|(1<<(MySQLStatementParserMASTER_LOG_POS-376))|(1<<(MySQLStatementParserMASTER_PASSWORD-376))|(1<<(MySQLStatementParserMASTER_PORT-376))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-376))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-376))|(1<<(MySQLStatementParserMASTER_SERVER_ID-376))|(1<<(MySQLStatementParserMASTER_SSL-376))|(1<<(MySQLStatementParserMASTER_SSL_CA-376))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_CERT-376))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-376))|(1<<(MySQLStatementParserMASTER_SSL_CRL-376))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_KEY-376))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySQLStatementParserMASTER_TLS_VERSION-408))|(1<<(MySQLStatementParserMASTER_USER-408))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-408))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_ROWS-408))|(1<<(MySQLStatementParserMAX_SIZE-408))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-408))|(1<<(MySQLStatementParserMEDIUM-408))|(1<<(MySQLStatementParserMEMBER-408))|(1<<(MySQLStatementParserMEMORY-408))|(1<<(MySQLStatementParserMERGE-408))|(1<<(MySQLStatementParserMESSAGE_TEXT-408))|(1<<(MySQLStatementParserMICROSECOND-408))|(1<<(MySQLStatementParserMIGRATE-408))|(1<<(MySQLStatementParserMINUTE-408))|(1<<(MySQLStatementParserMIN_ROWS-408))|(1<<(MySQLStatementParserMODE-408))|(1<<(MySQLStatementParserMODIFY-408))|(1<<(MySQLStatementParserMONTH-408))|(1<<(MySQLStatementParserMULTILINESTRING-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySQLStatementParserMULTIPOINT-440))|(1<<(MySQLStatementParserMULTIPOLYGON-440))|(1<<(MySQLStatementParserMUTEX-440))|(1<<(MySQLStatementParserMYSQL_ERRNO-440))|(1<<(MySQLStatementParserNAME-440))|(1<<(MySQLStatementParserNAMES-440))|(1<<(MySQLStatementParserNATIONAL-440))|(1<<(MySQLStatementParserNCHAR-440))|(1<<(MySQLStatementParserNDBCLUSTER-440))|(1<<(MySQLStatementParserNESTED-440))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-440))|(1<<(MySQLStatementParserNEVER-440))|(1<<(MySQLStatementParserNEW-440))|(1<<(MySQLStatementParserNEXT-440))|(1<<(MySQLStatementParserNO-440))|(1<<(MySQLStatementParserNODEGROUP-440))|(1<<(MySQLStatementParserNONE-440))|(1<<(MySQLStatementParserNOWAIT-440))|(1<<(MySQLStatementParserNO_WAIT-440))|(1<<(MySQLStatementParserNULLS-440))|(1<<(MySQLStatementParserNUMBER-440))|(1<<(MySQLStatementParserNVARCHAR-440))|(1<<(MySQLStatementParserOFF-440))|(1<<(MySQLStatementParserOFFSET-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySQLStatementParserOJ-472))|(1<<(MySQLStatementParserOLD-472))|(1<<(MySQLStatementParserONE-472))|(1<<(MySQLStatementParserONLY-472))|(1<<(MySQLStatementParserOPEN-472))|(1<<(MySQLStatementParserOPTIONAL-472))|(1<<(MySQLStatementParserOPTIONS-472))|(1<<(MySQLStatementParserORDINALITY-472))|(1<<(MySQLStatementParserORGANIZATION-472))|(1<<(MySQLStatementParserOTHERS-472))|(1<<(MySQLStatementParserOWNER-472))|(1<<(MySQLStatementParserPACK_KEYS-472))|(1<<(MySQLStatementParserPAGE-472))|(1<<(MySQLStatementParserPARSER-472))|(1<<(MySQLStatementParserPARTIAL-472))|(1<<(MySQLStatementParserPARTITIONING-472))|(1<<(MySQLStatementParserPARTITIONS-472))|(1<<(MySQLStatementParserPASSWORD-472))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-472))|(1<<(MySQLStatementParserPATH-472)))) != 0) || (((_la-505)&-(0x1f+1)) == 0 && ((1<<uint((_la-505)))&((1<<(MySQLStatementParserPERSIST-505))|(1<<(MySQLStatementParserPERSIST_ONLY-505))|(1<<(MySQLStatementParserPHASE-505))|(1<<(MySQLStatementParserPLUGIN-505))|(1<<(MySQLStatementParserPLUGINS-505))|(1<<(MySQLStatementParserPLUGIN_DIR-505))|(1<<(MySQLStatementParserPOINT-505))|(1<<(MySQLStatementParserPOLYGON-505))|(1<<(MySQLStatementParserPORT-505))|(1<<(MySQLStatementParserPRECEDES-505))|(1<<(MySQLStatementParserPRECEDING-505))|(1<<(MySQLStatementParserPREPARE-505))|(1<<(MySQLStatementParserPRESERVE-505))|(1<<(MySQLStatementParserPREV-505))|(1<<(MySQLStatementParserPRIVILEGES-505))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-505))|(1<<(MySQLStatementParserPROCESS-505))|(1<<(MySQLStatementParserPROCESSLIST-505))|(1<<(MySQLStatementParserPROFILE-505))|(1<<(MySQLStatementParserPROFILES-505))|(1<<(MySQLStatementParserPROXY-505))|(1<<(MySQLStatementParserQUARTER-505))|(1<<(MySQLStatementParserQUERY-505))|(1<<(MySQLStatementParserQUICK-505))|(1<<(MySQLStatementParserRANDOM-505)))) != 0) || (((_la-538)&-(0x1f+1)) == 0 && ((1<<uint((_la-538)))&((1<<(MySQLStatementParserREAD_ONLY-538))|(1<<(MySQLStatementParserREBUILD-538))|(1<<(MySQLStatementParserRECOVER-538))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-538))|(1<<(MySQLStatementParserREDUNDANT-538))|(1<<(MySQLStatementParserREFERENCE-538))|(1<<(MySQLStatementParserRELAY-538))|(1<<(MySQLStatementParserRELAYLOG-538))|(1<<(MySQLStatementParserRELAY_LOG_FILE-538))|(1<<(MySQLStatementParserRELAY_LOG_POS-538))|(1<<(MySQLStatementParserRELAY_THREAD-538))|(1<<(MySQLStatementParserRELOAD-538))|(1<<(MySQLStatementParserREMOVE-538))|(1<<(MySQLStatementParserREORGANIZE-538))|(1<<(MySQLStatementParserREPAIR-538))|(1<<(MySQLStatementParserREPEATABLE-538))|(1<<(MySQLStatementParserREPLICATE_DO_DB-538))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-538)))) != 0) || (((_la-570)&-(0x1f+1)) == 0 && ((1<<uint((_la-570)))&((1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-570))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-570))|(1<<(MySQLStatementParserREPLICATION-570))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-570))|(1<<(MySQLStatementParserRESET-570))|(1<<(MySQLStatementParserRESOURCE-570))|(1<<(MySQLStatementParserRESPECT-570))|(1<<(MySQLStatementParserRESTART-570))|(1<<(MySQLStatementParserRESTORE-570))|(1<<(MySQLStatementParserRESUME-570))|(1<<(MySQLStatementParserRETAIN-570))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-570))|(1<<(MySQLStatementParserRETURNING-570))|(1<<(MySQLStatementParserRETURNS-570))|(1<<(MySQLStatementParserREUSE-570))|(1<<(MySQLStatementParserREVERSE-570))|(1<<(MySQLStatementParserROLE-570))|(1<<(MySQLStatementParserROLLBACK-570))|(1<<(MySQLStatementParserROLLUP-570))|(1<<(MySQLStatementParserROTATE-570))|(1<<(MySQLStatementParserROUTINE-570))|(1<<(MySQLStatementParserROW_COUNT-570))|(1<<(MySQLStatementParserROW_FORMAT-570)))) != 0) || (((_la-603)&-(0x1f+1)) == 0 && ((1<<uint((_la-603)))&((1<<(MySQLStatementParserRTREE-603))|(1<<(MySQLStatementParserSAVEPOINT-603))|(1<<(MySQLStatementParserSCHEDULE-603))|(1<<(MySQLStatementParserSCHEMA_NAME-603))|(1<<(MySQLStatementParserSECOND-603))|(1<<(MySQLStatementParserSECONDARY-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-603))|(1<<(MySQLStatementParserSECONDARY_LOAD-603))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-603))|(1<<(MySQLStatementParserSECURITY-603))|(1<<(MySQLStatementParserSERIAL-603))|(1<<(MySQLStatementParserSERIALIZABLE-603))|(1<<(MySQLStatementParserSERVER-603))|(1<<(MySQLStatementParserSESSION-603))|(1<<(MySQLStatementParserSHARE-603))|(1<<(MySQLStatementParserSHUTDOWN-603))|(1<<(MySQLStatementParserSIGNED-603))|(1<<(MySQLStatementParserSIMPLE-603))|(1<<(MySQLStatementParserSLAVE-603))|(1<<(MySQLStatementParserSLOW-603)))) != 0) || (((_la-635)&-(0x1f+1)) == 0 && ((1<<uint((_la-635)))&((1<<(MySQLStatementParserSNAPSHOT-635))|(1<<(MySQLStatementParserSOCKET-635))|(1<<(MySQLStatementParserSONAME-635))|(1<<(MySQLStatementParserSOUNDS-635))|(1<<(MySQLStatementParserSOURCE-635))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-635))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-635))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-635))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-635))|(1<<(MySQLStatementParserSQL_NO_CACHE-635))|(1<<(MySQLStatementParserSQL_THREAD-635))|(1<<(MySQLStatementParserSRID-635))|(1<<(MySQLStatementParserSTACKED-635))|(1<<(MySQLStatementParserSTART-635))|(1<<(MySQLStatementParserSTARTS-635))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-635))|(1<<(MySQLStatementParserSTATS_PERSISTENT-635))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-635))|(1<<(MySQLStatementParserSTATUS-635))|(1<<(MySQLStatementParserSTOP-635))|(1<<(MySQLStatementParserSTORAGE-635)))) != 0) || (((_la-669)&-(0x1f+1)) == 0 && ((1<<uint((_la-669)))&((1<<(MySQLStatementParserSTREAM-669))|(1<<(MySQLStatementParserSTRING-669))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-669))|(1<<(MySQLStatementParserSUBJECT-669))|(1<<(MySQLStatementParserSUBPARTITION-669))|(1<<(MySQLStatementParserSUBPARTITIONS-669))|(1<<(MySQLStatementParserSUPER-669))|(1<<(MySQLStatementParserSUSPEND-669))|(1<<(MySQLStatementParserSWAPS-669))|(1<<(MySQLStatementParserSWITCHES-669))|(1<<(MySQLStatementParserTABLES-669))|(1<<(MySQLStatementParserTABLESPACE-669))|(1<<(MySQLStatementParserTABLE_CHECKSUM-669))|(1<<(MySQLStatementParserTABLE_NAME-669))|(1<<(MySQLStatementParserTEMPORARY-669))|(1<<(MySQLStatementParserTEMPTABLE-669))|(1<<(MySQLStatementParserTEXT-669))|(1<<(MySQLStatementParserTHAN-669))|(1<<(MySQLStatementParserTHREAD_PRIORITY-669))|(1<<(MySQLStatementParserTIES-669))|(1<<(MySQLStatementParserTIME-669))|(1<<(MySQLStatementParserTIMESTAMP-669))|(1<<(MySQLStatementParserTIMESTAMP_ADD-669))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-669))|(1<<(MySQLStatementParserTLS-669)))) != 0) || (((_la-703)&-(0x1f+1)) == 0 && ((1<<uint((_la-703)))&((1<<(MySQLStatementParserTRANSACTION-703))|(1<<(MySQLStatementParserTRIGGERS-703))|(1<<(MySQLStatementParserTRUNCATE-703))|(1<<(MySQLStatementParserTYPE-703))|(1<<(MySQLStatementParserTYPES-703))|(1<<(MySQLStatementParserUNBOUNDED-703))|(1<<(MySQLStatementParserUNCOMMITTED-703))|(1<<(MySQLStatementParserUNDEFINED-703))|(1<<(MySQLStatementParserUNDOFILE-703))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-703))|(1<<(MySQLStatementParserUNICODE-703))|(1<<(MySQLStatementParserUNINSTALL-703))|(1<<(MySQLStatementParserUNKNOWN-703))|(1<<(MySQLStatementParserUNTIL-703))|(1<<(MySQLStatementParserUPGRADE-703))|(1<<(MySQLStatementParserUSER-703))|(1<<(MySQLStatementParserUSER_RESOURCES-703))|(1<<(MySQLStatementParserUSE_FRM-703)))) != 0) || (((_la-735)&-(0x1f+1)) == 0 && ((1<<uint((_la-735)))&((1<<(MySQLStatementParserVALIDATION-735))|(1<<(MySQLStatementParserVALUE-735))|(1<<(MySQLStatementParserVARIABLES-735))|(1<<(MySQLStatementParserVCPU-735))|(1<<(MySQLStatementParserVIEW-735))|(1<<(MySQLStatementParserVISIBLE-735))|(1<<(MySQLStatementParserWAIT-735))|(1<<(MySQLStatementParserWARNINGS-735))|(1<<(MySQLStatementParserWEEK-735))|(1<<(MySQLStatementParserWEIGHT_STRING-735))|(1<<(MySQLStatementParserWITHOUT-735))|(1<<(MySQLStatementParserWORK-735))|(1<<(MySQLStatementParserWRAPPER-735))|(1<<(MySQLStatementParserX509-735))|(1<<(MySQLStatementParserXA-735))|(1<<(MySQLStatementParserXID-735))|(1<<(MySQLStatementParserXML-735))|(1<<(MySQLStatementParserYEAR-735)))) != 0) || _la == MySQLStatementParserIDENTIFIER_ || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
		{
			p.SetState(5714)
			p.LabelName()
		}
		{
			p.SetState(5715)
			p.Match(MySQLStatementParserCOLON_)
		}

	}
	{
		p.SetState(5719)
		p.Match(MySQLStatementParserREPEAT)
	}
	p.SetState(5721)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(5720)
				p.ValidStatement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(5723)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 730, p.GetParserRuleContext())
	}
	{
		p.SetState(5725)
		p.Match(MySQLStatementParserUNTIL)
	}
	{
		p.SetState(5726)
		p.expr(0)
	}
	{
		p.SetState(5727)
		p.Match(MySQLStatementParserEND)
	}
	{
		p.SetState(5728)
		p.Match(MySQLStatementParserREPEAT)
	}
	p.SetState(5730)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 731, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5729)
			p.LabelName()
		}

	}

	return localctx
}

// IReturnStatementContext is an interface to support dynamic dispatch.
type IReturnStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnStatementContext differentiates from other interfaces.
	IsReturnStatementContext()
}

type ReturnStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnStatementContext() *ReturnStatementContext {
	var p = new(ReturnStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_returnStatement
	return p
}

func (*ReturnStatementContext) IsReturnStatementContext() {}

func NewReturnStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnStatementContext {
	var p = new(ReturnStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_returnStatement

	return p
}

func (s *ReturnStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnStatementContext) RETURN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRETURN, 0)
}

func (s *ReturnStatementContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ReturnStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterReturnStatement(s)
	}
}

func (s *ReturnStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitReturnStatement(s)
	}
}

func (s *ReturnStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitReturnStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ReturnStatement() (localctx IReturnStatementContext) {
	this := p
	_ = this

	localctx = NewReturnStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 764, MySQLStatementParserRULE_returnStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5732)
		p.Match(MySQLStatementParserRETURN)
	}
	{
		p.SetState(5733)
		p.expr(0)
	}

	return localctx
}

// IWhileStatementContext is an interface to support dynamic dispatch.
type IWhileStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhileStatementContext differentiates from other interfaces.
	IsWhileStatementContext()
}

type WhileStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhileStatementContext() *WhileStatementContext {
	var p = new(WhileStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_whileStatement
	return p
}

func (*WhileStatementContext) IsWhileStatementContext() {}

func NewWhileStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhileStatementContext {
	var p = new(WhileStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_whileStatement

	return p
}

func (s *WhileStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *WhileStatementContext) AllWHILE() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserWHILE)
}

func (s *WhileStatementContext) WHILE(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWHILE, i)
}

func (s *WhileStatementContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *WhileStatementContext) DO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDO, 0)
}

func (s *WhileStatementContext) END() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEND, 0)
}

func (s *WhileStatementContext) AllLabelName() []ILabelNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILabelNameContext)(nil)).Elem())
	var tst = make([]ILabelNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILabelNameContext)
		}
	}

	return tst
}

func (s *WhileStatementContext) LabelName(i int) ILabelNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILabelNameContext)
}

func (s *WhileStatementContext) COLON_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOLON_, 0)
}

func (s *WhileStatementContext) AllValidStatement() []IValidStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IValidStatementContext)(nil)).Elem())
	var tst = make([]IValidStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IValidStatementContext)
		}
	}

	return tst
}

func (s *WhileStatementContext) ValidStatement(i int) IValidStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValidStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IValidStatementContext)
}

func (s *WhileStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhileStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhileStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterWhileStatement(s)
	}
}

func (s *WhileStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitWhileStatement(s)
	}
}

func (s *WhileStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitWhileStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) WhileStatement() (localctx IWhileStatementContext) {
	this := p
	_ = this

	localctx = NewWhileStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 766, MySQLStatementParserRULE_whileStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5738)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49))|(1<<(MySQLStatementParserGROUP_CONCAT-49))|(1<<(MySQLStatementParserCAST-49))|(1<<(MySQLStatementParserPOSITION-49))|(1<<(MySQLStatementParserSUBSTRING-49))|(1<<(MySQLStatementParserSUBSTR-49))|(1<<(MySQLStatementParserEXTRACT-49))|(1<<(MySQLStatementParserTRIM-49))|(1<<(MySQLStatementParserLAST_DAY-49))|(1<<(MySQLStatementParserTRADITIONAL-49))|(1<<(MySQLStatementParserTREE-49))|(1<<(MySQLStatementParserMYSQL_ADMIN-49))|(1<<(MySQLStatementParserINSTANT-49))|(1<<(MySQLStatementParserINPLACE-49))|(1<<(MySQLStatementParserCOPY-49))|(1<<(MySQLStatementParserUL_BINARY-49))|(1<<(MySQLStatementParserAUTOCOMMIT-49))|(1<<(MySQLStatementParserINNODB-49))|(1<<(MySQLStatementParserREDO_LOG-49))|(1<<(MySQLStatementParserACCOUNT-49))|(1<<(MySQLStatementParserACTION-49))|(1<<(MySQLStatementParserACTIVE-49))|(1<<(MySQLStatementParserADMIN-49))|(1<<(MySQLStatementParserAFTER-49))|(1<<(MySQLStatementParserAGAINST-49)))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(MySQLStatementParserAGGREGATE-81))|(1<<(MySQLStatementParserALGORITHM-81))|(1<<(MySQLStatementParserALWAYS-81))|(1<<(MySQLStatementParserANY-81))|(1<<(MySQLStatementParserARRAY-81))|(1<<(MySQLStatementParserASCII-81))|(1<<(MySQLStatementParserAT-81))|(1<<(MySQLStatementParserATTRIBUTE-81))|(1<<(MySQLStatementParserAUTOEXTEND_SIZE-81))|(1<<(MySQLStatementParserAUTO_INCREMENT-81))|(1<<(MySQLStatementParserAVG-81))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-81))|(1<<(MySQLStatementParserBACKUP-81))|(1<<(MySQLStatementParserBEGIN-81))|(1<<(MySQLStatementParserBINLOG-81))|(1<<(MySQLStatementParserBIT-81))|(1<<(MySQLStatementParserBLOCK-81))|(1<<(MySQLStatementParserBOOL-81))|(1<<(MySQLStatementParserBOOLEAN-81)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(MySQLStatementParserBTREE-114))|(1<<(MySQLStatementParserBUCKETS-114))|(1<<(MySQLStatementParserBYTE-114))|(1<<(MySQLStatementParserCACHE-114))|(1<<(MySQLStatementParserCASCADED-114))|(1<<(MySQLStatementParserCATALOG_NAME-114))|(1<<(MySQLStatementParserCHAIN-114))|(1<<(MySQLStatementParserCHANGED-114))|(1<<(MySQLStatementParserCHANNEL-114))|(1<<(MySQLStatementParserCHARSET-114))|(1<<(MySQLStatementParserCHECKSUM-114))|(1<<(MySQLStatementParserCIPHER-114))|(1<<(MySQLStatementParserCLASS_ORIGIN-114))|(1<<(MySQLStatementParserCLIENT-114))|(1<<(MySQLStatementParserCLONE-114))|(1<<(MySQLStatementParserCLOSE-114))|(1<<(MySQLStatementParserCOALESCE-114))|(1<<(MySQLStatementParserCODE-114))|(1<<(MySQLStatementParserCOLLATION-114))|(1<<(MySQLStatementParserCOLUMNS-114))|(1<<(MySQLStatementParserCOLUMN_FORMAT-114))|(1<<(MySQLStatementParserCOLUMN_NAME-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(MySQLStatementParserCOMMENT-146))|(1<<(MySQLStatementParserCOMMIT-146))|(1<<(MySQLStatementParserCOMMITTED-146))|(1<<(MySQLStatementParserCOMPACT-146))|(1<<(MySQLStatementParserCOMPLETION-146))|(1<<(MySQLStatementParserCOMPONENT-146))|(1<<(MySQLStatementParserCOMPRESSED-146))|(1<<(MySQLStatementParserCOMPRESSION-146))|(1<<(MySQLStatementParserCONCURRENT-146))|(1<<(MySQLStatementParserCONNECTION-146))|(1<<(MySQLStatementParserCONSISTENT-146))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-146))|(1<<(MySQLStatementParserCONSTRAINT_NAME-146))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-146))|(1<<(MySQLStatementParserCONTAINS-146))|(1<<(MySQLStatementParserCONTEXT-146))|(1<<(MySQLStatementParserCPU-146))|(1<<(MySQLStatementParserCURRENT-146))|(1<<(MySQLStatementParserCURSOR_NAME-146)))) != 0) || (((_la-178)&-(0x1f+1)) == 0 && ((1<<uint((_la-178)))&((1<<(MySQLStatementParserDATA-178))|(1<<(MySQLStatementParserDATAFILE-178))|(1<<(MySQLStatementParserDATE-178))|(1<<(MySQLStatementParserDATETIME-178))|(1<<(MySQLStatementParserDAY-178))|(1<<(MySQLStatementParserDEALLOCATE-178))|(1<<(MySQLStatementParserDEFAULT_AUTH-178))|(1<<(MySQLStatementParserDEFINER-178))|(1<<(MySQLStatementParserDEFINITION-178))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-178))|(1<<(MySQLStatementParserDESCRIPTION-178))|(1<<(MySQLStatementParserDIAGNOSTICS-178))|(1<<(MySQLStatementParserDIRECTORY-178))|(1<<(MySQLStatementParserDISABLE-178))|(1<<(MySQLStatementParserDISCARD-178))|(1<<(MySQLStatementParserDISK-178)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(MySQLStatementParserDO-213))|(1<<(MySQLStatementParserDUMPFILE-213))|(1<<(MySQLStatementParserDUPLICATE-213))|(1<<(MySQLStatementParserDYNAMIC-213))|(1<<(MySQLStatementParserENABLE-213))|(1<<(MySQLStatementParserENCRYPTION-213))|(1<<(MySQLStatementParserEND-213))|(1<<(MySQLStatementParserENDS-213))|(1<<(MySQLStatementParserENFORCED-213))|(1<<(MySQLStatementParserENGINE-213))|(1<<(MySQLStatementParserENGINES-213))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-213))|(1<<(MySQLStatementParserENUM-213))|(1<<(MySQLStatementParserERROR-213))|(1<<(MySQLStatementParserERRORS-213))|(1<<(MySQLStatementParserESCAPE-213))|(1<<(MySQLStatementParserEVENT-213))|(1<<(MySQLStatementParserEVENTS-213))|(1<<(MySQLStatementParserEVERY-213))|(1<<(MySQLStatementParserEXCHANGE-213))|(1<<(MySQLStatementParserEXCLUDE-213))|(1<<(MySQLStatementParserEXECUTE-213)))) != 0) || (((_la-247)&-(0x1f+1)) == 0 && ((1<<uint((_la-247)))&((1<<(MySQLStatementParserEXPANSION-247))|(1<<(MySQLStatementParserEXPIRE-247))|(1<<(MySQLStatementParserEXPORT-247))|(1<<(MySQLStatementParserEXTENDED-247))|(1<<(MySQLStatementParserEXTENT_SIZE-247))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-247))|(1<<(MySQLStatementParserFAST-247))|(1<<(MySQLStatementParserFAULTS-247))|(1<<(MySQLStatementParserFILE-247))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-247))|(1<<(MySQLStatementParserFILTER-247))|(1<<(MySQLStatementParserFIRST-247))|(1<<(MySQLStatementParserFIXED-247))|(1<<(MySQLStatementParserFLUSH-247))|(1<<(MySQLStatementParserFOLLOWING-247))|(1<<(MySQLStatementParserFOLLOWS-247))|(1<<(MySQLStatementParserFORMAT-247))|(1<<(MySQLStatementParserFOUND-247))|(1<<(MySQLStatementParserFULL-247)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(MySQLStatementParserGENERAL-279))|(1<<(MySQLStatementParserGEOMETRY-279))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-279))|(1<<(MySQLStatementParserGET_FORMAT-279))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-279))|(1<<(MySQLStatementParserGLOBAL-279))|(1<<(MySQLStatementParserGRANTS-279))|(1<<(MySQLStatementParserGROUP_REPLICATION-279))|(1<<(MySQLStatementParserHANDLER-279))|(1<<(MySQLStatementParserHASH-279))|(1<<(MySQLStatementParserHELP-279))|(1<<(MySQLStatementParserHISTOGRAM-279))|(1<<(MySQLStatementParserHISTORY-279))|(1<<(MySQLStatementParserHOST-279))|(1<<(MySQLStatementParserHOSTS-279))|(1<<(MySQLStatementParserHOUR-279))|(1<<(MySQLStatementParserIDENTIFIED-279))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-279))|(1<<(MySQLStatementParserIMPORT-279)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySQLStatementParserINACTIVE-312))|(1<<(MySQLStatementParserINDEXES-312))|(1<<(MySQLStatementParserINITIAL_SIZE-312))|(1<<(MySQLStatementParserINSERT_METHOD-312))|(1<<(MySQLStatementParserINSTALL-312))|(1<<(MySQLStatementParserINSTANCE-312))|(1<<(MySQLStatementParserINVISIBLE-312))|(1<<(MySQLStatementParserINVOKER-312))|(1<<(MySQLStatementParserIO-312))|(1<<(MySQLStatementParserIPC-312))|(1<<(MySQLStatementParserISOLATION-312))|(1<<(MySQLStatementParserISSUER-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySQLStatementParserJSON-344))|(1<<(MySQLStatementParserJSON_VALUE-344))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-344))|(1<<(MySQLStatementParserLANGUAGE-344))|(1<<(MySQLStatementParserLAST-344))|(1<<(MySQLStatementParserLAST_VALUE-344))|(1<<(MySQLStatementParserLEAVES-344))|(1<<(MySQLStatementParserLESS-344))|(1<<(MySQLStatementParserLEVEL-344))|(1<<(MySQLStatementParserLINESTRING-344))|(1<<(MySQLStatementParserLIST-344))|(1<<(MySQLStatementParserLOCAL-344))|(1<<(MySQLStatementParserLOCKED-344))|(1<<(MySQLStatementParserLOCKS-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySQLStatementParserLOGFILE-376))|(1<<(MySQLStatementParserLOGS-376))|(1<<(MySQLStatementParserMASTER-376))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-376))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-376))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-376))|(1<<(MySQLStatementParserMASTER_DELAY-376))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-376))|(1<<(MySQLStatementParserMASTER_HOST-376))|(1<<(MySQLStatementParserMASTER_LOG_FILE-376))|(1<<(MySQLStatementParserMASTER_LOG_POS-376))|(1<<(MySQLStatementParserMASTER_PASSWORD-376))|(1<<(MySQLStatementParserMASTER_PORT-376))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-376))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-376))|(1<<(MySQLStatementParserMASTER_SERVER_ID-376))|(1<<(MySQLStatementParserMASTER_SSL-376))|(1<<(MySQLStatementParserMASTER_SSL_CA-376))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_CERT-376))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-376))|(1<<(MySQLStatementParserMASTER_SSL_CRL-376))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_KEY-376))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySQLStatementParserMASTER_TLS_VERSION-408))|(1<<(MySQLStatementParserMASTER_USER-408))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-408))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_ROWS-408))|(1<<(MySQLStatementParserMAX_SIZE-408))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-408))|(1<<(MySQLStatementParserMEDIUM-408))|(1<<(MySQLStatementParserMEMBER-408))|(1<<(MySQLStatementParserMEMORY-408))|(1<<(MySQLStatementParserMERGE-408))|(1<<(MySQLStatementParserMESSAGE_TEXT-408))|(1<<(MySQLStatementParserMICROSECOND-408))|(1<<(MySQLStatementParserMIGRATE-408))|(1<<(MySQLStatementParserMINUTE-408))|(1<<(MySQLStatementParserMIN_ROWS-408))|(1<<(MySQLStatementParserMODE-408))|(1<<(MySQLStatementParserMODIFY-408))|(1<<(MySQLStatementParserMONTH-408))|(1<<(MySQLStatementParserMULTILINESTRING-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySQLStatementParserMULTIPOINT-440))|(1<<(MySQLStatementParserMULTIPOLYGON-440))|(1<<(MySQLStatementParserMUTEX-440))|(1<<(MySQLStatementParserMYSQL_ERRNO-440))|(1<<(MySQLStatementParserNAME-440))|(1<<(MySQLStatementParserNAMES-440))|(1<<(MySQLStatementParserNATIONAL-440))|(1<<(MySQLStatementParserNCHAR-440))|(1<<(MySQLStatementParserNDBCLUSTER-440))|(1<<(MySQLStatementParserNESTED-440))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-440))|(1<<(MySQLStatementParserNEVER-440))|(1<<(MySQLStatementParserNEW-440))|(1<<(MySQLStatementParserNEXT-440))|(1<<(MySQLStatementParserNO-440))|(1<<(MySQLStatementParserNODEGROUP-440))|(1<<(MySQLStatementParserNONE-440))|(1<<(MySQLStatementParserNOWAIT-440))|(1<<(MySQLStatementParserNO_WAIT-440))|(1<<(MySQLStatementParserNULLS-440))|(1<<(MySQLStatementParserNUMBER-440))|(1<<(MySQLStatementParserNVARCHAR-440))|(1<<(MySQLStatementParserOFF-440))|(1<<(MySQLStatementParserOFFSET-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySQLStatementParserOJ-472))|(1<<(MySQLStatementParserOLD-472))|(1<<(MySQLStatementParserONE-472))|(1<<(MySQLStatementParserONLY-472))|(1<<(MySQLStatementParserOPEN-472))|(1<<(MySQLStatementParserOPTIONAL-472))|(1<<(MySQLStatementParserOPTIONS-472))|(1<<(MySQLStatementParserORDINALITY-472))|(1<<(MySQLStatementParserORGANIZATION-472))|(1<<(MySQLStatementParserOTHERS-472))|(1<<(MySQLStatementParserOWNER-472))|(1<<(MySQLStatementParserPACK_KEYS-472))|(1<<(MySQLStatementParserPAGE-472))|(1<<(MySQLStatementParserPARSER-472))|(1<<(MySQLStatementParserPARTIAL-472))|(1<<(MySQLStatementParserPARTITIONING-472))|(1<<(MySQLStatementParserPARTITIONS-472))|(1<<(MySQLStatementParserPASSWORD-472))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-472))|(1<<(MySQLStatementParserPATH-472)))) != 0) || (((_la-505)&-(0x1f+1)) == 0 && ((1<<uint((_la-505)))&((1<<(MySQLStatementParserPERSIST-505))|(1<<(MySQLStatementParserPERSIST_ONLY-505))|(1<<(MySQLStatementParserPHASE-505))|(1<<(MySQLStatementParserPLUGIN-505))|(1<<(MySQLStatementParserPLUGINS-505))|(1<<(MySQLStatementParserPLUGIN_DIR-505))|(1<<(MySQLStatementParserPOINT-505))|(1<<(MySQLStatementParserPOLYGON-505))|(1<<(MySQLStatementParserPORT-505))|(1<<(MySQLStatementParserPRECEDES-505))|(1<<(MySQLStatementParserPRECEDING-505))|(1<<(MySQLStatementParserPREPARE-505))|(1<<(MySQLStatementParserPRESERVE-505))|(1<<(MySQLStatementParserPREV-505))|(1<<(MySQLStatementParserPRIVILEGES-505))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-505))|(1<<(MySQLStatementParserPROCESS-505))|(1<<(MySQLStatementParserPROCESSLIST-505))|(1<<(MySQLStatementParserPROFILE-505))|(1<<(MySQLStatementParserPROFILES-505))|(1<<(MySQLStatementParserPROXY-505))|(1<<(MySQLStatementParserQUARTER-505))|(1<<(MySQLStatementParserQUERY-505))|(1<<(MySQLStatementParserQUICK-505))|(1<<(MySQLStatementParserRANDOM-505)))) != 0) || (((_la-538)&-(0x1f+1)) == 0 && ((1<<uint((_la-538)))&((1<<(MySQLStatementParserREAD_ONLY-538))|(1<<(MySQLStatementParserREBUILD-538))|(1<<(MySQLStatementParserRECOVER-538))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-538))|(1<<(MySQLStatementParserREDUNDANT-538))|(1<<(MySQLStatementParserREFERENCE-538))|(1<<(MySQLStatementParserRELAY-538))|(1<<(MySQLStatementParserRELAYLOG-538))|(1<<(MySQLStatementParserRELAY_LOG_FILE-538))|(1<<(MySQLStatementParserRELAY_LOG_POS-538))|(1<<(MySQLStatementParserRELAY_THREAD-538))|(1<<(MySQLStatementParserRELOAD-538))|(1<<(MySQLStatementParserREMOVE-538))|(1<<(MySQLStatementParserREORGANIZE-538))|(1<<(MySQLStatementParserREPAIR-538))|(1<<(MySQLStatementParserREPEATABLE-538))|(1<<(MySQLStatementParserREPLICATE_DO_DB-538))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-538)))) != 0) || (((_la-570)&-(0x1f+1)) == 0 && ((1<<uint((_la-570)))&((1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-570))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-570))|(1<<(MySQLStatementParserREPLICATION-570))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-570))|(1<<(MySQLStatementParserRESET-570))|(1<<(MySQLStatementParserRESOURCE-570))|(1<<(MySQLStatementParserRESPECT-570))|(1<<(MySQLStatementParserRESTART-570))|(1<<(MySQLStatementParserRESTORE-570))|(1<<(MySQLStatementParserRESUME-570))|(1<<(MySQLStatementParserRETAIN-570))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-570))|(1<<(MySQLStatementParserRETURNING-570))|(1<<(MySQLStatementParserRETURNS-570))|(1<<(MySQLStatementParserREUSE-570))|(1<<(MySQLStatementParserREVERSE-570))|(1<<(MySQLStatementParserROLE-570))|(1<<(MySQLStatementParserROLLBACK-570))|(1<<(MySQLStatementParserROLLUP-570))|(1<<(MySQLStatementParserROTATE-570))|(1<<(MySQLStatementParserROUTINE-570))|(1<<(MySQLStatementParserROW_COUNT-570))|(1<<(MySQLStatementParserROW_FORMAT-570)))) != 0) || (((_la-603)&-(0x1f+1)) == 0 && ((1<<uint((_la-603)))&((1<<(MySQLStatementParserRTREE-603))|(1<<(MySQLStatementParserSAVEPOINT-603))|(1<<(MySQLStatementParserSCHEDULE-603))|(1<<(MySQLStatementParserSCHEMA_NAME-603))|(1<<(MySQLStatementParserSECOND-603))|(1<<(MySQLStatementParserSECONDARY-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-603))|(1<<(MySQLStatementParserSECONDARY_LOAD-603))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-603))|(1<<(MySQLStatementParserSECURITY-603))|(1<<(MySQLStatementParserSERIAL-603))|(1<<(MySQLStatementParserSERIALIZABLE-603))|(1<<(MySQLStatementParserSERVER-603))|(1<<(MySQLStatementParserSESSION-603))|(1<<(MySQLStatementParserSHARE-603))|(1<<(MySQLStatementParserSHUTDOWN-603))|(1<<(MySQLStatementParserSIGNED-603))|(1<<(MySQLStatementParserSIMPLE-603))|(1<<(MySQLStatementParserSLAVE-603))|(1<<(MySQLStatementParserSLOW-603)))) != 0) || (((_la-635)&-(0x1f+1)) == 0 && ((1<<uint((_la-635)))&((1<<(MySQLStatementParserSNAPSHOT-635))|(1<<(MySQLStatementParserSOCKET-635))|(1<<(MySQLStatementParserSONAME-635))|(1<<(MySQLStatementParserSOUNDS-635))|(1<<(MySQLStatementParserSOURCE-635))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-635))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-635))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-635))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-635))|(1<<(MySQLStatementParserSQL_NO_CACHE-635))|(1<<(MySQLStatementParserSQL_THREAD-635))|(1<<(MySQLStatementParserSRID-635))|(1<<(MySQLStatementParserSTACKED-635))|(1<<(MySQLStatementParserSTART-635))|(1<<(MySQLStatementParserSTARTS-635))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-635))|(1<<(MySQLStatementParserSTATS_PERSISTENT-635))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-635))|(1<<(MySQLStatementParserSTATUS-635))|(1<<(MySQLStatementParserSTOP-635))|(1<<(MySQLStatementParserSTORAGE-635)))) != 0) || (((_la-669)&-(0x1f+1)) == 0 && ((1<<uint((_la-669)))&((1<<(MySQLStatementParserSTREAM-669))|(1<<(MySQLStatementParserSTRING-669))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-669))|(1<<(MySQLStatementParserSUBJECT-669))|(1<<(MySQLStatementParserSUBPARTITION-669))|(1<<(MySQLStatementParserSUBPARTITIONS-669))|(1<<(MySQLStatementParserSUPER-669))|(1<<(MySQLStatementParserSUSPEND-669))|(1<<(MySQLStatementParserSWAPS-669))|(1<<(MySQLStatementParserSWITCHES-669))|(1<<(MySQLStatementParserTABLES-669))|(1<<(MySQLStatementParserTABLESPACE-669))|(1<<(MySQLStatementParserTABLE_CHECKSUM-669))|(1<<(MySQLStatementParserTABLE_NAME-669))|(1<<(MySQLStatementParserTEMPORARY-669))|(1<<(MySQLStatementParserTEMPTABLE-669))|(1<<(MySQLStatementParserTEXT-669))|(1<<(MySQLStatementParserTHAN-669))|(1<<(MySQLStatementParserTHREAD_PRIORITY-669))|(1<<(MySQLStatementParserTIES-669))|(1<<(MySQLStatementParserTIME-669))|(1<<(MySQLStatementParserTIMESTAMP-669))|(1<<(MySQLStatementParserTIMESTAMP_ADD-669))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-669))|(1<<(MySQLStatementParserTLS-669)))) != 0) || (((_la-703)&-(0x1f+1)) == 0 && ((1<<uint((_la-703)))&((1<<(MySQLStatementParserTRANSACTION-703))|(1<<(MySQLStatementParserTRIGGERS-703))|(1<<(MySQLStatementParserTRUNCATE-703))|(1<<(MySQLStatementParserTYPE-703))|(1<<(MySQLStatementParserTYPES-703))|(1<<(MySQLStatementParserUNBOUNDED-703))|(1<<(MySQLStatementParserUNCOMMITTED-703))|(1<<(MySQLStatementParserUNDEFINED-703))|(1<<(MySQLStatementParserUNDOFILE-703))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-703))|(1<<(MySQLStatementParserUNICODE-703))|(1<<(MySQLStatementParserUNINSTALL-703))|(1<<(MySQLStatementParserUNKNOWN-703))|(1<<(MySQLStatementParserUNTIL-703))|(1<<(MySQLStatementParserUPGRADE-703))|(1<<(MySQLStatementParserUSER-703))|(1<<(MySQLStatementParserUSER_RESOURCES-703))|(1<<(MySQLStatementParserUSE_FRM-703)))) != 0) || (((_la-735)&-(0x1f+1)) == 0 && ((1<<uint((_la-735)))&((1<<(MySQLStatementParserVALIDATION-735))|(1<<(MySQLStatementParserVALUE-735))|(1<<(MySQLStatementParserVARIABLES-735))|(1<<(MySQLStatementParserVCPU-735))|(1<<(MySQLStatementParserVIEW-735))|(1<<(MySQLStatementParserVISIBLE-735))|(1<<(MySQLStatementParserWAIT-735))|(1<<(MySQLStatementParserWARNINGS-735))|(1<<(MySQLStatementParserWEEK-735))|(1<<(MySQLStatementParserWEIGHT_STRING-735))|(1<<(MySQLStatementParserWITHOUT-735))|(1<<(MySQLStatementParserWORK-735))|(1<<(MySQLStatementParserWRAPPER-735))|(1<<(MySQLStatementParserX509-735))|(1<<(MySQLStatementParserXA-735))|(1<<(MySQLStatementParserXID-735))|(1<<(MySQLStatementParserXML-735))|(1<<(MySQLStatementParserYEAR-735)))) != 0) || _la == MySQLStatementParserIDENTIFIER_ || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
		{
			p.SetState(5735)
			p.LabelName()
		}
		{
			p.SetState(5736)
			p.Match(MySQLStatementParserCOLON_)
		}

	}
	{
		p.SetState(5740)
		p.Match(MySQLStatementParserWHILE)
	}
	{
		p.SetState(5741)
		p.expr(0)
	}
	{
		p.SetState(5742)
		p.Match(MySQLStatementParserDO)
	}
	p.SetState(5744)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(5743)
				p.ValidStatement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(5746)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 733, p.GetParserRuleContext())
	}
	{
		p.SetState(5748)
		p.Match(MySQLStatementParserEND)
	}
	{
		p.SetState(5749)
		p.Match(MySQLStatementParserWHILE)
	}
	p.SetState(5751)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 734, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5750)
			p.LabelName()
		}

	}

	return localctx
}

// ICursorStatementContext is an interface to support dynamic dispatch.
type ICursorStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCursorStatementContext differentiates from other interfaces.
	IsCursorStatementContext()
}

type CursorStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCursorStatementContext() *CursorStatementContext {
	var p = new(CursorStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_cursorStatement
	return p
}

func (*CursorStatementContext) IsCursorStatementContext() {}

func NewCursorStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CursorStatementContext {
	var p = new(CursorStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_cursorStatement

	return p
}

func (s *CursorStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CursorStatementContext) CursorCloseStatement() ICursorCloseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursorCloseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursorCloseStatementContext)
}

func (s *CursorStatementContext) CursorDeclareStatement() ICursorDeclareStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursorDeclareStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursorDeclareStatementContext)
}

func (s *CursorStatementContext) CursorFetchStatement() ICursorFetchStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursorFetchStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursorFetchStatementContext)
}

func (s *CursorStatementContext) CursorOpenStatement() ICursorOpenStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursorOpenStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursorOpenStatementContext)
}

func (s *CursorStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CursorStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CursorStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCursorStatement(s)
	}
}

func (s *CursorStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCursorStatement(s)
	}
}

func (s *CursorStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCursorStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CursorStatement() (localctx ICursorStatementContext) {
	this := p
	_ = this

	localctx = NewCursorStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 768, MySQLStatementParserRULE_cursorStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5757)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserCLOSE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5753)
			p.CursorCloseStatement()
		}

	case MySQLStatementParserDECLARE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5754)
			p.CursorDeclareStatement()
		}

	case MySQLStatementParserFETCH:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5755)
			p.CursorFetchStatement()
		}

	case MySQLStatementParserOPEN:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5756)
			p.CursorOpenStatement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICursorCloseStatementContext is an interface to support dynamic dispatch.
type ICursorCloseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCursorCloseStatementContext differentiates from other interfaces.
	IsCursorCloseStatementContext()
}

type CursorCloseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCursorCloseStatementContext() *CursorCloseStatementContext {
	var p = new(CursorCloseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_cursorCloseStatement
	return p
}

func (*CursorCloseStatementContext) IsCursorCloseStatementContext() {}

func NewCursorCloseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CursorCloseStatementContext {
	var p = new(CursorCloseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_cursorCloseStatement

	return p
}

func (s *CursorCloseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CursorCloseStatementContext) CLOSE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCLOSE, 0)
}

func (s *CursorCloseStatementContext) CursorName() ICursorNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursorNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursorNameContext)
}

func (s *CursorCloseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CursorCloseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CursorCloseStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCursorCloseStatement(s)
	}
}

func (s *CursorCloseStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCursorCloseStatement(s)
	}
}

func (s *CursorCloseStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCursorCloseStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CursorCloseStatement() (localctx ICursorCloseStatementContext) {
	this := p
	_ = this

	localctx = NewCursorCloseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 770, MySQLStatementParserRULE_cursorCloseStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5759)
		p.Match(MySQLStatementParserCLOSE)
	}
	{
		p.SetState(5760)
		p.CursorName()
	}

	return localctx
}

// ICursorDeclareStatementContext is an interface to support dynamic dispatch.
type ICursorDeclareStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCursorDeclareStatementContext differentiates from other interfaces.
	IsCursorDeclareStatementContext()
}

type CursorDeclareStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCursorDeclareStatementContext() *CursorDeclareStatementContext {
	var p = new(CursorDeclareStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_cursorDeclareStatement
	return p
}

func (*CursorDeclareStatementContext) IsCursorDeclareStatementContext() {}

func NewCursorDeclareStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CursorDeclareStatementContext {
	var p = new(CursorDeclareStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_cursorDeclareStatement

	return p
}

func (s *CursorDeclareStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CursorDeclareStatementContext) DECLARE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDECLARE, 0)
}

func (s *CursorDeclareStatementContext) CursorName() ICursorNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursorNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursorNameContext)
}

func (s *CursorDeclareStatementContext) CURSOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCURSOR, 0)
}

func (s *CursorDeclareStatementContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOR, 0)
}

func (s *CursorDeclareStatementContext) Select() ISelectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectContext)
}

func (s *CursorDeclareStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CursorDeclareStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CursorDeclareStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCursorDeclareStatement(s)
	}
}

func (s *CursorDeclareStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCursorDeclareStatement(s)
	}
}

func (s *CursorDeclareStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCursorDeclareStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CursorDeclareStatement() (localctx ICursorDeclareStatementContext) {
	this := p
	_ = this

	localctx = NewCursorDeclareStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 772, MySQLStatementParserRULE_cursorDeclareStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5762)
		p.Match(MySQLStatementParserDECLARE)
	}
	{
		p.SetState(5763)
		p.CursorName()
	}
	{
		p.SetState(5764)
		p.Match(MySQLStatementParserCURSOR)
	}
	{
		p.SetState(5765)
		p.Match(MySQLStatementParserFOR)
	}
	{
		p.SetState(5766)
		p.Select()
	}

	return localctx
}

// ICursorFetchStatementContext is an interface to support dynamic dispatch.
type ICursorFetchStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCursorFetchStatementContext differentiates from other interfaces.
	IsCursorFetchStatementContext()
}

type CursorFetchStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCursorFetchStatementContext() *CursorFetchStatementContext {
	var p = new(CursorFetchStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_cursorFetchStatement
	return p
}

func (*CursorFetchStatementContext) IsCursorFetchStatementContext() {}

func NewCursorFetchStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CursorFetchStatementContext {
	var p = new(CursorFetchStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_cursorFetchStatement

	return p
}

func (s *CursorFetchStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CursorFetchStatementContext) FETCH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFETCH, 0)
}

func (s *CursorFetchStatementContext) CursorName() ICursorNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursorNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursorNameContext)
}

func (s *CursorFetchStatementContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINTO, 0)
}

func (s *CursorFetchStatementContext) AllVariable() []IVariableContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariableContext)(nil)).Elem())
	var tst = make([]IVariableContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariableContext)
		}
	}

	return tst
}

func (s *CursorFetchStatementContext) Variable(i int) IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *CursorFetchStatementContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFROM, 0)
}

func (s *CursorFetchStatementContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *CursorFetchStatementContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *CursorFetchStatementContext) NEXT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNEXT, 0)
}

func (s *CursorFetchStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CursorFetchStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CursorFetchStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCursorFetchStatement(s)
	}
}

func (s *CursorFetchStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCursorFetchStatement(s)
	}
}

func (s *CursorFetchStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCursorFetchStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CursorFetchStatement() (localctx ICursorFetchStatementContext) {
	this := p
	_ = this

	localctx = NewCursorFetchStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 774, MySQLStatementParserRULE_cursorFetchStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5768)
		p.Match(MySQLStatementParserFETCH)
	}
	p.SetState(5773)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 737, p.GetParserRuleContext()) == 1 {
		p.SetState(5770)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserNEXT {
			{
				p.SetState(5769)
				p.Match(MySQLStatementParserNEXT)
			}

		}
		{
			p.SetState(5772)
			p.Match(MySQLStatementParserFROM)
		}

	}
	{
		p.SetState(5775)
		p.CursorName()
	}
	{
		p.SetState(5776)
		p.Match(MySQLStatementParserINTO)
	}
	{
		p.SetState(5777)
		p.Variable()
	}
	p.SetState(5782)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(5778)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(5779)
			p.Variable()
		}

		p.SetState(5784)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICursorOpenStatementContext is an interface to support dynamic dispatch.
type ICursorOpenStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCursorOpenStatementContext differentiates from other interfaces.
	IsCursorOpenStatementContext()
}

type CursorOpenStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCursorOpenStatementContext() *CursorOpenStatementContext {
	var p = new(CursorOpenStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_cursorOpenStatement
	return p
}

func (*CursorOpenStatementContext) IsCursorOpenStatementContext() {}

func NewCursorOpenStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CursorOpenStatementContext {
	var p = new(CursorOpenStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_cursorOpenStatement

	return p
}

func (s *CursorOpenStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CursorOpenStatementContext) OPEN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOPEN, 0)
}

func (s *CursorOpenStatementContext) CursorName() ICursorNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursorNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursorNameContext)
}

func (s *CursorOpenStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CursorOpenStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CursorOpenStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCursorOpenStatement(s)
	}
}

func (s *CursorOpenStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCursorOpenStatement(s)
	}
}

func (s *CursorOpenStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCursorOpenStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CursorOpenStatement() (localctx ICursorOpenStatementContext) {
	this := p
	_ = this

	localctx = NewCursorOpenStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 776, MySQLStatementParserRULE_cursorOpenStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5785)
		p.Match(MySQLStatementParserOPEN)
	}
	{
		p.SetState(5786)
		p.CursorName()
	}

	return localctx
}

// IConditionHandlingStatementContext is an interface to support dynamic dispatch.
type IConditionHandlingStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionHandlingStatementContext differentiates from other interfaces.
	IsConditionHandlingStatementContext()
}

type ConditionHandlingStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionHandlingStatementContext() *ConditionHandlingStatementContext {
	var p = new(ConditionHandlingStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_conditionHandlingStatement
	return p
}

func (*ConditionHandlingStatementContext) IsConditionHandlingStatementContext() {}

func NewConditionHandlingStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionHandlingStatementContext {
	var p = new(ConditionHandlingStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_conditionHandlingStatement

	return p
}

func (s *ConditionHandlingStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionHandlingStatementContext) DeclareConditionStatement() IDeclareConditionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclareConditionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclareConditionStatementContext)
}

func (s *ConditionHandlingStatementContext) DeclareHandlerStatement() IDeclareHandlerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclareHandlerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclareHandlerStatementContext)
}

func (s *ConditionHandlingStatementContext) GetDiagnosticsStatement() IGetDiagnosticsStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGetDiagnosticsStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGetDiagnosticsStatementContext)
}

func (s *ConditionHandlingStatementContext) ResignalStatement() IResignalStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IResignalStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IResignalStatementContext)
}

func (s *ConditionHandlingStatementContext) SignalStatement() ISignalStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISignalStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISignalStatementContext)
}

func (s *ConditionHandlingStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionHandlingStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionHandlingStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterConditionHandlingStatement(s)
	}
}

func (s *ConditionHandlingStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitConditionHandlingStatement(s)
	}
}

func (s *ConditionHandlingStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitConditionHandlingStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ConditionHandlingStatement() (localctx IConditionHandlingStatementContext) {
	this := p
	_ = this

	localctx = NewConditionHandlingStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 778, MySQLStatementParserRULE_conditionHandlingStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5793)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 739, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5788)
			p.DeclareConditionStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5789)
			p.DeclareHandlerStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5790)
			p.GetDiagnosticsStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5791)
			p.ResignalStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5792)
			p.SignalStatement()
		}

	}

	return localctx
}

// IDeclareConditionStatementContext is an interface to support dynamic dispatch.
type IDeclareConditionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclareConditionStatementContext differentiates from other interfaces.
	IsDeclareConditionStatementContext()
}

type DeclareConditionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclareConditionStatementContext() *DeclareConditionStatementContext {
	var p = new(DeclareConditionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_declareConditionStatement
	return p
}

func (*DeclareConditionStatementContext) IsDeclareConditionStatementContext() {}

func NewDeclareConditionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclareConditionStatementContext {
	var p = new(DeclareConditionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_declareConditionStatement

	return p
}

func (s *DeclareConditionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclareConditionStatementContext) DECLARE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDECLARE, 0)
}

func (s *DeclareConditionStatementContext) ConditionName() IConditionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionNameContext)
}

func (s *DeclareConditionStatementContext) CONDITION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCONDITION, 0)
}

func (s *DeclareConditionStatementContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOR, 0)
}

func (s *DeclareConditionStatementContext) ConditionValue() IConditionValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionValueContext)
}

func (s *DeclareConditionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclareConditionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclareConditionStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDeclareConditionStatement(s)
	}
}

func (s *DeclareConditionStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDeclareConditionStatement(s)
	}
}

func (s *DeclareConditionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDeclareConditionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DeclareConditionStatement() (localctx IDeclareConditionStatementContext) {
	this := p
	_ = this

	localctx = NewDeclareConditionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 780, MySQLStatementParserRULE_declareConditionStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5795)
		p.Match(MySQLStatementParserDECLARE)
	}
	{
		p.SetState(5796)
		p.ConditionName()
	}
	{
		p.SetState(5797)
		p.Match(MySQLStatementParserCONDITION)
	}
	{
		p.SetState(5798)
		p.Match(MySQLStatementParserFOR)
	}
	{
		p.SetState(5799)
		p.ConditionValue()
	}

	return localctx
}

// IDeclareHandlerStatementContext is an interface to support dynamic dispatch.
type IDeclareHandlerStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclareHandlerStatementContext differentiates from other interfaces.
	IsDeclareHandlerStatementContext()
}

type DeclareHandlerStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclareHandlerStatementContext() *DeclareHandlerStatementContext {
	var p = new(DeclareHandlerStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_declareHandlerStatement
	return p
}

func (*DeclareHandlerStatementContext) IsDeclareHandlerStatementContext() {}

func NewDeclareHandlerStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclareHandlerStatementContext {
	var p = new(DeclareHandlerStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_declareHandlerStatement

	return p
}

func (s *DeclareHandlerStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclareHandlerStatementContext) DECLARE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDECLARE, 0)
}

func (s *DeclareHandlerStatementContext) HandlerAction() IHandlerActionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandlerActionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHandlerActionContext)
}

func (s *DeclareHandlerStatementContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHANDLER, 0)
}

func (s *DeclareHandlerStatementContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOR, 0)
}

func (s *DeclareHandlerStatementContext) AllConditionValue() []IConditionValueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConditionValueContext)(nil)).Elem())
	var tst = make([]IConditionValueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConditionValueContext)
		}
	}

	return tst
}

func (s *DeclareHandlerStatementContext) ConditionValue(i int) IConditionValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionValueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConditionValueContext)
}

func (s *DeclareHandlerStatementContext) ValidStatement() IValidStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValidStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValidStatementContext)
}

func (s *DeclareHandlerStatementContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *DeclareHandlerStatementContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *DeclareHandlerStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclareHandlerStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclareHandlerStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDeclareHandlerStatement(s)
	}
}

func (s *DeclareHandlerStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDeclareHandlerStatement(s)
	}
}

func (s *DeclareHandlerStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDeclareHandlerStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DeclareHandlerStatement() (localctx IDeclareHandlerStatementContext) {
	this := p
	_ = this

	localctx = NewDeclareHandlerStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 782, MySQLStatementParserRULE_declareHandlerStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5801)
		p.Match(MySQLStatementParserDECLARE)
	}
	{
		p.SetState(5802)
		p.HandlerAction()
	}
	{
		p.SetState(5803)
		p.Match(MySQLStatementParserHANDLER)
	}
	{
		p.SetState(5804)
		p.Match(MySQLStatementParserFOR)
	}
	{
		p.SetState(5805)
		p.ConditionValue()
	}
	p.SetState(5810)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(5806)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(5807)
			p.ConditionValue()
		}

		p.SetState(5812)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(5813)
		p.ValidStatement()
	}

	return localctx
}

// IGetDiagnosticsStatementContext is an interface to support dynamic dispatch.
type IGetDiagnosticsStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGetDiagnosticsStatementContext differentiates from other interfaces.
	IsGetDiagnosticsStatementContext()
}

type GetDiagnosticsStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGetDiagnosticsStatementContext() *GetDiagnosticsStatementContext {
	var p = new(GetDiagnosticsStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_getDiagnosticsStatement
	return p
}

func (*GetDiagnosticsStatementContext) IsGetDiagnosticsStatementContext() {}

func NewGetDiagnosticsStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GetDiagnosticsStatementContext {
	var p = new(GetDiagnosticsStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_getDiagnosticsStatement

	return p
}

func (s *GetDiagnosticsStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *GetDiagnosticsStatementContext) GET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGET, 0)
}

func (s *GetDiagnosticsStatementContext) DIAGNOSTICS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDIAGNOSTICS, 0)
}

func (s *GetDiagnosticsStatementContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCURRENT, 0)
}

func (s *GetDiagnosticsStatementContext) STACKED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTACKED, 0)
}

func (s *GetDiagnosticsStatementContext) AllStatementInformationItem() []IStatementInformationItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementInformationItemContext)(nil)).Elem())
	var tst = make([]IStatementInformationItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementInformationItemContext)
		}
	}

	return tst
}

func (s *GetDiagnosticsStatementContext) StatementInformationItem(i int) IStatementInformationItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementInformationItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementInformationItemContext)
}

func (s *GetDiagnosticsStatementContext) CONDITION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCONDITION, 0)
}

func (s *GetDiagnosticsStatementContext) ConditionNumber() IConditionNumberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionNumberContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionNumberContext)
}

func (s *GetDiagnosticsStatementContext) AllConditionInformationItem() []IConditionInformationItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConditionInformationItemContext)(nil)).Elem())
	var tst = make([]IConditionInformationItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConditionInformationItemContext)
		}
	}

	return tst
}

func (s *GetDiagnosticsStatementContext) ConditionInformationItem(i int) IConditionInformationItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionInformationItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConditionInformationItemContext)
}

func (s *GetDiagnosticsStatementContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *GetDiagnosticsStatementContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *GetDiagnosticsStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GetDiagnosticsStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GetDiagnosticsStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterGetDiagnosticsStatement(s)
	}
}

func (s *GetDiagnosticsStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitGetDiagnosticsStatement(s)
	}
}

func (s *GetDiagnosticsStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitGetDiagnosticsStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) GetDiagnosticsStatement() (localctx IGetDiagnosticsStatementContext) {
	this := p
	_ = this

	localctx = NewGetDiagnosticsStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 784, MySQLStatementParserRULE_getDiagnosticsStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5815)
		p.Match(MySQLStatementParserGET)
	}
	p.SetState(5817)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserCURRENT || _la == MySQLStatementParserSTACKED {
		{
			p.SetState(5816)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserCURRENT || _la == MySQLStatementParserSTACKED) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(5819)
		p.Match(MySQLStatementParserDIAGNOSTICS)
	}

	p.SetState(5838)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserAT_:
		{
			p.SetState(5820)
			p.StatementInformationItem()
		}
		p.SetState(5825)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(5821)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(5822)
				p.StatementInformationItem()
			}

			p.SetState(5827)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case MySQLStatementParserCONDITION:
		{
			p.SetState(5828)
			p.Match(MySQLStatementParserCONDITION)
		}
		{
			p.SetState(5829)
			p.ConditionNumber()
		}
		{
			p.SetState(5830)
			p.ConditionInformationItem()
		}
		p.SetState(5835)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(5831)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(5832)
				p.ConditionInformationItem()
			}

			p.SetState(5837)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IStatementInformationItemContext is an interface to support dynamic dispatch.
type IStatementInformationItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementInformationItemContext differentiates from other interfaces.
	IsStatementInformationItemContext()
}

type StatementInformationItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementInformationItemContext() *StatementInformationItemContext {
	var p = new(StatementInformationItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_statementInformationItem
	return p
}

func (*StatementInformationItemContext) IsStatementInformationItemContext() {}

func NewStatementInformationItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementInformationItemContext {
	var p = new(StatementInformationItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_statementInformationItem

	return p
}

func (s *StatementInformationItemContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementInformationItemContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *StatementInformationItemContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *StatementInformationItemContext) StatementInformationItemName() IStatementInformationItemNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementInformationItemNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementInformationItemNameContext)
}

func (s *StatementInformationItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementInformationItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementInformationItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStatementInformationItem(s)
	}
}

func (s *StatementInformationItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStatementInformationItem(s)
	}
}

func (s *StatementInformationItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStatementInformationItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) StatementInformationItem() (localctx IStatementInformationItemContext) {
	this := p
	_ = this

	localctx = NewStatementInformationItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 786, MySQLStatementParserRULE_statementInformationItem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5840)
		p.Variable()
	}
	{
		p.SetState(5841)
		p.Match(MySQLStatementParserEQ_)
	}
	{
		p.SetState(5842)
		p.StatementInformationItemName()
	}

	return localctx
}

// IConditionInformationItemContext is an interface to support dynamic dispatch.
type IConditionInformationItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionInformationItemContext differentiates from other interfaces.
	IsConditionInformationItemContext()
}

type ConditionInformationItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionInformationItemContext() *ConditionInformationItemContext {
	var p = new(ConditionInformationItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_conditionInformationItem
	return p
}

func (*ConditionInformationItemContext) IsConditionInformationItemContext() {}

func NewConditionInformationItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionInformationItemContext {
	var p = new(ConditionInformationItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_conditionInformationItem

	return p
}

func (s *ConditionInformationItemContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionInformationItemContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *ConditionInformationItemContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *ConditionInformationItemContext) ConditionInformationItemName() IConditionInformationItemNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionInformationItemNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionInformationItemNameContext)
}

func (s *ConditionInformationItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionInformationItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionInformationItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterConditionInformationItem(s)
	}
}

func (s *ConditionInformationItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitConditionInformationItem(s)
	}
}

func (s *ConditionInformationItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitConditionInformationItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ConditionInformationItem() (localctx IConditionInformationItemContext) {
	this := p
	_ = this

	localctx = NewConditionInformationItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 788, MySQLStatementParserRULE_conditionInformationItem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5844)
		p.Variable()
	}
	{
		p.SetState(5845)
		p.Match(MySQLStatementParserEQ_)
	}
	{
		p.SetState(5846)
		p.ConditionInformationItemName()
	}

	return localctx
}

// IConditionNumberContext is an interface to support dynamic dispatch.
type IConditionNumberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionNumberContext differentiates from other interfaces.
	IsConditionNumberContext()
}

type ConditionNumberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionNumberContext() *ConditionNumberContext {
	var p = new(ConditionNumberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_conditionNumber
	return p
}

func (*ConditionNumberContext) IsConditionNumberContext() {}

func NewConditionNumberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionNumberContext {
	var p = new(ConditionNumberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_conditionNumber

	return p
}

func (s *ConditionNumberContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionNumberContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *ConditionNumberContext) NumberLiterals() INumberLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumberLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumberLiteralsContext)
}

func (s *ConditionNumberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionNumberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionNumberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterConditionNumber(s)
	}
}

func (s *ConditionNumberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitConditionNumber(s)
	}
}

func (s *ConditionNumberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitConditionNumber(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ConditionNumber() (localctx IConditionNumberContext) {
	this := p
	_ = this

	localctx = NewConditionNumberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 790, MySQLStatementParserRULE_conditionNumber)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5850)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserAT_:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5848)
			p.Variable()
		}

	case MySQLStatementParserNUMBER_:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5849)
			p.NumberLiterals()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IStatementInformationItemNameContext is an interface to support dynamic dispatch.
type IStatementInformationItemNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementInformationItemNameContext differentiates from other interfaces.
	IsStatementInformationItemNameContext()
}

type StatementInformationItemNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementInformationItemNameContext() *StatementInformationItemNameContext {
	var p = new(StatementInformationItemNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_statementInformationItemName
	return p
}

func (*StatementInformationItemNameContext) IsStatementInformationItemNameContext() {}

func NewStatementInformationItemNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementInformationItemNameContext {
	var p = new(StatementInformationItemNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_statementInformationItemName

	return p
}

func (s *StatementInformationItemNameContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementInformationItemNameContext) NUMBER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER, 0)
}

func (s *StatementInformationItemNameContext) ROW_COUNT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROW_COUNT, 0)
}

func (s *StatementInformationItemNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementInformationItemNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementInformationItemNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStatementInformationItemName(s)
	}
}

func (s *StatementInformationItemNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStatementInformationItemName(s)
	}
}

func (s *StatementInformationItemNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStatementInformationItemName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) StatementInformationItemName() (localctx IStatementInformationItemNameContext) {
	this := p
	_ = this

	localctx = NewStatementInformationItemNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 792, MySQLStatementParserRULE_statementInformationItemName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5852)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserNUMBER || _la == MySQLStatementParserROW_COUNT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IConditionInformationItemNameContext is an interface to support dynamic dispatch.
type IConditionInformationItemNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionInformationItemNameContext differentiates from other interfaces.
	IsConditionInformationItemNameContext()
}

type ConditionInformationItemNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionInformationItemNameContext() *ConditionInformationItemNameContext {
	var p = new(ConditionInformationItemNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_conditionInformationItemName
	return p
}

func (*ConditionInformationItemNameContext) IsConditionInformationItemNameContext() {}

func NewConditionInformationItemNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionInformationItemNameContext {
	var p = new(ConditionInformationItemNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_conditionInformationItemName

	return p
}

func (s *ConditionInformationItemNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionInformationItemNameContext) CLASS_ORIGIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCLASS_ORIGIN, 0)
}

func (s *ConditionInformationItemNameContext) SUBCLASS_ORIGIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSUBCLASS_ORIGIN, 0)
}

func (s *ConditionInformationItemNameContext) RETURNED_SQLSTATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRETURNED_SQLSTATE, 0)
}

func (s *ConditionInformationItemNameContext) MESSAGE_TEXT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMESSAGE_TEXT, 0)
}

func (s *ConditionInformationItemNameContext) MYSQL_ERRNO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMYSQL_ERRNO, 0)
}

func (s *ConditionInformationItemNameContext) CONSTRAINT_CATALOG() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCONSTRAINT_CATALOG, 0)
}

func (s *ConditionInformationItemNameContext) CONSTRAINT_SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCONSTRAINT_SCHEMA, 0)
}

func (s *ConditionInformationItemNameContext) CONSTRAINT_NAME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCONSTRAINT_NAME, 0)
}

func (s *ConditionInformationItemNameContext) CATALOG_NAME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCATALOG_NAME, 0)
}

func (s *ConditionInformationItemNameContext) SCHEMA_NAME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSCHEMA_NAME, 0)
}

func (s *ConditionInformationItemNameContext) TABLE_NAME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLE_NAME, 0)
}

func (s *ConditionInformationItemNameContext) COLUMN_NAME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOLUMN_NAME, 0)
}

func (s *ConditionInformationItemNameContext) CURSOR_NAME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCURSOR_NAME, 0)
}

func (s *ConditionInformationItemNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionInformationItemNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionInformationItemNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterConditionInformationItemName(s)
	}
}

func (s *ConditionInformationItemNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitConditionInformationItemName(s)
	}
}

func (s *ConditionInformationItemNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitConditionInformationItemName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ConditionInformationItemName() (localctx IConditionInformationItemNameContext) {
	this := p
	_ = this

	localctx = NewConditionInformationItemNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 794, MySQLStatementParserRULE_conditionInformationItemName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5854)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-123)&-(0x1f+1)) == 0 && ((1<<uint((_la-123)))&((1<<(MySQLStatementParserCATALOG_NAME-123))|(1<<(MySQLStatementParserCLASS_ORIGIN-123))|(1<<(MySQLStatementParserCOLUMN_NAME-123)))) != 0) || (((_la-159)&-(0x1f+1)) == 0 && ((1<<uint((_la-159)))&((1<<(MySQLStatementParserCONSTRAINT_CATALOG-159))|(1<<(MySQLStatementParserCONSTRAINT_NAME-159))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-159))|(1<<(MySQLStatementParserCURSOR_NAME-159)))) != 0) || _la == MySQLStatementParserMESSAGE_TEXT || _la == MySQLStatementParserMYSQL_ERRNO || _la == MySQLStatementParserRETURNED_SQLSTATE || _la == MySQLStatementParserSCHEMA_NAME || _la == MySQLStatementParserSUBCLASS_ORIGIN || _la == MySQLStatementParserTABLE_NAME) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IHandlerActionContext is an interface to support dynamic dispatch.
type IHandlerActionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHandlerActionContext differentiates from other interfaces.
	IsHandlerActionContext()
}

type HandlerActionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHandlerActionContext() *HandlerActionContext {
	var p = new(HandlerActionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_handlerAction
	return p
}

func (*HandlerActionContext) IsHandlerActionContext() {}

func NewHandlerActionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HandlerActionContext {
	var p = new(HandlerActionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_handlerAction

	return p
}

func (s *HandlerActionContext) GetParser() antlr.Parser { return s.parser }

func (s *HandlerActionContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCONTINUE, 0)
}

func (s *HandlerActionContext) EXIT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXIT, 0)
}

func (s *HandlerActionContext) UNDO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNDO, 0)
}

func (s *HandlerActionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerActionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HandlerActionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterHandlerAction(s)
	}
}

func (s *HandlerActionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitHandlerAction(s)
	}
}

func (s *HandlerActionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitHandlerAction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) HandlerAction() (localctx IHandlerActionContext) {
	this := p
	_ = this

	localctx = NewHandlerActionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 796, MySQLStatementParserRULE_handlerAction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5856)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserCONTINUE || _la == MySQLStatementParserEXIT || _la == MySQLStatementParserUNDO) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IConditionValueContext is an interface to support dynamic dispatch.
type IConditionValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionValueContext differentiates from other interfaces.
	IsConditionValueContext()
}

type ConditionValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionValueContext() *ConditionValueContext {
	var p = new(ConditionValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_conditionValue
	return p
}

func (*ConditionValueContext) IsConditionValueContext() {}

func NewConditionValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionValueContext {
	var p = new(ConditionValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_conditionValue

	return p
}

func (s *ConditionValueContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionValueContext) NumberLiterals() INumberLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumberLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumberLiteralsContext)
}

func (s *ConditionValueContext) SQLSTATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSQLSTATE, 0)
}

func (s *ConditionValueContext) StringLiterals() IStringLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralsContext)
}

func (s *ConditionValueContext) VALUE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVALUE, 0)
}

func (s *ConditionValueContext) ConditionName() IConditionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionNameContext)
}

func (s *ConditionValueContext) SQLWARNING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSQLWARNING, 0)
}

func (s *ConditionValueContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNOT, 0)
}

func (s *ConditionValueContext) FOUND() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOUND, 0)
}

func (s *ConditionValueContext) SQLEXCEPTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSQLEXCEPTION, 0)
}

func (s *ConditionValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterConditionValue(s)
	}
}

func (s *ConditionValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitConditionValue(s)
	}
}

func (s *ConditionValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitConditionValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ConditionValue() (localctx IConditionValueContext) {
	this := p
	_ = this

	localctx = NewConditionValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 798, MySQLStatementParserRULE_conditionValue)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5869)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserNUMBER_:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5858)
			p.NumberLiterals()
		}

	case MySQLStatementParserSQLSTATE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5859)
			p.Match(MySQLStatementParserSQLSTATE)
		}
		p.SetState(5861)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserVALUE {
			{
				p.SetState(5860)
				p.Match(MySQLStatementParserVALUE)
			}

		}
		{
			p.SetState(5863)
			p.StringLiterals()
		}

	case MySQLStatementParserMAX, MySQLStatementParserMIN, MySQLStatementParserSUM, MySQLStatementParserCOUNT, MySQLStatementParserGROUP_CONCAT, MySQLStatementParserCAST, MySQLStatementParserPOSITION, MySQLStatementParserSUBSTRING, MySQLStatementParserSUBSTR, MySQLStatementParserEXTRACT, MySQLStatementParserTRIM, MySQLStatementParserLAST_DAY, MySQLStatementParserTRADITIONAL, MySQLStatementParserTREE, MySQLStatementParserMYSQL_ADMIN, MySQLStatementParserINSTANT, MySQLStatementParserINPLACE, MySQLStatementParserCOPY, MySQLStatementParserUL_BINARY, MySQLStatementParserAUTOCOMMIT, MySQLStatementParserINNODB, MySQLStatementParserREDO_LOG, MySQLStatementParserACCOUNT, MySQLStatementParserACTION, MySQLStatementParserACTIVE, MySQLStatementParserADMIN, MySQLStatementParserAFTER, MySQLStatementParserAGAINST, MySQLStatementParserAGGREGATE, MySQLStatementParserALGORITHM, MySQLStatementParserALWAYS, MySQLStatementParserANY, MySQLStatementParserARRAY, MySQLStatementParserASCII, MySQLStatementParserAT, MySQLStatementParserATTRIBUTE, MySQLStatementParserAUTOEXTEND_SIZE, MySQLStatementParserAUTO_INCREMENT, MySQLStatementParserAVG, MySQLStatementParserAVG_ROW_LENGTH, MySQLStatementParserBACKUP, MySQLStatementParserBEGIN, MySQLStatementParserBINLOG, MySQLStatementParserBIT, MySQLStatementParserBLOCK, MySQLStatementParserBOOL, MySQLStatementParserBOOLEAN, MySQLStatementParserBTREE, MySQLStatementParserBUCKETS, MySQLStatementParserBYTE, MySQLStatementParserCACHE, MySQLStatementParserCASCADED, MySQLStatementParserCATALOG_NAME, MySQLStatementParserCHAIN, MySQLStatementParserCHANGED, MySQLStatementParserCHANNEL, MySQLStatementParserCHARSET, MySQLStatementParserCHECKSUM, MySQLStatementParserCIPHER, MySQLStatementParserCLASS_ORIGIN, MySQLStatementParserCLIENT, MySQLStatementParserCLONE, MySQLStatementParserCLOSE, MySQLStatementParserCOALESCE, MySQLStatementParserCODE, MySQLStatementParserCOLLATION, MySQLStatementParserCOLUMNS, MySQLStatementParserCOLUMN_FORMAT, MySQLStatementParserCOLUMN_NAME, MySQLStatementParserCOMMENT, MySQLStatementParserCOMMIT, MySQLStatementParserCOMMITTED, MySQLStatementParserCOMPACT, MySQLStatementParserCOMPLETION, MySQLStatementParserCOMPONENT, MySQLStatementParserCOMPRESSED, MySQLStatementParserCOMPRESSION, MySQLStatementParserCONCURRENT, MySQLStatementParserCONNECTION, MySQLStatementParserCONSISTENT, MySQLStatementParserCONSTRAINT_CATALOG, MySQLStatementParserCONSTRAINT_NAME, MySQLStatementParserCONSTRAINT_SCHEMA, MySQLStatementParserCONTAINS, MySQLStatementParserCONTEXT, MySQLStatementParserCPU, MySQLStatementParserCURRENT, MySQLStatementParserCURSOR_NAME, MySQLStatementParserDATA, MySQLStatementParserDATAFILE, MySQLStatementParserDATE, MySQLStatementParserDATETIME, MySQLStatementParserDAY, MySQLStatementParserDEALLOCATE, MySQLStatementParserDEFAULT_AUTH, MySQLStatementParserDEFINER, MySQLStatementParserDEFINITION, MySQLStatementParserDELAY_KEY_WRITE, MySQLStatementParserDESCRIPTION, MySQLStatementParserDIAGNOSTICS, MySQLStatementParserDIRECTORY, MySQLStatementParserDISABLE, MySQLStatementParserDISCARD, MySQLStatementParserDISK, MySQLStatementParserDO, MySQLStatementParserDUMPFILE, MySQLStatementParserDUPLICATE, MySQLStatementParserDYNAMIC, MySQLStatementParserENABLE, MySQLStatementParserENCRYPTION, MySQLStatementParserEND, MySQLStatementParserENDS, MySQLStatementParserENFORCED, MySQLStatementParserENGINE, MySQLStatementParserENGINES, MySQLStatementParserENGINE_ATTRIBUTE, MySQLStatementParserENUM, MySQLStatementParserERROR, MySQLStatementParserERRORS, MySQLStatementParserESCAPE, MySQLStatementParserEVENT, MySQLStatementParserEVENTS, MySQLStatementParserEVERY, MySQLStatementParserEXCHANGE, MySQLStatementParserEXCLUDE, MySQLStatementParserEXECUTE, MySQLStatementParserEXPANSION, MySQLStatementParserEXPIRE, MySQLStatementParserEXPORT, MySQLStatementParserEXTENDED, MySQLStatementParserEXTENT_SIZE, MySQLStatementParserFAILED_LOGIN_ATTEMPTS, MySQLStatementParserFAST, MySQLStatementParserFAULTS, MySQLStatementParserFILE, MySQLStatementParserFILE_BLOCK_SIZE, MySQLStatementParserFILTER, MySQLStatementParserFIRST, MySQLStatementParserFIXED, MySQLStatementParserFLUSH, MySQLStatementParserFOLLOWING, MySQLStatementParserFOLLOWS, MySQLStatementParserFORMAT, MySQLStatementParserFOUND, MySQLStatementParserFULL, MySQLStatementParserGENERAL, MySQLStatementParserGEOMETRY, MySQLStatementParserGEOMETRYCOLLECTION, MySQLStatementParserGET_FORMAT, MySQLStatementParserGET_MASTER_PUBLIC_KEY, MySQLStatementParserGLOBAL, MySQLStatementParserGRANTS, MySQLStatementParserGROUP_REPLICATION, MySQLStatementParserHANDLER, MySQLStatementParserHASH, MySQLStatementParserHELP, MySQLStatementParserHISTOGRAM, MySQLStatementParserHISTORY, MySQLStatementParserHOST, MySQLStatementParserHOSTS, MySQLStatementParserHOUR, MySQLStatementParserIDENTIFIED, MySQLStatementParserIGNORE_SERVER_IDS, MySQLStatementParserIMPORT, MySQLStatementParserINACTIVE, MySQLStatementParserINDEXES, MySQLStatementParserINITIAL_SIZE, MySQLStatementParserINSERT_METHOD, MySQLStatementParserINSTALL, MySQLStatementParserINSTANCE, MySQLStatementParserINVISIBLE, MySQLStatementParserINVOKER, MySQLStatementParserIO, MySQLStatementParserIPC, MySQLStatementParserISOLATION, MySQLStatementParserISSUER, MySQLStatementParserJSON, MySQLStatementParserJSON_VALUE, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserLANGUAGE, MySQLStatementParserLAST, MySQLStatementParserLAST_VALUE, MySQLStatementParserLEAVES, MySQLStatementParserLESS, MySQLStatementParserLEVEL, MySQLStatementParserLINESTRING, MySQLStatementParserLIST, MySQLStatementParserLOCAL, MySQLStatementParserLOCKED, MySQLStatementParserLOCKS, MySQLStatementParserLOGFILE, MySQLStatementParserLOGS, MySQLStatementParserMASTER, MySQLStatementParserMASTER_AUTO_POSITION, MySQLStatementParserMASTER_COMPRESSION_ALGORITHM, MySQLStatementParserMASTER_CONNECT_RETRY, MySQLStatementParserMASTER_DELAY, MySQLStatementParserMASTER_HEARTBEAT_PERIOD, MySQLStatementParserMASTER_HOST, MySQLStatementParserMASTER_LOG_FILE, MySQLStatementParserMASTER_LOG_POS, MySQLStatementParserMASTER_PASSWORD, MySQLStatementParserMASTER_PORT, MySQLStatementParserMASTER_PUBLIC_KEY_PATH, MySQLStatementParserMASTER_RETRY_COUNT, MySQLStatementParserMASTER_SERVER_ID, MySQLStatementParserMASTER_SSL, MySQLStatementParserMASTER_SSL_CA, MySQLStatementParserMASTER_SSL_CAPATH, MySQLStatementParserMASTER_SSL_CERT, MySQLStatementParserMASTER_SSL_CIPHER, MySQLStatementParserMASTER_SSL_CRL, MySQLStatementParserMASTER_SSL_CRLPATH, MySQLStatementParserMASTER_SSL_KEY, MySQLStatementParserMASTER_TLS_CIPHERSUITES, MySQLStatementParserMASTER_TLS_VERSION, MySQLStatementParserMASTER_USER, MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL, MySQLStatementParserMAX_CONNECTIONS_PER_HOUR, MySQLStatementParserMAX_QUERIES_PER_HOUR, MySQLStatementParserMAX_ROWS, MySQLStatementParserMAX_SIZE, MySQLStatementParserMAX_UPDATES_PER_HOUR, MySQLStatementParserMAX_USER_CONNECTIONS, MySQLStatementParserMEDIUM, MySQLStatementParserMEMBER, MySQLStatementParserMEMORY, MySQLStatementParserMERGE, MySQLStatementParserMESSAGE_TEXT, MySQLStatementParserMICROSECOND, MySQLStatementParserMIGRATE, MySQLStatementParserMINUTE, MySQLStatementParserMIN_ROWS, MySQLStatementParserMODE, MySQLStatementParserMODIFY, MySQLStatementParserMONTH, MySQLStatementParserMULTILINESTRING, MySQLStatementParserMULTIPOINT, MySQLStatementParserMULTIPOLYGON, MySQLStatementParserMUTEX, MySQLStatementParserMYSQL_ERRNO, MySQLStatementParserNAME, MySQLStatementParserNAMES, MySQLStatementParserNATIONAL, MySQLStatementParserNCHAR, MySQLStatementParserNDBCLUSTER, MySQLStatementParserNESTED, MySQLStatementParserNETWORK_NAMESPACE, MySQLStatementParserNEVER, MySQLStatementParserNEW, MySQLStatementParserNEXT, MySQLStatementParserNO, MySQLStatementParserNODEGROUP, MySQLStatementParserNONE, MySQLStatementParserNOWAIT, MySQLStatementParserNO_WAIT, MySQLStatementParserNULLS, MySQLStatementParserNUMBER, MySQLStatementParserNVARCHAR, MySQLStatementParserOFF, MySQLStatementParserOFFSET, MySQLStatementParserOJ, MySQLStatementParserOLD, MySQLStatementParserONE, MySQLStatementParserONLY, MySQLStatementParserOPEN, MySQLStatementParserOPTIONAL, MySQLStatementParserOPTIONS, MySQLStatementParserORDINALITY, MySQLStatementParserORGANIZATION, MySQLStatementParserOTHERS, MySQLStatementParserOWNER, MySQLStatementParserPACK_KEYS, MySQLStatementParserPAGE, MySQLStatementParserPARSER, MySQLStatementParserPARTIAL, MySQLStatementParserPARTITIONING, MySQLStatementParserPARTITIONS, MySQLStatementParserPASSWORD, MySQLStatementParserPASSWORD_LOCK_TIME, MySQLStatementParserPATH, MySQLStatementParserPERSIST, MySQLStatementParserPERSIST_ONLY, MySQLStatementParserPHASE, MySQLStatementParserPLUGIN, MySQLStatementParserPLUGINS, MySQLStatementParserPLUGIN_DIR, MySQLStatementParserPOINT, MySQLStatementParserPOLYGON, MySQLStatementParserPORT, MySQLStatementParserPRECEDES, MySQLStatementParserPRECEDING, MySQLStatementParserPREPARE, MySQLStatementParserPRESERVE, MySQLStatementParserPREV, MySQLStatementParserPRIVILEGES, MySQLStatementParserPRIVILEGE_CHECKS_USER, MySQLStatementParserPROCESS, MySQLStatementParserPROCESSLIST, MySQLStatementParserPROFILE, MySQLStatementParserPROFILES, MySQLStatementParserPROXY, MySQLStatementParserQUARTER, MySQLStatementParserQUERY, MySQLStatementParserQUICK, MySQLStatementParserRANDOM, MySQLStatementParserREAD_ONLY, MySQLStatementParserREBUILD, MySQLStatementParserRECOVER, MySQLStatementParserREDO_BUFFER_SIZE, MySQLStatementParserREDUNDANT, MySQLStatementParserREFERENCE, MySQLStatementParserRELAY, MySQLStatementParserRELAYLOG, MySQLStatementParserRELAY_LOG_FILE, MySQLStatementParserRELAY_LOG_POS, MySQLStatementParserRELAY_THREAD, MySQLStatementParserRELOAD, MySQLStatementParserREMOVE, MySQLStatementParserREORGANIZE, MySQLStatementParserREPAIR, MySQLStatementParserREPEATABLE, MySQLStatementParserREPLICATE_DO_DB, MySQLStatementParserREPLICATE_DO_TABLE, MySQLStatementParserREPLICATE_IGNORE_DB, MySQLStatementParserREPLICATE_IGNORE_TABLE, MySQLStatementParserREPLICATE_REWRITE_DB, MySQLStatementParserREPLICATE_WILD_DO_TABLE, MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE, MySQLStatementParserREPLICATION, MySQLStatementParserREQUIRE_ROW_FORMAT, MySQLStatementParserRESET, MySQLStatementParserRESOURCE, MySQLStatementParserRESPECT, MySQLStatementParserRESTART, MySQLStatementParserRESTORE, MySQLStatementParserRESUME, MySQLStatementParserRETAIN, MySQLStatementParserRETURNED_SQLSTATE, MySQLStatementParserRETURNING, MySQLStatementParserRETURNS, MySQLStatementParserREUSE, MySQLStatementParserREVERSE, MySQLStatementParserROLE, MySQLStatementParserROLLBACK, MySQLStatementParserROLLUP, MySQLStatementParserROTATE, MySQLStatementParserROUTINE, MySQLStatementParserROW_COUNT, MySQLStatementParserROW_FORMAT, MySQLStatementParserRTREE, MySQLStatementParserSAVEPOINT, MySQLStatementParserSCHEDULE, MySQLStatementParserSCHEMA_NAME, MySQLStatementParserSECOND, MySQLStatementParserSECONDARY, MySQLStatementParserSECONDARY_ENGINE, MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, MySQLStatementParserSECONDARY_LOAD, MySQLStatementParserSECONDARY_UNLOAD, MySQLStatementParserSECURITY, MySQLStatementParserSERIAL, MySQLStatementParserSERIALIZABLE, MySQLStatementParserSERVER, MySQLStatementParserSESSION, MySQLStatementParserSHARE, MySQLStatementParserSHUTDOWN, MySQLStatementParserSIGNED, MySQLStatementParserSIMPLE, MySQLStatementParserSLAVE, MySQLStatementParserSLOW, MySQLStatementParserSNAPSHOT, MySQLStatementParserSOCKET, MySQLStatementParserSONAME, MySQLStatementParserSOUNDS, MySQLStatementParserSOURCE, MySQLStatementParserSQL_AFTER_GTIDS, MySQLStatementParserSQL_AFTER_MTS_GAPS, MySQLStatementParserSQL_BEFORE_GTIDS, MySQLStatementParserSQL_BUFFER_RESULT, MySQLStatementParserSQL_NO_CACHE, MySQLStatementParserSQL_THREAD, MySQLStatementParserSRID, MySQLStatementParserSTACKED, MySQLStatementParserSTART, MySQLStatementParserSTARTS, MySQLStatementParserSTATS_AUTO_RECALC, MySQLStatementParserSTATS_PERSISTENT, MySQLStatementParserSTATS_SAMPLE_PAGES, MySQLStatementParserSTATUS, MySQLStatementParserSTOP, MySQLStatementParserSTORAGE, MySQLStatementParserSTREAM, MySQLStatementParserSTRING, MySQLStatementParserSUBCLASS_ORIGIN, MySQLStatementParserSUBJECT, MySQLStatementParserSUBPARTITION, MySQLStatementParserSUBPARTITIONS, MySQLStatementParserSUPER, MySQLStatementParserSUSPEND, MySQLStatementParserSWAPS, MySQLStatementParserSWITCHES, MySQLStatementParserTABLES, MySQLStatementParserTABLESPACE, MySQLStatementParserTABLE_CHECKSUM, MySQLStatementParserTABLE_NAME, MySQLStatementParserTEMPORARY, MySQLStatementParserTEMPTABLE, MySQLStatementParserTEXT, MySQLStatementParserTHAN, MySQLStatementParserTHREAD_PRIORITY, MySQLStatementParserTIES, MySQLStatementParserTIME, MySQLStatementParserTIMESTAMP, MySQLStatementParserTIMESTAMP_ADD, MySQLStatementParserTIMESTAMP_DIFF, MySQLStatementParserTLS, MySQLStatementParserTRANSACTION, MySQLStatementParserTRIGGERS, MySQLStatementParserTRUNCATE, MySQLStatementParserTYPE, MySQLStatementParserTYPES, MySQLStatementParserUNBOUNDED, MySQLStatementParserUNCOMMITTED, MySQLStatementParserUNDEFINED, MySQLStatementParserUNDOFILE, MySQLStatementParserUNDO_BUFFER_SIZE, MySQLStatementParserUNICODE, MySQLStatementParserUNINSTALL, MySQLStatementParserUNKNOWN, MySQLStatementParserUNTIL, MySQLStatementParserUPGRADE, MySQLStatementParserUSER, MySQLStatementParserUSER_RESOURCES, MySQLStatementParserUSE_FRM, MySQLStatementParserVALIDATION, MySQLStatementParserVALUE, MySQLStatementParserVARIABLES, MySQLStatementParserVCPU, MySQLStatementParserVIEW, MySQLStatementParserVISIBLE, MySQLStatementParserWAIT, MySQLStatementParserWARNINGS, MySQLStatementParserWEEK, MySQLStatementParserWEIGHT_STRING, MySQLStatementParserWITHOUT, MySQLStatementParserWORK, MySQLStatementParserWRAPPER, MySQLStatementParserX509, MySQLStatementParserXA, MySQLStatementParserXID, MySQLStatementParserXML, MySQLStatementParserYEAR, MySQLStatementParserIDENTIFIER_, MySQLStatementParserDOUBLE_QUOTED_TEXT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5864)
			p.ConditionName()
		}

	case MySQLStatementParserSQLWARNING:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5865)
			p.Match(MySQLStatementParserSQLWARNING)
		}

	case MySQLStatementParserNOT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5866)
			p.Match(MySQLStatementParserNOT)
		}
		{
			p.SetState(5867)
			p.Match(MySQLStatementParserFOUND)
		}

	case MySQLStatementParserSQLEXCEPTION:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5868)
			p.Match(MySQLStatementParserSQLEXCEPTION)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IResignalStatementContext is an interface to support dynamic dispatch.
type IResignalStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsResignalStatementContext differentiates from other interfaces.
	IsResignalStatementContext()
}

type ResignalStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResignalStatementContext() *ResignalStatementContext {
	var p = new(ResignalStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_resignalStatement
	return p
}

func (*ResignalStatementContext) IsResignalStatementContext() {}

func NewResignalStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ResignalStatementContext {
	var p = new(ResignalStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_resignalStatement

	return p
}

func (s *ResignalStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ResignalStatementContext) RESIGNAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRESIGNAL, 0)
}

func (s *ResignalStatementContext) ConditionValue() IConditionValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionValueContext)
}

func (s *ResignalStatementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSET, 0)
}

func (s *ResignalStatementContext) AllSignalInformationItem() []ISignalInformationItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISignalInformationItemContext)(nil)).Elem())
	var tst = make([]ISignalInformationItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISignalInformationItemContext)
		}
	}

	return tst
}

func (s *ResignalStatementContext) SignalInformationItem(i int) ISignalInformationItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISignalInformationItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISignalInformationItemContext)
}

func (s *ResignalStatementContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *ResignalStatementContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *ResignalStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ResignalStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ResignalStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterResignalStatement(s)
	}
}

func (s *ResignalStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitResignalStatement(s)
	}
}

func (s *ResignalStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitResignalStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ResignalStatement() (localctx IResignalStatementContext) {
	this := p
	_ = this

	localctx = NewResignalStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 800, MySQLStatementParserRULE_resignalStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5871)
		p.Match(MySQLStatementParserRESIGNAL)
	}
	p.SetState(5873)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 748, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5872)
			p.ConditionValue()
		}

	}
	p.SetState(5884)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 750, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5875)
			p.Match(MySQLStatementParserSET)
		}
		{
			p.SetState(5876)
			p.SignalInformationItem()
		}
		p.SetState(5881)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(5877)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(5878)
				p.SignalInformationItem()
			}

			p.SetState(5883)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// ISignalStatementContext is an interface to support dynamic dispatch.
type ISignalStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSignalStatementContext differentiates from other interfaces.
	IsSignalStatementContext()
}

type SignalStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySignalStatementContext() *SignalStatementContext {
	var p = new(SignalStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_signalStatement
	return p
}

func (*SignalStatementContext) IsSignalStatementContext() {}

func NewSignalStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SignalStatementContext {
	var p = new(SignalStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_signalStatement

	return p
}

func (s *SignalStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SignalStatementContext) SIGNAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSIGNAL, 0)
}

func (s *SignalStatementContext) ConditionValue() IConditionValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionValueContext)
}

func (s *SignalStatementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSET, 0)
}

func (s *SignalStatementContext) AllSignalInformationItem() []ISignalInformationItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISignalInformationItemContext)(nil)).Elem())
	var tst = make([]ISignalInformationItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISignalInformationItemContext)
		}
	}

	return tst
}

func (s *SignalStatementContext) SignalInformationItem(i int) ISignalInformationItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISignalInformationItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISignalInformationItemContext)
}

func (s *SignalStatementContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *SignalStatementContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *SignalStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SignalStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SignalStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSignalStatement(s)
	}
}

func (s *SignalStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSignalStatement(s)
	}
}

func (s *SignalStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSignalStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SignalStatement() (localctx ISignalStatementContext) {
	this := p
	_ = this

	localctx = NewSignalStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 802, MySQLStatementParserRULE_signalStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5886)
		p.Match(MySQLStatementParserSIGNAL)
	}
	{
		p.SetState(5887)
		p.ConditionValue()
	}
	p.SetState(5897)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 752, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5888)
			p.Match(MySQLStatementParserSET)
		}
		{
			p.SetState(5889)
			p.SignalInformationItem()
		}
		p.SetState(5894)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(5890)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(5891)
				p.SignalInformationItem()
			}

			p.SetState(5896)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// ISignalInformationItemContext is an interface to support dynamic dispatch.
type ISignalInformationItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSignalInformationItemContext differentiates from other interfaces.
	IsSignalInformationItemContext()
}

type SignalInformationItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySignalInformationItemContext() *SignalInformationItemContext {
	var p = new(SignalInformationItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_signalInformationItem
	return p
}

func (*SignalInformationItemContext) IsSignalInformationItemContext() {}

func NewSignalInformationItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SignalInformationItemContext {
	var p = new(SignalInformationItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_signalInformationItem

	return p
}

func (s *SignalInformationItemContext) GetParser() antlr.Parser { return s.parser }

func (s *SignalInformationItemContext) ConditionInformationItemName() IConditionInformationItemNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionInformationItemNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionInformationItemNameContext)
}

func (s *SignalInformationItemContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *SignalInformationItemContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *SignalInformationItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SignalInformationItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SignalInformationItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSignalInformationItem(s)
	}
}

func (s *SignalInformationItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSignalInformationItem(s)
	}
}

func (s *SignalInformationItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSignalInformationItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SignalInformationItem() (localctx ISignalInformationItemContext) {
	this := p
	_ = this

	localctx = NewSignalInformationItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 804, MySQLStatementParserRULE_signalInformationItem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5899)
		p.ConditionInformationItemName()
	}
	{
		p.SetState(5900)
		p.Match(MySQLStatementParserEQ_)
	}
	{
		p.SetState(5901)
		p.expr(0)
	}

	return localctx
}

// IUseContext is an interface to support dynamic dispatch.
type IUseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUseContext differentiates from other interfaces.
	IsUseContext()
}

type UseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUseContext() *UseContext {
	var p = new(UseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_use
	return p
}

func (*UseContext) IsUseContext() {}

func NewUseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UseContext {
	var p = new(UseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_use

	return p
}

func (s *UseContext) GetParser() antlr.Parser { return s.parser }

func (s *UseContext) USE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUSE, 0)
}

func (s *UseContext) SchemaName() ISchemaNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemaNameContext)
}

func (s *UseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterUse(s)
	}
}

func (s *UseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitUse(s)
	}
}

func (s *UseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitUse(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Use() (localctx IUseContext) {
	this := p
	_ = this

	localctx = NewUseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 806, MySQLStatementParserRULE_use)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5903)
		p.Match(MySQLStatementParserUSE)
	}
	{
		p.SetState(5904)
		p.SchemaName()
	}

	return localctx
}

// IHelpContext is an interface to support dynamic dispatch.
type IHelpContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHelpContext differentiates from other interfaces.
	IsHelpContext()
}

type HelpContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHelpContext() *HelpContext {
	var p = new(HelpContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_help
	return p
}

func (*HelpContext) IsHelpContext() {}

func NewHelpContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HelpContext {
	var p = new(HelpContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_help

	return p
}

func (s *HelpContext) GetParser() antlr.Parser { return s.parser }

func (s *HelpContext) HELP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHELP, 0)
}

func (s *HelpContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *HelpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HelpContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HelpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterHelp(s)
	}
}

func (s *HelpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitHelp(s)
	}
}

func (s *HelpContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitHelp(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Help() (localctx IHelpContext) {
	this := p
	_ = this

	localctx = NewHelpContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 808, MySQLStatementParserRULE_help)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5906)
		p.Match(MySQLStatementParserHELP)
	}
	{
		p.SetState(5907)
		p.String_()
	}

	return localctx
}

// IExplainContext is an interface to support dynamic dispatch.
type IExplainContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExplainContext differentiates from other interfaces.
	IsExplainContext()
}

type ExplainContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExplainContext() *ExplainContext {
	var p = new(ExplainContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_explain
	return p
}

func (*ExplainContext) IsExplainContext() {}

func NewExplainContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExplainContext {
	var p = new(ExplainContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_explain

	return p
}

func (s *ExplainContext) GetParser() antlr.Parser { return s.parser }

func (s *ExplainContext) DESC() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDESC, 0)
}

func (s *ExplainContext) DESCRIBE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDESCRIBE, 0)
}

func (s *ExplainContext) EXPLAIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXPLAIN, 0)
}

func (s *ExplainContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *ExplainContext) ANALYZE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserANALYZE, 0)
}

func (s *ExplainContext) Select() ISelectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectContext)
}

func (s *ExplainContext) ExplainableStatement() IExplainableStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExplainableStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExplainableStatementContext)
}

func (s *ExplainContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOR, 0)
}

func (s *ExplainContext) CONNECTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCONNECTION, 0)
}

func (s *ExplainContext) ConnectionId() IConnectionIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConnectionIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConnectionIdContext)
}

func (s *ExplainContext) ColumnRef() IColumnRefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnRefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnRefContext)
}

func (s *ExplainContext) TextString() ITextStringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITextStringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITextStringContext)
}

func (s *ExplainContext) ExplainType() IExplainTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExplainTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExplainTypeContext)
}

func (s *ExplainContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplainContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExplainContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterExplain(s)
	}
}

func (s *ExplainContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitExplain(s)
	}
}

func (s *ExplainContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitExplain(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Explain() (localctx IExplainContext) {
	this := p
	_ = this

	localctx = NewExplainContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 810, MySQLStatementParserRULE_explain)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5909)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserDESC || _la == MySQLStatementParserDESCRIBE || _la == MySQLStatementParserEXPLAIN) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(5926)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 756, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(5910)
			p.TableName()
		}
		p.SetState(5913)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 753, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5911)
				p.ColumnRef()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 753, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(5912)
				p.TextString()
			}

		}

	case 2:
		p.SetState(5916)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserFORMAT {
			{
				p.SetState(5915)
				p.ExplainType()
			}

		}
		p.SetState(5922)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySQLStatementParserLP_, MySQLStatementParserDELETE, MySQLStatementParserINSERT, MySQLStatementParserREPLACE, MySQLStatementParserSELECT, MySQLStatementParserTABLE, MySQLStatementParserUPDATE, MySQLStatementParserVALUES, MySQLStatementParserWITH:
			{
				p.SetState(5918)
				p.ExplainableStatement()
			}

		case MySQLStatementParserFOR:
			{
				p.SetState(5919)
				p.Match(MySQLStatementParserFOR)
			}
			{
				p.SetState(5920)
				p.Match(MySQLStatementParserCONNECTION)
			}
			{
				p.SetState(5921)
				p.ConnectionId()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 3:
		{
			p.SetState(5924)
			p.Match(MySQLStatementParserANALYZE)
		}
		{
			p.SetState(5925)
			p.Select()
		}

	}

	return localctx
}

// IShowDatabasesContext is an interface to support dynamic dispatch.
type IShowDatabasesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowDatabasesContext differentiates from other interfaces.
	IsShowDatabasesContext()
}

type ShowDatabasesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowDatabasesContext() *ShowDatabasesContext {
	var p = new(ShowDatabasesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showDatabases
	return p
}

func (*ShowDatabasesContext) IsShowDatabasesContext() {}

func NewShowDatabasesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowDatabasesContext {
	var p = new(ShowDatabasesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showDatabases

	return p
}

func (s *ShowDatabasesContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowDatabasesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowDatabasesContext) DATABASES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDATABASES, 0)
}

func (s *ShowDatabasesContext) SCHEMAS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSCHEMAS, 0)
}

func (s *ShowDatabasesContext) ShowFilter() IShowFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowFilterContext)
}

func (s *ShowDatabasesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowDatabasesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowDatabasesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowDatabases(s)
	}
}

func (s *ShowDatabasesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowDatabases(s)
	}
}

func (s *ShowDatabasesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowDatabases(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowDatabases() (localctx IShowDatabasesContext) {
	this := p
	_ = this

	localctx = NewShowDatabasesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 812, MySQLStatementParserRULE_showDatabases)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5928)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(5929)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserDATABASES || _la == MySQLStatementParserSCHEMAS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(5931)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLIKE || _la == MySQLStatementParserWHERE {
		{
			p.SetState(5930)
			p.ShowFilter()
		}

	}

	return localctx
}

// IShowTablesContext is an interface to support dynamic dispatch.
type IShowTablesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowTablesContext differentiates from other interfaces.
	IsShowTablesContext()
}

type ShowTablesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowTablesContext() *ShowTablesContext {
	var p = new(ShowTablesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showTables
	return p
}

func (*ShowTablesContext) IsShowTablesContext() {}

func NewShowTablesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowTablesContext {
	var p = new(ShowTablesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showTables

	return p
}

func (s *ShowTablesContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowTablesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowTablesContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLES, 0)
}

func (s *ShowTablesContext) EXTENDED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXTENDED, 0)
}

func (s *ShowTablesContext) FULL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFULL, 0)
}

func (s *ShowTablesContext) FromSchema() IFromSchemaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFromSchemaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFromSchemaContext)
}

func (s *ShowTablesContext) ShowFilter() IShowFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowFilterContext)
}

func (s *ShowTablesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowTablesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowTablesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowTables(s)
	}
}

func (s *ShowTablesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowTables(s)
	}
}

func (s *ShowTablesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowTables(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowTables() (localctx IShowTablesContext) {
	this := p
	_ = this

	localctx = NewShowTablesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 814, MySQLStatementParserRULE_showTables)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5933)
		p.Match(MySQLStatementParserSHOW)
	}
	p.SetState(5935)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserEXTENDED {
		{
			p.SetState(5934)
			p.Match(MySQLStatementParserEXTENDED)
		}

	}
	p.SetState(5938)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserFULL {
		{
			p.SetState(5937)
			p.Match(MySQLStatementParserFULL)
		}

	}
	{
		p.SetState(5940)
		p.Match(MySQLStatementParserTABLES)
	}
	p.SetState(5942)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserFROM || _la == MySQLStatementParserIN {
		{
			p.SetState(5941)
			p.FromSchema()
		}

	}
	p.SetState(5945)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLIKE || _la == MySQLStatementParserWHERE {
		{
			p.SetState(5944)
			p.ShowFilter()
		}

	}

	return localctx
}

// IShowTableStatusContext is an interface to support dynamic dispatch.
type IShowTableStatusContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowTableStatusContext differentiates from other interfaces.
	IsShowTableStatusContext()
}

type ShowTableStatusContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowTableStatusContext() *ShowTableStatusContext {
	var p = new(ShowTableStatusContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showTableStatus
	return p
}

func (*ShowTableStatusContext) IsShowTableStatusContext() {}

func NewShowTableStatusContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowTableStatusContext {
	var p = new(ShowTableStatusContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showTableStatus

	return p
}

func (s *ShowTableStatusContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowTableStatusContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowTableStatusContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLE, 0)
}

func (s *ShowTableStatusContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTATUS, 0)
}

func (s *ShowTableStatusContext) FromSchema() IFromSchemaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFromSchemaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFromSchemaContext)
}

func (s *ShowTableStatusContext) ShowFilter() IShowFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowFilterContext)
}

func (s *ShowTableStatusContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowTableStatusContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowTableStatusContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowTableStatus(s)
	}
}

func (s *ShowTableStatusContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowTableStatus(s)
	}
}

func (s *ShowTableStatusContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowTableStatus(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowTableStatus() (localctx IShowTableStatusContext) {
	this := p
	_ = this

	localctx = NewShowTableStatusContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 816, MySQLStatementParserRULE_showTableStatus)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5947)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(5948)
		p.Match(MySQLStatementParserTABLE)
	}
	{
		p.SetState(5949)
		p.Match(MySQLStatementParserSTATUS)
	}
	p.SetState(5951)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserFROM || _la == MySQLStatementParserIN {
		{
			p.SetState(5950)
			p.FromSchema()
		}

	}
	p.SetState(5954)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLIKE || _la == MySQLStatementParserWHERE {
		{
			p.SetState(5953)
			p.ShowFilter()
		}

	}

	return localctx
}

// IShowColumnsContext is an interface to support dynamic dispatch.
type IShowColumnsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowColumnsContext differentiates from other interfaces.
	IsShowColumnsContext()
}

type ShowColumnsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowColumnsContext() *ShowColumnsContext {
	var p = new(ShowColumnsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showColumns
	return p
}

func (*ShowColumnsContext) IsShowColumnsContext() {}

func NewShowColumnsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowColumnsContext {
	var p = new(ShowColumnsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showColumns

	return p
}

func (s *ShowColumnsContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowColumnsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowColumnsContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOLUMNS, 0)
}

func (s *ShowColumnsContext) FromTable() IFromTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFromTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFromTableContext)
}

func (s *ShowColumnsContext) EXTENDED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXTENDED, 0)
}

func (s *ShowColumnsContext) FULL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFULL, 0)
}

func (s *ShowColumnsContext) FromSchema() IFromSchemaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFromSchemaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFromSchemaContext)
}

func (s *ShowColumnsContext) ShowFilter() IShowFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowFilterContext)
}

func (s *ShowColumnsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowColumnsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowColumnsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowColumns(s)
	}
}

func (s *ShowColumnsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowColumns(s)
	}
}

func (s *ShowColumnsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowColumns(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowColumns() (localctx IShowColumnsContext) {
	this := p
	_ = this

	localctx = NewShowColumnsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 818, MySQLStatementParserRULE_showColumns)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5956)
		p.Match(MySQLStatementParserSHOW)
	}
	p.SetState(5958)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserEXTENDED {
		{
			p.SetState(5957)
			p.Match(MySQLStatementParserEXTENDED)
		}

	}
	p.SetState(5961)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserFULL {
		{
			p.SetState(5960)
			p.Match(MySQLStatementParserFULL)
		}

	}
	{
		p.SetState(5963)
		p.Match(MySQLStatementParserCOLUMNS)
	}
	{
		p.SetState(5964)
		p.FromTable()
	}
	p.SetState(5966)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserFROM || _la == MySQLStatementParserIN {
		{
			p.SetState(5965)
			p.FromSchema()
		}

	}
	p.SetState(5969)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLIKE || _la == MySQLStatementParserWHERE {
		{
			p.SetState(5968)
			p.ShowFilter()
		}

	}

	return localctx
}

// IShowIndexContext is an interface to support dynamic dispatch.
type IShowIndexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowIndexContext differentiates from other interfaces.
	IsShowIndexContext()
}

type ShowIndexContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowIndexContext() *ShowIndexContext {
	var p = new(ShowIndexContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showIndex
	return p
}

func (*ShowIndexContext) IsShowIndexContext() {}

func NewShowIndexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowIndexContext {
	var p = new(ShowIndexContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showIndex

	return p
}

func (s *ShowIndexContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowIndexContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowIndexContext) FromTable() IFromTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFromTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFromTableContext)
}

func (s *ShowIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINDEX, 0)
}

func (s *ShowIndexContext) INDEXES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINDEXES, 0)
}

func (s *ShowIndexContext) KEYS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserKEYS, 0)
}

func (s *ShowIndexContext) EXTENDED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXTENDED, 0)
}

func (s *ShowIndexContext) FromSchema() IFromSchemaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFromSchemaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFromSchemaContext)
}

func (s *ShowIndexContext) ShowWhereClause() IShowWhereClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowWhereClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowWhereClauseContext)
}

func (s *ShowIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowIndexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowIndex(s)
	}
}

func (s *ShowIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowIndex(s)
	}
}

func (s *ShowIndexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowIndex(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowIndex() (localctx IShowIndexContext) {
	this := p
	_ = this

	localctx = NewShowIndexContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 820, MySQLStatementParserRULE_showIndex)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5971)
		p.Match(MySQLStatementParserSHOW)
	}
	p.SetState(5973)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserEXTENDED {
		{
			p.SetState(5972)
			p.Match(MySQLStatementParserEXTENDED)
		}

	}
	{
		p.SetState(5975)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserINDEX || _la == MySQLStatementParserINDEXES || _la == MySQLStatementParserKEYS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(5976)
		p.FromTable()
	}
	p.SetState(5978)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserFROM || _la == MySQLStatementParserIN {
		{
			p.SetState(5977)
			p.FromSchema()
		}

	}
	p.SetState(5981)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserWHERE {
		{
			p.SetState(5980)
			p.ShowWhereClause()
		}

	}

	return localctx
}

// IShowCreateTableContext is an interface to support dynamic dispatch.
type IShowCreateTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowCreateTableContext differentiates from other interfaces.
	IsShowCreateTableContext()
}

type ShowCreateTableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowCreateTableContext() *ShowCreateTableContext {
	var p = new(ShowCreateTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showCreateTable
	return p
}

func (*ShowCreateTableContext) IsShowCreateTableContext() {}

func NewShowCreateTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowCreateTableContext {
	var p = new(ShowCreateTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showCreateTable

	return p
}

func (s *ShowCreateTableContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowCreateTableContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowCreateTableContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *ShowCreateTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLE, 0)
}

func (s *ShowCreateTableContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *ShowCreateTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCreateTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowCreateTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowCreateTable(s)
	}
}

func (s *ShowCreateTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowCreateTable(s)
	}
}

func (s *ShowCreateTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowCreateTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowCreateTable() (localctx IShowCreateTableContext) {
	this := p
	_ = this

	localctx = NewShowCreateTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 822, MySQLStatementParserRULE_showCreateTable)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5983)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(5984)
		p.Match(MySQLStatementParserCREATE)
	}
	{
		p.SetState(5985)
		p.Match(MySQLStatementParserTABLE)
	}
	{
		p.SetState(5986)
		p.TableName()
	}

	return localctx
}

// IFromSchemaContext is an interface to support dynamic dispatch.
type IFromSchemaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFromSchemaContext differentiates from other interfaces.
	IsFromSchemaContext()
}

type FromSchemaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFromSchemaContext() *FromSchemaContext {
	var p = new(FromSchemaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_fromSchema
	return p
}

func (*FromSchemaContext) IsFromSchemaContext() {}

func NewFromSchemaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FromSchemaContext {
	var p = new(FromSchemaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_fromSchema

	return p
}

func (s *FromSchemaContext) GetParser() antlr.Parser { return s.parser }

func (s *FromSchemaContext) SchemaName() ISchemaNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemaNameContext)
}

func (s *FromSchemaContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFROM, 0)
}

func (s *FromSchemaContext) IN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIN, 0)
}

func (s *FromSchemaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FromSchemaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FromSchemaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterFromSchema(s)
	}
}

func (s *FromSchemaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitFromSchema(s)
	}
}

func (s *FromSchemaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitFromSchema(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) FromSchema() (localctx IFromSchemaContext) {
	this := p
	_ = this

	localctx = NewFromSchemaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 824, MySQLStatementParserRULE_fromSchema)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5988)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserFROM || _la == MySQLStatementParserIN) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(5989)
		p.SchemaName()
	}

	return localctx
}

// IFromTableContext is an interface to support dynamic dispatch.
type IFromTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFromTableContext differentiates from other interfaces.
	IsFromTableContext()
}

type FromTableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFromTableContext() *FromTableContext {
	var p = new(FromTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_fromTable
	return p
}

func (*FromTableContext) IsFromTableContext() {}

func NewFromTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FromTableContext {
	var p = new(FromTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_fromTable

	return p
}

func (s *FromTableContext) GetParser() antlr.Parser { return s.parser }

func (s *FromTableContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *FromTableContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFROM, 0)
}

func (s *FromTableContext) IN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIN, 0)
}

func (s *FromTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FromTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FromTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterFromTable(s)
	}
}

func (s *FromTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitFromTable(s)
	}
}

func (s *FromTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitFromTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) FromTable() (localctx IFromTableContext) {
	this := p
	_ = this

	localctx = NewFromTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 826, MySQLStatementParserRULE_fromTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5991)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserFROM || _la == MySQLStatementParserIN) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(5992)
		p.TableName()
	}

	return localctx
}

// IShowLikeContext is an interface to support dynamic dispatch.
type IShowLikeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowLikeContext differentiates from other interfaces.
	IsShowLikeContext()
}

type ShowLikeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowLikeContext() *ShowLikeContext {
	var p = new(ShowLikeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showLike
	return p
}

func (*ShowLikeContext) IsShowLikeContext() {}

func NewShowLikeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowLikeContext {
	var p = new(ShowLikeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showLike

	return p
}

func (s *ShowLikeContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowLikeContext) LIKE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLIKE, 0)
}

func (s *ShowLikeContext) StringLiterals() IStringLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralsContext)
}

func (s *ShowLikeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowLikeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowLikeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowLike(s)
	}
}

func (s *ShowLikeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowLike(s)
	}
}

func (s *ShowLikeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowLike(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowLike() (localctx IShowLikeContext) {
	this := p
	_ = this

	localctx = NewShowLikeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 828, MySQLStatementParserRULE_showLike)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5994)
		p.Match(MySQLStatementParserLIKE)
	}
	{
		p.SetState(5995)
		p.StringLiterals()
	}

	return localctx
}

// IShowWhereClauseContext is an interface to support dynamic dispatch.
type IShowWhereClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowWhereClauseContext differentiates from other interfaces.
	IsShowWhereClauseContext()
}

type ShowWhereClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowWhereClauseContext() *ShowWhereClauseContext {
	var p = new(ShowWhereClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showWhereClause
	return p
}

func (*ShowWhereClauseContext) IsShowWhereClauseContext() {}

func NewShowWhereClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowWhereClauseContext {
	var p = new(ShowWhereClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showWhereClause

	return p
}

func (s *ShowWhereClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowWhereClauseContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWHERE, 0)
}

func (s *ShowWhereClauseContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ShowWhereClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowWhereClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowWhereClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowWhereClause(s)
	}
}

func (s *ShowWhereClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowWhereClause(s)
	}
}

func (s *ShowWhereClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowWhereClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowWhereClause() (localctx IShowWhereClauseContext) {
	this := p
	_ = this

	localctx = NewShowWhereClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 830, MySQLStatementParserRULE_showWhereClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5997)
		p.Match(MySQLStatementParserWHERE)
	}
	{
		p.SetState(5998)
		p.expr(0)
	}

	return localctx
}

// IShowFilterContext is an interface to support dynamic dispatch.
type IShowFilterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowFilterContext differentiates from other interfaces.
	IsShowFilterContext()
}

type ShowFilterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowFilterContext() *ShowFilterContext {
	var p = new(ShowFilterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showFilter
	return p
}

func (*ShowFilterContext) IsShowFilterContext() {}

func NewShowFilterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowFilterContext {
	var p = new(ShowFilterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showFilter

	return p
}

func (s *ShowFilterContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowFilterContext) ShowLike() IShowLikeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowLikeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowLikeContext)
}

func (s *ShowFilterContext) ShowWhereClause() IShowWhereClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowWhereClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowWhereClauseContext)
}

func (s *ShowFilterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowFilterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowFilterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowFilter(s)
	}
}

func (s *ShowFilterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowFilter(s)
	}
}

func (s *ShowFilterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowFilter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowFilter() (localctx IShowFilterContext) {
	this := p
	_ = this

	localctx = NewShowFilterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 832, MySQLStatementParserRULE_showFilter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6002)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserLIKE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6000)
			p.ShowLike()
		}

	case MySQLStatementParserWHERE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6001)
			p.ShowWhereClause()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IShowProfileTypeContext is an interface to support dynamic dispatch.
type IShowProfileTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowProfileTypeContext differentiates from other interfaces.
	IsShowProfileTypeContext()
}

type ShowProfileTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowProfileTypeContext() *ShowProfileTypeContext {
	var p = new(ShowProfileTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showProfileType
	return p
}

func (*ShowProfileTypeContext) IsShowProfileTypeContext() {}

func NewShowProfileTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowProfileTypeContext {
	var p = new(ShowProfileTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showProfileType

	return p
}

func (s *ShowProfileTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowProfileTypeContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALL, 0)
}

func (s *ShowProfileTypeContext) BLOCK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBLOCK, 0)
}

func (s *ShowProfileTypeContext) IO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIO, 0)
}

func (s *ShowProfileTypeContext) CONTEXT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCONTEXT, 0)
}

func (s *ShowProfileTypeContext) SWITCHES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSWITCHES, 0)
}

func (s *ShowProfileTypeContext) CPU() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCPU, 0)
}

func (s *ShowProfileTypeContext) IPC() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIPC, 0)
}

func (s *ShowProfileTypeContext) MEMORY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMEMORY, 0)
}

func (s *ShowProfileTypeContext) PAGE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPAGE, 0)
}

func (s *ShowProfileTypeContext) FAULTS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFAULTS, 0)
}

func (s *ShowProfileTypeContext) SOURCE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSOURCE, 0)
}

func (s *ShowProfileTypeContext) SWAPS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSWAPS, 0)
}

func (s *ShowProfileTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowProfileTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowProfileTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowProfileType(s)
	}
}

func (s *ShowProfileTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowProfileType(s)
	}
}

func (s *ShowProfileTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowProfileType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowProfileType() (localctx IShowProfileTypeContext) {
	this := p
	_ = this

	localctx = NewShowProfileTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 834, MySQLStatementParserRULE_showProfileType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6016)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserALL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6004)
			p.Match(MySQLStatementParserALL)
		}

	case MySQLStatementParserBLOCK:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6005)
			p.Match(MySQLStatementParserBLOCK)
		}
		{
			p.SetState(6006)
			p.Match(MySQLStatementParserIO)
		}

	case MySQLStatementParserCONTEXT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6007)
			p.Match(MySQLStatementParserCONTEXT)
		}
		{
			p.SetState(6008)
			p.Match(MySQLStatementParserSWITCHES)
		}

	case MySQLStatementParserCPU:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6009)
			p.Match(MySQLStatementParserCPU)
		}

	case MySQLStatementParserIPC:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6010)
			p.Match(MySQLStatementParserIPC)
		}

	case MySQLStatementParserMEMORY:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(6011)
			p.Match(MySQLStatementParserMEMORY)
		}

	case MySQLStatementParserPAGE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(6012)
			p.Match(MySQLStatementParserPAGE)
		}
		{
			p.SetState(6013)
			p.Match(MySQLStatementParserFAULTS)
		}

	case MySQLStatementParserSOURCE:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(6014)
			p.Match(MySQLStatementParserSOURCE)
		}

	case MySQLStatementParserSWAPS:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(6015)
			p.Match(MySQLStatementParserSWAPS)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISetVariableContext is an interface to support dynamic dispatch.
type ISetVariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetVariableContext differentiates from other interfaces.
	IsSetVariableContext()
}

type SetVariableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetVariableContext() *SetVariableContext {
	var p = new(SetVariableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_setVariable
	return p
}

func (*SetVariableContext) IsSetVariableContext() {}

func NewSetVariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetVariableContext {
	var p = new(SetVariableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_setVariable

	return p
}

func (s *SetVariableContext) GetParser() antlr.Parser { return s.parser }

func (s *SetVariableContext) SET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSET, 0)
}

func (s *SetVariableContext) OptionValueList() IOptionValueListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptionValueListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOptionValueListContext)
}

func (s *SetVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetVariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetVariableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSetVariable(s)
	}
}

func (s *SetVariableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSetVariable(s)
	}
}

func (s *SetVariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSetVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SetVariable() (localctx ISetVariableContext) {
	this := p
	_ = this

	localctx = NewSetVariableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 836, MySQLStatementParserRULE_setVariable)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6018)
		p.Match(MySQLStatementParserSET)
	}
	{
		p.SetState(6019)
		p.OptionValueList()
	}

	return localctx
}

// IOptionValueListContext is an interface to support dynamic dispatch.
type IOptionValueListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOptionValueListContext differentiates from other interfaces.
	IsOptionValueListContext()
}

type OptionValueListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptionValueListContext() *OptionValueListContext {
	var p = new(OptionValueListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_optionValueList
	return p
}

func (*OptionValueListContext) IsOptionValueListContext() {}

func NewOptionValueListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OptionValueListContext {
	var p = new(OptionValueListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_optionValueList

	return p
}

func (s *OptionValueListContext) GetParser() antlr.Parser { return s.parser }

func (s *OptionValueListContext) OptionValueNoOptionType() IOptionValueNoOptionTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptionValueNoOptionTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOptionValueNoOptionTypeContext)
}

func (s *OptionValueListContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *OptionValueListContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *OptionValueListContext) AllOptionValue() []IOptionValueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOptionValueContext)(nil)).Elem())
	var tst = make([]IOptionValueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOptionValueContext)
		}
	}

	return tst
}

func (s *OptionValueListContext) OptionValue(i int) IOptionValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptionValueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOptionValueContext)
}

func (s *OptionValueListContext) OptionType() IOptionTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptionTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOptionTypeContext)
}

func (s *OptionValueListContext) InternalVariableName() IInternalVariableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInternalVariableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInternalVariableNameContext)
}

func (s *OptionValueListContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *OptionValueListContext) SetExprOrDefault() ISetExprOrDefaultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetExprOrDefaultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetExprOrDefaultContext)
}

func (s *OptionValueListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OptionValueListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OptionValueListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterOptionValueList(s)
	}
}

func (s *OptionValueListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitOptionValueList(s)
	}
}

func (s *OptionValueListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitOptionValueList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) OptionValueList() (localctx IOptionValueListContext) {
	this := p
	_ = this

	localctx = NewOptionValueListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 838, MySQLStatementParserRULE_optionValueList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6041)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 775, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6021)
			p.OptionValueNoOptionType()
		}
		p.SetState(6026)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(6022)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(6023)
				p.OptionValue()
			}

			p.SetState(6028)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6029)
			p.OptionType()
		}

		{
			p.SetState(6030)
			p.InternalVariableName()
		}
		{
			p.SetState(6031)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(6032)
			p.SetExprOrDefault()
		}

		p.SetState(6038)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(6034)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(6035)
				p.OptionValue()
			}

			p.SetState(6040)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IOptionValueNoOptionTypeContext is an interface to support dynamic dispatch.
type IOptionValueNoOptionTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOptionValueNoOptionTypeContext differentiates from other interfaces.
	IsOptionValueNoOptionTypeContext()
}

type OptionValueNoOptionTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptionValueNoOptionTypeContext() *OptionValueNoOptionTypeContext {
	var p = new(OptionValueNoOptionTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_optionValueNoOptionType
	return p
}

func (*OptionValueNoOptionTypeContext) IsOptionValueNoOptionTypeContext() {}

func NewOptionValueNoOptionTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OptionValueNoOptionTypeContext {
	var p = new(OptionValueNoOptionTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_optionValueNoOptionType

	return p
}

func (s *OptionValueNoOptionTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *OptionValueNoOptionTypeContext) InternalVariableName() IInternalVariableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInternalVariableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInternalVariableNameContext)
}

func (s *OptionValueNoOptionTypeContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *OptionValueNoOptionTypeContext) SetExprOrDefault() ISetExprOrDefaultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetExprOrDefaultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetExprOrDefaultContext)
}

func (s *OptionValueNoOptionTypeContext) UserVariable() IUserVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserVariableContext)
}

func (s *OptionValueNoOptionTypeContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *OptionValueNoOptionTypeContext) SetSystemVariable() ISetSystemVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetSystemVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetSystemVariableContext)
}

func (s *OptionValueNoOptionTypeContext) NAMES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNAMES, 0)
}

func (s *OptionValueNoOptionTypeContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *OptionValueNoOptionTypeContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFAULT, 0)
}

func (s *OptionValueNoOptionTypeContext) CollateClause() ICollateClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollateClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollateClauseContext)
}

func (s *OptionValueNoOptionTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OptionValueNoOptionTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OptionValueNoOptionTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterOptionValueNoOptionType(s)
	}
}

func (s *OptionValueNoOptionTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitOptionValueNoOptionType(s)
	}
}

func (s *OptionValueNoOptionTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitOptionValueNoOptionType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) OptionValueNoOptionType() (localctx IOptionValueNoOptionTypeContext) {
	this := p
	_ = this

	localctx = NewOptionValueNoOptionTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 840, MySQLStatementParserRULE_optionValueNoOptionType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6065)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 778, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6043)
			p.InternalVariableName()
		}
		{
			p.SetState(6044)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(6045)
			p.SetExprOrDefault()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6047)
			p.UserVariable()
		}
		{
			p.SetState(6048)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(6049)
			p.expr(0)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6051)
			p.SetSystemVariable()
		}
		{
			p.SetState(6052)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(6053)
			p.SetExprOrDefault()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6055)
			p.Match(MySQLStatementParserNAMES)
		}
		p.SetState(6063)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySQLStatementParserEQ_:
			{
				p.SetState(6056)
				p.Match(MySQLStatementParserEQ_)
			}
			{
				p.SetState(6057)
				p.expr(0)
			}

		case MySQLStatementParserMAX, MySQLStatementParserMIN, MySQLStatementParserSUM, MySQLStatementParserCOUNT, MySQLStatementParserGROUP_CONCAT, MySQLStatementParserCAST, MySQLStatementParserPOSITION, MySQLStatementParserSUBSTRING, MySQLStatementParserSUBSTR, MySQLStatementParserEXTRACT, MySQLStatementParserTRIM, MySQLStatementParserLAST_DAY, MySQLStatementParserTRADITIONAL, MySQLStatementParserTREE, MySQLStatementParserMYSQL_ADMIN, MySQLStatementParserINSTANT, MySQLStatementParserINPLACE, MySQLStatementParserCOPY, MySQLStatementParserUL_BINARY, MySQLStatementParserAUTOCOMMIT, MySQLStatementParserINNODB, MySQLStatementParserREDO_LOG, MySQLStatementParserACCOUNT, MySQLStatementParserACTION, MySQLStatementParserACTIVE, MySQLStatementParserADMIN, MySQLStatementParserAFTER, MySQLStatementParserAGAINST, MySQLStatementParserAGGREGATE, MySQLStatementParserALGORITHM, MySQLStatementParserALWAYS, MySQLStatementParserANY, MySQLStatementParserARRAY, MySQLStatementParserASCII, MySQLStatementParserAT, MySQLStatementParserATTRIBUTE, MySQLStatementParserAUTOEXTEND_SIZE, MySQLStatementParserAUTO_INCREMENT, MySQLStatementParserAVG, MySQLStatementParserAVG_ROW_LENGTH, MySQLStatementParserBACKUP, MySQLStatementParserBEGIN, MySQLStatementParserBINARY, MySQLStatementParserBINLOG, MySQLStatementParserBIT, MySQLStatementParserBLOCK, MySQLStatementParserBOOL, MySQLStatementParserBOOLEAN, MySQLStatementParserBTREE, MySQLStatementParserBUCKETS, MySQLStatementParserBYTE, MySQLStatementParserCACHE, MySQLStatementParserCASCADED, MySQLStatementParserCATALOG_NAME, MySQLStatementParserCHAIN, MySQLStatementParserCHANGED, MySQLStatementParserCHANNEL, MySQLStatementParserCHARSET, MySQLStatementParserCHECKSUM, MySQLStatementParserCIPHER, MySQLStatementParserCLASS_ORIGIN, MySQLStatementParserCLIENT, MySQLStatementParserCLONE, MySQLStatementParserCLOSE, MySQLStatementParserCOALESCE, MySQLStatementParserCODE, MySQLStatementParserCOLLATION, MySQLStatementParserCOLUMNS, MySQLStatementParserCOLUMN_FORMAT, MySQLStatementParserCOLUMN_NAME, MySQLStatementParserCOMMENT, MySQLStatementParserCOMMIT, MySQLStatementParserCOMMITTED, MySQLStatementParserCOMPACT, MySQLStatementParserCOMPLETION, MySQLStatementParserCOMPONENT, MySQLStatementParserCOMPRESSED, MySQLStatementParserCOMPRESSION, MySQLStatementParserCONCURRENT, MySQLStatementParserCONNECTION, MySQLStatementParserCONSISTENT, MySQLStatementParserCONSTRAINT_CATALOG, MySQLStatementParserCONSTRAINT_NAME, MySQLStatementParserCONSTRAINT_SCHEMA, MySQLStatementParserCONTAINS, MySQLStatementParserCONTEXT, MySQLStatementParserCPU, MySQLStatementParserCURRENT, MySQLStatementParserCURSOR_NAME, MySQLStatementParserDATA, MySQLStatementParserDATAFILE, MySQLStatementParserDATE, MySQLStatementParserDATETIME, MySQLStatementParserDAY, MySQLStatementParserDEALLOCATE, MySQLStatementParserDEFAULT_AUTH, MySQLStatementParserDEFINER, MySQLStatementParserDEFINITION, MySQLStatementParserDELAY_KEY_WRITE, MySQLStatementParserDESCRIPTION, MySQLStatementParserDIAGNOSTICS, MySQLStatementParserDIRECTORY, MySQLStatementParserDISABLE, MySQLStatementParserDISCARD, MySQLStatementParserDISK, MySQLStatementParserDO, MySQLStatementParserDUMPFILE, MySQLStatementParserDUPLICATE, MySQLStatementParserDYNAMIC, MySQLStatementParserENABLE, MySQLStatementParserENCRYPTION, MySQLStatementParserEND, MySQLStatementParserENDS, MySQLStatementParserENFORCED, MySQLStatementParserENGINE, MySQLStatementParserENGINES, MySQLStatementParserENGINE_ATTRIBUTE, MySQLStatementParserENUM, MySQLStatementParserERROR, MySQLStatementParserERRORS, MySQLStatementParserESCAPE, MySQLStatementParserEVENT, MySQLStatementParserEVENTS, MySQLStatementParserEVERY, MySQLStatementParserEXCHANGE, MySQLStatementParserEXCLUDE, MySQLStatementParserEXECUTE, MySQLStatementParserEXPANSION, MySQLStatementParserEXPIRE, MySQLStatementParserEXPORT, MySQLStatementParserEXTENDED, MySQLStatementParserEXTENT_SIZE, MySQLStatementParserFAILED_LOGIN_ATTEMPTS, MySQLStatementParserFAST, MySQLStatementParserFAULTS, MySQLStatementParserFILE, MySQLStatementParserFILE_BLOCK_SIZE, MySQLStatementParserFILTER, MySQLStatementParserFIRST, MySQLStatementParserFIXED, MySQLStatementParserFLUSH, MySQLStatementParserFOLLOWING, MySQLStatementParserFOLLOWS, MySQLStatementParserFORMAT, MySQLStatementParserFOUND, MySQLStatementParserFULL, MySQLStatementParserGENERAL, MySQLStatementParserGEOMETRY, MySQLStatementParserGEOMETRYCOLLECTION, MySQLStatementParserGET_FORMAT, MySQLStatementParserGET_MASTER_PUBLIC_KEY, MySQLStatementParserGLOBAL, MySQLStatementParserGRANTS, MySQLStatementParserGROUP_REPLICATION, MySQLStatementParserHANDLER, MySQLStatementParserHASH, MySQLStatementParserHELP, MySQLStatementParserHISTOGRAM, MySQLStatementParserHISTORY, MySQLStatementParserHOST, MySQLStatementParserHOSTS, MySQLStatementParserHOUR, MySQLStatementParserIDENTIFIED, MySQLStatementParserIGNORE_SERVER_IDS, MySQLStatementParserIMPORT, MySQLStatementParserINACTIVE, MySQLStatementParserINDEXES, MySQLStatementParserINITIAL_SIZE, MySQLStatementParserINSERT_METHOD, MySQLStatementParserINSTALL, MySQLStatementParserINSTANCE, MySQLStatementParserINVISIBLE, MySQLStatementParserINVOKER, MySQLStatementParserIO, MySQLStatementParserIPC, MySQLStatementParserISOLATION, MySQLStatementParserISSUER, MySQLStatementParserJSON, MySQLStatementParserJSON_VALUE, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserLANGUAGE, MySQLStatementParserLAST, MySQLStatementParserLAST_VALUE, MySQLStatementParserLEAVES, MySQLStatementParserLESS, MySQLStatementParserLEVEL, MySQLStatementParserLINESTRING, MySQLStatementParserLIST, MySQLStatementParserLOCAL, MySQLStatementParserLOCKED, MySQLStatementParserLOCKS, MySQLStatementParserLOGFILE, MySQLStatementParserLOGS, MySQLStatementParserMASTER, MySQLStatementParserMASTER_AUTO_POSITION, MySQLStatementParserMASTER_COMPRESSION_ALGORITHM, MySQLStatementParserMASTER_CONNECT_RETRY, MySQLStatementParserMASTER_DELAY, MySQLStatementParserMASTER_HEARTBEAT_PERIOD, MySQLStatementParserMASTER_HOST, MySQLStatementParserMASTER_LOG_FILE, MySQLStatementParserMASTER_LOG_POS, MySQLStatementParserMASTER_PASSWORD, MySQLStatementParserMASTER_PORT, MySQLStatementParserMASTER_PUBLIC_KEY_PATH, MySQLStatementParserMASTER_RETRY_COUNT, MySQLStatementParserMASTER_SERVER_ID, MySQLStatementParserMASTER_SSL, MySQLStatementParserMASTER_SSL_CA, MySQLStatementParserMASTER_SSL_CAPATH, MySQLStatementParserMASTER_SSL_CERT, MySQLStatementParserMASTER_SSL_CIPHER, MySQLStatementParserMASTER_SSL_CRL, MySQLStatementParserMASTER_SSL_CRLPATH, MySQLStatementParserMASTER_SSL_KEY, MySQLStatementParserMASTER_TLS_CIPHERSUITES, MySQLStatementParserMASTER_TLS_VERSION, MySQLStatementParserMASTER_USER, MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL, MySQLStatementParserMAX_CONNECTIONS_PER_HOUR, MySQLStatementParserMAX_QUERIES_PER_HOUR, MySQLStatementParserMAX_ROWS, MySQLStatementParserMAX_SIZE, MySQLStatementParserMAX_UPDATES_PER_HOUR, MySQLStatementParserMAX_USER_CONNECTIONS, MySQLStatementParserMEDIUM, MySQLStatementParserMEMBER, MySQLStatementParserMEMORY, MySQLStatementParserMERGE, MySQLStatementParserMESSAGE_TEXT, MySQLStatementParserMICROSECOND, MySQLStatementParserMIGRATE, MySQLStatementParserMINUTE, MySQLStatementParserMIN_ROWS, MySQLStatementParserMODE, MySQLStatementParserMODIFY, MySQLStatementParserMONTH, MySQLStatementParserMULTILINESTRING, MySQLStatementParserMULTIPOINT, MySQLStatementParserMULTIPOLYGON, MySQLStatementParserMUTEX, MySQLStatementParserMYSQL_ERRNO, MySQLStatementParserNAME, MySQLStatementParserNAMES, MySQLStatementParserNATIONAL, MySQLStatementParserNCHAR, MySQLStatementParserNDBCLUSTER, MySQLStatementParserNESTED, MySQLStatementParserNETWORK_NAMESPACE, MySQLStatementParserNEVER, MySQLStatementParserNEW, MySQLStatementParserNEXT, MySQLStatementParserNO, MySQLStatementParserNODEGROUP, MySQLStatementParserNONE, MySQLStatementParserNOWAIT, MySQLStatementParserNO_WAIT, MySQLStatementParserNULLS, MySQLStatementParserNUMBER, MySQLStatementParserNVARCHAR, MySQLStatementParserOFF, MySQLStatementParserOFFSET, MySQLStatementParserOJ, MySQLStatementParserOLD, MySQLStatementParserONE, MySQLStatementParserONLY, MySQLStatementParserOPEN, MySQLStatementParserOPTIONAL, MySQLStatementParserOPTIONS, MySQLStatementParserORDINALITY, MySQLStatementParserORGANIZATION, MySQLStatementParserOTHERS, MySQLStatementParserOWNER, MySQLStatementParserPACK_KEYS, MySQLStatementParserPAGE, MySQLStatementParserPARSER, MySQLStatementParserPARTIAL, MySQLStatementParserPARTITIONING, MySQLStatementParserPARTITIONS, MySQLStatementParserPASSWORD, MySQLStatementParserPASSWORD_LOCK_TIME, MySQLStatementParserPATH, MySQLStatementParserPERSIST, MySQLStatementParserPERSIST_ONLY, MySQLStatementParserPHASE, MySQLStatementParserPLUGIN, MySQLStatementParserPLUGINS, MySQLStatementParserPLUGIN_DIR, MySQLStatementParserPOINT, MySQLStatementParserPOLYGON, MySQLStatementParserPORT, MySQLStatementParserPRECEDES, MySQLStatementParserPRECEDING, MySQLStatementParserPREPARE, MySQLStatementParserPRESERVE, MySQLStatementParserPREV, MySQLStatementParserPRIVILEGES, MySQLStatementParserPRIVILEGE_CHECKS_USER, MySQLStatementParserPROCESS, MySQLStatementParserPROCESSLIST, MySQLStatementParserPROFILE, MySQLStatementParserPROFILES, MySQLStatementParserPROXY, MySQLStatementParserQUARTER, MySQLStatementParserQUERY, MySQLStatementParserQUICK, MySQLStatementParserRANDOM, MySQLStatementParserREAD_ONLY, MySQLStatementParserREBUILD, MySQLStatementParserRECOVER, MySQLStatementParserREDO_BUFFER_SIZE, MySQLStatementParserREDUNDANT, MySQLStatementParserREFERENCE, MySQLStatementParserRELAY, MySQLStatementParserRELAYLOG, MySQLStatementParserRELAY_LOG_FILE, MySQLStatementParserRELAY_LOG_POS, MySQLStatementParserRELAY_THREAD, MySQLStatementParserRELOAD, MySQLStatementParserREMOVE, MySQLStatementParserREORGANIZE, MySQLStatementParserREPAIR, MySQLStatementParserREPEATABLE, MySQLStatementParserREPLICATE_DO_DB, MySQLStatementParserREPLICATE_DO_TABLE, MySQLStatementParserREPLICATE_IGNORE_DB, MySQLStatementParserREPLICATE_IGNORE_TABLE, MySQLStatementParserREPLICATE_REWRITE_DB, MySQLStatementParserREPLICATE_WILD_DO_TABLE, MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE, MySQLStatementParserREPLICATION, MySQLStatementParserREQUIRE_ROW_FORMAT, MySQLStatementParserRESET, MySQLStatementParserRESOURCE, MySQLStatementParserRESPECT, MySQLStatementParserRESTART, MySQLStatementParserRESTORE, MySQLStatementParserRESUME, MySQLStatementParserRETAIN, MySQLStatementParserRETURNED_SQLSTATE, MySQLStatementParserRETURNING, MySQLStatementParserRETURNS, MySQLStatementParserREUSE, MySQLStatementParserREVERSE, MySQLStatementParserROLE, MySQLStatementParserROLLBACK, MySQLStatementParserROLLUP, MySQLStatementParserROTATE, MySQLStatementParserROUTINE, MySQLStatementParserROW_COUNT, MySQLStatementParserROW_FORMAT, MySQLStatementParserRTREE, MySQLStatementParserSAVEPOINT, MySQLStatementParserSCHEDULE, MySQLStatementParserSCHEMA_NAME, MySQLStatementParserSECOND, MySQLStatementParserSECONDARY, MySQLStatementParserSECONDARY_ENGINE, MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, MySQLStatementParserSECONDARY_LOAD, MySQLStatementParserSECONDARY_UNLOAD, MySQLStatementParserSECURITY, MySQLStatementParserSERIAL, MySQLStatementParserSERIALIZABLE, MySQLStatementParserSERVER, MySQLStatementParserSESSION, MySQLStatementParserSHARE, MySQLStatementParserSHUTDOWN, MySQLStatementParserSIGNED, MySQLStatementParserSIMPLE, MySQLStatementParserSLAVE, MySQLStatementParserSLOW, MySQLStatementParserSNAPSHOT, MySQLStatementParserSOCKET, MySQLStatementParserSONAME, MySQLStatementParserSOUNDS, MySQLStatementParserSOURCE, MySQLStatementParserSQL_AFTER_GTIDS, MySQLStatementParserSQL_AFTER_MTS_GAPS, MySQLStatementParserSQL_BEFORE_GTIDS, MySQLStatementParserSQL_BUFFER_RESULT, MySQLStatementParserSQL_NO_CACHE, MySQLStatementParserSQL_THREAD, MySQLStatementParserSRID, MySQLStatementParserSTACKED, MySQLStatementParserSTART, MySQLStatementParserSTARTS, MySQLStatementParserSTATS_AUTO_RECALC, MySQLStatementParserSTATS_PERSISTENT, MySQLStatementParserSTATS_SAMPLE_PAGES, MySQLStatementParserSTATUS, MySQLStatementParserSTOP, MySQLStatementParserSTORAGE, MySQLStatementParserSTREAM, MySQLStatementParserSTRING, MySQLStatementParserSUBCLASS_ORIGIN, MySQLStatementParserSUBJECT, MySQLStatementParserSUBPARTITION, MySQLStatementParserSUBPARTITIONS, MySQLStatementParserSUPER, MySQLStatementParserSUSPEND, MySQLStatementParserSWAPS, MySQLStatementParserSWITCHES, MySQLStatementParserTABLES, MySQLStatementParserTABLESPACE, MySQLStatementParserTABLE_CHECKSUM, MySQLStatementParserTABLE_NAME, MySQLStatementParserTEMPORARY, MySQLStatementParserTEMPTABLE, MySQLStatementParserTEXT, MySQLStatementParserTHAN, MySQLStatementParserTHREAD_PRIORITY, MySQLStatementParserTIES, MySQLStatementParserTIME, MySQLStatementParserTIMESTAMP, MySQLStatementParserTIMESTAMP_ADD, MySQLStatementParserTIMESTAMP_DIFF, MySQLStatementParserTLS, MySQLStatementParserTRANSACTION, MySQLStatementParserTRIGGERS, MySQLStatementParserTRUNCATE, MySQLStatementParserTYPE, MySQLStatementParserTYPES, MySQLStatementParserUNBOUNDED, MySQLStatementParserUNCOMMITTED, MySQLStatementParserUNDEFINED, MySQLStatementParserUNDOFILE, MySQLStatementParserUNDO_BUFFER_SIZE, MySQLStatementParserUNICODE, MySQLStatementParserUNINSTALL, MySQLStatementParserUNKNOWN, MySQLStatementParserUNTIL, MySQLStatementParserUPGRADE, MySQLStatementParserUSER, MySQLStatementParserUSER_RESOURCES, MySQLStatementParserUSE_FRM, MySQLStatementParserVALIDATION, MySQLStatementParserVALUE, MySQLStatementParserVARIABLES, MySQLStatementParserVCPU, MySQLStatementParserVIEW, MySQLStatementParserVISIBLE, MySQLStatementParserWAIT, MySQLStatementParserWARNINGS, MySQLStatementParserWEEK, MySQLStatementParserWEIGHT_STRING, MySQLStatementParserWITHOUT, MySQLStatementParserWORK, MySQLStatementParserWRAPPER, MySQLStatementParserX509, MySQLStatementParserXA, MySQLStatementParserXID, MySQLStatementParserXML, MySQLStatementParserYEAR, MySQLStatementParserIDENTIFIER_, MySQLStatementParserSINGLE_QUOTED_TEXT, MySQLStatementParserDOUBLE_QUOTED_TEXT:
			{
				p.SetState(6058)
				p.CharsetName()
			}
			p.SetState(6060)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySQLStatementParserCOLLATE {
				{
					p.SetState(6059)
					p.CollateClause()
				}

			}

		case MySQLStatementParserDEFAULT:
			{
				p.SetState(6062)
				p.Match(MySQLStatementParserDEFAULT)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}

	return localctx
}

// IOptionValueContext is an interface to support dynamic dispatch.
type IOptionValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOptionValueContext differentiates from other interfaces.
	IsOptionValueContext()
}

type OptionValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptionValueContext() *OptionValueContext {
	var p = new(OptionValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_optionValue
	return p
}

func (*OptionValueContext) IsOptionValueContext() {}

func NewOptionValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OptionValueContext {
	var p = new(OptionValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_optionValue

	return p
}

func (s *OptionValueContext) GetParser() antlr.Parser { return s.parser }

func (s *OptionValueContext) OptionType() IOptionTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptionTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOptionTypeContext)
}

func (s *OptionValueContext) InternalVariableName() IInternalVariableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInternalVariableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInternalVariableNameContext)
}

func (s *OptionValueContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *OptionValueContext) SetExprOrDefault() ISetExprOrDefaultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetExprOrDefaultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetExprOrDefaultContext)
}

func (s *OptionValueContext) OptionValueNoOptionType() IOptionValueNoOptionTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptionValueNoOptionTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOptionValueNoOptionTypeContext)
}

func (s *OptionValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OptionValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OptionValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterOptionValue(s)
	}
}

func (s *OptionValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitOptionValue(s)
	}
}

func (s *OptionValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitOptionValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) OptionValue() (localctx IOptionValueContext) {
	this := p
	_ = this

	localctx = NewOptionValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 842, MySQLStatementParserRULE_optionValue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6073)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 779, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6067)
			p.OptionType()
		}
		{
			p.SetState(6068)
			p.InternalVariableName()
		}
		{
			p.SetState(6069)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(6070)
			p.SetExprOrDefault()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6072)
			p.OptionValueNoOptionType()
		}

	}

	return localctx
}

// IShowBinaryLogsContext is an interface to support dynamic dispatch.
type IShowBinaryLogsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowBinaryLogsContext differentiates from other interfaces.
	IsShowBinaryLogsContext()
}

type ShowBinaryLogsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowBinaryLogsContext() *ShowBinaryLogsContext {
	var p = new(ShowBinaryLogsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showBinaryLogs
	return p
}

func (*ShowBinaryLogsContext) IsShowBinaryLogsContext() {}

func NewShowBinaryLogsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowBinaryLogsContext {
	var p = new(ShowBinaryLogsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showBinaryLogs

	return p
}

func (s *ShowBinaryLogsContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowBinaryLogsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowBinaryLogsContext) LOGS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOGS, 0)
}

func (s *ShowBinaryLogsContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBINARY, 0)
}

func (s *ShowBinaryLogsContext) MASTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER, 0)
}

func (s *ShowBinaryLogsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowBinaryLogsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowBinaryLogsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowBinaryLogs(s)
	}
}

func (s *ShowBinaryLogsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowBinaryLogs(s)
	}
}

func (s *ShowBinaryLogsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowBinaryLogs(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowBinaryLogs() (localctx IShowBinaryLogsContext) {
	this := p
	_ = this

	localctx = NewShowBinaryLogsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 844, MySQLStatementParserRULE_showBinaryLogs)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6075)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6076)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserBINARY || _la == MySQLStatementParserMASTER) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(6077)
		p.Match(MySQLStatementParserLOGS)
	}

	return localctx
}

// IShowBinlogEventsContext is an interface to support dynamic dispatch.
type IShowBinlogEventsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowBinlogEventsContext differentiates from other interfaces.
	IsShowBinlogEventsContext()
}

type ShowBinlogEventsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowBinlogEventsContext() *ShowBinlogEventsContext {
	var p = new(ShowBinlogEventsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showBinlogEvents
	return p
}

func (*ShowBinlogEventsContext) IsShowBinlogEventsContext() {}

func NewShowBinlogEventsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowBinlogEventsContext {
	var p = new(ShowBinlogEventsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showBinlogEvents

	return p
}

func (s *ShowBinlogEventsContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowBinlogEventsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowBinlogEventsContext) BINLOG() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBINLOG, 0)
}

func (s *ShowBinlogEventsContext) EVENTS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEVENTS, 0)
}

func (s *ShowBinlogEventsContext) IN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIN, 0)
}

func (s *ShowBinlogEventsContext) DEFINER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFINER, 0)
}

func (s *ShowBinlogEventsContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFROM, 0)
}

func (s *ShowBinlogEventsContext) AllNUMBER_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserNUMBER_)
}

func (s *ShowBinlogEventsContext) NUMBER_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, i)
}

func (s *ShowBinlogEventsContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLIMIT, 0)
}

func (s *ShowBinlogEventsContext) COMMA_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, 0)
}

func (s *ShowBinlogEventsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowBinlogEventsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowBinlogEventsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowBinlogEvents(s)
	}
}

func (s *ShowBinlogEventsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowBinlogEvents(s)
	}
}

func (s *ShowBinlogEventsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowBinlogEvents(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowBinlogEvents() (localctx IShowBinlogEventsContext) {
	this := p
	_ = this

	localctx = NewShowBinlogEventsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 846, MySQLStatementParserRULE_showBinlogEvents)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6079)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6080)
		p.Match(MySQLStatementParserBINLOG)
	}
	{
		p.SetState(6081)
		p.Match(MySQLStatementParserEVENTS)
	}
	p.SetState(6084)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIN {
		{
			p.SetState(6082)
			p.Match(MySQLStatementParserIN)
		}
		{
			p.SetState(6083)
			p.Match(MySQLStatementParserDEFINER)
		}

	}
	p.SetState(6088)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserFROM {
		{
			p.SetState(6086)
			p.Match(MySQLStatementParserFROM)
		}
		{
			p.SetState(6087)
			p.Match(MySQLStatementParserNUMBER_)
		}

	}
	p.SetState(6096)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLIMIT {
		{
			p.SetState(6090)
			p.Match(MySQLStatementParserLIMIT)
		}
		p.SetState(6093)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 782, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6091)
				p.Match(MySQLStatementParserNUMBER_)
			}
			{
				p.SetState(6092)
				p.Match(MySQLStatementParserCOMMA_)
			}

		}
		{
			p.SetState(6095)
			p.Match(MySQLStatementParserNUMBER_)
		}

	}

	return localctx
}

// IShowCharacterSetContext is an interface to support dynamic dispatch.
type IShowCharacterSetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowCharacterSetContext differentiates from other interfaces.
	IsShowCharacterSetContext()
}

type ShowCharacterSetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowCharacterSetContext() *ShowCharacterSetContext {
	var p = new(ShowCharacterSetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showCharacterSet
	return p
}

func (*ShowCharacterSetContext) IsShowCharacterSetContext() {}

func NewShowCharacterSetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowCharacterSetContext {
	var p = new(ShowCharacterSetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showCharacterSet

	return p
}

func (s *ShowCharacterSetContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowCharacterSetContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowCharacterSetContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHARACTER, 0)
}

func (s *ShowCharacterSetContext) SET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSET, 0)
}

func (s *ShowCharacterSetContext) ShowFilter() IShowFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowFilterContext)
}

func (s *ShowCharacterSetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCharacterSetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowCharacterSetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowCharacterSet(s)
	}
}

func (s *ShowCharacterSetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowCharacterSet(s)
	}
}

func (s *ShowCharacterSetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowCharacterSet(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowCharacterSet() (localctx IShowCharacterSetContext) {
	this := p
	_ = this

	localctx = NewShowCharacterSetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 848, MySQLStatementParserRULE_showCharacterSet)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6098)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6099)
		p.Match(MySQLStatementParserCHARACTER)
	}
	{
		p.SetState(6100)
		p.Match(MySQLStatementParserSET)
	}
	p.SetState(6102)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLIKE || _la == MySQLStatementParserWHERE {
		{
			p.SetState(6101)
			p.ShowFilter()
		}

	}

	return localctx
}

// IShowCollationContext is an interface to support dynamic dispatch.
type IShowCollationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowCollationContext differentiates from other interfaces.
	IsShowCollationContext()
}

type ShowCollationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowCollationContext() *ShowCollationContext {
	var p = new(ShowCollationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showCollation
	return p
}

func (*ShowCollationContext) IsShowCollationContext() {}

func NewShowCollationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowCollationContext {
	var p = new(ShowCollationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showCollation

	return p
}

func (s *ShowCollationContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowCollationContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowCollationContext) COLLATION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOLLATION, 0)
}

func (s *ShowCollationContext) ShowFilter() IShowFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowFilterContext)
}

func (s *ShowCollationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCollationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowCollationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowCollation(s)
	}
}

func (s *ShowCollationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowCollation(s)
	}
}

func (s *ShowCollationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowCollation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowCollation() (localctx IShowCollationContext) {
	this := p
	_ = this

	localctx = NewShowCollationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 850, MySQLStatementParserRULE_showCollation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6104)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6105)
		p.Match(MySQLStatementParserCOLLATION)
	}
	p.SetState(6107)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLIKE || _la == MySQLStatementParserWHERE {
		{
			p.SetState(6106)
			p.ShowFilter()
		}

	}

	return localctx
}

// IShowCreateDatabaseContext is an interface to support dynamic dispatch.
type IShowCreateDatabaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowCreateDatabaseContext differentiates from other interfaces.
	IsShowCreateDatabaseContext()
}

type ShowCreateDatabaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowCreateDatabaseContext() *ShowCreateDatabaseContext {
	var p = new(ShowCreateDatabaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showCreateDatabase
	return p
}

func (*ShowCreateDatabaseContext) IsShowCreateDatabaseContext() {}

func NewShowCreateDatabaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowCreateDatabaseContext {
	var p = new(ShowCreateDatabaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showCreateDatabase

	return p
}

func (s *ShowCreateDatabaseContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowCreateDatabaseContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowCreateDatabaseContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *ShowCreateDatabaseContext) SchemaName() ISchemaNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemaNameContext)
}

func (s *ShowCreateDatabaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDATABASE, 0)
}

func (s *ShowCreateDatabaseContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSCHEMA, 0)
}

func (s *ShowCreateDatabaseContext) NotExistClause() INotExistClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INotExistClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INotExistClauseContext)
}

func (s *ShowCreateDatabaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCreateDatabaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowCreateDatabaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowCreateDatabase(s)
	}
}

func (s *ShowCreateDatabaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowCreateDatabase(s)
	}
}

func (s *ShowCreateDatabaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowCreateDatabase(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowCreateDatabase() (localctx IShowCreateDatabaseContext) {
	this := p
	_ = this

	localctx = NewShowCreateDatabaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 852, MySQLStatementParserRULE_showCreateDatabase)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6109)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6110)
		p.Match(MySQLStatementParserCREATE)
	}
	{
		p.SetState(6111)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserDATABASE || _la == MySQLStatementParserSCHEMA) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(6113)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIF {
		{
			p.SetState(6112)
			p.NotExistClause()
		}

	}
	{
		p.SetState(6115)
		p.SchemaName()
	}

	return localctx
}

// IShowCreateEventContext is an interface to support dynamic dispatch.
type IShowCreateEventContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowCreateEventContext differentiates from other interfaces.
	IsShowCreateEventContext()
}

type ShowCreateEventContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowCreateEventContext() *ShowCreateEventContext {
	var p = new(ShowCreateEventContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showCreateEvent
	return p
}

func (*ShowCreateEventContext) IsShowCreateEventContext() {}

func NewShowCreateEventContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowCreateEventContext {
	var p = new(ShowCreateEventContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showCreateEvent

	return p
}

func (s *ShowCreateEventContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowCreateEventContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowCreateEventContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *ShowCreateEventContext) EVENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEVENT, 0)
}

func (s *ShowCreateEventContext) EventName() IEventNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEventNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEventNameContext)
}

func (s *ShowCreateEventContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCreateEventContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowCreateEventContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowCreateEvent(s)
	}
}

func (s *ShowCreateEventContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowCreateEvent(s)
	}
}

func (s *ShowCreateEventContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowCreateEvent(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowCreateEvent() (localctx IShowCreateEventContext) {
	this := p
	_ = this

	localctx = NewShowCreateEventContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 854, MySQLStatementParserRULE_showCreateEvent)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6117)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6118)
		p.Match(MySQLStatementParserCREATE)
	}
	{
		p.SetState(6119)
		p.Match(MySQLStatementParserEVENT)
	}
	{
		p.SetState(6120)
		p.EventName()
	}

	return localctx
}

// IShowCreateFunctionContext is an interface to support dynamic dispatch.
type IShowCreateFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowCreateFunctionContext differentiates from other interfaces.
	IsShowCreateFunctionContext()
}

type ShowCreateFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowCreateFunctionContext() *ShowCreateFunctionContext {
	var p = new(ShowCreateFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showCreateFunction
	return p
}

func (*ShowCreateFunctionContext) IsShowCreateFunctionContext() {}

func NewShowCreateFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowCreateFunctionContext {
	var p = new(ShowCreateFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showCreateFunction

	return p
}

func (s *ShowCreateFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowCreateFunctionContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowCreateFunctionContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *ShowCreateFunctionContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFUNCTION, 0)
}

func (s *ShowCreateFunctionContext) FunctionName() IFunctionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionNameContext)
}

func (s *ShowCreateFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCreateFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowCreateFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowCreateFunction(s)
	}
}

func (s *ShowCreateFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowCreateFunction(s)
	}
}

func (s *ShowCreateFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowCreateFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowCreateFunction() (localctx IShowCreateFunctionContext) {
	this := p
	_ = this

	localctx = NewShowCreateFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 856, MySQLStatementParserRULE_showCreateFunction)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6122)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6123)
		p.Match(MySQLStatementParserCREATE)
	}
	{
		p.SetState(6124)
		p.Match(MySQLStatementParserFUNCTION)
	}
	{
		p.SetState(6125)
		p.FunctionName()
	}

	return localctx
}

// IShowCreateProcedureContext is an interface to support dynamic dispatch.
type IShowCreateProcedureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowCreateProcedureContext differentiates from other interfaces.
	IsShowCreateProcedureContext()
}

type ShowCreateProcedureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowCreateProcedureContext() *ShowCreateProcedureContext {
	var p = new(ShowCreateProcedureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showCreateProcedure
	return p
}

func (*ShowCreateProcedureContext) IsShowCreateProcedureContext() {}

func NewShowCreateProcedureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowCreateProcedureContext {
	var p = new(ShowCreateProcedureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showCreateProcedure

	return p
}

func (s *ShowCreateProcedureContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowCreateProcedureContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowCreateProcedureContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *ShowCreateProcedureContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPROCEDURE, 0)
}

func (s *ShowCreateProcedureContext) FunctionName() IFunctionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionNameContext)
}

func (s *ShowCreateProcedureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCreateProcedureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowCreateProcedureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowCreateProcedure(s)
	}
}

func (s *ShowCreateProcedureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowCreateProcedure(s)
	}
}

func (s *ShowCreateProcedureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowCreateProcedure(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowCreateProcedure() (localctx IShowCreateProcedureContext) {
	this := p
	_ = this

	localctx = NewShowCreateProcedureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 858, MySQLStatementParserRULE_showCreateProcedure)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6127)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6128)
		p.Match(MySQLStatementParserCREATE)
	}
	{
		p.SetState(6129)
		p.Match(MySQLStatementParserPROCEDURE)
	}
	{
		p.SetState(6130)
		p.FunctionName()
	}

	return localctx
}

// IShowCreateTriggerContext is an interface to support dynamic dispatch.
type IShowCreateTriggerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowCreateTriggerContext differentiates from other interfaces.
	IsShowCreateTriggerContext()
}

type ShowCreateTriggerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowCreateTriggerContext() *ShowCreateTriggerContext {
	var p = new(ShowCreateTriggerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showCreateTrigger
	return p
}

func (*ShowCreateTriggerContext) IsShowCreateTriggerContext() {}

func NewShowCreateTriggerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowCreateTriggerContext {
	var p = new(ShowCreateTriggerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showCreateTrigger

	return p
}

func (s *ShowCreateTriggerContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowCreateTriggerContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowCreateTriggerContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *ShowCreateTriggerContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTRIGGER, 0)
}

func (s *ShowCreateTriggerContext) TriggerName() ITriggerNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITriggerNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITriggerNameContext)
}

func (s *ShowCreateTriggerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCreateTriggerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowCreateTriggerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowCreateTrigger(s)
	}
}

func (s *ShowCreateTriggerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowCreateTrigger(s)
	}
}

func (s *ShowCreateTriggerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowCreateTrigger(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowCreateTrigger() (localctx IShowCreateTriggerContext) {
	this := p
	_ = this

	localctx = NewShowCreateTriggerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 860, MySQLStatementParserRULE_showCreateTrigger)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6132)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6133)
		p.Match(MySQLStatementParserCREATE)
	}
	{
		p.SetState(6134)
		p.Match(MySQLStatementParserTRIGGER)
	}
	{
		p.SetState(6135)
		p.TriggerName()
	}

	return localctx
}

// IShowCreateUserContext is an interface to support dynamic dispatch.
type IShowCreateUserContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowCreateUserContext differentiates from other interfaces.
	IsShowCreateUserContext()
}

type ShowCreateUserContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowCreateUserContext() *ShowCreateUserContext {
	var p = new(ShowCreateUserContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showCreateUser
	return p
}

func (*ShowCreateUserContext) IsShowCreateUserContext() {}

func NewShowCreateUserContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowCreateUserContext {
	var p = new(ShowCreateUserContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showCreateUser

	return p
}

func (s *ShowCreateUserContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowCreateUserContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowCreateUserContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *ShowCreateUserContext) USER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUSER, 0)
}

func (s *ShowCreateUserContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *ShowCreateUserContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCreateUserContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowCreateUserContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowCreateUser(s)
	}
}

func (s *ShowCreateUserContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowCreateUser(s)
	}
}

func (s *ShowCreateUserContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowCreateUser(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowCreateUser() (localctx IShowCreateUserContext) {
	this := p
	_ = this

	localctx = NewShowCreateUserContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 862, MySQLStatementParserRULE_showCreateUser)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6137)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6138)
		p.Match(MySQLStatementParserCREATE)
	}
	{
		p.SetState(6139)
		p.Match(MySQLStatementParserUSER)
	}
	{
		p.SetState(6140)
		p.UserName()
	}

	return localctx
}

// IShowCreateViewContext is an interface to support dynamic dispatch.
type IShowCreateViewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowCreateViewContext differentiates from other interfaces.
	IsShowCreateViewContext()
}

type ShowCreateViewContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowCreateViewContext() *ShowCreateViewContext {
	var p = new(ShowCreateViewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showCreateView
	return p
}

func (*ShowCreateViewContext) IsShowCreateViewContext() {}

func NewShowCreateViewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowCreateViewContext {
	var p = new(ShowCreateViewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showCreateView

	return p
}

func (s *ShowCreateViewContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowCreateViewContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowCreateViewContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *ShowCreateViewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVIEW, 0)
}

func (s *ShowCreateViewContext) ViewName() IViewNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IViewNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IViewNameContext)
}

func (s *ShowCreateViewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCreateViewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowCreateViewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowCreateView(s)
	}
}

func (s *ShowCreateViewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowCreateView(s)
	}
}

func (s *ShowCreateViewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowCreateView(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowCreateView() (localctx IShowCreateViewContext) {
	this := p
	_ = this

	localctx = NewShowCreateViewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 864, MySQLStatementParserRULE_showCreateView)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6142)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6143)
		p.Match(MySQLStatementParserCREATE)
	}
	{
		p.SetState(6144)
		p.Match(MySQLStatementParserVIEW)
	}
	{
		p.SetState(6145)
		p.ViewName()
	}

	return localctx
}

// IShowEngineContext is an interface to support dynamic dispatch.
type IShowEngineContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowEngineContext differentiates from other interfaces.
	IsShowEngineContext()
}

type ShowEngineContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowEngineContext() *ShowEngineContext {
	var p = new(ShowEngineContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showEngine
	return p
}

func (*ShowEngineContext) IsShowEngineContext() {}

func NewShowEngineContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowEngineContext {
	var p = new(ShowEngineContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showEngine

	return p
}

func (s *ShowEngineContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowEngineContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowEngineContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENGINE, 0)
}

func (s *ShowEngineContext) EngineRef() IEngineRefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngineRefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngineRefContext)
}

func (s *ShowEngineContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTATUS, 0)
}

func (s *ShowEngineContext) MUTEX() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMUTEX, 0)
}

func (s *ShowEngineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowEngineContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowEngineContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowEngine(s)
	}
}

func (s *ShowEngineContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowEngine(s)
	}
}

func (s *ShowEngineContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowEngine(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowEngine() (localctx IShowEngineContext) {
	this := p
	_ = this

	localctx = NewShowEngineContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 866, MySQLStatementParserRULE_showEngine)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6147)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6148)
		p.Match(MySQLStatementParserENGINE)
	}
	{
		p.SetState(6149)
		p.EngineRef()
	}
	{
		p.SetState(6150)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserMUTEX || _la == MySQLStatementParserSTATUS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IShowEnginesContext is an interface to support dynamic dispatch.
type IShowEnginesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowEnginesContext differentiates from other interfaces.
	IsShowEnginesContext()
}

type ShowEnginesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowEnginesContext() *ShowEnginesContext {
	var p = new(ShowEnginesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showEngines
	return p
}

func (*ShowEnginesContext) IsShowEnginesContext() {}

func NewShowEnginesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowEnginesContext {
	var p = new(ShowEnginesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showEngines

	return p
}

func (s *ShowEnginesContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowEnginesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowEnginesContext) ENGINES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENGINES, 0)
}

func (s *ShowEnginesContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTORAGE, 0)
}

func (s *ShowEnginesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowEnginesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowEnginesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowEngines(s)
	}
}

func (s *ShowEnginesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowEngines(s)
	}
}

func (s *ShowEnginesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowEngines(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowEngines() (localctx IShowEnginesContext) {
	this := p
	_ = this

	localctx = NewShowEnginesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 868, MySQLStatementParserRULE_showEngines)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6152)
		p.Match(MySQLStatementParserSHOW)
	}
	p.SetState(6154)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserSTORAGE {
		{
			p.SetState(6153)
			p.Match(MySQLStatementParserSTORAGE)
		}

	}
	{
		p.SetState(6156)
		p.Match(MySQLStatementParserENGINES)
	}

	return localctx
}

// IShowCharsetContext is an interface to support dynamic dispatch.
type IShowCharsetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowCharsetContext differentiates from other interfaces.
	IsShowCharsetContext()
}

type ShowCharsetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowCharsetContext() *ShowCharsetContext {
	var p = new(ShowCharsetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showCharset
	return p
}

func (*ShowCharsetContext) IsShowCharsetContext() {}

func NewShowCharsetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowCharsetContext {
	var p = new(ShowCharsetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showCharset

	return p
}

func (s *ShowCharsetContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowCharsetContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowCharsetContext) CHARSET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHARSET, 0)
}

func (s *ShowCharsetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCharsetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowCharsetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowCharset(s)
	}
}

func (s *ShowCharsetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowCharset(s)
	}
}

func (s *ShowCharsetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowCharset(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowCharset() (localctx IShowCharsetContext) {
	this := p
	_ = this

	localctx = NewShowCharsetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 870, MySQLStatementParserRULE_showCharset)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6158)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6159)
		p.Match(MySQLStatementParserCHARSET)
	}

	return localctx
}

// IShowErrorsContext is an interface to support dynamic dispatch.
type IShowErrorsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowErrorsContext differentiates from other interfaces.
	IsShowErrorsContext()
}

type ShowErrorsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowErrorsContext() *ShowErrorsContext {
	var p = new(ShowErrorsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showErrors
	return p
}

func (*ShowErrorsContext) IsShowErrorsContext() {}

func NewShowErrorsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowErrorsContext {
	var p = new(ShowErrorsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showErrors

	return p
}

func (s *ShowErrorsContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowErrorsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowErrorsContext) ERRORS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserERRORS, 0)
}

func (s *ShowErrorsContext) COUNT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOUNT, 0)
}

func (s *ShowErrorsContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *ShowErrorsContext) ASTERISK_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserASTERISK_, 0)
}

func (s *ShowErrorsContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *ShowErrorsContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLIMIT, 0)
}

func (s *ShowErrorsContext) AllNUMBER_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserNUMBER_)
}

func (s *ShowErrorsContext) NUMBER_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, i)
}

func (s *ShowErrorsContext) COMMA_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, 0)
}

func (s *ShowErrorsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowErrorsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowErrorsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowErrors(s)
	}
}

func (s *ShowErrorsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowErrors(s)
	}
}

func (s *ShowErrorsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowErrors(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowErrors() (localctx IShowErrorsContext) {
	this := p
	_ = this

	localctx = NewShowErrorsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 872, MySQLStatementParserRULE_showErrors)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6161)
		p.Match(MySQLStatementParserSHOW)
	}
	p.SetState(6166)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserCOUNT {
		{
			p.SetState(6162)
			p.Match(MySQLStatementParserCOUNT)
		}
		{
			p.SetState(6163)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(6164)
			p.Match(MySQLStatementParserASTERISK_)
		}
		{
			p.SetState(6165)
			p.Match(MySQLStatementParserRP_)
		}

	}
	{
		p.SetState(6168)
		p.Match(MySQLStatementParserERRORS)
	}
	p.SetState(6175)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLIMIT {
		{
			p.SetState(6169)
			p.Match(MySQLStatementParserLIMIT)
		}
		p.SetState(6172)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 789, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6170)
				p.Match(MySQLStatementParserNUMBER_)
			}
			{
				p.SetState(6171)
				p.Match(MySQLStatementParserCOMMA_)
			}

		}
		{
			p.SetState(6174)
			p.Match(MySQLStatementParserNUMBER_)
		}

	}

	return localctx
}

// IShowEventsContext is an interface to support dynamic dispatch.
type IShowEventsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowEventsContext differentiates from other interfaces.
	IsShowEventsContext()
}

type ShowEventsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowEventsContext() *ShowEventsContext {
	var p = new(ShowEventsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showEvents
	return p
}

func (*ShowEventsContext) IsShowEventsContext() {}

func NewShowEventsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowEventsContext {
	var p = new(ShowEventsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showEvents

	return p
}

func (s *ShowEventsContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowEventsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowEventsContext) EVENTS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEVENTS, 0)
}

func (s *ShowEventsContext) FromSchema() IFromSchemaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFromSchemaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFromSchemaContext)
}

func (s *ShowEventsContext) ShowFilter() IShowFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowFilterContext)
}

func (s *ShowEventsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowEventsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowEventsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowEvents(s)
	}
}

func (s *ShowEventsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowEvents(s)
	}
}

func (s *ShowEventsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowEvents(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowEvents() (localctx IShowEventsContext) {
	this := p
	_ = this

	localctx = NewShowEventsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 874, MySQLStatementParserRULE_showEvents)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6177)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6178)
		p.Match(MySQLStatementParserEVENTS)
	}
	p.SetState(6180)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserFROM || _la == MySQLStatementParserIN {
		{
			p.SetState(6179)
			p.FromSchema()
		}

	}
	p.SetState(6183)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLIKE || _la == MySQLStatementParserWHERE {
		{
			p.SetState(6182)
			p.ShowFilter()
		}

	}

	return localctx
}

// IShowFunctionCodeContext is an interface to support dynamic dispatch.
type IShowFunctionCodeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowFunctionCodeContext differentiates from other interfaces.
	IsShowFunctionCodeContext()
}

type ShowFunctionCodeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowFunctionCodeContext() *ShowFunctionCodeContext {
	var p = new(ShowFunctionCodeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showFunctionCode
	return p
}

func (*ShowFunctionCodeContext) IsShowFunctionCodeContext() {}

func NewShowFunctionCodeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowFunctionCodeContext {
	var p = new(ShowFunctionCodeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showFunctionCode

	return p
}

func (s *ShowFunctionCodeContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowFunctionCodeContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowFunctionCodeContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFUNCTION, 0)
}

func (s *ShowFunctionCodeContext) CODE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCODE, 0)
}

func (s *ShowFunctionCodeContext) FunctionName() IFunctionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionNameContext)
}

func (s *ShowFunctionCodeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowFunctionCodeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowFunctionCodeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowFunctionCode(s)
	}
}

func (s *ShowFunctionCodeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowFunctionCode(s)
	}
}

func (s *ShowFunctionCodeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowFunctionCode(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowFunctionCode() (localctx IShowFunctionCodeContext) {
	this := p
	_ = this

	localctx = NewShowFunctionCodeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 876, MySQLStatementParserRULE_showFunctionCode)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6185)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6186)
		p.Match(MySQLStatementParserFUNCTION)
	}
	{
		p.SetState(6187)
		p.Match(MySQLStatementParserCODE)
	}
	{
		p.SetState(6188)
		p.FunctionName()
	}

	return localctx
}

// IShowFunctionStatusContext is an interface to support dynamic dispatch.
type IShowFunctionStatusContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowFunctionStatusContext differentiates from other interfaces.
	IsShowFunctionStatusContext()
}

type ShowFunctionStatusContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowFunctionStatusContext() *ShowFunctionStatusContext {
	var p = new(ShowFunctionStatusContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showFunctionStatus
	return p
}

func (*ShowFunctionStatusContext) IsShowFunctionStatusContext() {}

func NewShowFunctionStatusContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowFunctionStatusContext {
	var p = new(ShowFunctionStatusContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showFunctionStatus

	return p
}

func (s *ShowFunctionStatusContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowFunctionStatusContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowFunctionStatusContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFUNCTION, 0)
}

func (s *ShowFunctionStatusContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTATUS, 0)
}

func (s *ShowFunctionStatusContext) ShowFilter() IShowFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowFilterContext)
}

func (s *ShowFunctionStatusContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowFunctionStatusContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowFunctionStatusContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowFunctionStatus(s)
	}
}

func (s *ShowFunctionStatusContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowFunctionStatus(s)
	}
}

func (s *ShowFunctionStatusContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowFunctionStatus(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowFunctionStatus() (localctx IShowFunctionStatusContext) {
	this := p
	_ = this

	localctx = NewShowFunctionStatusContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 878, MySQLStatementParserRULE_showFunctionStatus)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6190)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6191)
		p.Match(MySQLStatementParserFUNCTION)
	}
	{
		p.SetState(6192)
		p.Match(MySQLStatementParserSTATUS)
	}
	p.SetState(6194)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLIKE || _la == MySQLStatementParserWHERE {
		{
			p.SetState(6193)
			p.ShowFilter()
		}

	}

	return localctx
}

// IShowGrantContext is an interface to support dynamic dispatch.
type IShowGrantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowGrantContext differentiates from other interfaces.
	IsShowGrantContext()
}

type ShowGrantContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowGrantContext() *ShowGrantContext {
	var p = new(ShowGrantContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showGrant
	return p
}

func (*ShowGrantContext) IsShowGrantContext() {}

func NewShowGrantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowGrantContext {
	var p = new(ShowGrantContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showGrant

	return p
}

func (s *ShowGrantContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowGrantContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowGrantContext) GRANTS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGRANTS, 0)
}

func (s *ShowGrantContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOR, 0)
}

func (s *ShowGrantContext) AllUserName() []IUserNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserNameContext)(nil)).Elem())
	var tst = make([]IUserNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserNameContext)
		}
	}

	return tst
}

func (s *ShowGrantContext) UserName(i int) IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *ShowGrantContext) USING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUSING, 0)
}

func (s *ShowGrantContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *ShowGrantContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *ShowGrantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowGrantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowGrantContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowGrant(s)
	}
}

func (s *ShowGrantContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowGrant(s)
	}
}

func (s *ShowGrantContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowGrant(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowGrant() (localctx IShowGrantContext) {
	this := p
	_ = this

	localctx = NewShowGrantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 880, MySQLStatementParserRULE_showGrant)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6196)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6197)
		p.Match(MySQLStatementParserGRANTS)
	}
	p.SetState(6210)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserFOR {
		{
			p.SetState(6198)
			p.Match(MySQLStatementParserFOR)
		}
		{
			p.SetState(6199)
			p.UserName()
		}
		p.SetState(6208)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserUSING {
			{
				p.SetState(6200)
				p.Match(MySQLStatementParserUSING)
			}
			{
				p.SetState(6201)
				p.UserName()
			}
			p.SetState(6204)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for ok := true; ok; ok = _la == MySQLStatementParserCOMMA_ {
				{
					p.SetState(6202)
					p.Match(MySQLStatementParserCOMMA_)
				}
				{
					p.SetState(6203)
					p.UserName()
				}

				p.SetState(6206)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}

	}

	return localctx
}

// IShowMasterStatusContext is an interface to support dynamic dispatch.
type IShowMasterStatusContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowMasterStatusContext differentiates from other interfaces.
	IsShowMasterStatusContext()
}

type ShowMasterStatusContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowMasterStatusContext() *ShowMasterStatusContext {
	var p = new(ShowMasterStatusContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showMasterStatus
	return p
}

func (*ShowMasterStatusContext) IsShowMasterStatusContext() {}

func NewShowMasterStatusContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowMasterStatusContext {
	var p = new(ShowMasterStatusContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showMasterStatus

	return p
}

func (s *ShowMasterStatusContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowMasterStatusContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowMasterStatusContext) MASTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER, 0)
}

func (s *ShowMasterStatusContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTATUS, 0)
}

func (s *ShowMasterStatusContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowMasterStatusContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowMasterStatusContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowMasterStatus(s)
	}
}

func (s *ShowMasterStatusContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowMasterStatus(s)
	}
}

func (s *ShowMasterStatusContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowMasterStatus(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowMasterStatus() (localctx IShowMasterStatusContext) {
	this := p
	_ = this

	localctx = NewShowMasterStatusContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 882, MySQLStatementParserRULE_showMasterStatus)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6212)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6213)
		p.Match(MySQLStatementParserMASTER)
	}
	{
		p.SetState(6214)
		p.Match(MySQLStatementParserSTATUS)
	}

	return localctx
}

// IShowOpenTablesContext is an interface to support dynamic dispatch.
type IShowOpenTablesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowOpenTablesContext differentiates from other interfaces.
	IsShowOpenTablesContext()
}

type ShowOpenTablesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowOpenTablesContext() *ShowOpenTablesContext {
	var p = new(ShowOpenTablesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showOpenTables
	return p
}

func (*ShowOpenTablesContext) IsShowOpenTablesContext() {}

func NewShowOpenTablesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowOpenTablesContext {
	var p = new(ShowOpenTablesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showOpenTables

	return p
}

func (s *ShowOpenTablesContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowOpenTablesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowOpenTablesContext) OPEN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOPEN, 0)
}

func (s *ShowOpenTablesContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLES, 0)
}

func (s *ShowOpenTablesContext) FromSchema() IFromSchemaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFromSchemaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFromSchemaContext)
}

func (s *ShowOpenTablesContext) ShowFilter() IShowFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowFilterContext)
}

func (s *ShowOpenTablesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowOpenTablesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowOpenTablesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowOpenTables(s)
	}
}

func (s *ShowOpenTablesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowOpenTables(s)
	}
}

func (s *ShowOpenTablesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowOpenTables(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowOpenTables() (localctx IShowOpenTablesContext) {
	this := p
	_ = this

	localctx = NewShowOpenTablesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 884, MySQLStatementParserRULE_showOpenTables)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6216)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6217)
		p.Match(MySQLStatementParserOPEN)
	}
	{
		p.SetState(6218)
		p.Match(MySQLStatementParserTABLES)
	}
	p.SetState(6220)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserFROM || _la == MySQLStatementParserIN {
		{
			p.SetState(6219)
			p.FromSchema()
		}

	}
	p.SetState(6223)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLIKE || _la == MySQLStatementParserWHERE {
		{
			p.SetState(6222)
			p.ShowFilter()
		}

	}

	return localctx
}

// IShowPluginsContext is an interface to support dynamic dispatch.
type IShowPluginsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowPluginsContext differentiates from other interfaces.
	IsShowPluginsContext()
}

type ShowPluginsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowPluginsContext() *ShowPluginsContext {
	var p = new(ShowPluginsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showPlugins
	return p
}

func (*ShowPluginsContext) IsShowPluginsContext() {}

func NewShowPluginsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowPluginsContext {
	var p = new(ShowPluginsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showPlugins

	return p
}

func (s *ShowPluginsContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowPluginsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowPluginsContext) PLUGINS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPLUGINS, 0)
}

func (s *ShowPluginsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowPluginsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowPluginsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowPlugins(s)
	}
}

func (s *ShowPluginsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowPlugins(s)
	}
}

func (s *ShowPluginsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowPlugins(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowPlugins() (localctx IShowPluginsContext) {
	this := p
	_ = this

	localctx = NewShowPluginsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 886, MySQLStatementParserRULE_showPlugins)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6225)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6226)
		p.Match(MySQLStatementParserPLUGINS)
	}

	return localctx
}

// IShowPrivilegesContext is an interface to support dynamic dispatch.
type IShowPrivilegesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowPrivilegesContext differentiates from other interfaces.
	IsShowPrivilegesContext()
}

type ShowPrivilegesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowPrivilegesContext() *ShowPrivilegesContext {
	var p = new(ShowPrivilegesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showPrivileges
	return p
}

func (*ShowPrivilegesContext) IsShowPrivilegesContext() {}

func NewShowPrivilegesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowPrivilegesContext {
	var p = new(ShowPrivilegesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showPrivileges

	return p
}

func (s *ShowPrivilegesContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowPrivilegesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowPrivilegesContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPRIVILEGES, 0)
}

func (s *ShowPrivilegesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowPrivilegesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowPrivilegesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowPrivileges(s)
	}
}

func (s *ShowPrivilegesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowPrivileges(s)
	}
}

func (s *ShowPrivilegesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowPrivileges(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowPrivileges() (localctx IShowPrivilegesContext) {
	this := p
	_ = this

	localctx = NewShowPrivilegesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 888, MySQLStatementParserRULE_showPrivileges)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6228)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6229)
		p.Match(MySQLStatementParserPRIVILEGES)
	}

	return localctx
}

// IShowProcedureCodeContext is an interface to support dynamic dispatch.
type IShowProcedureCodeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowProcedureCodeContext differentiates from other interfaces.
	IsShowProcedureCodeContext()
}

type ShowProcedureCodeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowProcedureCodeContext() *ShowProcedureCodeContext {
	var p = new(ShowProcedureCodeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showProcedureCode
	return p
}

func (*ShowProcedureCodeContext) IsShowProcedureCodeContext() {}

func NewShowProcedureCodeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowProcedureCodeContext {
	var p = new(ShowProcedureCodeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showProcedureCode

	return p
}

func (s *ShowProcedureCodeContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowProcedureCodeContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowProcedureCodeContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPROCEDURE, 0)
}

func (s *ShowProcedureCodeContext) CODE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCODE, 0)
}

func (s *ShowProcedureCodeContext) FunctionName() IFunctionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionNameContext)
}

func (s *ShowProcedureCodeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowProcedureCodeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowProcedureCodeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowProcedureCode(s)
	}
}

func (s *ShowProcedureCodeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowProcedureCode(s)
	}
}

func (s *ShowProcedureCodeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowProcedureCode(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowProcedureCode() (localctx IShowProcedureCodeContext) {
	this := p
	_ = this

	localctx = NewShowProcedureCodeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 890, MySQLStatementParserRULE_showProcedureCode)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6231)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6232)
		p.Match(MySQLStatementParserPROCEDURE)
	}
	{
		p.SetState(6233)
		p.Match(MySQLStatementParserCODE)
	}
	{
		p.SetState(6234)
		p.FunctionName()
	}

	return localctx
}

// IShowProcedureStatusContext is an interface to support dynamic dispatch.
type IShowProcedureStatusContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowProcedureStatusContext differentiates from other interfaces.
	IsShowProcedureStatusContext()
}

type ShowProcedureStatusContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowProcedureStatusContext() *ShowProcedureStatusContext {
	var p = new(ShowProcedureStatusContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showProcedureStatus
	return p
}

func (*ShowProcedureStatusContext) IsShowProcedureStatusContext() {}

func NewShowProcedureStatusContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowProcedureStatusContext {
	var p = new(ShowProcedureStatusContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showProcedureStatus

	return p
}

func (s *ShowProcedureStatusContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowProcedureStatusContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowProcedureStatusContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPROCEDURE, 0)
}

func (s *ShowProcedureStatusContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTATUS, 0)
}

func (s *ShowProcedureStatusContext) ShowFilter() IShowFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowFilterContext)
}

func (s *ShowProcedureStatusContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowProcedureStatusContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowProcedureStatusContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowProcedureStatus(s)
	}
}

func (s *ShowProcedureStatusContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowProcedureStatus(s)
	}
}

func (s *ShowProcedureStatusContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowProcedureStatus(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowProcedureStatus() (localctx IShowProcedureStatusContext) {
	this := p
	_ = this

	localctx = NewShowProcedureStatusContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 892, MySQLStatementParserRULE_showProcedureStatus)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6236)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6237)
		p.Match(MySQLStatementParserPROCEDURE)
	}
	{
		p.SetState(6238)
		p.Match(MySQLStatementParserSTATUS)
	}
	p.SetState(6240)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLIKE || _la == MySQLStatementParserWHERE {
		{
			p.SetState(6239)
			p.ShowFilter()
		}

	}

	return localctx
}

// IShowProcesslistContext is an interface to support dynamic dispatch.
type IShowProcesslistContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowProcesslistContext differentiates from other interfaces.
	IsShowProcesslistContext()
}

type ShowProcesslistContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowProcesslistContext() *ShowProcesslistContext {
	var p = new(ShowProcesslistContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showProcesslist
	return p
}

func (*ShowProcesslistContext) IsShowProcesslistContext() {}

func NewShowProcesslistContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowProcesslistContext {
	var p = new(ShowProcesslistContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showProcesslist

	return p
}

func (s *ShowProcesslistContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowProcesslistContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowProcesslistContext) PROCESSLIST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPROCESSLIST, 0)
}

func (s *ShowProcesslistContext) FULL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFULL, 0)
}

func (s *ShowProcesslistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowProcesslistContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowProcesslistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowProcesslist(s)
	}
}

func (s *ShowProcesslistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowProcesslist(s)
	}
}

func (s *ShowProcesslistContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowProcesslist(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowProcesslist() (localctx IShowProcesslistContext) {
	this := p
	_ = this

	localctx = NewShowProcesslistContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 894, MySQLStatementParserRULE_showProcesslist)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6242)
		p.Match(MySQLStatementParserSHOW)
	}
	p.SetState(6244)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserFULL {
		{
			p.SetState(6243)
			p.Match(MySQLStatementParserFULL)
		}

	}
	{
		p.SetState(6246)
		p.Match(MySQLStatementParserPROCESSLIST)
	}

	return localctx
}

// IShowProfileContext is an interface to support dynamic dispatch.
type IShowProfileContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowProfileContext differentiates from other interfaces.
	IsShowProfileContext()
}

type ShowProfileContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowProfileContext() *ShowProfileContext {
	var p = new(ShowProfileContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showProfile
	return p
}

func (*ShowProfileContext) IsShowProfileContext() {}

func NewShowProfileContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowProfileContext {
	var p = new(ShowProfileContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showProfile

	return p
}

func (s *ShowProfileContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowProfileContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowProfileContext) PROFILE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPROFILE, 0)
}

func (s *ShowProfileContext) AllShowProfileType() []IShowProfileTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IShowProfileTypeContext)(nil)).Elem())
	var tst = make([]IShowProfileTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IShowProfileTypeContext)
		}
	}

	return tst
}

func (s *ShowProfileContext) ShowProfileType(i int) IShowProfileTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowProfileTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IShowProfileTypeContext)
}

func (s *ShowProfileContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOR, 0)
}

func (s *ShowProfileContext) QUERY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserQUERY, 0)
}

func (s *ShowProfileContext) AllNUMBER_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserNUMBER_)
}

func (s *ShowProfileContext) NUMBER_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, i)
}

func (s *ShowProfileContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLIMIT, 0)
}

func (s *ShowProfileContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *ShowProfileContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *ShowProfileContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOFFSET, 0)
}

func (s *ShowProfileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowProfileContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowProfileContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowProfile(s)
	}
}

func (s *ShowProfileContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowProfile(s)
	}
}

func (s *ShowProfileContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowProfile(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowProfile() (localctx IShowProfileContext) {
	this := p
	_ = this

	localctx = NewShowProfileContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 896, MySQLStatementParserRULE_showProfile)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6248)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6249)
		p.Match(MySQLStatementParserPROFILE)
	}
	p.SetState(6258)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserALL || _la == MySQLStatementParserBLOCK || _la == MySQLStatementParserCONTEXT || _la == MySQLStatementParserCPU || _la == MySQLStatementParserIPC || _la == MySQLStatementParserMEMORY || _la == MySQLStatementParserPAGE || _la == MySQLStatementParserSOURCE || _la == MySQLStatementParserSWAPS {
		{
			p.SetState(6250)
			p.ShowProfileType()
		}
		p.SetState(6255)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(6251)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(6252)
				p.ShowProfileType()
			}

			p.SetState(6257)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(6263)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserFOR {
		{
			p.SetState(6260)
			p.Match(MySQLStatementParserFOR)
		}
		{
			p.SetState(6261)
			p.Match(MySQLStatementParserQUERY)
		}
		{
			p.SetState(6262)
			p.Match(MySQLStatementParserNUMBER_)
		}

	}
	p.SetState(6271)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLIMIT {
		{
			p.SetState(6265)
			p.Match(MySQLStatementParserLIMIT)
		}
		{
			p.SetState(6266)
			p.Match(MySQLStatementParserNUMBER_)
		}
		p.SetState(6269)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserOFFSET {
			{
				p.SetState(6267)
				p.Match(MySQLStatementParserOFFSET)
			}
			{
				p.SetState(6268)
				p.Match(MySQLStatementParserNUMBER_)
			}

		}

	}

	return localctx
}

// IShowProfilesContext is an interface to support dynamic dispatch.
type IShowProfilesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowProfilesContext differentiates from other interfaces.
	IsShowProfilesContext()
}

type ShowProfilesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowProfilesContext() *ShowProfilesContext {
	var p = new(ShowProfilesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showProfiles
	return p
}

func (*ShowProfilesContext) IsShowProfilesContext() {}

func NewShowProfilesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowProfilesContext {
	var p = new(ShowProfilesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showProfiles

	return p
}

func (s *ShowProfilesContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowProfilesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowProfilesContext) PROFILES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPROFILES, 0)
}

func (s *ShowProfilesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowProfilesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowProfilesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowProfiles(s)
	}
}

func (s *ShowProfilesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowProfiles(s)
	}
}

func (s *ShowProfilesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowProfiles(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowProfiles() (localctx IShowProfilesContext) {
	this := p
	_ = this

	localctx = NewShowProfilesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 898, MySQLStatementParserRULE_showProfiles)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6273)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6274)
		p.Match(MySQLStatementParserPROFILES)
	}

	return localctx
}

// IShowRelaylogEventContext is an interface to support dynamic dispatch.
type IShowRelaylogEventContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowRelaylogEventContext differentiates from other interfaces.
	IsShowRelaylogEventContext()
}

type ShowRelaylogEventContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowRelaylogEventContext() *ShowRelaylogEventContext {
	var p = new(ShowRelaylogEventContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showRelaylogEvent
	return p
}

func (*ShowRelaylogEventContext) IsShowRelaylogEventContext() {}

func NewShowRelaylogEventContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowRelaylogEventContext {
	var p = new(ShowRelaylogEventContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showRelaylogEvent

	return p
}

func (s *ShowRelaylogEventContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowRelaylogEventContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowRelaylogEventContext) RELAYLOG() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRELAYLOG, 0)
}

func (s *ShowRelaylogEventContext) EVENTS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEVENTS, 0)
}

func (s *ShowRelaylogEventContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOR, 0)
}

func (s *ShowRelaylogEventContext) CHANNEL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHANNEL, 0)
}

func (s *ShowRelaylogEventContext) ChannelName() IChannelNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChannelNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChannelNameContext)
}

func (s *ShowRelaylogEventContext) IN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIN, 0)
}

func (s *ShowRelaylogEventContext) LogName() ILogNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogNameContext)
}

func (s *ShowRelaylogEventContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFROM, 0)
}

func (s *ShowRelaylogEventContext) AllNUMBER_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserNUMBER_)
}

func (s *ShowRelaylogEventContext) NUMBER_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, i)
}

func (s *ShowRelaylogEventContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLIMIT, 0)
}

func (s *ShowRelaylogEventContext) COMMA_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, 0)
}

func (s *ShowRelaylogEventContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowRelaylogEventContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowRelaylogEventContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowRelaylogEvent(s)
	}
}

func (s *ShowRelaylogEventContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowRelaylogEvent(s)
	}
}

func (s *ShowRelaylogEventContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowRelaylogEvent(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowRelaylogEvent() (localctx IShowRelaylogEventContext) {
	this := p
	_ = this

	localctx = NewShowRelaylogEventContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 900, MySQLStatementParserRULE_showRelaylogEvent)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6276)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6277)
		p.Match(MySQLStatementParserRELAYLOG)
	}
	{
		p.SetState(6278)
		p.Match(MySQLStatementParserEVENTS)
	}
	p.SetState(6281)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIN {
		{
			p.SetState(6279)
			p.Match(MySQLStatementParserIN)
		}
		{
			p.SetState(6280)
			p.LogName()
		}

	}
	p.SetState(6285)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserFROM {
		{
			p.SetState(6283)
			p.Match(MySQLStatementParserFROM)
		}
		{
			p.SetState(6284)
			p.Match(MySQLStatementParserNUMBER_)
		}

	}
	p.SetState(6293)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLIMIT {
		{
			p.SetState(6287)
			p.Match(MySQLStatementParserLIMIT)
		}
		p.SetState(6290)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 808, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6288)
				p.Match(MySQLStatementParserNUMBER_)
			}
			{
				p.SetState(6289)
				p.Match(MySQLStatementParserCOMMA_)
			}

		}
		{
			p.SetState(6292)
			p.Match(MySQLStatementParserNUMBER_)
		}

	}
	{
		p.SetState(6295)
		p.Match(MySQLStatementParserFOR)
	}
	{
		p.SetState(6296)
		p.Match(MySQLStatementParserCHANNEL)
	}
	{
		p.SetState(6297)
		p.ChannelName()
	}

	return localctx
}

// IShowSlavehostContext is an interface to support dynamic dispatch.
type IShowSlavehostContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowSlavehostContext differentiates from other interfaces.
	IsShowSlavehostContext()
}

type ShowSlavehostContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowSlavehostContext() *ShowSlavehostContext {
	var p = new(ShowSlavehostContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showSlavehost
	return p
}

func (*ShowSlavehostContext) IsShowSlavehostContext() {}

func NewShowSlavehostContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowSlavehostContext {
	var p = new(ShowSlavehostContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showSlavehost

	return p
}

func (s *ShowSlavehostContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowSlavehostContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowSlavehostContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSLAVE, 0)
}

func (s *ShowSlavehostContext) HOST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHOST, 0)
}

func (s *ShowSlavehostContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowSlavehostContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowSlavehostContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowSlavehost(s)
	}
}

func (s *ShowSlavehostContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowSlavehost(s)
	}
}

func (s *ShowSlavehostContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowSlavehost(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowSlavehost() (localctx IShowSlavehostContext) {
	this := p
	_ = this

	localctx = NewShowSlavehostContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 902, MySQLStatementParserRULE_showSlavehost)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6299)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6300)
		p.Match(MySQLStatementParserSLAVE)
	}
	{
		p.SetState(6301)
		p.Match(MySQLStatementParserHOST)
	}

	return localctx
}

// IShowSlaveStatusContext is an interface to support dynamic dispatch.
type IShowSlaveStatusContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowSlaveStatusContext differentiates from other interfaces.
	IsShowSlaveStatusContext()
}

type ShowSlaveStatusContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowSlaveStatusContext() *ShowSlaveStatusContext {
	var p = new(ShowSlaveStatusContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showSlaveStatus
	return p
}

func (*ShowSlaveStatusContext) IsShowSlaveStatusContext() {}

func NewShowSlaveStatusContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowSlaveStatusContext {
	var p = new(ShowSlaveStatusContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showSlaveStatus

	return p
}

func (s *ShowSlaveStatusContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowSlaveStatusContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowSlaveStatusContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSLAVE, 0)
}

func (s *ShowSlaveStatusContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTATUS, 0)
}

func (s *ShowSlaveStatusContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOR, 0)
}

func (s *ShowSlaveStatusContext) CHANNEL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHANNEL, 0)
}

func (s *ShowSlaveStatusContext) ChannelName() IChannelNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChannelNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChannelNameContext)
}

func (s *ShowSlaveStatusContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowSlaveStatusContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowSlaveStatusContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowSlaveStatus(s)
	}
}

func (s *ShowSlaveStatusContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowSlaveStatus(s)
	}
}

func (s *ShowSlaveStatusContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowSlaveStatus(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowSlaveStatus() (localctx IShowSlaveStatusContext) {
	this := p
	_ = this

	localctx = NewShowSlaveStatusContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 904, MySQLStatementParserRULE_showSlaveStatus)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6303)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6304)
		p.Match(MySQLStatementParserSLAVE)
	}
	{
		p.SetState(6305)
		p.Match(MySQLStatementParserSTATUS)
	}
	p.SetState(6309)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserFOR {
		{
			p.SetState(6306)
			p.Match(MySQLStatementParserFOR)
		}
		{
			p.SetState(6307)
			p.Match(MySQLStatementParserCHANNEL)
		}
		{
			p.SetState(6308)
			p.ChannelName()
		}

	}

	return localctx
}

// IShowStatusContext is an interface to support dynamic dispatch.
type IShowStatusContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowStatusContext differentiates from other interfaces.
	IsShowStatusContext()
}

type ShowStatusContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowStatusContext() *ShowStatusContext {
	var p = new(ShowStatusContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showStatus
	return p
}

func (*ShowStatusContext) IsShowStatusContext() {}

func NewShowStatusContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowStatusContext {
	var p = new(ShowStatusContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showStatus

	return p
}

func (s *ShowStatusContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowStatusContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowStatusContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTATUS, 0)
}

func (s *ShowStatusContext) ShowFilter() IShowFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowFilterContext)
}

func (s *ShowStatusContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGLOBAL, 0)
}

func (s *ShowStatusContext) SESSION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSESSION, 0)
}

func (s *ShowStatusContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowStatusContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowStatusContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowStatus(s)
	}
}

func (s *ShowStatusContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowStatus(s)
	}
}

func (s *ShowStatusContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowStatus(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowStatus() (localctx IShowStatusContext) {
	this := p
	_ = this

	localctx = NewShowStatusContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 906, MySQLStatementParserRULE_showStatus)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6311)
		p.Match(MySQLStatementParserSHOW)
	}
	p.SetState(6313)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserGLOBAL || _la == MySQLStatementParserSESSION {
		{
			p.SetState(6312)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserGLOBAL || _la == MySQLStatementParserSESSION) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(6315)
		p.Match(MySQLStatementParserSTATUS)
	}
	p.SetState(6317)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLIKE || _la == MySQLStatementParserWHERE {
		{
			p.SetState(6316)
			p.ShowFilter()
		}

	}

	return localctx
}

// IShowTriggersContext is an interface to support dynamic dispatch.
type IShowTriggersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowTriggersContext differentiates from other interfaces.
	IsShowTriggersContext()
}

type ShowTriggersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowTriggersContext() *ShowTriggersContext {
	var p = new(ShowTriggersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showTriggers
	return p
}

func (*ShowTriggersContext) IsShowTriggersContext() {}

func NewShowTriggersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowTriggersContext {
	var p = new(ShowTriggersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showTriggers

	return p
}

func (s *ShowTriggersContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowTriggersContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowTriggersContext) TRIGGERS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTRIGGERS, 0)
}

func (s *ShowTriggersContext) FromSchema() IFromSchemaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFromSchemaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFromSchemaContext)
}

func (s *ShowTriggersContext) ShowFilter() IShowFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowFilterContext)
}

func (s *ShowTriggersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowTriggersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowTriggersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowTriggers(s)
	}
}

func (s *ShowTriggersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowTriggers(s)
	}
}

func (s *ShowTriggersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowTriggers(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowTriggers() (localctx IShowTriggersContext) {
	this := p
	_ = this

	localctx = NewShowTriggersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 908, MySQLStatementParserRULE_showTriggers)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6319)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6320)
		p.Match(MySQLStatementParserTRIGGERS)
	}
	p.SetState(6322)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserFROM || _la == MySQLStatementParserIN {
		{
			p.SetState(6321)
			p.FromSchema()
		}

	}
	p.SetState(6325)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLIKE || _la == MySQLStatementParserWHERE {
		{
			p.SetState(6324)
			p.ShowFilter()
		}

	}

	return localctx
}

// IShowVariablesContext is an interface to support dynamic dispatch.
type IShowVariablesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowVariablesContext differentiates from other interfaces.
	IsShowVariablesContext()
}

type ShowVariablesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowVariablesContext() *ShowVariablesContext {
	var p = new(ShowVariablesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showVariables
	return p
}

func (*ShowVariablesContext) IsShowVariablesContext() {}

func NewShowVariablesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowVariablesContext {
	var p = new(ShowVariablesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showVariables

	return p
}

func (s *ShowVariablesContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowVariablesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowVariablesContext) VARIABLES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVARIABLES, 0)
}

func (s *ShowVariablesContext) ShowFilter() IShowFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowFilterContext)
}

func (s *ShowVariablesContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGLOBAL, 0)
}

func (s *ShowVariablesContext) SESSION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSESSION, 0)
}

func (s *ShowVariablesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowVariablesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowVariablesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowVariables(s)
	}
}

func (s *ShowVariablesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowVariables(s)
	}
}

func (s *ShowVariablesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowVariables(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowVariables() (localctx IShowVariablesContext) {
	this := p
	_ = this

	localctx = NewShowVariablesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 910, MySQLStatementParserRULE_showVariables)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6327)
		p.Match(MySQLStatementParserSHOW)
	}
	p.SetState(6329)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserGLOBAL || _la == MySQLStatementParserSESSION {
		{
			p.SetState(6328)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserGLOBAL || _la == MySQLStatementParserSESSION) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(6331)
		p.Match(MySQLStatementParserVARIABLES)
	}
	p.SetState(6333)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLIKE || _la == MySQLStatementParserWHERE {
		{
			p.SetState(6332)
			p.ShowFilter()
		}

	}

	return localctx
}

// IShowWarningsContext is an interface to support dynamic dispatch.
type IShowWarningsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowWarningsContext differentiates from other interfaces.
	IsShowWarningsContext()
}

type ShowWarningsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowWarningsContext() *ShowWarningsContext {
	var p = new(ShowWarningsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showWarnings
	return p
}

func (*ShowWarningsContext) IsShowWarningsContext() {}

func NewShowWarningsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowWarningsContext {
	var p = new(ShowWarningsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showWarnings

	return p
}

func (s *ShowWarningsContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowWarningsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowWarningsContext) WARNINGS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWARNINGS, 0)
}

func (s *ShowWarningsContext) COUNT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOUNT, 0)
}

func (s *ShowWarningsContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *ShowWarningsContext) ASTERISK_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserASTERISK_, 0)
}

func (s *ShowWarningsContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *ShowWarningsContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLIMIT, 0)
}

func (s *ShowWarningsContext) AllNUMBER_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserNUMBER_)
}

func (s *ShowWarningsContext) NUMBER_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, i)
}

func (s *ShowWarningsContext) COMMA_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, 0)
}

func (s *ShowWarningsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowWarningsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowWarningsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowWarnings(s)
	}
}

func (s *ShowWarningsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowWarnings(s)
	}
}

func (s *ShowWarningsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowWarnings(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowWarnings() (localctx IShowWarningsContext) {
	this := p
	_ = this

	localctx = NewShowWarningsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 912, MySQLStatementParserRULE_showWarnings)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6335)
		p.Match(MySQLStatementParserSHOW)
	}
	p.SetState(6340)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserCOUNT {
		{
			p.SetState(6336)
			p.Match(MySQLStatementParserCOUNT)
		}
		{
			p.SetState(6337)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(6338)
			p.Match(MySQLStatementParserASTERISK_)
		}
		{
			p.SetState(6339)
			p.Match(MySQLStatementParserRP_)
		}

	}
	{
		p.SetState(6342)
		p.Match(MySQLStatementParserWARNINGS)
	}
	p.SetState(6349)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLIMIT {
		{
			p.SetState(6343)
			p.Match(MySQLStatementParserLIMIT)
		}
		p.SetState(6346)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 818, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6344)
				p.Match(MySQLStatementParserNUMBER_)
			}
			{
				p.SetState(6345)
				p.Match(MySQLStatementParserCOMMA_)
			}

		}
		{
			p.SetState(6348)
			p.Match(MySQLStatementParserNUMBER_)
		}

	}

	return localctx
}

// IShowReplicasContext is an interface to support dynamic dispatch.
type IShowReplicasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowReplicasContext differentiates from other interfaces.
	IsShowReplicasContext()
}

type ShowReplicasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowReplicasContext() *ShowReplicasContext {
	var p = new(ShowReplicasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showReplicas
	return p
}

func (*ShowReplicasContext) IsShowReplicasContext() {}

func NewShowReplicasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowReplicasContext {
	var p = new(ShowReplicasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showReplicas

	return p
}

func (s *ShowReplicasContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowReplicasContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowReplicasContext) REPLICAS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLICAS, 0)
}

func (s *ShowReplicasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowReplicasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowReplicasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowReplicas(s)
	}
}

func (s *ShowReplicasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowReplicas(s)
	}
}

func (s *ShowReplicasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowReplicas(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowReplicas() (localctx IShowReplicasContext) {
	this := p
	_ = this

	localctx = NewShowReplicasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 914, MySQLStatementParserRULE_showReplicas)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6351)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6352)
		p.Match(MySQLStatementParserREPLICAS)
	}

	return localctx
}

// IShowReplicaStatusContext is an interface to support dynamic dispatch.
type IShowReplicaStatusContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowReplicaStatusContext differentiates from other interfaces.
	IsShowReplicaStatusContext()
}

type ShowReplicaStatusContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowReplicaStatusContext() *ShowReplicaStatusContext {
	var p = new(ShowReplicaStatusContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_showReplicaStatus
	return p
}

func (*ShowReplicaStatusContext) IsShowReplicaStatusContext() {}

func NewShowReplicaStatusContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowReplicaStatusContext {
	var p = new(ShowReplicaStatusContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_showReplicaStatus

	return p
}

func (s *ShowReplicaStatusContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowReplicaStatusContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *ShowReplicaStatusContext) REPLICA() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLICA, 0)
}

func (s *ShowReplicaStatusContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTATUS, 0)
}

func (s *ShowReplicaStatusContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOR, 0)
}

func (s *ShowReplicaStatusContext) CHANNEL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHANNEL, 0)
}

func (s *ShowReplicaStatusContext) ChannelName() IChannelNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChannelNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChannelNameContext)
}

func (s *ShowReplicaStatusContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowReplicaStatusContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowReplicaStatusContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShowReplicaStatus(s)
	}
}

func (s *ShowReplicaStatusContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShowReplicaStatus(s)
	}
}

func (s *ShowReplicaStatusContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShowReplicaStatus(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ShowReplicaStatus() (localctx IShowReplicaStatusContext) {
	this := p
	_ = this

	localctx = NewShowReplicaStatusContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 916, MySQLStatementParserRULE_showReplicaStatus)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6354)
		p.Match(MySQLStatementParserSHOW)
	}
	{
		p.SetState(6355)
		p.Match(MySQLStatementParserREPLICA)
	}
	{
		p.SetState(6356)
		p.Match(MySQLStatementParserSTATUS)
	}
	p.SetState(6360)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserFOR {
		{
			p.SetState(6357)
			p.Match(MySQLStatementParserFOR)
		}
		{
			p.SetState(6358)
			p.Match(MySQLStatementParserCHANNEL)
		}
		{
			p.SetState(6359)
			p.ChannelName()
		}

	}

	return localctx
}

// ISetCharacterContext is an interface to support dynamic dispatch.
type ISetCharacterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetCharacterContext differentiates from other interfaces.
	IsSetCharacterContext()
}

type SetCharacterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetCharacterContext() *SetCharacterContext {
	var p = new(SetCharacterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_setCharacter
	return p
}

func (*SetCharacterContext) IsSetCharacterContext() {}

func NewSetCharacterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetCharacterContext {
	var p = new(SetCharacterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_setCharacter

	return p
}

func (s *SetCharacterContext) GetParser() antlr.Parser { return s.parser }

func (s *SetCharacterContext) AllSET() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserSET)
}

func (s *SetCharacterContext) SET(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSET, i)
}

func (s *SetCharacterContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHARACTER, 0)
}

func (s *SetCharacterContext) CHARSET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHARSET, 0)
}

func (s *SetCharacterContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *SetCharacterContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFAULT, 0)
}

func (s *SetCharacterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetCharacterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetCharacterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSetCharacter(s)
	}
}

func (s *SetCharacterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSetCharacter(s)
	}
}

func (s *SetCharacterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSetCharacter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SetCharacter() (localctx ISetCharacterContext) {
	this := p
	_ = this

	localctx = NewSetCharacterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 918, MySQLStatementParserRULE_setCharacter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6362)
		p.Match(MySQLStatementParserSET)
	}
	p.SetState(6366)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserCHARACTER:
		{
			p.SetState(6363)
			p.Match(MySQLStatementParserCHARACTER)
		}
		{
			p.SetState(6364)
			p.Match(MySQLStatementParserSET)
		}

	case MySQLStatementParserCHARSET:
		{
			p.SetState(6365)
			p.Match(MySQLStatementParserCHARSET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(6370)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserMAX, MySQLStatementParserMIN, MySQLStatementParserSUM, MySQLStatementParserCOUNT, MySQLStatementParserGROUP_CONCAT, MySQLStatementParserCAST, MySQLStatementParserPOSITION, MySQLStatementParserSUBSTRING, MySQLStatementParserSUBSTR, MySQLStatementParserEXTRACT, MySQLStatementParserTRIM, MySQLStatementParserLAST_DAY, MySQLStatementParserTRADITIONAL, MySQLStatementParserTREE, MySQLStatementParserMYSQL_ADMIN, MySQLStatementParserINSTANT, MySQLStatementParserINPLACE, MySQLStatementParserCOPY, MySQLStatementParserUL_BINARY, MySQLStatementParserAUTOCOMMIT, MySQLStatementParserINNODB, MySQLStatementParserREDO_LOG, MySQLStatementParserACCOUNT, MySQLStatementParserACTION, MySQLStatementParserACTIVE, MySQLStatementParserADMIN, MySQLStatementParserAFTER, MySQLStatementParserAGAINST, MySQLStatementParserAGGREGATE, MySQLStatementParserALGORITHM, MySQLStatementParserALWAYS, MySQLStatementParserANY, MySQLStatementParserARRAY, MySQLStatementParserASCII, MySQLStatementParserAT, MySQLStatementParserATTRIBUTE, MySQLStatementParserAUTOEXTEND_SIZE, MySQLStatementParserAUTO_INCREMENT, MySQLStatementParserAVG, MySQLStatementParserAVG_ROW_LENGTH, MySQLStatementParserBACKUP, MySQLStatementParserBEGIN, MySQLStatementParserBINARY, MySQLStatementParserBINLOG, MySQLStatementParserBIT, MySQLStatementParserBLOCK, MySQLStatementParserBOOL, MySQLStatementParserBOOLEAN, MySQLStatementParserBTREE, MySQLStatementParserBUCKETS, MySQLStatementParserBYTE, MySQLStatementParserCACHE, MySQLStatementParserCASCADED, MySQLStatementParserCATALOG_NAME, MySQLStatementParserCHAIN, MySQLStatementParserCHANGED, MySQLStatementParserCHANNEL, MySQLStatementParserCHARSET, MySQLStatementParserCHECKSUM, MySQLStatementParserCIPHER, MySQLStatementParserCLASS_ORIGIN, MySQLStatementParserCLIENT, MySQLStatementParserCLONE, MySQLStatementParserCLOSE, MySQLStatementParserCOALESCE, MySQLStatementParserCODE, MySQLStatementParserCOLLATION, MySQLStatementParserCOLUMNS, MySQLStatementParserCOLUMN_FORMAT, MySQLStatementParserCOLUMN_NAME, MySQLStatementParserCOMMENT, MySQLStatementParserCOMMIT, MySQLStatementParserCOMMITTED, MySQLStatementParserCOMPACT, MySQLStatementParserCOMPLETION, MySQLStatementParserCOMPONENT, MySQLStatementParserCOMPRESSED, MySQLStatementParserCOMPRESSION, MySQLStatementParserCONCURRENT, MySQLStatementParserCONNECTION, MySQLStatementParserCONSISTENT, MySQLStatementParserCONSTRAINT_CATALOG, MySQLStatementParserCONSTRAINT_NAME, MySQLStatementParserCONSTRAINT_SCHEMA, MySQLStatementParserCONTAINS, MySQLStatementParserCONTEXT, MySQLStatementParserCPU, MySQLStatementParserCURRENT, MySQLStatementParserCURSOR_NAME, MySQLStatementParserDATA, MySQLStatementParserDATAFILE, MySQLStatementParserDATE, MySQLStatementParserDATETIME, MySQLStatementParserDAY, MySQLStatementParserDEALLOCATE, MySQLStatementParserDEFAULT_AUTH, MySQLStatementParserDEFINER, MySQLStatementParserDEFINITION, MySQLStatementParserDELAY_KEY_WRITE, MySQLStatementParserDESCRIPTION, MySQLStatementParserDIAGNOSTICS, MySQLStatementParserDIRECTORY, MySQLStatementParserDISABLE, MySQLStatementParserDISCARD, MySQLStatementParserDISK, MySQLStatementParserDO, MySQLStatementParserDUMPFILE, MySQLStatementParserDUPLICATE, MySQLStatementParserDYNAMIC, MySQLStatementParserENABLE, MySQLStatementParserENCRYPTION, MySQLStatementParserEND, MySQLStatementParserENDS, MySQLStatementParserENFORCED, MySQLStatementParserENGINE, MySQLStatementParserENGINES, MySQLStatementParserENGINE_ATTRIBUTE, MySQLStatementParserENUM, MySQLStatementParserERROR, MySQLStatementParserERRORS, MySQLStatementParserESCAPE, MySQLStatementParserEVENT, MySQLStatementParserEVENTS, MySQLStatementParserEVERY, MySQLStatementParserEXCHANGE, MySQLStatementParserEXCLUDE, MySQLStatementParserEXECUTE, MySQLStatementParserEXPANSION, MySQLStatementParserEXPIRE, MySQLStatementParserEXPORT, MySQLStatementParserEXTENDED, MySQLStatementParserEXTENT_SIZE, MySQLStatementParserFAILED_LOGIN_ATTEMPTS, MySQLStatementParserFAST, MySQLStatementParserFAULTS, MySQLStatementParserFILE, MySQLStatementParserFILE_BLOCK_SIZE, MySQLStatementParserFILTER, MySQLStatementParserFIRST, MySQLStatementParserFIXED, MySQLStatementParserFLUSH, MySQLStatementParserFOLLOWING, MySQLStatementParserFOLLOWS, MySQLStatementParserFORMAT, MySQLStatementParserFOUND, MySQLStatementParserFULL, MySQLStatementParserGENERAL, MySQLStatementParserGEOMETRY, MySQLStatementParserGEOMETRYCOLLECTION, MySQLStatementParserGET_FORMAT, MySQLStatementParserGET_MASTER_PUBLIC_KEY, MySQLStatementParserGLOBAL, MySQLStatementParserGRANTS, MySQLStatementParserGROUP_REPLICATION, MySQLStatementParserHANDLER, MySQLStatementParserHASH, MySQLStatementParserHELP, MySQLStatementParserHISTOGRAM, MySQLStatementParserHISTORY, MySQLStatementParserHOST, MySQLStatementParserHOSTS, MySQLStatementParserHOUR, MySQLStatementParserIDENTIFIED, MySQLStatementParserIGNORE_SERVER_IDS, MySQLStatementParserIMPORT, MySQLStatementParserINACTIVE, MySQLStatementParserINDEXES, MySQLStatementParserINITIAL_SIZE, MySQLStatementParserINSERT_METHOD, MySQLStatementParserINSTALL, MySQLStatementParserINSTANCE, MySQLStatementParserINVISIBLE, MySQLStatementParserINVOKER, MySQLStatementParserIO, MySQLStatementParserIPC, MySQLStatementParserISOLATION, MySQLStatementParserISSUER, MySQLStatementParserJSON, MySQLStatementParserJSON_VALUE, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserLANGUAGE, MySQLStatementParserLAST, MySQLStatementParserLAST_VALUE, MySQLStatementParserLEAVES, MySQLStatementParserLESS, MySQLStatementParserLEVEL, MySQLStatementParserLINESTRING, MySQLStatementParserLIST, MySQLStatementParserLOCAL, MySQLStatementParserLOCKED, MySQLStatementParserLOCKS, MySQLStatementParserLOGFILE, MySQLStatementParserLOGS, MySQLStatementParserMASTER, MySQLStatementParserMASTER_AUTO_POSITION, MySQLStatementParserMASTER_COMPRESSION_ALGORITHM, MySQLStatementParserMASTER_CONNECT_RETRY, MySQLStatementParserMASTER_DELAY, MySQLStatementParserMASTER_HEARTBEAT_PERIOD, MySQLStatementParserMASTER_HOST, MySQLStatementParserMASTER_LOG_FILE, MySQLStatementParserMASTER_LOG_POS, MySQLStatementParserMASTER_PASSWORD, MySQLStatementParserMASTER_PORT, MySQLStatementParserMASTER_PUBLIC_KEY_PATH, MySQLStatementParserMASTER_RETRY_COUNT, MySQLStatementParserMASTER_SERVER_ID, MySQLStatementParserMASTER_SSL, MySQLStatementParserMASTER_SSL_CA, MySQLStatementParserMASTER_SSL_CAPATH, MySQLStatementParserMASTER_SSL_CERT, MySQLStatementParserMASTER_SSL_CIPHER, MySQLStatementParserMASTER_SSL_CRL, MySQLStatementParserMASTER_SSL_CRLPATH, MySQLStatementParserMASTER_SSL_KEY, MySQLStatementParserMASTER_TLS_CIPHERSUITES, MySQLStatementParserMASTER_TLS_VERSION, MySQLStatementParserMASTER_USER, MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL, MySQLStatementParserMAX_CONNECTIONS_PER_HOUR, MySQLStatementParserMAX_QUERIES_PER_HOUR, MySQLStatementParserMAX_ROWS, MySQLStatementParserMAX_SIZE, MySQLStatementParserMAX_UPDATES_PER_HOUR, MySQLStatementParserMAX_USER_CONNECTIONS, MySQLStatementParserMEDIUM, MySQLStatementParserMEMBER, MySQLStatementParserMEMORY, MySQLStatementParserMERGE, MySQLStatementParserMESSAGE_TEXT, MySQLStatementParserMICROSECOND, MySQLStatementParserMIGRATE, MySQLStatementParserMINUTE, MySQLStatementParserMIN_ROWS, MySQLStatementParserMODE, MySQLStatementParserMODIFY, MySQLStatementParserMONTH, MySQLStatementParserMULTILINESTRING, MySQLStatementParserMULTIPOINT, MySQLStatementParserMULTIPOLYGON, MySQLStatementParserMUTEX, MySQLStatementParserMYSQL_ERRNO, MySQLStatementParserNAME, MySQLStatementParserNAMES, MySQLStatementParserNATIONAL, MySQLStatementParserNCHAR, MySQLStatementParserNDBCLUSTER, MySQLStatementParserNESTED, MySQLStatementParserNETWORK_NAMESPACE, MySQLStatementParserNEVER, MySQLStatementParserNEW, MySQLStatementParserNEXT, MySQLStatementParserNO, MySQLStatementParserNODEGROUP, MySQLStatementParserNONE, MySQLStatementParserNOWAIT, MySQLStatementParserNO_WAIT, MySQLStatementParserNULLS, MySQLStatementParserNUMBER, MySQLStatementParserNVARCHAR, MySQLStatementParserOFF, MySQLStatementParserOFFSET, MySQLStatementParserOJ, MySQLStatementParserOLD, MySQLStatementParserONE, MySQLStatementParserONLY, MySQLStatementParserOPEN, MySQLStatementParserOPTIONAL, MySQLStatementParserOPTIONS, MySQLStatementParserORDINALITY, MySQLStatementParserORGANIZATION, MySQLStatementParserOTHERS, MySQLStatementParserOWNER, MySQLStatementParserPACK_KEYS, MySQLStatementParserPAGE, MySQLStatementParserPARSER, MySQLStatementParserPARTIAL, MySQLStatementParserPARTITIONING, MySQLStatementParserPARTITIONS, MySQLStatementParserPASSWORD, MySQLStatementParserPASSWORD_LOCK_TIME, MySQLStatementParserPATH, MySQLStatementParserPERSIST, MySQLStatementParserPERSIST_ONLY, MySQLStatementParserPHASE, MySQLStatementParserPLUGIN, MySQLStatementParserPLUGINS, MySQLStatementParserPLUGIN_DIR, MySQLStatementParserPOINT, MySQLStatementParserPOLYGON, MySQLStatementParserPORT, MySQLStatementParserPRECEDES, MySQLStatementParserPRECEDING, MySQLStatementParserPREPARE, MySQLStatementParserPRESERVE, MySQLStatementParserPREV, MySQLStatementParserPRIVILEGES, MySQLStatementParserPRIVILEGE_CHECKS_USER, MySQLStatementParserPROCESS, MySQLStatementParserPROCESSLIST, MySQLStatementParserPROFILE, MySQLStatementParserPROFILES, MySQLStatementParserPROXY, MySQLStatementParserQUARTER, MySQLStatementParserQUERY, MySQLStatementParserQUICK, MySQLStatementParserRANDOM, MySQLStatementParserREAD_ONLY, MySQLStatementParserREBUILD, MySQLStatementParserRECOVER, MySQLStatementParserREDO_BUFFER_SIZE, MySQLStatementParserREDUNDANT, MySQLStatementParserREFERENCE, MySQLStatementParserRELAY, MySQLStatementParserRELAYLOG, MySQLStatementParserRELAY_LOG_FILE, MySQLStatementParserRELAY_LOG_POS, MySQLStatementParserRELAY_THREAD, MySQLStatementParserRELOAD, MySQLStatementParserREMOVE, MySQLStatementParserREORGANIZE, MySQLStatementParserREPAIR, MySQLStatementParserREPEATABLE, MySQLStatementParserREPLICATE_DO_DB, MySQLStatementParserREPLICATE_DO_TABLE, MySQLStatementParserREPLICATE_IGNORE_DB, MySQLStatementParserREPLICATE_IGNORE_TABLE, MySQLStatementParserREPLICATE_REWRITE_DB, MySQLStatementParserREPLICATE_WILD_DO_TABLE, MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE, MySQLStatementParserREPLICATION, MySQLStatementParserREQUIRE_ROW_FORMAT, MySQLStatementParserRESET, MySQLStatementParserRESOURCE, MySQLStatementParserRESPECT, MySQLStatementParserRESTART, MySQLStatementParserRESTORE, MySQLStatementParserRESUME, MySQLStatementParserRETAIN, MySQLStatementParserRETURNED_SQLSTATE, MySQLStatementParserRETURNING, MySQLStatementParserRETURNS, MySQLStatementParserREUSE, MySQLStatementParserREVERSE, MySQLStatementParserROLE, MySQLStatementParserROLLBACK, MySQLStatementParserROLLUP, MySQLStatementParserROTATE, MySQLStatementParserROUTINE, MySQLStatementParserROW_COUNT, MySQLStatementParserROW_FORMAT, MySQLStatementParserRTREE, MySQLStatementParserSAVEPOINT, MySQLStatementParserSCHEDULE, MySQLStatementParserSCHEMA_NAME, MySQLStatementParserSECOND, MySQLStatementParserSECONDARY, MySQLStatementParserSECONDARY_ENGINE, MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, MySQLStatementParserSECONDARY_LOAD, MySQLStatementParserSECONDARY_UNLOAD, MySQLStatementParserSECURITY, MySQLStatementParserSERIAL, MySQLStatementParserSERIALIZABLE, MySQLStatementParserSERVER, MySQLStatementParserSESSION, MySQLStatementParserSHARE, MySQLStatementParserSHUTDOWN, MySQLStatementParserSIGNED, MySQLStatementParserSIMPLE, MySQLStatementParserSLAVE, MySQLStatementParserSLOW, MySQLStatementParserSNAPSHOT, MySQLStatementParserSOCKET, MySQLStatementParserSONAME, MySQLStatementParserSOUNDS, MySQLStatementParserSOURCE, MySQLStatementParserSQL_AFTER_GTIDS, MySQLStatementParserSQL_AFTER_MTS_GAPS, MySQLStatementParserSQL_BEFORE_GTIDS, MySQLStatementParserSQL_BUFFER_RESULT, MySQLStatementParserSQL_NO_CACHE, MySQLStatementParserSQL_THREAD, MySQLStatementParserSRID, MySQLStatementParserSTACKED, MySQLStatementParserSTART, MySQLStatementParserSTARTS, MySQLStatementParserSTATS_AUTO_RECALC, MySQLStatementParserSTATS_PERSISTENT, MySQLStatementParserSTATS_SAMPLE_PAGES, MySQLStatementParserSTATUS, MySQLStatementParserSTOP, MySQLStatementParserSTORAGE, MySQLStatementParserSTREAM, MySQLStatementParserSTRING, MySQLStatementParserSUBCLASS_ORIGIN, MySQLStatementParserSUBJECT, MySQLStatementParserSUBPARTITION, MySQLStatementParserSUBPARTITIONS, MySQLStatementParserSUPER, MySQLStatementParserSUSPEND, MySQLStatementParserSWAPS, MySQLStatementParserSWITCHES, MySQLStatementParserTABLES, MySQLStatementParserTABLESPACE, MySQLStatementParserTABLE_CHECKSUM, MySQLStatementParserTABLE_NAME, MySQLStatementParserTEMPORARY, MySQLStatementParserTEMPTABLE, MySQLStatementParserTEXT, MySQLStatementParserTHAN, MySQLStatementParserTHREAD_PRIORITY, MySQLStatementParserTIES, MySQLStatementParserTIME, MySQLStatementParserTIMESTAMP, MySQLStatementParserTIMESTAMP_ADD, MySQLStatementParserTIMESTAMP_DIFF, MySQLStatementParserTLS, MySQLStatementParserTRANSACTION, MySQLStatementParserTRIGGERS, MySQLStatementParserTRUNCATE, MySQLStatementParserTYPE, MySQLStatementParserTYPES, MySQLStatementParserUNBOUNDED, MySQLStatementParserUNCOMMITTED, MySQLStatementParserUNDEFINED, MySQLStatementParserUNDOFILE, MySQLStatementParserUNDO_BUFFER_SIZE, MySQLStatementParserUNICODE, MySQLStatementParserUNINSTALL, MySQLStatementParserUNKNOWN, MySQLStatementParserUNTIL, MySQLStatementParserUPGRADE, MySQLStatementParserUSER, MySQLStatementParserUSER_RESOURCES, MySQLStatementParserUSE_FRM, MySQLStatementParserVALIDATION, MySQLStatementParserVALUE, MySQLStatementParserVARIABLES, MySQLStatementParserVCPU, MySQLStatementParserVIEW, MySQLStatementParserVISIBLE, MySQLStatementParserWAIT, MySQLStatementParserWARNINGS, MySQLStatementParserWEEK, MySQLStatementParserWEIGHT_STRING, MySQLStatementParserWITHOUT, MySQLStatementParserWORK, MySQLStatementParserWRAPPER, MySQLStatementParserX509, MySQLStatementParserXA, MySQLStatementParserXID, MySQLStatementParserXML, MySQLStatementParserYEAR, MySQLStatementParserIDENTIFIER_, MySQLStatementParserSINGLE_QUOTED_TEXT, MySQLStatementParserDOUBLE_QUOTED_TEXT:
		{
			p.SetState(6368)
			p.CharsetName()
		}

	case MySQLStatementParserDEFAULT:
		{
			p.SetState(6369)
			p.Match(MySQLStatementParserDEFAULT)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICloneContext is an interface to support dynamic dispatch.
type ICloneContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCloneContext differentiates from other interfaces.
	IsCloneContext()
}

type CloneContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCloneContext() *CloneContext {
	var p = new(CloneContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_clone
	return p
}

func (*CloneContext) IsCloneContext() {}

func NewCloneContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CloneContext {
	var p = new(CloneContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_clone

	return p
}

func (s *CloneContext) GetParser() antlr.Parser { return s.parser }

func (s *CloneContext) CLONE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCLONE, 0)
}

func (s *CloneContext) CloneAction() ICloneActionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICloneActionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICloneActionContext)
}

func (s *CloneContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CloneContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CloneContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterClone(s)
	}
}

func (s *CloneContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitClone(s)
	}
}

func (s *CloneContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitClone(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Clone() (localctx ICloneContext) {
	this := p
	_ = this

	localctx = NewCloneContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 920, MySQLStatementParserRULE_clone)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6372)
		p.Match(MySQLStatementParserCLONE)
	}
	{
		p.SetState(6373)
		p.CloneAction()
	}

	return localctx
}

// ICloneActionContext is an interface to support dynamic dispatch.
type ICloneActionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCloneActionContext differentiates from other interfaces.
	IsCloneActionContext()
}

type CloneActionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCloneActionContext() *CloneActionContext {
	var p = new(CloneActionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_cloneAction
	return p
}

func (*CloneActionContext) IsCloneActionContext() {}

func NewCloneActionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CloneActionContext {
	var p = new(CloneActionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_cloneAction

	return p
}

func (s *CloneActionContext) GetParser() antlr.Parser { return s.parser }

func (s *CloneActionContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCAL, 0)
}

func (s *CloneActionContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDATA, 0)
}

func (s *CloneActionContext) DIRECTORY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDIRECTORY, 0)
}

func (s *CloneActionContext) CloneDir() ICloneDirContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICloneDirContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICloneDirContext)
}

func (s *CloneActionContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *CloneActionContext) INSTANCE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINSTANCE, 0)
}

func (s *CloneActionContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFROM, 0)
}

func (s *CloneActionContext) CloneInstance() ICloneInstanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICloneInstanceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICloneInstanceContext)
}

func (s *CloneActionContext) IDENTIFIED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIDENTIFIED, 0)
}

func (s *CloneActionContext) BY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBY, 0)
}

func (s *CloneActionContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *CloneActionContext) REQUIRE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREQUIRE, 0)
}

func (s *CloneActionContext) SSL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSSL, 0)
}

func (s *CloneActionContext) NO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNO, 0)
}

func (s *CloneActionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CloneActionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CloneActionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCloneAction(s)
	}
}

func (s *CloneActionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCloneAction(s)
	}
}

func (s *CloneActionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCloneAction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CloneAction() (localctx ICloneActionContext) {
	this := p
	_ = this

	localctx = NewCloneActionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 922, MySQLStatementParserRULE_cloneAction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6403)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserLOCAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6375)
			p.Match(MySQLStatementParserLOCAL)
		}
		{
			p.SetState(6376)
			p.Match(MySQLStatementParserDATA)
		}
		{
			p.SetState(6377)
			p.Match(MySQLStatementParserDIRECTORY)
		}
		p.SetState(6379)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(6378)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(6381)
			p.CloneDir()
		}

	case MySQLStatementParserINSTANCE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6382)
			p.Match(MySQLStatementParserINSTANCE)
		}
		{
			p.SetState(6383)
			p.Match(MySQLStatementParserFROM)
		}
		{
			p.SetState(6384)
			p.CloneInstance()
		}
		{
			p.SetState(6385)
			p.Match(MySQLStatementParserIDENTIFIED)
		}
		{
			p.SetState(6386)
			p.Match(MySQLStatementParserBY)
		}
		{
			p.SetState(6387)
			p.String_()
		}
		p.SetState(6394)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserDATA {
			{
				p.SetState(6388)
				p.Match(MySQLStatementParserDATA)
			}
			{
				p.SetState(6389)
				p.Match(MySQLStatementParserDIRECTORY)
			}
			p.SetState(6391)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySQLStatementParserEQ_ {
				{
					p.SetState(6390)
					p.Match(MySQLStatementParserEQ_)
				}

			}
			{
				p.SetState(6393)
				p.CloneDir()
			}

		}
		p.SetState(6401)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserREQUIRE {
			{
				p.SetState(6396)
				p.Match(MySQLStatementParserREQUIRE)
			}
			p.SetState(6398)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySQLStatementParserNO {
				{
					p.SetState(6397)
					p.Match(MySQLStatementParserNO)
				}

			}
			{
				p.SetState(6400)
				p.Match(MySQLStatementParserSSL)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreateLoadableFunctionContext is an interface to support dynamic dispatch.
type ICreateLoadableFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateLoadableFunctionContext differentiates from other interfaces.
	IsCreateLoadableFunctionContext()
}

type CreateLoadableFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateLoadableFunctionContext() *CreateLoadableFunctionContext {
	var p = new(CreateLoadableFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_createLoadableFunction
	return p
}

func (*CreateLoadableFunctionContext) IsCreateLoadableFunctionContext() {}

func NewCreateLoadableFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateLoadableFunctionContext {
	var p = new(CreateLoadableFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_createLoadableFunction

	return p
}

func (s *CreateLoadableFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateLoadableFunctionContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *CreateLoadableFunctionContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFUNCTION, 0)
}

func (s *CreateLoadableFunctionContext) FunctionName() IFunctionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionNameContext)
}

func (s *CreateLoadableFunctionContext) RETURNS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRETURNS, 0)
}

func (s *CreateLoadableFunctionContext) SONAME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSONAME, 0)
}

func (s *CreateLoadableFunctionContext) ShardLibraryName() IShardLibraryNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShardLibraryNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShardLibraryNameContext)
}

func (s *CreateLoadableFunctionContext) STRING() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTRING, 0)
}

func (s *CreateLoadableFunctionContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINTEGER, 0)
}

func (s *CreateLoadableFunctionContext) REAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREAL, 0)
}

func (s *CreateLoadableFunctionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDECIMAL, 0)
}

func (s *CreateLoadableFunctionContext) AGGREGATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAGGREGATE, 0)
}

func (s *CreateLoadableFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateLoadableFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateLoadableFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateLoadableFunction(s)
	}
}

func (s *CreateLoadableFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateLoadableFunction(s)
	}
}

func (s *CreateLoadableFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateLoadableFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CreateLoadableFunction() (localctx ICreateLoadableFunctionContext) {
	this := p
	_ = this

	localctx = NewCreateLoadableFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 924, MySQLStatementParserRULE_createLoadableFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6405)
		p.Match(MySQLStatementParserCREATE)
	}
	p.SetState(6407)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserAGGREGATE {
		{
			p.SetState(6406)
			p.Match(MySQLStatementParserAGGREGATE)
		}

	}
	{
		p.SetState(6409)
		p.Match(MySQLStatementParserFUNCTION)
	}
	{
		p.SetState(6410)
		p.FunctionName()
	}
	{
		p.SetState(6411)
		p.Match(MySQLStatementParserRETURNS)
	}
	{
		p.SetState(6412)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserDECIMAL || _la == MySQLStatementParserINTEGER || _la == MySQLStatementParserREAL || _la == MySQLStatementParserSTRING) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(6413)
		p.Match(MySQLStatementParserSONAME)
	}
	{
		p.SetState(6414)
		p.ShardLibraryName()
	}

	return localctx
}

// IInstallContext is an interface to support dynamic dispatch.
type IInstallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInstallContext differentiates from other interfaces.
	IsInstallContext()
}

type InstallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInstallContext() *InstallContext {
	var p = new(InstallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_install
	return p
}

func (*InstallContext) IsInstallContext() {}

func NewInstallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstallContext {
	var p = new(InstallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_install

	return p
}

func (s *InstallContext) GetParser() antlr.Parser { return s.parser }

func (s *InstallContext) InstallComponent() IInstallComponentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstallComponentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstallComponentContext)
}

func (s *InstallContext) InstallPlugin() IInstallPluginContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstallPluginContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstallPluginContext)
}

func (s *InstallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterInstall(s)
	}
}

func (s *InstallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitInstall(s)
	}
}

func (s *InstallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitInstall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Install() (localctx IInstallContext) {
	this := p
	_ = this

	localctx = NewInstallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 926, MySQLStatementParserRULE_install)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6418)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 830, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6416)
			p.InstallComponent()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6417)
			p.InstallPlugin()
		}

	}

	return localctx
}

// IUninstallContext is an interface to support dynamic dispatch.
type IUninstallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUninstallContext differentiates from other interfaces.
	IsUninstallContext()
}

type UninstallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUninstallContext() *UninstallContext {
	var p = new(UninstallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_uninstall
	return p
}

func (*UninstallContext) IsUninstallContext() {}

func NewUninstallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UninstallContext {
	var p = new(UninstallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_uninstall

	return p
}

func (s *UninstallContext) GetParser() antlr.Parser { return s.parser }

func (s *UninstallContext) UninstallComponent() IUninstallComponentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUninstallComponentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUninstallComponentContext)
}

func (s *UninstallContext) UninstallPlugin() IUninstallPluginContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUninstallPluginContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUninstallPluginContext)
}

func (s *UninstallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UninstallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UninstallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterUninstall(s)
	}
}

func (s *UninstallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitUninstall(s)
	}
}

func (s *UninstallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitUninstall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Uninstall() (localctx IUninstallContext) {
	this := p
	_ = this

	localctx = NewUninstallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 928, MySQLStatementParserRULE_uninstall)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6422)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 831, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6420)
			p.UninstallComponent()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6421)
			p.UninstallPlugin()
		}

	}

	return localctx
}

// IInstallComponentContext is an interface to support dynamic dispatch.
type IInstallComponentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInstallComponentContext differentiates from other interfaces.
	IsInstallComponentContext()
}

type InstallComponentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInstallComponentContext() *InstallComponentContext {
	var p = new(InstallComponentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_installComponent
	return p
}

func (*InstallComponentContext) IsInstallComponentContext() {}

func NewInstallComponentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstallComponentContext {
	var p = new(InstallComponentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_installComponent

	return p
}

func (s *InstallComponentContext) GetParser() antlr.Parser { return s.parser }

func (s *InstallComponentContext) INSTALL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINSTALL, 0)
}

func (s *InstallComponentContext) COMPONENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMPONENT, 0)
}

func (s *InstallComponentContext) AllComponentName() []IComponentNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IComponentNameContext)(nil)).Elem())
	var tst = make([]IComponentNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IComponentNameContext)
		}
	}

	return tst
}

func (s *InstallComponentContext) ComponentName(i int) IComponentNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComponentNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IComponentNameContext)
}

func (s *InstallComponentContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *InstallComponentContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *InstallComponentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstallComponentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstallComponentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterInstallComponent(s)
	}
}

func (s *InstallComponentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitInstallComponent(s)
	}
}

func (s *InstallComponentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitInstallComponent(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) InstallComponent() (localctx IInstallComponentContext) {
	this := p
	_ = this

	localctx = NewInstallComponentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 930, MySQLStatementParserRULE_installComponent)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6424)
		p.Match(MySQLStatementParserINSTALL)
	}
	{
		p.SetState(6425)
		p.Match(MySQLStatementParserCOMPONENT)
	}
	{
		p.SetState(6426)
		p.ComponentName()
	}
	p.SetState(6431)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(6427)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(6428)
			p.ComponentName()
		}

		p.SetState(6433)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IInstallPluginContext is an interface to support dynamic dispatch.
type IInstallPluginContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInstallPluginContext differentiates from other interfaces.
	IsInstallPluginContext()
}

type InstallPluginContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInstallPluginContext() *InstallPluginContext {
	var p = new(InstallPluginContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_installPlugin
	return p
}

func (*InstallPluginContext) IsInstallPluginContext() {}

func NewInstallPluginContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstallPluginContext {
	var p = new(InstallPluginContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_installPlugin

	return p
}

func (s *InstallPluginContext) GetParser() antlr.Parser { return s.parser }

func (s *InstallPluginContext) INSTALL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINSTALL, 0)
}

func (s *InstallPluginContext) PLUGIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPLUGIN, 0)
}

func (s *InstallPluginContext) PluginName() IPluginNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPluginNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPluginNameContext)
}

func (s *InstallPluginContext) SONAME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSONAME, 0)
}

func (s *InstallPluginContext) ShardLibraryName() IShardLibraryNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShardLibraryNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShardLibraryNameContext)
}

func (s *InstallPluginContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstallPluginContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstallPluginContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterInstallPlugin(s)
	}
}

func (s *InstallPluginContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitInstallPlugin(s)
	}
}

func (s *InstallPluginContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitInstallPlugin(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) InstallPlugin() (localctx IInstallPluginContext) {
	this := p
	_ = this

	localctx = NewInstallPluginContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 932, MySQLStatementParserRULE_installPlugin)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6434)
		p.Match(MySQLStatementParserINSTALL)
	}
	{
		p.SetState(6435)
		p.Match(MySQLStatementParserPLUGIN)
	}
	{
		p.SetState(6436)
		p.PluginName()
	}
	{
		p.SetState(6437)
		p.Match(MySQLStatementParserSONAME)
	}
	{
		p.SetState(6438)
		p.ShardLibraryName()
	}

	return localctx
}

// IUninstallComponentContext is an interface to support dynamic dispatch.
type IUninstallComponentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUninstallComponentContext differentiates from other interfaces.
	IsUninstallComponentContext()
}

type UninstallComponentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUninstallComponentContext() *UninstallComponentContext {
	var p = new(UninstallComponentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_uninstallComponent
	return p
}

func (*UninstallComponentContext) IsUninstallComponentContext() {}

func NewUninstallComponentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UninstallComponentContext {
	var p = new(UninstallComponentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_uninstallComponent

	return p
}

func (s *UninstallComponentContext) GetParser() antlr.Parser { return s.parser }

func (s *UninstallComponentContext) UNINSTALL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNINSTALL, 0)
}

func (s *UninstallComponentContext) COMPONENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMPONENT, 0)
}

func (s *UninstallComponentContext) AllComponentName() []IComponentNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IComponentNameContext)(nil)).Elem())
	var tst = make([]IComponentNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IComponentNameContext)
		}
	}

	return tst
}

func (s *UninstallComponentContext) ComponentName(i int) IComponentNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComponentNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IComponentNameContext)
}

func (s *UninstallComponentContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *UninstallComponentContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *UninstallComponentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UninstallComponentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UninstallComponentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterUninstallComponent(s)
	}
}

func (s *UninstallComponentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitUninstallComponent(s)
	}
}

func (s *UninstallComponentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitUninstallComponent(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) UninstallComponent() (localctx IUninstallComponentContext) {
	this := p
	_ = this

	localctx = NewUninstallComponentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 934, MySQLStatementParserRULE_uninstallComponent)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6440)
		p.Match(MySQLStatementParserUNINSTALL)
	}
	{
		p.SetState(6441)
		p.Match(MySQLStatementParserCOMPONENT)
	}
	{
		p.SetState(6442)
		p.ComponentName()
	}
	p.SetState(6447)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(6443)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(6444)
			p.ComponentName()
		}

		p.SetState(6449)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IUninstallPluginContext is an interface to support dynamic dispatch.
type IUninstallPluginContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUninstallPluginContext differentiates from other interfaces.
	IsUninstallPluginContext()
}

type UninstallPluginContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUninstallPluginContext() *UninstallPluginContext {
	var p = new(UninstallPluginContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_uninstallPlugin
	return p
}

func (*UninstallPluginContext) IsUninstallPluginContext() {}

func NewUninstallPluginContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UninstallPluginContext {
	var p = new(UninstallPluginContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_uninstallPlugin

	return p
}

func (s *UninstallPluginContext) GetParser() antlr.Parser { return s.parser }

func (s *UninstallPluginContext) UNINSTALL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNINSTALL, 0)
}

func (s *UninstallPluginContext) PLUGIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPLUGIN, 0)
}

func (s *UninstallPluginContext) PluginName() IPluginNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPluginNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPluginNameContext)
}

func (s *UninstallPluginContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UninstallPluginContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UninstallPluginContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterUninstallPlugin(s)
	}
}

func (s *UninstallPluginContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitUninstallPlugin(s)
	}
}

func (s *UninstallPluginContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitUninstallPlugin(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) UninstallPlugin() (localctx IUninstallPluginContext) {
	this := p
	_ = this

	localctx = NewUninstallPluginContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 936, MySQLStatementParserRULE_uninstallPlugin)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6450)
		p.Match(MySQLStatementParserUNINSTALL)
	}
	{
		p.SetState(6451)
		p.Match(MySQLStatementParserPLUGIN)
	}
	{
		p.SetState(6452)
		p.PluginName()
	}

	return localctx
}

// IAnalyzeTableContext is an interface to support dynamic dispatch.
type IAnalyzeTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnalyzeTableContext differentiates from other interfaces.
	IsAnalyzeTableContext()
}

type AnalyzeTableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnalyzeTableContext() *AnalyzeTableContext {
	var p = new(AnalyzeTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_analyzeTable
	return p
}

func (*AnalyzeTableContext) IsAnalyzeTableContext() {}

func NewAnalyzeTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnalyzeTableContext {
	var p = new(AnalyzeTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_analyzeTable

	return p
}

func (s *AnalyzeTableContext) GetParser() antlr.Parser { return s.parser }

func (s *AnalyzeTableContext) ANALYZE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserANALYZE, 0)
}

func (s *AnalyzeTableContext) TableOrTables() ITableOrTablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableOrTablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableOrTablesContext)
}

func (s *AnalyzeTableContext) TableList() ITableListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableListContext)
}

func (s *AnalyzeTableContext) Histogram() IHistogramContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHistogramContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHistogramContext)
}

func (s *AnalyzeTableContext) NO_WRITE_TO_BINLOG() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNO_WRITE_TO_BINLOG, 0)
}

func (s *AnalyzeTableContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCAL, 0)
}

func (s *AnalyzeTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnalyzeTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnalyzeTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAnalyzeTable(s)
	}
}

func (s *AnalyzeTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAnalyzeTable(s)
	}
}

func (s *AnalyzeTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAnalyzeTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AnalyzeTable() (localctx IAnalyzeTableContext) {
	this := p
	_ = this

	localctx = NewAnalyzeTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 938, MySQLStatementParserRULE_analyzeTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6454)
		p.Match(MySQLStatementParserANALYZE)
	}
	p.SetState(6456)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLOCAL || _la == MySQLStatementParserNO_WRITE_TO_BINLOG {
		{
			p.SetState(6455)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserLOCAL || _la == MySQLStatementParserNO_WRITE_TO_BINLOG) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(6458)
		p.TableOrTables()
	}
	{
		p.SetState(6459)
		p.TableList()
	}
	p.SetState(6461)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserDROP || _la == MySQLStatementParserUPDATE {
		{
			p.SetState(6460)
			p.Histogram()
		}

	}

	return localctx
}

// IHistogramContext is an interface to support dynamic dispatch.
type IHistogramContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHistogramContext differentiates from other interfaces.
	IsHistogramContext()
}

type HistogramContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHistogramContext() *HistogramContext {
	var p = new(HistogramContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_histogram
	return p
}

func (*HistogramContext) IsHistogramContext() {}

func NewHistogramContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HistogramContext {
	var p = new(HistogramContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_histogram

	return p
}

func (s *HistogramContext) GetParser() antlr.Parser { return s.parser }

func (s *HistogramContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUPDATE, 0)
}

func (s *HistogramContext) HISTOGRAM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHISTOGRAM, 0)
}

func (s *HistogramContext) ON() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserON, 0)
}

func (s *HistogramContext) ColumnNames() IColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNamesContext)
}

func (s *HistogramContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWITH, 0)
}

func (s *HistogramContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *HistogramContext) BUCKETS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBUCKETS, 0)
}

func (s *HistogramContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDROP, 0)
}

func (s *HistogramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HistogramContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HistogramContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterHistogram(s)
	}
}

func (s *HistogramContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitHistogram(s)
	}
}

func (s *HistogramContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitHistogram(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Histogram() (localctx IHistogramContext) {
	this := p
	_ = this

	localctx = NewHistogramContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 940, MySQLStatementParserRULE_histogram)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6476)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserUPDATE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6463)
			p.Match(MySQLStatementParserUPDATE)
		}
		{
			p.SetState(6464)
			p.Match(MySQLStatementParserHISTOGRAM)
		}
		{
			p.SetState(6465)
			p.Match(MySQLStatementParserON)
		}
		{
			p.SetState(6466)
			p.ColumnNames()
		}
		p.SetState(6470)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserWITH {
			{
				p.SetState(6467)
				p.Match(MySQLStatementParserWITH)
			}
			{
				p.SetState(6468)
				p.Match(MySQLStatementParserNUMBER_)
			}
			{
				p.SetState(6469)
				p.Match(MySQLStatementParserBUCKETS)
			}

		}

	case MySQLStatementParserDROP:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6472)
			p.Match(MySQLStatementParserDROP)
		}
		{
			p.SetState(6473)
			p.Match(MySQLStatementParserHISTOGRAM)
		}
		{
			p.SetState(6474)
			p.Match(MySQLStatementParserON)
		}
		{
			p.SetState(6475)
			p.ColumnNames()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICheckTableContext is an interface to support dynamic dispatch.
type ICheckTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheckTableContext differentiates from other interfaces.
	IsCheckTableContext()
}

type CheckTableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheckTableContext() *CheckTableContext {
	var p = new(CheckTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_checkTable
	return p
}

func (*CheckTableContext) IsCheckTableContext() {}

func NewCheckTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CheckTableContext {
	var p = new(CheckTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_checkTable

	return p
}

func (s *CheckTableContext) GetParser() antlr.Parser { return s.parser }

func (s *CheckTableContext) CHECK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHECK, 0)
}

func (s *CheckTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLE, 0)
}

func (s *CheckTableContext) TableList() ITableListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableListContext)
}

func (s *CheckTableContext) CheckTableOption() ICheckTableOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckTableOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICheckTableOptionContext)
}

func (s *CheckTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CheckTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCheckTable(s)
	}
}

func (s *CheckTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCheckTable(s)
	}
}

func (s *CheckTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCheckTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CheckTable() (localctx ICheckTableContext) {
	this := p
	_ = this

	localctx = NewCheckTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 942, MySQLStatementParserRULE_checkTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6478)
		p.Match(MySQLStatementParserCHECK)
	}
	{
		p.SetState(6479)
		p.Match(MySQLStatementParserTABLE)
	}
	{
		p.SetState(6480)
		p.TableList()
	}
	p.SetState(6482)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserCHANGED || (((_la-251)&-(0x1f+1)) == 0 && ((1<<uint((_la-251)))&((1<<(MySQLStatementParserEXTENDED-251))|(1<<(MySQLStatementParserFAST-251))|(1<<(MySQLStatementParserFOR-251)))) != 0) || _la == MySQLStatementParserMEDIUM || _la == MySQLStatementParserQUICK {
		{
			p.SetState(6481)
			p.CheckTableOption()
		}

	}

	return localctx
}

// ICheckTableOptionContext is an interface to support dynamic dispatch.
type ICheckTableOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheckTableOptionContext differentiates from other interfaces.
	IsCheckTableOptionContext()
}

type CheckTableOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheckTableOptionContext() *CheckTableOptionContext {
	var p = new(CheckTableOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_checkTableOption
	return p
}

func (*CheckTableOptionContext) IsCheckTableOptionContext() {}

func NewCheckTableOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CheckTableOptionContext {
	var p = new(CheckTableOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_checkTableOption

	return p
}

func (s *CheckTableOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *CheckTableOptionContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOR, 0)
}

func (s *CheckTableOptionContext) UPGRADE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUPGRADE, 0)
}

func (s *CheckTableOptionContext) QUICK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserQUICK, 0)
}

func (s *CheckTableOptionContext) FAST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFAST, 0)
}

func (s *CheckTableOptionContext) MEDIUM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMEDIUM, 0)
}

func (s *CheckTableOptionContext) EXTENDED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXTENDED, 0)
}

func (s *CheckTableOptionContext) CHANGED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHANGED, 0)
}

func (s *CheckTableOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckTableOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CheckTableOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCheckTableOption(s)
	}
}

func (s *CheckTableOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCheckTableOption(s)
	}
}

func (s *CheckTableOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCheckTableOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CheckTableOption() (localctx ICheckTableOptionContext) {
	this := p
	_ = this

	localctx = NewCheckTableOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 944, MySQLStatementParserRULE_checkTableOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6491)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserFOR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6484)
			p.Match(MySQLStatementParserFOR)
		}
		{
			p.SetState(6485)
			p.Match(MySQLStatementParserUPGRADE)
		}

	case MySQLStatementParserQUICK:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6486)
			p.Match(MySQLStatementParserQUICK)
		}

	case MySQLStatementParserFAST:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6487)
			p.Match(MySQLStatementParserFAST)
		}

	case MySQLStatementParserMEDIUM:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6488)
			p.Match(MySQLStatementParserMEDIUM)
		}

	case MySQLStatementParserEXTENDED:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6489)
			p.Match(MySQLStatementParserEXTENDED)
		}

	case MySQLStatementParserCHANGED:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(6490)
			p.Match(MySQLStatementParserCHANGED)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IChecksumTableContext is an interface to support dynamic dispatch.
type IChecksumTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChecksumTableContext differentiates from other interfaces.
	IsChecksumTableContext()
}

type ChecksumTableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChecksumTableContext() *ChecksumTableContext {
	var p = new(ChecksumTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_checksumTable
	return p
}

func (*ChecksumTableContext) IsChecksumTableContext() {}

func NewChecksumTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChecksumTableContext {
	var p = new(ChecksumTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_checksumTable

	return p
}

func (s *ChecksumTableContext) GetParser() antlr.Parser { return s.parser }

func (s *ChecksumTableContext) CHECKSUM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHECKSUM, 0)
}

func (s *ChecksumTableContext) TableOrTables() ITableOrTablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableOrTablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableOrTablesContext)
}

func (s *ChecksumTableContext) TableList() ITableListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableListContext)
}

func (s *ChecksumTableContext) QUICK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserQUICK, 0)
}

func (s *ChecksumTableContext) EXTENDED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXTENDED, 0)
}

func (s *ChecksumTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChecksumTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChecksumTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterChecksumTable(s)
	}
}

func (s *ChecksumTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitChecksumTable(s)
	}
}

func (s *ChecksumTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitChecksumTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ChecksumTable() (localctx IChecksumTableContext) {
	this := p
	_ = this

	localctx = NewChecksumTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 946, MySQLStatementParserRULE_checksumTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6493)
		p.Match(MySQLStatementParserCHECKSUM)
	}
	{
		p.SetState(6494)
		p.TableOrTables()
	}
	{
		p.SetState(6495)
		p.TableList()
	}
	p.SetState(6497)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserEXTENDED || _la == MySQLStatementParserQUICK {
		{
			p.SetState(6496)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserEXTENDED || _la == MySQLStatementParserQUICK) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IOptimizeTableContext is an interface to support dynamic dispatch.
type IOptimizeTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOptimizeTableContext differentiates from other interfaces.
	IsOptimizeTableContext()
}

type OptimizeTableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptimizeTableContext() *OptimizeTableContext {
	var p = new(OptimizeTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_optimizeTable
	return p
}

func (*OptimizeTableContext) IsOptimizeTableContext() {}

func NewOptimizeTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OptimizeTableContext {
	var p = new(OptimizeTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_optimizeTable

	return p
}

func (s *OptimizeTableContext) GetParser() antlr.Parser { return s.parser }

func (s *OptimizeTableContext) OPTIMIZE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOPTIMIZE, 0)
}

func (s *OptimizeTableContext) TableOrTables() ITableOrTablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableOrTablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableOrTablesContext)
}

func (s *OptimizeTableContext) TableList() ITableListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableListContext)
}

func (s *OptimizeTableContext) NO_WRITE_TO_BINLOG() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNO_WRITE_TO_BINLOG, 0)
}

func (s *OptimizeTableContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCAL, 0)
}

func (s *OptimizeTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OptimizeTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OptimizeTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterOptimizeTable(s)
	}
}

func (s *OptimizeTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitOptimizeTable(s)
	}
}

func (s *OptimizeTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitOptimizeTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) OptimizeTable() (localctx IOptimizeTableContext) {
	this := p
	_ = this

	localctx = NewOptimizeTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 948, MySQLStatementParserRULE_optimizeTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6499)
		p.Match(MySQLStatementParserOPTIMIZE)
	}
	p.SetState(6501)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLOCAL || _la == MySQLStatementParserNO_WRITE_TO_BINLOG {
		{
			p.SetState(6500)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserLOCAL || _la == MySQLStatementParserNO_WRITE_TO_BINLOG) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(6503)
		p.TableOrTables()
	}
	{
		p.SetState(6504)
		p.TableList()
	}

	return localctx
}

// IRepairTableContext is an interface to support dynamic dispatch.
type IRepairTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRepairTableContext differentiates from other interfaces.
	IsRepairTableContext()
}

type RepairTableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRepairTableContext() *RepairTableContext {
	var p = new(RepairTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_repairTable
	return p
}

func (*RepairTableContext) IsRepairTableContext() {}

func NewRepairTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RepairTableContext {
	var p = new(RepairTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_repairTable

	return p
}

func (s *RepairTableContext) GetParser() antlr.Parser { return s.parser }

func (s *RepairTableContext) REPAIR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPAIR, 0)
}

func (s *RepairTableContext) TableOrTables() ITableOrTablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableOrTablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableOrTablesContext)
}

func (s *RepairTableContext) TableList() ITableListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableListContext)
}

func (s *RepairTableContext) QUICK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserQUICK, 0)
}

func (s *RepairTableContext) EXTENDED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXTENDED, 0)
}

func (s *RepairTableContext) USE_FRM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUSE_FRM, 0)
}

func (s *RepairTableContext) NO_WRITE_TO_BINLOG() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNO_WRITE_TO_BINLOG, 0)
}

func (s *RepairTableContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCAL, 0)
}

func (s *RepairTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RepairTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RepairTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterRepairTable(s)
	}
}

func (s *RepairTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitRepairTable(s)
	}
}

func (s *RepairTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitRepairTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) RepairTable() (localctx IRepairTableContext) {
	this := p
	_ = this

	localctx = NewRepairTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 950, MySQLStatementParserRULE_repairTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6506)
		p.Match(MySQLStatementParserREPAIR)
	}
	p.SetState(6508)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLOCAL || _la == MySQLStatementParserNO_WRITE_TO_BINLOG {
		{
			p.SetState(6507)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserLOCAL || _la == MySQLStatementParserNO_WRITE_TO_BINLOG) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(6510)
		p.TableOrTables()
	}
	{
		p.SetState(6511)
		p.TableList()
	}
	p.SetState(6513)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserQUICK {
		{
			p.SetState(6512)
			p.Match(MySQLStatementParserQUICK)
		}

	}
	p.SetState(6516)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserEXTENDED {
		{
			p.SetState(6515)
			p.Match(MySQLStatementParserEXTENDED)
		}

	}
	p.SetState(6519)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserUSE_FRM {
		{
			p.SetState(6518)
			p.Match(MySQLStatementParserUSE_FRM)
		}

	}

	return localctx
}

// IAlterResourceGroupContext is an interface to support dynamic dispatch.
type IAlterResourceGroupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterResourceGroupContext differentiates from other interfaces.
	IsAlterResourceGroupContext()
}

type AlterResourceGroupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterResourceGroupContext() *AlterResourceGroupContext {
	var p = new(AlterResourceGroupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterResourceGroup
	return p
}

func (*AlterResourceGroupContext) IsAlterResourceGroupContext() {}

func NewAlterResourceGroupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterResourceGroupContext {
	var p = new(AlterResourceGroupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterResourceGroup

	return p
}

func (s *AlterResourceGroupContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterResourceGroupContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALTER, 0)
}

func (s *AlterResourceGroupContext) RESOURCE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRESOURCE, 0)
}

func (s *AlterResourceGroupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGROUP, 0)
}

func (s *AlterResourceGroupContext) GroupName() IGroupNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroupNameContext)
}

func (s *AlterResourceGroupContext) VCPU() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVCPU, 0)
}

func (s *AlterResourceGroupContext) AllVcpuSpec() []IVcpuSpecContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVcpuSpecContext)(nil)).Elem())
	var tst = make([]IVcpuSpecContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVcpuSpecContext)
		}
	}

	return tst
}

func (s *AlterResourceGroupContext) VcpuSpec(i int) IVcpuSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVcpuSpecContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVcpuSpecContext)
}

func (s *AlterResourceGroupContext) THREAD_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTHREAD_PRIORITY, 0)
}

func (s *AlterResourceGroupContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *AlterResourceGroupContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENABLE, 0)
}

func (s *AlterResourceGroupContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDISABLE, 0)
}

func (s *AlterResourceGroupContext) AllEQ_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserEQ_)
}

func (s *AlterResourceGroupContext) EQ_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, i)
}

func (s *AlterResourceGroupContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *AlterResourceGroupContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *AlterResourceGroupContext) FORCE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFORCE, 0)
}

func (s *AlterResourceGroupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterResourceGroupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterResourceGroupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterResourceGroup(s)
	}
}

func (s *AlterResourceGroupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterResourceGroup(s)
	}
}

func (s *AlterResourceGroupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterResourceGroup(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterResourceGroup() (localctx IAlterResourceGroupContext) {
	this := p
	_ = this

	localctx = NewAlterResourceGroupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 952, MySQLStatementParserRULE_alterResourceGroup)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6521)
		p.Match(MySQLStatementParserALTER)
	}
	{
		p.SetState(6522)
		p.Match(MySQLStatementParserRESOURCE)
	}
	{
		p.SetState(6523)
		p.Match(MySQLStatementParserGROUP)
	}
	{
		p.SetState(6524)
		p.GroupName()
	}
	p.SetState(6537)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserVCPU {
		{
			p.SetState(6525)
			p.Match(MySQLStatementParserVCPU)
		}
		p.SetState(6527)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(6526)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(6529)
			p.VcpuSpec()
		}
		p.SetState(6534)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(6530)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(6531)
				p.VcpuSpec()
			}

			p.SetState(6536)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(6544)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserTHREAD_PRIORITY {
		{
			p.SetState(6539)
			p.Match(MySQLStatementParserTHREAD_PRIORITY)
		}
		p.SetState(6541)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(6540)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(6543)
			p.Match(MySQLStatementParserNUMBER_)
		}

	}
	p.SetState(6551)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserENABLE:
		{
			p.SetState(6546)
			p.Match(MySQLStatementParserENABLE)
		}

	case MySQLStatementParserDISABLE:
		{
			p.SetState(6547)
			p.Match(MySQLStatementParserDISABLE)
		}
		p.SetState(6549)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserFORCE {
			{
				p.SetState(6548)
				p.Match(MySQLStatementParserFORCE)
			}

		}

	case MySQLStatementParserEOF, MySQLStatementParserSEMI_:

	default:
	}

	return localctx
}

// IVcpuSpecContext is an interface to support dynamic dispatch.
type IVcpuSpecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVcpuSpecContext differentiates from other interfaces.
	IsVcpuSpecContext()
}

type VcpuSpecContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVcpuSpecContext() *VcpuSpecContext {
	var p = new(VcpuSpecContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_vcpuSpec
	return p
}

func (*VcpuSpecContext) IsVcpuSpecContext() {}

func NewVcpuSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VcpuSpecContext {
	var p = new(VcpuSpecContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_vcpuSpec

	return p
}

func (s *VcpuSpecContext) GetParser() antlr.Parser { return s.parser }

func (s *VcpuSpecContext) AllNUMBER_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserNUMBER_)
}

func (s *VcpuSpecContext) NUMBER_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, i)
}

func (s *VcpuSpecContext) MINUS_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMINUS_, 0)
}

func (s *VcpuSpecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VcpuSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VcpuSpecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterVcpuSpec(s)
	}
}

func (s *VcpuSpecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitVcpuSpec(s)
	}
}

func (s *VcpuSpecContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitVcpuSpec(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) VcpuSpec() (localctx IVcpuSpecContext) {
	this := p
	_ = this

	localctx = NewVcpuSpecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 954, MySQLStatementParserRULE_vcpuSpec)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6557)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 853, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6553)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6554)
			p.Match(MySQLStatementParserNUMBER_)
		}
		{
			p.SetState(6555)
			p.Match(MySQLStatementParserMINUS_)
		}
		{
			p.SetState(6556)
			p.Match(MySQLStatementParserNUMBER_)
		}

	}

	return localctx
}

// ICreateResourceGroupContext is an interface to support dynamic dispatch.
type ICreateResourceGroupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateResourceGroupContext differentiates from other interfaces.
	IsCreateResourceGroupContext()
}

type CreateResourceGroupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateResourceGroupContext() *CreateResourceGroupContext {
	var p = new(CreateResourceGroupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_createResourceGroup
	return p
}

func (*CreateResourceGroupContext) IsCreateResourceGroupContext() {}

func NewCreateResourceGroupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateResourceGroupContext {
	var p = new(CreateResourceGroupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_createResourceGroup

	return p
}

func (s *CreateResourceGroupContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateResourceGroupContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *CreateResourceGroupContext) RESOURCE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRESOURCE, 0)
}

func (s *CreateResourceGroupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGROUP, 0)
}

func (s *CreateResourceGroupContext) GroupName() IGroupNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroupNameContext)
}

func (s *CreateResourceGroupContext) TYPE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTYPE, 0)
}

func (s *CreateResourceGroupContext) AllEQ_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserEQ_)
}

func (s *CreateResourceGroupContext) EQ_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, i)
}

func (s *CreateResourceGroupContext) SYSTEM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSYSTEM, 0)
}

func (s *CreateResourceGroupContext) USER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUSER, 0)
}

func (s *CreateResourceGroupContext) VCPU() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVCPU, 0)
}

func (s *CreateResourceGroupContext) AllVcpuSpec() []IVcpuSpecContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVcpuSpecContext)(nil)).Elem())
	var tst = make([]IVcpuSpecContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVcpuSpecContext)
		}
	}

	return tst
}

func (s *CreateResourceGroupContext) VcpuSpec(i int) IVcpuSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVcpuSpecContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVcpuSpecContext)
}

func (s *CreateResourceGroupContext) THREAD_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTHREAD_PRIORITY, 0)
}

func (s *CreateResourceGroupContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *CreateResourceGroupContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENABLE, 0)
}

func (s *CreateResourceGroupContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDISABLE, 0)
}

func (s *CreateResourceGroupContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *CreateResourceGroupContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *CreateResourceGroupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateResourceGroupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateResourceGroupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateResourceGroup(s)
	}
}

func (s *CreateResourceGroupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateResourceGroup(s)
	}
}

func (s *CreateResourceGroupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateResourceGroup(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CreateResourceGroup() (localctx ICreateResourceGroupContext) {
	this := p
	_ = this

	localctx = NewCreateResourceGroupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 956, MySQLStatementParserRULE_createResourceGroup)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6559)
		p.Match(MySQLStatementParserCREATE)
	}
	{
		p.SetState(6560)
		p.Match(MySQLStatementParserRESOURCE)
	}
	{
		p.SetState(6561)
		p.Match(MySQLStatementParserGROUP)
	}
	{
		p.SetState(6562)
		p.GroupName()
	}
	{
		p.SetState(6563)
		p.Match(MySQLStatementParserTYPE)
	}
	{
		p.SetState(6564)
		p.Match(MySQLStatementParserEQ_)
	}
	{
		p.SetState(6565)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserSYSTEM || _la == MySQLStatementParserUSER) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(6578)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserVCPU {
		{
			p.SetState(6566)
			p.Match(MySQLStatementParserVCPU)
		}
		p.SetState(6568)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(6567)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(6570)
			p.VcpuSpec()
		}
		p.SetState(6575)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(6571)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(6572)
				p.VcpuSpec()
			}

			p.SetState(6577)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(6585)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserTHREAD_PRIORITY {
		{
			p.SetState(6580)
			p.Match(MySQLStatementParserTHREAD_PRIORITY)
		}
		p.SetState(6582)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserEQ_ {
			{
				p.SetState(6581)
				p.Match(MySQLStatementParserEQ_)
			}

		}
		{
			p.SetState(6584)
			p.Match(MySQLStatementParserNUMBER_)
		}

	}
	p.SetState(6588)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserDISABLE || _la == MySQLStatementParserENABLE {
		{
			p.SetState(6587)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserDISABLE || _la == MySQLStatementParserENABLE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDropResourceGroupContext is an interface to support dynamic dispatch.
type IDropResourceGroupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropResourceGroupContext differentiates from other interfaces.
	IsDropResourceGroupContext()
}

type DropResourceGroupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropResourceGroupContext() *DropResourceGroupContext {
	var p = new(DropResourceGroupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_dropResourceGroup
	return p
}

func (*DropResourceGroupContext) IsDropResourceGroupContext() {}

func NewDropResourceGroupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropResourceGroupContext {
	var p = new(DropResourceGroupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_dropResourceGroup

	return p
}

func (s *DropResourceGroupContext) GetParser() antlr.Parser { return s.parser }

func (s *DropResourceGroupContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDROP, 0)
}

func (s *DropResourceGroupContext) RESOURCE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRESOURCE, 0)
}

func (s *DropResourceGroupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGROUP, 0)
}

func (s *DropResourceGroupContext) GroupName() IGroupNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroupNameContext)
}

func (s *DropResourceGroupContext) FORCE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFORCE, 0)
}

func (s *DropResourceGroupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropResourceGroupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropResourceGroupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDropResourceGroup(s)
	}
}

func (s *DropResourceGroupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDropResourceGroup(s)
	}
}

func (s *DropResourceGroupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDropResourceGroup(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DropResourceGroup() (localctx IDropResourceGroupContext) {
	this := p
	_ = this

	localctx = NewDropResourceGroupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 958, MySQLStatementParserRULE_dropResourceGroup)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6590)
		p.Match(MySQLStatementParserDROP)
	}
	{
		p.SetState(6591)
		p.Match(MySQLStatementParserRESOURCE)
	}
	{
		p.SetState(6592)
		p.Match(MySQLStatementParserGROUP)
	}
	{
		p.SetState(6593)
		p.GroupName()
	}
	p.SetState(6595)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserFORCE {
		{
			p.SetState(6594)
			p.Match(MySQLStatementParserFORCE)
		}

	}

	return localctx
}

// ISetResourceGroupContext is an interface to support dynamic dispatch.
type ISetResourceGroupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetResourceGroupContext differentiates from other interfaces.
	IsSetResourceGroupContext()
}

type SetResourceGroupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetResourceGroupContext() *SetResourceGroupContext {
	var p = new(SetResourceGroupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_setResourceGroup
	return p
}

func (*SetResourceGroupContext) IsSetResourceGroupContext() {}

func NewSetResourceGroupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetResourceGroupContext {
	var p = new(SetResourceGroupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_setResourceGroup

	return p
}

func (s *SetResourceGroupContext) GetParser() antlr.Parser { return s.parser }

func (s *SetResourceGroupContext) SET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSET, 0)
}

func (s *SetResourceGroupContext) RESOURCE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRESOURCE, 0)
}

func (s *SetResourceGroupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGROUP, 0)
}

func (s *SetResourceGroupContext) GroupName() IGroupNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroupNameContext)
}

func (s *SetResourceGroupContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOR, 0)
}

func (s *SetResourceGroupContext) AllNUMBER_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserNUMBER_)
}

func (s *SetResourceGroupContext) NUMBER_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, i)
}

func (s *SetResourceGroupContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *SetResourceGroupContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *SetResourceGroupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetResourceGroupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetResourceGroupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSetResourceGroup(s)
	}
}

func (s *SetResourceGroupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSetResourceGroup(s)
	}
}

func (s *SetResourceGroupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSetResourceGroup(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SetResourceGroup() (localctx ISetResourceGroupContext) {
	this := p
	_ = this

	localctx = NewSetResourceGroupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 960, MySQLStatementParserRULE_setResourceGroup)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6597)
		p.Match(MySQLStatementParserSET)
	}
	{
		p.SetState(6598)
		p.Match(MySQLStatementParserRESOURCE)
	}
	{
		p.SetState(6599)
		p.Match(MySQLStatementParserGROUP)
	}
	{
		p.SetState(6600)
		p.GroupName()
	}
	p.SetState(6610)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserFOR {
		{
			p.SetState(6601)
			p.Match(MySQLStatementParserFOR)
		}
		{
			p.SetState(6602)
			p.Match(MySQLStatementParserNUMBER_)
		}
		p.SetState(6607)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(6603)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(6604)
				p.Match(MySQLStatementParserNUMBER_)
			}

			p.SetState(6609)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IBinlogContext is an interface to support dynamic dispatch.
type IBinlogContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBinlogContext differentiates from other interfaces.
	IsBinlogContext()
}

type BinlogContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBinlogContext() *BinlogContext {
	var p = new(BinlogContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_binlog
	return p
}

func (*BinlogContext) IsBinlogContext() {}

func NewBinlogContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BinlogContext {
	var p = new(BinlogContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_binlog

	return p
}

func (s *BinlogContext) GetParser() antlr.Parser { return s.parser }

func (s *BinlogContext) BINLOG() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBINLOG, 0)
}

func (s *BinlogContext) StringLiterals() IStringLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralsContext)
}

func (s *BinlogContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinlogContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BinlogContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterBinlog(s)
	}
}

func (s *BinlogContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitBinlog(s)
	}
}

func (s *BinlogContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitBinlog(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Binlog() (localctx IBinlogContext) {
	this := p
	_ = this

	localctx = NewBinlogContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 962, MySQLStatementParserRULE_binlog)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6612)
		p.Match(MySQLStatementParserBINLOG)
	}
	{
		p.SetState(6613)
		p.StringLiterals()
	}

	return localctx
}

// ICacheIndexContext is an interface to support dynamic dispatch.
type ICacheIndexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCacheIndexContext differentiates from other interfaces.
	IsCacheIndexContext()
}

type CacheIndexContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCacheIndexContext() *CacheIndexContext {
	var p = new(CacheIndexContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_cacheIndex
	return p
}

func (*CacheIndexContext) IsCacheIndexContext() {}

func NewCacheIndexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CacheIndexContext {
	var p = new(CacheIndexContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_cacheIndex

	return p
}

func (s *CacheIndexContext) GetParser() antlr.Parser { return s.parser }

func (s *CacheIndexContext) CACHE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCACHE, 0)
}

func (s *CacheIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINDEX, 0)
}

func (s *CacheIndexContext) IN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIN, 0)
}

func (s *CacheIndexContext) AllCacheTableIndexList() []ICacheTableIndexListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICacheTableIndexListContext)(nil)).Elem())
	var tst = make([]ICacheTableIndexListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICacheTableIndexListContext)
		}
	}

	return tst
}

func (s *CacheIndexContext) CacheTableIndexList(i int) ICacheTableIndexListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICacheTableIndexListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICacheTableIndexListContext)
}

func (s *CacheIndexContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *CacheIndexContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPARTITION, 0)
}

func (s *CacheIndexContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *CacheIndexContext) PartitionList() IPartitionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionListContext)
}

func (s *CacheIndexContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *CacheIndexContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *CacheIndexContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFAULT, 0)
}

func (s *CacheIndexContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *CacheIndexContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *CacheIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CacheIndexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CacheIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCacheIndex(s)
	}
}

func (s *CacheIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCacheIndex(s)
	}
}

func (s *CacheIndexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCacheIndex(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CacheIndex() (localctx ICacheIndexContext) {
	this := p
	_ = this

	localctx = NewCacheIndexContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 964, MySQLStatementParserRULE_cacheIndex)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6615)
		p.Match(MySQLStatementParserCACHE)
	}
	{
		p.SetState(6616)
		p.Match(MySQLStatementParserINDEX)
	}
	p.SetState(6631)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 864, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(6617)
			p.CacheTableIndexList()
		}
		p.SetState(6622)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(6618)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(6619)
				p.CacheTableIndexList()
			}

			p.SetState(6624)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		{
			p.SetState(6625)
			p.TableName()
		}
		{
			p.SetState(6626)
			p.Match(MySQLStatementParserPARTITION)
		}
		{
			p.SetState(6627)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(6628)
			p.PartitionList()
		}
		{
			p.SetState(6629)
			p.Match(MySQLStatementParserRP_)
		}

	}
	{
		p.SetState(6633)
		p.Match(MySQLStatementParserIN)
	}
	p.SetState(6636)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserMAX, MySQLStatementParserMIN, MySQLStatementParserSUM, MySQLStatementParserCOUNT, MySQLStatementParserGROUP_CONCAT, MySQLStatementParserCAST, MySQLStatementParserPOSITION, MySQLStatementParserSUBSTRING, MySQLStatementParserSUBSTR, MySQLStatementParserEXTRACT, MySQLStatementParserTRIM, MySQLStatementParserLAST_DAY, MySQLStatementParserTRADITIONAL, MySQLStatementParserTREE, MySQLStatementParserMYSQL_ADMIN, MySQLStatementParserINSTANT, MySQLStatementParserINPLACE, MySQLStatementParserCOPY, MySQLStatementParserUL_BINARY, MySQLStatementParserAUTOCOMMIT, MySQLStatementParserINNODB, MySQLStatementParserREDO_LOG, MySQLStatementParserACCOUNT, MySQLStatementParserACTION, MySQLStatementParserACTIVE, MySQLStatementParserADMIN, MySQLStatementParserAFTER, MySQLStatementParserAGAINST, MySQLStatementParserAGGREGATE, MySQLStatementParserALGORITHM, MySQLStatementParserALWAYS, MySQLStatementParserANY, MySQLStatementParserARRAY, MySQLStatementParserASCII, MySQLStatementParserAT, MySQLStatementParserATTRIBUTE, MySQLStatementParserAUTOEXTEND_SIZE, MySQLStatementParserAUTO_INCREMENT, MySQLStatementParserAVG, MySQLStatementParserAVG_ROW_LENGTH, MySQLStatementParserBACKUP, MySQLStatementParserBEGIN, MySQLStatementParserBINLOG, MySQLStatementParserBIT, MySQLStatementParserBLOCK, MySQLStatementParserBOOL, MySQLStatementParserBOOLEAN, MySQLStatementParserBTREE, MySQLStatementParserBUCKETS, MySQLStatementParserBYTE, MySQLStatementParserCACHE, MySQLStatementParserCASCADED, MySQLStatementParserCATALOG_NAME, MySQLStatementParserCHAIN, MySQLStatementParserCHANGED, MySQLStatementParserCHANNEL, MySQLStatementParserCHARSET, MySQLStatementParserCHECKSUM, MySQLStatementParserCIPHER, MySQLStatementParserCLASS_ORIGIN, MySQLStatementParserCLIENT, MySQLStatementParserCLONE, MySQLStatementParserCLOSE, MySQLStatementParserCOALESCE, MySQLStatementParserCODE, MySQLStatementParserCOLLATION, MySQLStatementParserCOLUMNS, MySQLStatementParserCOLUMN_FORMAT, MySQLStatementParserCOLUMN_NAME, MySQLStatementParserCOMMENT, MySQLStatementParserCOMMIT, MySQLStatementParserCOMMITTED, MySQLStatementParserCOMPACT, MySQLStatementParserCOMPLETION, MySQLStatementParserCOMPONENT, MySQLStatementParserCOMPRESSED, MySQLStatementParserCOMPRESSION, MySQLStatementParserCONCURRENT, MySQLStatementParserCONNECTION, MySQLStatementParserCONSISTENT, MySQLStatementParserCONSTRAINT_CATALOG, MySQLStatementParserCONSTRAINT_NAME, MySQLStatementParserCONSTRAINT_SCHEMA, MySQLStatementParserCONTAINS, MySQLStatementParserCONTEXT, MySQLStatementParserCPU, MySQLStatementParserCURRENT, MySQLStatementParserCURSOR_NAME, MySQLStatementParserDATA, MySQLStatementParserDATAFILE, MySQLStatementParserDATE, MySQLStatementParserDATETIME, MySQLStatementParserDAY, MySQLStatementParserDEALLOCATE, MySQLStatementParserDEFAULT_AUTH, MySQLStatementParserDEFINER, MySQLStatementParserDEFINITION, MySQLStatementParserDELAY_KEY_WRITE, MySQLStatementParserDESCRIPTION, MySQLStatementParserDIAGNOSTICS, MySQLStatementParserDIRECTORY, MySQLStatementParserDISABLE, MySQLStatementParserDISCARD, MySQLStatementParserDISK, MySQLStatementParserDO, MySQLStatementParserDUMPFILE, MySQLStatementParserDUPLICATE, MySQLStatementParserDYNAMIC, MySQLStatementParserENABLE, MySQLStatementParserENCRYPTION, MySQLStatementParserEND, MySQLStatementParserENDS, MySQLStatementParserENFORCED, MySQLStatementParserENGINE, MySQLStatementParserENGINES, MySQLStatementParserENGINE_ATTRIBUTE, MySQLStatementParserENUM, MySQLStatementParserERROR, MySQLStatementParserERRORS, MySQLStatementParserESCAPE, MySQLStatementParserEVENT, MySQLStatementParserEVENTS, MySQLStatementParserEVERY, MySQLStatementParserEXCHANGE, MySQLStatementParserEXCLUDE, MySQLStatementParserEXECUTE, MySQLStatementParserEXPANSION, MySQLStatementParserEXPIRE, MySQLStatementParserEXPORT, MySQLStatementParserEXTENDED, MySQLStatementParserEXTENT_SIZE, MySQLStatementParserFAILED_LOGIN_ATTEMPTS, MySQLStatementParserFAST, MySQLStatementParserFAULTS, MySQLStatementParserFILE, MySQLStatementParserFILE_BLOCK_SIZE, MySQLStatementParserFILTER, MySQLStatementParserFIRST, MySQLStatementParserFIXED, MySQLStatementParserFLUSH, MySQLStatementParserFOLLOWING, MySQLStatementParserFOLLOWS, MySQLStatementParserFORMAT, MySQLStatementParserFOUND, MySQLStatementParserFULL, MySQLStatementParserGENERAL, MySQLStatementParserGEOMETRY, MySQLStatementParserGEOMETRYCOLLECTION, MySQLStatementParserGET_FORMAT, MySQLStatementParserGET_MASTER_PUBLIC_KEY, MySQLStatementParserGLOBAL, MySQLStatementParserGRANTS, MySQLStatementParserGROUP_REPLICATION, MySQLStatementParserHANDLER, MySQLStatementParserHASH, MySQLStatementParserHELP, MySQLStatementParserHISTOGRAM, MySQLStatementParserHISTORY, MySQLStatementParserHOST, MySQLStatementParserHOSTS, MySQLStatementParserHOUR, MySQLStatementParserIDENTIFIED, MySQLStatementParserIGNORE_SERVER_IDS, MySQLStatementParserIMPORT, MySQLStatementParserINACTIVE, MySQLStatementParserINDEXES, MySQLStatementParserINITIAL_SIZE, MySQLStatementParserINSERT_METHOD, MySQLStatementParserINSTALL, MySQLStatementParserINSTANCE, MySQLStatementParserINVISIBLE, MySQLStatementParserINVOKER, MySQLStatementParserIO, MySQLStatementParserIPC, MySQLStatementParserISOLATION, MySQLStatementParserISSUER, MySQLStatementParserJSON, MySQLStatementParserJSON_VALUE, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserLANGUAGE, MySQLStatementParserLAST, MySQLStatementParserLAST_VALUE, MySQLStatementParserLEAVES, MySQLStatementParserLESS, MySQLStatementParserLEVEL, MySQLStatementParserLINESTRING, MySQLStatementParserLIST, MySQLStatementParserLOCAL, MySQLStatementParserLOCKED, MySQLStatementParserLOCKS, MySQLStatementParserLOGFILE, MySQLStatementParserLOGS, MySQLStatementParserMASTER, MySQLStatementParserMASTER_AUTO_POSITION, MySQLStatementParserMASTER_COMPRESSION_ALGORITHM, MySQLStatementParserMASTER_CONNECT_RETRY, MySQLStatementParserMASTER_DELAY, MySQLStatementParserMASTER_HEARTBEAT_PERIOD, MySQLStatementParserMASTER_HOST, MySQLStatementParserMASTER_LOG_FILE, MySQLStatementParserMASTER_LOG_POS, MySQLStatementParserMASTER_PASSWORD, MySQLStatementParserMASTER_PORT, MySQLStatementParserMASTER_PUBLIC_KEY_PATH, MySQLStatementParserMASTER_RETRY_COUNT, MySQLStatementParserMASTER_SERVER_ID, MySQLStatementParserMASTER_SSL, MySQLStatementParserMASTER_SSL_CA, MySQLStatementParserMASTER_SSL_CAPATH, MySQLStatementParserMASTER_SSL_CERT, MySQLStatementParserMASTER_SSL_CIPHER, MySQLStatementParserMASTER_SSL_CRL, MySQLStatementParserMASTER_SSL_CRLPATH, MySQLStatementParserMASTER_SSL_KEY, MySQLStatementParserMASTER_TLS_CIPHERSUITES, MySQLStatementParserMASTER_TLS_VERSION, MySQLStatementParserMASTER_USER, MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL, MySQLStatementParserMAX_CONNECTIONS_PER_HOUR, MySQLStatementParserMAX_QUERIES_PER_HOUR, MySQLStatementParserMAX_ROWS, MySQLStatementParserMAX_SIZE, MySQLStatementParserMAX_UPDATES_PER_HOUR, MySQLStatementParserMAX_USER_CONNECTIONS, MySQLStatementParserMEDIUM, MySQLStatementParserMEMBER, MySQLStatementParserMEMORY, MySQLStatementParserMERGE, MySQLStatementParserMESSAGE_TEXT, MySQLStatementParserMICROSECOND, MySQLStatementParserMIGRATE, MySQLStatementParserMINUTE, MySQLStatementParserMIN_ROWS, MySQLStatementParserMODE, MySQLStatementParserMODIFY, MySQLStatementParserMONTH, MySQLStatementParserMULTILINESTRING, MySQLStatementParserMULTIPOINT, MySQLStatementParserMULTIPOLYGON, MySQLStatementParserMUTEX, MySQLStatementParserMYSQL_ERRNO, MySQLStatementParserNAME, MySQLStatementParserNAMES, MySQLStatementParserNATIONAL, MySQLStatementParserNCHAR, MySQLStatementParserNDBCLUSTER, MySQLStatementParserNESTED, MySQLStatementParserNETWORK_NAMESPACE, MySQLStatementParserNEVER, MySQLStatementParserNEW, MySQLStatementParserNEXT, MySQLStatementParserNO, MySQLStatementParserNODEGROUP, MySQLStatementParserNONE, MySQLStatementParserNOWAIT, MySQLStatementParserNO_WAIT, MySQLStatementParserNULLS, MySQLStatementParserNUMBER, MySQLStatementParserNVARCHAR, MySQLStatementParserOFF, MySQLStatementParserOFFSET, MySQLStatementParserOJ, MySQLStatementParserOLD, MySQLStatementParserONE, MySQLStatementParserONLY, MySQLStatementParserOPEN, MySQLStatementParserOPTIONAL, MySQLStatementParserOPTIONS, MySQLStatementParserORDINALITY, MySQLStatementParserORGANIZATION, MySQLStatementParserOTHERS, MySQLStatementParserOWNER, MySQLStatementParserPACK_KEYS, MySQLStatementParserPAGE, MySQLStatementParserPARSER, MySQLStatementParserPARTIAL, MySQLStatementParserPARTITIONING, MySQLStatementParserPARTITIONS, MySQLStatementParserPASSWORD, MySQLStatementParserPASSWORD_LOCK_TIME, MySQLStatementParserPATH, MySQLStatementParserPERSIST, MySQLStatementParserPERSIST_ONLY, MySQLStatementParserPHASE, MySQLStatementParserPLUGIN, MySQLStatementParserPLUGINS, MySQLStatementParserPLUGIN_DIR, MySQLStatementParserPOINT, MySQLStatementParserPOLYGON, MySQLStatementParserPORT, MySQLStatementParserPRECEDES, MySQLStatementParserPRECEDING, MySQLStatementParserPREPARE, MySQLStatementParserPRESERVE, MySQLStatementParserPREV, MySQLStatementParserPRIVILEGES, MySQLStatementParserPRIVILEGE_CHECKS_USER, MySQLStatementParserPROCESS, MySQLStatementParserPROCESSLIST, MySQLStatementParserPROFILE, MySQLStatementParserPROFILES, MySQLStatementParserPROXY, MySQLStatementParserQUARTER, MySQLStatementParserQUERY, MySQLStatementParserQUICK, MySQLStatementParserRANDOM, MySQLStatementParserREAD_ONLY, MySQLStatementParserREBUILD, MySQLStatementParserRECOVER, MySQLStatementParserREDO_BUFFER_SIZE, MySQLStatementParserREDUNDANT, MySQLStatementParserREFERENCE, MySQLStatementParserRELAY, MySQLStatementParserRELAYLOG, MySQLStatementParserRELAY_LOG_FILE, MySQLStatementParserRELAY_LOG_POS, MySQLStatementParserRELAY_THREAD, MySQLStatementParserRELOAD, MySQLStatementParserREMOVE, MySQLStatementParserREORGANIZE, MySQLStatementParserREPAIR, MySQLStatementParserREPEATABLE, MySQLStatementParserREPLICATE_DO_DB, MySQLStatementParserREPLICATE_DO_TABLE, MySQLStatementParserREPLICATE_IGNORE_DB, MySQLStatementParserREPLICATE_IGNORE_TABLE, MySQLStatementParserREPLICATE_REWRITE_DB, MySQLStatementParserREPLICATE_WILD_DO_TABLE, MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE, MySQLStatementParserREPLICATION, MySQLStatementParserREQUIRE_ROW_FORMAT, MySQLStatementParserRESET, MySQLStatementParserRESOURCE, MySQLStatementParserRESPECT, MySQLStatementParserRESTART, MySQLStatementParserRESTORE, MySQLStatementParserRESUME, MySQLStatementParserRETAIN, MySQLStatementParserRETURNED_SQLSTATE, MySQLStatementParserRETURNING, MySQLStatementParserRETURNS, MySQLStatementParserREUSE, MySQLStatementParserREVERSE, MySQLStatementParserROLE, MySQLStatementParserROLLBACK, MySQLStatementParserROLLUP, MySQLStatementParserROTATE, MySQLStatementParserROUTINE, MySQLStatementParserROW_COUNT, MySQLStatementParserROW_FORMAT, MySQLStatementParserRTREE, MySQLStatementParserSAVEPOINT, MySQLStatementParserSCHEDULE, MySQLStatementParserSCHEMA_NAME, MySQLStatementParserSECOND, MySQLStatementParserSECONDARY, MySQLStatementParserSECONDARY_ENGINE, MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, MySQLStatementParserSECONDARY_LOAD, MySQLStatementParserSECONDARY_UNLOAD, MySQLStatementParserSECURITY, MySQLStatementParserSERIAL, MySQLStatementParserSERIALIZABLE, MySQLStatementParserSERVER, MySQLStatementParserSESSION, MySQLStatementParserSHARE, MySQLStatementParserSHUTDOWN, MySQLStatementParserSIGNED, MySQLStatementParserSIMPLE, MySQLStatementParserSLAVE, MySQLStatementParserSLOW, MySQLStatementParserSNAPSHOT, MySQLStatementParserSOCKET, MySQLStatementParserSONAME, MySQLStatementParserSOUNDS, MySQLStatementParserSOURCE, MySQLStatementParserSQL_AFTER_GTIDS, MySQLStatementParserSQL_AFTER_MTS_GAPS, MySQLStatementParserSQL_BEFORE_GTIDS, MySQLStatementParserSQL_BUFFER_RESULT, MySQLStatementParserSQL_NO_CACHE, MySQLStatementParserSQL_THREAD, MySQLStatementParserSRID, MySQLStatementParserSTACKED, MySQLStatementParserSTART, MySQLStatementParserSTARTS, MySQLStatementParserSTATS_AUTO_RECALC, MySQLStatementParserSTATS_PERSISTENT, MySQLStatementParserSTATS_SAMPLE_PAGES, MySQLStatementParserSTATUS, MySQLStatementParserSTOP, MySQLStatementParserSTORAGE, MySQLStatementParserSTREAM, MySQLStatementParserSTRING, MySQLStatementParserSUBCLASS_ORIGIN, MySQLStatementParserSUBJECT, MySQLStatementParserSUBPARTITION, MySQLStatementParserSUBPARTITIONS, MySQLStatementParserSUPER, MySQLStatementParserSUSPEND, MySQLStatementParserSWAPS, MySQLStatementParserSWITCHES, MySQLStatementParserTABLES, MySQLStatementParserTABLESPACE, MySQLStatementParserTABLE_CHECKSUM, MySQLStatementParserTABLE_NAME, MySQLStatementParserTEMPORARY, MySQLStatementParserTEMPTABLE, MySQLStatementParserTEXT, MySQLStatementParserTHAN, MySQLStatementParserTHREAD_PRIORITY, MySQLStatementParserTIES, MySQLStatementParserTIME, MySQLStatementParserTIMESTAMP, MySQLStatementParserTIMESTAMP_ADD, MySQLStatementParserTIMESTAMP_DIFF, MySQLStatementParserTLS, MySQLStatementParserTRANSACTION, MySQLStatementParserTRIGGERS, MySQLStatementParserTRUNCATE, MySQLStatementParserTYPE, MySQLStatementParserTYPES, MySQLStatementParserUNBOUNDED, MySQLStatementParserUNCOMMITTED, MySQLStatementParserUNDEFINED, MySQLStatementParserUNDOFILE, MySQLStatementParserUNDO_BUFFER_SIZE, MySQLStatementParserUNICODE, MySQLStatementParserUNINSTALL, MySQLStatementParserUNKNOWN, MySQLStatementParserUNTIL, MySQLStatementParserUPGRADE, MySQLStatementParserUSER, MySQLStatementParserUSER_RESOURCES, MySQLStatementParserUSE_FRM, MySQLStatementParserVALIDATION, MySQLStatementParserVALUE, MySQLStatementParserVARIABLES, MySQLStatementParserVCPU, MySQLStatementParserVIEW, MySQLStatementParserVISIBLE, MySQLStatementParserWAIT, MySQLStatementParserWARNINGS, MySQLStatementParserWEEK, MySQLStatementParserWEIGHT_STRING, MySQLStatementParserWITHOUT, MySQLStatementParserWORK, MySQLStatementParserWRAPPER, MySQLStatementParserX509, MySQLStatementParserXA, MySQLStatementParserXID, MySQLStatementParserXML, MySQLStatementParserYEAR, MySQLStatementParserIDENTIFIER_, MySQLStatementParserDOUBLE_QUOTED_TEXT:
		{
			p.SetState(6634)
			p.Identifier()
		}

	case MySQLStatementParserDEFAULT:
		{
			p.SetState(6635)
			p.Match(MySQLStatementParserDEFAULT)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICacheTableIndexListContext is an interface to support dynamic dispatch.
type ICacheTableIndexListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCacheTableIndexListContext differentiates from other interfaces.
	IsCacheTableIndexListContext()
}

type CacheTableIndexListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCacheTableIndexListContext() *CacheTableIndexListContext {
	var p = new(CacheTableIndexListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_cacheTableIndexList
	return p
}

func (*CacheTableIndexListContext) IsCacheTableIndexListContext() {}

func NewCacheTableIndexListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CacheTableIndexListContext {
	var p = new(CacheTableIndexListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_cacheTableIndexList

	return p
}

func (s *CacheTableIndexListContext) GetParser() antlr.Parser { return s.parser }

func (s *CacheTableIndexListContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *CacheTableIndexListContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *CacheTableIndexListContext) AllIndexName() []IIndexNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexNameContext)(nil)).Elem())
	var tst = make([]IIndexNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexNameContext)
		}
	}

	return tst
}

func (s *CacheTableIndexListContext) IndexName(i int) IIndexNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexNameContext)
}

func (s *CacheTableIndexListContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *CacheTableIndexListContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINDEX, 0)
}

func (s *CacheTableIndexListContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserKEY, 0)
}

func (s *CacheTableIndexListContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *CacheTableIndexListContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *CacheTableIndexListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CacheTableIndexListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CacheTableIndexListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCacheTableIndexList(s)
	}
}

func (s *CacheTableIndexListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCacheTableIndexList(s)
	}
}

func (s *CacheTableIndexListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCacheTableIndexList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CacheTableIndexList() (localctx ICacheTableIndexListContext) {
	this := p
	_ = this

	localctx = NewCacheTableIndexListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 966, MySQLStatementParserRULE_cacheTableIndexList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6638)
		p.TableName()
	}
	p.SetState(6651)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserINDEX || _la == MySQLStatementParserKEY {
		{
			p.SetState(6639)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserINDEX || _la == MySQLStatementParserKEY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(6640)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(6641)
			p.IndexName()
		}
		p.SetState(6646)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(6642)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(6643)
				p.IndexName()
			}

			p.SetState(6648)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6649)
			p.Match(MySQLStatementParserRP_)
		}

	}

	return localctx
}

// IPartitionListContext is an interface to support dynamic dispatch.
type IPartitionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitionListContext differentiates from other interfaces.
	IsPartitionListContext()
}

type PartitionListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionListContext() *PartitionListContext {
	var p = new(PartitionListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_partitionList
	return p
}

func (*PartitionListContext) IsPartitionListContext() {}

func NewPartitionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionListContext {
	var p = new(PartitionListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_partitionList

	return p
}

func (s *PartitionListContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionListContext) AllPartitionName() []IPartitionNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionNameContext)(nil)).Elem())
	var tst = make([]IPartitionNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionNameContext)
		}
	}

	return tst
}

func (s *PartitionListContext) PartitionName(i int) IPartitionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionNameContext)
}

func (s *PartitionListContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *PartitionListContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *PartitionListContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALL, 0)
}

func (s *PartitionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartitionListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterPartitionList(s)
	}
}

func (s *PartitionListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitPartitionList(s)
	}
}

func (s *PartitionListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitPartitionList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) PartitionList() (localctx IPartitionListContext) {
	this := p
	_ = this

	localctx = NewPartitionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 968, MySQLStatementParserRULE_partitionList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6662)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserMAX, MySQLStatementParserMIN, MySQLStatementParserSUM, MySQLStatementParserCOUNT, MySQLStatementParserGROUP_CONCAT, MySQLStatementParserCAST, MySQLStatementParserPOSITION, MySQLStatementParserSUBSTRING, MySQLStatementParserSUBSTR, MySQLStatementParserEXTRACT, MySQLStatementParserTRIM, MySQLStatementParserLAST_DAY, MySQLStatementParserTRADITIONAL, MySQLStatementParserTREE, MySQLStatementParserMYSQL_ADMIN, MySQLStatementParserINSTANT, MySQLStatementParserINPLACE, MySQLStatementParserCOPY, MySQLStatementParserUL_BINARY, MySQLStatementParserAUTOCOMMIT, MySQLStatementParserINNODB, MySQLStatementParserREDO_LOG, MySQLStatementParserACCOUNT, MySQLStatementParserACTION, MySQLStatementParserACTIVE, MySQLStatementParserADMIN, MySQLStatementParserAFTER, MySQLStatementParserAGAINST, MySQLStatementParserAGGREGATE, MySQLStatementParserALGORITHM, MySQLStatementParserALWAYS, MySQLStatementParserANY, MySQLStatementParserARRAY, MySQLStatementParserASCII, MySQLStatementParserAT, MySQLStatementParserATTRIBUTE, MySQLStatementParserAUTOEXTEND_SIZE, MySQLStatementParserAUTO_INCREMENT, MySQLStatementParserAVG, MySQLStatementParserAVG_ROW_LENGTH, MySQLStatementParserBACKUP, MySQLStatementParserBEGIN, MySQLStatementParserBINLOG, MySQLStatementParserBIT, MySQLStatementParserBLOCK, MySQLStatementParserBOOL, MySQLStatementParserBOOLEAN, MySQLStatementParserBTREE, MySQLStatementParserBUCKETS, MySQLStatementParserBYTE, MySQLStatementParserCACHE, MySQLStatementParserCASCADED, MySQLStatementParserCATALOG_NAME, MySQLStatementParserCHAIN, MySQLStatementParserCHANGED, MySQLStatementParserCHANNEL, MySQLStatementParserCHARSET, MySQLStatementParserCHECKSUM, MySQLStatementParserCIPHER, MySQLStatementParserCLASS_ORIGIN, MySQLStatementParserCLIENT, MySQLStatementParserCLONE, MySQLStatementParserCLOSE, MySQLStatementParserCOALESCE, MySQLStatementParserCODE, MySQLStatementParserCOLLATION, MySQLStatementParserCOLUMNS, MySQLStatementParserCOLUMN_FORMAT, MySQLStatementParserCOLUMN_NAME, MySQLStatementParserCOMMENT, MySQLStatementParserCOMMIT, MySQLStatementParserCOMMITTED, MySQLStatementParserCOMPACT, MySQLStatementParserCOMPLETION, MySQLStatementParserCOMPONENT, MySQLStatementParserCOMPRESSED, MySQLStatementParserCOMPRESSION, MySQLStatementParserCONCURRENT, MySQLStatementParserCONNECTION, MySQLStatementParserCONSISTENT, MySQLStatementParserCONSTRAINT_CATALOG, MySQLStatementParserCONSTRAINT_NAME, MySQLStatementParserCONSTRAINT_SCHEMA, MySQLStatementParserCONTAINS, MySQLStatementParserCONTEXT, MySQLStatementParserCPU, MySQLStatementParserCURRENT, MySQLStatementParserCURSOR_NAME, MySQLStatementParserDATA, MySQLStatementParserDATAFILE, MySQLStatementParserDATE, MySQLStatementParserDATETIME, MySQLStatementParserDAY, MySQLStatementParserDEALLOCATE, MySQLStatementParserDEFAULT_AUTH, MySQLStatementParserDEFINER, MySQLStatementParserDEFINITION, MySQLStatementParserDELAY_KEY_WRITE, MySQLStatementParserDESCRIPTION, MySQLStatementParserDIAGNOSTICS, MySQLStatementParserDIRECTORY, MySQLStatementParserDISABLE, MySQLStatementParserDISCARD, MySQLStatementParserDISK, MySQLStatementParserDO, MySQLStatementParserDUMPFILE, MySQLStatementParserDUPLICATE, MySQLStatementParserDYNAMIC, MySQLStatementParserENABLE, MySQLStatementParserENCRYPTION, MySQLStatementParserEND, MySQLStatementParserENDS, MySQLStatementParserENFORCED, MySQLStatementParserENGINE, MySQLStatementParserENGINES, MySQLStatementParserENGINE_ATTRIBUTE, MySQLStatementParserENUM, MySQLStatementParserERROR, MySQLStatementParserERRORS, MySQLStatementParserESCAPE, MySQLStatementParserEVENT, MySQLStatementParserEVENTS, MySQLStatementParserEVERY, MySQLStatementParserEXCHANGE, MySQLStatementParserEXCLUDE, MySQLStatementParserEXECUTE, MySQLStatementParserEXPANSION, MySQLStatementParserEXPIRE, MySQLStatementParserEXPORT, MySQLStatementParserEXTENDED, MySQLStatementParserEXTENT_SIZE, MySQLStatementParserFAILED_LOGIN_ATTEMPTS, MySQLStatementParserFAST, MySQLStatementParserFAULTS, MySQLStatementParserFILE, MySQLStatementParserFILE_BLOCK_SIZE, MySQLStatementParserFILTER, MySQLStatementParserFIRST, MySQLStatementParserFIXED, MySQLStatementParserFLUSH, MySQLStatementParserFOLLOWING, MySQLStatementParserFOLLOWS, MySQLStatementParserFORMAT, MySQLStatementParserFOUND, MySQLStatementParserFULL, MySQLStatementParserGENERAL, MySQLStatementParserGEOMETRY, MySQLStatementParserGEOMETRYCOLLECTION, MySQLStatementParserGET_FORMAT, MySQLStatementParserGET_MASTER_PUBLIC_KEY, MySQLStatementParserGLOBAL, MySQLStatementParserGRANTS, MySQLStatementParserGROUP_REPLICATION, MySQLStatementParserHANDLER, MySQLStatementParserHASH, MySQLStatementParserHELP, MySQLStatementParserHISTOGRAM, MySQLStatementParserHISTORY, MySQLStatementParserHOST, MySQLStatementParserHOSTS, MySQLStatementParserHOUR, MySQLStatementParserIDENTIFIED, MySQLStatementParserIGNORE_SERVER_IDS, MySQLStatementParserIMPORT, MySQLStatementParserINACTIVE, MySQLStatementParserINDEXES, MySQLStatementParserINITIAL_SIZE, MySQLStatementParserINSERT_METHOD, MySQLStatementParserINSTALL, MySQLStatementParserINSTANCE, MySQLStatementParserINVISIBLE, MySQLStatementParserINVOKER, MySQLStatementParserIO, MySQLStatementParserIPC, MySQLStatementParserISOLATION, MySQLStatementParserISSUER, MySQLStatementParserJSON, MySQLStatementParserJSON_VALUE, MySQLStatementParserKEY_BLOCK_SIZE, MySQLStatementParserLANGUAGE, MySQLStatementParserLAST, MySQLStatementParserLAST_VALUE, MySQLStatementParserLEAVES, MySQLStatementParserLESS, MySQLStatementParserLEVEL, MySQLStatementParserLINESTRING, MySQLStatementParserLIST, MySQLStatementParserLOCAL, MySQLStatementParserLOCKED, MySQLStatementParserLOCKS, MySQLStatementParserLOGFILE, MySQLStatementParserLOGS, MySQLStatementParserMASTER, MySQLStatementParserMASTER_AUTO_POSITION, MySQLStatementParserMASTER_COMPRESSION_ALGORITHM, MySQLStatementParserMASTER_CONNECT_RETRY, MySQLStatementParserMASTER_DELAY, MySQLStatementParserMASTER_HEARTBEAT_PERIOD, MySQLStatementParserMASTER_HOST, MySQLStatementParserMASTER_LOG_FILE, MySQLStatementParserMASTER_LOG_POS, MySQLStatementParserMASTER_PASSWORD, MySQLStatementParserMASTER_PORT, MySQLStatementParserMASTER_PUBLIC_KEY_PATH, MySQLStatementParserMASTER_RETRY_COUNT, MySQLStatementParserMASTER_SERVER_ID, MySQLStatementParserMASTER_SSL, MySQLStatementParserMASTER_SSL_CA, MySQLStatementParserMASTER_SSL_CAPATH, MySQLStatementParserMASTER_SSL_CERT, MySQLStatementParserMASTER_SSL_CIPHER, MySQLStatementParserMASTER_SSL_CRL, MySQLStatementParserMASTER_SSL_CRLPATH, MySQLStatementParserMASTER_SSL_KEY, MySQLStatementParserMASTER_TLS_CIPHERSUITES, MySQLStatementParserMASTER_TLS_VERSION, MySQLStatementParserMASTER_USER, MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL, MySQLStatementParserMAX_CONNECTIONS_PER_HOUR, MySQLStatementParserMAX_QUERIES_PER_HOUR, MySQLStatementParserMAX_ROWS, MySQLStatementParserMAX_SIZE, MySQLStatementParserMAX_UPDATES_PER_HOUR, MySQLStatementParserMAX_USER_CONNECTIONS, MySQLStatementParserMEDIUM, MySQLStatementParserMEMBER, MySQLStatementParserMEMORY, MySQLStatementParserMERGE, MySQLStatementParserMESSAGE_TEXT, MySQLStatementParserMICROSECOND, MySQLStatementParserMIGRATE, MySQLStatementParserMINUTE, MySQLStatementParserMIN_ROWS, MySQLStatementParserMODE, MySQLStatementParserMODIFY, MySQLStatementParserMONTH, MySQLStatementParserMULTILINESTRING, MySQLStatementParserMULTIPOINT, MySQLStatementParserMULTIPOLYGON, MySQLStatementParserMUTEX, MySQLStatementParserMYSQL_ERRNO, MySQLStatementParserNAME, MySQLStatementParserNAMES, MySQLStatementParserNATIONAL, MySQLStatementParserNCHAR, MySQLStatementParserNDBCLUSTER, MySQLStatementParserNESTED, MySQLStatementParserNETWORK_NAMESPACE, MySQLStatementParserNEVER, MySQLStatementParserNEW, MySQLStatementParserNEXT, MySQLStatementParserNO, MySQLStatementParserNODEGROUP, MySQLStatementParserNONE, MySQLStatementParserNOWAIT, MySQLStatementParserNO_WAIT, MySQLStatementParserNULLS, MySQLStatementParserNUMBER, MySQLStatementParserNVARCHAR, MySQLStatementParserOFF, MySQLStatementParserOFFSET, MySQLStatementParserOJ, MySQLStatementParserOLD, MySQLStatementParserONE, MySQLStatementParserONLY, MySQLStatementParserOPEN, MySQLStatementParserOPTIONAL, MySQLStatementParserOPTIONS, MySQLStatementParserORDINALITY, MySQLStatementParserORGANIZATION, MySQLStatementParserOTHERS, MySQLStatementParserOWNER, MySQLStatementParserPACK_KEYS, MySQLStatementParserPAGE, MySQLStatementParserPARSER, MySQLStatementParserPARTIAL, MySQLStatementParserPARTITIONING, MySQLStatementParserPARTITIONS, MySQLStatementParserPASSWORD, MySQLStatementParserPASSWORD_LOCK_TIME, MySQLStatementParserPATH, MySQLStatementParserPERSIST, MySQLStatementParserPERSIST_ONLY, MySQLStatementParserPHASE, MySQLStatementParserPLUGIN, MySQLStatementParserPLUGINS, MySQLStatementParserPLUGIN_DIR, MySQLStatementParserPOINT, MySQLStatementParserPOLYGON, MySQLStatementParserPORT, MySQLStatementParserPRECEDES, MySQLStatementParserPRECEDING, MySQLStatementParserPREPARE, MySQLStatementParserPRESERVE, MySQLStatementParserPREV, MySQLStatementParserPRIVILEGES, MySQLStatementParserPRIVILEGE_CHECKS_USER, MySQLStatementParserPROCESS, MySQLStatementParserPROCESSLIST, MySQLStatementParserPROFILE, MySQLStatementParserPROFILES, MySQLStatementParserPROXY, MySQLStatementParserQUARTER, MySQLStatementParserQUERY, MySQLStatementParserQUICK, MySQLStatementParserRANDOM, MySQLStatementParserREAD_ONLY, MySQLStatementParserREBUILD, MySQLStatementParserRECOVER, MySQLStatementParserREDO_BUFFER_SIZE, MySQLStatementParserREDUNDANT, MySQLStatementParserREFERENCE, MySQLStatementParserRELAY, MySQLStatementParserRELAYLOG, MySQLStatementParserRELAY_LOG_FILE, MySQLStatementParserRELAY_LOG_POS, MySQLStatementParserRELAY_THREAD, MySQLStatementParserRELOAD, MySQLStatementParserREMOVE, MySQLStatementParserREORGANIZE, MySQLStatementParserREPAIR, MySQLStatementParserREPEATABLE, MySQLStatementParserREPLICATE_DO_DB, MySQLStatementParserREPLICATE_DO_TABLE, MySQLStatementParserREPLICATE_IGNORE_DB, MySQLStatementParserREPLICATE_IGNORE_TABLE, MySQLStatementParserREPLICATE_REWRITE_DB, MySQLStatementParserREPLICATE_WILD_DO_TABLE, MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE, MySQLStatementParserREPLICATION, MySQLStatementParserREQUIRE_ROW_FORMAT, MySQLStatementParserRESET, MySQLStatementParserRESOURCE, MySQLStatementParserRESPECT, MySQLStatementParserRESTART, MySQLStatementParserRESTORE, MySQLStatementParserRESUME, MySQLStatementParserRETAIN, MySQLStatementParserRETURNED_SQLSTATE, MySQLStatementParserRETURNING, MySQLStatementParserRETURNS, MySQLStatementParserREUSE, MySQLStatementParserREVERSE, MySQLStatementParserROLE, MySQLStatementParserROLLBACK, MySQLStatementParserROLLUP, MySQLStatementParserROTATE, MySQLStatementParserROUTINE, MySQLStatementParserROW_COUNT, MySQLStatementParserROW_FORMAT, MySQLStatementParserRTREE, MySQLStatementParserSAVEPOINT, MySQLStatementParserSCHEDULE, MySQLStatementParserSCHEMA_NAME, MySQLStatementParserSECOND, MySQLStatementParserSECONDARY, MySQLStatementParserSECONDARY_ENGINE, MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE, MySQLStatementParserSECONDARY_LOAD, MySQLStatementParserSECONDARY_UNLOAD, MySQLStatementParserSECURITY, MySQLStatementParserSERIAL, MySQLStatementParserSERIALIZABLE, MySQLStatementParserSERVER, MySQLStatementParserSESSION, MySQLStatementParserSHARE, MySQLStatementParserSHUTDOWN, MySQLStatementParserSIGNED, MySQLStatementParserSIMPLE, MySQLStatementParserSLAVE, MySQLStatementParserSLOW, MySQLStatementParserSNAPSHOT, MySQLStatementParserSOCKET, MySQLStatementParserSONAME, MySQLStatementParserSOUNDS, MySQLStatementParserSOURCE, MySQLStatementParserSQL_AFTER_GTIDS, MySQLStatementParserSQL_AFTER_MTS_GAPS, MySQLStatementParserSQL_BEFORE_GTIDS, MySQLStatementParserSQL_BUFFER_RESULT, MySQLStatementParserSQL_NO_CACHE, MySQLStatementParserSQL_THREAD, MySQLStatementParserSRID, MySQLStatementParserSTACKED, MySQLStatementParserSTART, MySQLStatementParserSTARTS, MySQLStatementParserSTATS_AUTO_RECALC, MySQLStatementParserSTATS_PERSISTENT, MySQLStatementParserSTATS_SAMPLE_PAGES, MySQLStatementParserSTATUS, MySQLStatementParserSTOP, MySQLStatementParserSTORAGE, MySQLStatementParserSTREAM, MySQLStatementParserSTRING, MySQLStatementParserSUBCLASS_ORIGIN, MySQLStatementParserSUBJECT, MySQLStatementParserSUBPARTITION, MySQLStatementParserSUBPARTITIONS, MySQLStatementParserSUPER, MySQLStatementParserSUSPEND, MySQLStatementParserSWAPS, MySQLStatementParserSWITCHES, MySQLStatementParserTABLES, MySQLStatementParserTABLESPACE, MySQLStatementParserTABLE_CHECKSUM, MySQLStatementParserTABLE_NAME, MySQLStatementParserTEMPORARY, MySQLStatementParserTEMPTABLE, MySQLStatementParserTEXT, MySQLStatementParserTHAN, MySQLStatementParserTHREAD_PRIORITY, MySQLStatementParserTIES, MySQLStatementParserTIME, MySQLStatementParserTIMESTAMP, MySQLStatementParserTIMESTAMP_ADD, MySQLStatementParserTIMESTAMP_DIFF, MySQLStatementParserTLS, MySQLStatementParserTRANSACTION, MySQLStatementParserTRIGGERS, MySQLStatementParserTRUNCATE, MySQLStatementParserTYPE, MySQLStatementParserTYPES, MySQLStatementParserUNBOUNDED, MySQLStatementParserUNCOMMITTED, MySQLStatementParserUNDEFINED, MySQLStatementParserUNDOFILE, MySQLStatementParserUNDO_BUFFER_SIZE, MySQLStatementParserUNICODE, MySQLStatementParserUNINSTALL, MySQLStatementParserUNKNOWN, MySQLStatementParserUNTIL, MySQLStatementParserUPGRADE, MySQLStatementParserUSER, MySQLStatementParserUSER_RESOURCES, MySQLStatementParserUSE_FRM, MySQLStatementParserVALIDATION, MySQLStatementParserVALUE, MySQLStatementParserVARIABLES, MySQLStatementParserVCPU, MySQLStatementParserVIEW, MySQLStatementParserVISIBLE, MySQLStatementParserWAIT, MySQLStatementParserWARNINGS, MySQLStatementParserWEEK, MySQLStatementParserWEIGHT_STRING, MySQLStatementParserWITHOUT, MySQLStatementParserWORK, MySQLStatementParserWRAPPER, MySQLStatementParserX509, MySQLStatementParserXA, MySQLStatementParserXID, MySQLStatementParserXML, MySQLStatementParserYEAR, MySQLStatementParserIDENTIFIER_, MySQLStatementParserDOUBLE_QUOTED_TEXT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6653)
			p.PartitionName()
		}
		p.SetState(6658)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(6654)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(6655)
				p.PartitionName()
			}

			p.SetState(6660)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case MySQLStatementParserALL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6661)
			p.Match(MySQLStatementParserALL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFlushContext is an interface to support dynamic dispatch.
type IFlushContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFlushContext differentiates from other interfaces.
	IsFlushContext()
}

type FlushContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFlushContext() *FlushContext {
	var p = new(FlushContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_flush
	return p
}

func (*FlushContext) IsFlushContext() {}

func NewFlushContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FlushContext {
	var p = new(FlushContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_flush

	return p
}

func (s *FlushContext) GetParser() antlr.Parser { return s.parser }

func (s *FlushContext) FLUSH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFLUSH, 0)
}

func (s *FlushContext) AllFlushOption() []IFlushOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFlushOptionContext)(nil)).Elem())
	var tst = make([]IFlushOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFlushOptionContext)
		}
	}

	return tst
}

func (s *FlushContext) FlushOption(i int) IFlushOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFlushOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFlushOptionContext)
}

func (s *FlushContext) TablesOption() ITablesOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablesOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablesOptionContext)
}

func (s *FlushContext) NO_WRITE_TO_BINLOG() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNO_WRITE_TO_BINLOG, 0)
}

func (s *FlushContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCAL, 0)
}

func (s *FlushContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *FlushContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *FlushContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FlushContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FlushContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterFlush(s)
	}
}

func (s *FlushContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitFlush(s)
	}
}

func (s *FlushContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitFlush(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Flush() (localctx IFlushContext) {
	this := p
	_ = this

	localctx = NewFlushContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 970, MySQLStatementParserRULE_flush)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6664)
		p.Match(MySQLStatementParserFLUSH)
	}
	p.SetState(6666)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserLOCAL || _la == MySQLStatementParserNO_WRITE_TO_BINLOG {
		{
			p.SetState(6665)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserLOCAL || _la == MySQLStatementParserNO_WRITE_TO_BINLOG) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(6677)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserBINARY, MySQLStatementParserENGINE, MySQLStatementParserERROR, MySQLStatementParserGENERAL, MySQLStatementParserHOSTS, MySQLStatementParserLOGS, MySQLStatementParserOPTIMIZER_COSTS, MySQLStatementParserPRIVILEGES, MySQLStatementParserRELAY, MySQLStatementParserSLOW, MySQLStatementParserSTATUS, MySQLStatementParserUSER_RESOURCES:
		{
			p.SetState(6668)
			p.FlushOption()
		}
		p.SetState(6673)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(6669)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(6670)
				p.FlushOption()
			}

			p.SetState(6675)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case MySQLStatementParserTABLES:
		{
			p.SetState(6676)
			p.TablesOption()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFlushOptionContext is an interface to support dynamic dispatch.
type IFlushOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFlushOptionContext differentiates from other interfaces.
	IsFlushOptionContext()
}

type FlushOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFlushOptionContext() *FlushOptionContext {
	var p = new(FlushOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_flushOption
	return p
}

func (*FlushOptionContext) IsFlushOptionContext() {}

func NewFlushOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FlushOptionContext {
	var p = new(FlushOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_flushOption

	return p
}

func (s *FlushOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *FlushOptionContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBINARY, 0)
}

func (s *FlushOptionContext) LOGS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOGS, 0)
}

func (s *FlushOptionContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserENGINE, 0)
}

func (s *FlushOptionContext) ERROR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserERROR, 0)
}

func (s *FlushOptionContext) GENERAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGENERAL, 0)
}

func (s *FlushOptionContext) HOSTS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHOSTS, 0)
}

func (s *FlushOptionContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPRIVILEGES, 0)
}

func (s *FlushOptionContext) OPTIMIZER_COSTS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOPTIMIZER_COSTS, 0)
}

func (s *FlushOptionContext) RELAY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRELAY, 0)
}

func (s *FlushOptionContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOR, 0)
}

func (s *FlushOptionContext) CHANNEL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHANNEL, 0)
}

func (s *FlushOptionContext) ChannelName() IChannelNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChannelNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChannelNameContext)
}

func (s *FlushOptionContext) SLOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSLOW, 0)
}

func (s *FlushOptionContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTATUS, 0)
}

func (s *FlushOptionContext) USER_RESOURCES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUSER_RESOURCES, 0)
}

func (s *FlushOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FlushOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FlushOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterFlushOption(s)
	}
}

func (s *FlushOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitFlushOption(s)
	}
}

func (s *FlushOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitFlushOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) FlushOption() (localctx IFlushOptionContext) {
	this := p
	_ = this

	localctx = NewFlushOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 972, MySQLStatementParserRULE_flushOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6702)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserBINARY:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6679)
			p.Match(MySQLStatementParserBINARY)
		}
		{
			p.SetState(6680)
			p.Match(MySQLStatementParserLOGS)
		}

	case MySQLStatementParserENGINE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6681)
			p.Match(MySQLStatementParserENGINE)
		}
		{
			p.SetState(6682)
			p.Match(MySQLStatementParserLOGS)
		}

	case MySQLStatementParserERROR:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6683)
			p.Match(MySQLStatementParserERROR)
		}
		{
			p.SetState(6684)
			p.Match(MySQLStatementParserLOGS)
		}

	case MySQLStatementParserGENERAL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6685)
			p.Match(MySQLStatementParserGENERAL)
		}
		{
			p.SetState(6686)
			p.Match(MySQLStatementParserLOGS)
		}

	case MySQLStatementParserHOSTS:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6687)
			p.Match(MySQLStatementParserHOSTS)
		}

	case MySQLStatementParserLOGS:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(6688)
			p.Match(MySQLStatementParserLOGS)
		}

	case MySQLStatementParserPRIVILEGES:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(6689)
			p.Match(MySQLStatementParserPRIVILEGES)
		}

	case MySQLStatementParserOPTIMIZER_COSTS:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(6690)
			p.Match(MySQLStatementParserOPTIMIZER_COSTS)
		}

	case MySQLStatementParserRELAY:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(6691)
			p.Match(MySQLStatementParserRELAY)
		}
		{
			p.SetState(6692)
			p.Match(MySQLStatementParserLOGS)
		}
		p.SetState(6696)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserFOR {
			{
				p.SetState(6693)
				p.Match(MySQLStatementParserFOR)
			}
			{
				p.SetState(6694)
				p.Match(MySQLStatementParserCHANNEL)
			}
			{
				p.SetState(6695)
				p.ChannelName()
			}

		}

	case MySQLStatementParserSLOW:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(6698)
			p.Match(MySQLStatementParserSLOW)
		}
		{
			p.SetState(6699)
			p.Match(MySQLStatementParserLOGS)
		}

	case MySQLStatementParserSTATUS:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(6700)
			p.Match(MySQLStatementParserSTATUS)
		}

	case MySQLStatementParserUSER_RESOURCES:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(6701)
			p.Match(MySQLStatementParserUSER_RESOURCES)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITablesOptionContext is an interface to support dynamic dispatch.
type ITablesOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTablesOptionContext differentiates from other interfaces.
	IsTablesOptionContext()
}

type TablesOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTablesOptionContext() *TablesOptionContext {
	var p = new(TablesOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_tablesOption
	return p
}

func (*TablesOptionContext) IsTablesOptionContext() {}

func NewTablesOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TablesOptionContext {
	var p = new(TablesOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_tablesOption

	return p
}

func (s *TablesOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *TablesOptionContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLES, 0)
}

func (s *TablesOptionContext) AllTableName() []ITableNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableNameContext)(nil)).Elem())
	var tst = make([]ITableNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableNameContext)
		}
	}

	return tst
}

func (s *TablesOptionContext) TableName(i int) ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *TablesOptionContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *TablesOptionContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *TablesOptionContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWITH, 0)
}

func (s *TablesOptionContext) READ() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREAD, 0)
}

func (s *TablesOptionContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCK, 0)
}

func (s *TablesOptionContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOR, 0)
}

func (s *TablesOptionContext) EXPORT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXPORT, 0)
}

func (s *TablesOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TablesOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TablesOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTablesOption(s)
	}
}

func (s *TablesOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTablesOption(s)
	}
}

func (s *TablesOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTablesOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TablesOption() (localctx ITablesOptionContext) {
	this := p
	_ = this

	localctx = NewTablesOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 974, MySQLStatementParserRULE_tablesOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6743)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 878, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6704)
			p.Match(MySQLStatementParserTABLES)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6705)
			p.Match(MySQLStatementParserTABLES)
		}
		{
			p.SetState(6706)
			p.TableName()
		}
		p.SetState(6711)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(6707)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(6708)
				p.TableName()
			}

			p.SetState(6713)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6714)
			p.Match(MySQLStatementParserTABLES)
		}
		{
			p.SetState(6715)
			p.Match(MySQLStatementParserWITH)
		}
		{
			p.SetState(6716)
			p.Match(MySQLStatementParserREAD)
		}
		{
			p.SetState(6717)
			p.Match(MySQLStatementParserLOCK)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6718)
			p.Match(MySQLStatementParserTABLES)
		}
		{
			p.SetState(6719)
			p.TableName()
		}
		p.SetState(6724)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(6720)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(6721)
				p.TableName()
			}

			p.SetState(6726)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6727)
			p.Match(MySQLStatementParserWITH)
		}
		{
			p.SetState(6728)
			p.Match(MySQLStatementParserREAD)
		}
		{
			p.SetState(6729)
			p.Match(MySQLStatementParserLOCK)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6731)
			p.Match(MySQLStatementParserTABLES)
		}
		{
			p.SetState(6732)
			p.TableName()
		}
		p.SetState(6737)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(6733)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(6734)
				p.TableName()
			}

			p.SetState(6739)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6740)
			p.Match(MySQLStatementParserFOR)
		}
		{
			p.SetState(6741)
			p.Match(MySQLStatementParserEXPORT)
		}

	}

	return localctx
}

// IKillContext is an interface to support dynamic dispatch.
type IKillContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKillContext differentiates from other interfaces.
	IsKillContext()
}

type KillContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKillContext() *KillContext {
	var p = new(KillContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_kill
	return p
}

func (*KillContext) IsKillContext() {}

func NewKillContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KillContext {
	var p = new(KillContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_kill

	return p
}

func (s *KillContext) GetParser() antlr.Parser { return s.parser }

func (s *KillContext) KILL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserKILL, 0)
}

func (s *KillContext) AllNUMBER_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserNUMBER_)
}

func (s *KillContext) NUMBER_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, i)
}

func (s *KillContext) CONNECTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCONNECTION, 0)
}

func (s *KillContext) QUERY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserQUERY, 0)
}

func (s *KillContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KillContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KillContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterKill(s)
	}
}

func (s *KillContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitKill(s)
	}
}

func (s *KillContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitKill(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Kill() (localctx IKillContext) {
	this := p
	_ = this

	localctx = NewKillContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 976, MySQLStatementParserRULE_kill)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6745)
		p.Match(MySQLStatementParserKILL)
	}
	p.SetState(6747)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserCONNECTION || _la == MySQLStatementParserQUERY {
		{
			p.SetState(6746)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserCONNECTION || _la == MySQLStatementParserQUERY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(6750)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == MySQLStatementParserNUMBER_ {
		{
			p.SetState(6749)
			p.Match(MySQLStatementParserNUMBER_)
		}

		p.SetState(6752)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ILoadIndexInfoContext is an interface to support dynamic dispatch.
type ILoadIndexInfoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoadIndexInfoContext differentiates from other interfaces.
	IsLoadIndexInfoContext()
}

type LoadIndexInfoContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoadIndexInfoContext() *LoadIndexInfoContext {
	var p = new(LoadIndexInfoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_loadIndexInfo
	return p
}

func (*LoadIndexInfoContext) IsLoadIndexInfoContext() {}

func NewLoadIndexInfoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoadIndexInfoContext {
	var p = new(LoadIndexInfoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_loadIndexInfo

	return p
}

func (s *LoadIndexInfoContext) GetParser() antlr.Parser { return s.parser }

func (s *LoadIndexInfoContext) LOAD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOAD, 0)
}

func (s *LoadIndexInfoContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINDEX, 0)
}

func (s *LoadIndexInfoContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINTO, 0)
}

func (s *LoadIndexInfoContext) CACHE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCACHE, 0)
}

func (s *LoadIndexInfoContext) AllLoadTableIndexList() []ILoadTableIndexListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILoadTableIndexListContext)(nil)).Elem())
	var tst = make([]ILoadTableIndexListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILoadTableIndexListContext)
		}
	}

	return tst
}

func (s *LoadIndexInfoContext) LoadTableIndexList(i int) ILoadTableIndexListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoadTableIndexListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILoadTableIndexListContext)
}

func (s *LoadIndexInfoContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *LoadIndexInfoContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *LoadIndexInfoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoadIndexInfoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoadIndexInfoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterLoadIndexInfo(s)
	}
}

func (s *LoadIndexInfoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitLoadIndexInfo(s)
	}
}

func (s *LoadIndexInfoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitLoadIndexInfo(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) LoadIndexInfo() (localctx ILoadIndexInfoContext) {
	this := p
	_ = this

	localctx = NewLoadIndexInfoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 978, MySQLStatementParserRULE_loadIndexInfo)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6754)
		p.Match(MySQLStatementParserLOAD)
	}
	{
		p.SetState(6755)
		p.Match(MySQLStatementParserINDEX)
	}
	{
		p.SetState(6756)
		p.Match(MySQLStatementParserINTO)
	}
	{
		p.SetState(6757)
		p.Match(MySQLStatementParserCACHE)
	}
	{
		p.SetState(6758)
		p.LoadTableIndexList()
	}
	p.SetState(6763)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(6759)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(6760)
			p.LoadTableIndexList()
		}

		p.SetState(6765)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ILoadTableIndexListContext is an interface to support dynamic dispatch.
type ILoadTableIndexListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoadTableIndexListContext differentiates from other interfaces.
	IsLoadTableIndexListContext()
}

type LoadTableIndexListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoadTableIndexListContext() *LoadTableIndexListContext {
	var p = new(LoadTableIndexListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_loadTableIndexList
	return p
}

func (*LoadTableIndexListContext) IsLoadTableIndexListContext() {}

func NewLoadTableIndexListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoadTableIndexListContext {
	var p = new(LoadTableIndexListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_loadTableIndexList

	return p
}

func (s *LoadTableIndexListContext) GetParser() antlr.Parser { return s.parser }

func (s *LoadTableIndexListContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *LoadTableIndexListContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPARTITION, 0)
}

func (s *LoadTableIndexListContext) AllLP_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserLP_)
}

func (s *LoadTableIndexListContext) LP_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, i)
}

func (s *LoadTableIndexListContext) PartitionList() IPartitionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionListContext)
}

func (s *LoadTableIndexListContext) AllRP_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserRP_)
}

func (s *LoadTableIndexListContext) RP_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, i)
}

func (s *LoadTableIndexListContext) AllIndexName() []IIndexNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexNameContext)(nil)).Elem())
	var tst = make([]IIndexNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexNameContext)
		}
	}

	return tst
}

func (s *LoadTableIndexListContext) IndexName(i int) IIndexNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexNameContext)
}

func (s *LoadTableIndexListContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIGNORE, 0)
}

func (s *LoadTableIndexListContext) LEAVES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLEAVES, 0)
}

func (s *LoadTableIndexListContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINDEX, 0)
}

func (s *LoadTableIndexListContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserKEY, 0)
}

func (s *LoadTableIndexListContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *LoadTableIndexListContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *LoadTableIndexListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoadTableIndexListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoadTableIndexListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterLoadTableIndexList(s)
	}
}

func (s *LoadTableIndexListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitLoadTableIndexList(s)
	}
}

func (s *LoadTableIndexListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitLoadTableIndexList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) LoadTableIndexList() (localctx ILoadTableIndexListContext) {
	this := p
	_ = this

	localctx = NewLoadTableIndexListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 980, MySQLStatementParserRULE_loadTableIndexList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6766)
		p.TableName()
	}
	p.SetState(6772)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserPARTITION {
		{
			p.SetState(6767)
			p.Match(MySQLStatementParserPARTITION)
		}
		{
			p.SetState(6768)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(6769)
			p.PartitionList()
		}
		{
			p.SetState(6770)
			p.Match(MySQLStatementParserRP_)
		}

	}
	p.SetState(6786)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserINDEX || _la == MySQLStatementParserKEY {
		{
			p.SetState(6774)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserINDEX || _la == MySQLStatementParserKEY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(6775)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(6776)
			p.IndexName()
		}
		p.SetState(6781)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(6777)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(6778)
				p.IndexName()
			}

			p.SetState(6783)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6784)
			p.Match(MySQLStatementParserRP_)
		}

	}
	p.SetState(6790)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIGNORE {
		{
			p.SetState(6788)
			p.Match(MySQLStatementParserIGNORE)
		}
		{
			p.SetState(6789)
			p.Match(MySQLStatementParserLEAVES)
		}

	}

	return localctx
}

// IResetStatementContext is an interface to support dynamic dispatch.
type IResetStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsResetStatementContext differentiates from other interfaces.
	IsResetStatementContext()
}

type ResetStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResetStatementContext() *ResetStatementContext {
	var p = new(ResetStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_resetStatement
	return p
}

func (*ResetStatementContext) IsResetStatementContext() {}

func NewResetStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ResetStatementContext {
	var p = new(ResetStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_resetStatement

	return p
}

func (s *ResetStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ResetStatementContext) RESET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRESET, 0)
}

func (s *ResetStatementContext) AllResetOption() []IResetOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IResetOptionContext)(nil)).Elem())
	var tst = make([]IResetOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IResetOptionContext)
		}
	}

	return tst
}

func (s *ResetStatementContext) ResetOption(i int) IResetOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IResetOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IResetOptionContext)
}

func (s *ResetStatementContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *ResetStatementContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *ResetStatementContext) ResetPersist() IResetPersistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IResetPersistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IResetPersistContext)
}

func (s *ResetStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ResetStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ResetStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterResetStatement(s)
	}
}

func (s *ResetStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitResetStatement(s)
	}
}

func (s *ResetStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitResetStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ResetStatement() (localctx IResetStatementContext) {
	this := p
	_ = this

	localctx = NewResetStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 982, MySQLStatementParserRULE_resetStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6802)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 887, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6792)
			p.Match(MySQLStatementParserRESET)
		}
		{
			p.SetState(6793)
			p.ResetOption()
		}
		p.SetState(6798)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(6794)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(6795)
				p.ResetOption()
			}

			p.SetState(6800)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6801)
			p.ResetPersist()
		}

	}

	return localctx
}

// IResetOptionContext is an interface to support dynamic dispatch.
type IResetOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsResetOptionContext differentiates from other interfaces.
	IsResetOptionContext()
}

type ResetOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResetOptionContext() *ResetOptionContext {
	var p = new(ResetOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_resetOption
	return p
}

func (*ResetOptionContext) IsResetOptionContext() {}

func NewResetOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ResetOptionContext {
	var p = new(ResetOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_resetOption

	return p
}

func (s *ResetOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *ResetOptionContext) MASTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER, 0)
}

func (s *ResetOptionContext) TO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTO, 0)
}

func (s *ResetOptionContext) BinaryLogFileIndexNumber() IBinaryLogFileIndexNumberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBinaryLogFileIndexNumberContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBinaryLogFileIndexNumberContext)
}

func (s *ResetOptionContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSLAVE, 0)
}

func (s *ResetOptionContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALL, 0)
}

func (s *ResetOptionContext) ChannelOption() IChannelOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChannelOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChannelOptionContext)
}

func (s *ResetOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ResetOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ResetOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterResetOption(s)
	}
}

func (s *ResetOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitResetOption(s)
	}
}

func (s *ResetOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitResetOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ResetOption() (localctx IResetOptionContext) {
	this := p
	_ = this

	localctx = NewResetOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 984, MySQLStatementParserRULE_resetOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6816)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserMASTER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6804)
			p.Match(MySQLStatementParserMASTER)
		}
		p.SetState(6807)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserTO {
			{
				p.SetState(6805)
				p.Match(MySQLStatementParserTO)
			}
			{
				p.SetState(6806)
				p.BinaryLogFileIndexNumber()
			}

		}

	case MySQLStatementParserSLAVE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6809)
			p.Match(MySQLStatementParserSLAVE)
		}
		p.SetState(6811)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserALL {
			{
				p.SetState(6810)
				p.Match(MySQLStatementParserALL)
			}

		}
		p.SetState(6814)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserFOR {
			{
				p.SetState(6813)
				p.ChannelOption()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IResetPersistContext is an interface to support dynamic dispatch.
type IResetPersistContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsResetPersistContext differentiates from other interfaces.
	IsResetPersistContext()
}

type ResetPersistContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResetPersistContext() *ResetPersistContext {
	var p = new(ResetPersistContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_resetPersist
	return p
}

func (*ResetPersistContext) IsResetPersistContext() {}

func NewResetPersistContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ResetPersistContext {
	var p = new(ResetPersistContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_resetPersist

	return p
}

func (s *ResetPersistContext) GetParser() antlr.Parser { return s.parser }

func (s *ResetPersistContext) RESET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRESET, 0)
}

func (s *ResetPersistContext) PERSIST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPERSIST, 0)
}

func (s *ResetPersistContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ResetPersistContext) ExistClause() IExistClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExistClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExistClauseContext)
}

func (s *ResetPersistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ResetPersistContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ResetPersistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterResetPersist(s)
	}
}

func (s *ResetPersistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitResetPersist(s)
	}
}

func (s *ResetPersistContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitResetPersist(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ResetPersist() (localctx IResetPersistContext) {
	this := p
	_ = this

	localctx = NewResetPersistContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 986, MySQLStatementParserRULE_resetPersist)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6818)
		p.Match(MySQLStatementParserRESET)
	}
	{
		p.SetState(6819)
		p.Match(MySQLStatementParserPERSIST)
	}
	p.SetState(6824)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49))|(1<<(MySQLStatementParserGROUP_CONCAT-49))|(1<<(MySQLStatementParserCAST-49))|(1<<(MySQLStatementParserPOSITION-49))|(1<<(MySQLStatementParserSUBSTRING-49))|(1<<(MySQLStatementParserSUBSTR-49))|(1<<(MySQLStatementParserEXTRACT-49))|(1<<(MySQLStatementParserTRIM-49))|(1<<(MySQLStatementParserLAST_DAY-49))|(1<<(MySQLStatementParserTRADITIONAL-49))|(1<<(MySQLStatementParserTREE-49))|(1<<(MySQLStatementParserMYSQL_ADMIN-49))|(1<<(MySQLStatementParserINSTANT-49))|(1<<(MySQLStatementParserINPLACE-49))|(1<<(MySQLStatementParserCOPY-49))|(1<<(MySQLStatementParserUL_BINARY-49))|(1<<(MySQLStatementParserAUTOCOMMIT-49))|(1<<(MySQLStatementParserINNODB-49))|(1<<(MySQLStatementParserREDO_LOG-49))|(1<<(MySQLStatementParserACCOUNT-49))|(1<<(MySQLStatementParserACTION-49))|(1<<(MySQLStatementParserACTIVE-49))|(1<<(MySQLStatementParserADMIN-49))|(1<<(MySQLStatementParserAFTER-49))|(1<<(MySQLStatementParserAGAINST-49)))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(MySQLStatementParserAGGREGATE-81))|(1<<(MySQLStatementParserALGORITHM-81))|(1<<(MySQLStatementParserALWAYS-81))|(1<<(MySQLStatementParserANY-81))|(1<<(MySQLStatementParserARRAY-81))|(1<<(MySQLStatementParserASCII-81))|(1<<(MySQLStatementParserAT-81))|(1<<(MySQLStatementParserATTRIBUTE-81))|(1<<(MySQLStatementParserAUTOEXTEND_SIZE-81))|(1<<(MySQLStatementParserAUTO_INCREMENT-81))|(1<<(MySQLStatementParserAVG-81))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-81))|(1<<(MySQLStatementParserBACKUP-81))|(1<<(MySQLStatementParserBEGIN-81))|(1<<(MySQLStatementParserBINLOG-81))|(1<<(MySQLStatementParserBIT-81))|(1<<(MySQLStatementParserBLOCK-81))|(1<<(MySQLStatementParserBOOL-81))|(1<<(MySQLStatementParserBOOLEAN-81)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(MySQLStatementParserBTREE-114))|(1<<(MySQLStatementParserBUCKETS-114))|(1<<(MySQLStatementParserBYTE-114))|(1<<(MySQLStatementParserCACHE-114))|(1<<(MySQLStatementParserCASCADED-114))|(1<<(MySQLStatementParserCATALOG_NAME-114))|(1<<(MySQLStatementParserCHAIN-114))|(1<<(MySQLStatementParserCHANGED-114))|(1<<(MySQLStatementParserCHANNEL-114))|(1<<(MySQLStatementParserCHARSET-114))|(1<<(MySQLStatementParserCHECKSUM-114))|(1<<(MySQLStatementParserCIPHER-114))|(1<<(MySQLStatementParserCLASS_ORIGIN-114))|(1<<(MySQLStatementParserCLIENT-114))|(1<<(MySQLStatementParserCLONE-114))|(1<<(MySQLStatementParserCLOSE-114))|(1<<(MySQLStatementParserCOALESCE-114))|(1<<(MySQLStatementParserCODE-114))|(1<<(MySQLStatementParserCOLLATION-114))|(1<<(MySQLStatementParserCOLUMNS-114))|(1<<(MySQLStatementParserCOLUMN_FORMAT-114))|(1<<(MySQLStatementParserCOLUMN_NAME-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(MySQLStatementParserCOMMENT-146))|(1<<(MySQLStatementParserCOMMIT-146))|(1<<(MySQLStatementParserCOMMITTED-146))|(1<<(MySQLStatementParserCOMPACT-146))|(1<<(MySQLStatementParserCOMPLETION-146))|(1<<(MySQLStatementParserCOMPONENT-146))|(1<<(MySQLStatementParserCOMPRESSED-146))|(1<<(MySQLStatementParserCOMPRESSION-146))|(1<<(MySQLStatementParserCONCURRENT-146))|(1<<(MySQLStatementParserCONNECTION-146))|(1<<(MySQLStatementParserCONSISTENT-146))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-146))|(1<<(MySQLStatementParserCONSTRAINT_NAME-146))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-146))|(1<<(MySQLStatementParserCONTAINS-146))|(1<<(MySQLStatementParserCONTEXT-146))|(1<<(MySQLStatementParserCPU-146))|(1<<(MySQLStatementParserCURRENT-146))|(1<<(MySQLStatementParserCURSOR_NAME-146)))) != 0) || (((_la-178)&-(0x1f+1)) == 0 && ((1<<uint((_la-178)))&((1<<(MySQLStatementParserDATA-178))|(1<<(MySQLStatementParserDATAFILE-178))|(1<<(MySQLStatementParserDATE-178))|(1<<(MySQLStatementParserDATETIME-178))|(1<<(MySQLStatementParserDAY-178))|(1<<(MySQLStatementParserDEALLOCATE-178))|(1<<(MySQLStatementParserDEFAULT_AUTH-178))|(1<<(MySQLStatementParserDEFINER-178))|(1<<(MySQLStatementParserDEFINITION-178))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-178))|(1<<(MySQLStatementParserDESCRIPTION-178))|(1<<(MySQLStatementParserDIAGNOSTICS-178))|(1<<(MySQLStatementParserDIRECTORY-178))|(1<<(MySQLStatementParserDISABLE-178))|(1<<(MySQLStatementParserDISCARD-178))|(1<<(MySQLStatementParserDISK-178)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(MySQLStatementParserDO-213))|(1<<(MySQLStatementParserDUMPFILE-213))|(1<<(MySQLStatementParserDUPLICATE-213))|(1<<(MySQLStatementParserDYNAMIC-213))|(1<<(MySQLStatementParserENABLE-213))|(1<<(MySQLStatementParserENCRYPTION-213))|(1<<(MySQLStatementParserEND-213))|(1<<(MySQLStatementParserENDS-213))|(1<<(MySQLStatementParserENFORCED-213))|(1<<(MySQLStatementParserENGINE-213))|(1<<(MySQLStatementParserENGINES-213))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-213))|(1<<(MySQLStatementParserENUM-213))|(1<<(MySQLStatementParserERROR-213))|(1<<(MySQLStatementParserERRORS-213))|(1<<(MySQLStatementParserESCAPE-213))|(1<<(MySQLStatementParserEVENT-213))|(1<<(MySQLStatementParserEVENTS-213))|(1<<(MySQLStatementParserEVERY-213))|(1<<(MySQLStatementParserEXCHANGE-213))|(1<<(MySQLStatementParserEXCLUDE-213))|(1<<(MySQLStatementParserEXECUTE-213)))) != 0) || (((_la-247)&-(0x1f+1)) == 0 && ((1<<uint((_la-247)))&((1<<(MySQLStatementParserEXPANSION-247))|(1<<(MySQLStatementParserEXPIRE-247))|(1<<(MySQLStatementParserEXPORT-247))|(1<<(MySQLStatementParserEXTENDED-247))|(1<<(MySQLStatementParserEXTENT_SIZE-247))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-247))|(1<<(MySQLStatementParserFAST-247))|(1<<(MySQLStatementParserFAULTS-247))|(1<<(MySQLStatementParserFILE-247))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-247))|(1<<(MySQLStatementParserFILTER-247))|(1<<(MySQLStatementParserFIRST-247))|(1<<(MySQLStatementParserFIXED-247))|(1<<(MySQLStatementParserFLUSH-247))|(1<<(MySQLStatementParserFOLLOWING-247))|(1<<(MySQLStatementParserFOLLOWS-247))|(1<<(MySQLStatementParserFORMAT-247))|(1<<(MySQLStatementParserFOUND-247))|(1<<(MySQLStatementParserFULL-247)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(MySQLStatementParserGENERAL-279))|(1<<(MySQLStatementParserGEOMETRY-279))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-279))|(1<<(MySQLStatementParserGET_FORMAT-279))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-279))|(1<<(MySQLStatementParserGLOBAL-279))|(1<<(MySQLStatementParserGRANTS-279))|(1<<(MySQLStatementParserGROUP_REPLICATION-279))|(1<<(MySQLStatementParserHANDLER-279))|(1<<(MySQLStatementParserHASH-279))|(1<<(MySQLStatementParserHELP-279))|(1<<(MySQLStatementParserHISTOGRAM-279))|(1<<(MySQLStatementParserHISTORY-279))|(1<<(MySQLStatementParserHOST-279))|(1<<(MySQLStatementParserHOSTS-279))|(1<<(MySQLStatementParserHOUR-279))|(1<<(MySQLStatementParserIDENTIFIED-279))|(1<<(MySQLStatementParserIF-279))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-279))|(1<<(MySQLStatementParserIMPORT-279)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySQLStatementParserINACTIVE-312))|(1<<(MySQLStatementParserINDEXES-312))|(1<<(MySQLStatementParserINITIAL_SIZE-312))|(1<<(MySQLStatementParserINSERT_METHOD-312))|(1<<(MySQLStatementParserINSTALL-312))|(1<<(MySQLStatementParserINSTANCE-312))|(1<<(MySQLStatementParserINVISIBLE-312))|(1<<(MySQLStatementParserINVOKER-312))|(1<<(MySQLStatementParserIO-312))|(1<<(MySQLStatementParserIPC-312))|(1<<(MySQLStatementParserISOLATION-312))|(1<<(MySQLStatementParserISSUER-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySQLStatementParserJSON-344))|(1<<(MySQLStatementParserJSON_VALUE-344))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-344))|(1<<(MySQLStatementParserLANGUAGE-344))|(1<<(MySQLStatementParserLAST-344))|(1<<(MySQLStatementParserLAST_VALUE-344))|(1<<(MySQLStatementParserLEAVES-344))|(1<<(MySQLStatementParserLESS-344))|(1<<(MySQLStatementParserLEVEL-344))|(1<<(MySQLStatementParserLINESTRING-344))|(1<<(MySQLStatementParserLIST-344))|(1<<(MySQLStatementParserLOCAL-344))|(1<<(MySQLStatementParserLOCKED-344))|(1<<(MySQLStatementParserLOCKS-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySQLStatementParserLOGFILE-376))|(1<<(MySQLStatementParserLOGS-376))|(1<<(MySQLStatementParserMASTER-376))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-376))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-376))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-376))|(1<<(MySQLStatementParserMASTER_DELAY-376))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-376))|(1<<(MySQLStatementParserMASTER_HOST-376))|(1<<(MySQLStatementParserMASTER_LOG_FILE-376))|(1<<(MySQLStatementParserMASTER_LOG_POS-376))|(1<<(MySQLStatementParserMASTER_PASSWORD-376))|(1<<(MySQLStatementParserMASTER_PORT-376))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-376))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-376))|(1<<(MySQLStatementParserMASTER_SERVER_ID-376))|(1<<(MySQLStatementParserMASTER_SSL-376))|(1<<(MySQLStatementParserMASTER_SSL_CA-376))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_CERT-376))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-376))|(1<<(MySQLStatementParserMASTER_SSL_CRL-376))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_KEY-376))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySQLStatementParserMASTER_TLS_VERSION-408))|(1<<(MySQLStatementParserMASTER_USER-408))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-408))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_ROWS-408))|(1<<(MySQLStatementParserMAX_SIZE-408))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-408))|(1<<(MySQLStatementParserMEDIUM-408))|(1<<(MySQLStatementParserMEMBER-408))|(1<<(MySQLStatementParserMEMORY-408))|(1<<(MySQLStatementParserMERGE-408))|(1<<(MySQLStatementParserMESSAGE_TEXT-408))|(1<<(MySQLStatementParserMICROSECOND-408))|(1<<(MySQLStatementParserMIGRATE-408))|(1<<(MySQLStatementParserMINUTE-408))|(1<<(MySQLStatementParserMIN_ROWS-408))|(1<<(MySQLStatementParserMODE-408))|(1<<(MySQLStatementParserMODIFY-408))|(1<<(MySQLStatementParserMONTH-408))|(1<<(MySQLStatementParserMULTILINESTRING-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySQLStatementParserMULTIPOINT-440))|(1<<(MySQLStatementParserMULTIPOLYGON-440))|(1<<(MySQLStatementParserMUTEX-440))|(1<<(MySQLStatementParserMYSQL_ERRNO-440))|(1<<(MySQLStatementParserNAME-440))|(1<<(MySQLStatementParserNAMES-440))|(1<<(MySQLStatementParserNATIONAL-440))|(1<<(MySQLStatementParserNCHAR-440))|(1<<(MySQLStatementParserNDBCLUSTER-440))|(1<<(MySQLStatementParserNESTED-440))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-440))|(1<<(MySQLStatementParserNEVER-440))|(1<<(MySQLStatementParserNEW-440))|(1<<(MySQLStatementParserNEXT-440))|(1<<(MySQLStatementParserNO-440))|(1<<(MySQLStatementParserNODEGROUP-440))|(1<<(MySQLStatementParserNONE-440))|(1<<(MySQLStatementParserNOWAIT-440))|(1<<(MySQLStatementParserNO_WAIT-440))|(1<<(MySQLStatementParserNULLS-440))|(1<<(MySQLStatementParserNUMBER-440))|(1<<(MySQLStatementParserNVARCHAR-440))|(1<<(MySQLStatementParserOFF-440))|(1<<(MySQLStatementParserOFFSET-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySQLStatementParserOJ-472))|(1<<(MySQLStatementParserOLD-472))|(1<<(MySQLStatementParserONE-472))|(1<<(MySQLStatementParserONLY-472))|(1<<(MySQLStatementParserOPEN-472))|(1<<(MySQLStatementParserOPTIONAL-472))|(1<<(MySQLStatementParserOPTIONS-472))|(1<<(MySQLStatementParserORDINALITY-472))|(1<<(MySQLStatementParserORGANIZATION-472))|(1<<(MySQLStatementParserOTHERS-472))|(1<<(MySQLStatementParserOWNER-472))|(1<<(MySQLStatementParserPACK_KEYS-472))|(1<<(MySQLStatementParserPAGE-472))|(1<<(MySQLStatementParserPARSER-472))|(1<<(MySQLStatementParserPARTIAL-472))|(1<<(MySQLStatementParserPARTITIONING-472))|(1<<(MySQLStatementParserPARTITIONS-472))|(1<<(MySQLStatementParserPASSWORD-472))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-472))|(1<<(MySQLStatementParserPATH-472)))) != 0) || (((_la-505)&-(0x1f+1)) == 0 && ((1<<uint((_la-505)))&((1<<(MySQLStatementParserPERSIST-505))|(1<<(MySQLStatementParserPERSIST_ONLY-505))|(1<<(MySQLStatementParserPHASE-505))|(1<<(MySQLStatementParserPLUGIN-505))|(1<<(MySQLStatementParserPLUGINS-505))|(1<<(MySQLStatementParserPLUGIN_DIR-505))|(1<<(MySQLStatementParserPOINT-505))|(1<<(MySQLStatementParserPOLYGON-505))|(1<<(MySQLStatementParserPORT-505))|(1<<(MySQLStatementParserPRECEDES-505))|(1<<(MySQLStatementParserPRECEDING-505))|(1<<(MySQLStatementParserPREPARE-505))|(1<<(MySQLStatementParserPRESERVE-505))|(1<<(MySQLStatementParserPREV-505))|(1<<(MySQLStatementParserPRIVILEGES-505))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-505))|(1<<(MySQLStatementParserPROCESS-505))|(1<<(MySQLStatementParserPROCESSLIST-505))|(1<<(MySQLStatementParserPROFILE-505))|(1<<(MySQLStatementParserPROFILES-505))|(1<<(MySQLStatementParserPROXY-505))|(1<<(MySQLStatementParserQUARTER-505))|(1<<(MySQLStatementParserQUERY-505))|(1<<(MySQLStatementParserQUICK-505))|(1<<(MySQLStatementParserRANDOM-505)))) != 0) || (((_la-538)&-(0x1f+1)) == 0 && ((1<<uint((_la-538)))&((1<<(MySQLStatementParserREAD_ONLY-538))|(1<<(MySQLStatementParserREBUILD-538))|(1<<(MySQLStatementParserRECOVER-538))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-538))|(1<<(MySQLStatementParserREDUNDANT-538))|(1<<(MySQLStatementParserREFERENCE-538))|(1<<(MySQLStatementParserRELAY-538))|(1<<(MySQLStatementParserRELAYLOG-538))|(1<<(MySQLStatementParserRELAY_LOG_FILE-538))|(1<<(MySQLStatementParserRELAY_LOG_POS-538))|(1<<(MySQLStatementParserRELAY_THREAD-538))|(1<<(MySQLStatementParserRELOAD-538))|(1<<(MySQLStatementParserREMOVE-538))|(1<<(MySQLStatementParserREORGANIZE-538))|(1<<(MySQLStatementParserREPAIR-538))|(1<<(MySQLStatementParserREPEATABLE-538))|(1<<(MySQLStatementParserREPLICATE_DO_DB-538))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-538)))) != 0) || (((_la-570)&-(0x1f+1)) == 0 && ((1<<uint((_la-570)))&((1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-570))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-570))|(1<<(MySQLStatementParserREPLICATION-570))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-570))|(1<<(MySQLStatementParserRESET-570))|(1<<(MySQLStatementParserRESOURCE-570))|(1<<(MySQLStatementParserRESPECT-570))|(1<<(MySQLStatementParserRESTART-570))|(1<<(MySQLStatementParserRESTORE-570))|(1<<(MySQLStatementParserRESUME-570))|(1<<(MySQLStatementParserRETAIN-570))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-570))|(1<<(MySQLStatementParserRETURNING-570))|(1<<(MySQLStatementParserRETURNS-570))|(1<<(MySQLStatementParserREUSE-570))|(1<<(MySQLStatementParserREVERSE-570))|(1<<(MySQLStatementParserROLE-570))|(1<<(MySQLStatementParserROLLBACK-570))|(1<<(MySQLStatementParserROLLUP-570))|(1<<(MySQLStatementParserROTATE-570))|(1<<(MySQLStatementParserROUTINE-570))|(1<<(MySQLStatementParserROW_COUNT-570))|(1<<(MySQLStatementParserROW_FORMAT-570)))) != 0) || (((_la-603)&-(0x1f+1)) == 0 && ((1<<uint((_la-603)))&((1<<(MySQLStatementParserRTREE-603))|(1<<(MySQLStatementParserSAVEPOINT-603))|(1<<(MySQLStatementParserSCHEDULE-603))|(1<<(MySQLStatementParserSCHEMA_NAME-603))|(1<<(MySQLStatementParserSECOND-603))|(1<<(MySQLStatementParserSECONDARY-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-603))|(1<<(MySQLStatementParserSECONDARY_LOAD-603))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-603))|(1<<(MySQLStatementParserSECURITY-603))|(1<<(MySQLStatementParserSERIAL-603))|(1<<(MySQLStatementParserSERIALIZABLE-603))|(1<<(MySQLStatementParserSERVER-603))|(1<<(MySQLStatementParserSESSION-603))|(1<<(MySQLStatementParserSHARE-603))|(1<<(MySQLStatementParserSHUTDOWN-603))|(1<<(MySQLStatementParserSIGNED-603))|(1<<(MySQLStatementParserSIMPLE-603))|(1<<(MySQLStatementParserSLAVE-603))|(1<<(MySQLStatementParserSLOW-603)))) != 0) || (((_la-635)&-(0x1f+1)) == 0 && ((1<<uint((_la-635)))&((1<<(MySQLStatementParserSNAPSHOT-635))|(1<<(MySQLStatementParserSOCKET-635))|(1<<(MySQLStatementParserSONAME-635))|(1<<(MySQLStatementParserSOUNDS-635))|(1<<(MySQLStatementParserSOURCE-635))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-635))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-635))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-635))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-635))|(1<<(MySQLStatementParserSQL_NO_CACHE-635))|(1<<(MySQLStatementParserSQL_THREAD-635))|(1<<(MySQLStatementParserSRID-635))|(1<<(MySQLStatementParserSTACKED-635))|(1<<(MySQLStatementParserSTART-635))|(1<<(MySQLStatementParserSTARTS-635))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-635))|(1<<(MySQLStatementParserSTATS_PERSISTENT-635))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-635))|(1<<(MySQLStatementParserSTATUS-635))|(1<<(MySQLStatementParserSTOP-635))|(1<<(MySQLStatementParserSTORAGE-635)))) != 0) || (((_la-669)&-(0x1f+1)) == 0 && ((1<<uint((_la-669)))&((1<<(MySQLStatementParserSTREAM-669))|(1<<(MySQLStatementParserSTRING-669))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-669))|(1<<(MySQLStatementParserSUBJECT-669))|(1<<(MySQLStatementParserSUBPARTITION-669))|(1<<(MySQLStatementParserSUBPARTITIONS-669))|(1<<(MySQLStatementParserSUPER-669))|(1<<(MySQLStatementParserSUSPEND-669))|(1<<(MySQLStatementParserSWAPS-669))|(1<<(MySQLStatementParserSWITCHES-669))|(1<<(MySQLStatementParserTABLES-669))|(1<<(MySQLStatementParserTABLESPACE-669))|(1<<(MySQLStatementParserTABLE_CHECKSUM-669))|(1<<(MySQLStatementParserTABLE_NAME-669))|(1<<(MySQLStatementParserTEMPORARY-669))|(1<<(MySQLStatementParserTEMPTABLE-669))|(1<<(MySQLStatementParserTEXT-669))|(1<<(MySQLStatementParserTHAN-669))|(1<<(MySQLStatementParserTHREAD_PRIORITY-669))|(1<<(MySQLStatementParserTIES-669))|(1<<(MySQLStatementParserTIME-669))|(1<<(MySQLStatementParserTIMESTAMP-669))|(1<<(MySQLStatementParserTIMESTAMP_ADD-669))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-669))|(1<<(MySQLStatementParserTLS-669)))) != 0) || (((_la-703)&-(0x1f+1)) == 0 && ((1<<uint((_la-703)))&((1<<(MySQLStatementParserTRANSACTION-703))|(1<<(MySQLStatementParserTRIGGERS-703))|(1<<(MySQLStatementParserTRUNCATE-703))|(1<<(MySQLStatementParserTYPE-703))|(1<<(MySQLStatementParserTYPES-703))|(1<<(MySQLStatementParserUNBOUNDED-703))|(1<<(MySQLStatementParserUNCOMMITTED-703))|(1<<(MySQLStatementParserUNDEFINED-703))|(1<<(MySQLStatementParserUNDOFILE-703))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-703))|(1<<(MySQLStatementParserUNICODE-703))|(1<<(MySQLStatementParserUNINSTALL-703))|(1<<(MySQLStatementParserUNKNOWN-703))|(1<<(MySQLStatementParserUNTIL-703))|(1<<(MySQLStatementParserUPGRADE-703))|(1<<(MySQLStatementParserUSER-703))|(1<<(MySQLStatementParserUSER_RESOURCES-703))|(1<<(MySQLStatementParserUSE_FRM-703)))) != 0) || (((_la-735)&-(0x1f+1)) == 0 && ((1<<uint((_la-735)))&((1<<(MySQLStatementParserVALIDATION-735))|(1<<(MySQLStatementParserVALUE-735))|(1<<(MySQLStatementParserVARIABLES-735))|(1<<(MySQLStatementParserVCPU-735))|(1<<(MySQLStatementParserVIEW-735))|(1<<(MySQLStatementParserVISIBLE-735))|(1<<(MySQLStatementParserWAIT-735))|(1<<(MySQLStatementParserWARNINGS-735))|(1<<(MySQLStatementParserWEEK-735))|(1<<(MySQLStatementParserWEIGHT_STRING-735))|(1<<(MySQLStatementParserWITHOUT-735))|(1<<(MySQLStatementParserWORK-735))|(1<<(MySQLStatementParserWRAPPER-735))|(1<<(MySQLStatementParserX509-735))|(1<<(MySQLStatementParserXA-735))|(1<<(MySQLStatementParserXID-735))|(1<<(MySQLStatementParserXML-735))|(1<<(MySQLStatementParserYEAR-735)))) != 0) || _la == MySQLStatementParserIDENTIFIER_ || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
		p.SetState(6821)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserIF {
			{
				p.SetState(6820)
				p.ExistClause()
			}

		}
		{
			p.SetState(6823)
			p.Identifier()
		}

	}

	return localctx
}

// IRestartContext is an interface to support dynamic dispatch.
type IRestartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRestartContext differentiates from other interfaces.
	IsRestartContext()
}

type RestartContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRestartContext() *RestartContext {
	var p = new(RestartContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_restart
	return p
}

func (*RestartContext) IsRestartContext() {}

func NewRestartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RestartContext {
	var p = new(RestartContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_restart

	return p
}

func (s *RestartContext) GetParser() antlr.Parser { return s.parser }

func (s *RestartContext) RESTART() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRESTART, 0)
}

func (s *RestartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RestartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RestartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterRestart(s)
	}
}

func (s *RestartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitRestart(s)
	}
}

func (s *RestartContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitRestart(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Restart() (localctx IRestartContext) {
	this := p
	_ = this

	localctx = NewRestartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 988, MySQLStatementParserRULE_restart)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6826)
		p.Match(MySQLStatementParserRESTART)
	}

	return localctx
}

// IShutdownContext is an interface to support dynamic dispatch.
type IShutdownContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShutdownContext differentiates from other interfaces.
	IsShutdownContext()
}

type ShutdownContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShutdownContext() *ShutdownContext {
	var p = new(ShutdownContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_shutdown
	return p
}

func (*ShutdownContext) IsShutdownContext() {}

func NewShutdownContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShutdownContext {
	var p = new(ShutdownContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_shutdown

	return p
}

func (s *ShutdownContext) GetParser() antlr.Parser { return s.parser }

func (s *ShutdownContext) SHUTDOWN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHUTDOWN, 0)
}

func (s *ShutdownContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShutdownContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShutdownContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShutdown(s)
	}
}

func (s *ShutdownContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShutdown(s)
	}
}

func (s *ShutdownContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShutdown(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Shutdown() (localctx IShutdownContext) {
	this := p
	_ = this

	localctx = NewShutdownContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 990, MySQLStatementParserRULE_shutdown)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6828)
		p.Match(MySQLStatementParserSHUTDOWN)
	}

	return localctx
}

// IExplainTypeContext is an interface to support dynamic dispatch.
type IExplainTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExplainTypeContext differentiates from other interfaces.
	IsExplainTypeContext()
}

type ExplainTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExplainTypeContext() *ExplainTypeContext {
	var p = new(ExplainTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_explainType
	return p
}

func (*ExplainTypeContext) IsExplainTypeContext() {}

func NewExplainTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExplainTypeContext {
	var p = new(ExplainTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_explainType

	return p
}

func (s *ExplainTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ExplainTypeContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFORMAT, 0)
}

func (s *ExplainTypeContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *ExplainTypeContext) FormatName() IFormatNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormatNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormatNameContext)
}

func (s *ExplainTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplainTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExplainTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterExplainType(s)
	}
}

func (s *ExplainTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitExplainType(s)
	}
}

func (s *ExplainTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitExplainType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ExplainType() (localctx IExplainTypeContext) {
	this := p
	_ = this

	localctx = NewExplainTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 992, MySQLStatementParserRULE_explainType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6830)
		p.Match(MySQLStatementParserFORMAT)
	}
	{
		p.SetState(6831)
		p.Match(MySQLStatementParserEQ_)
	}
	{
		p.SetState(6832)
		p.FormatName()
	}

	return localctx
}

// IExplainableStatementContext is an interface to support dynamic dispatch.
type IExplainableStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExplainableStatementContext differentiates from other interfaces.
	IsExplainableStatementContext()
}

type ExplainableStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExplainableStatementContext() *ExplainableStatementContext {
	var p = new(ExplainableStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_explainableStatement
	return p
}

func (*ExplainableStatementContext) IsExplainableStatementContext() {}

func NewExplainableStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExplainableStatementContext {
	var p = new(ExplainableStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_explainableStatement

	return p
}

func (s *ExplainableStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExplainableStatementContext) Select() ISelectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectContext)
}

func (s *ExplainableStatementContext) Delete() IDeleteContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeleteContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeleteContext)
}

func (s *ExplainableStatementContext) Insert() IInsertContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsertContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsertContext)
}

func (s *ExplainableStatementContext) Replace() IReplaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReplaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReplaceContext)
}

func (s *ExplainableStatementContext) Update() IUpdateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdateContext)
}

func (s *ExplainableStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplainableStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExplainableStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterExplainableStatement(s)
	}
}

func (s *ExplainableStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitExplainableStatement(s)
	}
}

func (s *ExplainableStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitExplainableStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ExplainableStatement() (localctx IExplainableStatementContext) {
	this := p
	_ = this

	localctx = NewExplainableStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 994, MySQLStatementParserRULE_explainableStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6839)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 894, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6834)
			p.Select()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6835)
			p.Delete()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6836)
			p.Insert()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6837)
			p.Replace()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6838)
			p.Update()
		}

	}

	return localctx
}

// IFormatNameContext is an interface to support dynamic dispatch.
type IFormatNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFormatNameContext differentiates from other interfaces.
	IsFormatNameContext()
}

type FormatNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFormatNameContext() *FormatNameContext {
	var p = new(FormatNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_formatName
	return p
}

func (*FormatNameContext) IsFormatNameContext() {}

func NewFormatNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FormatNameContext {
	var p = new(FormatNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_formatName

	return p
}

func (s *FormatNameContext) GetParser() antlr.Parser { return s.parser }

func (s *FormatNameContext) TRADITIONAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTRADITIONAL, 0)
}

func (s *FormatNameContext) JSON() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserJSON, 0)
}

func (s *FormatNameContext) TREE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTREE, 0)
}

func (s *FormatNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FormatNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FormatNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterFormatName(s)
	}
}

func (s *FormatNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitFormatName(s)
	}
}

func (s *FormatNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitFormatName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) FormatName() (localctx IFormatNameContext) {
	this := p
	_ = this

	localctx = NewFormatNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 996, MySQLStatementParserRULE_formatName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6841)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserTRADITIONAL || _la == MySQLStatementParserTREE || _la == MySQLStatementParserJSON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IShowContext is an interface to support dynamic dispatch.
type IShowContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowContext differentiates from other interfaces.
	IsShowContext()
}

type ShowContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowContext() *ShowContext {
	var p = new(ShowContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_show
	return p
}

func (*ShowContext) IsShowContext() {}

func NewShowContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowContext {
	var p = new(ShowContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_show

	return p
}

func (s *ShowContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowContext) ShowDatabases() IShowDatabasesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowDatabasesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowDatabasesContext)
}

func (s *ShowContext) ShowTables() IShowTablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowTablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowTablesContext)
}

func (s *ShowContext) ShowTableStatus() IShowTableStatusContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowTableStatusContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowTableStatusContext)
}

func (s *ShowContext) ShowBinaryLogs() IShowBinaryLogsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowBinaryLogsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowBinaryLogsContext)
}

func (s *ShowContext) ShowColumns() IShowColumnsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowColumnsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowColumnsContext)
}

func (s *ShowContext) ShowIndex() IShowIndexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowIndexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowIndexContext)
}

func (s *ShowContext) ShowCreateDatabase() IShowCreateDatabaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowCreateDatabaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowCreateDatabaseContext)
}

func (s *ShowContext) ShowCreateTable() IShowCreateTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowCreateTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowCreateTableContext)
}

func (s *ShowContext) ShowBinlogEvents() IShowBinlogEventsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowBinlogEventsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowBinlogEventsContext)
}

func (s *ShowContext) ShowCharacterSet() IShowCharacterSetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowCharacterSetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowCharacterSetContext)
}

func (s *ShowContext) ShowCollation() IShowCollationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowCollationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowCollationContext)
}

func (s *ShowContext) ShowCreateEvent() IShowCreateEventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowCreateEventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowCreateEventContext)
}

func (s *ShowContext) ShowCreateFunction() IShowCreateFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowCreateFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowCreateFunctionContext)
}

func (s *ShowContext) ShowCreateProcedure() IShowCreateProcedureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowCreateProcedureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowCreateProcedureContext)
}

func (s *ShowContext) ShowCreateTrigger() IShowCreateTriggerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowCreateTriggerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowCreateTriggerContext)
}

func (s *ShowContext) ShowCreateUser() IShowCreateUserContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowCreateUserContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowCreateUserContext)
}

func (s *ShowContext) ShowCreateView() IShowCreateViewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowCreateViewContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowCreateViewContext)
}

func (s *ShowContext) ShowEngine() IShowEngineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowEngineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowEngineContext)
}

func (s *ShowContext) ShowEngines() IShowEnginesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowEnginesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowEnginesContext)
}

func (s *ShowContext) ShowCharset() IShowCharsetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowCharsetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowCharsetContext)
}

func (s *ShowContext) ShowErrors() IShowErrorsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowErrorsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowErrorsContext)
}

func (s *ShowContext) ShowEvents() IShowEventsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowEventsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowEventsContext)
}

func (s *ShowContext) ShowFunctionCode() IShowFunctionCodeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowFunctionCodeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowFunctionCodeContext)
}

func (s *ShowContext) ShowFunctionStatus() IShowFunctionStatusContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowFunctionStatusContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowFunctionStatusContext)
}

func (s *ShowContext) ShowGrant() IShowGrantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowGrantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowGrantContext)
}

func (s *ShowContext) ShowMasterStatus() IShowMasterStatusContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowMasterStatusContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowMasterStatusContext)
}

func (s *ShowContext) ShowPlugins() IShowPluginsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowPluginsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowPluginsContext)
}

func (s *ShowContext) ShowOpenTables() IShowOpenTablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowOpenTablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowOpenTablesContext)
}

func (s *ShowContext) ShowPrivileges() IShowPrivilegesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowPrivilegesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowPrivilegesContext)
}

func (s *ShowContext) ShowProcedureCode() IShowProcedureCodeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowProcedureCodeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowProcedureCodeContext)
}

func (s *ShowContext) ShowProcesslist() IShowProcesslistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowProcesslistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowProcesslistContext)
}

func (s *ShowContext) ShowProfile() IShowProfileContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowProfileContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowProfileContext)
}

func (s *ShowContext) ShowProcedureStatus() IShowProcedureStatusContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowProcedureStatusContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowProcedureStatusContext)
}

func (s *ShowContext) ShowProfiles() IShowProfilesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowProfilesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowProfilesContext)
}

func (s *ShowContext) ShowSlavehost() IShowSlavehostContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowSlavehostContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowSlavehostContext)
}

func (s *ShowContext) ShowSlaveStatus() IShowSlaveStatusContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowSlaveStatusContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowSlaveStatusContext)
}

func (s *ShowContext) ShowRelaylogEvent() IShowRelaylogEventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowRelaylogEventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowRelaylogEventContext)
}

func (s *ShowContext) ShowStatus() IShowStatusContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowStatusContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowStatusContext)
}

func (s *ShowContext) ShowTriggers() IShowTriggersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowTriggersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowTriggersContext)
}

func (s *ShowContext) ShowWarnings() IShowWarningsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowWarningsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowWarningsContext)
}

func (s *ShowContext) ShowVariables() IShowVariablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowVariablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowVariablesContext)
}

func (s *ShowContext) ShowReplicas() IShowReplicasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowReplicasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowReplicasContext)
}

func (s *ShowContext) ShowReplicaStatus() IShowReplicaStatusContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowReplicaStatusContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowReplicaStatusContext)
}

func (s *ShowContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterShow(s)
	}
}

func (s *ShowContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitShow(s)
	}
}

func (s *ShowContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitShow(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Show() (localctx IShowContext) {
	this := p
	_ = this

	localctx = NewShowContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 998, MySQLStatementParserRULE_show)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6886)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 895, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6843)
			p.ShowDatabases()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6844)
			p.ShowTables()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6845)
			p.ShowTableStatus()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6846)
			p.ShowBinaryLogs()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6847)
			p.ShowColumns()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(6848)
			p.ShowIndex()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(6849)
			p.ShowCreateDatabase()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(6850)
			p.ShowCreateTable()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(6851)
			p.ShowBinlogEvents()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(6852)
			p.ShowCharacterSet()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(6853)
			p.ShowCollation()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(6854)
			p.ShowCreateEvent()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(6855)
			p.ShowCreateFunction()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(6856)
			p.ShowCreateProcedure()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(6857)
			p.ShowCreateTrigger()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(6858)
			p.ShowCreateUser()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(6859)
			p.ShowCreateView()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(6860)
			p.ShowEngine()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(6861)
			p.ShowEngines()
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(6862)
			p.ShowCharset()
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(6863)
			p.ShowErrors()
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(6864)
			p.ShowEvents()
		}

	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(6865)
			p.ShowFunctionCode()
		}

	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(6866)
			p.ShowFunctionStatus()
		}

	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(6867)
			p.ShowGrant()
		}

	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(6868)
			p.ShowMasterStatus()
		}

	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(6869)
			p.ShowPlugins()
		}

	case 28:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(6870)
			p.ShowOpenTables()
		}

	case 29:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(6871)
			p.ShowPrivileges()
		}

	case 30:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(6872)
			p.ShowProcedureCode()
		}

	case 31:
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(6873)
			p.ShowProcesslist()
		}

	case 32:
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(6874)
			p.ShowProfile()
		}

	case 33:
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(6875)
			p.ShowProcedureStatus()
		}

	case 34:
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(6876)
			p.ShowProfiles()
		}

	case 35:
		p.EnterOuterAlt(localctx, 35)
		{
			p.SetState(6877)
			p.ShowSlavehost()
		}

	case 36:
		p.EnterOuterAlt(localctx, 36)
		{
			p.SetState(6878)
			p.ShowSlaveStatus()
		}

	case 37:
		p.EnterOuterAlt(localctx, 37)
		{
			p.SetState(6879)
			p.ShowRelaylogEvent()
		}

	case 38:
		p.EnterOuterAlt(localctx, 38)
		{
			p.SetState(6880)
			p.ShowStatus()
		}

	case 39:
		p.EnterOuterAlt(localctx, 39)
		{
			p.SetState(6881)
			p.ShowTriggers()
		}

	case 40:
		p.EnterOuterAlt(localctx, 40)
		{
			p.SetState(6882)
			p.ShowWarnings()
		}

	case 41:
		p.EnterOuterAlt(localctx, 41)
		{
			p.SetState(6883)
			p.ShowVariables()
		}

	case 42:
		p.EnterOuterAlt(localctx, 42)
		{
			p.SetState(6884)
			p.ShowReplicas()
		}

	case 43:
		p.EnterOuterAlt(localctx, 43)
		{
			p.SetState(6885)
			p.ShowReplicaStatus()
		}

	}

	return localctx
}

// ISetTransactionContext is an interface to support dynamic dispatch.
type ISetTransactionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetTransactionContext differentiates from other interfaces.
	IsSetTransactionContext()
}

type SetTransactionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetTransactionContext() *SetTransactionContext {
	var p = new(SetTransactionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_setTransaction
	return p
}

func (*SetTransactionContext) IsSetTransactionContext() {}

func NewSetTransactionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetTransactionContext {
	var p = new(SetTransactionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_setTransaction

	return p
}

func (s *SetTransactionContext) GetParser() antlr.Parser { return s.parser }

func (s *SetTransactionContext) SET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSET, 0)
}

func (s *SetTransactionContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTRANSACTION, 0)
}

func (s *SetTransactionContext) TransactionCharacteristics() ITransactionCharacteristicsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransactionCharacteristicsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITransactionCharacteristicsContext)
}

func (s *SetTransactionContext) OptionType() IOptionTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptionTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOptionTypeContext)
}

func (s *SetTransactionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetTransactionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetTransactionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSetTransaction(s)
	}
}

func (s *SetTransactionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSetTransaction(s)
	}
}

func (s *SetTransactionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSetTransaction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SetTransaction() (localctx ISetTransactionContext) {
	this := p
	_ = this

	localctx = NewSetTransactionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1000, MySQLStatementParserRULE_setTransaction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6888)
		p.Match(MySQLStatementParserSET)
	}
	p.SetState(6890)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserGLOBAL || _la == MySQLStatementParserLOCAL || _la == MySQLStatementParserPERSIST || _la == MySQLStatementParserPERSIST_ONLY || _la == MySQLStatementParserSESSION {
		{
			p.SetState(6889)
			p.OptionType()
		}

	}
	{
		p.SetState(6892)
		p.Match(MySQLStatementParserTRANSACTION)
	}
	{
		p.SetState(6893)
		p.TransactionCharacteristics()
	}

	return localctx
}

// ISetAutoCommitContext is an interface to support dynamic dispatch.
type ISetAutoCommitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAutoCommitValue returns the autoCommitValue token.
	GetAutoCommitValue() antlr.Token

	// SetAutoCommitValue sets the autoCommitValue token.
	SetAutoCommitValue(antlr.Token)

	// IsSetAutoCommitContext differentiates from other interfaces.
	IsSetAutoCommitContext()
}

type SetAutoCommitContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	autoCommitValue antlr.Token
}

func NewEmptySetAutoCommitContext() *SetAutoCommitContext {
	var p = new(SetAutoCommitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_setAutoCommit
	return p
}

func (*SetAutoCommitContext) IsSetAutoCommitContext() {}

func NewSetAutoCommitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetAutoCommitContext {
	var p = new(SetAutoCommitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_setAutoCommit

	return p
}

func (s *SetAutoCommitContext) GetParser() antlr.Parser { return s.parser }

func (s *SetAutoCommitContext) GetAutoCommitValue() antlr.Token { return s.autoCommitValue }

func (s *SetAutoCommitContext) SetAutoCommitValue(v antlr.Token) { s.autoCommitValue = v }

func (s *SetAutoCommitContext) SET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSET, 0)
}

func (s *SetAutoCommitContext) AUTOCOMMIT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAUTOCOMMIT, 0)
}

func (s *SetAutoCommitContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *SetAutoCommitContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *SetAutoCommitContext) ON() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserON, 0)
}

func (s *SetAutoCommitContext) OFF() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOFF, 0)
}

func (s *SetAutoCommitContext) AllAT_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserAT_)
}

func (s *SetAutoCommitContext) AT_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAT_, i)
}

func (s *SetAutoCommitContext) OptionType() IOptionTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptionTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOptionTypeContext)
}

func (s *SetAutoCommitContext) DOT_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDOT_, 0)
}

func (s *SetAutoCommitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetAutoCommitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetAutoCommitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSetAutoCommit(s)
	}
}

func (s *SetAutoCommitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSetAutoCommit(s)
	}
}

func (s *SetAutoCommitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSetAutoCommit(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SetAutoCommit() (localctx ISetAutoCommitContext) {
	this := p
	_ = this

	localctx = NewSetAutoCommitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1002, MySQLStatementParserRULE_setAutoCommit)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6895)
		p.Match(MySQLStatementParserSET)
	}
	p.SetState(6900)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserAT_ {
		p.SetState(6897)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 897, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6896)
				p.Match(MySQLStatementParserAT_)
			}

		}
		{
			p.SetState(6899)
			p.Match(MySQLStatementParserAT_)
		}

	}
	p.SetState(6903)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserGLOBAL || _la == MySQLStatementParserLOCAL || _la == MySQLStatementParserPERSIST || _la == MySQLStatementParserPERSIST_ONLY || _la == MySQLStatementParserSESSION {
		{
			p.SetState(6902)
			p.OptionType()
		}

	}
	p.SetState(6906)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserDOT_ {
		{
			p.SetState(6905)
			p.Match(MySQLStatementParserDOT_)
		}

	}
	{
		p.SetState(6908)
		p.Match(MySQLStatementParserAUTOCOMMIT)
	}
	{
		p.SetState(6909)
		p.Match(MySQLStatementParserEQ_)
	}
	{
		p.SetState(6910)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*SetAutoCommitContext).autoCommitValue = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserOFF || _la == MySQLStatementParserON || _la == MySQLStatementParserNUMBER_) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*SetAutoCommitContext).autoCommitValue = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IBeginTransactionContext is an interface to support dynamic dispatch.
type IBeginTransactionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBeginTransactionContext differentiates from other interfaces.
	IsBeginTransactionContext()
}

type BeginTransactionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBeginTransactionContext() *BeginTransactionContext {
	var p = new(BeginTransactionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_beginTransaction
	return p
}

func (*BeginTransactionContext) IsBeginTransactionContext() {}

func NewBeginTransactionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BeginTransactionContext {
	var p = new(BeginTransactionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_beginTransaction

	return p
}

func (s *BeginTransactionContext) GetParser() antlr.Parser { return s.parser }

func (s *BeginTransactionContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBEGIN, 0)
}

func (s *BeginTransactionContext) START() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTART, 0)
}

func (s *BeginTransactionContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTRANSACTION, 0)
}

func (s *BeginTransactionContext) AllTransactionCharacteristic() []ITransactionCharacteristicContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITransactionCharacteristicContext)(nil)).Elem())
	var tst = make([]ITransactionCharacteristicContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITransactionCharacteristicContext)
		}
	}

	return tst
}

func (s *BeginTransactionContext) TransactionCharacteristic(i int) ITransactionCharacteristicContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransactionCharacteristicContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITransactionCharacteristicContext)
}

func (s *BeginTransactionContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *BeginTransactionContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *BeginTransactionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BeginTransactionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BeginTransactionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterBeginTransaction(s)
	}
}

func (s *BeginTransactionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitBeginTransaction(s)
	}
}

func (s *BeginTransactionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitBeginTransaction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) BeginTransaction() (localctx IBeginTransactionContext) {
	this := p
	_ = this

	localctx = NewBeginTransactionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1004, MySQLStatementParserRULE_beginTransaction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6925)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserBEGIN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6912)
			p.Match(MySQLStatementParserBEGIN)
		}

	case MySQLStatementParserSTART:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6913)
			p.Match(MySQLStatementParserSTART)
		}
		{
			p.SetState(6914)
			p.Match(MySQLStatementParserTRANSACTION)
		}
		p.SetState(6923)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserREAD || _la == MySQLStatementParserWITH {
			{
				p.SetState(6915)
				p.TransactionCharacteristic()
			}
			p.SetState(6920)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySQLStatementParserCOMMA_ {
				{
					p.SetState(6916)
					p.Match(MySQLStatementParserCOMMA_)
				}
				{
					p.SetState(6917)
					p.TransactionCharacteristic()
				}

				p.SetState(6922)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITransactionCharacteristicContext is an interface to support dynamic dispatch.
type ITransactionCharacteristicContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransactionCharacteristicContext differentiates from other interfaces.
	IsTransactionCharacteristicContext()
}

type TransactionCharacteristicContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransactionCharacteristicContext() *TransactionCharacteristicContext {
	var p = new(TransactionCharacteristicContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_transactionCharacteristic
	return p
}

func (*TransactionCharacteristicContext) IsTransactionCharacteristicContext() {}

func NewTransactionCharacteristicContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TransactionCharacteristicContext {
	var p = new(TransactionCharacteristicContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_transactionCharacteristic

	return p
}

func (s *TransactionCharacteristicContext) GetParser() antlr.Parser { return s.parser }

func (s *TransactionCharacteristicContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWITH, 0)
}

func (s *TransactionCharacteristicContext) CONSISTENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCONSISTENT, 0)
}

func (s *TransactionCharacteristicContext) SNAPSHOT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSNAPSHOT, 0)
}

func (s *TransactionCharacteristicContext) TransactionAccessMode() ITransactionAccessModeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransactionAccessModeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITransactionAccessModeContext)
}

func (s *TransactionCharacteristicContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TransactionCharacteristicContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TransactionCharacteristicContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTransactionCharacteristic(s)
	}
}

func (s *TransactionCharacteristicContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTransactionCharacteristic(s)
	}
}

func (s *TransactionCharacteristicContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTransactionCharacteristic(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TransactionCharacteristic() (localctx ITransactionCharacteristicContext) {
	this := p
	_ = this

	localctx = NewTransactionCharacteristicContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1006, MySQLStatementParserRULE_transactionCharacteristic)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6931)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserWITH:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6927)
			p.Match(MySQLStatementParserWITH)
		}
		{
			p.SetState(6928)
			p.Match(MySQLStatementParserCONSISTENT)
		}
		{
			p.SetState(6929)
			p.Match(MySQLStatementParserSNAPSHOT)
		}

	case MySQLStatementParserREAD:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6930)
			p.TransactionAccessMode()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICommitContext is an interface to support dynamic dispatch.
type ICommitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCommitContext differentiates from other interfaces.
	IsCommitContext()
}

type CommitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommitContext() *CommitContext {
	var p = new(CommitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_commit
	return p
}

func (*CommitContext) IsCommitContext() {}

func NewCommitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CommitContext {
	var p = new(CommitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_commit

	return p
}

func (s *CommitContext) GetParser() antlr.Parser { return s.parser }

func (s *CommitContext) COMMIT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMIT, 0)
}

func (s *CommitContext) WORK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWORK, 0)
}

func (s *CommitContext) OptionChain() IOptionChainContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptionChainContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOptionChainContext)
}

func (s *CommitContext) OptionRelease() IOptionReleaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptionReleaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOptionReleaseContext)
}

func (s *CommitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CommitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CommitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCommit(s)
	}
}

func (s *CommitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCommit(s)
	}
}

func (s *CommitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCommit(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Commit() (localctx ICommitContext) {
	this := p
	_ = this

	localctx = NewCommitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1008, MySQLStatementParserRULE_commit)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6933)
		p.Match(MySQLStatementParserCOMMIT)
	}
	p.SetState(6935)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserWORK {
		{
			p.SetState(6934)
			p.Match(MySQLStatementParserWORK)
		}

	}
	p.SetState(6938)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserAND {
		{
			p.SetState(6937)
			p.OptionChain()
		}

	}
	p.SetState(6941)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserNO || _la == MySQLStatementParserRELEASE {
		{
			p.SetState(6940)
			p.OptionRelease()
		}

	}

	return localctx
}

// IRollbackContext is an interface to support dynamic dispatch.
type IRollbackContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRollbackContext differentiates from other interfaces.
	IsRollbackContext()
}

type RollbackContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRollbackContext() *RollbackContext {
	var p = new(RollbackContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_rollback
	return p
}

func (*RollbackContext) IsRollbackContext() {}

func NewRollbackContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RollbackContext {
	var p = new(RollbackContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_rollback

	return p
}

func (s *RollbackContext) GetParser() antlr.Parser { return s.parser }

func (s *RollbackContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROLLBACK, 0)
}

func (s *RollbackContext) TO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTO, 0)
}

func (s *RollbackContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *RollbackContext) WORK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWORK, 0)
}

func (s *RollbackContext) SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSAVEPOINT, 0)
}

func (s *RollbackContext) OptionChain() IOptionChainContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptionChainContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOptionChainContext)
}

func (s *RollbackContext) OptionRelease() IOptionReleaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptionReleaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOptionReleaseContext)
}

func (s *RollbackContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RollbackContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RollbackContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterRollback(s)
	}
}

func (s *RollbackContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitRollback(s)
	}
}

func (s *RollbackContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitRollback(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Rollback() (localctx IRollbackContext) {
	this := p
	_ = this

	localctx = NewRollbackContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1010, MySQLStatementParserRULE_rollback)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6943)
		p.Match(MySQLStatementParserROLLBACK)
	}
	p.SetState(6961)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 913, p.GetParserRuleContext()) {
	case 1:
		p.SetState(6945)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserWORK {
			{
				p.SetState(6944)
				p.Match(MySQLStatementParserWORK)
			}

		}
		{
			p.SetState(6947)
			p.Match(MySQLStatementParserTO)
		}
		p.SetState(6949)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 909, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6948)
				p.Match(MySQLStatementParserSAVEPOINT)
			}

		}
		{
			p.SetState(6951)
			p.Identifier()
		}

	case 2:
		p.SetState(6953)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserWORK {
			{
				p.SetState(6952)
				p.Match(MySQLStatementParserWORK)
			}

		}
		p.SetState(6956)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserAND {
			{
				p.SetState(6955)
				p.OptionChain()
			}

		}
		p.SetState(6959)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserNO || _la == MySQLStatementParserRELEASE {
			{
				p.SetState(6958)
				p.OptionRelease()
			}

		}

	}

	return localctx
}

// ISavepointContext is an interface to support dynamic dispatch.
type ISavepointContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSavepointContext differentiates from other interfaces.
	IsSavepointContext()
}

type SavepointContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySavepointContext() *SavepointContext {
	var p = new(SavepointContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_savepoint
	return p
}

func (*SavepointContext) IsSavepointContext() {}

func NewSavepointContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SavepointContext {
	var p = new(SavepointContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_savepoint

	return p
}

func (s *SavepointContext) GetParser() antlr.Parser { return s.parser }

func (s *SavepointContext) SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSAVEPOINT, 0)
}

func (s *SavepointContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *SavepointContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SavepointContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SavepointContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSavepoint(s)
	}
}

func (s *SavepointContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSavepoint(s)
	}
}

func (s *SavepointContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSavepoint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Savepoint() (localctx ISavepointContext) {
	this := p
	_ = this

	localctx = NewSavepointContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1012, MySQLStatementParserRULE_savepoint)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6963)
		p.Match(MySQLStatementParserSAVEPOINT)
	}
	{
		p.SetState(6964)
		p.Identifier()
	}

	return localctx
}

// IBeginContext is an interface to support dynamic dispatch.
type IBeginContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBeginContext differentiates from other interfaces.
	IsBeginContext()
}

type BeginContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBeginContext() *BeginContext {
	var p = new(BeginContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_begin
	return p
}

func (*BeginContext) IsBeginContext() {}

func NewBeginContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BeginContext {
	var p = new(BeginContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_begin

	return p
}

func (s *BeginContext) GetParser() antlr.Parser { return s.parser }

func (s *BeginContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBEGIN, 0)
}

func (s *BeginContext) WORK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWORK, 0)
}

func (s *BeginContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BeginContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BeginContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterBegin(s)
	}
}

func (s *BeginContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitBegin(s)
	}
}

func (s *BeginContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitBegin(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Begin() (localctx IBeginContext) {
	this := p
	_ = this

	localctx = NewBeginContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1014, MySQLStatementParserRULE_begin)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6966)
		p.Match(MySQLStatementParserBEGIN)
	}
	p.SetState(6968)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserWORK {
		{
			p.SetState(6967)
			p.Match(MySQLStatementParserWORK)
		}

	}

	return localctx
}

// ILockContext is an interface to support dynamic dispatch.
type ILockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLockContext differentiates from other interfaces.
	IsLockContext()
}

type LockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLockContext() *LockContext {
	var p = new(LockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_lock
	return p
}

func (*LockContext) IsLockContext() {}

func NewLockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LockContext {
	var p = new(LockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_lock

	return p
}

func (s *LockContext) GetParser() antlr.Parser { return s.parser }

func (s *LockContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCK, 0)
}

func (s *LockContext) INSTANCE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINSTANCE, 0)
}

func (s *LockContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOR, 0)
}

func (s *LockContext) BACKUP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBACKUP, 0)
}

func (s *LockContext) AllTableLock() []ITableLockContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableLockContext)(nil)).Elem())
	var tst = make([]ITableLockContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableLockContext)
		}
	}

	return tst
}

func (s *LockContext) TableLock(i int) ITableLockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableLockContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableLockContext)
}

func (s *LockContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLE, 0)
}

func (s *LockContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLES, 0)
}

func (s *LockContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *LockContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *LockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterLock(s)
	}
}

func (s *LockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitLock(s)
	}
}

func (s *LockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitLock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Lock() (localctx ILockContext) {
	this := p
	_ = this

	localctx = NewLockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1016, MySQLStatementParserRULE_lock)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6970)
		p.Match(MySQLStatementParserLOCK)
	}
	p.SetState(6983)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserINSTANCE:
		{
			p.SetState(6971)
			p.Match(MySQLStatementParserINSTANCE)
		}
		{
			p.SetState(6972)
			p.Match(MySQLStatementParserFOR)
		}
		{
			p.SetState(6973)
			p.Match(MySQLStatementParserBACKUP)
		}

	case MySQLStatementParserTABLE, MySQLStatementParserTABLES:
		{
			p.SetState(6974)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserTABLE || _la == MySQLStatementParserTABLES) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(6975)
			p.TableLock()
		}
		p.SetState(6980)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(6976)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(6977)
				p.TableLock()
			}

			p.SetState(6982)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUnlockContext is an interface to support dynamic dispatch.
type IUnlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnlockContext differentiates from other interfaces.
	IsUnlockContext()
}

type UnlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnlockContext() *UnlockContext {
	var p = new(UnlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_unlock
	return p
}

func (*UnlockContext) IsUnlockContext() {}

func NewUnlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnlockContext {
	var p = new(UnlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_unlock

	return p
}

func (s *UnlockContext) GetParser() antlr.Parser { return s.parser }

func (s *UnlockContext) UNLOCK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNLOCK, 0)
}

func (s *UnlockContext) INSTANCE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINSTANCE, 0)
}

func (s *UnlockContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLE, 0)
}

func (s *UnlockContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLES, 0)
}

func (s *UnlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterUnlock(s)
	}
}

func (s *UnlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitUnlock(s)
	}
}

func (s *UnlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitUnlock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Unlock() (localctx IUnlockContext) {
	this := p
	_ = this

	localctx = NewUnlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1018, MySQLStatementParserRULE_unlock)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6985)
		p.Match(MySQLStatementParserUNLOCK)
	}
	{
		p.SetState(6986)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserINSTANCE || _la == MySQLStatementParserTABLE || _la == MySQLStatementParserTABLES) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IReleaseSavepointContext is an interface to support dynamic dispatch.
type IReleaseSavepointContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReleaseSavepointContext differentiates from other interfaces.
	IsReleaseSavepointContext()
}

type ReleaseSavepointContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReleaseSavepointContext() *ReleaseSavepointContext {
	var p = new(ReleaseSavepointContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_releaseSavepoint
	return p
}

func (*ReleaseSavepointContext) IsReleaseSavepointContext() {}

func NewReleaseSavepointContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReleaseSavepointContext {
	var p = new(ReleaseSavepointContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_releaseSavepoint

	return p
}

func (s *ReleaseSavepointContext) GetParser() antlr.Parser { return s.parser }

func (s *ReleaseSavepointContext) RELEASE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRELEASE, 0)
}

func (s *ReleaseSavepointContext) SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSAVEPOINT, 0)
}

func (s *ReleaseSavepointContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ReleaseSavepointContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReleaseSavepointContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReleaseSavepointContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterReleaseSavepoint(s)
	}
}

func (s *ReleaseSavepointContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitReleaseSavepoint(s)
	}
}

func (s *ReleaseSavepointContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitReleaseSavepoint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ReleaseSavepoint() (localctx IReleaseSavepointContext) {
	this := p
	_ = this

	localctx = NewReleaseSavepointContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1020, MySQLStatementParserRULE_releaseSavepoint)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6988)
		p.Match(MySQLStatementParserRELEASE)
	}
	{
		p.SetState(6989)
		p.Match(MySQLStatementParserSAVEPOINT)
	}
	{
		p.SetState(6990)
		p.Identifier()
	}

	return localctx
}

// IXaContext is an interface to support dynamic dispatch.
type IXaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXaContext differentiates from other interfaces.
	IsXaContext()
}

type XaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXaContext() *XaContext {
	var p = new(XaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_xa
	return p
}

func (*XaContext) IsXaContext() {}

func NewXaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *XaContext {
	var p = new(XaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_xa

	return p
}

func (s *XaContext) GetParser() antlr.Parser { return s.parser }

func (s *XaContext) XA() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserXA, 0)
}

func (s *XaContext) Xid() IXidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXidContext)
}

func (s *XaContext) END() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEND, 0)
}

func (s *XaContext) PREPARE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPREPARE, 0)
}

func (s *XaContext) COMMIT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMIT, 0)
}

func (s *XaContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROLLBACK, 0)
}

func (s *XaContext) RECOVER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRECOVER, 0)
}

func (s *XaContext) START() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTART, 0)
}

func (s *XaContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBEGIN, 0)
}

func (s *XaContext) JOIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserJOIN, 0)
}

func (s *XaContext) RESUME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRESUME, 0)
}

func (s *XaContext) SUSPEND() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSUSPEND, 0)
}

func (s *XaContext) ONE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserONE, 0)
}

func (s *XaContext) PHASE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPHASE, 0)
}

func (s *XaContext) CONVERT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCONVERT, 0)
}

func (s *XaContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOR, 0)
}

func (s *XaContext) MIGRATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMIGRATE, 0)
}

func (s *XaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *XaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *XaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterXa(s)
	}
}

func (s *XaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitXa(s)
	}
}

func (s *XaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitXa(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Xa() (localctx IXaContext) {
	this := p
	_ = this

	localctx = NewXaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1022, MySQLStatementParserRULE_xa)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6992)
		p.Match(MySQLStatementParserXA)
	}
	p.SetState(7021)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserBEGIN, MySQLStatementParserSTART:
		{
			p.SetState(6993)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserBEGIN || _la == MySQLStatementParserSTART) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(6994)
			p.Xid()
		}
		{
			p.SetState(6995)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserJOIN || _la == MySQLStatementParserRESUME) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case MySQLStatementParserEND:
		{
			p.SetState(6997)
			p.Match(MySQLStatementParserEND)
		}
		{
			p.SetState(6998)
			p.Xid()
		}
		p.SetState(7004)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserSUSPEND {
			{
				p.SetState(6999)
				p.Match(MySQLStatementParserSUSPEND)
			}
			p.SetState(7002)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySQLStatementParserFOR {
				{
					p.SetState(7000)
					p.Match(MySQLStatementParserFOR)
				}
				{
					p.SetState(7001)
					p.Match(MySQLStatementParserMIGRATE)
				}

			}

		}

	case MySQLStatementParserPREPARE:
		{
			p.SetState(7006)
			p.Match(MySQLStatementParserPREPARE)
		}
		{
			p.SetState(7007)
			p.Xid()
		}

	case MySQLStatementParserCOMMIT:
		{
			p.SetState(7008)
			p.Match(MySQLStatementParserCOMMIT)
		}
		{
			p.SetState(7009)
			p.Xid()
		}
		p.SetState(7012)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserONE {
			{
				p.SetState(7010)
				p.Match(MySQLStatementParserONE)
			}
			{
				p.SetState(7011)
				p.Match(MySQLStatementParserPHASE)
			}

		}

	case MySQLStatementParserROLLBACK:
		{
			p.SetState(7014)
			p.Match(MySQLStatementParserROLLBACK)
		}
		{
			p.SetState(7015)
			p.Xid()
		}

	case MySQLStatementParserRECOVER:
		{
			p.SetState(7016)
			p.Match(MySQLStatementParserRECOVER)
		}
		p.SetState(7019)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserCONVERT {
			{
				p.SetState(7017)
				p.Match(MySQLStatementParserCONVERT)
			}
			{
				p.SetState(7018)
				p.Xid()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOptionChainContext is an interface to support dynamic dispatch.
type IOptionChainContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOptionChainContext differentiates from other interfaces.
	IsOptionChainContext()
}

type OptionChainContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptionChainContext() *OptionChainContext {
	var p = new(OptionChainContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_optionChain
	return p
}

func (*OptionChainContext) IsOptionChainContext() {}

func NewOptionChainContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OptionChainContext {
	var p = new(OptionChainContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_optionChain

	return p
}

func (s *OptionChainContext) GetParser() antlr.Parser { return s.parser }

func (s *OptionChainContext) AND() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAND, 0)
}

func (s *OptionChainContext) CHAIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHAIN, 0)
}

func (s *OptionChainContext) NO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNO, 0)
}

func (s *OptionChainContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OptionChainContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OptionChainContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterOptionChain(s)
	}
}

func (s *OptionChainContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitOptionChain(s)
	}
}

func (s *OptionChainContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitOptionChain(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) OptionChain() (localctx IOptionChainContext) {
	this := p
	_ = this

	localctx = NewOptionChainContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1024, MySQLStatementParserRULE_optionChain)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7023)
		p.Match(MySQLStatementParserAND)
	}
	p.SetState(7025)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserNO {
		{
			p.SetState(7024)
			p.Match(MySQLStatementParserNO)
		}

	}
	{
		p.SetState(7027)
		p.Match(MySQLStatementParserCHAIN)
	}

	return localctx
}

// IOptionReleaseContext is an interface to support dynamic dispatch.
type IOptionReleaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOptionReleaseContext differentiates from other interfaces.
	IsOptionReleaseContext()
}

type OptionReleaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptionReleaseContext() *OptionReleaseContext {
	var p = new(OptionReleaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_optionRelease
	return p
}

func (*OptionReleaseContext) IsOptionReleaseContext() {}

func NewOptionReleaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OptionReleaseContext {
	var p = new(OptionReleaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_optionRelease

	return p
}

func (s *OptionReleaseContext) GetParser() antlr.Parser { return s.parser }

func (s *OptionReleaseContext) RELEASE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRELEASE, 0)
}

func (s *OptionReleaseContext) NO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNO, 0)
}

func (s *OptionReleaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OptionReleaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OptionReleaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterOptionRelease(s)
	}
}

func (s *OptionReleaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitOptionRelease(s)
	}
}

func (s *OptionReleaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitOptionRelease(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) OptionRelease() (localctx IOptionReleaseContext) {
	this := p
	_ = this

	localctx = NewOptionReleaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1026, MySQLStatementParserRULE_optionRelease)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7030)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserNO {
		{
			p.SetState(7029)
			p.Match(MySQLStatementParserNO)
		}

	}
	{
		p.SetState(7032)
		p.Match(MySQLStatementParserRELEASE)
	}

	return localctx
}

// ITableLockContext is an interface to support dynamic dispatch.
type ITableLockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableLockContext differentiates from other interfaces.
	IsTableLockContext()
}

type TableLockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableLockContext() *TableLockContext {
	var p = new(TableLockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_tableLock
	return p
}

func (*TableLockContext) IsTableLockContext() {}

func NewTableLockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableLockContext {
	var p = new(TableLockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_tableLock

	return p
}

func (s *TableLockContext) GetParser() antlr.Parser { return s.parser }

func (s *TableLockContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *TableLockContext) LockOption() ILockOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILockOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILockOptionContext)
}

func (s *TableLockContext) Alias() IAliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAliasContext)
}

func (s *TableLockContext) AS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAS, 0)
}

func (s *TableLockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableLockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableLockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTableLock(s)
	}
}

func (s *TableLockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTableLock(s)
	}
}

func (s *TableLockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTableLock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TableLock() (localctx ITableLockContext) {
	this := p
	_ = this

	localctx = NewTableLockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1028, MySQLStatementParserRULE_tableLock)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7034)
		p.TableName()
	}
	p.SetState(7039)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49))|(1<<(MySQLStatementParserGROUP_CONCAT-49))|(1<<(MySQLStatementParserCAST-49))|(1<<(MySQLStatementParserPOSITION-49))|(1<<(MySQLStatementParserSUBSTRING-49))|(1<<(MySQLStatementParserSUBSTR-49))|(1<<(MySQLStatementParserEXTRACT-49))|(1<<(MySQLStatementParserTRIM-49))|(1<<(MySQLStatementParserLAST_DAY-49))|(1<<(MySQLStatementParserTRADITIONAL-49))|(1<<(MySQLStatementParserTREE-49))|(1<<(MySQLStatementParserMYSQL_ADMIN-49))|(1<<(MySQLStatementParserINSTANT-49))|(1<<(MySQLStatementParserINPLACE-49))|(1<<(MySQLStatementParserCOPY-49))|(1<<(MySQLStatementParserUL_BINARY-49))|(1<<(MySQLStatementParserAUTOCOMMIT-49))|(1<<(MySQLStatementParserINNODB-49))|(1<<(MySQLStatementParserREDO_LOG-49))|(1<<(MySQLStatementParserACCOUNT-49))|(1<<(MySQLStatementParserACTION-49))|(1<<(MySQLStatementParserACTIVE-49))|(1<<(MySQLStatementParserADMIN-49))|(1<<(MySQLStatementParserAFTER-49))|(1<<(MySQLStatementParserAGAINST-49)))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(MySQLStatementParserAGGREGATE-81))|(1<<(MySQLStatementParserALGORITHM-81))|(1<<(MySQLStatementParserALWAYS-81))|(1<<(MySQLStatementParserANY-81))|(1<<(MySQLStatementParserARRAY-81))|(1<<(MySQLStatementParserAS-81))|(1<<(MySQLStatementParserASCII-81))|(1<<(MySQLStatementParserAT-81))|(1<<(MySQLStatementParserATTRIBUTE-81))|(1<<(MySQLStatementParserAUTOEXTEND_SIZE-81))|(1<<(MySQLStatementParserAUTO_INCREMENT-81))|(1<<(MySQLStatementParserAVG-81))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-81))|(1<<(MySQLStatementParserBACKUP-81))|(1<<(MySQLStatementParserBEGIN-81))|(1<<(MySQLStatementParserBINLOG-81))|(1<<(MySQLStatementParserBIT-81))|(1<<(MySQLStatementParserBLOCK-81))|(1<<(MySQLStatementParserBOOL-81))|(1<<(MySQLStatementParserBOOLEAN-81)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(MySQLStatementParserBTREE-114))|(1<<(MySQLStatementParserBUCKETS-114))|(1<<(MySQLStatementParserBYTE-114))|(1<<(MySQLStatementParserCACHE-114))|(1<<(MySQLStatementParserCASCADED-114))|(1<<(MySQLStatementParserCATALOG_NAME-114))|(1<<(MySQLStatementParserCHAIN-114))|(1<<(MySQLStatementParserCHANGED-114))|(1<<(MySQLStatementParserCHANNEL-114))|(1<<(MySQLStatementParserCHARSET-114))|(1<<(MySQLStatementParserCHECKSUM-114))|(1<<(MySQLStatementParserCIPHER-114))|(1<<(MySQLStatementParserCLASS_ORIGIN-114))|(1<<(MySQLStatementParserCLIENT-114))|(1<<(MySQLStatementParserCLONE-114))|(1<<(MySQLStatementParserCLOSE-114))|(1<<(MySQLStatementParserCOALESCE-114))|(1<<(MySQLStatementParserCODE-114))|(1<<(MySQLStatementParserCOLLATION-114))|(1<<(MySQLStatementParserCOLUMNS-114))|(1<<(MySQLStatementParserCOLUMN_FORMAT-114))|(1<<(MySQLStatementParserCOLUMN_NAME-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(MySQLStatementParserCOMMENT-146))|(1<<(MySQLStatementParserCOMMIT-146))|(1<<(MySQLStatementParserCOMMITTED-146))|(1<<(MySQLStatementParserCOMPACT-146))|(1<<(MySQLStatementParserCOMPLETION-146))|(1<<(MySQLStatementParserCOMPONENT-146))|(1<<(MySQLStatementParserCOMPRESSED-146))|(1<<(MySQLStatementParserCOMPRESSION-146))|(1<<(MySQLStatementParserCONCURRENT-146))|(1<<(MySQLStatementParserCONNECTION-146))|(1<<(MySQLStatementParserCONSISTENT-146))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-146))|(1<<(MySQLStatementParserCONSTRAINT_NAME-146))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-146))|(1<<(MySQLStatementParserCONTAINS-146))|(1<<(MySQLStatementParserCONTEXT-146))|(1<<(MySQLStatementParserCPU-146))|(1<<(MySQLStatementParserCURRENT-146))|(1<<(MySQLStatementParserCURSOR_NAME-146)))) != 0) || (((_la-178)&-(0x1f+1)) == 0 && ((1<<uint((_la-178)))&((1<<(MySQLStatementParserDATA-178))|(1<<(MySQLStatementParserDATAFILE-178))|(1<<(MySQLStatementParserDATE-178))|(1<<(MySQLStatementParserDATETIME-178))|(1<<(MySQLStatementParserDAY-178))|(1<<(MySQLStatementParserDEALLOCATE-178))|(1<<(MySQLStatementParserDEFAULT_AUTH-178))|(1<<(MySQLStatementParserDEFINER-178))|(1<<(MySQLStatementParserDEFINITION-178))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-178))|(1<<(MySQLStatementParserDESCRIPTION-178))|(1<<(MySQLStatementParserDIAGNOSTICS-178))|(1<<(MySQLStatementParserDIRECTORY-178))|(1<<(MySQLStatementParserDISABLE-178))|(1<<(MySQLStatementParserDISCARD-178))|(1<<(MySQLStatementParserDISK-178)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(MySQLStatementParserDO-213))|(1<<(MySQLStatementParserDUMPFILE-213))|(1<<(MySQLStatementParserDUPLICATE-213))|(1<<(MySQLStatementParserDYNAMIC-213))|(1<<(MySQLStatementParserENABLE-213))|(1<<(MySQLStatementParserENCRYPTION-213))|(1<<(MySQLStatementParserEND-213))|(1<<(MySQLStatementParserENDS-213))|(1<<(MySQLStatementParserENFORCED-213))|(1<<(MySQLStatementParserENGINE-213))|(1<<(MySQLStatementParserENGINES-213))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-213))|(1<<(MySQLStatementParserENUM-213))|(1<<(MySQLStatementParserERROR-213))|(1<<(MySQLStatementParserERRORS-213))|(1<<(MySQLStatementParserESCAPE-213))|(1<<(MySQLStatementParserEVENT-213))|(1<<(MySQLStatementParserEVENTS-213))|(1<<(MySQLStatementParserEVERY-213))|(1<<(MySQLStatementParserEXCHANGE-213))|(1<<(MySQLStatementParserEXCLUDE-213))|(1<<(MySQLStatementParserEXECUTE-213)))) != 0) || (((_la-247)&-(0x1f+1)) == 0 && ((1<<uint((_la-247)))&((1<<(MySQLStatementParserEXPANSION-247))|(1<<(MySQLStatementParserEXPIRE-247))|(1<<(MySQLStatementParserEXPORT-247))|(1<<(MySQLStatementParserEXTENDED-247))|(1<<(MySQLStatementParserEXTENT_SIZE-247))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-247))|(1<<(MySQLStatementParserFAST-247))|(1<<(MySQLStatementParserFAULTS-247))|(1<<(MySQLStatementParserFILE-247))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-247))|(1<<(MySQLStatementParserFILTER-247))|(1<<(MySQLStatementParserFIRST-247))|(1<<(MySQLStatementParserFIXED-247))|(1<<(MySQLStatementParserFLUSH-247))|(1<<(MySQLStatementParserFOLLOWING-247))|(1<<(MySQLStatementParserFOLLOWS-247))|(1<<(MySQLStatementParserFORMAT-247))|(1<<(MySQLStatementParserFOUND-247))|(1<<(MySQLStatementParserFULL-247)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(MySQLStatementParserGENERAL-279))|(1<<(MySQLStatementParserGEOMETRY-279))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-279))|(1<<(MySQLStatementParserGET_FORMAT-279))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-279))|(1<<(MySQLStatementParserGLOBAL-279))|(1<<(MySQLStatementParserGRANTS-279))|(1<<(MySQLStatementParserGROUP_REPLICATION-279))|(1<<(MySQLStatementParserHANDLER-279))|(1<<(MySQLStatementParserHASH-279))|(1<<(MySQLStatementParserHELP-279))|(1<<(MySQLStatementParserHISTOGRAM-279))|(1<<(MySQLStatementParserHISTORY-279))|(1<<(MySQLStatementParserHOST-279))|(1<<(MySQLStatementParserHOSTS-279))|(1<<(MySQLStatementParserHOUR-279))|(1<<(MySQLStatementParserIDENTIFIED-279))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-279))|(1<<(MySQLStatementParserIMPORT-279)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySQLStatementParserINACTIVE-312))|(1<<(MySQLStatementParserINDEXES-312))|(1<<(MySQLStatementParserINITIAL_SIZE-312))|(1<<(MySQLStatementParserINSERT_METHOD-312))|(1<<(MySQLStatementParserINSTALL-312))|(1<<(MySQLStatementParserINSTANCE-312))|(1<<(MySQLStatementParserINVISIBLE-312))|(1<<(MySQLStatementParserINVOKER-312))|(1<<(MySQLStatementParserIO-312))|(1<<(MySQLStatementParserIPC-312))|(1<<(MySQLStatementParserISOLATION-312))|(1<<(MySQLStatementParserISSUER-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySQLStatementParserJSON-344))|(1<<(MySQLStatementParserJSON_VALUE-344))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-344))|(1<<(MySQLStatementParserLANGUAGE-344))|(1<<(MySQLStatementParserLAST-344))|(1<<(MySQLStatementParserLAST_VALUE-344))|(1<<(MySQLStatementParserLEAVES-344))|(1<<(MySQLStatementParserLESS-344))|(1<<(MySQLStatementParserLEVEL-344))|(1<<(MySQLStatementParserLINESTRING-344))|(1<<(MySQLStatementParserLIST-344))|(1<<(MySQLStatementParserLOCAL-344))|(1<<(MySQLStatementParserLOCKED-344))|(1<<(MySQLStatementParserLOCKS-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySQLStatementParserLOGFILE-376))|(1<<(MySQLStatementParserLOGS-376))|(1<<(MySQLStatementParserMASTER-376))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-376))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-376))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-376))|(1<<(MySQLStatementParserMASTER_DELAY-376))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-376))|(1<<(MySQLStatementParserMASTER_HOST-376))|(1<<(MySQLStatementParserMASTER_LOG_FILE-376))|(1<<(MySQLStatementParserMASTER_LOG_POS-376))|(1<<(MySQLStatementParserMASTER_PASSWORD-376))|(1<<(MySQLStatementParserMASTER_PORT-376))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-376))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-376))|(1<<(MySQLStatementParserMASTER_SERVER_ID-376))|(1<<(MySQLStatementParserMASTER_SSL-376))|(1<<(MySQLStatementParserMASTER_SSL_CA-376))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_CERT-376))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-376))|(1<<(MySQLStatementParserMASTER_SSL_CRL-376))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_KEY-376))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySQLStatementParserMASTER_TLS_VERSION-408))|(1<<(MySQLStatementParserMASTER_USER-408))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-408))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_ROWS-408))|(1<<(MySQLStatementParserMAX_SIZE-408))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-408))|(1<<(MySQLStatementParserMEDIUM-408))|(1<<(MySQLStatementParserMEMBER-408))|(1<<(MySQLStatementParserMEMORY-408))|(1<<(MySQLStatementParserMERGE-408))|(1<<(MySQLStatementParserMESSAGE_TEXT-408))|(1<<(MySQLStatementParserMICROSECOND-408))|(1<<(MySQLStatementParserMIGRATE-408))|(1<<(MySQLStatementParserMINUTE-408))|(1<<(MySQLStatementParserMIN_ROWS-408))|(1<<(MySQLStatementParserMODE-408))|(1<<(MySQLStatementParserMODIFY-408))|(1<<(MySQLStatementParserMONTH-408))|(1<<(MySQLStatementParserMULTILINESTRING-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySQLStatementParserMULTIPOINT-440))|(1<<(MySQLStatementParserMULTIPOLYGON-440))|(1<<(MySQLStatementParserMUTEX-440))|(1<<(MySQLStatementParserMYSQL_ERRNO-440))|(1<<(MySQLStatementParserNAME-440))|(1<<(MySQLStatementParserNAMES-440))|(1<<(MySQLStatementParserNATIONAL-440))|(1<<(MySQLStatementParserNCHAR-440))|(1<<(MySQLStatementParserNDBCLUSTER-440))|(1<<(MySQLStatementParserNESTED-440))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-440))|(1<<(MySQLStatementParserNEVER-440))|(1<<(MySQLStatementParserNEW-440))|(1<<(MySQLStatementParserNEXT-440))|(1<<(MySQLStatementParserNO-440))|(1<<(MySQLStatementParserNODEGROUP-440))|(1<<(MySQLStatementParserNONE-440))|(1<<(MySQLStatementParserNOWAIT-440))|(1<<(MySQLStatementParserNO_WAIT-440))|(1<<(MySQLStatementParserNULLS-440))|(1<<(MySQLStatementParserNUMBER-440))|(1<<(MySQLStatementParserNVARCHAR-440))|(1<<(MySQLStatementParserOFF-440))|(1<<(MySQLStatementParserOFFSET-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySQLStatementParserOJ-472))|(1<<(MySQLStatementParserOLD-472))|(1<<(MySQLStatementParserONE-472))|(1<<(MySQLStatementParserONLY-472))|(1<<(MySQLStatementParserOPEN-472))|(1<<(MySQLStatementParserOPTIONAL-472))|(1<<(MySQLStatementParserOPTIONS-472))|(1<<(MySQLStatementParserORDINALITY-472))|(1<<(MySQLStatementParserORGANIZATION-472))|(1<<(MySQLStatementParserOTHERS-472))|(1<<(MySQLStatementParserOWNER-472))|(1<<(MySQLStatementParserPACK_KEYS-472))|(1<<(MySQLStatementParserPAGE-472))|(1<<(MySQLStatementParserPARSER-472))|(1<<(MySQLStatementParserPARTIAL-472))|(1<<(MySQLStatementParserPARTITIONING-472))|(1<<(MySQLStatementParserPARTITIONS-472))|(1<<(MySQLStatementParserPASSWORD-472))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-472))|(1<<(MySQLStatementParserPATH-472)))) != 0) || (((_la-505)&-(0x1f+1)) == 0 && ((1<<uint((_la-505)))&((1<<(MySQLStatementParserPERSIST-505))|(1<<(MySQLStatementParserPERSIST_ONLY-505))|(1<<(MySQLStatementParserPHASE-505))|(1<<(MySQLStatementParserPLUGIN-505))|(1<<(MySQLStatementParserPLUGINS-505))|(1<<(MySQLStatementParserPLUGIN_DIR-505))|(1<<(MySQLStatementParserPOINT-505))|(1<<(MySQLStatementParserPOLYGON-505))|(1<<(MySQLStatementParserPORT-505))|(1<<(MySQLStatementParserPRECEDES-505))|(1<<(MySQLStatementParserPRECEDING-505))|(1<<(MySQLStatementParserPREPARE-505))|(1<<(MySQLStatementParserPRESERVE-505))|(1<<(MySQLStatementParserPREV-505))|(1<<(MySQLStatementParserPRIVILEGES-505))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-505))|(1<<(MySQLStatementParserPROCESS-505))|(1<<(MySQLStatementParserPROCESSLIST-505))|(1<<(MySQLStatementParserPROFILE-505))|(1<<(MySQLStatementParserPROFILES-505))|(1<<(MySQLStatementParserPROXY-505))|(1<<(MySQLStatementParserQUARTER-505))|(1<<(MySQLStatementParserQUERY-505))|(1<<(MySQLStatementParserQUICK-505))|(1<<(MySQLStatementParserRANDOM-505)))) != 0) || (((_la-538)&-(0x1f+1)) == 0 && ((1<<uint((_la-538)))&((1<<(MySQLStatementParserREAD_ONLY-538))|(1<<(MySQLStatementParserREBUILD-538))|(1<<(MySQLStatementParserRECOVER-538))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-538))|(1<<(MySQLStatementParserREDUNDANT-538))|(1<<(MySQLStatementParserREFERENCE-538))|(1<<(MySQLStatementParserRELAY-538))|(1<<(MySQLStatementParserRELAYLOG-538))|(1<<(MySQLStatementParserRELAY_LOG_FILE-538))|(1<<(MySQLStatementParserRELAY_LOG_POS-538))|(1<<(MySQLStatementParserRELAY_THREAD-538))|(1<<(MySQLStatementParserRELOAD-538))|(1<<(MySQLStatementParserREMOVE-538))|(1<<(MySQLStatementParserREORGANIZE-538))|(1<<(MySQLStatementParserREPAIR-538))|(1<<(MySQLStatementParserREPEATABLE-538))|(1<<(MySQLStatementParserREPLICATE_DO_DB-538))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-538)))) != 0) || (((_la-570)&-(0x1f+1)) == 0 && ((1<<uint((_la-570)))&((1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-570))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-570))|(1<<(MySQLStatementParserREPLICATION-570))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-570))|(1<<(MySQLStatementParserRESET-570))|(1<<(MySQLStatementParserRESOURCE-570))|(1<<(MySQLStatementParserRESPECT-570))|(1<<(MySQLStatementParserRESTART-570))|(1<<(MySQLStatementParserRESTORE-570))|(1<<(MySQLStatementParserRESUME-570))|(1<<(MySQLStatementParserRETAIN-570))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-570))|(1<<(MySQLStatementParserRETURNING-570))|(1<<(MySQLStatementParserRETURNS-570))|(1<<(MySQLStatementParserREUSE-570))|(1<<(MySQLStatementParserREVERSE-570))|(1<<(MySQLStatementParserROLE-570))|(1<<(MySQLStatementParserROLLBACK-570))|(1<<(MySQLStatementParserROLLUP-570))|(1<<(MySQLStatementParserROTATE-570))|(1<<(MySQLStatementParserROUTINE-570))|(1<<(MySQLStatementParserROW_COUNT-570))|(1<<(MySQLStatementParserROW_FORMAT-570)))) != 0) || (((_la-603)&-(0x1f+1)) == 0 && ((1<<uint((_la-603)))&((1<<(MySQLStatementParserRTREE-603))|(1<<(MySQLStatementParserSAVEPOINT-603))|(1<<(MySQLStatementParserSCHEDULE-603))|(1<<(MySQLStatementParserSCHEMA_NAME-603))|(1<<(MySQLStatementParserSECOND-603))|(1<<(MySQLStatementParserSECONDARY-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-603))|(1<<(MySQLStatementParserSECONDARY_LOAD-603))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-603))|(1<<(MySQLStatementParserSECURITY-603))|(1<<(MySQLStatementParserSERIAL-603))|(1<<(MySQLStatementParserSERIALIZABLE-603))|(1<<(MySQLStatementParserSERVER-603))|(1<<(MySQLStatementParserSESSION-603))|(1<<(MySQLStatementParserSHARE-603))|(1<<(MySQLStatementParserSHUTDOWN-603))|(1<<(MySQLStatementParserSIGNED-603))|(1<<(MySQLStatementParserSIMPLE-603))|(1<<(MySQLStatementParserSLAVE-603))|(1<<(MySQLStatementParserSLOW-603)))) != 0) || (((_la-635)&-(0x1f+1)) == 0 && ((1<<uint((_la-635)))&((1<<(MySQLStatementParserSNAPSHOT-635))|(1<<(MySQLStatementParserSOCKET-635))|(1<<(MySQLStatementParserSONAME-635))|(1<<(MySQLStatementParserSOUNDS-635))|(1<<(MySQLStatementParserSOURCE-635))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-635))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-635))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-635))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-635))|(1<<(MySQLStatementParserSQL_NO_CACHE-635))|(1<<(MySQLStatementParserSQL_THREAD-635))|(1<<(MySQLStatementParserSRID-635))|(1<<(MySQLStatementParserSTACKED-635))|(1<<(MySQLStatementParserSTART-635))|(1<<(MySQLStatementParserSTARTS-635))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-635))|(1<<(MySQLStatementParserSTATS_PERSISTENT-635))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-635))|(1<<(MySQLStatementParserSTATUS-635))|(1<<(MySQLStatementParserSTOP-635))|(1<<(MySQLStatementParserSTORAGE-635)))) != 0) || (((_la-669)&-(0x1f+1)) == 0 && ((1<<uint((_la-669)))&((1<<(MySQLStatementParserSTREAM-669))|(1<<(MySQLStatementParserSTRING-669))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-669))|(1<<(MySQLStatementParserSUBJECT-669))|(1<<(MySQLStatementParserSUBPARTITION-669))|(1<<(MySQLStatementParserSUBPARTITIONS-669))|(1<<(MySQLStatementParserSUPER-669))|(1<<(MySQLStatementParserSUSPEND-669))|(1<<(MySQLStatementParserSWAPS-669))|(1<<(MySQLStatementParserSWITCHES-669))|(1<<(MySQLStatementParserTABLES-669))|(1<<(MySQLStatementParserTABLESPACE-669))|(1<<(MySQLStatementParserTABLE_CHECKSUM-669))|(1<<(MySQLStatementParserTABLE_NAME-669))|(1<<(MySQLStatementParserTEMPORARY-669))|(1<<(MySQLStatementParserTEMPTABLE-669))|(1<<(MySQLStatementParserTEXT-669))|(1<<(MySQLStatementParserTHAN-669))|(1<<(MySQLStatementParserTHREAD_PRIORITY-669))|(1<<(MySQLStatementParserTIES-669))|(1<<(MySQLStatementParserTIME-669))|(1<<(MySQLStatementParserTIMESTAMP-669))|(1<<(MySQLStatementParserTIMESTAMP_ADD-669))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-669))|(1<<(MySQLStatementParserTLS-669)))) != 0) || (((_la-703)&-(0x1f+1)) == 0 && ((1<<uint((_la-703)))&((1<<(MySQLStatementParserTRANSACTION-703))|(1<<(MySQLStatementParserTRIGGERS-703))|(1<<(MySQLStatementParserTRUNCATE-703))|(1<<(MySQLStatementParserTYPE-703))|(1<<(MySQLStatementParserTYPES-703))|(1<<(MySQLStatementParserUNBOUNDED-703))|(1<<(MySQLStatementParserUNCOMMITTED-703))|(1<<(MySQLStatementParserUNDEFINED-703))|(1<<(MySQLStatementParserUNDOFILE-703))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-703))|(1<<(MySQLStatementParserUNICODE-703))|(1<<(MySQLStatementParserUNINSTALL-703))|(1<<(MySQLStatementParserUNKNOWN-703))|(1<<(MySQLStatementParserUNTIL-703))|(1<<(MySQLStatementParserUPGRADE-703))|(1<<(MySQLStatementParserUSER-703))|(1<<(MySQLStatementParserUSER_RESOURCES-703))|(1<<(MySQLStatementParserUSE_FRM-703)))) != 0) || (((_la-735)&-(0x1f+1)) == 0 && ((1<<uint((_la-735)))&((1<<(MySQLStatementParserVALIDATION-735))|(1<<(MySQLStatementParserVALUE-735))|(1<<(MySQLStatementParserVARIABLES-735))|(1<<(MySQLStatementParserVCPU-735))|(1<<(MySQLStatementParserVIEW-735))|(1<<(MySQLStatementParserVISIBLE-735))|(1<<(MySQLStatementParserWAIT-735))|(1<<(MySQLStatementParserWARNINGS-735))|(1<<(MySQLStatementParserWEEK-735))|(1<<(MySQLStatementParserWEIGHT_STRING-735))|(1<<(MySQLStatementParserWITHOUT-735))|(1<<(MySQLStatementParserWORK-735))|(1<<(MySQLStatementParserWRAPPER-735))|(1<<(MySQLStatementParserX509-735))|(1<<(MySQLStatementParserXA-735))|(1<<(MySQLStatementParserXID-735))|(1<<(MySQLStatementParserXML-735))|(1<<(MySQLStatementParserYEAR-735)))) != 0) || (((_la-769)&-(0x1f+1)) == 0 && ((1<<uint((_la-769)))&((1<<(MySQLStatementParserIDENTIFIER_-769))|(1<<(MySQLStatementParserSINGLE_QUOTED_TEXT-769))|(1<<(MySQLStatementParserDOUBLE_QUOTED_TEXT-769)))) != 0) {
		p.SetState(7036)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserAS {
			{
				p.SetState(7035)
				p.Match(MySQLStatementParserAS)
			}

		}
		{
			p.SetState(7038)
			p.Alias()
		}

	}
	{
		p.SetState(7041)
		p.LockOption()
	}

	return localctx
}

// ILockOptionContext is an interface to support dynamic dispatch.
type ILockOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLockOptionContext differentiates from other interfaces.
	IsLockOptionContext()
}

type LockOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLockOptionContext() *LockOptionContext {
	var p = new(LockOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_lockOption
	return p
}

func (*LockOptionContext) IsLockOptionContext() {}

func NewLockOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LockOptionContext {
	var p = new(LockOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_lockOption

	return p
}

func (s *LockOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *LockOptionContext) READ() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREAD, 0)
}

func (s *LockOptionContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCAL, 0)
}

func (s *LockOptionContext) WRITE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWRITE, 0)
}

func (s *LockOptionContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOW_PRIORITY, 0)
}

func (s *LockOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LockOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LockOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterLockOption(s)
	}
}

func (s *LockOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitLockOption(s)
	}
}

func (s *LockOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitLockOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) LockOption() (localctx ILockOptionContext) {
	this := p
	_ = this

	localctx = NewLockOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1030, MySQLStatementParserRULE_lockOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7051)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserREAD:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7043)
			p.Match(MySQLStatementParserREAD)
		}
		p.SetState(7045)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserLOCAL {
			{
				p.SetState(7044)
				p.Match(MySQLStatementParserLOCAL)
			}

		}

	case MySQLStatementParserLOW_PRIORITY, MySQLStatementParserWRITE:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(7048)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserLOW_PRIORITY {
			{
				p.SetState(7047)
				p.Match(MySQLStatementParserLOW_PRIORITY)
			}

		}
		{
			p.SetState(7050)
			p.Match(MySQLStatementParserWRITE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IXidContext is an interface to support dynamic dispatch.
type IXidContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXidContext differentiates from other interfaces.
	IsXidContext()
}

type XidContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXidContext() *XidContext {
	var p = new(XidContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_xid
	return p
}

func (*XidContext) IsXidContext() {}

func NewXidContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *XidContext {
	var p = new(XidContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_xid

	return p
}

func (s *XidContext) GetParser() antlr.Parser { return s.parser }

func (s *XidContext) AllString_() []IString_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IString_Context)(nil)).Elem())
	var tst = make([]IString_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IString_Context)
		}
	}

	return tst
}

func (s *XidContext) String_(i int) IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *XidContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *XidContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *XidContext) NumberLiterals() INumberLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumberLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumberLiteralsContext)
}

func (s *XidContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *XidContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *XidContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterXid(s)
	}
}

func (s *XidContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitXid(s)
	}
}

func (s *XidContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitXid(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Xid() (localctx IXidContext) {
	this := p
	_ = this

	localctx = NewXidContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1032, MySQLStatementParserRULE_xid)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7053)
		p.String_()
	}
	p.SetState(7058)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(7054)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(7055)
			p.String_()
		}

		p.SetState(7060)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(7062)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserNUMBER_ {
		{
			p.SetState(7061)
			p.NumberLiterals()
		}

	}

	return localctx
}

// IGrantContext is an interface to support dynamic dispatch.
type IGrantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGrantContext differentiates from other interfaces.
	IsGrantContext()
}

type GrantContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrantContext() *GrantContext {
	var p = new(GrantContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_grant
	return p
}

func (*GrantContext) IsGrantContext() {}

func NewGrantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GrantContext {
	var p = new(GrantContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_grant

	return p
}

func (s *GrantContext) GetParser() antlr.Parser { return s.parser }

func (s *GrantContext) CopyFrom(ctx *GrantContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *GrantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GrantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type GrantRoleOrPrivilegeToContext struct {
	*GrantContext
}

func NewGrantRoleOrPrivilegeToContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GrantRoleOrPrivilegeToContext {
	var p = new(GrantRoleOrPrivilegeToContext)

	p.GrantContext = NewEmptyGrantContext()
	p.parser = parser
	p.CopyFrom(ctx.(*GrantContext))

	return p
}

func (s *GrantRoleOrPrivilegeToContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GrantRoleOrPrivilegeToContext) GRANT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGRANT, 0)
}

func (s *GrantRoleOrPrivilegeToContext) RoleOrPrivileges() IRoleOrPrivilegesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoleOrPrivilegesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoleOrPrivilegesContext)
}

func (s *GrantRoleOrPrivilegeToContext) TO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTO, 0)
}

func (s *GrantRoleOrPrivilegeToContext) UserList() IUserListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserListContext)
}

func (s *GrantRoleOrPrivilegeToContext) WithGrantOption() IWithGrantOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWithGrantOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWithGrantOptionContext)
}

func (s *GrantRoleOrPrivilegeToContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterGrantRoleOrPrivilegeTo(s)
	}
}

func (s *GrantRoleOrPrivilegeToContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitGrantRoleOrPrivilegeTo(s)
	}
}

func (s *GrantRoleOrPrivilegeToContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitGrantRoleOrPrivilegeTo(s)

	default:
		return t.VisitChildren(s)
	}
}

type GrantProxyContext struct {
	*GrantContext
}

func NewGrantProxyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GrantProxyContext {
	var p = new(GrantProxyContext)

	p.GrantContext = NewEmptyGrantContext()
	p.parser = parser
	p.CopyFrom(ctx.(*GrantContext))

	return p
}

func (s *GrantProxyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GrantProxyContext) GRANT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGRANT, 0)
}

func (s *GrantProxyContext) PROXY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPROXY, 0)
}

func (s *GrantProxyContext) ON() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserON, 0)
}

func (s *GrantProxyContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *GrantProxyContext) TO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTO, 0)
}

func (s *GrantProxyContext) UserList() IUserListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserListContext)
}

func (s *GrantProxyContext) WithGrantOption() IWithGrantOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWithGrantOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWithGrantOptionContext)
}

func (s *GrantProxyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterGrantProxy(s)
	}
}

func (s *GrantProxyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitGrantProxy(s)
	}
}

func (s *GrantProxyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitGrantProxy(s)

	default:
		return t.VisitChildren(s)
	}
}

type GrantRoleOrPrivilegeOnToContext struct {
	*GrantContext
}

func NewGrantRoleOrPrivilegeOnToContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GrantRoleOrPrivilegeOnToContext {
	var p = new(GrantRoleOrPrivilegeOnToContext)

	p.GrantContext = NewEmptyGrantContext()
	p.parser = parser
	p.CopyFrom(ctx.(*GrantContext))

	return p
}

func (s *GrantRoleOrPrivilegeOnToContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GrantRoleOrPrivilegeOnToContext) GRANT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGRANT, 0)
}

func (s *GrantRoleOrPrivilegeOnToContext) RoleOrPrivileges() IRoleOrPrivilegesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoleOrPrivilegesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoleOrPrivilegesContext)
}

func (s *GrantRoleOrPrivilegeOnToContext) ON() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserON, 0)
}

func (s *GrantRoleOrPrivilegeOnToContext) GrantIdentifier() IGrantIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGrantIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGrantIdentifierContext)
}

func (s *GrantRoleOrPrivilegeOnToContext) TO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTO, 0)
}

func (s *GrantRoleOrPrivilegeOnToContext) UserList() IUserListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserListContext)
}

func (s *GrantRoleOrPrivilegeOnToContext) AclType() IAclTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAclTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAclTypeContext)
}

func (s *GrantRoleOrPrivilegeOnToContext) WithGrantOption() IWithGrantOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWithGrantOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWithGrantOptionContext)
}

func (s *GrantRoleOrPrivilegeOnToContext) GrantAs() IGrantAsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGrantAsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGrantAsContext)
}

func (s *GrantRoleOrPrivilegeOnToContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALL, 0)
}

func (s *GrantRoleOrPrivilegeOnToContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPRIVILEGES, 0)
}

func (s *GrantRoleOrPrivilegeOnToContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterGrantRoleOrPrivilegeOnTo(s)
	}
}

func (s *GrantRoleOrPrivilegeOnToContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitGrantRoleOrPrivilegeOnTo(s)
	}
}

func (s *GrantRoleOrPrivilegeOnToContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitGrantRoleOrPrivilegeOnTo(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Grant() (localctx IGrantContext) {
	this := p
	_ = this

	localctx = NewGrantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1034, MySQLStatementParserRULE_grant)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7113)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 940, p.GetParserRuleContext()) {
	case 1:
		localctx = NewGrantRoleOrPrivilegeToContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7064)
			p.Match(MySQLStatementParserGRANT)
		}
		{
			p.SetState(7065)
			p.RoleOrPrivileges()
		}
		{
			p.SetState(7066)
			p.Match(MySQLStatementParserTO)
		}
		{
			p.SetState(7067)
			p.UserList()
		}
		p.SetState(7069)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserWITH {
			{
				p.SetState(7068)
				p.WithGrantOption()
			}

		}

	case 2:
		localctx = NewGrantRoleOrPrivilegeOnToContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7071)
			p.Match(MySQLStatementParserGRANT)
		}
		{
			p.SetState(7072)
			p.RoleOrPrivileges()
		}
		{
			p.SetState(7073)
			p.Match(MySQLStatementParserON)
		}
		p.SetState(7075)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserFUNCTION || _la == MySQLStatementParserPROCEDURE || _la == MySQLStatementParserTABLE {
			{
				p.SetState(7074)
				p.AclType()
			}

		}
		{
			p.SetState(7077)
			p.GrantIdentifier()
		}
		{
			p.SetState(7078)
			p.Match(MySQLStatementParserTO)
		}
		{
			p.SetState(7079)
			p.UserList()
		}
		p.SetState(7081)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserWITH {
			{
				p.SetState(7080)
				p.WithGrantOption()
			}

		}
		p.SetState(7084)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserAS {
			{
				p.SetState(7083)
				p.GrantAs()
			}

		}

	case 3:
		localctx = NewGrantRoleOrPrivilegeOnToContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7086)
			p.Match(MySQLStatementParserGRANT)
		}
		{
			p.SetState(7087)
			p.Match(MySQLStatementParserALL)
		}
		p.SetState(7089)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserPRIVILEGES {
			{
				p.SetState(7088)
				p.Match(MySQLStatementParserPRIVILEGES)
			}

		}
		{
			p.SetState(7091)
			p.Match(MySQLStatementParserON)
		}
		p.SetState(7093)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserFUNCTION || _la == MySQLStatementParserPROCEDURE || _la == MySQLStatementParserTABLE {
			{
				p.SetState(7092)
				p.AclType()
			}

		}
		{
			p.SetState(7095)
			p.GrantIdentifier()
		}
		{
			p.SetState(7096)
			p.Match(MySQLStatementParserTO)
		}
		{
			p.SetState(7097)
			p.UserList()
		}
		p.SetState(7099)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserWITH {
			{
				p.SetState(7098)
				p.WithGrantOption()
			}

		}
		p.SetState(7102)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserAS {
			{
				p.SetState(7101)
				p.GrantAs()
			}

		}

	case 4:
		localctx = NewGrantProxyContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7104)
			p.Match(MySQLStatementParserGRANT)
		}
		{
			p.SetState(7105)
			p.Match(MySQLStatementParserPROXY)
		}
		{
			p.SetState(7106)
			p.Match(MySQLStatementParserON)
		}
		{
			p.SetState(7107)
			p.UserName()
		}
		{
			p.SetState(7108)
			p.Match(MySQLStatementParserTO)
		}
		{
			p.SetState(7109)
			p.UserList()
		}
		p.SetState(7111)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserWITH {
			{
				p.SetState(7110)
				p.WithGrantOption()
			}

		}

	}

	return localctx
}

// IRevokeContext is an interface to support dynamic dispatch.
type IRevokeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRevokeContext differentiates from other interfaces.
	IsRevokeContext()
}

type RevokeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRevokeContext() *RevokeContext {
	var p = new(RevokeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_revoke
	return p
}

func (*RevokeContext) IsRevokeContext() {}

func NewRevokeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RevokeContext {
	var p = new(RevokeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_revoke

	return p
}

func (s *RevokeContext) GetParser() antlr.Parser { return s.parser }

func (s *RevokeContext) CopyFrom(ctx *RevokeContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *RevokeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RevokeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type RevokeOnFromContext struct {
	*RevokeContext
}

func NewRevokeOnFromContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RevokeOnFromContext {
	var p = new(RevokeOnFromContext)

	p.RevokeContext = NewEmptyRevokeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RevokeContext))

	return p
}

func (s *RevokeOnFromContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RevokeOnFromContext) REVOKE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREVOKE, 0)
}

func (s *RevokeOnFromContext) RoleOrPrivileges() IRoleOrPrivilegesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoleOrPrivilegesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoleOrPrivilegesContext)
}

func (s *RevokeOnFromContext) ON() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserON, 0)
}

func (s *RevokeOnFromContext) GrantIdentifier() IGrantIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGrantIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGrantIdentifierContext)
}

func (s *RevokeOnFromContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFROM, 0)
}

func (s *RevokeOnFromContext) UserList() IUserListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserListContext)
}

func (s *RevokeOnFromContext) AclType() IAclTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAclTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAclTypeContext)
}

func (s *RevokeOnFromContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALL, 0)
}

func (s *RevokeOnFromContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPRIVILEGES, 0)
}

func (s *RevokeOnFromContext) PROXY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPROXY, 0)
}

func (s *RevokeOnFromContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *RevokeOnFromContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterRevokeOnFrom(s)
	}
}

func (s *RevokeOnFromContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitRevokeOnFrom(s)
	}
}

func (s *RevokeOnFromContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitRevokeOnFrom(s)

	default:
		return t.VisitChildren(s)
	}
}

type RevokeFromContext struct {
	*RevokeContext
}

func NewRevokeFromContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RevokeFromContext {
	var p = new(RevokeFromContext)

	p.RevokeContext = NewEmptyRevokeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RevokeContext))

	return p
}

func (s *RevokeFromContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RevokeFromContext) REVOKE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREVOKE, 0)
}

func (s *RevokeFromContext) RoleOrPrivileges() IRoleOrPrivilegesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoleOrPrivilegesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoleOrPrivilegesContext)
}

func (s *RevokeFromContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFROM, 0)
}

func (s *RevokeFromContext) UserList() IUserListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserListContext)
}

func (s *RevokeFromContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALL, 0)
}

func (s *RevokeFromContext) COMMA_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, 0)
}

func (s *RevokeFromContext) GRANT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGRANT, 0)
}

func (s *RevokeFromContext) OPTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOPTION, 0)
}

func (s *RevokeFromContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPRIVILEGES, 0)
}

func (s *RevokeFromContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterRevokeFrom(s)
	}
}

func (s *RevokeFromContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitRevokeFrom(s)
	}
}

func (s *RevokeFromContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitRevokeFrom(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Revoke() (localctx IRevokeContext) {
	this := p
	_ = this

	localctx = NewRevokeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1036, MySQLStatementParserRULE_revoke)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7160)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 945, p.GetParserRuleContext()) {
	case 1:
		localctx = NewRevokeFromContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7115)
			p.Match(MySQLStatementParserREVOKE)
		}
		{
			p.SetState(7116)
			p.RoleOrPrivileges()
		}
		{
			p.SetState(7117)
			p.Match(MySQLStatementParserFROM)
		}
		{
			p.SetState(7118)
			p.UserList()
		}

	case 2:
		localctx = NewRevokeOnFromContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7120)
			p.Match(MySQLStatementParserREVOKE)
		}
		{
			p.SetState(7121)
			p.RoleOrPrivileges()
		}
		{
			p.SetState(7122)
			p.Match(MySQLStatementParserON)
		}
		p.SetState(7124)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserFUNCTION || _la == MySQLStatementParserPROCEDURE || _la == MySQLStatementParserTABLE {
			{
				p.SetState(7123)
				p.AclType()
			}

		}
		{
			p.SetState(7126)
			p.GrantIdentifier()
		}
		{
			p.SetState(7127)
			p.Match(MySQLStatementParserFROM)
		}
		{
			p.SetState(7128)
			p.UserList()
		}

	case 3:
		localctx = NewRevokeOnFromContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7130)
			p.Match(MySQLStatementParserREVOKE)
		}
		{
			p.SetState(7131)
			p.Match(MySQLStatementParserALL)
		}
		p.SetState(7133)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserPRIVILEGES {
			{
				p.SetState(7132)
				p.Match(MySQLStatementParserPRIVILEGES)
			}

		}
		{
			p.SetState(7135)
			p.Match(MySQLStatementParserON)
		}
		p.SetState(7137)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserFUNCTION || _la == MySQLStatementParserPROCEDURE || _la == MySQLStatementParserTABLE {
			{
				p.SetState(7136)
				p.AclType()
			}

		}
		{
			p.SetState(7139)
			p.GrantIdentifier()
		}
		{
			p.SetState(7140)
			p.Match(MySQLStatementParserFROM)
		}
		{
			p.SetState(7141)
			p.UserList()
		}

	case 4:
		localctx = NewRevokeFromContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7143)
			p.Match(MySQLStatementParserREVOKE)
		}
		{
			p.SetState(7144)
			p.Match(MySQLStatementParserALL)
		}
		p.SetState(7146)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserPRIVILEGES {
			{
				p.SetState(7145)
				p.Match(MySQLStatementParserPRIVILEGES)
			}

		}
		{
			p.SetState(7148)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(7149)
			p.Match(MySQLStatementParserGRANT)
		}
		{
			p.SetState(7150)
			p.Match(MySQLStatementParserOPTION)
		}
		{
			p.SetState(7151)
			p.Match(MySQLStatementParserFROM)
		}
		{
			p.SetState(7152)
			p.UserList()
		}

	case 5:
		localctx = NewRevokeOnFromContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(7153)
			p.Match(MySQLStatementParserREVOKE)
		}
		{
			p.SetState(7154)
			p.Match(MySQLStatementParserPROXY)
		}
		{
			p.SetState(7155)
			p.Match(MySQLStatementParserON)
		}
		{
			p.SetState(7156)
			p.UserName()
		}
		{
			p.SetState(7157)
			p.Match(MySQLStatementParserFROM)
		}
		{
			p.SetState(7158)
			p.UserList()
		}

	}

	return localctx
}

// IUserListContext is an interface to support dynamic dispatch.
type IUserListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUserListContext differentiates from other interfaces.
	IsUserListContext()
}

type UserListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserListContext() *UserListContext {
	var p = new(UserListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_userList
	return p
}

func (*UserListContext) IsUserListContext() {}

func NewUserListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserListContext {
	var p = new(UserListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_userList

	return p
}

func (s *UserListContext) GetParser() antlr.Parser { return s.parser }

func (s *UserListContext) AllUserName() []IUserNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserNameContext)(nil)).Elem())
	var tst = make([]IUserNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserNameContext)
		}
	}

	return tst
}

func (s *UserListContext) UserName(i int) IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *UserListContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *UserListContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *UserListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterUserList(s)
	}
}

func (s *UserListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitUserList(s)
	}
}

func (s *UserListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitUserList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) UserList() (localctx IUserListContext) {
	this := p
	_ = this

	localctx = NewUserListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1038, MySQLStatementParserRULE_userList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7162)
		p.UserName()
	}
	p.SetState(7167)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(7163)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(7164)
			p.UserName()
		}

		p.SetState(7169)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IRoleOrPrivilegesContext is an interface to support dynamic dispatch.
type IRoleOrPrivilegesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRoleOrPrivilegesContext differentiates from other interfaces.
	IsRoleOrPrivilegesContext()
}

type RoleOrPrivilegesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRoleOrPrivilegesContext() *RoleOrPrivilegesContext {
	var p = new(RoleOrPrivilegesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_roleOrPrivileges
	return p
}

func (*RoleOrPrivilegesContext) IsRoleOrPrivilegesContext() {}

func NewRoleOrPrivilegesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RoleOrPrivilegesContext {
	var p = new(RoleOrPrivilegesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_roleOrPrivileges

	return p
}

func (s *RoleOrPrivilegesContext) GetParser() antlr.Parser { return s.parser }

func (s *RoleOrPrivilegesContext) AllRoleOrPrivilege() []IRoleOrPrivilegeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRoleOrPrivilegeContext)(nil)).Elem())
	var tst = make([]IRoleOrPrivilegeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRoleOrPrivilegeContext)
		}
	}

	return tst
}

func (s *RoleOrPrivilegesContext) RoleOrPrivilege(i int) IRoleOrPrivilegeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoleOrPrivilegeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRoleOrPrivilegeContext)
}

func (s *RoleOrPrivilegesContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *RoleOrPrivilegesContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *RoleOrPrivilegesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RoleOrPrivilegesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RoleOrPrivilegesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterRoleOrPrivileges(s)
	}
}

func (s *RoleOrPrivilegesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitRoleOrPrivileges(s)
	}
}

func (s *RoleOrPrivilegesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitRoleOrPrivileges(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) RoleOrPrivileges() (localctx IRoleOrPrivilegesContext) {
	this := p
	_ = this

	localctx = NewRoleOrPrivilegesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1040, MySQLStatementParserRULE_roleOrPrivileges)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7170)
		p.RoleOrPrivilege()
	}
	p.SetState(7175)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(7171)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(7172)
			p.RoleOrPrivilege()
		}

		p.SetState(7177)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IRoleOrPrivilegeContext is an interface to support dynamic dispatch.
type IRoleOrPrivilegeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRoleOrPrivilegeContext differentiates from other interfaces.
	IsRoleOrPrivilegeContext()
}

type RoleOrPrivilegeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRoleOrPrivilegeContext() *RoleOrPrivilegeContext {
	var p = new(RoleOrPrivilegeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_roleOrPrivilege
	return p
}

func (*RoleOrPrivilegeContext) IsRoleOrPrivilegeContext() {}

func NewRoleOrPrivilegeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RoleOrPrivilegeContext {
	var p = new(RoleOrPrivilegeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_roleOrPrivilege

	return p
}

func (s *RoleOrPrivilegeContext) GetParser() antlr.Parser { return s.parser }

func (s *RoleOrPrivilegeContext) CopyFrom(ctx *RoleOrPrivilegeContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *RoleOrPrivilegeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RoleOrPrivilegeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type StaticPrivilegeProcessContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeProcessContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeProcessContext {
	var p = new(StaticPrivilegeProcessContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeProcessContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeProcessContext) PROCESS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPROCESS, 0)
}

func (s *StaticPrivilegeProcessContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeProcess(s)
	}
}

func (s *StaticPrivilegeProcessContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeProcess(s)
	}
}

func (s *StaticPrivilegeProcessContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeProcess(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeSuperContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeSuperContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeSuperContext {
	var p = new(StaticPrivilegeSuperContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeSuperContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeSuperContext) SUPER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSUPER, 0)
}

func (s *StaticPrivilegeSuperContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeSuper(s)
	}
}

func (s *StaticPrivilegeSuperContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeSuper(s)
	}
}

func (s *StaticPrivilegeSuperContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeSuper(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeReferencesContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeReferencesContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeReferencesContext {
	var p = new(StaticPrivilegeReferencesContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeReferencesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeReferencesContext) REFERENCES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREFERENCES, 0)
}

func (s *StaticPrivilegeReferencesContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *StaticPrivilegeReferencesContext) ColumnNames() IColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNamesContext)
}

func (s *StaticPrivilegeReferencesContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *StaticPrivilegeReferencesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeReferences(s)
	}
}

func (s *StaticPrivilegeReferencesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeReferences(s)
	}
}

func (s *StaticPrivilegeReferencesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeReferences(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeCreateTemporaryTablesContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeCreateTemporaryTablesContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeCreateTemporaryTablesContext {
	var p = new(StaticPrivilegeCreateTemporaryTablesContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeCreateTemporaryTablesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeCreateTemporaryTablesContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *StaticPrivilegeCreateTemporaryTablesContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTEMPORARY, 0)
}

func (s *StaticPrivilegeCreateTemporaryTablesContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLES, 0)
}

func (s *StaticPrivilegeCreateTemporaryTablesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeCreateTemporaryTables(s)
	}
}

func (s *StaticPrivilegeCreateTemporaryTablesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeCreateTemporaryTables(s)
	}
}

func (s *StaticPrivilegeCreateTemporaryTablesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeCreateTemporaryTables(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeTriggerContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeTriggerContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeTriggerContext {
	var p = new(StaticPrivilegeTriggerContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeTriggerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeTriggerContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTRIGGER, 0)
}

func (s *StaticPrivilegeTriggerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeTrigger(s)
	}
}

func (s *StaticPrivilegeTriggerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeTrigger(s)
	}
}

func (s *StaticPrivilegeTriggerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeTrigger(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeCreateRoleContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeCreateRoleContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeCreateRoleContext {
	var p = new(StaticPrivilegeCreateRoleContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeCreateRoleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeCreateRoleContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *StaticPrivilegeCreateRoleContext) ROLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROLE, 0)
}

func (s *StaticPrivilegeCreateRoleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeCreateRole(s)
	}
}

func (s *StaticPrivilegeCreateRoleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeCreateRole(s)
	}
}

func (s *StaticPrivilegeCreateRoleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeCreateRole(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeUsageContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeUsageContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeUsageContext {
	var p = new(StaticPrivilegeUsageContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeUsageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeUsageContext) USAGE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUSAGE, 0)
}

func (s *StaticPrivilegeUsageContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeUsage(s)
	}
}

func (s *StaticPrivilegeUsageContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeUsage(s)
	}
}

func (s *StaticPrivilegeUsageContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeUsage(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeReplicationClientContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeReplicationClientContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeReplicationClientContext {
	var p = new(StaticPrivilegeReplicationClientContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeReplicationClientContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeReplicationClientContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLICATION, 0)
}

func (s *StaticPrivilegeReplicationClientContext) CLIENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCLIENT, 0)
}

func (s *StaticPrivilegeReplicationClientContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeReplicationClient(s)
	}
}

func (s *StaticPrivilegeReplicationClientContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeReplicationClient(s)
	}
}

func (s *StaticPrivilegeReplicationClientContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeReplicationClient(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeAlterRoutineContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeAlterRoutineContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeAlterRoutineContext {
	var p = new(StaticPrivilegeAlterRoutineContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeAlterRoutineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeAlterRoutineContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALTER, 0)
}

func (s *StaticPrivilegeAlterRoutineContext) ROUTINE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROUTINE, 0)
}

func (s *StaticPrivilegeAlterRoutineContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeAlterRoutine(s)
	}
}

func (s *StaticPrivilegeAlterRoutineContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeAlterRoutine(s)
	}
}

func (s *StaticPrivilegeAlterRoutineContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeAlterRoutine(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeDropRoleContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeDropRoleContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeDropRoleContext {
	var p = new(StaticPrivilegeDropRoleContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeDropRoleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeDropRoleContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDROP, 0)
}

func (s *StaticPrivilegeDropRoleContext) ROLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROLE, 0)
}

func (s *StaticPrivilegeDropRoleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeDropRole(s)
	}
}

func (s *StaticPrivilegeDropRoleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeDropRole(s)
	}
}

func (s *StaticPrivilegeDropRoleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeDropRole(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeExecuteContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeExecuteContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeExecuteContext {
	var p = new(StaticPrivilegeExecuteContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeExecuteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeExecuteContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXECUTE, 0)
}

func (s *StaticPrivilegeExecuteContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeExecute(s)
	}
}

func (s *StaticPrivilegeExecuteContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeExecute(s)
	}
}

func (s *StaticPrivilegeExecuteContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeExecute(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeGrantContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeGrantContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeGrantContext {
	var p = new(StaticPrivilegeGrantContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeGrantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeGrantContext) GRANT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGRANT, 0)
}

func (s *StaticPrivilegeGrantContext) OPTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOPTION, 0)
}

func (s *StaticPrivilegeGrantContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeGrant(s)
	}
}

func (s *StaticPrivilegeGrantContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeGrant(s)
	}
}

func (s *StaticPrivilegeGrantContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeGrant(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeShowDatabasesContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeShowDatabasesContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeShowDatabasesContext {
	var p = new(StaticPrivilegeShowDatabasesContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeShowDatabasesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeShowDatabasesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *StaticPrivilegeShowDatabasesContext) DATABASES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDATABASES, 0)
}

func (s *StaticPrivilegeShowDatabasesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeShowDatabases(s)
	}
}

func (s *StaticPrivilegeShowDatabasesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeShowDatabases(s)
	}
}

func (s *StaticPrivilegeShowDatabasesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeShowDatabases(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeFileContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeFileContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeFileContext {
	var p = new(StaticPrivilegeFileContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeFileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeFileContext) FILE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFILE, 0)
}

func (s *StaticPrivilegeFileContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeFile(s)
	}
}

func (s *StaticPrivilegeFileContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeFile(s)
	}
}

func (s *StaticPrivilegeFileContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeFile(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeUpdateContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeUpdateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeUpdateContext {
	var p = new(StaticPrivilegeUpdateContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeUpdateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeUpdateContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUPDATE, 0)
}

func (s *StaticPrivilegeUpdateContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *StaticPrivilegeUpdateContext) ColumnNames() IColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNamesContext)
}

func (s *StaticPrivilegeUpdateContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *StaticPrivilegeUpdateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeUpdate(s)
	}
}

func (s *StaticPrivilegeUpdateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeUpdate(s)
	}
}

func (s *StaticPrivilegeUpdateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeUpdate(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeCreateTablespaceContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeCreateTablespaceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeCreateTablespaceContext {
	var p = new(StaticPrivilegeCreateTablespaceContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeCreateTablespaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeCreateTablespaceContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *StaticPrivilegeCreateTablespaceContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLESPACE, 0)
}

func (s *StaticPrivilegeCreateTablespaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeCreateTablespace(s)
	}
}

func (s *StaticPrivilegeCreateTablespaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeCreateTablespace(s)
	}
}

func (s *StaticPrivilegeCreateTablespaceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeCreateTablespace(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeDropContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeDropContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeDropContext {
	var p = new(StaticPrivilegeDropContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeDropContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeDropContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDROP, 0)
}

func (s *StaticPrivilegeDropContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeDrop(s)
	}
}

func (s *StaticPrivilegeDropContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeDrop(s)
	}
}

func (s *StaticPrivilegeDropContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeDrop(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeReplicationSlaveContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeReplicationSlaveContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeReplicationSlaveContext {
	var p = new(StaticPrivilegeReplicationSlaveContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeReplicationSlaveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeReplicationSlaveContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLICATION, 0)
}

func (s *StaticPrivilegeReplicationSlaveContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSLAVE, 0)
}

func (s *StaticPrivilegeReplicationSlaveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeReplicationSlave(s)
	}
}

func (s *StaticPrivilegeReplicationSlaveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeReplicationSlave(s)
	}
}

func (s *StaticPrivilegeReplicationSlaveContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeReplicationSlave(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeCreateViewContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeCreateViewContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeCreateViewContext {
	var p = new(StaticPrivilegeCreateViewContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeCreateViewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeCreateViewContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *StaticPrivilegeCreateViewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVIEW, 0)
}

func (s *StaticPrivilegeCreateViewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeCreateView(s)
	}
}

func (s *StaticPrivilegeCreateViewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeCreateView(s)
	}
}

func (s *StaticPrivilegeCreateViewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeCreateView(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeShowViewContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeShowViewContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeShowViewContext {
	var p = new(StaticPrivilegeShowViewContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeShowViewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeShowViewContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHOW, 0)
}

func (s *StaticPrivilegeShowViewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserVIEW, 0)
}

func (s *StaticPrivilegeShowViewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeShowView(s)
	}
}

func (s *StaticPrivilegeShowViewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeShowView(s)
	}
}

func (s *StaticPrivilegeShowViewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeShowView(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeEventContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeEventContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeEventContext {
	var p = new(StaticPrivilegeEventContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeEventContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeEventContext) EVENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEVENT, 0)
}

func (s *StaticPrivilegeEventContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeEvent(s)
	}
}

func (s *StaticPrivilegeEventContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeEvent(s)
	}
}

func (s *StaticPrivilegeEventContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeEvent(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeIndexContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeIndexContext {
	var p = new(StaticPrivilegeIndexContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINDEX, 0)
}

func (s *StaticPrivilegeIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeIndex(s)
	}
}

func (s *StaticPrivilegeIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeIndex(s)
	}
}

func (s *StaticPrivilegeIndexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeIndex(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeSelectContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeSelectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeSelectContext {
	var p = new(StaticPrivilegeSelectContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeSelectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeSelectContext) SELECT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSELECT, 0)
}

func (s *StaticPrivilegeSelectContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *StaticPrivilegeSelectContext) ColumnNames() IColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNamesContext)
}

func (s *StaticPrivilegeSelectContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *StaticPrivilegeSelectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeSelect(s)
	}
}

func (s *StaticPrivilegeSelectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeSelect(s)
	}
}

func (s *StaticPrivilegeSelectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeSelect(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeLockTablesContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeLockTablesContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeLockTablesContext {
	var p = new(StaticPrivilegeLockTablesContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeLockTablesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeLockTablesContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCK, 0)
}

func (s *StaticPrivilegeLockTablesContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLES, 0)
}

func (s *StaticPrivilegeLockTablesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeLockTables(s)
	}
}

func (s *StaticPrivilegeLockTablesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeLockTables(s)
	}
}

func (s *StaticPrivilegeLockTablesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeLockTables(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeAlterContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeAlterContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeAlterContext {
	var p = new(StaticPrivilegeAlterContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeAlterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeAlterContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALTER, 0)
}

func (s *StaticPrivilegeAlterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeAlter(s)
	}
}

func (s *StaticPrivilegeAlterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeAlter(s)
	}
}

func (s *StaticPrivilegeAlterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeAlter(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeShutdownContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeShutdownContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeShutdownContext {
	var p = new(StaticPrivilegeShutdownContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeShutdownContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeShutdownContext) SHUTDOWN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSHUTDOWN, 0)
}

func (s *StaticPrivilegeShutdownContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeShutdown(s)
	}
}

func (s *StaticPrivilegeShutdownContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeShutdown(s)
	}
}

func (s *StaticPrivilegeShutdownContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeShutdown(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeDeleteContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeDeleteContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeDeleteContext {
	var p = new(StaticPrivilegeDeleteContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeDeleteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeDeleteContext) DELETE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDELETE, 0)
}

func (s *StaticPrivilegeDeleteContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeDelete(s)
	}
}

func (s *StaticPrivilegeDeleteContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeDelete(s)
	}
}

func (s *StaticPrivilegeDeleteContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeDelete(s)

	default:
		return t.VisitChildren(s)
	}
}

type RoleAtHostContext struct {
	*RoleOrPrivilegeContext
}

func NewRoleAtHostContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RoleAtHostContext {
	var p = new(RoleAtHostContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *RoleAtHostContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RoleAtHostContext) RoleIdentifierOrText() IRoleIdentifierOrTextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoleIdentifierOrTextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoleIdentifierOrTextContext)
}

func (s *RoleAtHostContext) AT_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAT_, 0)
}

func (s *RoleAtHostContext) TextOrIdentifier() ITextOrIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITextOrIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITextOrIdentifierContext)
}

func (s *RoleAtHostContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterRoleAtHost(s)
	}
}

func (s *RoleAtHostContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitRoleAtHost(s)
	}
}

func (s *RoleAtHostContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitRoleAtHost(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeCreateUserContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeCreateUserContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeCreateUserContext {
	var p = new(StaticPrivilegeCreateUserContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeCreateUserContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeCreateUserContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *StaticPrivilegeCreateUserContext) USER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUSER, 0)
}

func (s *StaticPrivilegeCreateUserContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeCreateUser(s)
	}
}

func (s *StaticPrivilegeCreateUserContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeCreateUser(s)
	}
}

func (s *StaticPrivilegeCreateUserContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeCreateUser(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeInsertContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeInsertContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeInsertContext {
	var p = new(StaticPrivilegeInsertContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeInsertContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeInsertContext) INSERT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINSERT, 0)
}

func (s *StaticPrivilegeInsertContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *StaticPrivilegeInsertContext) ColumnNames() IColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNamesContext)
}

func (s *StaticPrivilegeInsertContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *StaticPrivilegeInsertContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeInsert(s)
	}
}

func (s *StaticPrivilegeInsertContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeInsert(s)
	}
}

func (s *StaticPrivilegeInsertContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeInsert(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeCreateRoutineContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeCreateRoutineContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeCreateRoutineContext {
	var p = new(StaticPrivilegeCreateRoutineContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeCreateRoutineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeCreateRoutineContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *StaticPrivilegeCreateRoutineContext) ROUTINE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROUTINE, 0)
}

func (s *StaticPrivilegeCreateRoutineContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeCreateRoutine(s)
	}
}

func (s *StaticPrivilegeCreateRoutineContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeCreateRoutine(s)
	}
}

func (s *StaticPrivilegeCreateRoutineContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeCreateRoutine(s)

	default:
		return t.VisitChildren(s)
	}
}

type RoleOrDynamicPrivilegeContext struct {
	*RoleOrPrivilegeContext
}

func NewRoleOrDynamicPrivilegeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RoleOrDynamicPrivilegeContext {
	var p = new(RoleOrDynamicPrivilegeContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *RoleOrDynamicPrivilegeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RoleOrDynamicPrivilegeContext) RoleIdentifierOrText() IRoleIdentifierOrTextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoleIdentifierOrTextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoleIdentifierOrTextContext)
}

func (s *RoleOrDynamicPrivilegeContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *RoleOrDynamicPrivilegeContext) ColumnNames() IColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnNamesContext)
}

func (s *RoleOrDynamicPrivilegeContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *RoleOrDynamicPrivilegeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterRoleOrDynamicPrivilege(s)
	}
}

func (s *RoleOrDynamicPrivilegeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitRoleOrDynamicPrivilege(s)
	}
}

func (s *RoleOrDynamicPrivilegeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitRoleOrDynamicPrivilege(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeReloadContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeReloadContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeReloadContext {
	var p = new(StaticPrivilegeReloadContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeReloadContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeReloadContext) RELOAD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRELOAD, 0)
}

func (s *StaticPrivilegeReloadContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeReload(s)
	}
}

func (s *StaticPrivilegeReloadContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeReload(s)
	}
}

func (s *StaticPrivilegeReloadContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeReload(s)

	default:
		return t.VisitChildren(s)
	}
}

type StaticPrivilegeCreateContext struct {
	*RoleOrPrivilegeContext
}

func NewStaticPrivilegeCreateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StaticPrivilegeCreateContext {
	var p = new(StaticPrivilegeCreateContext)

	p.RoleOrPrivilegeContext = NewEmptyRoleOrPrivilegeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoleOrPrivilegeContext))

	return p
}

func (s *StaticPrivilegeCreateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticPrivilegeCreateContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *StaticPrivilegeCreateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStaticPrivilegeCreate(s)
	}
}

func (s *StaticPrivilegeCreateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStaticPrivilegeCreate(s)
	}
}

func (s *StaticPrivilegeCreateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStaticPrivilegeCreate(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) RoleOrPrivilege() (localctx IRoleOrPrivilegeContext) {
	this := p
	_ = this

	localctx = NewRoleOrPrivilegeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1042, MySQLStatementParserRULE_roleOrPrivilege)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7260)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 953, p.GetParserRuleContext()) {
	case 1:
		localctx = NewRoleOrDynamicPrivilegeContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7178)
			p.RoleIdentifierOrText()
		}
		p.SetState(7183)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserLP_ {
			{
				p.SetState(7179)
				p.Match(MySQLStatementParserLP_)
			}
			{
				p.SetState(7180)
				p.ColumnNames()
			}
			{
				p.SetState(7181)
				p.Match(MySQLStatementParserRP_)
			}

		}

	case 2:
		localctx = NewRoleAtHostContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7185)
			p.RoleIdentifierOrText()
		}
		{
			p.SetState(7186)
			p.Match(MySQLStatementParserAT_)
		}
		{
			p.SetState(7187)
			p.TextOrIdentifier()
		}

	case 3:
		localctx = NewStaticPrivilegeSelectContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7189)
			p.Match(MySQLStatementParserSELECT)
		}
		p.SetState(7194)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserLP_ {
			{
				p.SetState(7190)
				p.Match(MySQLStatementParserLP_)
			}
			{
				p.SetState(7191)
				p.ColumnNames()
			}
			{
				p.SetState(7192)
				p.Match(MySQLStatementParserRP_)
			}

		}

	case 4:
		localctx = NewStaticPrivilegeInsertContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7196)
			p.Match(MySQLStatementParserINSERT)
		}
		p.SetState(7201)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserLP_ {
			{
				p.SetState(7197)
				p.Match(MySQLStatementParserLP_)
			}
			{
				p.SetState(7198)
				p.ColumnNames()
			}
			{
				p.SetState(7199)
				p.Match(MySQLStatementParserRP_)
			}

		}

	case 5:
		localctx = NewStaticPrivilegeUpdateContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(7203)
			p.Match(MySQLStatementParserUPDATE)
		}
		p.SetState(7208)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserLP_ {
			{
				p.SetState(7204)
				p.Match(MySQLStatementParserLP_)
			}
			{
				p.SetState(7205)
				p.ColumnNames()
			}
			{
				p.SetState(7206)
				p.Match(MySQLStatementParserRP_)
			}

		}

	case 6:
		localctx = NewStaticPrivilegeReferencesContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(7210)
			p.Match(MySQLStatementParserREFERENCES)
		}
		p.SetState(7215)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserLP_ {
			{
				p.SetState(7211)
				p.Match(MySQLStatementParserLP_)
			}
			{
				p.SetState(7212)
				p.ColumnNames()
			}
			{
				p.SetState(7213)
				p.Match(MySQLStatementParserRP_)
			}

		}

	case 7:
		localctx = NewStaticPrivilegeDeleteContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(7217)
			p.Match(MySQLStatementParserDELETE)
		}

	case 8:
		localctx = NewStaticPrivilegeUsageContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(7218)
			p.Match(MySQLStatementParserUSAGE)
		}

	case 9:
		localctx = NewStaticPrivilegeIndexContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(7219)
			p.Match(MySQLStatementParserINDEX)
		}

	case 10:
		localctx = NewStaticPrivilegeAlterContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(7220)
			p.Match(MySQLStatementParserALTER)
		}

	case 11:
		localctx = NewStaticPrivilegeCreateContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(7221)
			p.Match(MySQLStatementParserCREATE)
		}

	case 12:
		localctx = NewStaticPrivilegeDropContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(7222)
			p.Match(MySQLStatementParserDROP)
		}

	case 13:
		localctx = NewStaticPrivilegeExecuteContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(7223)
			p.Match(MySQLStatementParserEXECUTE)
		}

	case 14:
		localctx = NewStaticPrivilegeReloadContext(p, localctx)
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(7224)
			p.Match(MySQLStatementParserRELOAD)
		}

	case 15:
		localctx = NewStaticPrivilegeShutdownContext(p, localctx)
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(7225)
			p.Match(MySQLStatementParserSHUTDOWN)
		}

	case 16:
		localctx = NewStaticPrivilegeProcessContext(p, localctx)
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(7226)
			p.Match(MySQLStatementParserPROCESS)
		}

	case 17:
		localctx = NewStaticPrivilegeFileContext(p, localctx)
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(7227)
			p.Match(MySQLStatementParserFILE)
		}

	case 18:
		localctx = NewStaticPrivilegeGrantContext(p, localctx)
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(7228)
			p.Match(MySQLStatementParserGRANT)
		}
		{
			p.SetState(7229)
			p.Match(MySQLStatementParserOPTION)
		}

	case 19:
		localctx = NewStaticPrivilegeShowDatabasesContext(p, localctx)
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(7230)
			p.Match(MySQLStatementParserSHOW)
		}
		{
			p.SetState(7231)
			p.Match(MySQLStatementParserDATABASES)
		}

	case 20:
		localctx = NewStaticPrivilegeSuperContext(p, localctx)
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(7232)
			p.Match(MySQLStatementParserSUPER)
		}

	case 21:
		localctx = NewStaticPrivilegeCreateTemporaryTablesContext(p, localctx)
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(7233)
			p.Match(MySQLStatementParserCREATE)
		}
		{
			p.SetState(7234)
			p.Match(MySQLStatementParserTEMPORARY)
		}
		{
			p.SetState(7235)
			p.Match(MySQLStatementParserTABLES)
		}

	case 22:
		localctx = NewStaticPrivilegeLockTablesContext(p, localctx)
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(7236)
			p.Match(MySQLStatementParserLOCK)
		}
		{
			p.SetState(7237)
			p.Match(MySQLStatementParserTABLES)
		}

	case 23:
		localctx = NewStaticPrivilegeReplicationSlaveContext(p, localctx)
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(7238)
			p.Match(MySQLStatementParserREPLICATION)
		}
		{
			p.SetState(7239)
			p.Match(MySQLStatementParserSLAVE)
		}

	case 24:
		localctx = NewStaticPrivilegeReplicationClientContext(p, localctx)
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(7240)
			p.Match(MySQLStatementParserREPLICATION)
		}
		{
			p.SetState(7241)
			p.Match(MySQLStatementParserCLIENT)
		}

	case 25:
		localctx = NewStaticPrivilegeCreateViewContext(p, localctx)
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(7242)
			p.Match(MySQLStatementParserCREATE)
		}
		{
			p.SetState(7243)
			p.Match(MySQLStatementParserVIEW)
		}

	case 26:
		localctx = NewStaticPrivilegeShowViewContext(p, localctx)
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(7244)
			p.Match(MySQLStatementParserSHOW)
		}
		{
			p.SetState(7245)
			p.Match(MySQLStatementParserVIEW)
		}

	case 27:
		localctx = NewStaticPrivilegeCreateRoutineContext(p, localctx)
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(7246)
			p.Match(MySQLStatementParserCREATE)
		}
		{
			p.SetState(7247)
			p.Match(MySQLStatementParserROUTINE)
		}

	case 28:
		localctx = NewStaticPrivilegeAlterRoutineContext(p, localctx)
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(7248)
			p.Match(MySQLStatementParserALTER)
		}
		{
			p.SetState(7249)
			p.Match(MySQLStatementParserROUTINE)
		}

	case 29:
		localctx = NewStaticPrivilegeCreateUserContext(p, localctx)
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(7250)
			p.Match(MySQLStatementParserCREATE)
		}
		{
			p.SetState(7251)
			p.Match(MySQLStatementParserUSER)
		}

	case 30:
		localctx = NewStaticPrivilegeEventContext(p, localctx)
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(7252)
			p.Match(MySQLStatementParserEVENT)
		}

	case 31:
		localctx = NewStaticPrivilegeTriggerContext(p, localctx)
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(7253)
			p.Match(MySQLStatementParserTRIGGER)
		}

	case 32:
		localctx = NewStaticPrivilegeCreateTablespaceContext(p, localctx)
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(7254)
			p.Match(MySQLStatementParserCREATE)
		}
		{
			p.SetState(7255)
			p.Match(MySQLStatementParserTABLESPACE)
		}

	case 33:
		localctx = NewStaticPrivilegeCreateRoleContext(p, localctx)
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(7256)
			p.Match(MySQLStatementParserCREATE)
		}
		{
			p.SetState(7257)
			p.Match(MySQLStatementParserROLE)
		}

	case 34:
		localctx = NewStaticPrivilegeDropRoleContext(p, localctx)
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(7258)
			p.Match(MySQLStatementParserDROP)
		}
		{
			p.SetState(7259)
			p.Match(MySQLStatementParserROLE)
		}

	}

	return localctx
}

// IAclTypeContext is an interface to support dynamic dispatch.
type IAclTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAclTypeContext differentiates from other interfaces.
	IsAclTypeContext()
}

type AclTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAclTypeContext() *AclTypeContext {
	var p = new(AclTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_aclType
	return p
}

func (*AclTypeContext) IsAclTypeContext() {}

func NewAclTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AclTypeContext {
	var p = new(AclTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_aclType

	return p
}

func (s *AclTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *AclTypeContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTABLE, 0)
}

func (s *AclTypeContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFUNCTION, 0)
}

func (s *AclTypeContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPROCEDURE, 0)
}

func (s *AclTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AclTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AclTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAclType(s)
	}
}

func (s *AclTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAclType(s)
	}
}

func (s *AclTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAclType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AclType() (localctx IAclTypeContext) {
	this := p
	_ = this

	localctx = NewAclTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1044, MySQLStatementParserRULE_aclType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7262)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserFUNCTION || _la == MySQLStatementParserPROCEDURE || _la == MySQLStatementParserTABLE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IGrantIdentifierContext is an interface to support dynamic dispatch.
type IGrantIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGrantIdentifierContext differentiates from other interfaces.
	IsGrantIdentifierContext()
}

type GrantIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrantIdentifierContext() *GrantIdentifierContext {
	var p = new(GrantIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_grantIdentifier
	return p
}

func (*GrantIdentifierContext) IsGrantIdentifierContext() {}

func NewGrantIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GrantIdentifierContext {
	var p = new(GrantIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_grantIdentifier

	return p
}

func (s *GrantIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *GrantIdentifierContext) CopyFrom(ctx *GrantIdentifierContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *GrantIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GrantIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type GrantLevelSchemaGlobalContext struct {
	*GrantIdentifierContext
}

func NewGrantLevelSchemaGlobalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GrantLevelSchemaGlobalContext {
	var p = new(GrantLevelSchemaGlobalContext)

	p.GrantIdentifierContext = NewEmptyGrantIdentifierContext()
	p.parser = parser
	p.CopyFrom(ctx.(*GrantIdentifierContext))

	return p
}

func (s *GrantLevelSchemaGlobalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GrantLevelSchemaGlobalContext) SchemaName() ISchemaNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemaNameContext)
}

func (s *GrantLevelSchemaGlobalContext) DOT_ASTERISK_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDOT_ASTERISK_, 0)
}

func (s *GrantLevelSchemaGlobalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterGrantLevelSchemaGlobal(s)
	}
}

func (s *GrantLevelSchemaGlobalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitGrantLevelSchemaGlobal(s)
	}
}

func (s *GrantLevelSchemaGlobalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitGrantLevelSchemaGlobal(s)

	default:
		return t.VisitChildren(s)
	}
}

type GrantLevelGlobalContext struct {
	*GrantIdentifierContext
}

func NewGrantLevelGlobalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GrantLevelGlobalContext {
	var p = new(GrantLevelGlobalContext)

	p.GrantIdentifierContext = NewEmptyGrantIdentifierContext()
	p.parser = parser
	p.CopyFrom(ctx.(*GrantIdentifierContext))

	return p
}

func (s *GrantLevelGlobalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GrantLevelGlobalContext) ASTERISK_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserASTERISK_, 0)
}

func (s *GrantLevelGlobalContext) DOT_ASTERISK_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDOT_ASTERISK_, 0)
}

func (s *GrantLevelGlobalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterGrantLevelGlobal(s)
	}
}

func (s *GrantLevelGlobalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitGrantLevelGlobal(s)
	}
}

func (s *GrantLevelGlobalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitGrantLevelGlobal(s)

	default:
		return t.VisitChildren(s)
	}
}

type GrantLevelTableContext struct {
	*GrantIdentifierContext
}

func NewGrantLevelTableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GrantLevelTableContext {
	var p = new(GrantLevelTableContext)

	p.GrantIdentifierContext = NewEmptyGrantIdentifierContext()
	p.parser = parser
	p.CopyFrom(ctx.(*GrantIdentifierContext))

	return p
}

func (s *GrantLevelTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GrantLevelTableContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *GrantLevelTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterGrantLevelTable(s)
	}
}

func (s *GrantLevelTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitGrantLevelTable(s)
	}
}

func (s *GrantLevelTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitGrantLevelTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) GrantIdentifier() (localctx IGrantIdentifierContext) {
	this := p
	_ = this

	localctx = NewGrantIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1046, MySQLStatementParserRULE_grantIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7271)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 954, p.GetParserRuleContext()) {
	case 1:
		localctx = NewGrantLevelGlobalContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7264)
			p.Match(MySQLStatementParserASTERISK_)
		}

	case 2:
		localctx = NewGrantLevelGlobalContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7265)
			p.Match(MySQLStatementParserASTERISK_)
		}
		{
			p.SetState(7266)
			p.Match(MySQLStatementParserDOT_ASTERISK_)
		}

	case 3:
		localctx = NewGrantLevelSchemaGlobalContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7267)
			p.SchemaName()
		}
		{
			p.SetState(7268)
			p.Match(MySQLStatementParserDOT_ASTERISK_)
		}

	case 4:
		localctx = NewGrantLevelTableContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7270)
			p.TableName()
		}

	}

	return localctx
}

// ICreateUserContext is an interface to support dynamic dispatch.
type ICreateUserContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateUserContext differentiates from other interfaces.
	IsCreateUserContext()
}

type CreateUserContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateUserContext() *CreateUserContext {
	var p = new(CreateUserContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_createUser
	return p
}

func (*CreateUserContext) IsCreateUserContext() {}

func NewCreateUserContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateUserContext {
	var p = new(CreateUserContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_createUser

	return p
}

func (s *CreateUserContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateUserContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *CreateUserContext) USER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUSER, 0)
}

func (s *CreateUserContext) CreateUserList() ICreateUserListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateUserListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateUserListContext)
}

func (s *CreateUserContext) IF() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIF, 0)
}

func (s *CreateUserContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNOT, 0)
}

func (s *CreateUserContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXISTS, 0)
}

func (s *CreateUserContext) DefaultRoleClause() IDefaultRoleClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefaultRoleClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefaultRoleClauseContext)
}

func (s *CreateUserContext) RequireClause() IRequireClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRequireClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRequireClauseContext)
}

func (s *CreateUserContext) ConnectOptions() IConnectOptionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConnectOptionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConnectOptionsContext)
}

func (s *CreateUserContext) AccountLockPasswordExpireOptions() IAccountLockPasswordExpireOptionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAccountLockPasswordExpireOptionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAccountLockPasswordExpireOptionsContext)
}

func (s *CreateUserContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateUserContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateUserContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateUser(s)
	}
}

func (s *CreateUserContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateUser(s)
	}
}

func (s *CreateUserContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateUser(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CreateUser() (localctx ICreateUserContext) {
	this := p
	_ = this

	localctx = NewCreateUserContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1048, MySQLStatementParserRULE_createUser)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7273)
		p.Match(MySQLStatementParserCREATE)
	}
	{
		p.SetState(7274)
		p.Match(MySQLStatementParserUSER)
	}
	p.SetState(7278)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIF {
		{
			p.SetState(7275)
			p.Match(MySQLStatementParserIF)
		}
		{
			p.SetState(7276)
			p.Match(MySQLStatementParserNOT)
		}
		{
			p.SetState(7277)
			p.Match(MySQLStatementParserEXISTS)
		}

	}
	{
		p.SetState(7280)
		p.CreateUserList()
	}
	p.SetState(7282)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserDEFAULT {
		{
			p.SetState(7281)
			p.DefaultRoleClause()
		}

	}
	p.SetState(7285)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserREQUIRE {
		{
			p.SetState(7284)
			p.RequireClause()
		}

	}
	p.SetState(7288)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserWITH {
		{
			p.SetState(7287)
			p.ConnectOptions()
		}

	}
	p.SetState(7291)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserACCOUNT || _la == MySQLStatementParserFAILED_LOGIN_ATTEMPTS || _la == MySQLStatementParserPASSWORD || _la == MySQLStatementParserPASSWORD_LOCK_TIME {
		{
			p.SetState(7290)
			p.AccountLockPasswordExpireOptions()
		}

	}

	return localctx
}

// ICreateUserEntryContext is an interface to support dynamic dispatch.
type ICreateUserEntryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateUserEntryContext differentiates from other interfaces.
	IsCreateUserEntryContext()
}

type CreateUserEntryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateUserEntryContext() *CreateUserEntryContext {
	var p = new(CreateUserEntryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_createUserEntry
	return p
}

func (*CreateUserEntryContext) IsCreateUserEntryContext() {}

func NewCreateUserEntryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateUserEntryContext {
	var p = new(CreateUserEntryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_createUserEntry

	return p
}

func (s *CreateUserEntryContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateUserEntryContext) CopyFrom(ctx *CreateUserEntryContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *CreateUserEntryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateUserEntryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type CreateUserEntryIdentifiedByContext struct {
	*CreateUserEntryContext
}

func NewCreateUserEntryIdentifiedByContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CreateUserEntryIdentifiedByContext {
	var p = new(CreateUserEntryIdentifiedByContext)

	p.CreateUserEntryContext = NewEmptyCreateUserEntryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*CreateUserEntryContext))

	return p
}

func (s *CreateUserEntryIdentifiedByContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateUserEntryIdentifiedByContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *CreateUserEntryIdentifiedByContext) IDENTIFIED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIDENTIFIED, 0)
}

func (s *CreateUserEntryIdentifiedByContext) BY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBY, 0)
}

func (s *CreateUserEntryIdentifiedByContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *CreateUserEntryIdentifiedByContext) RANDOM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRANDOM, 0)
}

func (s *CreateUserEntryIdentifiedByContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPASSWORD, 0)
}

func (s *CreateUserEntryIdentifiedByContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateUserEntryIdentifiedBy(s)
	}
}

func (s *CreateUserEntryIdentifiedByContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateUserEntryIdentifiedBy(s)
	}
}

func (s *CreateUserEntryIdentifiedByContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateUserEntryIdentifiedBy(s)

	default:
		return t.VisitChildren(s)
	}
}

type CreateUserEntryIdentifiedWithContext struct {
	*CreateUserEntryContext
}

func NewCreateUserEntryIdentifiedWithContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CreateUserEntryIdentifiedWithContext {
	var p = new(CreateUserEntryIdentifiedWithContext)

	p.CreateUserEntryContext = NewEmptyCreateUserEntryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*CreateUserEntryContext))

	return p
}

func (s *CreateUserEntryIdentifiedWithContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateUserEntryIdentifiedWithContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *CreateUserEntryIdentifiedWithContext) IDENTIFIED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIDENTIFIED, 0)
}

func (s *CreateUserEntryIdentifiedWithContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWITH, 0)
}

func (s *CreateUserEntryIdentifiedWithContext) TextOrIdentifier() ITextOrIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITextOrIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITextOrIdentifierContext)
}

func (s *CreateUserEntryIdentifiedWithContext) AS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAS, 0)
}

func (s *CreateUserEntryIdentifiedWithContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *CreateUserEntryIdentifiedWithContext) BY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBY, 0)
}

func (s *CreateUserEntryIdentifiedWithContext) RANDOM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRANDOM, 0)
}

func (s *CreateUserEntryIdentifiedWithContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPASSWORD, 0)
}

func (s *CreateUserEntryIdentifiedWithContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateUserEntryIdentifiedWith(s)
	}
}

func (s *CreateUserEntryIdentifiedWithContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateUserEntryIdentifiedWith(s)
	}
}

func (s *CreateUserEntryIdentifiedWithContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateUserEntryIdentifiedWith(s)

	default:
		return t.VisitChildren(s)
	}
}

type CreateUserEntryNoOptionContext struct {
	*CreateUserEntryContext
}

func NewCreateUserEntryNoOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CreateUserEntryNoOptionContext {
	var p = new(CreateUserEntryNoOptionContext)

	p.CreateUserEntryContext = NewEmptyCreateUserEntryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*CreateUserEntryContext))

	return p
}

func (s *CreateUserEntryNoOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateUserEntryNoOptionContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *CreateUserEntryNoOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateUserEntryNoOption(s)
	}
}

func (s *CreateUserEntryNoOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateUserEntryNoOption(s)
	}
}

func (s *CreateUserEntryNoOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateUserEntryNoOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CreateUserEntry() (localctx ICreateUserEntryContext) {
	this := p
	_ = this

	localctx = NewCreateUserEntryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1050, MySQLStatementParserRULE_createUserEntry)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7332)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 960, p.GetParserRuleContext()) {
	case 1:
		localctx = NewCreateUserEntryNoOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7293)
			p.UserName()
		}

	case 2:
		localctx = NewCreateUserEntryIdentifiedByContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7294)
			p.UserName()
		}
		{
			p.SetState(7295)
			p.Match(MySQLStatementParserIDENTIFIED)
		}
		{
			p.SetState(7296)
			p.Match(MySQLStatementParserBY)
		}
		{
			p.SetState(7297)
			p.String_()
		}

	case 3:
		localctx = NewCreateUserEntryIdentifiedByContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7299)
			p.UserName()
		}
		{
			p.SetState(7300)
			p.Match(MySQLStatementParserIDENTIFIED)
		}
		{
			p.SetState(7301)
			p.Match(MySQLStatementParserBY)
		}
		{
			p.SetState(7302)
			p.Match(MySQLStatementParserRANDOM)
		}
		{
			p.SetState(7303)
			p.Match(MySQLStatementParserPASSWORD)
		}

	case 4:
		localctx = NewCreateUserEntryIdentifiedWithContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7305)
			p.UserName()
		}
		{
			p.SetState(7306)
			p.Match(MySQLStatementParserIDENTIFIED)
		}
		{
			p.SetState(7307)
			p.Match(MySQLStatementParserWITH)
		}
		{
			p.SetState(7308)
			p.TextOrIdentifier()
		}

	case 5:
		localctx = NewCreateUserEntryIdentifiedWithContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(7310)
			p.UserName()
		}
		{
			p.SetState(7311)
			p.Match(MySQLStatementParserIDENTIFIED)
		}
		{
			p.SetState(7312)
			p.Match(MySQLStatementParserWITH)
		}
		{
			p.SetState(7313)
			p.TextOrIdentifier()
		}
		{
			p.SetState(7314)
			p.Match(MySQLStatementParserAS)
		}
		{
			p.SetState(7315)
			p.String_()
		}

	case 6:
		localctx = NewCreateUserEntryIdentifiedWithContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(7317)
			p.UserName()
		}
		{
			p.SetState(7318)
			p.Match(MySQLStatementParserIDENTIFIED)
		}
		{
			p.SetState(7319)
			p.Match(MySQLStatementParserWITH)
		}
		{
			p.SetState(7320)
			p.TextOrIdentifier()
		}
		{
			p.SetState(7321)
			p.Match(MySQLStatementParserBY)
		}
		{
			p.SetState(7322)
			p.String_()
		}

	case 7:
		localctx = NewCreateUserEntryIdentifiedWithContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(7324)
			p.UserName()
		}
		{
			p.SetState(7325)
			p.Match(MySQLStatementParserIDENTIFIED)
		}
		{
			p.SetState(7326)
			p.Match(MySQLStatementParserWITH)
		}
		{
			p.SetState(7327)
			p.TextOrIdentifier()
		}
		{
			p.SetState(7328)
			p.Match(MySQLStatementParserBY)
		}
		{
			p.SetState(7329)
			p.Match(MySQLStatementParserRANDOM)
		}
		{
			p.SetState(7330)
			p.Match(MySQLStatementParserPASSWORD)
		}

	}

	return localctx
}

// ICreateUserListContext is an interface to support dynamic dispatch.
type ICreateUserListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateUserListContext differentiates from other interfaces.
	IsCreateUserListContext()
}

type CreateUserListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateUserListContext() *CreateUserListContext {
	var p = new(CreateUserListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_createUserList
	return p
}

func (*CreateUserListContext) IsCreateUserListContext() {}

func NewCreateUserListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateUserListContext {
	var p = new(CreateUserListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_createUserList

	return p
}

func (s *CreateUserListContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateUserListContext) AllCreateUserEntry() []ICreateUserEntryContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICreateUserEntryContext)(nil)).Elem())
	var tst = make([]ICreateUserEntryContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICreateUserEntryContext)
		}
	}

	return tst
}

func (s *CreateUserListContext) CreateUserEntry(i int) ICreateUserEntryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateUserEntryContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICreateUserEntryContext)
}

func (s *CreateUserListContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *CreateUserListContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *CreateUserListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateUserListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateUserListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateUserList(s)
	}
}

func (s *CreateUserListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateUserList(s)
	}
}

func (s *CreateUserListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateUserList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CreateUserList() (localctx ICreateUserListContext) {
	this := p
	_ = this

	localctx = NewCreateUserListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1052, MySQLStatementParserRULE_createUserList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7334)
		p.CreateUserEntry()
	}
	p.SetState(7339)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(7335)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(7336)
			p.CreateUserEntry()
		}

		p.SetState(7341)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IDefaultRoleClauseContext is an interface to support dynamic dispatch.
type IDefaultRoleClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefaultRoleClauseContext differentiates from other interfaces.
	IsDefaultRoleClauseContext()
}

type DefaultRoleClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefaultRoleClauseContext() *DefaultRoleClauseContext {
	var p = new(DefaultRoleClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_defaultRoleClause
	return p
}

func (*DefaultRoleClauseContext) IsDefaultRoleClauseContext() {}

func NewDefaultRoleClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefaultRoleClauseContext {
	var p = new(DefaultRoleClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_defaultRoleClause

	return p
}

func (s *DefaultRoleClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *DefaultRoleClauseContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFAULT, 0)
}

func (s *DefaultRoleClauseContext) ROLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROLE, 0)
}

func (s *DefaultRoleClauseContext) AllRoleName() []IRoleNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRoleNameContext)(nil)).Elem())
	var tst = make([]IRoleNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRoleNameContext)
		}
	}

	return tst
}

func (s *DefaultRoleClauseContext) RoleName(i int) IRoleNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoleNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRoleNameContext)
}

func (s *DefaultRoleClauseContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *DefaultRoleClauseContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *DefaultRoleClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefaultRoleClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefaultRoleClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDefaultRoleClause(s)
	}
}

func (s *DefaultRoleClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDefaultRoleClause(s)
	}
}

func (s *DefaultRoleClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDefaultRoleClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DefaultRoleClause() (localctx IDefaultRoleClauseContext) {
	this := p
	_ = this

	localctx = NewDefaultRoleClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1054, MySQLStatementParserRULE_defaultRoleClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7342)
		p.Match(MySQLStatementParserDEFAULT)
	}
	{
		p.SetState(7343)
		p.Match(MySQLStatementParserROLE)
	}
	{
		p.SetState(7344)
		p.RoleName()
	}
	p.SetState(7349)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(7345)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(7346)
			p.RoleName()
		}

		p.SetState(7351)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IRequireClauseContext is an interface to support dynamic dispatch.
type IRequireClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRequireClauseContext differentiates from other interfaces.
	IsRequireClauseContext()
}

type RequireClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRequireClauseContext() *RequireClauseContext {
	var p = new(RequireClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_requireClause
	return p
}

func (*RequireClauseContext) IsRequireClauseContext() {}

func NewRequireClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RequireClauseContext {
	var p = new(RequireClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_requireClause

	return p
}

func (s *RequireClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *RequireClauseContext) REQUIRE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREQUIRE, 0)
}

func (s *RequireClauseContext) NONE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNONE, 0)
}

func (s *RequireClauseContext) SSL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSSL, 0)
}

func (s *RequireClauseContext) X509() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserX509, 0)
}

func (s *RequireClauseContext) AllTlsOption() []ITlsOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITlsOptionContext)(nil)).Elem())
	var tst = make([]ITlsOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITlsOptionContext)
		}
	}

	return tst
}

func (s *RequireClauseContext) TlsOption(i int) ITlsOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITlsOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITlsOptionContext)
}

func (s *RequireClauseContext) AllAND() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserAND)
}

func (s *RequireClauseContext) AND(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAND, i)
}

func (s *RequireClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RequireClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RequireClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterRequireClause(s)
	}
}

func (s *RequireClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitRequireClause(s)
	}
}

func (s *RequireClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitRequireClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) RequireClause() (localctx IRequireClauseContext) {
	this := p
	_ = this

	localctx = NewRequireClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1056, MySQLStatementParserRULE_requireClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7352)
		p.Match(MySQLStatementParserREQUIRE)
	}
	p.SetState(7366)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserNONE:
		{
			p.SetState(7353)
			p.Match(MySQLStatementParserNONE)
		}

	case MySQLStatementParserSSL:
		{
			p.SetState(7354)
			p.Match(MySQLStatementParserSSL)
		}

	case MySQLStatementParserX509:
		{
			p.SetState(7355)
			p.Match(MySQLStatementParserX509)
		}

	case MySQLStatementParserCIPHER, MySQLStatementParserISSUER, MySQLStatementParserSUBJECT:
		{
			p.SetState(7356)
			p.TlsOption()
		}
		p.SetState(7363)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserAND || _la == MySQLStatementParserCIPHER || _la == MySQLStatementParserISSUER || _la == MySQLStatementParserSUBJECT {
			p.SetState(7358)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySQLStatementParserAND {
				{
					p.SetState(7357)
					p.Match(MySQLStatementParserAND)
				}

			}
			{
				p.SetState(7360)
				p.TlsOption()
			}

			p.SetState(7365)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConnectOptionsContext is an interface to support dynamic dispatch.
type IConnectOptionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConnectOptionsContext differentiates from other interfaces.
	IsConnectOptionsContext()
}

type ConnectOptionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConnectOptionsContext() *ConnectOptionsContext {
	var p = new(ConnectOptionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_connectOptions
	return p
}

func (*ConnectOptionsContext) IsConnectOptionsContext() {}

func NewConnectOptionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConnectOptionsContext {
	var p = new(ConnectOptionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_connectOptions

	return p
}

func (s *ConnectOptionsContext) GetParser() antlr.Parser { return s.parser }

func (s *ConnectOptionsContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWITH, 0)
}

func (s *ConnectOptionsContext) AllConnectOption() []IConnectOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConnectOptionContext)(nil)).Elem())
	var tst = make([]IConnectOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConnectOptionContext)
		}
	}

	return tst
}

func (s *ConnectOptionsContext) ConnectOption(i int) IConnectOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConnectOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConnectOptionContext)
}

func (s *ConnectOptionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConnectOptionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConnectOptionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterConnectOptions(s)
	}
}

func (s *ConnectOptionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitConnectOptions(s)
	}
}

func (s *ConnectOptionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitConnectOptions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ConnectOptions() (localctx IConnectOptionsContext) {
	this := p
	_ = this

	localctx = NewConnectOptionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1058, MySQLStatementParserRULE_connectOptions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7368)
		p.Match(MySQLStatementParserWITH)
	}
	{
		p.SetState(7369)
		p.ConnectOption()
	}
	p.SetState(7373)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((_la-413)&-(0x1f+1)) == 0 && ((1<<uint((_la-413)))&((1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-413))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-413))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-413))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-413)))) != 0 {
		{
			p.SetState(7370)
			p.ConnectOption()
		}

		p.SetState(7375)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAccountLockPasswordExpireOptionsContext is an interface to support dynamic dispatch.
type IAccountLockPasswordExpireOptionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAccountLockPasswordExpireOptionsContext differentiates from other interfaces.
	IsAccountLockPasswordExpireOptionsContext()
}

type AccountLockPasswordExpireOptionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAccountLockPasswordExpireOptionsContext() *AccountLockPasswordExpireOptionsContext {
	var p = new(AccountLockPasswordExpireOptionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_accountLockPasswordExpireOptions
	return p
}

func (*AccountLockPasswordExpireOptionsContext) IsAccountLockPasswordExpireOptionsContext() {}

func NewAccountLockPasswordExpireOptionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AccountLockPasswordExpireOptionsContext {
	var p = new(AccountLockPasswordExpireOptionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_accountLockPasswordExpireOptions

	return p
}

func (s *AccountLockPasswordExpireOptionsContext) GetParser() antlr.Parser { return s.parser }

func (s *AccountLockPasswordExpireOptionsContext) AllAccountLockPasswordExpireOption() []IAccountLockPasswordExpireOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAccountLockPasswordExpireOptionContext)(nil)).Elem())
	var tst = make([]IAccountLockPasswordExpireOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAccountLockPasswordExpireOptionContext)
		}
	}

	return tst
}

func (s *AccountLockPasswordExpireOptionsContext) AccountLockPasswordExpireOption(i int) IAccountLockPasswordExpireOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAccountLockPasswordExpireOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAccountLockPasswordExpireOptionContext)
}

func (s *AccountLockPasswordExpireOptionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AccountLockPasswordExpireOptionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AccountLockPasswordExpireOptionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAccountLockPasswordExpireOptions(s)
	}
}

func (s *AccountLockPasswordExpireOptionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAccountLockPasswordExpireOptions(s)
	}
}

func (s *AccountLockPasswordExpireOptionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAccountLockPasswordExpireOptions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AccountLockPasswordExpireOptions() (localctx IAccountLockPasswordExpireOptionsContext) {
	this := p
	_ = this

	localctx = NewAccountLockPasswordExpireOptionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1060, MySQLStatementParserRULE_accountLockPasswordExpireOptions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7377)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == MySQLStatementParserACCOUNT || _la == MySQLStatementParserFAILED_LOGIN_ATTEMPTS || _la == MySQLStatementParserPASSWORD || _la == MySQLStatementParserPASSWORD_LOCK_TIME {
		{
			p.SetState(7376)
			p.AccountLockPasswordExpireOption()
		}

		p.SetState(7379)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAccountLockPasswordExpireOptionContext is an interface to support dynamic dispatch.
type IAccountLockPasswordExpireOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAccountLockPasswordExpireOptionContext differentiates from other interfaces.
	IsAccountLockPasswordExpireOptionContext()
}

type AccountLockPasswordExpireOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAccountLockPasswordExpireOptionContext() *AccountLockPasswordExpireOptionContext {
	var p = new(AccountLockPasswordExpireOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_accountLockPasswordExpireOption
	return p
}

func (*AccountLockPasswordExpireOptionContext) IsAccountLockPasswordExpireOptionContext() {}

func NewAccountLockPasswordExpireOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AccountLockPasswordExpireOptionContext {
	var p = new(AccountLockPasswordExpireOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_accountLockPasswordExpireOption

	return p
}

func (s *AccountLockPasswordExpireOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *AccountLockPasswordExpireOptionContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserACCOUNT, 0)
}

func (s *AccountLockPasswordExpireOptionContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOCK, 0)
}

func (s *AccountLockPasswordExpireOptionContext) UNLOCK() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNLOCK, 0)
}

func (s *AccountLockPasswordExpireOptionContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPASSWORD, 0)
}

func (s *AccountLockPasswordExpireOptionContext) EXPIRE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXPIRE, 0)
}

func (s *AccountLockPasswordExpireOptionContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFAULT, 0)
}

func (s *AccountLockPasswordExpireOptionContext) NEVER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNEVER, 0)
}

func (s *AccountLockPasswordExpireOptionContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserINTERVAL, 0)
}

func (s *AccountLockPasswordExpireOptionContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *AccountLockPasswordExpireOptionContext) DAY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDAY, 0)
}

func (s *AccountLockPasswordExpireOptionContext) HISTORY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserHISTORY, 0)
}

func (s *AccountLockPasswordExpireOptionContext) REUSE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREUSE, 0)
}

func (s *AccountLockPasswordExpireOptionContext) REQUIRE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREQUIRE, 0)
}

func (s *AccountLockPasswordExpireOptionContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCURRENT, 0)
}

func (s *AccountLockPasswordExpireOptionContext) OPTIONAL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOPTIONAL, 0)
}

func (s *AccountLockPasswordExpireOptionContext) FAILED_LOGIN_ATTEMPTS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFAILED_LOGIN_ATTEMPTS, 0)
}

func (s *AccountLockPasswordExpireOptionContext) PASSWORD_LOCK_TIME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPASSWORD_LOCK_TIME, 0)
}

func (s *AccountLockPasswordExpireOptionContext) UNBOUNDED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNBOUNDED, 0)
}

func (s *AccountLockPasswordExpireOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AccountLockPasswordExpireOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AccountLockPasswordExpireOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAccountLockPasswordExpireOption(s)
	}
}

func (s *AccountLockPasswordExpireOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAccountLockPasswordExpireOption(s)
	}
}

func (s *AccountLockPasswordExpireOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAccountLockPasswordExpireOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AccountLockPasswordExpireOption() (localctx IAccountLockPasswordExpireOptionContext) {
	this := p
	_ = this

	localctx = NewAccountLockPasswordExpireOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1062, MySQLStatementParserRULE_accountLockPasswordExpireOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7413)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 971, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7381)
			p.Match(MySQLStatementParserACCOUNT)
		}
		{
			p.SetState(7382)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserLOCK || _la == MySQLStatementParserUNLOCK) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7383)
			p.Match(MySQLStatementParserPASSWORD)
		}
		{
			p.SetState(7384)
			p.Match(MySQLStatementParserEXPIRE)
		}
		p.SetState(7390)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySQLStatementParserDEFAULT:
			{
				p.SetState(7385)
				p.Match(MySQLStatementParserDEFAULT)
			}

		case MySQLStatementParserNEVER:
			{
				p.SetState(7386)
				p.Match(MySQLStatementParserNEVER)
			}

		case MySQLStatementParserINTERVAL:
			{
				p.SetState(7387)
				p.Match(MySQLStatementParserINTERVAL)
			}
			{
				p.SetState(7388)
				p.Match(MySQLStatementParserNUMBER_)
			}
			{
				p.SetState(7389)
				p.Match(MySQLStatementParserDAY)
			}

		case MySQLStatementParserEOF, MySQLStatementParserSEMI_, MySQLStatementParserACCOUNT, MySQLStatementParserFAILED_LOGIN_ATTEMPTS, MySQLStatementParserPASSWORD, MySQLStatementParserPASSWORD_LOCK_TIME:

		default:
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7392)
			p.Match(MySQLStatementParserPASSWORD)
		}
		{
			p.SetState(7393)
			p.Match(MySQLStatementParserHISTORY)
		}
		{
			p.SetState(7394)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserDEFAULT || _la == MySQLStatementParserNUMBER_) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7395)
			p.Match(MySQLStatementParserPASSWORD)
		}
		{
			p.SetState(7396)
			p.Match(MySQLStatementParserREUSE)
		}
		{
			p.SetState(7397)
			p.Match(MySQLStatementParserINTERVAL)
		}
		p.SetState(7401)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySQLStatementParserDEFAULT:
			{
				p.SetState(7398)
				p.Match(MySQLStatementParserDEFAULT)
			}

		case MySQLStatementParserNUMBER_:
			{
				p.SetState(7399)
				p.Match(MySQLStatementParserNUMBER_)
			}
			{
				p.SetState(7400)
				p.Match(MySQLStatementParserDAY)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(7403)
			p.Match(MySQLStatementParserPASSWORD)
		}
		{
			p.SetState(7404)
			p.Match(MySQLStatementParserREQUIRE)
		}
		{
			p.SetState(7405)
			p.Match(MySQLStatementParserCURRENT)
		}
		p.SetState(7407)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserDEFAULT || _la == MySQLStatementParserOPTIONAL {
			{
				p.SetState(7406)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySQLStatementParserDEFAULT || _la == MySQLStatementParserOPTIONAL) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(7409)
			p.Match(MySQLStatementParserFAILED_LOGIN_ATTEMPTS)
		}
		{
			p.SetState(7410)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(7411)
			p.Match(MySQLStatementParserPASSWORD_LOCK_TIME)
		}
		{
			p.SetState(7412)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserUNBOUNDED || _la == MySQLStatementParserNUMBER_) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IAlterUserContext is an interface to support dynamic dispatch.
type IAlterUserContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterUserContext differentiates from other interfaces.
	IsAlterUserContext()
}

type AlterUserContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterUserContext() *AlterUserContext {
	var p = new(AlterUserContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterUser
	return p
}

func (*AlterUserContext) IsAlterUserContext() {}

func NewAlterUserContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterUserContext {
	var p = new(AlterUserContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterUser

	return p
}

func (s *AlterUserContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterUserContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALTER, 0)
}

func (s *AlterUserContext) AllUSER() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserUSER)
}

func (s *AlterUserContext) USER(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUSER, i)
}

func (s *AlterUserContext) AlterUserList() IAlterUserListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterUserListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterUserListContext)
}

func (s *AlterUserContext) IF() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIF, 0)
}

func (s *AlterUserContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXISTS, 0)
}

func (s *AlterUserContext) RequireClause() IRequireClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRequireClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRequireClauseContext)
}

func (s *AlterUserContext) ConnectOptions() IConnectOptionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConnectOptionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConnectOptionsContext)
}

func (s *AlterUserContext) AccountLockPasswordExpireOptions() IAccountLockPasswordExpireOptionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAccountLockPasswordExpireOptionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAccountLockPasswordExpireOptionsContext)
}

func (s *AlterUserContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *AlterUserContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *AlterUserContext) UserFuncAuthOption() IUserFuncAuthOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserFuncAuthOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserFuncAuthOptionContext)
}

func (s *AlterUserContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *AlterUserContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFAULT, 0)
}

func (s *AlterUserContext) ROLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROLE, 0)
}

func (s *AlterUserContext) NONE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNONE, 0)
}

func (s *AlterUserContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALL, 0)
}

func (s *AlterUserContext) AllRoleName() []IRoleNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRoleNameContext)(nil)).Elem())
	var tst = make([]IRoleNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRoleNameContext)
		}
	}

	return tst
}

func (s *AlterUserContext) RoleName(i int) IRoleNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoleNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRoleNameContext)
}

func (s *AlterUserContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *AlterUserContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *AlterUserContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterUserContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterUserContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterUser(s)
	}
}

func (s *AlterUserContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterUser(s)
	}
}

func (s *AlterUserContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterUser(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterUser() (localctx IAlterUserContext) {
	this := p
	_ = this

	localctx = NewAlterUserContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1064, MySQLStatementParserRULE_alterUser)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7462)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 980, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7415)
			p.Match(MySQLStatementParserALTER)
		}
		{
			p.SetState(7416)
			p.Match(MySQLStatementParserUSER)
		}
		p.SetState(7419)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserIF {
			{
				p.SetState(7417)
				p.Match(MySQLStatementParserIF)
			}
			{
				p.SetState(7418)
				p.Match(MySQLStatementParserEXISTS)
			}

		}
		{
			p.SetState(7421)
			p.AlterUserList()
		}
		p.SetState(7423)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserREQUIRE {
			{
				p.SetState(7422)
				p.RequireClause()
			}

		}
		p.SetState(7426)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserWITH {
			{
				p.SetState(7425)
				p.ConnectOptions()
			}

		}
		p.SetState(7429)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserACCOUNT || _la == MySQLStatementParserFAILED_LOGIN_ATTEMPTS || _la == MySQLStatementParserPASSWORD || _la == MySQLStatementParserPASSWORD_LOCK_TIME {
			{
				p.SetState(7428)
				p.AccountLockPasswordExpireOptions()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7431)
			p.Match(MySQLStatementParserALTER)
		}
		{
			p.SetState(7432)
			p.Match(MySQLStatementParserUSER)
		}
		p.SetState(7435)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserIF {
			{
				p.SetState(7433)
				p.Match(MySQLStatementParserIF)
			}
			{
				p.SetState(7434)
				p.Match(MySQLStatementParserEXISTS)
			}

		}
		{
			p.SetState(7437)
			p.Match(MySQLStatementParserUSER)
		}
		{
			p.SetState(7438)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(7439)
			p.Match(MySQLStatementParserRP_)
		}
		{
			p.SetState(7440)
			p.UserFuncAuthOption()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7441)
			p.Match(MySQLStatementParserALTER)
		}
		{
			p.SetState(7442)
			p.Match(MySQLStatementParserUSER)
		}
		p.SetState(7445)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserIF {
			{
				p.SetState(7443)
				p.Match(MySQLStatementParserIF)
			}
			{
				p.SetState(7444)
				p.Match(MySQLStatementParserEXISTS)
			}

		}
		{
			p.SetState(7447)
			p.UserName()
		}
		{
			p.SetState(7448)
			p.Match(MySQLStatementParserDEFAULT)
		}
		{
			p.SetState(7449)
			p.Match(MySQLStatementParserROLE)
		}
		p.SetState(7460)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 979, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(7450)
				p.Match(MySQLStatementParserNONE)
			}

		case 2:
			{
				p.SetState(7451)
				p.Match(MySQLStatementParserALL)
			}

		case 3:
			{
				p.SetState(7452)
				p.RoleName()
			}
			p.SetState(7457)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySQLStatementParserCOMMA_ {
				{
					p.SetState(7453)
					p.Match(MySQLStatementParserCOMMA_)
				}
				{
					p.SetState(7454)
					p.RoleName()
				}

				p.SetState(7459)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}

	}

	return localctx
}

// IAlterUserEntryContext is an interface to support dynamic dispatch.
type IAlterUserEntryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterUserEntryContext differentiates from other interfaces.
	IsAlterUserEntryContext()
}

type AlterUserEntryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterUserEntryContext() *AlterUserEntryContext {
	var p = new(AlterUserEntryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterUserEntry
	return p
}

func (*AlterUserEntryContext) IsAlterUserEntryContext() {}

func NewAlterUserEntryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterUserEntryContext {
	var p = new(AlterUserEntryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterUserEntry

	return p
}

func (s *AlterUserEntryContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterUserEntryContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *AlterUserEntryContext) UserAuthOption() IUserAuthOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserAuthOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserAuthOptionContext)
}

func (s *AlterUserEntryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterUserEntryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterUserEntryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterUserEntry(s)
	}
}

func (s *AlterUserEntryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterUserEntry(s)
	}
}

func (s *AlterUserEntryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterUserEntry(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterUserEntry() (localctx IAlterUserEntryContext) {
	this := p
	_ = this

	localctx = NewAlterUserEntryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1066, MySQLStatementParserRULE_alterUserEntry)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7464)
		p.UserName()
	}
	p.SetState(7466)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserDISCARD || _la == MySQLStatementParserIDENTIFIED {
		{
			p.SetState(7465)
			p.UserAuthOption()
		}

	}

	return localctx
}

// IAlterUserListContext is an interface to support dynamic dispatch.
type IAlterUserListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterUserListContext differentiates from other interfaces.
	IsAlterUserListContext()
}

type AlterUserListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterUserListContext() *AlterUserListContext {
	var p = new(AlterUserListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_alterUserList
	return p
}

func (*AlterUserListContext) IsAlterUserListContext() {}

func NewAlterUserListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterUserListContext {
	var p = new(AlterUserListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_alterUserList

	return p
}

func (s *AlterUserListContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterUserListContext) AllAlterUserEntry() []IAlterUserEntryContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAlterUserEntryContext)(nil)).Elem())
	var tst = make([]IAlterUserEntryContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAlterUserEntryContext)
		}
	}

	return tst
}

func (s *AlterUserListContext) AlterUserEntry(i int) IAlterUserEntryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterUserEntryContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAlterUserEntryContext)
}

func (s *AlterUserListContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *AlterUserListContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *AlterUserListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterUserListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterUserListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAlterUserList(s)
	}
}

func (s *AlterUserListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAlterUserList(s)
	}
}

func (s *AlterUserListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAlterUserList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AlterUserList() (localctx IAlterUserListContext) {
	this := p
	_ = this

	localctx = NewAlterUserListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1068, MySQLStatementParserRULE_alterUserList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7468)
		p.AlterUserEntry()
	}
	p.SetState(7473)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(7469)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(7470)
			p.AlterUserEntry()
		}

		p.SetState(7475)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IDropUserContext is an interface to support dynamic dispatch.
type IDropUserContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropUserContext differentiates from other interfaces.
	IsDropUserContext()
}

type DropUserContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropUserContext() *DropUserContext {
	var p = new(DropUserContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_dropUser
	return p
}

func (*DropUserContext) IsDropUserContext() {}

func NewDropUserContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropUserContext {
	var p = new(DropUserContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_dropUser

	return p
}

func (s *DropUserContext) GetParser() antlr.Parser { return s.parser }

func (s *DropUserContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDROP, 0)
}

func (s *DropUserContext) USER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUSER, 0)
}

func (s *DropUserContext) AllUserName() []IUserNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserNameContext)(nil)).Elem())
	var tst = make([]IUserNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserNameContext)
		}
	}

	return tst
}

func (s *DropUserContext) UserName(i int) IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *DropUserContext) IF() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIF, 0)
}

func (s *DropUserContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXISTS, 0)
}

func (s *DropUserContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *DropUserContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *DropUserContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropUserContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropUserContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDropUser(s)
	}
}

func (s *DropUserContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDropUser(s)
	}
}

func (s *DropUserContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDropUser(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DropUser() (localctx IDropUserContext) {
	this := p
	_ = this

	localctx = NewDropUserContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1070, MySQLStatementParserRULE_dropUser)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7476)
		p.Match(MySQLStatementParserDROP)
	}
	{
		p.SetState(7477)
		p.Match(MySQLStatementParserUSER)
	}
	p.SetState(7480)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIF {
		{
			p.SetState(7478)
			p.Match(MySQLStatementParserIF)
		}
		{
			p.SetState(7479)
			p.Match(MySQLStatementParserEXISTS)
		}

	}
	{
		p.SetState(7482)
		p.UserName()
	}
	p.SetState(7487)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(7483)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(7484)
			p.UserName()
		}

		p.SetState(7489)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICreateRoleContext is an interface to support dynamic dispatch.
type ICreateRoleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateRoleContext differentiates from other interfaces.
	IsCreateRoleContext()
}

type CreateRoleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateRoleContext() *CreateRoleContext {
	var p = new(CreateRoleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_createRole
	return p
}

func (*CreateRoleContext) IsCreateRoleContext() {}

func NewCreateRoleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateRoleContext {
	var p = new(CreateRoleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_createRole

	return p
}

func (s *CreateRoleContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateRoleContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCREATE, 0)
}

func (s *CreateRoleContext) ROLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROLE, 0)
}

func (s *CreateRoleContext) AllRoleName() []IRoleNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRoleNameContext)(nil)).Elem())
	var tst = make([]IRoleNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRoleNameContext)
		}
	}

	return tst
}

func (s *CreateRoleContext) RoleName(i int) IRoleNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoleNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRoleNameContext)
}

func (s *CreateRoleContext) IF() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIF, 0)
}

func (s *CreateRoleContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNOT, 0)
}

func (s *CreateRoleContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXISTS, 0)
}

func (s *CreateRoleContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *CreateRoleContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *CreateRoleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateRoleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateRoleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterCreateRole(s)
	}
}

func (s *CreateRoleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitCreateRole(s)
	}
}

func (s *CreateRoleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitCreateRole(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) CreateRole() (localctx ICreateRoleContext) {
	this := p
	_ = this

	localctx = NewCreateRoleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1072, MySQLStatementParserRULE_createRole)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7490)
		p.Match(MySQLStatementParserCREATE)
	}
	{
		p.SetState(7491)
		p.Match(MySQLStatementParserROLE)
	}
	p.SetState(7495)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIF {
		{
			p.SetState(7492)
			p.Match(MySQLStatementParserIF)
		}
		{
			p.SetState(7493)
			p.Match(MySQLStatementParserNOT)
		}
		{
			p.SetState(7494)
			p.Match(MySQLStatementParserEXISTS)
		}

	}
	{
		p.SetState(7497)
		p.RoleName()
	}
	p.SetState(7502)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(7498)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(7499)
			p.RoleName()
		}

		p.SetState(7504)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IDropRoleContext is an interface to support dynamic dispatch.
type IDropRoleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropRoleContext differentiates from other interfaces.
	IsDropRoleContext()
}

type DropRoleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropRoleContext() *DropRoleContext {
	var p = new(DropRoleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_dropRole
	return p
}

func (*DropRoleContext) IsDropRoleContext() {}

func NewDropRoleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropRoleContext {
	var p = new(DropRoleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_dropRole

	return p
}

func (s *DropRoleContext) GetParser() antlr.Parser { return s.parser }

func (s *DropRoleContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDROP, 0)
}

func (s *DropRoleContext) ROLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROLE, 0)
}

func (s *DropRoleContext) AllRoleName() []IRoleNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRoleNameContext)(nil)).Elem())
	var tst = make([]IRoleNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRoleNameContext)
		}
	}

	return tst
}

func (s *DropRoleContext) RoleName(i int) IRoleNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoleNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRoleNameContext)
}

func (s *DropRoleContext) IF() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIF, 0)
}

func (s *DropRoleContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXISTS, 0)
}

func (s *DropRoleContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *DropRoleContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *DropRoleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropRoleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropRoleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterDropRole(s)
	}
}

func (s *DropRoleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitDropRole(s)
	}
}

func (s *DropRoleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitDropRole(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) DropRole() (localctx IDropRoleContext) {
	this := p
	_ = this

	localctx = NewDropRoleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1074, MySQLStatementParserRULE_dropRole)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7505)
		p.Match(MySQLStatementParserDROP)
	}
	{
		p.SetState(7506)
		p.Match(MySQLStatementParserROLE)
	}
	p.SetState(7509)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserIF {
		{
			p.SetState(7507)
			p.Match(MySQLStatementParserIF)
		}
		{
			p.SetState(7508)
			p.Match(MySQLStatementParserEXISTS)
		}

	}
	{
		p.SetState(7511)
		p.RoleName()
	}
	p.SetState(7516)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(7512)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(7513)
			p.RoleName()
		}

		p.SetState(7518)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IRenameUserContext is an interface to support dynamic dispatch.
type IRenameUserContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRenameUserContext differentiates from other interfaces.
	IsRenameUserContext()
}

type RenameUserContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRenameUserContext() *RenameUserContext {
	var p = new(RenameUserContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_renameUser
	return p
}

func (*RenameUserContext) IsRenameUserContext() {}

func NewRenameUserContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RenameUserContext {
	var p = new(RenameUserContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_renameUser

	return p
}

func (s *RenameUserContext) GetParser() antlr.Parser { return s.parser }

func (s *RenameUserContext) RENAME() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRENAME, 0)
}

func (s *RenameUserContext) USER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUSER, 0)
}

func (s *RenameUserContext) AllUserName() []IUserNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserNameContext)(nil)).Elem())
	var tst = make([]IUserNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserNameContext)
		}
	}

	return tst
}

func (s *RenameUserContext) UserName(i int) IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *RenameUserContext) AllTO() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserTO)
}

func (s *RenameUserContext) TO(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTO, i)
}

func (s *RenameUserContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *RenameUserContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *RenameUserContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RenameUserContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RenameUserContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterRenameUser(s)
	}
}

func (s *RenameUserContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitRenameUser(s)
	}
}

func (s *RenameUserContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitRenameUser(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) RenameUser() (localctx IRenameUserContext) {
	this := p
	_ = this

	localctx = NewRenameUserContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1076, MySQLStatementParserRULE_renameUser)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7519)
		p.Match(MySQLStatementParserRENAME)
	}
	{
		p.SetState(7520)
		p.Match(MySQLStatementParserUSER)
	}
	{
		p.SetState(7521)
		p.UserName()
	}
	{
		p.SetState(7522)
		p.Match(MySQLStatementParserTO)
	}
	{
		p.SetState(7523)
		p.UserName()
	}
	p.SetState(7531)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(7524)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(7525)
			p.UserName()
		}
		{
			p.SetState(7526)
			p.Match(MySQLStatementParserTO)
		}
		{
			p.SetState(7527)
			p.UserName()
		}

		p.SetState(7533)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISetDefaultRoleContext is an interface to support dynamic dispatch.
type ISetDefaultRoleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetDefaultRoleContext differentiates from other interfaces.
	IsSetDefaultRoleContext()
}

type SetDefaultRoleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetDefaultRoleContext() *SetDefaultRoleContext {
	var p = new(SetDefaultRoleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_setDefaultRole
	return p
}

func (*SetDefaultRoleContext) IsSetDefaultRoleContext() {}

func NewSetDefaultRoleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetDefaultRoleContext {
	var p = new(SetDefaultRoleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_setDefaultRole

	return p
}

func (s *SetDefaultRoleContext) GetParser() antlr.Parser { return s.parser }

func (s *SetDefaultRoleContext) SET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSET, 0)
}

func (s *SetDefaultRoleContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFAULT, 0)
}

func (s *SetDefaultRoleContext) ROLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROLE, 0)
}

func (s *SetDefaultRoleContext) TO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTO, 0)
}

func (s *SetDefaultRoleContext) AllUserName() []IUserNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserNameContext)(nil)).Elem())
	var tst = make([]IUserNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserNameContext)
		}
	}

	return tst
}

func (s *SetDefaultRoleContext) UserName(i int) IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *SetDefaultRoleContext) NONE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNONE, 0)
}

func (s *SetDefaultRoleContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALL, 0)
}

func (s *SetDefaultRoleContext) AllRoleName() []IRoleNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRoleNameContext)(nil)).Elem())
	var tst = make([]IRoleNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRoleNameContext)
		}
	}

	return tst
}

func (s *SetDefaultRoleContext) RoleName(i int) IRoleNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoleNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRoleNameContext)
}

func (s *SetDefaultRoleContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *SetDefaultRoleContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *SetDefaultRoleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetDefaultRoleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetDefaultRoleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSetDefaultRole(s)
	}
}

func (s *SetDefaultRoleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSetDefaultRole(s)
	}
}

func (s *SetDefaultRoleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSetDefaultRole(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SetDefaultRole() (localctx ISetDefaultRoleContext) {
	this := p
	_ = this

	localctx = NewSetDefaultRoleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1078, MySQLStatementParserRULE_setDefaultRole)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7534)
		p.Match(MySQLStatementParserSET)
	}
	{
		p.SetState(7535)
		p.Match(MySQLStatementParserDEFAULT)
	}
	{
		p.SetState(7536)
		p.Match(MySQLStatementParserROLE)
	}
	p.SetState(7547)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 991, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(7537)
			p.Match(MySQLStatementParserNONE)
		}

	case 2:
		{
			p.SetState(7538)
			p.Match(MySQLStatementParserALL)
		}

	case 3:
		{
			p.SetState(7539)
			p.RoleName()
		}
		p.SetState(7544)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySQLStatementParserCOMMA_ {
			{
				p.SetState(7540)
				p.Match(MySQLStatementParserCOMMA_)
			}
			{
				p.SetState(7541)
				p.RoleName()
			}

			p.SetState(7546)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(7549)
		p.Match(MySQLStatementParserTO)
	}
	{
		p.SetState(7550)
		p.UserName()
	}
	p.SetState(7555)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(7551)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(7552)
			p.UserName()
		}

		p.SetState(7557)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISetRoleContext is an interface to support dynamic dispatch.
type ISetRoleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetRoleContext differentiates from other interfaces.
	IsSetRoleContext()
}

type SetRoleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetRoleContext() *SetRoleContext {
	var p = new(SetRoleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_setRole
	return p
}

func (*SetRoleContext) IsSetRoleContext() {}

func NewSetRoleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetRoleContext {
	var p = new(SetRoleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_setRole

	return p
}

func (s *SetRoleContext) GetParser() antlr.Parser { return s.parser }

func (s *SetRoleContext) SET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSET, 0)
}

func (s *SetRoleContext) ROLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROLE, 0)
}

func (s *SetRoleContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFAULT, 0)
}

func (s *SetRoleContext) NONE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNONE, 0)
}

func (s *SetRoleContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALL, 0)
}

func (s *SetRoleContext) EXCEPT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXCEPT, 0)
}

func (s *SetRoleContext) Roles() IRolesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRolesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRolesContext)
}

func (s *SetRoleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetRoleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetRoleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSetRole(s)
	}
}

func (s *SetRoleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSetRole(s)
	}
}

func (s *SetRoleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSetRole(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SetRole() (localctx ISetRoleContext) {
	this := p
	_ = this

	localctx = NewSetRoleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1080, MySQLStatementParserRULE_setRole)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7558)
		p.Match(MySQLStatementParserSET)
	}
	{
		p.SetState(7559)
		p.Match(MySQLStatementParserROLE)
	}
	p.SetState(7567)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 993, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(7560)
			p.Match(MySQLStatementParserDEFAULT)
		}

	case 2:
		{
			p.SetState(7561)
			p.Match(MySQLStatementParserNONE)
		}

	case 3:
		{
			p.SetState(7562)
			p.Match(MySQLStatementParserALL)
		}

	case 4:
		{
			p.SetState(7563)
			p.Match(MySQLStatementParserALL)
		}
		{
			p.SetState(7564)
			p.Match(MySQLStatementParserEXCEPT)
		}
		{
			p.SetState(7565)
			p.Roles()
		}

	case 5:
		{
			p.SetState(7566)
			p.Roles()
		}

	}

	return localctx
}

// ISetPasswordContext is an interface to support dynamic dispatch.
type ISetPasswordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetPasswordContext differentiates from other interfaces.
	IsSetPasswordContext()
}

type SetPasswordContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetPasswordContext() *SetPasswordContext {
	var p = new(SetPasswordContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_setPassword
	return p
}

func (*SetPasswordContext) IsSetPasswordContext() {}

func NewSetPasswordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetPasswordContext {
	var p = new(SetPasswordContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_setPassword

	return p
}

func (s *SetPasswordContext) GetParser() antlr.Parser { return s.parser }

func (s *SetPasswordContext) SET() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSET, 0)
}

func (s *SetPasswordContext) AllPASSWORD() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserPASSWORD)
}

func (s *SetPasswordContext) PASSWORD(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPASSWORD, i)
}

func (s *SetPasswordContext) AuthOption() IAuthOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAuthOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAuthOptionContext)
}

func (s *SetPasswordContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFOR, 0)
}

func (s *SetPasswordContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *SetPasswordContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLACE, 0)
}

func (s *SetPasswordContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *SetPasswordContext) RETAIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRETAIN, 0)
}

func (s *SetPasswordContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCURRENT, 0)
}

func (s *SetPasswordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetPasswordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetPasswordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterSetPassword(s)
	}
}

func (s *SetPasswordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitSetPassword(s)
	}
}

func (s *SetPasswordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitSetPassword(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) SetPassword() (localctx ISetPasswordContext) {
	this := p
	_ = this

	localctx = NewSetPasswordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1082, MySQLStatementParserRULE_setPassword)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7569)
		p.Match(MySQLStatementParserSET)
	}
	{
		p.SetState(7570)
		p.Match(MySQLStatementParserPASSWORD)
	}
	p.SetState(7573)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserFOR {
		{
			p.SetState(7571)
			p.Match(MySQLStatementParserFOR)
		}
		{
			p.SetState(7572)
			p.UserName()
		}

	}
	{
		p.SetState(7575)
		p.AuthOption()
	}
	p.SetState(7578)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserREPLACE {
		{
			p.SetState(7576)
			p.Match(MySQLStatementParserREPLACE)
		}
		{
			p.SetState(7577)
			p.String_()
		}

	}
	p.SetState(7583)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserRETAIN {
		{
			p.SetState(7580)
			p.Match(MySQLStatementParserRETAIN)
		}
		{
			p.SetState(7581)
			p.Match(MySQLStatementParserCURRENT)
		}
		{
			p.SetState(7582)
			p.Match(MySQLStatementParserPASSWORD)
		}

	}

	return localctx
}

// IAuthOptionContext is an interface to support dynamic dispatch.
type IAuthOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAuthOptionContext differentiates from other interfaces.
	IsAuthOptionContext()
}

type AuthOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAuthOptionContext() *AuthOptionContext {
	var p = new(AuthOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_authOption
	return p
}

func (*AuthOptionContext) IsAuthOptionContext() {}

func NewAuthOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AuthOptionContext {
	var p = new(AuthOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_authOption

	return p
}

func (s *AuthOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *AuthOptionContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *AuthOptionContext) StringLiterals() IStringLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralsContext)
}

func (s *AuthOptionContext) TO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTO, 0)
}

func (s *AuthOptionContext) RANDOM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRANDOM, 0)
}

func (s *AuthOptionContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPASSWORD, 0)
}

func (s *AuthOptionContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *AuthOptionContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *AuthOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AuthOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AuthOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterAuthOption(s)
	}
}

func (s *AuthOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitAuthOption(s)
	}
}

func (s *AuthOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitAuthOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) AuthOption() (localctx IAuthOptionContext) {
	this := p
	_ = this

	localctx = NewAuthOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1084, MySQLStatementParserRULE_authOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7595)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 997, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7585)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7586)
			p.StringLiterals()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7587)
			p.Match(MySQLStatementParserTO)
		}
		{
			p.SetState(7588)
			p.Match(MySQLStatementParserRANDOM)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7589)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7590)
			p.Match(MySQLStatementParserPASSWORD)
		}
		{
			p.SetState(7591)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(7592)
			p.StringLiterals()
		}
		{
			p.SetState(7593)
			p.Match(MySQLStatementParserRP_)
		}

	}

	return localctx
}

// IWithGrantOptionContext is an interface to support dynamic dispatch.
type IWithGrantOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWithGrantOptionContext differentiates from other interfaces.
	IsWithGrantOptionContext()
}

type WithGrantOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWithGrantOptionContext() *WithGrantOptionContext {
	var p = new(WithGrantOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_withGrantOption
	return p
}

func (*WithGrantOptionContext) IsWithGrantOptionContext() {}

func NewWithGrantOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WithGrantOptionContext {
	var p = new(WithGrantOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_withGrantOption

	return p
}

func (s *WithGrantOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *WithGrantOptionContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWITH, 0)
}

func (s *WithGrantOptionContext) GRANT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGRANT, 0)
}

func (s *WithGrantOptionContext) OPTION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOPTION, 0)
}

func (s *WithGrantOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WithGrantOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WithGrantOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterWithGrantOption(s)
	}
}

func (s *WithGrantOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitWithGrantOption(s)
	}
}

func (s *WithGrantOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitWithGrantOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) WithGrantOption() (localctx IWithGrantOptionContext) {
	this := p
	_ = this

	localctx = NewWithGrantOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1086, MySQLStatementParserRULE_withGrantOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7597)
		p.Match(MySQLStatementParserWITH)
	}
	{
		p.SetState(7598)
		p.Match(MySQLStatementParserGRANT)
	}
	{
		p.SetState(7599)
		p.Match(MySQLStatementParserOPTION)
	}

	return localctx
}

// IUserOrRolesContext is an interface to support dynamic dispatch.
type IUserOrRolesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUserOrRolesContext differentiates from other interfaces.
	IsUserOrRolesContext()
}

type UserOrRolesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserOrRolesContext() *UserOrRolesContext {
	var p = new(UserOrRolesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_userOrRoles
	return p
}

func (*UserOrRolesContext) IsUserOrRolesContext() {}

func NewUserOrRolesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserOrRolesContext {
	var p = new(UserOrRolesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_userOrRoles

	return p
}

func (s *UserOrRolesContext) GetParser() antlr.Parser { return s.parser }

func (s *UserOrRolesContext) AllUserOrRole() []IUserOrRoleContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserOrRoleContext)(nil)).Elem())
	var tst = make([]IUserOrRoleContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserOrRoleContext)
		}
	}

	return tst
}

func (s *UserOrRolesContext) UserOrRole(i int) IUserOrRoleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserOrRoleContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserOrRoleContext)
}

func (s *UserOrRolesContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *UserOrRolesContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *UserOrRolesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserOrRolesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserOrRolesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterUserOrRoles(s)
	}
}

func (s *UserOrRolesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitUserOrRoles(s)
	}
}

func (s *UserOrRolesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitUserOrRoles(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) UserOrRoles() (localctx IUserOrRolesContext) {
	this := p
	_ = this

	localctx = NewUserOrRolesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1088, MySQLStatementParserRULE_userOrRoles)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7601)
		p.UserOrRole()
	}
	p.SetState(7606)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(7602)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(7603)
			p.UserOrRole()
		}

		p.SetState(7608)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IRolesContext is an interface to support dynamic dispatch.
type IRolesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRolesContext differentiates from other interfaces.
	IsRolesContext()
}

type RolesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRolesContext() *RolesContext {
	var p = new(RolesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_roles
	return p
}

func (*RolesContext) IsRolesContext() {}

func NewRolesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RolesContext {
	var p = new(RolesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_roles

	return p
}

func (s *RolesContext) GetParser() antlr.Parser { return s.parser }

func (s *RolesContext) AllRoleName() []IRoleNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRoleNameContext)(nil)).Elem())
	var tst = make([]IRoleNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRoleNameContext)
		}
	}

	return tst
}

func (s *RolesContext) RoleName(i int) IRoleNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoleNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRoleNameContext)
}

func (s *RolesContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *RolesContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *RolesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RolesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RolesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterRoles(s)
	}
}

func (s *RolesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitRoles(s)
	}
}

func (s *RolesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitRoles(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Roles() (localctx IRolesContext) {
	this := p
	_ = this

	localctx = NewRolesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1090, MySQLStatementParserRULE_roles)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7609)
		p.RoleName()
	}
	p.SetState(7614)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(7610)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(7611)
			p.RoleName()
		}

		p.SetState(7616)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IGrantAsContext is an interface to support dynamic dispatch.
type IGrantAsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGrantAsContext differentiates from other interfaces.
	IsGrantAsContext()
}

type GrantAsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrantAsContext() *GrantAsContext {
	var p = new(GrantAsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_grantAs
	return p
}

func (*GrantAsContext) IsGrantAsContext() {}

func NewGrantAsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GrantAsContext {
	var p = new(GrantAsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_grantAs

	return p
}

func (s *GrantAsContext) GetParser() antlr.Parser { return s.parser }

func (s *GrantAsContext) AS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAS, 0)
}

func (s *GrantAsContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *GrantAsContext) WithRoles() IWithRolesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWithRolesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWithRolesContext)
}

func (s *GrantAsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GrantAsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GrantAsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterGrantAs(s)
	}
}

func (s *GrantAsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitGrantAs(s)
	}
}

func (s *GrantAsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitGrantAs(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) GrantAs() (localctx IGrantAsContext) {
	this := p
	_ = this

	localctx = NewGrantAsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1092, MySQLStatementParserRULE_grantAs)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7617)
		p.Match(MySQLStatementParserAS)
	}
	{
		p.SetState(7618)
		p.UserName()
	}
	p.SetState(7620)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserWITH {
		{
			p.SetState(7619)
			p.WithRoles()
		}

	}

	return localctx
}

// IWithRolesContext is an interface to support dynamic dispatch.
type IWithRolesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWithRolesContext differentiates from other interfaces.
	IsWithRolesContext()
}

type WithRolesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWithRolesContext() *WithRolesContext {
	var p = new(WithRolesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_withRoles
	return p
}

func (*WithRolesContext) IsWithRolesContext() {}

func NewWithRolesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WithRolesContext {
	var p = new(WithRolesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_withRoles

	return p
}

func (s *WithRolesContext) GetParser() antlr.Parser { return s.parser }

func (s *WithRolesContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWITH, 0)
}

func (s *WithRolesContext) ROLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserROLE, 0)
}

func (s *WithRolesContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFAULT, 0)
}

func (s *WithRolesContext) NONE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNONE, 0)
}

func (s *WithRolesContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserALL, 0)
}

func (s *WithRolesContext) EXCEPT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEXCEPT, 0)
}

func (s *WithRolesContext) Roles() IRolesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRolesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRolesContext)
}

func (s *WithRolesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WithRolesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WithRolesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterWithRoles(s)
	}
}

func (s *WithRolesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitWithRoles(s)
	}
}

func (s *WithRolesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitWithRoles(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) WithRoles() (localctx IWithRolesContext) {
	this := p
	_ = this

	localctx = NewWithRolesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1094, MySQLStatementParserRULE_withRoles)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7622)
		p.Match(MySQLStatementParserWITH)
	}
	{
		p.SetState(7623)
		p.Match(MySQLStatementParserROLE)
	}
	p.SetState(7631)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1001, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(7624)
			p.Match(MySQLStatementParserDEFAULT)
		}

	case 2:
		{
			p.SetState(7625)
			p.Match(MySQLStatementParserNONE)
		}

	case 3:
		{
			p.SetState(7626)
			p.Match(MySQLStatementParserALL)
		}

	case 4:
		{
			p.SetState(7627)
			p.Match(MySQLStatementParserALL)
		}
		{
			p.SetState(7628)
			p.Match(MySQLStatementParserEXCEPT)
		}
		{
			p.SetState(7629)
			p.Roles()
		}

	case 5:
		{
			p.SetState(7630)
			p.Roles()
		}

	}

	return localctx
}

// IUserAuthOptionContext is an interface to support dynamic dispatch.
type IUserAuthOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUserAuthOptionContext differentiates from other interfaces.
	IsUserAuthOptionContext()
}

type UserAuthOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserAuthOptionContext() *UserAuthOptionContext {
	var p = new(UserAuthOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_userAuthOption
	return p
}

func (*UserAuthOptionContext) IsUserAuthOptionContext() {}

func NewUserAuthOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserAuthOptionContext {
	var p = new(UserAuthOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_userAuthOption

	return p
}

func (s *UserAuthOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *UserAuthOptionContext) IdentifiedBy() IIdentifiedByContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifiedByContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifiedByContext)
}

func (s *UserAuthOptionContext) IdentifiedWith() IIdentifiedWithContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifiedWithContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifiedWithContext)
}

func (s *UserAuthOptionContext) DISCARD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDISCARD, 0)
}

func (s *UserAuthOptionContext) OLD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOLD, 0)
}

func (s *UserAuthOptionContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPASSWORD, 0)
}

func (s *UserAuthOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserAuthOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserAuthOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterUserAuthOption(s)
	}
}

func (s *UserAuthOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitUserAuthOption(s)
	}
}

func (s *UserAuthOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitUserAuthOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) UserAuthOption() (localctx IUserAuthOptionContext) {
	this := p
	_ = this

	localctx = NewUserAuthOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1096, MySQLStatementParserRULE_userAuthOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7638)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1002, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7633)
			p.IdentifiedBy()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7634)
			p.IdentifiedWith()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7635)
			p.Match(MySQLStatementParserDISCARD)
		}
		{
			p.SetState(7636)
			p.Match(MySQLStatementParserOLD)
		}
		{
			p.SetState(7637)
			p.Match(MySQLStatementParserPASSWORD)
		}

	}

	return localctx
}

// IIdentifiedByContext is an interface to support dynamic dispatch.
type IIdentifiedByContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifiedByContext differentiates from other interfaces.
	IsIdentifiedByContext()
}

type IdentifiedByContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifiedByContext() *IdentifiedByContext {
	var p = new(IdentifiedByContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_identifiedBy
	return p
}

func (*IdentifiedByContext) IsIdentifiedByContext() {}

func NewIdentifiedByContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifiedByContext {
	var p = new(IdentifiedByContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_identifiedBy

	return p
}

func (s *IdentifiedByContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifiedByContext) IDENTIFIED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIDENTIFIED, 0)
}

func (s *IdentifiedByContext) BY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBY, 0)
}

func (s *IdentifiedByContext) AllString_() []IString_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IString_Context)(nil)).Elem())
	var tst = make([]IString_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IString_Context)
		}
	}

	return tst
}

func (s *IdentifiedByContext) String_(i int) IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *IdentifiedByContext) RANDOM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRANDOM, 0)
}

func (s *IdentifiedByContext) AllPASSWORD() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserPASSWORD)
}

func (s *IdentifiedByContext) PASSWORD(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPASSWORD, i)
}

func (s *IdentifiedByContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLACE, 0)
}

func (s *IdentifiedByContext) RETAIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRETAIN, 0)
}

func (s *IdentifiedByContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCURRENT, 0)
}

func (s *IdentifiedByContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifiedByContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifiedByContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterIdentifiedBy(s)
	}
}

func (s *IdentifiedByContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitIdentifiedBy(s)
	}
}

func (s *IdentifiedByContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitIdentifiedBy(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) IdentifiedBy() (localctx IIdentifiedByContext) {
	this := p
	_ = this

	localctx = NewIdentifiedByContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1098, MySQLStatementParserRULE_identifiedBy)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7640)
		p.Match(MySQLStatementParserIDENTIFIED)
	}
	{
		p.SetState(7641)
		p.Match(MySQLStatementParserBY)
	}
	p.SetState(7645)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserSINGLE_QUOTED_TEXT, MySQLStatementParserDOUBLE_QUOTED_TEXT:
		{
			p.SetState(7642)
			p.String_()
		}

	case MySQLStatementParserRANDOM:
		{
			p.SetState(7643)
			p.Match(MySQLStatementParserRANDOM)
		}
		{
			p.SetState(7644)
			p.Match(MySQLStatementParserPASSWORD)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(7649)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserREPLACE {
		{
			p.SetState(7647)
			p.Match(MySQLStatementParserREPLACE)
		}
		{
			p.SetState(7648)
			p.String_()
		}

	}
	p.SetState(7654)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserRETAIN {
		{
			p.SetState(7651)
			p.Match(MySQLStatementParserRETAIN)
		}
		{
			p.SetState(7652)
			p.Match(MySQLStatementParserCURRENT)
		}
		{
			p.SetState(7653)
			p.Match(MySQLStatementParserPASSWORD)
		}

	}

	return localctx
}

// IIdentifiedWithContext is an interface to support dynamic dispatch.
type IIdentifiedWithContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifiedWithContext differentiates from other interfaces.
	IsIdentifiedWithContext()
}

type IdentifiedWithContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifiedWithContext() *IdentifiedWithContext {
	var p = new(IdentifiedWithContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_identifiedWith
	return p
}

func (*IdentifiedWithContext) IsIdentifiedWithContext() {}

func NewIdentifiedWithContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifiedWithContext {
	var p = new(IdentifiedWithContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_identifiedWith

	return p
}

func (s *IdentifiedWithContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifiedWithContext) IDENTIFIED() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIDENTIFIED, 0)
}

func (s *IdentifiedWithContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserWITH, 0)
}

func (s *IdentifiedWithContext) PluginName() IPluginNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPluginNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPluginNameContext)
}

func (s *IdentifiedWithContext) BY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBY, 0)
}

func (s *IdentifiedWithContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *IdentifiedWithContext) RANDOM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRANDOM, 0)
}

func (s *IdentifiedWithContext) AllPASSWORD() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserPASSWORD)
}

func (s *IdentifiedWithContext) PASSWORD(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPASSWORD, i)
}

func (s *IdentifiedWithContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLACE, 0)
}

func (s *IdentifiedWithContext) StringLiterals() IStringLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralsContext)
}

func (s *IdentifiedWithContext) RETAIN() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRETAIN, 0)
}

func (s *IdentifiedWithContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCURRENT, 0)
}

func (s *IdentifiedWithContext) AS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserAS, 0)
}

func (s *IdentifiedWithContext) TextStringHash() ITextStringHashContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITextStringHashContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITextStringHashContext)
}

func (s *IdentifiedWithContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifiedWithContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifiedWithContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterIdentifiedWith(s)
	}
}

func (s *IdentifiedWithContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitIdentifiedWith(s)
	}
}

func (s *IdentifiedWithContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitIdentifiedWith(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) IdentifiedWith() (localctx IIdentifiedWithContext) {
	this := p
	_ = this

	localctx = NewIdentifiedWithContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1100, MySQLStatementParserRULE_identifiedWith)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7687)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1010, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7656)
			p.Match(MySQLStatementParserIDENTIFIED)
		}
		{
			p.SetState(7657)
			p.Match(MySQLStatementParserWITH)
		}
		{
			p.SetState(7658)
			p.PluginName()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7659)
			p.Match(MySQLStatementParserIDENTIFIED)
		}
		{
			p.SetState(7660)
			p.Match(MySQLStatementParserWITH)
		}
		{
			p.SetState(7661)
			p.PluginName()
		}
		{
			p.SetState(7662)
			p.Match(MySQLStatementParserBY)
		}
		p.SetState(7666)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySQLStatementParserSINGLE_QUOTED_TEXT, MySQLStatementParserDOUBLE_QUOTED_TEXT:
			{
				p.SetState(7663)
				p.String_()
			}

		case MySQLStatementParserRANDOM:
			{
				p.SetState(7664)
				p.Match(MySQLStatementParserRANDOM)
			}
			{
				p.SetState(7665)
				p.Match(MySQLStatementParserPASSWORD)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(7670)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserREPLACE {
			{
				p.SetState(7668)
				p.Match(MySQLStatementParserREPLACE)
			}
			{
				p.SetState(7669)
				p.StringLiterals()
			}

		}
		p.SetState(7675)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserRETAIN {
			{
				p.SetState(7672)
				p.Match(MySQLStatementParserRETAIN)
			}
			{
				p.SetState(7673)
				p.Match(MySQLStatementParserCURRENT)
			}
			{
				p.SetState(7674)
				p.Match(MySQLStatementParserPASSWORD)
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7677)
			p.Match(MySQLStatementParserIDENTIFIED)
		}
		{
			p.SetState(7678)
			p.Match(MySQLStatementParserWITH)
		}
		{
			p.SetState(7679)
			p.PluginName()
		}
		{
			p.SetState(7680)
			p.Match(MySQLStatementParserAS)
		}
		{
			p.SetState(7681)
			p.TextStringHash()
		}
		p.SetState(7685)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserRETAIN {
			{
				p.SetState(7682)
				p.Match(MySQLStatementParserRETAIN)
			}
			{
				p.SetState(7683)
				p.Match(MySQLStatementParserCURRENT)
			}
			{
				p.SetState(7684)
				p.Match(MySQLStatementParserPASSWORD)
			}

		}

	}

	return localctx
}

// IConnectOptionContext is an interface to support dynamic dispatch.
type IConnectOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConnectOptionContext differentiates from other interfaces.
	IsConnectOptionContext()
}

type ConnectOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConnectOptionContext() *ConnectOptionContext {
	var p = new(ConnectOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_connectOption
	return p
}

func (*ConnectOptionContext) IsConnectOptionContext() {}

func NewConnectOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConnectOptionContext {
	var p = new(ConnectOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_connectOption

	return p
}

func (s *ConnectOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConnectOptionContext) MAX_QUERIES_PER_HOUR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMAX_QUERIES_PER_HOUR, 0)
}

func (s *ConnectOptionContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *ConnectOptionContext) MAX_UPDATES_PER_HOUR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMAX_UPDATES_PER_HOUR, 0)
}

func (s *ConnectOptionContext) MAX_CONNECTIONS_PER_HOUR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR, 0)
}

func (s *ConnectOptionContext) MAX_USER_CONNECTIONS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMAX_USER_CONNECTIONS, 0)
}

func (s *ConnectOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConnectOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConnectOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterConnectOption(s)
	}
}

func (s *ConnectOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitConnectOption(s)
	}
}

func (s *ConnectOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitConnectOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ConnectOption() (localctx IConnectOptionContext) {
	this := p
	_ = this

	localctx = NewConnectOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1102, MySQLStatementParserRULE_connectOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7697)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserMAX_QUERIES_PER_HOUR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7689)
			p.Match(MySQLStatementParserMAX_QUERIES_PER_HOUR)
		}
		{
			p.SetState(7690)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case MySQLStatementParserMAX_UPDATES_PER_HOUR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7691)
			p.Match(MySQLStatementParserMAX_UPDATES_PER_HOUR)
		}
		{
			p.SetState(7692)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case MySQLStatementParserMAX_CONNECTIONS_PER_HOUR:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7693)
			p.Match(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR)
		}
		{
			p.SetState(7694)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case MySQLStatementParserMAX_USER_CONNECTIONS:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7695)
			p.Match(MySQLStatementParserMAX_USER_CONNECTIONS)
		}
		{
			p.SetState(7696)
			p.Match(MySQLStatementParserNUMBER_)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITlsOptionContext is an interface to support dynamic dispatch.
type ITlsOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTlsOptionContext differentiates from other interfaces.
	IsTlsOptionContext()
}

type TlsOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTlsOptionContext() *TlsOptionContext {
	var p = new(TlsOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_tlsOption
	return p
}

func (*TlsOptionContext) IsTlsOptionContext() {}

func NewTlsOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TlsOptionContext {
	var p = new(TlsOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_tlsOption

	return p
}

func (s *TlsOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *TlsOptionContext) CIPHER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCIPHER, 0)
}

func (s *TlsOptionContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *TlsOptionContext) ISSUER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserISSUER, 0)
}

func (s *TlsOptionContext) SUBJECT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSUBJECT, 0)
}

func (s *TlsOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TlsOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TlsOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterTlsOption(s)
	}
}

func (s *TlsOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitTlsOption(s)
	}
}

func (s *TlsOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitTlsOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) TlsOption() (localctx ITlsOptionContext) {
	this := p
	_ = this

	localctx = NewTlsOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1104, MySQLStatementParserRULE_tlsOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7705)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserCIPHER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7699)
			p.Match(MySQLStatementParserCIPHER)
		}
		{
			p.SetState(7700)
			p.String_()
		}

	case MySQLStatementParserISSUER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7701)
			p.Match(MySQLStatementParserISSUER)
		}
		{
			p.SetState(7702)
			p.String_()
		}

	case MySQLStatementParserSUBJECT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7703)
			p.Match(MySQLStatementParserSUBJECT)
		}
		{
			p.SetState(7704)
			p.String_()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUserFuncAuthOptionContext is an interface to support dynamic dispatch.
type IUserFuncAuthOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUserFuncAuthOptionContext differentiates from other interfaces.
	IsUserFuncAuthOptionContext()
}

type UserFuncAuthOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserFuncAuthOptionContext() *UserFuncAuthOptionContext {
	var p = new(UserFuncAuthOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_userFuncAuthOption
	return p
}

func (*UserFuncAuthOptionContext) IsUserFuncAuthOptionContext() {}

func NewUserFuncAuthOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserFuncAuthOptionContext {
	var p = new(UserFuncAuthOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_userFuncAuthOption

	return p
}

func (s *UserFuncAuthOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *UserFuncAuthOptionContext) IdentifiedBy() IIdentifiedByContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifiedByContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifiedByContext)
}

func (s *UserFuncAuthOptionContext) DISCARD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDISCARD, 0)
}

func (s *UserFuncAuthOptionContext) OLD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserOLD, 0)
}

func (s *UserFuncAuthOptionContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPASSWORD, 0)
}

func (s *UserFuncAuthOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserFuncAuthOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserFuncAuthOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterUserFuncAuthOption(s)
	}
}

func (s *UserFuncAuthOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitUserFuncAuthOption(s)
	}
}

func (s *UserFuncAuthOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitUserFuncAuthOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) UserFuncAuthOption() (localctx IUserFuncAuthOptionContext) {
	this := p
	_ = this

	localctx = NewUserFuncAuthOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1106, MySQLStatementParserRULE_userFuncAuthOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7711)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserIDENTIFIED:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7707)
			p.IdentifiedBy()
		}

	case MySQLStatementParserDISCARD:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7708)
			p.Match(MySQLStatementParserDISCARD)
		}
		{
			p.SetState(7709)
			p.Match(MySQLStatementParserOLD)
		}
		{
			p.SetState(7710)
			p.Match(MySQLStatementParserPASSWORD)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IChangeContext is an interface to support dynamic dispatch.
type IChangeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChangeContext differentiates from other interfaces.
	IsChangeContext()
}

type ChangeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChangeContext() *ChangeContext {
	var p = new(ChangeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_change
	return p
}

func (*ChangeContext) IsChangeContext() {}

func NewChangeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChangeContext {
	var p = new(ChangeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_change

	return p
}

func (s *ChangeContext) GetParser() antlr.Parser { return s.parser }

func (s *ChangeContext) ChangeMasterTo() IChangeMasterToContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChangeMasterToContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChangeMasterToContext)
}

func (s *ChangeContext) ChangeReplicationFilter() IChangeReplicationFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChangeReplicationFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChangeReplicationFilterContext)
}

func (s *ChangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChangeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChangeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterChange(s)
	}
}

func (s *ChangeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitChange(s)
	}
}

func (s *ChangeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitChange(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) Change() (localctx IChangeContext) {
	this := p
	_ = this

	localctx = NewChangeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1108, MySQLStatementParserRULE_change)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7715)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1014, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7713)
			p.ChangeMasterTo()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7714)
			p.ChangeReplicationFilter()
		}

	}

	return localctx
}

// IChangeMasterToContext is an interface to support dynamic dispatch.
type IChangeMasterToContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChangeMasterToContext differentiates from other interfaces.
	IsChangeMasterToContext()
}

type ChangeMasterToContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChangeMasterToContext() *ChangeMasterToContext {
	var p = new(ChangeMasterToContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_changeMasterTo
	return p
}

func (*ChangeMasterToContext) IsChangeMasterToContext() {}

func NewChangeMasterToContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChangeMasterToContext {
	var p = new(ChangeMasterToContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_changeMasterTo

	return p
}

func (s *ChangeMasterToContext) GetParser() antlr.Parser { return s.parser }

func (s *ChangeMasterToContext) CHANGE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHANGE, 0)
}

func (s *ChangeMasterToContext) MASTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER, 0)
}

func (s *ChangeMasterToContext) TO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTO, 0)
}

func (s *ChangeMasterToContext) MasterDefs() IMasterDefsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMasterDefsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMasterDefsContext)
}

func (s *ChangeMasterToContext) ChannelOption() IChannelOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChannelOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChannelOptionContext)
}

func (s *ChangeMasterToContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChangeMasterToContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChangeMasterToContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterChangeMasterTo(s)
	}
}

func (s *ChangeMasterToContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitChangeMasterTo(s)
	}
}

func (s *ChangeMasterToContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitChangeMasterTo(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ChangeMasterTo() (localctx IChangeMasterToContext) {
	this := p
	_ = this

	localctx = NewChangeMasterToContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1110, MySQLStatementParserRULE_changeMasterTo)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7717)
		p.Match(MySQLStatementParserCHANGE)
	}
	{
		p.SetState(7718)
		p.Match(MySQLStatementParserMASTER)
	}
	{
		p.SetState(7719)
		p.Match(MySQLStatementParserTO)
	}
	{
		p.SetState(7720)
		p.MasterDefs()
	}
	p.SetState(7722)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserFOR {
		{
			p.SetState(7721)
			p.ChannelOption()
		}

	}

	return localctx
}

// IChangeReplicationFilterContext is an interface to support dynamic dispatch.
type IChangeReplicationFilterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChangeReplicationFilterContext differentiates from other interfaces.
	IsChangeReplicationFilterContext()
}

type ChangeReplicationFilterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChangeReplicationFilterContext() *ChangeReplicationFilterContext {
	var p = new(ChangeReplicationFilterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_changeReplicationFilter
	return p
}

func (*ChangeReplicationFilterContext) IsChangeReplicationFilterContext() {}

func NewChangeReplicationFilterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChangeReplicationFilterContext {
	var p = new(ChangeReplicationFilterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_changeReplicationFilter

	return p
}

func (s *ChangeReplicationFilterContext) GetParser() antlr.Parser { return s.parser }

func (s *ChangeReplicationFilterContext) CHANGE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCHANGE, 0)
}

func (s *ChangeReplicationFilterContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLICATION, 0)
}

func (s *ChangeReplicationFilterContext) FILTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserFILTER, 0)
}

func (s *ChangeReplicationFilterContext) FilterDefs() IFilterDefsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFilterDefsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFilterDefsContext)
}

func (s *ChangeReplicationFilterContext) ChannelOption() IChannelOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChannelOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChannelOptionContext)
}

func (s *ChangeReplicationFilterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChangeReplicationFilterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChangeReplicationFilterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterChangeReplicationFilter(s)
	}
}

func (s *ChangeReplicationFilterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitChangeReplicationFilter(s)
	}
}

func (s *ChangeReplicationFilterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitChangeReplicationFilter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ChangeReplicationFilter() (localctx IChangeReplicationFilterContext) {
	this := p
	_ = this

	localctx = NewChangeReplicationFilterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1112, MySQLStatementParserRULE_changeReplicationFilter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7724)
		p.Match(MySQLStatementParserCHANGE)
	}
	{
		p.SetState(7725)
		p.Match(MySQLStatementParserREPLICATION)
	}
	{
		p.SetState(7726)
		p.Match(MySQLStatementParserFILTER)
	}
	{
		p.SetState(7727)
		p.FilterDefs()
	}
	p.SetState(7729)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserFOR {
		{
			p.SetState(7728)
			p.ChannelOption()
		}

	}

	return localctx
}

// IStartSlaveContext is an interface to support dynamic dispatch.
type IStartSlaveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStartSlaveContext differentiates from other interfaces.
	IsStartSlaveContext()
}

type StartSlaveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStartSlaveContext() *StartSlaveContext {
	var p = new(StartSlaveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_startSlave
	return p
}

func (*StartSlaveContext) IsStartSlaveContext() {}

func NewStartSlaveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StartSlaveContext {
	var p = new(StartSlaveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_startSlave

	return p
}

func (s *StartSlaveContext) GetParser() antlr.Parser { return s.parser }

func (s *StartSlaveContext) START() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTART, 0)
}

func (s *StartSlaveContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSLAVE, 0)
}

func (s *StartSlaveContext) ConnectionOptions() IConnectionOptionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConnectionOptionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConnectionOptionsContext)
}

func (s *StartSlaveContext) ThreadTypes() IThreadTypesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThreadTypesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThreadTypesContext)
}

func (s *StartSlaveContext) UtilOption() IUtilOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUtilOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUtilOptionContext)
}

func (s *StartSlaveContext) ChannelOption() IChannelOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChannelOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChannelOptionContext)
}

func (s *StartSlaveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StartSlaveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StartSlaveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStartSlave(s)
	}
}

func (s *StartSlaveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStartSlave(s)
	}
}

func (s *StartSlaveContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStartSlave(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) StartSlave() (localctx IStartSlaveContext) {
	this := p
	_ = this

	localctx = NewStartSlaveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1114, MySQLStatementParserRULE_startSlave)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7731)
		p.Match(MySQLStatementParserSTART)
	}
	{
		p.SetState(7732)
		p.Match(MySQLStatementParserSLAVE)
	}
	p.SetState(7734)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserRELAY_THREAD || _la == MySQLStatementParserSQL_THREAD {
		{
			p.SetState(7733)
			p.ThreadTypes()
		}

	}
	p.SetState(7737)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserUNTIL {
		{
			p.SetState(7736)
			p.UtilOption()
		}

	}
	{
		p.SetState(7739)
		p.ConnectionOptions()
	}
	p.SetState(7741)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserFOR {
		{
			p.SetState(7740)
			p.ChannelOption()
		}

	}

	return localctx
}

// IStopSlaveContext is an interface to support dynamic dispatch.
type IStopSlaveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStopSlaveContext differentiates from other interfaces.
	IsStopSlaveContext()
}

type StopSlaveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStopSlaveContext() *StopSlaveContext {
	var p = new(StopSlaveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_stopSlave
	return p
}

func (*StopSlaveContext) IsStopSlaveContext() {}

func NewStopSlaveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StopSlaveContext {
	var p = new(StopSlaveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_stopSlave

	return p
}

func (s *StopSlaveContext) GetParser() antlr.Parser { return s.parser }

func (s *StopSlaveContext) STOP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTOP, 0)
}

func (s *StopSlaveContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSLAVE, 0)
}

func (s *StopSlaveContext) ThreadTypes() IThreadTypesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThreadTypesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThreadTypesContext)
}

func (s *StopSlaveContext) AllChannelOption() []IChannelOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IChannelOptionContext)(nil)).Elem())
	var tst = make([]IChannelOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IChannelOptionContext)
		}
	}

	return tst
}

func (s *StopSlaveContext) ChannelOption(i int) IChannelOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChannelOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IChannelOptionContext)
}

func (s *StopSlaveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StopSlaveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StopSlaveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStopSlave(s)
	}
}

func (s *StopSlaveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStopSlave(s)
	}
}

func (s *StopSlaveContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStopSlave(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) StopSlave() (localctx IStopSlaveContext) {
	this := p
	_ = this

	localctx = NewStopSlaveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1116, MySQLStatementParserRULE_stopSlave)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7743)
		p.Match(MySQLStatementParserSTOP)
	}
	{
		p.SetState(7744)
		p.Match(MySQLStatementParserSLAVE)
	}
	{
		p.SetState(7745)
		p.ThreadTypes()
	}
	p.SetState(7749)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserFOR {
		{
			p.SetState(7746)
			p.ChannelOption()
		}

		p.SetState(7751)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IGroupReplicationContext is an interface to support dynamic dispatch.
type IGroupReplicationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroupReplicationContext differentiates from other interfaces.
	IsGroupReplicationContext()
}

type GroupReplicationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupReplicationContext() *GroupReplicationContext {
	var p = new(GroupReplicationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_groupReplication
	return p
}

func (*GroupReplicationContext) IsGroupReplicationContext() {}

func NewGroupReplicationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupReplicationContext {
	var p = new(GroupReplicationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_groupReplication

	return p
}

func (s *GroupReplicationContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupReplicationContext) StartGroupReplication() IStartGroupReplicationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStartGroupReplicationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStartGroupReplicationContext)
}

func (s *GroupReplicationContext) StopGroupReplication() IStopGroupReplicationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStopGroupReplicationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStopGroupReplicationContext)
}

func (s *GroupReplicationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupReplicationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupReplicationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterGroupReplication(s)
	}
}

func (s *GroupReplicationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitGroupReplication(s)
	}
}

func (s *GroupReplicationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitGroupReplication(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) GroupReplication() (localctx IGroupReplicationContext) {
	this := p
	_ = this

	localctx = NewGroupReplicationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1118, MySQLStatementParserRULE_groupReplication)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7754)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserSTART:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7752)
			p.StartGroupReplication()
		}

	case MySQLStatementParserSTOP:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7753)
			p.StopGroupReplication()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IStartGroupReplicationContext is an interface to support dynamic dispatch.
type IStartGroupReplicationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStartGroupReplicationContext differentiates from other interfaces.
	IsStartGroupReplicationContext()
}

type StartGroupReplicationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStartGroupReplicationContext() *StartGroupReplicationContext {
	var p = new(StartGroupReplicationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_startGroupReplication
	return p
}

func (*StartGroupReplicationContext) IsStartGroupReplicationContext() {}

func NewStartGroupReplicationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StartGroupReplicationContext {
	var p = new(StartGroupReplicationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_startGroupReplication

	return p
}

func (s *StartGroupReplicationContext) GetParser() antlr.Parser { return s.parser }

func (s *StartGroupReplicationContext) START() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTART, 0)
}

func (s *StartGroupReplicationContext) GROUP_REPLICATION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGROUP_REPLICATION, 0)
}

func (s *StartGroupReplicationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StartGroupReplicationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StartGroupReplicationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStartGroupReplication(s)
	}
}

func (s *StartGroupReplicationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStartGroupReplication(s)
	}
}

func (s *StartGroupReplicationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStartGroupReplication(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) StartGroupReplication() (localctx IStartGroupReplicationContext) {
	this := p
	_ = this

	localctx = NewStartGroupReplicationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1120, MySQLStatementParserRULE_startGroupReplication)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7756)
		p.Match(MySQLStatementParserSTART)
	}
	{
		p.SetState(7757)
		p.Match(MySQLStatementParserGROUP_REPLICATION)
	}

	return localctx
}

// IStopGroupReplicationContext is an interface to support dynamic dispatch.
type IStopGroupReplicationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStopGroupReplicationContext differentiates from other interfaces.
	IsStopGroupReplicationContext()
}

type StopGroupReplicationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStopGroupReplicationContext() *StopGroupReplicationContext {
	var p = new(StopGroupReplicationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_stopGroupReplication
	return p
}

func (*StopGroupReplicationContext) IsStopGroupReplicationContext() {}

func NewStopGroupReplicationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StopGroupReplicationContext {
	var p = new(StopGroupReplicationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_stopGroupReplication

	return p
}

func (s *StopGroupReplicationContext) GetParser() antlr.Parser { return s.parser }

func (s *StopGroupReplicationContext) STOP() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSTOP, 0)
}

func (s *StopGroupReplicationContext) GROUP_REPLICATION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGROUP_REPLICATION, 0)
}

func (s *StopGroupReplicationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StopGroupReplicationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StopGroupReplicationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterStopGroupReplication(s)
	}
}

func (s *StopGroupReplicationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitStopGroupReplication(s)
	}
}

func (s *StopGroupReplicationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitStopGroupReplication(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) StopGroupReplication() (localctx IStopGroupReplicationContext) {
	this := p
	_ = this

	localctx = NewStopGroupReplicationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1122, MySQLStatementParserRULE_stopGroupReplication)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7759)
		p.Match(MySQLStatementParserSTOP)
	}
	{
		p.SetState(7760)
		p.Match(MySQLStatementParserGROUP_REPLICATION)
	}

	return localctx
}

// IPurgeBinaryLogContext is an interface to support dynamic dispatch.
type IPurgeBinaryLogContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPurgeBinaryLogContext differentiates from other interfaces.
	IsPurgeBinaryLogContext()
}

type PurgeBinaryLogContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPurgeBinaryLogContext() *PurgeBinaryLogContext {
	var p = new(PurgeBinaryLogContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_purgeBinaryLog
	return p
}

func (*PurgeBinaryLogContext) IsPurgeBinaryLogContext() {}

func NewPurgeBinaryLogContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PurgeBinaryLogContext {
	var p = new(PurgeBinaryLogContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_purgeBinaryLog

	return p
}

func (s *PurgeBinaryLogContext) GetParser() antlr.Parser { return s.parser }

func (s *PurgeBinaryLogContext) PURGE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPURGE, 0)
}

func (s *PurgeBinaryLogContext) LOGS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLOGS, 0)
}

func (s *PurgeBinaryLogContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBINARY, 0)
}

func (s *PurgeBinaryLogContext) MASTER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER, 0)
}

func (s *PurgeBinaryLogContext) TO() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserTO, 0)
}

func (s *PurgeBinaryLogContext) LogName() ILogNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogNameContext)
}

func (s *PurgeBinaryLogContext) BEFORE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserBEFORE, 0)
}

func (s *PurgeBinaryLogContext) DatetimeExpr() IDatetimeExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatetimeExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatetimeExprContext)
}

func (s *PurgeBinaryLogContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PurgeBinaryLogContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PurgeBinaryLogContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterPurgeBinaryLog(s)
	}
}

func (s *PurgeBinaryLogContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitPurgeBinaryLog(s)
	}
}

func (s *PurgeBinaryLogContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitPurgeBinaryLog(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) PurgeBinaryLog() (localctx IPurgeBinaryLogContext) {
	this := p
	_ = this

	localctx = NewPurgeBinaryLogContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1124, MySQLStatementParserRULE_purgeBinaryLog)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7762)
		p.Match(MySQLStatementParserPURGE)
	}
	{
		p.SetState(7763)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserBINARY || _la == MySQLStatementParserMASTER) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(7764)
		p.Match(MySQLStatementParserLOGS)
	}
	p.SetState(7769)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserTO:
		{
			p.SetState(7765)
			p.Match(MySQLStatementParserTO)
		}
		{
			p.SetState(7766)
			p.LogName()
		}

	case MySQLStatementParserBEFORE:
		{
			p.SetState(7767)
			p.Match(MySQLStatementParserBEFORE)
		}
		{
			p.SetState(7768)
			p.DatetimeExpr()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IThreadTypesContext is an interface to support dynamic dispatch.
type IThreadTypesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsThreadTypesContext differentiates from other interfaces.
	IsThreadTypesContext()
}

type ThreadTypesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThreadTypesContext() *ThreadTypesContext {
	var p = new(ThreadTypesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_threadTypes
	return p
}

func (*ThreadTypesContext) IsThreadTypesContext() {}

func NewThreadTypesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ThreadTypesContext {
	var p = new(ThreadTypesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_threadTypes

	return p
}

func (s *ThreadTypesContext) GetParser() antlr.Parser { return s.parser }

func (s *ThreadTypesContext) AllThreadType() []IThreadTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IThreadTypeContext)(nil)).Elem())
	var tst = make([]IThreadTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IThreadTypeContext)
		}
	}

	return tst
}

func (s *ThreadTypesContext) ThreadType(i int) IThreadTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThreadTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IThreadTypeContext)
}

func (s *ThreadTypesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ThreadTypesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ThreadTypesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterThreadTypes(s)
	}
}

func (s *ThreadTypesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitThreadTypes(s)
	}
}

func (s *ThreadTypesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitThreadTypes(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ThreadTypes() (localctx IThreadTypesContext) {
	this := p
	_ = this

	localctx = NewThreadTypesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1126, MySQLStatementParserRULE_threadTypes)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7772)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == MySQLStatementParserRELAY_THREAD || _la == MySQLStatementParserSQL_THREAD {
		{
			p.SetState(7771)
			p.ThreadType()
		}

		p.SetState(7774)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IThreadTypeContext is an interface to support dynamic dispatch.
type IThreadTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsThreadTypeContext differentiates from other interfaces.
	IsThreadTypeContext()
}

type ThreadTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThreadTypeContext() *ThreadTypeContext {
	var p = new(ThreadTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_threadType
	return p
}

func (*ThreadTypeContext) IsThreadTypeContext() {}

func NewThreadTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ThreadTypeContext {
	var p = new(ThreadTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_threadType

	return p
}

func (s *ThreadTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ThreadTypeContext) RELAY_THREAD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRELAY_THREAD, 0)
}

func (s *ThreadTypeContext) SQL_THREAD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSQL_THREAD, 0)
}

func (s *ThreadTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ThreadTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ThreadTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterThreadType(s)
	}
}

func (s *ThreadTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitThreadType(s)
	}
}

func (s *ThreadTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitThreadType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ThreadType() (localctx IThreadTypeContext) {
	this := p
	_ = this

	localctx = NewThreadTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1128, MySQLStatementParserRULE_threadType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7776)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySQLStatementParserRELAY_THREAD || _la == MySQLStatementParserSQL_THREAD) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IUtilOptionContext is an interface to support dynamic dispatch.
type IUtilOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUtilOptionContext differentiates from other interfaces.
	IsUtilOptionContext()
}

type UtilOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUtilOptionContext() *UtilOptionContext {
	var p = new(UtilOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_utilOption
	return p
}

func (*UtilOptionContext) IsUtilOptionContext() {}

func NewUtilOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UtilOptionContext {
	var p = new(UtilOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_utilOption

	return p
}

func (s *UtilOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *UtilOptionContext) UNTIL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUNTIL, 0)
}

func (s *UtilOptionContext) AllEQ_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserEQ_)
}

func (s *UtilOptionContext) EQ_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, i)
}

func (s *UtilOptionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *UtilOptionContext) MASTER_LOG_FILE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_LOG_FILE, 0)
}

func (s *UtilOptionContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *UtilOptionContext) COMMA_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, 0)
}

func (s *UtilOptionContext) MASTER_LOG_POS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_LOG_POS, 0)
}

func (s *UtilOptionContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *UtilOptionContext) RELAY_LOG_FILE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRELAY_LOG_FILE, 0)
}

func (s *UtilOptionContext) RELAY_LOG_POS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRELAY_LOG_POS, 0)
}

func (s *UtilOptionContext) SQL_AFTER_MTS_GAPS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSQL_AFTER_MTS_GAPS, 0)
}

func (s *UtilOptionContext) SQL_BEFORE_GTIDS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSQL_BEFORE_GTIDS, 0)
}

func (s *UtilOptionContext) SQL_AFTER_GTIDS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserSQL_AFTER_GTIDS, 0)
}

func (s *UtilOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UtilOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UtilOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterUtilOption(s)
	}
}

func (s *UtilOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitUtilOption(s)
	}
}

func (s *UtilOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitUtilOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) UtilOption() (localctx IUtilOptionContext) {
	this := p
	_ = this

	localctx = NewUtilOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1130, MySQLStatementParserRULE_utilOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7778)
		p.Match(MySQLStatementParserUNTIL)
	}
	p.SetState(7799)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserSQL_AFTER_GTIDS, MySQLStatementParserSQL_BEFORE_GTIDS:
		{
			p.SetState(7779)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserSQL_AFTER_GTIDS || _la == MySQLStatementParserSQL_BEFORE_GTIDS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(7780)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7781)
			p.Identifier()
		}

	case MySQLStatementParserMASTER_LOG_FILE:
		{
			p.SetState(7782)
			p.Match(MySQLStatementParserMASTER_LOG_FILE)
		}
		{
			p.SetState(7783)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7784)
			p.String_()
		}
		{
			p.SetState(7785)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(7786)
			p.Match(MySQLStatementParserMASTER_LOG_POS)
		}
		{
			p.SetState(7787)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7788)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case MySQLStatementParserRELAY_LOG_FILE:
		{
			p.SetState(7790)
			p.Match(MySQLStatementParserRELAY_LOG_FILE)
		}
		{
			p.SetState(7791)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7792)
			p.String_()
		}
		{
			p.SetState(7793)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(7794)
			p.Match(MySQLStatementParserRELAY_LOG_POS)
		}
		{
			p.SetState(7795)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7796)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case MySQLStatementParserSQL_AFTER_MTS_GAPS:
		{
			p.SetState(7798)
			p.Match(MySQLStatementParserSQL_AFTER_MTS_GAPS)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConnectionOptionsContext is an interface to support dynamic dispatch.
type IConnectionOptionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConnectionOptionsContext differentiates from other interfaces.
	IsConnectionOptionsContext()
}

type ConnectionOptionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConnectionOptionsContext() *ConnectionOptionsContext {
	var p = new(ConnectionOptionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_connectionOptions
	return p
}

func (*ConnectionOptionsContext) IsConnectionOptionsContext() {}

func NewConnectionOptionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConnectionOptionsContext {
	var p = new(ConnectionOptionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_connectionOptions

	return p
}

func (s *ConnectionOptionsContext) GetParser() antlr.Parser { return s.parser }

func (s *ConnectionOptionsContext) USER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserUSER, 0)
}

func (s *ConnectionOptionsContext) AllEQ_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserEQ_)
}

func (s *ConnectionOptionsContext) EQ_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, i)
}

func (s *ConnectionOptionsContext) AllString_() []IString_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IString_Context)(nil)).Elem())
	var tst = make([]IString_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IString_Context)
		}
	}

	return tst
}

func (s *ConnectionOptionsContext) String_(i int) IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *ConnectionOptionsContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPASSWORD, 0)
}

func (s *ConnectionOptionsContext) DEFAULT_AUTH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserDEFAULT_AUTH, 0)
}

func (s *ConnectionOptionsContext) PLUGIN_DIR() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPLUGIN_DIR, 0)
}

func (s *ConnectionOptionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConnectionOptionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConnectionOptionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterConnectionOptions(s)
	}
}

func (s *ConnectionOptionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitConnectionOptions(s)
	}
}

func (s *ConnectionOptionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitConnectionOptions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) ConnectionOptions() (localctx IConnectionOptionsContext) {
	this := p
	_ = this

	localctx = NewConnectionOptionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1132, MySQLStatementParserRULE_connectionOptions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7804)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserUSER {
		{
			p.SetState(7801)
			p.Match(MySQLStatementParserUSER)
		}
		{
			p.SetState(7802)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7803)
			p.String_()
		}

	}
	p.SetState(7809)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserPASSWORD {
		{
			p.SetState(7806)
			p.Match(MySQLStatementParserPASSWORD)
		}
		{
			p.SetState(7807)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7808)
			p.String_()
		}

	}
	p.SetState(7814)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserDEFAULT_AUTH {
		{
			p.SetState(7811)
			p.Match(MySQLStatementParserDEFAULT_AUTH)
		}
		{
			p.SetState(7812)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7813)
			p.String_()
		}

	}
	p.SetState(7819)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySQLStatementParserPLUGIN_DIR {
		{
			p.SetState(7816)
			p.Match(MySQLStatementParserPLUGIN_DIR)
		}
		{
			p.SetState(7817)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7818)
			p.String_()
		}

	}

	return localctx
}

// IMasterDefsContext is an interface to support dynamic dispatch.
type IMasterDefsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMasterDefsContext differentiates from other interfaces.
	IsMasterDefsContext()
}

type MasterDefsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMasterDefsContext() *MasterDefsContext {
	var p = new(MasterDefsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_masterDefs
	return p
}

func (*MasterDefsContext) IsMasterDefsContext() {}

func NewMasterDefsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MasterDefsContext {
	var p = new(MasterDefsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_masterDefs

	return p
}

func (s *MasterDefsContext) GetParser() antlr.Parser { return s.parser }

func (s *MasterDefsContext) AllMasterDef() []IMasterDefContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMasterDefContext)(nil)).Elem())
	var tst = make([]IMasterDefContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMasterDefContext)
		}
	}

	return tst
}

func (s *MasterDefsContext) MasterDef(i int) IMasterDefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMasterDefContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMasterDefContext)
}

func (s *MasterDefsContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *MasterDefsContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *MasterDefsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MasterDefsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MasterDefsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterMasterDefs(s)
	}
}

func (s *MasterDefsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitMasterDefs(s)
	}
}

func (s *MasterDefsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitMasterDefs(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) MasterDefs() (localctx IMasterDefsContext) {
	this := p
	_ = this

	localctx = NewMasterDefsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1134, MySQLStatementParserRULE_masterDefs)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7821)
		p.MasterDef()
	}
	p.SetState(7826)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(7822)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(7823)
			p.MasterDef()
		}

		p.SetState(7828)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IMasterDefContext is an interface to support dynamic dispatch.
type IMasterDefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMasterDefContext differentiates from other interfaces.
	IsMasterDefContext()
}

type MasterDefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMasterDefContext() *MasterDefContext {
	var p = new(MasterDefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_masterDef
	return p
}

func (*MasterDefContext) IsMasterDefContext() {}

func NewMasterDefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MasterDefContext {
	var p = new(MasterDefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_masterDef

	return p
}

func (s *MasterDefContext) GetParser() antlr.Parser { return s.parser }

func (s *MasterDefContext) MASTER_BIND() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_BIND, 0)
}

func (s *MasterDefContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *MasterDefContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *MasterDefContext) MASTER_HOST() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_HOST, 0)
}

func (s *MasterDefContext) MASTER_USER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_USER, 0)
}

func (s *MasterDefContext) MASTER_PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_PASSWORD, 0)
}

func (s *MasterDefContext) MASTER_PORT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_PORT, 0)
}

func (s *MasterDefContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *MasterDefContext) PRIVILEGE_CHECKS_USER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserPRIVILEGE_CHECKS_USER, 0)
}

func (s *MasterDefContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserACCOUNT, 0)
}

func (s *MasterDefContext) NULL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNULL, 0)
}

func (s *MasterDefContext) REQUIRE_ROW_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREQUIRE_ROW_FORMAT, 0)
}

func (s *MasterDefContext) MASTER_CONNECT_RETRY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_CONNECT_RETRY, 0)
}

func (s *MasterDefContext) MASTER_RETRY_COUNT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_RETRY_COUNT, 0)
}

func (s *MasterDefContext) MASTER_DELAY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_DELAY, 0)
}

func (s *MasterDefContext) MASTER_HEARTBEAT_PERIOD() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_HEARTBEAT_PERIOD, 0)
}

func (s *MasterDefContext) MASTER_LOG_FILE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_LOG_FILE, 0)
}

func (s *MasterDefContext) MASTER_LOG_POS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_LOG_POS, 0)
}

func (s *MasterDefContext) MASTER_AUTO_POSITION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_AUTO_POSITION, 0)
}

func (s *MasterDefContext) RELAY_LOG_FILE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRELAY_LOG_FILE, 0)
}

func (s *MasterDefContext) RELAY_LOG_POS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRELAY_LOG_POS, 0)
}

func (s *MasterDefContext) MASTER_COMPRESSION_ALGORITHM() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM, 0)
}

func (s *MasterDefContext) MASTER_ZSTD_COMPRESSION_LEVEL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL, 0)
}

func (s *MasterDefContext) MASTER_SSL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_SSL, 0)
}

func (s *MasterDefContext) MASTER_SSL_CA() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_SSL_CA, 0)
}

func (s *MasterDefContext) MASTER_SSL_CAPATH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_SSL_CAPATH, 0)
}

func (s *MasterDefContext) MASTER_SSL_CERT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_SSL_CERT, 0)
}

func (s *MasterDefContext) MASTER_SSL_CRL() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_SSL_CRL, 0)
}

func (s *MasterDefContext) MASTER_SSL_CRLPATH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_SSL_CRLPATH, 0)
}

func (s *MasterDefContext) MASTER_SSL_KEY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_SSL_KEY, 0)
}

func (s *MasterDefContext) MASTER_SSL_CIPHER() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_SSL_CIPHER, 0)
}

func (s *MasterDefContext) MASTER_SSL_VERIFY_SERVER_CERT() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_SSL_VERIFY_SERVER_CERT, 0)
}

func (s *MasterDefContext) MASTER_TLS_VERSION() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_TLS_VERSION, 0)
}

func (s *MasterDefContext) MASTER_TLS_CIPHERSUITES() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_TLS_CIPHERSUITES, 0)
}

func (s *MasterDefContext) MASTER_PUBLIC_KEY_PATH() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserMASTER_PUBLIC_KEY_PATH, 0)
}

func (s *MasterDefContext) GET_MASTER_PUBLIC_KEY() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserGET_MASTER_PUBLIC_KEY, 0)
}

func (s *MasterDefContext) IGNORE_SERVER_IDS() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserIGNORE_SERVER_IDS, 0)
}

func (s *MasterDefContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *MasterDefContext) IgnoreServerIds() IIgnoreServerIdsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIgnoreServerIdsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIgnoreServerIdsContext)
}

func (s *MasterDefContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *MasterDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MasterDefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MasterDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterMasterDef(s)
	}
}

func (s *MasterDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitMasterDef(s)
	}
}

func (s *MasterDefContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitMasterDef(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) MasterDef() (localctx IMasterDefContext) {
	this := p
	_ = this

	localctx = NewMasterDefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1136, MySQLStatementParserRULE_masterDef)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7928)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserMASTER_BIND:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7829)
			p.Match(MySQLStatementParserMASTER_BIND)
		}
		{
			p.SetState(7830)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7831)
			p.String_()
		}

	case MySQLStatementParserMASTER_HOST:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7832)
			p.Match(MySQLStatementParserMASTER_HOST)
		}
		{
			p.SetState(7833)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7834)
			p.String_()
		}

	case MySQLStatementParserMASTER_USER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7835)
			p.Match(MySQLStatementParserMASTER_USER)
		}
		{
			p.SetState(7836)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7837)
			p.String_()
		}

	case MySQLStatementParserMASTER_PASSWORD:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7838)
			p.Match(MySQLStatementParserMASTER_PASSWORD)
		}
		{
			p.SetState(7839)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7840)
			p.String_()
		}

	case MySQLStatementParserMASTER_PORT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(7841)
			p.Match(MySQLStatementParserMASTER_PORT)
		}
		{
			p.SetState(7842)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7843)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case MySQLStatementParserPRIVILEGE_CHECKS_USER:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(7844)
			p.Match(MySQLStatementParserPRIVILEGE_CHECKS_USER)
		}
		{
			p.SetState(7845)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7846)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySQLStatementParserACCOUNT || _la == MySQLStatementParserNULL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case MySQLStatementParserREQUIRE_ROW_FORMAT:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(7847)
			p.Match(MySQLStatementParserREQUIRE_ROW_FORMAT)
		}
		{
			p.SetState(7848)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7849)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case MySQLStatementParserMASTER_CONNECT_RETRY:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(7850)
			p.Match(MySQLStatementParserMASTER_CONNECT_RETRY)
		}
		{
			p.SetState(7851)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7852)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case MySQLStatementParserMASTER_RETRY_COUNT:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(7853)
			p.Match(MySQLStatementParserMASTER_RETRY_COUNT)
		}
		{
			p.SetState(7854)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7855)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case MySQLStatementParserMASTER_DELAY:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(7856)
			p.Match(MySQLStatementParserMASTER_DELAY)
		}
		{
			p.SetState(7857)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7858)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case MySQLStatementParserMASTER_HEARTBEAT_PERIOD:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(7859)
			p.Match(MySQLStatementParserMASTER_HEARTBEAT_PERIOD)
		}
		{
			p.SetState(7860)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7861)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case MySQLStatementParserMASTER_LOG_FILE:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(7862)
			p.Match(MySQLStatementParserMASTER_LOG_FILE)
		}
		{
			p.SetState(7863)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7864)
			p.String_()
		}

	case MySQLStatementParserMASTER_LOG_POS:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(7865)
			p.Match(MySQLStatementParserMASTER_LOG_POS)
		}
		{
			p.SetState(7866)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7867)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case MySQLStatementParserMASTER_AUTO_POSITION:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(7868)
			p.Match(MySQLStatementParserMASTER_AUTO_POSITION)
		}
		{
			p.SetState(7869)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7870)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case MySQLStatementParserRELAY_LOG_FILE:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(7871)
			p.Match(MySQLStatementParserRELAY_LOG_FILE)
		}
		{
			p.SetState(7872)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7873)
			p.String_()
		}

	case MySQLStatementParserRELAY_LOG_POS:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(7874)
			p.Match(MySQLStatementParserRELAY_LOG_POS)
		}
		{
			p.SetState(7875)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7876)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case MySQLStatementParserMASTER_COMPRESSION_ALGORITHM:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(7877)
			p.Match(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM)
		}
		{
			p.SetState(7878)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7879)
			p.String_()
		}

	case MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(7880)
			p.Match(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL)
		}
		{
			p.SetState(7881)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7882)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case MySQLStatementParserMASTER_SSL:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(7883)
			p.Match(MySQLStatementParserMASTER_SSL)
		}
		{
			p.SetState(7884)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7885)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case MySQLStatementParserMASTER_SSL_CA:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(7886)
			p.Match(MySQLStatementParserMASTER_SSL_CA)
		}
		{
			p.SetState(7887)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7888)
			p.String_()
		}

	case MySQLStatementParserMASTER_SSL_CAPATH:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(7889)
			p.Match(MySQLStatementParserMASTER_SSL_CAPATH)
		}
		{
			p.SetState(7890)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7891)
			p.String_()
		}

	case MySQLStatementParserMASTER_SSL_CERT:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(7892)
			p.Match(MySQLStatementParserMASTER_SSL_CERT)
		}
		{
			p.SetState(7893)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7894)
			p.String_()
		}

	case MySQLStatementParserMASTER_SSL_CRL:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(7895)
			p.Match(MySQLStatementParserMASTER_SSL_CRL)
		}
		{
			p.SetState(7896)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7897)
			p.String_()
		}

	case MySQLStatementParserMASTER_SSL_CRLPATH:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(7898)
			p.Match(MySQLStatementParserMASTER_SSL_CRLPATH)
		}
		{
			p.SetState(7899)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7900)
			p.String_()
		}

	case MySQLStatementParserMASTER_SSL_KEY:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(7901)
			p.Match(MySQLStatementParserMASTER_SSL_KEY)
		}
		{
			p.SetState(7902)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7903)
			p.String_()
		}

	case MySQLStatementParserMASTER_SSL_CIPHER:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(7904)
			p.Match(MySQLStatementParserMASTER_SSL_CIPHER)
		}
		{
			p.SetState(7905)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7906)
			p.String_()
		}

	case MySQLStatementParserMASTER_SSL_VERIFY_SERVER_CERT:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(7907)
			p.Match(MySQLStatementParserMASTER_SSL_VERIFY_SERVER_CERT)
		}
		{
			p.SetState(7908)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7909)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case MySQLStatementParserMASTER_TLS_VERSION:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(7910)
			p.Match(MySQLStatementParserMASTER_TLS_VERSION)
		}
		{
			p.SetState(7911)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7912)
			p.String_()
		}

	case MySQLStatementParserMASTER_TLS_CIPHERSUITES:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(7913)
			p.Match(MySQLStatementParserMASTER_TLS_CIPHERSUITES)
		}
		{
			p.SetState(7914)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7915)
			p.String_()
		}

	case MySQLStatementParserMASTER_PUBLIC_KEY_PATH:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(7916)
			p.Match(MySQLStatementParserMASTER_PUBLIC_KEY_PATH)
		}
		{
			p.SetState(7917)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7918)
			p.String_()
		}

	case MySQLStatementParserGET_MASTER_PUBLIC_KEY:
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(7919)
			p.Match(MySQLStatementParserGET_MASTER_PUBLIC_KEY)
		}
		{
			p.SetState(7920)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7921)
			p.Match(MySQLStatementParserNUMBER_)
		}

	case MySQLStatementParserIGNORE_SERVER_IDS:
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(7922)
			p.Match(MySQLStatementParserIGNORE_SERVER_IDS)
		}
		{
			p.SetState(7923)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7924)
			p.Match(MySQLStatementParserLP_)
		}
		{
			p.SetState(7925)
			p.IgnoreServerIds()
		}
		{
			p.SetState(7926)
			p.Match(MySQLStatementParserRP_)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IIgnoreServerIdsContext is an interface to support dynamic dispatch.
type IIgnoreServerIdsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIgnoreServerIdsContext differentiates from other interfaces.
	IsIgnoreServerIdsContext()
}

type IgnoreServerIdsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIgnoreServerIdsContext() *IgnoreServerIdsContext {
	var p = new(IgnoreServerIdsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_ignoreServerIds
	return p
}

func (*IgnoreServerIdsContext) IsIgnoreServerIdsContext() {}

func NewIgnoreServerIdsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IgnoreServerIdsContext {
	var p = new(IgnoreServerIdsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_ignoreServerIds

	return p
}

func (s *IgnoreServerIdsContext) GetParser() antlr.Parser { return s.parser }

func (s *IgnoreServerIdsContext) AllIgnoreServerId() []IIgnoreServerIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIgnoreServerIdContext)(nil)).Elem())
	var tst = make([]IIgnoreServerIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIgnoreServerIdContext)
		}
	}

	return tst
}

func (s *IgnoreServerIdsContext) IgnoreServerId(i int) IIgnoreServerIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIgnoreServerIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIgnoreServerIdContext)
}

func (s *IgnoreServerIdsContext) COMMA_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, 0)
}

func (s *IgnoreServerIdsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IgnoreServerIdsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IgnoreServerIdsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterIgnoreServerIds(s)
	}
}

func (s *IgnoreServerIdsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitIgnoreServerIds(s)
	}
}

func (s *IgnoreServerIdsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitIgnoreServerIds(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) IgnoreServerIds() (localctx IIgnoreServerIdsContext) {
	this := p
	_ = this

	localctx = NewIgnoreServerIdsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1138, MySQLStatementParserRULE_ignoreServerIds)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7930)
		p.IgnoreServerId()
	}

	{
		p.SetState(7931)
		p.Match(MySQLStatementParserCOMMA_)
	}
	{
		p.SetState(7932)
		p.IgnoreServerId()
	}

	return localctx
}

// IIgnoreServerIdContext is an interface to support dynamic dispatch.
type IIgnoreServerIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIgnoreServerIdContext differentiates from other interfaces.
	IsIgnoreServerIdContext()
}

type IgnoreServerIdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIgnoreServerIdContext() *IgnoreServerIdContext {
	var p = new(IgnoreServerIdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_ignoreServerId
	return p
}

func (*IgnoreServerIdContext) IsIgnoreServerIdContext() {}

func NewIgnoreServerIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IgnoreServerIdContext {
	var p = new(IgnoreServerIdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_ignoreServerId

	return p
}

func (s *IgnoreServerIdContext) GetParser() antlr.Parser { return s.parser }

func (s *IgnoreServerIdContext) NUMBER_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserNUMBER_, 0)
}

func (s *IgnoreServerIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IgnoreServerIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IgnoreServerIdContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterIgnoreServerId(s)
	}
}

func (s *IgnoreServerIdContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitIgnoreServerId(s)
	}
}

func (s *IgnoreServerIdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitIgnoreServerId(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) IgnoreServerId() (localctx IIgnoreServerIdContext) {
	this := p
	_ = this

	localctx = NewIgnoreServerIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1140, MySQLStatementParserRULE_ignoreServerId)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7934)
		p.Match(MySQLStatementParserNUMBER_)
	}

	return localctx
}

// IFilterDefsContext is an interface to support dynamic dispatch.
type IFilterDefsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFilterDefsContext differentiates from other interfaces.
	IsFilterDefsContext()
}

type FilterDefsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFilterDefsContext() *FilterDefsContext {
	var p = new(FilterDefsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_filterDefs
	return p
}

func (*FilterDefsContext) IsFilterDefsContext() {}

func NewFilterDefsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FilterDefsContext {
	var p = new(FilterDefsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_filterDefs

	return p
}

func (s *FilterDefsContext) GetParser() antlr.Parser { return s.parser }

func (s *FilterDefsContext) AllFilterDef() []IFilterDefContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFilterDefContext)(nil)).Elem())
	var tst = make([]IFilterDefContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFilterDefContext)
		}
	}

	return tst
}

func (s *FilterDefsContext) FilterDef(i int) IFilterDefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFilterDefContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFilterDefContext)
}

func (s *FilterDefsContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *FilterDefsContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *FilterDefsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FilterDefsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FilterDefsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterFilterDefs(s)
	}
}

func (s *FilterDefsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitFilterDefs(s)
	}
}

func (s *FilterDefsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitFilterDefs(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) FilterDefs() (localctx IFilterDefsContext) {
	this := p
	_ = this

	localctx = NewFilterDefsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1142, MySQLStatementParserRULE_filterDefs)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7936)
		p.FilterDef()
	}
	p.SetState(7941)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(7937)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(7938)
			p.FilterDef()
		}

		p.SetState(7943)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IFilterDefContext is an interface to support dynamic dispatch.
type IFilterDefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFilterDefContext differentiates from other interfaces.
	IsFilterDefContext()
}

type FilterDefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFilterDefContext() *FilterDefContext {
	var p = new(FilterDefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_filterDef
	return p
}

func (*FilterDefContext) IsFilterDefContext() {}

func NewFilterDefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FilterDefContext {
	var p = new(FilterDefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_filterDef

	return p
}

func (s *FilterDefContext) GetParser() antlr.Parser { return s.parser }

func (s *FilterDefContext) REPLICATE_DO_DB() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLICATE_DO_DB, 0)
}

func (s *FilterDefContext) EQ_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserEQ_, 0)
}

func (s *FilterDefContext) LP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserLP_, 0)
}

func (s *FilterDefContext) RP_() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserRP_, 0)
}

func (s *FilterDefContext) SchemaNames() ISchemaNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemaNamesContext)
}

func (s *FilterDefContext) REPLICATE_IGNORE_DB() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLICATE_IGNORE_DB, 0)
}

func (s *FilterDefContext) REPLICATE_DO_TABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLICATE_DO_TABLE, 0)
}

func (s *FilterDefContext) TableList() ITableListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableListContext)
}

func (s *FilterDefContext) REPLICATE_IGNORE_TABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLICATE_IGNORE_TABLE, 0)
}

func (s *FilterDefContext) REPLICATE_WILD_DO_TABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLICATE_WILD_DO_TABLE, 0)
}

func (s *FilterDefContext) WildTables() IWildTablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWildTablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWildTablesContext)
}

func (s *FilterDefContext) REPLICATE_WILD_IGNORE_TABLE() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE, 0)
}

func (s *FilterDefContext) REPLICATE_REWRITE_DB() antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserREPLICATE_REWRITE_DB, 0)
}

func (s *FilterDefContext) SchemaPairs() ISchemaPairsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaPairsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemaPairsContext)
}

func (s *FilterDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FilterDefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FilterDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterFilterDef(s)
	}
}

func (s *FilterDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitFilterDef(s)
	}
}

func (s *FilterDefContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitFilterDef(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) FilterDef() (localctx IFilterDefContext) {
	this := p
	_ = this

	localctx = NewFilterDefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1144, MySQLStatementParserRULE_filterDef)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7993)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySQLStatementParserREPLICATE_DO_DB:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7944)
			p.Match(MySQLStatementParserREPLICATE_DO_DB)
		}
		{
			p.SetState(7945)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7946)
			p.Match(MySQLStatementParserLP_)
		}
		p.SetState(7948)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49))|(1<<(MySQLStatementParserGROUP_CONCAT-49))|(1<<(MySQLStatementParserCAST-49))|(1<<(MySQLStatementParserPOSITION-49))|(1<<(MySQLStatementParserSUBSTRING-49))|(1<<(MySQLStatementParserSUBSTR-49))|(1<<(MySQLStatementParserEXTRACT-49))|(1<<(MySQLStatementParserTRIM-49))|(1<<(MySQLStatementParserLAST_DAY-49))|(1<<(MySQLStatementParserTRADITIONAL-49))|(1<<(MySQLStatementParserTREE-49))|(1<<(MySQLStatementParserMYSQL_ADMIN-49))|(1<<(MySQLStatementParserINSTANT-49))|(1<<(MySQLStatementParserINPLACE-49))|(1<<(MySQLStatementParserCOPY-49))|(1<<(MySQLStatementParserUL_BINARY-49))|(1<<(MySQLStatementParserAUTOCOMMIT-49))|(1<<(MySQLStatementParserINNODB-49))|(1<<(MySQLStatementParserREDO_LOG-49))|(1<<(MySQLStatementParserACCOUNT-49))|(1<<(MySQLStatementParserACTION-49))|(1<<(MySQLStatementParserACTIVE-49))|(1<<(MySQLStatementParserADMIN-49))|(1<<(MySQLStatementParserAFTER-49))|(1<<(MySQLStatementParserAGAINST-49)))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(MySQLStatementParserAGGREGATE-81))|(1<<(MySQLStatementParserALGORITHM-81))|(1<<(MySQLStatementParserALWAYS-81))|(1<<(MySQLStatementParserANY-81))|(1<<(MySQLStatementParserARRAY-81))|(1<<(MySQLStatementParserASCII-81))|(1<<(MySQLStatementParserAT-81))|(1<<(MySQLStatementParserATTRIBUTE-81))|(1<<(MySQLStatementParserAUTOEXTEND_SIZE-81))|(1<<(MySQLStatementParserAUTO_INCREMENT-81))|(1<<(MySQLStatementParserAVG-81))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-81))|(1<<(MySQLStatementParserBACKUP-81))|(1<<(MySQLStatementParserBEGIN-81))|(1<<(MySQLStatementParserBINLOG-81))|(1<<(MySQLStatementParserBIT-81))|(1<<(MySQLStatementParserBLOCK-81))|(1<<(MySQLStatementParserBOOL-81))|(1<<(MySQLStatementParserBOOLEAN-81)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(MySQLStatementParserBTREE-114))|(1<<(MySQLStatementParserBUCKETS-114))|(1<<(MySQLStatementParserBYTE-114))|(1<<(MySQLStatementParserCACHE-114))|(1<<(MySQLStatementParserCASCADED-114))|(1<<(MySQLStatementParserCATALOG_NAME-114))|(1<<(MySQLStatementParserCHAIN-114))|(1<<(MySQLStatementParserCHANGED-114))|(1<<(MySQLStatementParserCHANNEL-114))|(1<<(MySQLStatementParserCHARSET-114))|(1<<(MySQLStatementParserCHECKSUM-114))|(1<<(MySQLStatementParserCIPHER-114))|(1<<(MySQLStatementParserCLASS_ORIGIN-114))|(1<<(MySQLStatementParserCLIENT-114))|(1<<(MySQLStatementParserCLONE-114))|(1<<(MySQLStatementParserCLOSE-114))|(1<<(MySQLStatementParserCOALESCE-114))|(1<<(MySQLStatementParserCODE-114))|(1<<(MySQLStatementParserCOLLATION-114))|(1<<(MySQLStatementParserCOLUMNS-114))|(1<<(MySQLStatementParserCOLUMN_FORMAT-114))|(1<<(MySQLStatementParserCOLUMN_NAME-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(MySQLStatementParserCOMMENT-146))|(1<<(MySQLStatementParserCOMMIT-146))|(1<<(MySQLStatementParserCOMMITTED-146))|(1<<(MySQLStatementParserCOMPACT-146))|(1<<(MySQLStatementParserCOMPLETION-146))|(1<<(MySQLStatementParserCOMPONENT-146))|(1<<(MySQLStatementParserCOMPRESSED-146))|(1<<(MySQLStatementParserCOMPRESSION-146))|(1<<(MySQLStatementParserCONCURRENT-146))|(1<<(MySQLStatementParserCONNECTION-146))|(1<<(MySQLStatementParserCONSISTENT-146))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-146))|(1<<(MySQLStatementParserCONSTRAINT_NAME-146))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-146))|(1<<(MySQLStatementParserCONTAINS-146))|(1<<(MySQLStatementParserCONTEXT-146))|(1<<(MySQLStatementParserCPU-146))|(1<<(MySQLStatementParserCURRENT-146))|(1<<(MySQLStatementParserCURSOR_NAME-146)))) != 0) || (((_la-178)&-(0x1f+1)) == 0 && ((1<<uint((_la-178)))&((1<<(MySQLStatementParserDATA-178))|(1<<(MySQLStatementParserDATAFILE-178))|(1<<(MySQLStatementParserDATE-178))|(1<<(MySQLStatementParserDATETIME-178))|(1<<(MySQLStatementParserDAY-178))|(1<<(MySQLStatementParserDEALLOCATE-178))|(1<<(MySQLStatementParserDEFAULT_AUTH-178))|(1<<(MySQLStatementParserDEFINER-178))|(1<<(MySQLStatementParserDEFINITION-178))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-178))|(1<<(MySQLStatementParserDESCRIPTION-178))|(1<<(MySQLStatementParserDIAGNOSTICS-178))|(1<<(MySQLStatementParserDIRECTORY-178))|(1<<(MySQLStatementParserDISABLE-178))|(1<<(MySQLStatementParserDISCARD-178))|(1<<(MySQLStatementParserDISK-178)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(MySQLStatementParserDO-213))|(1<<(MySQLStatementParserDUMPFILE-213))|(1<<(MySQLStatementParserDUPLICATE-213))|(1<<(MySQLStatementParserDYNAMIC-213))|(1<<(MySQLStatementParserENABLE-213))|(1<<(MySQLStatementParserENCRYPTION-213))|(1<<(MySQLStatementParserEND-213))|(1<<(MySQLStatementParserENDS-213))|(1<<(MySQLStatementParserENFORCED-213))|(1<<(MySQLStatementParserENGINE-213))|(1<<(MySQLStatementParserENGINES-213))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-213))|(1<<(MySQLStatementParserENUM-213))|(1<<(MySQLStatementParserERROR-213))|(1<<(MySQLStatementParserERRORS-213))|(1<<(MySQLStatementParserESCAPE-213))|(1<<(MySQLStatementParserEVENT-213))|(1<<(MySQLStatementParserEVENTS-213))|(1<<(MySQLStatementParserEVERY-213))|(1<<(MySQLStatementParserEXCHANGE-213))|(1<<(MySQLStatementParserEXCLUDE-213))|(1<<(MySQLStatementParserEXECUTE-213)))) != 0) || (((_la-247)&-(0x1f+1)) == 0 && ((1<<uint((_la-247)))&((1<<(MySQLStatementParserEXPANSION-247))|(1<<(MySQLStatementParserEXPIRE-247))|(1<<(MySQLStatementParserEXPORT-247))|(1<<(MySQLStatementParserEXTENDED-247))|(1<<(MySQLStatementParserEXTENT_SIZE-247))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-247))|(1<<(MySQLStatementParserFAST-247))|(1<<(MySQLStatementParserFAULTS-247))|(1<<(MySQLStatementParserFILE-247))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-247))|(1<<(MySQLStatementParserFILTER-247))|(1<<(MySQLStatementParserFIRST-247))|(1<<(MySQLStatementParserFIXED-247))|(1<<(MySQLStatementParserFLUSH-247))|(1<<(MySQLStatementParserFOLLOWING-247))|(1<<(MySQLStatementParserFOLLOWS-247))|(1<<(MySQLStatementParserFORMAT-247))|(1<<(MySQLStatementParserFOUND-247))|(1<<(MySQLStatementParserFULL-247)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(MySQLStatementParserGENERAL-279))|(1<<(MySQLStatementParserGEOMETRY-279))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-279))|(1<<(MySQLStatementParserGET_FORMAT-279))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-279))|(1<<(MySQLStatementParserGLOBAL-279))|(1<<(MySQLStatementParserGRANTS-279))|(1<<(MySQLStatementParserGROUP_REPLICATION-279))|(1<<(MySQLStatementParserHANDLER-279))|(1<<(MySQLStatementParserHASH-279))|(1<<(MySQLStatementParserHELP-279))|(1<<(MySQLStatementParserHISTOGRAM-279))|(1<<(MySQLStatementParserHISTORY-279))|(1<<(MySQLStatementParserHOST-279))|(1<<(MySQLStatementParserHOSTS-279))|(1<<(MySQLStatementParserHOUR-279))|(1<<(MySQLStatementParserIDENTIFIED-279))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-279))|(1<<(MySQLStatementParserIMPORT-279)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySQLStatementParserINACTIVE-312))|(1<<(MySQLStatementParserINDEXES-312))|(1<<(MySQLStatementParserINITIAL_SIZE-312))|(1<<(MySQLStatementParserINSERT_METHOD-312))|(1<<(MySQLStatementParserINSTALL-312))|(1<<(MySQLStatementParserINSTANCE-312))|(1<<(MySQLStatementParserINVISIBLE-312))|(1<<(MySQLStatementParserINVOKER-312))|(1<<(MySQLStatementParserIO-312))|(1<<(MySQLStatementParserIPC-312))|(1<<(MySQLStatementParserISOLATION-312))|(1<<(MySQLStatementParserISSUER-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySQLStatementParserJSON-344))|(1<<(MySQLStatementParserJSON_VALUE-344))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-344))|(1<<(MySQLStatementParserLANGUAGE-344))|(1<<(MySQLStatementParserLAST-344))|(1<<(MySQLStatementParserLAST_VALUE-344))|(1<<(MySQLStatementParserLEAVES-344))|(1<<(MySQLStatementParserLESS-344))|(1<<(MySQLStatementParserLEVEL-344))|(1<<(MySQLStatementParserLINESTRING-344))|(1<<(MySQLStatementParserLIST-344))|(1<<(MySQLStatementParserLOCAL-344))|(1<<(MySQLStatementParserLOCKED-344))|(1<<(MySQLStatementParserLOCKS-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySQLStatementParserLOGFILE-376))|(1<<(MySQLStatementParserLOGS-376))|(1<<(MySQLStatementParserMASTER-376))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-376))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-376))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-376))|(1<<(MySQLStatementParserMASTER_DELAY-376))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-376))|(1<<(MySQLStatementParserMASTER_HOST-376))|(1<<(MySQLStatementParserMASTER_LOG_FILE-376))|(1<<(MySQLStatementParserMASTER_LOG_POS-376))|(1<<(MySQLStatementParserMASTER_PASSWORD-376))|(1<<(MySQLStatementParserMASTER_PORT-376))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-376))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-376))|(1<<(MySQLStatementParserMASTER_SERVER_ID-376))|(1<<(MySQLStatementParserMASTER_SSL-376))|(1<<(MySQLStatementParserMASTER_SSL_CA-376))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_CERT-376))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-376))|(1<<(MySQLStatementParserMASTER_SSL_CRL-376))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_KEY-376))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySQLStatementParserMASTER_TLS_VERSION-408))|(1<<(MySQLStatementParserMASTER_USER-408))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-408))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_ROWS-408))|(1<<(MySQLStatementParserMAX_SIZE-408))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-408))|(1<<(MySQLStatementParserMEDIUM-408))|(1<<(MySQLStatementParserMEMBER-408))|(1<<(MySQLStatementParserMEMORY-408))|(1<<(MySQLStatementParserMERGE-408))|(1<<(MySQLStatementParserMESSAGE_TEXT-408))|(1<<(MySQLStatementParserMICROSECOND-408))|(1<<(MySQLStatementParserMIGRATE-408))|(1<<(MySQLStatementParserMINUTE-408))|(1<<(MySQLStatementParserMIN_ROWS-408))|(1<<(MySQLStatementParserMODE-408))|(1<<(MySQLStatementParserMODIFY-408))|(1<<(MySQLStatementParserMONTH-408))|(1<<(MySQLStatementParserMULTILINESTRING-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySQLStatementParserMULTIPOINT-440))|(1<<(MySQLStatementParserMULTIPOLYGON-440))|(1<<(MySQLStatementParserMUTEX-440))|(1<<(MySQLStatementParserMYSQL_ERRNO-440))|(1<<(MySQLStatementParserNAME-440))|(1<<(MySQLStatementParserNAMES-440))|(1<<(MySQLStatementParserNATIONAL-440))|(1<<(MySQLStatementParserNCHAR-440))|(1<<(MySQLStatementParserNDBCLUSTER-440))|(1<<(MySQLStatementParserNESTED-440))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-440))|(1<<(MySQLStatementParserNEVER-440))|(1<<(MySQLStatementParserNEW-440))|(1<<(MySQLStatementParserNEXT-440))|(1<<(MySQLStatementParserNO-440))|(1<<(MySQLStatementParserNODEGROUP-440))|(1<<(MySQLStatementParserNONE-440))|(1<<(MySQLStatementParserNOWAIT-440))|(1<<(MySQLStatementParserNO_WAIT-440))|(1<<(MySQLStatementParserNULLS-440))|(1<<(MySQLStatementParserNUMBER-440))|(1<<(MySQLStatementParserNVARCHAR-440))|(1<<(MySQLStatementParserOFF-440))|(1<<(MySQLStatementParserOFFSET-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySQLStatementParserOJ-472))|(1<<(MySQLStatementParserOLD-472))|(1<<(MySQLStatementParserONE-472))|(1<<(MySQLStatementParserONLY-472))|(1<<(MySQLStatementParserOPEN-472))|(1<<(MySQLStatementParserOPTIONAL-472))|(1<<(MySQLStatementParserOPTIONS-472))|(1<<(MySQLStatementParserORDINALITY-472))|(1<<(MySQLStatementParserORGANIZATION-472))|(1<<(MySQLStatementParserOTHERS-472))|(1<<(MySQLStatementParserOWNER-472))|(1<<(MySQLStatementParserPACK_KEYS-472))|(1<<(MySQLStatementParserPAGE-472))|(1<<(MySQLStatementParserPARSER-472))|(1<<(MySQLStatementParserPARTIAL-472))|(1<<(MySQLStatementParserPARTITIONING-472))|(1<<(MySQLStatementParserPARTITIONS-472))|(1<<(MySQLStatementParserPASSWORD-472))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-472))|(1<<(MySQLStatementParserPATH-472)))) != 0) || (((_la-505)&-(0x1f+1)) == 0 && ((1<<uint((_la-505)))&((1<<(MySQLStatementParserPERSIST-505))|(1<<(MySQLStatementParserPERSIST_ONLY-505))|(1<<(MySQLStatementParserPHASE-505))|(1<<(MySQLStatementParserPLUGIN-505))|(1<<(MySQLStatementParserPLUGINS-505))|(1<<(MySQLStatementParserPLUGIN_DIR-505))|(1<<(MySQLStatementParserPOINT-505))|(1<<(MySQLStatementParserPOLYGON-505))|(1<<(MySQLStatementParserPORT-505))|(1<<(MySQLStatementParserPRECEDES-505))|(1<<(MySQLStatementParserPRECEDING-505))|(1<<(MySQLStatementParserPREPARE-505))|(1<<(MySQLStatementParserPRESERVE-505))|(1<<(MySQLStatementParserPREV-505))|(1<<(MySQLStatementParserPRIVILEGES-505))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-505))|(1<<(MySQLStatementParserPROCESS-505))|(1<<(MySQLStatementParserPROCESSLIST-505))|(1<<(MySQLStatementParserPROFILE-505))|(1<<(MySQLStatementParserPROFILES-505))|(1<<(MySQLStatementParserPROXY-505))|(1<<(MySQLStatementParserQUARTER-505))|(1<<(MySQLStatementParserQUERY-505))|(1<<(MySQLStatementParserQUICK-505))|(1<<(MySQLStatementParserRANDOM-505)))) != 0) || (((_la-538)&-(0x1f+1)) == 0 && ((1<<uint((_la-538)))&((1<<(MySQLStatementParserREAD_ONLY-538))|(1<<(MySQLStatementParserREBUILD-538))|(1<<(MySQLStatementParserRECOVER-538))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-538))|(1<<(MySQLStatementParserREDUNDANT-538))|(1<<(MySQLStatementParserREFERENCE-538))|(1<<(MySQLStatementParserRELAY-538))|(1<<(MySQLStatementParserRELAYLOG-538))|(1<<(MySQLStatementParserRELAY_LOG_FILE-538))|(1<<(MySQLStatementParserRELAY_LOG_POS-538))|(1<<(MySQLStatementParserRELAY_THREAD-538))|(1<<(MySQLStatementParserRELOAD-538))|(1<<(MySQLStatementParserREMOVE-538))|(1<<(MySQLStatementParserREORGANIZE-538))|(1<<(MySQLStatementParserREPAIR-538))|(1<<(MySQLStatementParserREPEATABLE-538))|(1<<(MySQLStatementParserREPLICATE_DO_DB-538))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-538)))) != 0) || (((_la-570)&-(0x1f+1)) == 0 && ((1<<uint((_la-570)))&((1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-570))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-570))|(1<<(MySQLStatementParserREPLICATION-570))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-570))|(1<<(MySQLStatementParserRESET-570))|(1<<(MySQLStatementParserRESOURCE-570))|(1<<(MySQLStatementParserRESPECT-570))|(1<<(MySQLStatementParserRESTART-570))|(1<<(MySQLStatementParserRESTORE-570))|(1<<(MySQLStatementParserRESUME-570))|(1<<(MySQLStatementParserRETAIN-570))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-570))|(1<<(MySQLStatementParserRETURNING-570))|(1<<(MySQLStatementParserRETURNS-570))|(1<<(MySQLStatementParserREUSE-570))|(1<<(MySQLStatementParserREVERSE-570))|(1<<(MySQLStatementParserROLE-570))|(1<<(MySQLStatementParserROLLBACK-570))|(1<<(MySQLStatementParserROLLUP-570))|(1<<(MySQLStatementParserROTATE-570))|(1<<(MySQLStatementParserROUTINE-570))|(1<<(MySQLStatementParserROW_COUNT-570))|(1<<(MySQLStatementParserROW_FORMAT-570)))) != 0) || (((_la-603)&-(0x1f+1)) == 0 && ((1<<uint((_la-603)))&((1<<(MySQLStatementParserRTREE-603))|(1<<(MySQLStatementParserSAVEPOINT-603))|(1<<(MySQLStatementParserSCHEDULE-603))|(1<<(MySQLStatementParserSCHEMA_NAME-603))|(1<<(MySQLStatementParserSECOND-603))|(1<<(MySQLStatementParserSECONDARY-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-603))|(1<<(MySQLStatementParserSECONDARY_LOAD-603))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-603))|(1<<(MySQLStatementParserSECURITY-603))|(1<<(MySQLStatementParserSERIAL-603))|(1<<(MySQLStatementParserSERIALIZABLE-603))|(1<<(MySQLStatementParserSERVER-603))|(1<<(MySQLStatementParserSESSION-603))|(1<<(MySQLStatementParserSHARE-603))|(1<<(MySQLStatementParserSHUTDOWN-603))|(1<<(MySQLStatementParserSIGNED-603))|(1<<(MySQLStatementParserSIMPLE-603))|(1<<(MySQLStatementParserSLAVE-603))|(1<<(MySQLStatementParserSLOW-603)))) != 0) || (((_la-635)&-(0x1f+1)) == 0 && ((1<<uint((_la-635)))&((1<<(MySQLStatementParserSNAPSHOT-635))|(1<<(MySQLStatementParserSOCKET-635))|(1<<(MySQLStatementParserSONAME-635))|(1<<(MySQLStatementParserSOUNDS-635))|(1<<(MySQLStatementParserSOURCE-635))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-635))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-635))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-635))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-635))|(1<<(MySQLStatementParserSQL_NO_CACHE-635))|(1<<(MySQLStatementParserSQL_THREAD-635))|(1<<(MySQLStatementParserSRID-635))|(1<<(MySQLStatementParserSTACKED-635))|(1<<(MySQLStatementParserSTART-635))|(1<<(MySQLStatementParserSTARTS-635))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-635))|(1<<(MySQLStatementParserSTATS_PERSISTENT-635))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-635))|(1<<(MySQLStatementParserSTATUS-635))|(1<<(MySQLStatementParserSTOP-635))|(1<<(MySQLStatementParserSTORAGE-635)))) != 0) || (((_la-669)&-(0x1f+1)) == 0 && ((1<<uint((_la-669)))&((1<<(MySQLStatementParserSTREAM-669))|(1<<(MySQLStatementParserSTRING-669))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-669))|(1<<(MySQLStatementParserSUBJECT-669))|(1<<(MySQLStatementParserSUBPARTITION-669))|(1<<(MySQLStatementParserSUBPARTITIONS-669))|(1<<(MySQLStatementParserSUPER-669))|(1<<(MySQLStatementParserSUSPEND-669))|(1<<(MySQLStatementParserSWAPS-669))|(1<<(MySQLStatementParserSWITCHES-669))|(1<<(MySQLStatementParserTABLES-669))|(1<<(MySQLStatementParserTABLESPACE-669))|(1<<(MySQLStatementParserTABLE_CHECKSUM-669))|(1<<(MySQLStatementParserTABLE_NAME-669))|(1<<(MySQLStatementParserTEMPORARY-669))|(1<<(MySQLStatementParserTEMPTABLE-669))|(1<<(MySQLStatementParserTEXT-669))|(1<<(MySQLStatementParserTHAN-669))|(1<<(MySQLStatementParserTHREAD_PRIORITY-669))|(1<<(MySQLStatementParserTIES-669))|(1<<(MySQLStatementParserTIME-669))|(1<<(MySQLStatementParserTIMESTAMP-669))|(1<<(MySQLStatementParserTIMESTAMP_ADD-669))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-669))|(1<<(MySQLStatementParserTLS-669)))) != 0) || (((_la-703)&-(0x1f+1)) == 0 && ((1<<uint((_la-703)))&((1<<(MySQLStatementParserTRANSACTION-703))|(1<<(MySQLStatementParserTRIGGERS-703))|(1<<(MySQLStatementParserTRUNCATE-703))|(1<<(MySQLStatementParserTYPE-703))|(1<<(MySQLStatementParserTYPES-703))|(1<<(MySQLStatementParserUNBOUNDED-703))|(1<<(MySQLStatementParserUNCOMMITTED-703))|(1<<(MySQLStatementParserUNDEFINED-703))|(1<<(MySQLStatementParserUNDOFILE-703))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-703))|(1<<(MySQLStatementParserUNICODE-703))|(1<<(MySQLStatementParserUNINSTALL-703))|(1<<(MySQLStatementParserUNKNOWN-703))|(1<<(MySQLStatementParserUNTIL-703))|(1<<(MySQLStatementParserUPGRADE-703))|(1<<(MySQLStatementParserUSER-703))|(1<<(MySQLStatementParserUSER_RESOURCES-703))|(1<<(MySQLStatementParserUSE_FRM-703)))) != 0) || (((_la-735)&-(0x1f+1)) == 0 && ((1<<uint((_la-735)))&((1<<(MySQLStatementParserVALIDATION-735))|(1<<(MySQLStatementParserVALUE-735))|(1<<(MySQLStatementParserVARIABLES-735))|(1<<(MySQLStatementParserVCPU-735))|(1<<(MySQLStatementParserVIEW-735))|(1<<(MySQLStatementParserVISIBLE-735))|(1<<(MySQLStatementParserWAIT-735))|(1<<(MySQLStatementParserWARNINGS-735))|(1<<(MySQLStatementParserWEEK-735))|(1<<(MySQLStatementParserWEIGHT_STRING-735))|(1<<(MySQLStatementParserWITHOUT-735))|(1<<(MySQLStatementParserWORK-735))|(1<<(MySQLStatementParserWRAPPER-735))|(1<<(MySQLStatementParserX509-735))|(1<<(MySQLStatementParserXA-735))|(1<<(MySQLStatementParserXID-735))|(1<<(MySQLStatementParserXML-735))|(1<<(MySQLStatementParserYEAR-735)))) != 0) || _la == MySQLStatementParserIDENTIFIER_ || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
			{
				p.SetState(7947)
				p.SchemaNames()
			}

		}
		{
			p.SetState(7950)
			p.Match(MySQLStatementParserRP_)
		}

	case MySQLStatementParserREPLICATE_IGNORE_DB:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7951)
			p.Match(MySQLStatementParserREPLICATE_IGNORE_DB)
		}
		{
			p.SetState(7952)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7953)
			p.Match(MySQLStatementParserLP_)
		}
		p.SetState(7955)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49))|(1<<(MySQLStatementParserGROUP_CONCAT-49))|(1<<(MySQLStatementParserCAST-49))|(1<<(MySQLStatementParserPOSITION-49))|(1<<(MySQLStatementParserSUBSTRING-49))|(1<<(MySQLStatementParserSUBSTR-49))|(1<<(MySQLStatementParserEXTRACT-49))|(1<<(MySQLStatementParserTRIM-49))|(1<<(MySQLStatementParserLAST_DAY-49))|(1<<(MySQLStatementParserTRADITIONAL-49))|(1<<(MySQLStatementParserTREE-49))|(1<<(MySQLStatementParserMYSQL_ADMIN-49))|(1<<(MySQLStatementParserINSTANT-49))|(1<<(MySQLStatementParserINPLACE-49))|(1<<(MySQLStatementParserCOPY-49))|(1<<(MySQLStatementParserUL_BINARY-49))|(1<<(MySQLStatementParserAUTOCOMMIT-49))|(1<<(MySQLStatementParserINNODB-49))|(1<<(MySQLStatementParserREDO_LOG-49))|(1<<(MySQLStatementParserACCOUNT-49))|(1<<(MySQLStatementParserACTION-49))|(1<<(MySQLStatementParserACTIVE-49))|(1<<(MySQLStatementParserADMIN-49))|(1<<(MySQLStatementParserAFTER-49))|(1<<(MySQLStatementParserAGAINST-49)))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(MySQLStatementParserAGGREGATE-81))|(1<<(MySQLStatementParserALGORITHM-81))|(1<<(MySQLStatementParserALWAYS-81))|(1<<(MySQLStatementParserANY-81))|(1<<(MySQLStatementParserARRAY-81))|(1<<(MySQLStatementParserASCII-81))|(1<<(MySQLStatementParserAT-81))|(1<<(MySQLStatementParserATTRIBUTE-81))|(1<<(MySQLStatementParserAUTOEXTEND_SIZE-81))|(1<<(MySQLStatementParserAUTO_INCREMENT-81))|(1<<(MySQLStatementParserAVG-81))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-81))|(1<<(MySQLStatementParserBACKUP-81))|(1<<(MySQLStatementParserBEGIN-81))|(1<<(MySQLStatementParserBINLOG-81))|(1<<(MySQLStatementParserBIT-81))|(1<<(MySQLStatementParserBLOCK-81))|(1<<(MySQLStatementParserBOOL-81))|(1<<(MySQLStatementParserBOOLEAN-81)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(MySQLStatementParserBTREE-114))|(1<<(MySQLStatementParserBUCKETS-114))|(1<<(MySQLStatementParserBYTE-114))|(1<<(MySQLStatementParserCACHE-114))|(1<<(MySQLStatementParserCASCADED-114))|(1<<(MySQLStatementParserCATALOG_NAME-114))|(1<<(MySQLStatementParserCHAIN-114))|(1<<(MySQLStatementParserCHANGED-114))|(1<<(MySQLStatementParserCHANNEL-114))|(1<<(MySQLStatementParserCHARSET-114))|(1<<(MySQLStatementParserCHECKSUM-114))|(1<<(MySQLStatementParserCIPHER-114))|(1<<(MySQLStatementParserCLASS_ORIGIN-114))|(1<<(MySQLStatementParserCLIENT-114))|(1<<(MySQLStatementParserCLONE-114))|(1<<(MySQLStatementParserCLOSE-114))|(1<<(MySQLStatementParserCOALESCE-114))|(1<<(MySQLStatementParserCODE-114))|(1<<(MySQLStatementParserCOLLATION-114))|(1<<(MySQLStatementParserCOLUMNS-114))|(1<<(MySQLStatementParserCOLUMN_FORMAT-114))|(1<<(MySQLStatementParserCOLUMN_NAME-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(MySQLStatementParserCOMMENT-146))|(1<<(MySQLStatementParserCOMMIT-146))|(1<<(MySQLStatementParserCOMMITTED-146))|(1<<(MySQLStatementParserCOMPACT-146))|(1<<(MySQLStatementParserCOMPLETION-146))|(1<<(MySQLStatementParserCOMPONENT-146))|(1<<(MySQLStatementParserCOMPRESSED-146))|(1<<(MySQLStatementParserCOMPRESSION-146))|(1<<(MySQLStatementParserCONCURRENT-146))|(1<<(MySQLStatementParserCONNECTION-146))|(1<<(MySQLStatementParserCONSISTENT-146))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-146))|(1<<(MySQLStatementParserCONSTRAINT_NAME-146))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-146))|(1<<(MySQLStatementParserCONTAINS-146))|(1<<(MySQLStatementParserCONTEXT-146))|(1<<(MySQLStatementParserCPU-146))|(1<<(MySQLStatementParserCURRENT-146))|(1<<(MySQLStatementParserCURSOR_NAME-146)))) != 0) || (((_la-178)&-(0x1f+1)) == 0 && ((1<<uint((_la-178)))&((1<<(MySQLStatementParserDATA-178))|(1<<(MySQLStatementParserDATAFILE-178))|(1<<(MySQLStatementParserDATE-178))|(1<<(MySQLStatementParserDATETIME-178))|(1<<(MySQLStatementParserDAY-178))|(1<<(MySQLStatementParserDEALLOCATE-178))|(1<<(MySQLStatementParserDEFAULT_AUTH-178))|(1<<(MySQLStatementParserDEFINER-178))|(1<<(MySQLStatementParserDEFINITION-178))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-178))|(1<<(MySQLStatementParserDESCRIPTION-178))|(1<<(MySQLStatementParserDIAGNOSTICS-178))|(1<<(MySQLStatementParserDIRECTORY-178))|(1<<(MySQLStatementParserDISABLE-178))|(1<<(MySQLStatementParserDISCARD-178))|(1<<(MySQLStatementParserDISK-178)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(MySQLStatementParserDO-213))|(1<<(MySQLStatementParserDUMPFILE-213))|(1<<(MySQLStatementParserDUPLICATE-213))|(1<<(MySQLStatementParserDYNAMIC-213))|(1<<(MySQLStatementParserENABLE-213))|(1<<(MySQLStatementParserENCRYPTION-213))|(1<<(MySQLStatementParserEND-213))|(1<<(MySQLStatementParserENDS-213))|(1<<(MySQLStatementParserENFORCED-213))|(1<<(MySQLStatementParserENGINE-213))|(1<<(MySQLStatementParserENGINES-213))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-213))|(1<<(MySQLStatementParserENUM-213))|(1<<(MySQLStatementParserERROR-213))|(1<<(MySQLStatementParserERRORS-213))|(1<<(MySQLStatementParserESCAPE-213))|(1<<(MySQLStatementParserEVENT-213))|(1<<(MySQLStatementParserEVENTS-213))|(1<<(MySQLStatementParserEVERY-213))|(1<<(MySQLStatementParserEXCHANGE-213))|(1<<(MySQLStatementParserEXCLUDE-213))|(1<<(MySQLStatementParserEXECUTE-213)))) != 0) || (((_la-247)&-(0x1f+1)) == 0 && ((1<<uint((_la-247)))&((1<<(MySQLStatementParserEXPANSION-247))|(1<<(MySQLStatementParserEXPIRE-247))|(1<<(MySQLStatementParserEXPORT-247))|(1<<(MySQLStatementParserEXTENDED-247))|(1<<(MySQLStatementParserEXTENT_SIZE-247))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-247))|(1<<(MySQLStatementParserFAST-247))|(1<<(MySQLStatementParserFAULTS-247))|(1<<(MySQLStatementParserFILE-247))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-247))|(1<<(MySQLStatementParserFILTER-247))|(1<<(MySQLStatementParserFIRST-247))|(1<<(MySQLStatementParserFIXED-247))|(1<<(MySQLStatementParserFLUSH-247))|(1<<(MySQLStatementParserFOLLOWING-247))|(1<<(MySQLStatementParserFOLLOWS-247))|(1<<(MySQLStatementParserFORMAT-247))|(1<<(MySQLStatementParserFOUND-247))|(1<<(MySQLStatementParserFULL-247)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(MySQLStatementParserGENERAL-279))|(1<<(MySQLStatementParserGEOMETRY-279))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-279))|(1<<(MySQLStatementParserGET_FORMAT-279))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-279))|(1<<(MySQLStatementParserGLOBAL-279))|(1<<(MySQLStatementParserGRANTS-279))|(1<<(MySQLStatementParserGROUP_REPLICATION-279))|(1<<(MySQLStatementParserHANDLER-279))|(1<<(MySQLStatementParserHASH-279))|(1<<(MySQLStatementParserHELP-279))|(1<<(MySQLStatementParserHISTOGRAM-279))|(1<<(MySQLStatementParserHISTORY-279))|(1<<(MySQLStatementParserHOST-279))|(1<<(MySQLStatementParserHOSTS-279))|(1<<(MySQLStatementParserHOUR-279))|(1<<(MySQLStatementParserIDENTIFIED-279))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-279))|(1<<(MySQLStatementParserIMPORT-279)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySQLStatementParserINACTIVE-312))|(1<<(MySQLStatementParserINDEXES-312))|(1<<(MySQLStatementParserINITIAL_SIZE-312))|(1<<(MySQLStatementParserINSERT_METHOD-312))|(1<<(MySQLStatementParserINSTALL-312))|(1<<(MySQLStatementParserINSTANCE-312))|(1<<(MySQLStatementParserINVISIBLE-312))|(1<<(MySQLStatementParserINVOKER-312))|(1<<(MySQLStatementParserIO-312))|(1<<(MySQLStatementParserIPC-312))|(1<<(MySQLStatementParserISOLATION-312))|(1<<(MySQLStatementParserISSUER-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySQLStatementParserJSON-344))|(1<<(MySQLStatementParserJSON_VALUE-344))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-344))|(1<<(MySQLStatementParserLANGUAGE-344))|(1<<(MySQLStatementParserLAST-344))|(1<<(MySQLStatementParserLAST_VALUE-344))|(1<<(MySQLStatementParserLEAVES-344))|(1<<(MySQLStatementParserLESS-344))|(1<<(MySQLStatementParserLEVEL-344))|(1<<(MySQLStatementParserLINESTRING-344))|(1<<(MySQLStatementParserLIST-344))|(1<<(MySQLStatementParserLOCAL-344))|(1<<(MySQLStatementParserLOCKED-344))|(1<<(MySQLStatementParserLOCKS-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySQLStatementParserLOGFILE-376))|(1<<(MySQLStatementParserLOGS-376))|(1<<(MySQLStatementParserMASTER-376))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-376))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-376))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-376))|(1<<(MySQLStatementParserMASTER_DELAY-376))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-376))|(1<<(MySQLStatementParserMASTER_HOST-376))|(1<<(MySQLStatementParserMASTER_LOG_FILE-376))|(1<<(MySQLStatementParserMASTER_LOG_POS-376))|(1<<(MySQLStatementParserMASTER_PASSWORD-376))|(1<<(MySQLStatementParserMASTER_PORT-376))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-376))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-376))|(1<<(MySQLStatementParserMASTER_SERVER_ID-376))|(1<<(MySQLStatementParserMASTER_SSL-376))|(1<<(MySQLStatementParserMASTER_SSL_CA-376))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_CERT-376))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-376))|(1<<(MySQLStatementParserMASTER_SSL_CRL-376))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_KEY-376))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySQLStatementParserMASTER_TLS_VERSION-408))|(1<<(MySQLStatementParserMASTER_USER-408))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-408))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_ROWS-408))|(1<<(MySQLStatementParserMAX_SIZE-408))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-408))|(1<<(MySQLStatementParserMEDIUM-408))|(1<<(MySQLStatementParserMEMBER-408))|(1<<(MySQLStatementParserMEMORY-408))|(1<<(MySQLStatementParserMERGE-408))|(1<<(MySQLStatementParserMESSAGE_TEXT-408))|(1<<(MySQLStatementParserMICROSECOND-408))|(1<<(MySQLStatementParserMIGRATE-408))|(1<<(MySQLStatementParserMINUTE-408))|(1<<(MySQLStatementParserMIN_ROWS-408))|(1<<(MySQLStatementParserMODE-408))|(1<<(MySQLStatementParserMODIFY-408))|(1<<(MySQLStatementParserMONTH-408))|(1<<(MySQLStatementParserMULTILINESTRING-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySQLStatementParserMULTIPOINT-440))|(1<<(MySQLStatementParserMULTIPOLYGON-440))|(1<<(MySQLStatementParserMUTEX-440))|(1<<(MySQLStatementParserMYSQL_ERRNO-440))|(1<<(MySQLStatementParserNAME-440))|(1<<(MySQLStatementParserNAMES-440))|(1<<(MySQLStatementParserNATIONAL-440))|(1<<(MySQLStatementParserNCHAR-440))|(1<<(MySQLStatementParserNDBCLUSTER-440))|(1<<(MySQLStatementParserNESTED-440))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-440))|(1<<(MySQLStatementParserNEVER-440))|(1<<(MySQLStatementParserNEW-440))|(1<<(MySQLStatementParserNEXT-440))|(1<<(MySQLStatementParserNO-440))|(1<<(MySQLStatementParserNODEGROUP-440))|(1<<(MySQLStatementParserNONE-440))|(1<<(MySQLStatementParserNOWAIT-440))|(1<<(MySQLStatementParserNO_WAIT-440))|(1<<(MySQLStatementParserNULLS-440))|(1<<(MySQLStatementParserNUMBER-440))|(1<<(MySQLStatementParserNVARCHAR-440))|(1<<(MySQLStatementParserOFF-440))|(1<<(MySQLStatementParserOFFSET-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySQLStatementParserOJ-472))|(1<<(MySQLStatementParserOLD-472))|(1<<(MySQLStatementParserONE-472))|(1<<(MySQLStatementParserONLY-472))|(1<<(MySQLStatementParserOPEN-472))|(1<<(MySQLStatementParserOPTIONAL-472))|(1<<(MySQLStatementParserOPTIONS-472))|(1<<(MySQLStatementParserORDINALITY-472))|(1<<(MySQLStatementParserORGANIZATION-472))|(1<<(MySQLStatementParserOTHERS-472))|(1<<(MySQLStatementParserOWNER-472))|(1<<(MySQLStatementParserPACK_KEYS-472))|(1<<(MySQLStatementParserPAGE-472))|(1<<(MySQLStatementParserPARSER-472))|(1<<(MySQLStatementParserPARTIAL-472))|(1<<(MySQLStatementParserPARTITIONING-472))|(1<<(MySQLStatementParserPARTITIONS-472))|(1<<(MySQLStatementParserPASSWORD-472))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-472))|(1<<(MySQLStatementParserPATH-472)))) != 0) || (((_la-505)&-(0x1f+1)) == 0 && ((1<<uint((_la-505)))&((1<<(MySQLStatementParserPERSIST-505))|(1<<(MySQLStatementParserPERSIST_ONLY-505))|(1<<(MySQLStatementParserPHASE-505))|(1<<(MySQLStatementParserPLUGIN-505))|(1<<(MySQLStatementParserPLUGINS-505))|(1<<(MySQLStatementParserPLUGIN_DIR-505))|(1<<(MySQLStatementParserPOINT-505))|(1<<(MySQLStatementParserPOLYGON-505))|(1<<(MySQLStatementParserPORT-505))|(1<<(MySQLStatementParserPRECEDES-505))|(1<<(MySQLStatementParserPRECEDING-505))|(1<<(MySQLStatementParserPREPARE-505))|(1<<(MySQLStatementParserPRESERVE-505))|(1<<(MySQLStatementParserPREV-505))|(1<<(MySQLStatementParserPRIVILEGES-505))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-505))|(1<<(MySQLStatementParserPROCESS-505))|(1<<(MySQLStatementParserPROCESSLIST-505))|(1<<(MySQLStatementParserPROFILE-505))|(1<<(MySQLStatementParserPROFILES-505))|(1<<(MySQLStatementParserPROXY-505))|(1<<(MySQLStatementParserQUARTER-505))|(1<<(MySQLStatementParserQUERY-505))|(1<<(MySQLStatementParserQUICK-505))|(1<<(MySQLStatementParserRANDOM-505)))) != 0) || (((_la-538)&-(0x1f+1)) == 0 && ((1<<uint((_la-538)))&((1<<(MySQLStatementParserREAD_ONLY-538))|(1<<(MySQLStatementParserREBUILD-538))|(1<<(MySQLStatementParserRECOVER-538))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-538))|(1<<(MySQLStatementParserREDUNDANT-538))|(1<<(MySQLStatementParserREFERENCE-538))|(1<<(MySQLStatementParserRELAY-538))|(1<<(MySQLStatementParserRELAYLOG-538))|(1<<(MySQLStatementParserRELAY_LOG_FILE-538))|(1<<(MySQLStatementParserRELAY_LOG_POS-538))|(1<<(MySQLStatementParserRELAY_THREAD-538))|(1<<(MySQLStatementParserRELOAD-538))|(1<<(MySQLStatementParserREMOVE-538))|(1<<(MySQLStatementParserREORGANIZE-538))|(1<<(MySQLStatementParserREPAIR-538))|(1<<(MySQLStatementParserREPEATABLE-538))|(1<<(MySQLStatementParserREPLICATE_DO_DB-538))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-538)))) != 0) || (((_la-570)&-(0x1f+1)) == 0 && ((1<<uint((_la-570)))&((1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-570))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-570))|(1<<(MySQLStatementParserREPLICATION-570))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-570))|(1<<(MySQLStatementParserRESET-570))|(1<<(MySQLStatementParserRESOURCE-570))|(1<<(MySQLStatementParserRESPECT-570))|(1<<(MySQLStatementParserRESTART-570))|(1<<(MySQLStatementParserRESTORE-570))|(1<<(MySQLStatementParserRESUME-570))|(1<<(MySQLStatementParserRETAIN-570))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-570))|(1<<(MySQLStatementParserRETURNING-570))|(1<<(MySQLStatementParserRETURNS-570))|(1<<(MySQLStatementParserREUSE-570))|(1<<(MySQLStatementParserREVERSE-570))|(1<<(MySQLStatementParserROLE-570))|(1<<(MySQLStatementParserROLLBACK-570))|(1<<(MySQLStatementParserROLLUP-570))|(1<<(MySQLStatementParserROTATE-570))|(1<<(MySQLStatementParserROUTINE-570))|(1<<(MySQLStatementParserROW_COUNT-570))|(1<<(MySQLStatementParserROW_FORMAT-570)))) != 0) || (((_la-603)&-(0x1f+1)) == 0 && ((1<<uint((_la-603)))&((1<<(MySQLStatementParserRTREE-603))|(1<<(MySQLStatementParserSAVEPOINT-603))|(1<<(MySQLStatementParserSCHEDULE-603))|(1<<(MySQLStatementParserSCHEMA_NAME-603))|(1<<(MySQLStatementParserSECOND-603))|(1<<(MySQLStatementParserSECONDARY-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-603))|(1<<(MySQLStatementParserSECONDARY_LOAD-603))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-603))|(1<<(MySQLStatementParserSECURITY-603))|(1<<(MySQLStatementParserSERIAL-603))|(1<<(MySQLStatementParserSERIALIZABLE-603))|(1<<(MySQLStatementParserSERVER-603))|(1<<(MySQLStatementParserSESSION-603))|(1<<(MySQLStatementParserSHARE-603))|(1<<(MySQLStatementParserSHUTDOWN-603))|(1<<(MySQLStatementParserSIGNED-603))|(1<<(MySQLStatementParserSIMPLE-603))|(1<<(MySQLStatementParserSLAVE-603))|(1<<(MySQLStatementParserSLOW-603)))) != 0) || (((_la-635)&-(0x1f+1)) == 0 && ((1<<uint((_la-635)))&((1<<(MySQLStatementParserSNAPSHOT-635))|(1<<(MySQLStatementParserSOCKET-635))|(1<<(MySQLStatementParserSONAME-635))|(1<<(MySQLStatementParserSOUNDS-635))|(1<<(MySQLStatementParserSOURCE-635))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-635))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-635))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-635))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-635))|(1<<(MySQLStatementParserSQL_NO_CACHE-635))|(1<<(MySQLStatementParserSQL_THREAD-635))|(1<<(MySQLStatementParserSRID-635))|(1<<(MySQLStatementParserSTACKED-635))|(1<<(MySQLStatementParserSTART-635))|(1<<(MySQLStatementParserSTARTS-635))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-635))|(1<<(MySQLStatementParserSTATS_PERSISTENT-635))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-635))|(1<<(MySQLStatementParserSTATUS-635))|(1<<(MySQLStatementParserSTOP-635))|(1<<(MySQLStatementParserSTORAGE-635)))) != 0) || (((_la-669)&-(0x1f+1)) == 0 && ((1<<uint((_la-669)))&((1<<(MySQLStatementParserSTREAM-669))|(1<<(MySQLStatementParserSTRING-669))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-669))|(1<<(MySQLStatementParserSUBJECT-669))|(1<<(MySQLStatementParserSUBPARTITION-669))|(1<<(MySQLStatementParserSUBPARTITIONS-669))|(1<<(MySQLStatementParserSUPER-669))|(1<<(MySQLStatementParserSUSPEND-669))|(1<<(MySQLStatementParserSWAPS-669))|(1<<(MySQLStatementParserSWITCHES-669))|(1<<(MySQLStatementParserTABLES-669))|(1<<(MySQLStatementParserTABLESPACE-669))|(1<<(MySQLStatementParserTABLE_CHECKSUM-669))|(1<<(MySQLStatementParserTABLE_NAME-669))|(1<<(MySQLStatementParserTEMPORARY-669))|(1<<(MySQLStatementParserTEMPTABLE-669))|(1<<(MySQLStatementParserTEXT-669))|(1<<(MySQLStatementParserTHAN-669))|(1<<(MySQLStatementParserTHREAD_PRIORITY-669))|(1<<(MySQLStatementParserTIES-669))|(1<<(MySQLStatementParserTIME-669))|(1<<(MySQLStatementParserTIMESTAMP-669))|(1<<(MySQLStatementParserTIMESTAMP_ADD-669))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-669))|(1<<(MySQLStatementParserTLS-669)))) != 0) || (((_la-703)&-(0x1f+1)) == 0 && ((1<<uint((_la-703)))&((1<<(MySQLStatementParserTRANSACTION-703))|(1<<(MySQLStatementParserTRIGGERS-703))|(1<<(MySQLStatementParserTRUNCATE-703))|(1<<(MySQLStatementParserTYPE-703))|(1<<(MySQLStatementParserTYPES-703))|(1<<(MySQLStatementParserUNBOUNDED-703))|(1<<(MySQLStatementParserUNCOMMITTED-703))|(1<<(MySQLStatementParserUNDEFINED-703))|(1<<(MySQLStatementParserUNDOFILE-703))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-703))|(1<<(MySQLStatementParserUNICODE-703))|(1<<(MySQLStatementParserUNINSTALL-703))|(1<<(MySQLStatementParserUNKNOWN-703))|(1<<(MySQLStatementParserUNTIL-703))|(1<<(MySQLStatementParserUPGRADE-703))|(1<<(MySQLStatementParserUSER-703))|(1<<(MySQLStatementParserUSER_RESOURCES-703))|(1<<(MySQLStatementParserUSE_FRM-703)))) != 0) || (((_la-735)&-(0x1f+1)) == 0 && ((1<<uint((_la-735)))&((1<<(MySQLStatementParserVALIDATION-735))|(1<<(MySQLStatementParserVALUE-735))|(1<<(MySQLStatementParserVARIABLES-735))|(1<<(MySQLStatementParserVCPU-735))|(1<<(MySQLStatementParserVIEW-735))|(1<<(MySQLStatementParserVISIBLE-735))|(1<<(MySQLStatementParserWAIT-735))|(1<<(MySQLStatementParserWARNINGS-735))|(1<<(MySQLStatementParserWEEK-735))|(1<<(MySQLStatementParserWEIGHT_STRING-735))|(1<<(MySQLStatementParserWITHOUT-735))|(1<<(MySQLStatementParserWORK-735))|(1<<(MySQLStatementParserWRAPPER-735))|(1<<(MySQLStatementParserX509-735))|(1<<(MySQLStatementParserXA-735))|(1<<(MySQLStatementParserXID-735))|(1<<(MySQLStatementParserXML-735))|(1<<(MySQLStatementParserYEAR-735)))) != 0) || _la == MySQLStatementParserIDENTIFIER_ || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
			{
				p.SetState(7954)
				p.SchemaNames()
			}

		}
		{
			p.SetState(7957)
			p.Match(MySQLStatementParserRP_)
		}

	case MySQLStatementParserREPLICATE_DO_TABLE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7958)
			p.Match(MySQLStatementParserREPLICATE_DO_TABLE)
		}
		{
			p.SetState(7959)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7960)
			p.Match(MySQLStatementParserLP_)
		}
		p.SetState(7962)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49))|(1<<(MySQLStatementParserGROUP_CONCAT-49))|(1<<(MySQLStatementParserCAST-49))|(1<<(MySQLStatementParserPOSITION-49))|(1<<(MySQLStatementParserSUBSTRING-49))|(1<<(MySQLStatementParserSUBSTR-49))|(1<<(MySQLStatementParserEXTRACT-49))|(1<<(MySQLStatementParserTRIM-49))|(1<<(MySQLStatementParserLAST_DAY-49))|(1<<(MySQLStatementParserTRADITIONAL-49))|(1<<(MySQLStatementParserTREE-49))|(1<<(MySQLStatementParserMYSQL_ADMIN-49))|(1<<(MySQLStatementParserINSTANT-49))|(1<<(MySQLStatementParserINPLACE-49))|(1<<(MySQLStatementParserCOPY-49))|(1<<(MySQLStatementParserUL_BINARY-49))|(1<<(MySQLStatementParserAUTOCOMMIT-49))|(1<<(MySQLStatementParserINNODB-49))|(1<<(MySQLStatementParserREDO_LOG-49))|(1<<(MySQLStatementParserACCOUNT-49))|(1<<(MySQLStatementParserACTION-49))|(1<<(MySQLStatementParserACTIVE-49))|(1<<(MySQLStatementParserADMIN-49))|(1<<(MySQLStatementParserAFTER-49))|(1<<(MySQLStatementParserAGAINST-49)))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(MySQLStatementParserAGGREGATE-81))|(1<<(MySQLStatementParserALGORITHM-81))|(1<<(MySQLStatementParserALWAYS-81))|(1<<(MySQLStatementParserANY-81))|(1<<(MySQLStatementParserARRAY-81))|(1<<(MySQLStatementParserASCII-81))|(1<<(MySQLStatementParserAT-81))|(1<<(MySQLStatementParserATTRIBUTE-81))|(1<<(MySQLStatementParserAUTOEXTEND_SIZE-81))|(1<<(MySQLStatementParserAUTO_INCREMENT-81))|(1<<(MySQLStatementParserAVG-81))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-81))|(1<<(MySQLStatementParserBACKUP-81))|(1<<(MySQLStatementParserBEGIN-81))|(1<<(MySQLStatementParserBINLOG-81))|(1<<(MySQLStatementParserBIT-81))|(1<<(MySQLStatementParserBLOCK-81))|(1<<(MySQLStatementParserBOOL-81))|(1<<(MySQLStatementParserBOOLEAN-81)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(MySQLStatementParserBTREE-114))|(1<<(MySQLStatementParserBUCKETS-114))|(1<<(MySQLStatementParserBYTE-114))|(1<<(MySQLStatementParserCACHE-114))|(1<<(MySQLStatementParserCASCADED-114))|(1<<(MySQLStatementParserCATALOG_NAME-114))|(1<<(MySQLStatementParserCHAIN-114))|(1<<(MySQLStatementParserCHANGED-114))|(1<<(MySQLStatementParserCHANNEL-114))|(1<<(MySQLStatementParserCHARSET-114))|(1<<(MySQLStatementParserCHECKSUM-114))|(1<<(MySQLStatementParserCIPHER-114))|(1<<(MySQLStatementParserCLASS_ORIGIN-114))|(1<<(MySQLStatementParserCLIENT-114))|(1<<(MySQLStatementParserCLONE-114))|(1<<(MySQLStatementParserCLOSE-114))|(1<<(MySQLStatementParserCOALESCE-114))|(1<<(MySQLStatementParserCODE-114))|(1<<(MySQLStatementParserCOLLATION-114))|(1<<(MySQLStatementParserCOLUMNS-114))|(1<<(MySQLStatementParserCOLUMN_FORMAT-114))|(1<<(MySQLStatementParserCOLUMN_NAME-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(MySQLStatementParserCOMMENT-146))|(1<<(MySQLStatementParserCOMMIT-146))|(1<<(MySQLStatementParserCOMMITTED-146))|(1<<(MySQLStatementParserCOMPACT-146))|(1<<(MySQLStatementParserCOMPLETION-146))|(1<<(MySQLStatementParserCOMPONENT-146))|(1<<(MySQLStatementParserCOMPRESSED-146))|(1<<(MySQLStatementParserCOMPRESSION-146))|(1<<(MySQLStatementParserCONCURRENT-146))|(1<<(MySQLStatementParserCONNECTION-146))|(1<<(MySQLStatementParserCONSISTENT-146))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-146))|(1<<(MySQLStatementParserCONSTRAINT_NAME-146))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-146))|(1<<(MySQLStatementParserCONTAINS-146))|(1<<(MySQLStatementParserCONTEXT-146))|(1<<(MySQLStatementParserCPU-146))|(1<<(MySQLStatementParserCURRENT-146))|(1<<(MySQLStatementParserCURSOR_NAME-146)))) != 0) || (((_la-178)&-(0x1f+1)) == 0 && ((1<<uint((_la-178)))&((1<<(MySQLStatementParserDATA-178))|(1<<(MySQLStatementParserDATAFILE-178))|(1<<(MySQLStatementParserDATE-178))|(1<<(MySQLStatementParserDATETIME-178))|(1<<(MySQLStatementParserDAY-178))|(1<<(MySQLStatementParserDEALLOCATE-178))|(1<<(MySQLStatementParserDEFAULT_AUTH-178))|(1<<(MySQLStatementParserDEFINER-178))|(1<<(MySQLStatementParserDEFINITION-178))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-178))|(1<<(MySQLStatementParserDESCRIPTION-178))|(1<<(MySQLStatementParserDIAGNOSTICS-178))|(1<<(MySQLStatementParserDIRECTORY-178))|(1<<(MySQLStatementParserDISABLE-178))|(1<<(MySQLStatementParserDISCARD-178))|(1<<(MySQLStatementParserDISK-178)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(MySQLStatementParserDO-213))|(1<<(MySQLStatementParserDUMPFILE-213))|(1<<(MySQLStatementParserDUPLICATE-213))|(1<<(MySQLStatementParserDYNAMIC-213))|(1<<(MySQLStatementParserENABLE-213))|(1<<(MySQLStatementParserENCRYPTION-213))|(1<<(MySQLStatementParserEND-213))|(1<<(MySQLStatementParserENDS-213))|(1<<(MySQLStatementParserENFORCED-213))|(1<<(MySQLStatementParserENGINE-213))|(1<<(MySQLStatementParserENGINES-213))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-213))|(1<<(MySQLStatementParserENUM-213))|(1<<(MySQLStatementParserERROR-213))|(1<<(MySQLStatementParserERRORS-213))|(1<<(MySQLStatementParserESCAPE-213))|(1<<(MySQLStatementParserEVENT-213))|(1<<(MySQLStatementParserEVENTS-213))|(1<<(MySQLStatementParserEVERY-213))|(1<<(MySQLStatementParserEXCHANGE-213))|(1<<(MySQLStatementParserEXCLUDE-213))|(1<<(MySQLStatementParserEXECUTE-213)))) != 0) || (((_la-247)&-(0x1f+1)) == 0 && ((1<<uint((_la-247)))&((1<<(MySQLStatementParserEXPANSION-247))|(1<<(MySQLStatementParserEXPIRE-247))|(1<<(MySQLStatementParserEXPORT-247))|(1<<(MySQLStatementParserEXTENDED-247))|(1<<(MySQLStatementParserEXTENT_SIZE-247))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-247))|(1<<(MySQLStatementParserFAST-247))|(1<<(MySQLStatementParserFAULTS-247))|(1<<(MySQLStatementParserFILE-247))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-247))|(1<<(MySQLStatementParserFILTER-247))|(1<<(MySQLStatementParserFIRST-247))|(1<<(MySQLStatementParserFIXED-247))|(1<<(MySQLStatementParserFLUSH-247))|(1<<(MySQLStatementParserFOLLOWING-247))|(1<<(MySQLStatementParserFOLLOWS-247))|(1<<(MySQLStatementParserFORMAT-247))|(1<<(MySQLStatementParserFOUND-247))|(1<<(MySQLStatementParserFULL-247)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(MySQLStatementParserGENERAL-279))|(1<<(MySQLStatementParserGEOMETRY-279))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-279))|(1<<(MySQLStatementParserGET_FORMAT-279))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-279))|(1<<(MySQLStatementParserGLOBAL-279))|(1<<(MySQLStatementParserGRANTS-279))|(1<<(MySQLStatementParserGROUP_REPLICATION-279))|(1<<(MySQLStatementParserHANDLER-279))|(1<<(MySQLStatementParserHASH-279))|(1<<(MySQLStatementParserHELP-279))|(1<<(MySQLStatementParserHISTOGRAM-279))|(1<<(MySQLStatementParserHISTORY-279))|(1<<(MySQLStatementParserHOST-279))|(1<<(MySQLStatementParserHOSTS-279))|(1<<(MySQLStatementParserHOUR-279))|(1<<(MySQLStatementParserIDENTIFIED-279))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-279))|(1<<(MySQLStatementParserIMPORT-279)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySQLStatementParserINACTIVE-312))|(1<<(MySQLStatementParserINDEXES-312))|(1<<(MySQLStatementParserINITIAL_SIZE-312))|(1<<(MySQLStatementParserINSERT_METHOD-312))|(1<<(MySQLStatementParserINSTALL-312))|(1<<(MySQLStatementParserINSTANCE-312))|(1<<(MySQLStatementParserINVISIBLE-312))|(1<<(MySQLStatementParserINVOKER-312))|(1<<(MySQLStatementParserIO-312))|(1<<(MySQLStatementParserIPC-312))|(1<<(MySQLStatementParserISOLATION-312))|(1<<(MySQLStatementParserISSUER-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySQLStatementParserJSON-344))|(1<<(MySQLStatementParserJSON_VALUE-344))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-344))|(1<<(MySQLStatementParserLANGUAGE-344))|(1<<(MySQLStatementParserLAST-344))|(1<<(MySQLStatementParserLAST_VALUE-344))|(1<<(MySQLStatementParserLEAVES-344))|(1<<(MySQLStatementParserLESS-344))|(1<<(MySQLStatementParserLEVEL-344))|(1<<(MySQLStatementParserLINESTRING-344))|(1<<(MySQLStatementParserLIST-344))|(1<<(MySQLStatementParserLOCAL-344))|(1<<(MySQLStatementParserLOCKED-344))|(1<<(MySQLStatementParserLOCKS-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySQLStatementParserLOGFILE-376))|(1<<(MySQLStatementParserLOGS-376))|(1<<(MySQLStatementParserMASTER-376))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-376))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-376))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-376))|(1<<(MySQLStatementParserMASTER_DELAY-376))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-376))|(1<<(MySQLStatementParserMASTER_HOST-376))|(1<<(MySQLStatementParserMASTER_LOG_FILE-376))|(1<<(MySQLStatementParserMASTER_LOG_POS-376))|(1<<(MySQLStatementParserMASTER_PASSWORD-376))|(1<<(MySQLStatementParserMASTER_PORT-376))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-376))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-376))|(1<<(MySQLStatementParserMASTER_SERVER_ID-376))|(1<<(MySQLStatementParserMASTER_SSL-376))|(1<<(MySQLStatementParserMASTER_SSL_CA-376))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_CERT-376))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-376))|(1<<(MySQLStatementParserMASTER_SSL_CRL-376))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_KEY-376))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySQLStatementParserMASTER_TLS_VERSION-408))|(1<<(MySQLStatementParserMASTER_USER-408))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-408))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_ROWS-408))|(1<<(MySQLStatementParserMAX_SIZE-408))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-408))|(1<<(MySQLStatementParserMEDIUM-408))|(1<<(MySQLStatementParserMEMBER-408))|(1<<(MySQLStatementParserMEMORY-408))|(1<<(MySQLStatementParserMERGE-408))|(1<<(MySQLStatementParserMESSAGE_TEXT-408))|(1<<(MySQLStatementParserMICROSECOND-408))|(1<<(MySQLStatementParserMIGRATE-408))|(1<<(MySQLStatementParserMINUTE-408))|(1<<(MySQLStatementParserMIN_ROWS-408))|(1<<(MySQLStatementParserMODE-408))|(1<<(MySQLStatementParserMODIFY-408))|(1<<(MySQLStatementParserMONTH-408))|(1<<(MySQLStatementParserMULTILINESTRING-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySQLStatementParserMULTIPOINT-440))|(1<<(MySQLStatementParserMULTIPOLYGON-440))|(1<<(MySQLStatementParserMUTEX-440))|(1<<(MySQLStatementParserMYSQL_ERRNO-440))|(1<<(MySQLStatementParserNAME-440))|(1<<(MySQLStatementParserNAMES-440))|(1<<(MySQLStatementParserNATIONAL-440))|(1<<(MySQLStatementParserNCHAR-440))|(1<<(MySQLStatementParserNDBCLUSTER-440))|(1<<(MySQLStatementParserNESTED-440))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-440))|(1<<(MySQLStatementParserNEVER-440))|(1<<(MySQLStatementParserNEW-440))|(1<<(MySQLStatementParserNEXT-440))|(1<<(MySQLStatementParserNO-440))|(1<<(MySQLStatementParserNODEGROUP-440))|(1<<(MySQLStatementParserNONE-440))|(1<<(MySQLStatementParserNOWAIT-440))|(1<<(MySQLStatementParserNO_WAIT-440))|(1<<(MySQLStatementParserNULLS-440))|(1<<(MySQLStatementParserNUMBER-440))|(1<<(MySQLStatementParserNVARCHAR-440))|(1<<(MySQLStatementParserOFF-440))|(1<<(MySQLStatementParserOFFSET-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySQLStatementParserOJ-472))|(1<<(MySQLStatementParserOLD-472))|(1<<(MySQLStatementParserONE-472))|(1<<(MySQLStatementParserONLY-472))|(1<<(MySQLStatementParserOPEN-472))|(1<<(MySQLStatementParserOPTIONAL-472))|(1<<(MySQLStatementParserOPTIONS-472))|(1<<(MySQLStatementParserORDINALITY-472))|(1<<(MySQLStatementParserORGANIZATION-472))|(1<<(MySQLStatementParserOTHERS-472))|(1<<(MySQLStatementParserOWNER-472))|(1<<(MySQLStatementParserPACK_KEYS-472))|(1<<(MySQLStatementParserPAGE-472))|(1<<(MySQLStatementParserPARSER-472))|(1<<(MySQLStatementParserPARTIAL-472))|(1<<(MySQLStatementParserPARTITIONING-472))|(1<<(MySQLStatementParserPARTITIONS-472))|(1<<(MySQLStatementParserPASSWORD-472))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-472))|(1<<(MySQLStatementParserPATH-472)))) != 0) || (((_la-505)&-(0x1f+1)) == 0 && ((1<<uint((_la-505)))&((1<<(MySQLStatementParserPERSIST-505))|(1<<(MySQLStatementParserPERSIST_ONLY-505))|(1<<(MySQLStatementParserPHASE-505))|(1<<(MySQLStatementParserPLUGIN-505))|(1<<(MySQLStatementParserPLUGINS-505))|(1<<(MySQLStatementParserPLUGIN_DIR-505))|(1<<(MySQLStatementParserPOINT-505))|(1<<(MySQLStatementParserPOLYGON-505))|(1<<(MySQLStatementParserPORT-505))|(1<<(MySQLStatementParserPRECEDES-505))|(1<<(MySQLStatementParserPRECEDING-505))|(1<<(MySQLStatementParserPREPARE-505))|(1<<(MySQLStatementParserPRESERVE-505))|(1<<(MySQLStatementParserPREV-505))|(1<<(MySQLStatementParserPRIVILEGES-505))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-505))|(1<<(MySQLStatementParserPROCESS-505))|(1<<(MySQLStatementParserPROCESSLIST-505))|(1<<(MySQLStatementParserPROFILE-505))|(1<<(MySQLStatementParserPROFILES-505))|(1<<(MySQLStatementParserPROXY-505))|(1<<(MySQLStatementParserQUARTER-505))|(1<<(MySQLStatementParserQUERY-505))|(1<<(MySQLStatementParserQUICK-505))|(1<<(MySQLStatementParserRANDOM-505)))) != 0) || (((_la-538)&-(0x1f+1)) == 0 && ((1<<uint((_la-538)))&((1<<(MySQLStatementParserREAD_ONLY-538))|(1<<(MySQLStatementParserREBUILD-538))|(1<<(MySQLStatementParserRECOVER-538))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-538))|(1<<(MySQLStatementParserREDUNDANT-538))|(1<<(MySQLStatementParserREFERENCE-538))|(1<<(MySQLStatementParserRELAY-538))|(1<<(MySQLStatementParserRELAYLOG-538))|(1<<(MySQLStatementParserRELAY_LOG_FILE-538))|(1<<(MySQLStatementParserRELAY_LOG_POS-538))|(1<<(MySQLStatementParserRELAY_THREAD-538))|(1<<(MySQLStatementParserRELOAD-538))|(1<<(MySQLStatementParserREMOVE-538))|(1<<(MySQLStatementParserREORGANIZE-538))|(1<<(MySQLStatementParserREPAIR-538))|(1<<(MySQLStatementParserREPEATABLE-538))|(1<<(MySQLStatementParserREPLICATE_DO_DB-538))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-538)))) != 0) || (((_la-570)&-(0x1f+1)) == 0 && ((1<<uint((_la-570)))&((1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-570))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-570))|(1<<(MySQLStatementParserREPLICATION-570))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-570))|(1<<(MySQLStatementParserRESET-570))|(1<<(MySQLStatementParserRESOURCE-570))|(1<<(MySQLStatementParserRESPECT-570))|(1<<(MySQLStatementParserRESTART-570))|(1<<(MySQLStatementParserRESTORE-570))|(1<<(MySQLStatementParserRESUME-570))|(1<<(MySQLStatementParserRETAIN-570))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-570))|(1<<(MySQLStatementParserRETURNING-570))|(1<<(MySQLStatementParserRETURNS-570))|(1<<(MySQLStatementParserREUSE-570))|(1<<(MySQLStatementParserREVERSE-570))|(1<<(MySQLStatementParserROLE-570))|(1<<(MySQLStatementParserROLLBACK-570))|(1<<(MySQLStatementParserROLLUP-570))|(1<<(MySQLStatementParserROTATE-570))|(1<<(MySQLStatementParserROUTINE-570))|(1<<(MySQLStatementParserROW_COUNT-570))|(1<<(MySQLStatementParserROW_FORMAT-570)))) != 0) || (((_la-603)&-(0x1f+1)) == 0 && ((1<<uint((_la-603)))&((1<<(MySQLStatementParserRTREE-603))|(1<<(MySQLStatementParserSAVEPOINT-603))|(1<<(MySQLStatementParserSCHEDULE-603))|(1<<(MySQLStatementParserSCHEMA_NAME-603))|(1<<(MySQLStatementParserSECOND-603))|(1<<(MySQLStatementParserSECONDARY-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-603))|(1<<(MySQLStatementParserSECONDARY_LOAD-603))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-603))|(1<<(MySQLStatementParserSECURITY-603))|(1<<(MySQLStatementParserSERIAL-603))|(1<<(MySQLStatementParserSERIALIZABLE-603))|(1<<(MySQLStatementParserSERVER-603))|(1<<(MySQLStatementParserSESSION-603))|(1<<(MySQLStatementParserSHARE-603))|(1<<(MySQLStatementParserSHUTDOWN-603))|(1<<(MySQLStatementParserSIGNED-603))|(1<<(MySQLStatementParserSIMPLE-603))|(1<<(MySQLStatementParserSLAVE-603))|(1<<(MySQLStatementParserSLOW-603)))) != 0) || (((_la-635)&-(0x1f+1)) == 0 && ((1<<uint((_la-635)))&((1<<(MySQLStatementParserSNAPSHOT-635))|(1<<(MySQLStatementParserSOCKET-635))|(1<<(MySQLStatementParserSONAME-635))|(1<<(MySQLStatementParserSOUNDS-635))|(1<<(MySQLStatementParserSOURCE-635))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-635))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-635))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-635))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-635))|(1<<(MySQLStatementParserSQL_NO_CACHE-635))|(1<<(MySQLStatementParserSQL_THREAD-635))|(1<<(MySQLStatementParserSRID-635))|(1<<(MySQLStatementParserSTACKED-635))|(1<<(MySQLStatementParserSTART-635))|(1<<(MySQLStatementParserSTARTS-635))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-635))|(1<<(MySQLStatementParserSTATS_PERSISTENT-635))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-635))|(1<<(MySQLStatementParserSTATUS-635))|(1<<(MySQLStatementParserSTOP-635))|(1<<(MySQLStatementParserSTORAGE-635)))) != 0) || (((_la-669)&-(0x1f+1)) == 0 && ((1<<uint((_la-669)))&((1<<(MySQLStatementParserSTREAM-669))|(1<<(MySQLStatementParserSTRING-669))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-669))|(1<<(MySQLStatementParserSUBJECT-669))|(1<<(MySQLStatementParserSUBPARTITION-669))|(1<<(MySQLStatementParserSUBPARTITIONS-669))|(1<<(MySQLStatementParserSUPER-669))|(1<<(MySQLStatementParserSUSPEND-669))|(1<<(MySQLStatementParserSWAPS-669))|(1<<(MySQLStatementParserSWITCHES-669))|(1<<(MySQLStatementParserTABLES-669))|(1<<(MySQLStatementParserTABLESPACE-669))|(1<<(MySQLStatementParserTABLE_CHECKSUM-669))|(1<<(MySQLStatementParserTABLE_NAME-669))|(1<<(MySQLStatementParserTEMPORARY-669))|(1<<(MySQLStatementParserTEMPTABLE-669))|(1<<(MySQLStatementParserTEXT-669))|(1<<(MySQLStatementParserTHAN-669))|(1<<(MySQLStatementParserTHREAD_PRIORITY-669))|(1<<(MySQLStatementParserTIES-669))|(1<<(MySQLStatementParserTIME-669))|(1<<(MySQLStatementParserTIMESTAMP-669))|(1<<(MySQLStatementParserTIMESTAMP_ADD-669))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-669))|(1<<(MySQLStatementParserTLS-669)))) != 0) || (((_la-703)&-(0x1f+1)) == 0 && ((1<<uint((_la-703)))&((1<<(MySQLStatementParserTRANSACTION-703))|(1<<(MySQLStatementParserTRIGGERS-703))|(1<<(MySQLStatementParserTRUNCATE-703))|(1<<(MySQLStatementParserTYPE-703))|(1<<(MySQLStatementParserTYPES-703))|(1<<(MySQLStatementParserUNBOUNDED-703))|(1<<(MySQLStatementParserUNCOMMITTED-703))|(1<<(MySQLStatementParserUNDEFINED-703))|(1<<(MySQLStatementParserUNDOFILE-703))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-703))|(1<<(MySQLStatementParserUNICODE-703))|(1<<(MySQLStatementParserUNINSTALL-703))|(1<<(MySQLStatementParserUNKNOWN-703))|(1<<(MySQLStatementParserUNTIL-703))|(1<<(MySQLStatementParserUPGRADE-703))|(1<<(MySQLStatementParserUSER-703))|(1<<(MySQLStatementParserUSER_RESOURCES-703))|(1<<(MySQLStatementParserUSE_FRM-703)))) != 0) || (((_la-735)&-(0x1f+1)) == 0 && ((1<<uint((_la-735)))&((1<<(MySQLStatementParserVALIDATION-735))|(1<<(MySQLStatementParserVALUE-735))|(1<<(MySQLStatementParserVARIABLES-735))|(1<<(MySQLStatementParserVCPU-735))|(1<<(MySQLStatementParserVIEW-735))|(1<<(MySQLStatementParserVISIBLE-735))|(1<<(MySQLStatementParserWAIT-735))|(1<<(MySQLStatementParserWARNINGS-735))|(1<<(MySQLStatementParserWEEK-735))|(1<<(MySQLStatementParserWEIGHT_STRING-735))|(1<<(MySQLStatementParserWITHOUT-735))|(1<<(MySQLStatementParserWORK-735))|(1<<(MySQLStatementParserWRAPPER-735))|(1<<(MySQLStatementParserX509-735))|(1<<(MySQLStatementParserXA-735))|(1<<(MySQLStatementParserXID-735))|(1<<(MySQLStatementParserXML-735))|(1<<(MySQLStatementParserYEAR-735)))) != 0) || _la == MySQLStatementParserIDENTIFIER_ || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
			{
				p.SetState(7961)
				p.TableList()
			}

		}
		{
			p.SetState(7964)
			p.Match(MySQLStatementParserRP_)
		}

	case MySQLStatementParserREPLICATE_IGNORE_TABLE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7965)
			p.Match(MySQLStatementParserREPLICATE_IGNORE_TABLE)
		}
		{
			p.SetState(7966)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7967)
			p.Match(MySQLStatementParserLP_)
		}
		p.SetState(7969)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(MySQLStatementParserMAX-49))|(1<<(MySQLStatementParserMIN-49))|(1<<(MySQLStatementParserSUM-49))|(1<<(MySQLStatementParserCOUNT-49))|(1<<(MySQLStatementParserGROUP_CONCAT-49))|(1<<(MySQLStatementParserCAST-49))|(1<<(MySQLStatementParserPOSITION-49))|(1<<(MySQLStatementParserSUBSTRING-49))|(1<<(MySQLStatementParserSUBSTR-49))|(1<<(MySQLStatementParserEXTRACT-49))|(1<<(MySQLStatementParserTRIM-49))|(1<<(MySQLStatementParserLAST_DAY-49))|(1<<(MySQLStatementParserTRADITIONAL-49))|(1<<(MySQLStatementParserTREE-49))|(1<<(MySQLStatementParserMYSQL_ADMIN-49))|(1<<(MySQLStatementParserINSTANT-49))|(1<<(MySQLStatementParserINPLACE-49))|(1<<(MySQLStatementParserCOPY-49))|(1<<(MySQLStatementParserUL_BINARY-49))|(1<<(MySQLStatementParserAUTOCOMMIT-49))|(1<<(MySQLStatementParserINNODB-49))|(1<<(MySQLStatementParserREDO_LOG-49))|(1<<(MySQLStatementParserACCOUNT-49))|(1<<(MySQLStatementParserACTION-49))|(1<<(MySQLStatementParserACTIVE-49))|(1<<(MySQLStatementParserADMIN-49))|(1<<(MySQLStatementParserAFTER-49))|(1<<(MySQLStatementParserAGAINST-49)))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(MySQLStatementParserAGGREGATE-81))|(1<<(MySQLStatementParserALGORITHM-81))|(1<<(MySQLStatementParserALWAYS-81))|(1<<(MySQLStatementParserANY-81))|(1<<(MySQLStatementParserARRAY-81))|(1<<(MySQLStatementParserASCII-81))|(1<<(MySQLStatementParserAT-81))|(1<<(MySQLStatementParserATTRIBUTE-81))|(1<<(MySQLStatementParserAUTOEXTEND_SIZE-81))|(1<<(MySQLStatementParserAUTO_INCREMENT-81))|(1<<(MySQLStatementParserAVG-81))|(1<<(MySQLStatementParserAVG_ROW_LENGTH-81))|(1<<(MySQLStatementParserBACKUP-81))|(1<<(MySQLStatementParserBEGIN-81))|(1<<(MySQLStatementParserBINLOG-81))|(1<<(MySQLStatementParserBIT-81))|(1<<(MySQLStatementParserBLOCK-81))|(1<<(MySQLStatementParserBOOL-81))|(1<<(MySQLStatementParserBOOLEAN-81)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(MySQLStatementParserBTREE-114))|(1<<(MySQLStatementParserBUCKETS-114))|(1<<(MySQLStatementParserBYTE-114))|(1<<(MySQLStatementParserCACHE-114))|(1<<(MySQLStatementParserCASCADED-114))|(1<<(MySQLStatementParserCATALOG_NAME-114))|(1<<(MySQLStatementParserCHAIN-114))|(1<<(MySQLStatementParserCHANGED-114))|(1<<(MySQLStatementParserCHANNEL-114))|(1<<(MySQLStatementParserCHARSET-114))|(1<<(MySQLStatementParserCHECKSUM-114))|(1<<(MySQLStatementParserCIPHER-114))|(1<<(MySQLStatementParserCLASS_ORIGIN-114))|(1<<(MySQLStatementParserCLIENT-114))|(1<<(MySQLStatementParserCLONE-114))|(1<<(MySQLStatementParserCLOSE-114))|(1<<(MySQLStatementParserCOALESCE-114))|(1<<(MySQLStatementParserCODE-114))|(1<<(MySQLStatementParserCOLLATION-114))|(1<<(MySQLStatementParserCOLUMNS-114))|(1<<(MySQLStatementParserCOLUMN_FORMAT-114))|(1<<(MySQLStatementParserCOLUMN_NAME-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(MySQLStatementParserCOMMENT-146))|(1<<(MySQLStatementParserCOMMIT-146))|(1<<(MySQLStatementParserCOMMITTED-146))|(1<<(MySQLStatementParserCOMPACT-146))|(1<<(MySQLStatementParserCOMPLETION-146))|(1<<(MySQLStatementParserCOMPONENT-146))|(1<<(MySQLStatementParserCOMPRESSED-146))|(1<<(MySQLStatementParserCOMPRESSION-146))|(1<<(MySQLStatementParserCONCURRENT-146))|(1<<(MySQLStatementParserCONNECTION-146))|(1<<(MySQLStatementParserCONSISTENT-146))|(1<<(MySQLStatementParserCONSTRAINT_CATALOG-146))|(1<<(MySQLStatementParserCONSTRAINT_NAME-146))|(1<<(MySQLStatementParserCONSTRAINT_SCHEMA-146))|(1<<(MySQLStatementParserCONTAINS-146))|(1<<(MySQLStatementParserCONTEXT-146))|(1<<(MySQLStatementParserCPU-146))|(1<<(MySQLStatementParserCURRENT-146))|(1<<(MySQLStatementParserCURSOR_NAME-146)))) != 0) || (((_la-178)&-(0x1f+1)) == 0 && ((1<<uint((_la-178)))&((1<<(MySQLStatementParserDATA-178))|(1<<(MySQLStatementParserDATAFILE-178))|(1<<(MySQLStatementParserDATE-178))|(1<<(MySQLStatementParserDATETIME-178))|(1<<(MySQLStatementParserDAY-178))|(1<<(MySQLStatementParserDEALLOCATE-178))|(1<<(MySQLStatementParserDEFAULT_AUTH-178))|(1<<(MySQLStatementParserDEFINER-178))|(1<<(MySQLStatementParserDEFINITION-178))|(1<<(MySQLStatementParserDELAY_KEY_WRITE-178))|(1<<(MySQLStatementParserDESCRIPTION-178))|(1<<(MySQLStatementParserDIAGNOSTICS-178))|(1<<(MySQLStatementParserDIRECTORY-178))|(1<<(MySQLStatementParserDISABLE-178))|(1<<(MySQLStatementParserDISCARD-178))|(1<<(MySQLStatementParserDISK-178)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(MySQLStatementParserDO-213))|(1<<(MySQLStatementParserDUMPFILE-213))|(1<<(MySQLStatementParserDUPLICATE-213))|(1<<(MySQLStatementParserDYNAMIC-213))|(1<<(MySQLStatementParserENABLE-213))|(1<<(MySQLStatementParserENCRYPTION-213))|(1<<(MySQLStatementParserEND-213))|(1<<(MySQLStatementParserENDS-213))|(1<<(MySQLStatementParserENFORCED-213))|(1<<(MySQLStatementParserENGINE-213))|(1<<(MySQLStatementParserENGINES-213))|(1<<(MySQLStatementParserENGINE_ATTRIBUTE-213))|(1<<(MySQLStatementParserENUM-213))|(1<<(MySQLStatementParserERROR-213))|(1<<(MySQLStatementParserERRORS-213))|(1<<(MySQLStatementParserESCAPE-213))|(1<<(MySQLStatementParserEVENT-213))|(1<<(MySQLStatementParserEVENTS-213))|(1<<(MySQLStatementParserEVERY-213))|(1<<(MySQLStatementParserEXCHANGE-213))|(1<<(MySQLStatementParserEXCLUDE-213))|(1<<(MySQLStatementParserEXECUTE-213)))) != 0) || (((_la-247)&-(0x1f+1)) == 0 && ((1<<uint((_la-247)))&((1<<(MySQLStatementParserEXPANSION-247))|(1<<(MySQLStatementParserEXPIRE-247))|(1<<(MySQLStatementParserEXPORT-247))|(1<<(MySQLStatementParserEXTENDED-247))|(1<<(MySQLStatementParserEXTENT_SIZE-247))|(1<<(MySQLStatementParserFAILED_LOGIN_ATTEMPTS-247))|(1<<(MySQLStatementParserFAST-247))|(1<<(MySQLStatementParserFAULTS-247))|(1<<(MySQLStatementParserFILE-247))|(1<<(MySQLStatementParserFILE_BLOCK_SIZE-247))|(1<<(MySQLStatementParserFILTER-247))|(1<<(MySQLStatementParserFIRST-247))|(1<<(MySQLStatementParserFIXED-247))|(1<<(MySQLStatementParserFLUSH-247))|(1<<(MySQLStatementParserFOLLOWING-247))|(1<<(MySQLStatementParserFOLLOWS-247))|(1<<(MySQLStatementParserFORMAT-247))|(1<<(MySQLStatementParserFOUND-247))|(1<<(MySQLStatementParserFULL-247)))) != 0) || (((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(MySQLStatementParserGENERAL-279))|(1<<(MySQLStatementParserGEOMETRY-279))|(1<<(MySQLStatementParserGEOMETRYCOLLECTION-279))|(1<<(MySQLStatementParserGET_FORMAT-279))|(1<<(MySQLStatementParserGET_MASTER_PUBLIC_KEY-279))|(1<<(MySQLStatementParserGLOBAL-279))|(1<<(MySQLStatementParserGRANTS-279))|(1<<(MySQLStatementParserGROUP_REPLICATION-279))|(1<<(MySQLStatementParserHANDLER-279))|(1<<(MySQLStatementParserHASH-279))|(1<<(MySQLStatementParserHELP-279))|(1<<(MySQLStatementParserHISTOGRAM-279))|(1<<(MySQLStatementParserHISTORY-279))|(1<<(MySQLStatementParserHOST-279))|(1<<(MySQLStatementParserHOSTS-279))|(1<<(MySQLStatementParserHOUR-279))|(1<<(MySQLStatementParserIDENTIFIED-279))|(1<<(MySQLStatementParserIGNORE_SERVER_IDS-279))|(1<<(MySQLStatementParserIMPORT-279)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySQLStatementParserINACTIVE-312))|(1<<(MySQLStatementParserINDEXES-312))|(1<<(MySQLStatementParserINITIAL_SIZE-312))|(1<<(MySQLStatementParserINSERT_METHOD-312))|(1<<(MySQLStatementParserINSTALL-312))|(1<<(MySQLStatementParserINSTANCE-312))|(1<<(MySQLStatementParserINVISIBLE-312))|(1<<(MySQLStatementParserINVOKER-312))|(1<<(MySQLStatementParserIO-312))|(1<<(MySQLStatementParserIPC-312))|(1<<(MySQLStatementParserISOLATION-312))|(1<<(MySQLStatementParserISSUER-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySQLStatementParserJSON-344))|(1<<(MySQLStatementParserJSON_VALUE-344))|(1<<(MySQLStatementParserKEY_BLOCK_SIZE-344))|(1<<(MySQLStatementParserLANGUAGE-344))|(1<<(MySQLStatementParserLAST-344))|(1<<(MySQLStatementParserLAST_VALUE-344))|(1<<(MySQLStatementParserLEAVES-344))|(1<<(MySQLStatementParserLESS-344))|(1<<(MySQLStatementParserLEVEL-344))|(1<<(MySQLStatementParserLINESTRING-344))|(1<<(MySQLStatementParserLIST-344))|(1<<(MySQLStatementParserLOCAL-344))|(1<<(MySQLStatementParserLOCKED-344))|(1<<(MySQLStatementParserLOCKS-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySQLStatementParserLOGFILE-376))|(1<<(MySQLStatementParserLOGS-376))|(1<<(MySQLStatementParserMASTER-376))|(1<<(MySQLStatementParserMASTER_AUTO_POSITION-376))|(1<<(MySQLStatementParserMASTER_COMPRESSION_ALGORITHM-376))|(1<<(MySQLStatementParserMASTER_CONNECT_RETRY-376))|(1<<(MySQLStatementParserMASTER_DELAY-376))|(1<<(MySQLStatementParserMASTER_HEARTBEAT_PERIOD-376))|(1<<(MySQLStatementParserMASTER_HOST-376))|(1<<(MySQLStatementParserMASTER_LOG_FILE-376))|(1<<(MySQLStatementParserMASTER_LOG_POS-376))|(1<<(MySQLStatementParserMASTER_PASSWORD-376))|(1<<(MySQLStatementParserMASTER_PORT-376))|(1<<(MySQLStatementParserMASTER_PUBLIC_KEY_PATH-376))|(1<<(MySQLStatementParserMASTER_RETRY_COUNT-376))|(1<<(MySQLStatementParserMASTER_SERVER_ID-376))|(1<<(MySQLStatementParserMASTER_SSL-376))|(1<<(MySQLStatementParserMASTER_SSL_CA-376))|(1<<(MySQLStatementParserMASTER_SSL_CAPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_CERT-376))|(1<<(MySQLStatementParserMASTER_SSL_CIPHER-376))|(1<<(MySQLStatementParserMASTER_SSL_CRL-376))|(1<<(MySQLStatementParserMASTER_SSL_CRLPATH-376))|(1<<(MySQLStatementParserMASTER_SSL_KEY-376))|(1<<(MySQLStatementParserMASTER_TLS_CIPHERSUITES-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySQLStatementParserMASTER_TLS_VERSION-408))|(1<<(MySQLStatementParserMASTER_USER-408))|(1<<(MySQLStatementParserMASTER_ZSTD_COMPRESSION_LEVEL-408))|(1<<(MySQLStatementParserMAX_CONNECTIONS_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_QUERIES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_ROWS-408))|(1<<(MySQLStatementParserMAX_SIZE-408))|(1<<(MySQLStatementParserMAX_UPDATES_PER_HOUR-408))|(1<<(MySQLStatementParserMAX_USER_CONNECTIONS-408))|(1<<(MySQLStatementParserMEDIUM-408))|(1<<(MySQLStatementParserMEMBER-408))|(1<<(MySQLStatementParserMEMORY-408))|(1<<(MySQLStatementParserMERGE-408))|(1<<(MySQLStatementParserMESSAGE_TEXT-408))|(1<<(MySQLStatementParserMICROSECOND-408))|(1<<(MySQLStatementParserMIGRATE-408))|(1<<(MySQLStatementParserMINUTE-408))|(1<<(MySQLStatementParserMIN_ROWS-408))|(1<<(MySQLStatementParserMODE-408))|(1<<(MySQLStatementParserMODIFY-408))|(1<<(MySQLStatementParserMONTH-408))|(1<<(MySQLStatementParserMULTILINESTRING-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySQLStatementParserMULTIPOINT-440))|(1<<(MySQLStatementParserMULTIPOLYGON-440))|(1<<(MySQLStatementParserMUTEX-440))|(1<<(MySQLStatementParserMYSQL_ERRNO-440))|(1<<(MySQLStatementParserNAME-440))|(1<<(MySQLStatementParserNAMES-440))|(1<<(MySQLStatementParserNATIONAL-440))|(1<<(MySQLStatementParserNCHAR-440))|(1<<(MySQLStatementParserNDBCLUSTER-440))|(1<<(MySQLStatementParserNESTED-440))|(1<<(MySQLStatementParserNETWORK_NAMESPACE-440))|(1<<(MySQLStatementParserNEVER-440))|(1<<(MySQLStatementParserNEW-440))|(1<<(MySQLStatementParserNEXT-440))|(1<<(MySQLStatementParserNO-440))|(1<<(MySQLStatementParserNODEGROUP-440))|(1<<(MySQLStatementParserNONE-440))|(1<<(MySQLStatementParserNOWAIT-440))|(1<<(MySQLStatementParserNO_WAIT-440))|(1<<(MySQLStatementParserNULLS-440))|(1<<(MySQLStatementParserNUMBER-440))|(1<<(MySQLStatementParserNVARCHAR-440))|(1<<(MySQLStatementParserOFF-440))|(1<<(MySQLStatementParserOFFSET-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySQLStatementParserOJ-472))|(1<<(MySQLStatementParserOLD-472))|(1<<(MySQLStatementParserONE-472))|(1<<(MySQLStatementParserONLY-472))|(1<<(MySQLStatementParserOPEN-472))|(1<<(MySQLStatementParserOPTIONAL-472))|(1<<(MySQLStatementParserOPTIONS-472))|(1<<(MySQLStatementParserORDINALITY-472))|(1<<(MySQLStatementParserORGANIZATION-472))|(1<<(MySQLStatementParserOTHERS-472))|(1<<(MySQLStatementParserOWNER-472))|(1<<(MySQLStatementParserPACK_KEYS-472))|(1<<(MySQLStatementParserPAGE-472))|(1<<(MySQLStatementParserPARSER-472))|(1<<(MySQLStatementParserPARTIAL-472))|(1<<(MySQLStatementParserPARTITIONING-472))|(1<<(MySQLStatementParserPARTITIONS-472))|(1<<(MySQLStatementParserPASSWORD-472))|(1<<(MySQLStatementParserPASSWORD_LOCK_TIME-472))|(1<<(MySQLStatementParserPATH-472)))) != 0) || (((_la-505)&-(0x1f+1)) == 0 && ((1<<uint((_la-505)))&((1<<(MySQLStatementParserPERSIST-505))|(1<<(MySQLStatementParserPERSIST_ONLY-505))|(1<<(MySQLStatementParserPHASE-505))|(1<<(MySQLStatementParserPLUGIN-505))|(1<<(MySQLStatementParserPLUGINS-505))|(1<<(MySQLStatementParserPLUGIN_DIR-505))|(1<<(MySQLStatementParserPOINT-505))|(1<<(MySQLStatementParserPOLYGON-505))|(1<<(MySQLStatementParserPORT-505))|(1<<(MySQLStatementParserPRECEDES-505))|(1<<(MySQLStatementParserPRECEDING-505))|(1<<(MySQLStatementParserPREPARE-505))|(1<<(MySQLStatementParserPRESERVE-505))|(1<<(MySQLStatementParserPREV-505))|(1<<(MySQLStatementParserPRIVILEGES-505))|(1<<(MySQLStatementParserPRIVILEGE_CHECKS_USER-505))|(1<<(MySQLStatementParserPROCESS-505))|(1<<(MySQLStatementParserPROCESSLIST-505))|(1<<(MySQLStatementParserPROFILE-505))|(1<<(MySQLStatementParserPROFILES-505))|(1<<(MySQLStatementParserPROXY-505))|(1<<(MySQLStatementParserQUARTER-505))|(1<<(MySQLStatementParserQUERY-505))|(1<<(MySQLStatementParserQUICK-505))|(1<<(MySQLStatementParserRANDOM-505)))) != 0) || (((_la-538)&-(0x1f+1)) == 0 && ((1<<uint((_la-538)))&((1<<(MySQLStatementParserREAD_ONLY-538))|(1<<(MySQLStatementParserREBUILD-538))|(1<<(MySQLStatementParserRECOVER-538))|(1<<(MySQLStatementParserREDO_BUFFER_SIZE-538))|(1<<(MySQLStatementParserREDUNDANT-538))|(1<<(MySQLStatementParserREFERENCE-538))|(1<<(MySQLStatementParserRELAY-538))|(1<<(MySQLStatementParserRELAYLOG-538))|(1<<(MySQLStatementParserRELAY_LOG_FILE-538))|(1<<(MySQLStatementParserRELAY_LOG_POS-538))|(1<<(MySQLStatementParserRELAY_THREAD-538))|(1<<(MySQLStatementParserRELOAD-538))|(1<<(MySQLStatementParserREMOVE-538))|(1<<(MySQLStatementParserREORGANIZE-538))|(1<<(MySQLStatementParserREPAIR-538))|(1<<(MySQLStatementParserREPEATABLE-538))|(1<<(MySQLStatementParserREPLICATE_DO_DB-538))|(1<<(MySQLStatementParserREPLICATE_DO_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_DB-538))|(1<<(MySQLStatementParserREPLICATE_IGNORE_TABLE-538))|(1<<(MySQLStatementParserREPLICATE_REWRITE_DB-538)))) != 0) || (((_la-570)&-(0x1f+1)) == 0 && ((1<<uint((_la-570)))&((1<<(MySQLStatementParserREPLICATE_WILD_DO_TABLE-570))|(1<<(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE-570))|(1<<(MySQLStatementParserREPLICATION-570))|(1<<(MySQLStatementParserREQUIRE_ROW_FORMAT-570))|(1<<(MySQLStatementParserRESET-570))|(1<<(MySQLStatementParserRESOURCE-570))|(1<<(MySQLStatementParserRESPECT-570))|(1<<(MySQLStatementParserRESTART-570))|(1<<(MySQLStatementParserRESTORE-570))|(1<<(MySQLStatementParserRESUME-570))|(1<<(MySQLStatementParserRETAIN-570))|(1<<(MySQLStatementParserRETURNED_SQLSTATE-570))|(1<<(MySQLStatementParserRETURNING-570))|(1<<(MySQLStatementParserRETURNS-570))|(1<<(MySQLStatementParserREUSE-570))|(1<<(MySQLStatementParserREVERSE-570))|(1<<(MySQLStatementParserROLE-570))|(1<<(MySQLStatementParserROLLBACK-570))|(1<<(MySQLStatementParserROLLUP-570))|(1<<(MySQLStatementParserROTATE-570))|(1<<(MySQLStatementParserROUTINE-570))|(1<<(MySQLStatementParserROW_COUNT-570))|(1<<(MySQLStatementParserROW_FORMAT-570)))) != 0) || (((_la-603)&-(0x1f+1)) == 0 && ((1<<uint((_la-603)))&((1<<(MySQLStatementParserRTREE-603))|(1<<(MySQLStatementParserSAVEPOINT-603))|(1<<(MySQLStatementParserSCHEDULE-603))|(1<<(MySQLStatementParserSCHEMA_NAME-603))|(1<<(MySQLStatementParserSECOND-603))|(1<<(MySQLStatementParserSECONDARY-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE-603))|(1<<(MySQLStatementParserSECONDARY_ENGINE_ATTRIBUTE-603))|(1<<(MySQLStatementParserSECONDARY_LOAD-603))|(1<<(MySQLStatementParserSECONDARY_UNLOAD-603))|(1<<(MySQLStatementParserSECURITY-603))|(1<<(MySQLStatementParserSERIAL-603))|(1<<(MySQLStatementParserSERIALIZABLE-603))|(1<<(MySQLStatementParserSERVER-603))|(1<<(MySQLStatementParserSESSION-603))|(1<<(MySQLStatementParserSHARE-603))|(1<<(MySQLStatementParserSHUTDOWN-603))|(1<<(MySQLStatementParserSIGNED-603))|(1<<(MySQLStatementParserSIMPLE-603))|(1<<(MySQLStatementParserSLAVE-603))|(1<<(MySQLStatementParserSLOW-603)))) != 0) || (((_la-635)&-(0x1f+1)) == 0 && ((1<<uint((_la-635)))&((1<<(MySQLStatementParserSNAPSHOT-635))|(1<<(MySQLStatementParserSOCKET-635))|(1<<(MySQLStatementParserSONAME-635))|(1<<(MySQLStatementParserSOUNDS-635))|(1<<(MySQLStatementParserSOURCE-635))|(1<<(MySQLStatementParserSQL_AFTER_GTIDS-635))|(1<<(MySQLStatementParserSQL_AFTER_MTS_GAPS-635))|(1<<(MySQLStatementParserSQL_BEFORE_GTIDS-635))|(1<<(MySQLStatementParserSQL_BUFFER_RESULT-635))|(1<<(MySQLStatementParserSQL_NO_CACHE-635))|(1<<(MySQLStatementParserSQL_THREAD-635))|(1<<(MySQLStatementParserSRID-635))|(1<<(MySQLStatementParserSTACKED-635))|(1<<(MySQLStatementParserSTART-635))|(1<<(MySQLStatementParserSTARTS-635))|(1<<(MySQLStatementParserSTATS_AUTO_RECALC-635))|(1<<(MySQLStatementParserSTATS_PERSISTENT-635))|(1<<(MySQLStatementParserSTATS_SAMPLE_PAGES-635))|(1<<(MySQLStatementParserSTATUS-635))|(1<<(MySQLStatementParserSTOP-635))|(1<<(MySQLStatementParserSTORAGE-635)))) != 0) || (((_la-669)&-(0x1f+1)) == 0 && ((1<<uint((_la-669)))&((1<<(MySQLStatementParserSTREAM-669))|(1<<(MySQLStatementParserSTRING-669))|(1<<(MySQLStatementParserSUBCLASS_ORIGIN-669))|(1<<(MySQLStatementParserSUBJECT-669))|(1<<(MySQLStatementParserSUBPARTITION-669))|(1<<(MySQLStatementParserSUBPARTITIONS-669))|(1<<(MySQLStatementParserSUPER-669))|(1<<(MySQLStatementParserSUSPEND-669))|(1<<(MySQLStatementParserSWAPS-669))|(1<<(MySQLStatementParserSWITCHES-669))|(1<<(MySQLStatementParserTABLES-669))|(1<<(MySQLStatementParserTABLESPACE-669))|(1<<(MySQLStatementParserTABLE_CHECKSUM-669))|(1<<(MySQLStatementParserTABLE_NAME-669))|(1<<(MySQLStatementParserTEMPORARY-669))|(1<<(MySQLStatementParserTEMPTABLE-669))|(1<<(MySQLStatementParserTEXT-669))|(1<<(MySQLStatementParserTHAN-669))|(1<<(MySQLStatementParserTHREAD_PRIORITY-669))|(1<<(MySQLStatementParserTIES-669))|(1<<(MySQLStatementParserTIME-669))|(1<<(MySQLStatementParserTIMESTAMP-669))|(1<<(MySQLStatementParserTIMESTAMP_ADD-669))|(1<<(MySQLStatementParserTIMESTAMP_DIFF-669))|(1<<(MySQLStatementParserTLS-669)))) != 0) || (((_la-703)&-(0x1f+1)) == 0 && ((1<<uint((_la-703)))&((1<<(MySQLStatementParserTRANSACTION-703))|(1<<(MySQLStatementParserTRIGGERS-703))|(1<<(MySQLStatementParserTRUNCATE-703))|(1<<(MySQLStatementParserTYPE-703))|(1<<(MySQLStatementParserTYPES-703))|(1<<(MySQLStatementParserUNBOUNDED-703))|(1<<(MySQLStatementParserUNCOMMITTED-703))|(1<<(MySQLStatementParserUNDEFINED-703))|(1<<(MySQLStatementParserUNDOFILE-703))|(1<<(MySQLStatementParserUNDO_BUFFER_SIZE-703))|(1<<(MySQLStatementParserUNICODE-703))|(1<<(MySQLStatementParserUNINSTALL-703))|(1<<(MySQLStatementParserUNKNOWN-703))|(1<<(MySQLStatementParserUNTIL-703))|(1<<(MySQLStatementParserUPGRADE-703))|(1<<(MySQLStatementParserUSER-703))|(1<<(MySQLStatementParserUSER_RESOURCES-703))|(1<<(MySQLStatementParserUSE_FRM-703)))) != 0) || (((_la-735)&-(0x1f+1)) == 0 && ((1<<uint((_la-735)))&((1<<(MySQLStatementParserVALIDATION-735))|(1<<(MySQLStatementParserVALUE-735))|(1<<(MySQLStatementParserVARIABLES-735))|(1<<(MySQLStatementParserVCPU-735))|(1<<(MySQLStatementParserVIEW-735))|(1<<(MySQLStatementParserVISIBLE-735))|(1<<(MySQLStatementParserWAIT-735))|(1<<(MySQLStatementParserWARNINGS-735))|(1<<(MySQLStatementParserWEEK-735))|(1<<(MySQLStatementParserWEIGHT_STRING-735))|(1<<(MySQLStatementParserWITHOUT-735))|(1<<(MySQLStatementParserWORK-735))|(1<<(MySQLStatementParserWRAPPER-735))|(1<<(MySQLStatementParserX509-735))|(1<<(MySQLStatementParserXA-735))|(1<<(MySQLStatementParserXID-735))|(1<<(MySQLStatementParserXML-735))|(1<<(MySQLStatementParserYEAR-735)))) != 0) || _la == MySQLStatementParserIDENTIFIER_ || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
			{
				p.SetState(7968)
				p.TableList()
			}

		}
		{
			p.SetState(7971)
			p.Match(MySQLStatementParserRP_)
		}

	case MySQLStatementParserREPLICATE_WILD_DO_TABLE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(7972)
			p.Match(MySQLStatementParserREPLICATE_WILD_DO_TABLE)
		}
		{
			p.SetState(7973)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7974)
			p.Match(MySQLStatementParserLP_)
		}
		p.SetState(7976)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserSINGLE_QUOTED_TEXT || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
			{
				p.SetState(7975)
				p.WildTables()
			}

		}
		{
			p.SetState(7978)
			p.Match(MySQLStatementParserRP_)
		}

	case MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(7979)
			p.Match(MySQLStatementParserREPLICATE_WILD_IGNORE_TABLE)
		}
		{
			p.SetState(7980)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7981)
			p.Match(MySQLStatementParserLP_)
		}
		p.SetState(7983)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserSINGLE_QUOTED_TEXT || _la == MySQLStatementParserDOUBLE_QUOTED_TEXT {
			{
				p.SetState(7982)
				p.WildTables()
			}

		}
		{
			p.SetState(7985)
			p.Match(MySQLStatementParserRP_)
		}

	case MySQLStatementParserREPLICATE_REWRITE_DB:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(7986)
			p.Match(MySQLStatementParserREPLICATE_REWRITE_DB)
		}
		{
			p.SetState(7987)
			p.Match(MySQLStatementParserEQ_)
		}
		{
			p.SetState(7988)
			p.Match(MySQLStatementParserLP_)
		}
		p.SetState(7990)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySQLStatementParserLP_ {
			{
				p.SetState(7989)
				p.SchemaPairs()
			}

		}
		{
			p.SetState(7992)
			p.Match(MySQLStatementParserRP_)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWildTablesContext is an interface to support dynamic dispatch.
type IWildTablesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWildTablesContext differentiates from other interfaces.
	IsWildTablesContext()
}

type WildTablesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWildTablesContext() *WildTablesContext {
	var p = new(WildTablesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_wildTables
	return p
}

func (*WildTablesContext) IsWildTablesContext() {}

func NewWildTablesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WildTablesContext {
	var p = new(WildTablesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_wildTables

	return p
}

func (s *WildTablesContext) GetParser() antlr.Parser { return s.parser }

func (s *WildTablesContext) AllWildTable() []IWildTableContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWildTableContext)(nil)).Elem())
	var tst = make([]IWildTableContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWildTableContext)
		}
	}

	return tst
}

func (s *WildTablesContext) WildTable(i int) IWildTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWildTableContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWildTableContext)
}

func (s *WildTablesContext) AllCOMMA_() []antlr.TerminalNode {
	return s.GetTokens(MySQLStatementParserCOMMA_)
}

func (s *WildTablesContext) COMMA_(i int) antlr.TerminalNode {
	return s.GetToken(MySQLStatementParserCOMMA_, i)
}

func (s *WildTablesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WildTablesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WildTablesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterWildTables(s)
	}
}

func (s *WildTablesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitWildTables(s)
	}
}

func (s *WildTablesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitWildTables(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) WildTables() (localctx IWildTablesContext) {
	this := p
	_ = this

	localctx = NewWildTablesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1146, MySQLStatementParserRULE_wildTables)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7995)
		p.WildTable()
	}
	p.SetState(8000)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySQLStatementParserCOMMA_ {
		{
			p.SetState(7996)
			p.Match(MySQLStatementParserCOMMA_)
		}
		{
			p.SetState(7997)
			p.WildTable()
		}

		p.SetState(8002)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IWildTableContext is an interface to support dynamic dispatch.
type IWildTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWildTableContext differentiates from other interfaces.
	IsWildTableContext()
}

type WildTableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWildTableContext() *WildTableContext {
	var p = new(WildTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySQLStatementParserRULE_wildTable
	return p
}

func (*WildTableContext) IsWildTableContext() {}

func NewWildTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WildTableContext {
	var p = new(WildTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySQLStatementParserRULE_wildTable

	return p
}

func (s *WildTableContext) GetParser() antlr.Parser { return s.parser }

func (s *WildTableContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *WildTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WildTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WildTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.EnterWildTable(s)
	}
}

func (s *WildTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySQLStatementListener); ok {
		listenerT.ExitWildTable(s)
	}
}

func (s *WildTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySQLStatementVisitor:
		return t.VisitWildTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySQLStatementParser) WildTable() (localctx IWildTableContext) {
	this := p
	_ = this

	localctx = NewWildTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1148, MySQLStatementParserRULE_wildTable)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8003)
		p.String_()
	}

	return localctx
}

func (p *MySQLStatementParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 29:
		var t *QueryExpressionBodyContext = nil
		if localctx != nil {
			t = localctx.(*QueryExpressionBodyContext)
		}
		return p.QueryExpressionBody_Sempred(t, predIndex)

	case 163:
		var t *ExprContext = nil
		if localctx != nil {
			t = localctx.(*ExprContext)
		}
		return p.Expr_Sempred(t, predIndex)

	case 167:
		var t *BooleanPrimaryContext = nil
		if localctx != nil {
			t = localctx.(*BooleanPrimaryContext)
		}
		return p.BooleanPrimary_Sempred(t, predIndex)

	case 171:
		var t *BitExprContext = nil
		if localctx != nil {
			t = localctx.(*BitExprContext)
		}
		return p.BitExpr_Sempred(t, predIndex)

	case 172:
		var t *SimpleExprContext = nil
		if localctx != nil {
			t = localctx.(*SimpleExprContext)
		}
		return p.SimpleExpr_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *MySQLStatementParser) QueryExpressionBody_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *MySQLStatementParser) Expr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *MySQLStatementParser) BooleanPrimary_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 4:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *MySQLStatementParser) BitExpr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 9:
		return p.Precpred(p.GetParserRuleContext(), 15)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 15:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 16:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 17:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 18:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 19:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 20:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 21:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 22:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *MySQLStatementParser) SimpleExpr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 23:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 24:
		return p.Precpred(p.GetParserRuleContext(), 11)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
